;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/states/api
  (:use)
  (:nicknames #:aws/states)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/json-request)
  (:import-from #:aws-sdk/rest-json-request)
  (:import-from #:aws-sdk/rest-xml-request)
  (:import-from #:aws-sdk/query-request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/states/api)
(common-lisp:progn
 (common-lisp:define-condition states-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'states-error))
(common-lisp:progn
 (common-lisp:defclass states-request (aws-sdk/json-request:json-request)
                       common-lisp:nil
                       (:default-initargs :service "states" :api-version
                        "2016-11-23" :host-prefix "states" :signing-name
                        common-lisp:nil :global-host common-lisp:nil
                        :target-prefix "AWSStepFunctions" :json-version "1.0"))
 (common-lisp:export 'states-request))
(common-lisp:defvar *error-map*
  '(("ActivityDoesNotExist" . activity-does-not-exist)
    ("ActivityLimitExceeded" . activity-limit-exceeded)
    ("ActivityWorkerLimitExceeded" . activity-worker-limit-exceeded)
    ("ConflictException" . conflict-exception)
    ("ExecutionAlreadyExists" . execution-already-exists)
    ("ExecutionDoesNotExist" . execution-does-not-exist)
    ("ExecutionLimitExceeded" . execution-limit-exceeded)
    ("ExecutionNotRedrivable" . execution-not-redrivable)
    ("InvalidArn" . invalid-arn) ("InvalidDefinition" . invalid-definition)
    ("InvalidExecutionInput" . invalid-execution-input)
    ("InvalidLoggingConfiguration" . invalid-logging-configuration)
    ("InvalidName" . invalid-name) ("InvalidOutput" . invalid-output)
    ("InvalidToken" . invalid-token)
    ("InvalidTracingConfiguration" . invalid-tracing-configuration)
    ("MissingRequiredParameter" . missing-required-parameter)
    ("ResourceNotFound" . resource-not-found)
    ("ServiceQuotaExceededException" . service-quota-exceeded-exception)
    ("StateMachineAlreadyExists" . state-machine-already-exists)
    ("StateMachineDeleting" . state-machine-deleting)
    ("StateMachineDoesNotExist" . state-machine-does-not-exist)
    ("StateMachineLimitExceeded" . state-machine-limit-exceeded)
    ("StateMachineTypeNotSupported" . state-machine-type-not-supported)
    ("TaskDoesNotExist" . task-does-not-exist)
    ("TaskTimedOut" . task-timed-out) ("TooManyTags" . too-many-tags)
    ("ValidationException" . validation-exception)))
(common-lisp:progn
 (common-lisp:define-condition activity-does-not-exist
     (states-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       activity-does-not-exist-message)))
 (common-lisp:export
  (common-lisp:list 'activity-does-not-exist 'activity-does-not-exist-message)))
(common-lisp:progn
 (common-lisp:defclass activity-failed-event-details common-lisp:nil
                       ((error :initarg :error :initform common-lisp:nil :type
                         (common-lisp:or sensitive-error common-lisp:null)
                         :accessor
                         struct-shape-activity-failed-event-details-error
                         :shape "SensitiveError" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cause :initarg :cause :initform common-lisp:nil :type
                         (common-lisp:or sensitive-cause common-lisp:null)
                         :accessor
                         struct-shape-activity-failed-event-details-cause
                         :shape "SensitiveCause" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-activity-failed-event-details
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'activity-failed-event-details
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'activity-failed-event-details
                    'make-activity-failed-event-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          activity-failed-event-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          activity-failed-event-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error))
      (common-lisp:list
       (common-lisp:cons "error"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cause))
      (common-lisp:list
       (common-lisp:cons "cause"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          activity-failed-event-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition activity-limit-exceeded
     (states-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       activity-limit-exceeded-message)))
 (common-lisp:export
  (common-lisp:list 'activity-limit-exceeded 'activity-limit-exceeded-message)))
(common-lisp:progn
 (common-lisp:deftype activity-list ()
   '(trivial-types:proper-list activity-list-item))
 (common-lisp:defun make-activity-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list activity-list-item))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass activity-list-item common-lisp:nil
                       ((activity-arn :initarg :activity-arn :initform
                         (common-lisp:error ":activityarn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-activity-list-item-activity-arn :shape
                         "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-activity-list-item-name :shape "Name"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (creation-date :initarg :creation-date :initform
                         (common-lisp:error ":creationdate is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-activity-list-item-creation-date :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-activity-list-item
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'activity-list-item
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'activity-list-item 'make-activity-list-item))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input activity-list-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input activity-list-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'activity-arn))
      (common-lisp:list
       (common-lisp:cons "activityArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "creationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input activity-list-item))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass activity-schedule-failed-event-details common-lisp:nil
                       ((error :initarg :error :initform common-lisp:nil :type
                         (common-lisp:or sensitive-error common-lisp:null)
                         :accessor
                         struct-shape-activity-schedule-failed-event-details-error
                         :shape "SensitiveError" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cause :initarg :cause :initform common-lisp:nil :type
                         (common-lisp:or sensitive-cause common-lisp:null)
                         :accessor
                         struct-shape-activity-schedule-failed-event-details-cause
                         :shape "SensitiveCause" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-activity-schedule-failed-event-details
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'activity-schedule-failed-event-details
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'activity-schedule-failed-event-details
                    'make-activity-schedule-failed-event-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          activity-schedule-failed-event-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          activity-schedule-failed-event-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error))
      (common-lisp:list
       (common-lisp:cons "error"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cause))
      (common-lisp:list
       (common-lisp:cons "cause"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          activity-schedule-failed-event-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass activity-scheduled-event-details common-lisp:nil
                       ((resource :initarg :resource :initform
                         (common-lisp:error ":resource is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-activity-scheduled-event-details-resource
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (input :initarg :input :initform common-lisp:nil :type
                         (common-lisp:or sensitive-data common-lisp:null)
                         :accessor
                         struct-shape-activity-scheduled-event-details-input
                         :shape "SensitiveData" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (input-details :initarg :input-details :initform
                         common-lisp:nil :type
                         (common-lisp:or history-event-execution-data-details
                                         common-lisp:null)
                         :accessor
                         struct-shape-activity-scheduled-event-details-input-details
                         :shape "HistoryEventExecutionDataDetails" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (timeout-in-seconds :initarg :timeout-in-seconds
                         :initform common-lisp:nil :type
                         (common-lisp:or timeout-in-seconds common-lisp:null)
                         :accessor
                         struct-shape-activity-scheduled-event-details-timeout-in-seconds
                         :shape "TimeoutInSeconds" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (heartbeat-in-seconds :initarg :heartbeat-in-seconds
                         :initform common-lisp:nil :type
                         (common-lisp:or timeout-in-seconds common-lisp:null)
                         :accessor
                         struct-shape-activity-scheduled-event-details-heartbeat-in-seconds
                         :shape "TimeoutInSeconds" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-activity-scheduled-event-details
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'activity-scheduled-event-details
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'activity-scheduled-event-details
                    'make-activity-scheduled-event-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          activity-scheduled-event-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          activity-scheduled-event-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource))
      (common-lisp:list
       (common-lisp:cons "resource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input))
      (common-lisp:list
       (common-lisp:cons "input"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-details))
      (common-lisp:list
       (common-lisp:cons "inputDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timeout-in-seconds))
      (common-lisp:list
       (common-lisp:cons "timeoutInSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'heartbeat-in-seconds))
      (common-lisp:list
       (common-lisp:cons "heartbeatInSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          activity-scheduled-event-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass activity-started-event-details common-lisp:nil
                       ((worker-name :initarg :worker-name :initform
                         common-lisp:nil :type
                         (common-lisp:or identity common-lisp:null) :accessor
                         struct-shape-activity-started-event-details-worker-name
                         :shape "Identity" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-activity-started-event-details
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'activity-started-event-details
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'activity-started-event-details
                    'make-activity-started-event-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          activity-started-event-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          activity-started-event-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'worker-name))
      (common-lisp:list
       (common-lisp:cons "workerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          activity-started-event-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass activity-succeeded-event-details common-lisp:nil
                       ((output :initarg :output :initform common-lisp:nil
                         :type (common-lisp:or sensitive-data common-lisp:null)
                         :accessor
                         struct-shape-activity-succeeded-event-details-output
                         :shape "SensitiveData" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (output-details :initarg :output-details :initform
                         common-lisp:nil :type
                         (common-lisp:or history-event-execution-data-details
                                         common-lisp:null)
                         :accessor
                         struct-shape-activity-succeeded-event-details-output-details
                         :shape "HistoryEventExecutionDataDetails" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-activity-succeeded-event-details
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'activity-succeeded-event-details
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'activity-succeeded-event-details
                    'make-activity-succeeded-event-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          activity-succeeded-event-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          activity-succeeded-event-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output))
      (common-lisp:list
       (common-lisp:cons "output"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-details))
      (common-lisp:list
       (common-lisp:cons "outputDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          activity-succeeded-event-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass activity-timed-out-event-details common-lisp:nil
                       ((error :initarg :error :initform common-lisp:nil :type
                         (common-lisp:or sensitive-error common-lisp:null)
                         :accessor
                         struct-shape-activity-timed-out-event-details-error
                         :shape "SensitiveError" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cause :initarg :cause :initform common-lisp:nil :type
                         (common-lisp:or sensitive-cause common-lisp:null)
                         :accessor
                         struct-shape-activity-timed-out-event-details-cause
                         :shape "SensitiveCause" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-activity-timed-out-event-details
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'activity-timed-out-event-details
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'activity-timed-out-event-details
                    'make-activity-timed-out-event-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          activity-timed-out-event-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          activity-timed-out-event-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error))
      (common-lisp:list
       (common-lisp:cons "error"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cause))
      (common-lisp:list
       (common-lisp:cons "cause"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          activity-timed-out-event-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition activity-worker-limit-exceeded
     (states-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       activity-worker-limit-exceeded-message)))
 (common-lisp:export
  (common-lisp:list 'activity-worker-limit-exceeded
                    'activity-worker-limit-exceeded-message)))
(common-lisp:deftype alias-description () 'common-lisp:string)
(common-lisp:deftype arn () 'common-lisp:string)
(common-lisp:deftype billed-duration () 'common-lisp:integer)
(common-lisp:deftype billed-memory-used () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass billing-details common-lisp:nil
                       ((billed-memory-used-in-mb :initarg
                         :billed-memory-used-in-mb :initform common-lisp:nil
                         :type
                         (common-lisp:or billed-memory-used common-lisp:null)
                         :accessor
                         struct-shape-billing-details-billed-memory-used-in-mb
                         :shape "BilledMemoryUsed" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (billed-duration-in-milliseconds :initarg
                         :billed-duration-in-milliseconds :initform
                         common-lisp:nil :type
                         (common-lisp:or billed-duration common-lisp:null)
                         :accessor
                         struct-shape-billing-details-billed-duration-in-milliseconds
                         :shape "BilledDuration" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-billing-details
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'billing-details
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'billing-details 'make-billing-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input billing-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input billing-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'billed-memory-used-in-mb))
      (common-lisp:list
       (common-lisp:cons "billedMemoryUsedInMB"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'billed-duration-in-milliseconds))
      (common-lisp:list
       (common-lisp:cons "billedDurationInMilliseconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input billing-details))
   common-lisp:nil))
(common-lisp:deftype character-restricted-name () 'common-lisp:string)
(common-lisp:deftype client-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass cloud-watch-events-execution-data-details
                       common-lisp:nil
                       ((included :initarg :included :initform common-lisp:nil
                         :type
                         (common-lisp:or |includedDetails| common-lisp:null)
                         :accessor
                         struct-shape-cloud-watch-events-execution-data-details-included
                         :shape "includedDetails" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-cloud-watch-events-execution-data-details
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'cloud-watch-events-execution-data-details
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'cloud-watch-events-execution-data-details
                    'make-cloud-watch-events-execution-data-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cloud-watch-events-execution-data-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cloud-watch-events-execution-data-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'included))
      (common-lisp:list
       (common-lisp:cons "included"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cloud-watch-events-execution-data-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass cloud-watch-logs-log-group common-lisp:nil
                       ((log-group-arn :initarg :log-group-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-cloud-watch-logs-log-group-log-group-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-cloud-watch-logs-log-group
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'cloud-watch-logs-log-group
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'cloud-watch-logs-log-group
                    'make-cloud-watch-logs-log-group))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cloud-watch-logs-log-group))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cloud-watch-logs-log-group))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-group-arn))
      (common-lisp:list
       (common-lisp:cons "logGroupArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cloud-watch-logs-log-group))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition conflict-exception
     (states-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       conflict-exception-message)))
 (common-lisp:export
  (common-lisp:list 'conflict-exception 'conflict-exception-message)))
(common-lisp:deftype connector-parameters () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass create-activity-input common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-create-activity-input-name :shape "Name"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-create-activity-input-tags :shape
                         "TagList" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-activity-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-activity-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-activity-input 'make-create-activity-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-activity-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-activity-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-activity-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-activity-output common-lisp:nil
                       ((activity-arn :initarg :activity-arn :initform
                         (common-lisp:error ":activityarn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-create-activity-output-activity-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (creation-date :initarg :creation-date :initform
                         (common-lisp:error ":creationdate is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-create-activity-output-creation-date
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-activity-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-activity-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-activity-output 'make-create-activity-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-activity-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-activity-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'activity-arn))
      (common-lisp:list
       (common-lisp:cons "activityArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "creationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-activity-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-state-machine-alias-input common-lisp:nil
                       ((description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or alias-description common-lisp:null)
                         :accessor
                         struct-shape-create-state-machine-alias-input-description
                         :shape "AliasDescription" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or character-restricted-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-state-machine-alias-input-name
                         :shape "CharacterRestrictedName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (routing-configuration :initarg :routing-configuration
                         :initform
                         (common-lisp:error
                          ":routingconfiguration is required")
                         :type
                         (common-lisp:or routing-configuration-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-state-machine-alias-input-routing-configuration
                         :shape "RoutingConfigurationList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-state-machine-alias-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-state-machine-alias-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-state-machine-alias-input
                    'make-create-state-machine-alias-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-state-machine-alias-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-state-machine-alias-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'routing-configuration))
      (common-lisp:list
       (common-lisp:cons "routingConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-state-machine-alias-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-state-machine-alias-output common-lisp:nil
                       ((state-machine-alias-arn :initarg
                         :state-machine-alias-arn :initform
                         (common-lisp:error
                          ":statemachinealiasarn is required")
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-create-state-machine-alias-output-state-machine-alias-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (creation-date :initarg :creation-date :initform
                         (common-lisp:error ":creationdate is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-create-state-machine-alias-output-creation-date
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-state-machine-alias-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-state-machine-alias-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-state-machine-alias-output
                    'make-create-state-machine-alias-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-state-machine-alias-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-state-machine-alias-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'state-machine-alias-arn))
      (common-lisp:list
       (common-lisp:cons "stateMachineAliasArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "creationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-state-machine-alias-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-state-machine-input common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-create-state-machine-input-name :shape
                         "Name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (definition :initarg :definition :initform
                         (common-lisp:error ":definition is required") :type
                         (common-lisp:or definition common-lisp:null) :accessor
                         struct-shape-create-state-machine-input-definition
                         :shape "Definition" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (role-arn :initarg :role-arn :initform
                         (common-lisp:error ":rolearn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-create-state-machine-input-role-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or state-machine-type common-lisp:null)
                         :accessor struct-shape-create-state-machine-input-type
                         :shape "StateMachineType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (logging-configuration :initarg :logging-configuration
                         :initform common-lisp:nil :type
                         (common-lisp:or logging-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-state-machine-input-logging-configuration
                         :shape "LoggingConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-create-state-machine-input-tags :shape
                         "TagList" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (tracing-configuration :initarg :tracing-configuration
                         :initform common-lisp:nil :type
                         (common-lisp:or tracing-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-state-machine-input-tracing-configuration
                         :shape "TracingConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (publish :initarg :publish :initform common-lisp:nil
                         :type (common-lisp:or publish common-lisp:null)
                         :accessor
                         struct-shape-create-state-machine-input-publish :shape
                         "Publish" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (version-description :initarg :version-description
                         :initform common-lisp:nil :type
                         (common-lisp:or version-description common-lisp:null)
                         :accessor
                         struct-shape-create-state-machine-input-version-description
                         :shape "VersionDescription" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-state-machine-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-state-machine-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-state-machine-input
                    'make-create-state-machine-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-state-machine-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-state-machine-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'definition))
      (common-lisp:list
       (common-lisp:cons "definition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'logging-configuration))
      (common-lisp:list
       (common-lisp:cons "loggingConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'tracing-configuration))
      (common-lisp:list
       (common-lisp:cons "tracingConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'publish))
      (common-lisp:list
       (common-lisp:cons "publish"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-description))
      (common-lisp:list
       (common-lisp:cons "versionDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-state-machine-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-state-machine-output common-lisp:nil
                       ((state-machine-arn :initarg :state-machine-arn
                         :initform
                         (common-lisp:error ":statemachinearn is required")
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-create-state-machine-output-state-machine-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (creation-date :initarg :creation-date :initform
                         (common-lisp:error ":creationdate is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-create-state-machine-output-creation-date
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (state-machine-version-arn :initarg
                         :state-machine-version-arn :initform common-lisp:nil
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-create-state-machine-output-state-machine-version-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-state-machine-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-state-machine-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-state-machine-output
                    'make-create-state-machine-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-state-machine-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-state-machine-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state-machine-arn))
      (common-lisp:list
       (common-lisp:cons "stateMachineArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "creationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'state-machine-version-arn))
      (common-lisp:list
       (common-lisp:cons "stateMachineVersionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-state-machine-output))
   common-lisp:nil))
(common-lisp:deftype definition () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass delete-activity-input common-lisp:nil
                       ((activity-arn :initarg :activity-arn :initform
                         (common-lisp:error ":activityarn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-delete-activity-input-activity-arn :shape
                         "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-activity-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-activity-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-activity-input 'make-delete-activity-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-activity-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-activity-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'activity-arn))
      (common-lisp:list
       (common-lisp:cons "activityArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-activity-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-activity-output common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-activity-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-activity-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-activity-output 'make-delete-activity-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-activity-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-activity-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-activity-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-state-machine-alias-input common-lisp:nil
                       ((state-machine-alias-arn :initarg
                         :state-machine-alias-arn :initform
                         (common-lisp:error
                          ":statemachinealiasarn is required")
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-delete-state-machine-alias-input-state-machine-alias-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-state-machine-alias-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-state-machine-alias-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-state-machine-alias-input
                    'make-delete-state-machine-alias-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-state-machine-alias-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-state-machine-alias-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'state-machine-alias-arn))
      (common-lisp:list
       (common-lisp:cons "stateMachineAliasArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-state-machine-alias-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-state-machine-alias-output common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-state-machine-alias-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-state-machine-alias-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-state-machine-alias-output
                    'make-delete-state-machine-alias-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-state-machine-alias-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-state-machine-alias-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-state-machine-alias-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-state-machine-input common-lisp:nil
                       ((state-machine-arn :initarg :state-machine-arn
                         :initform
                         (common-lisp:error ":statemachinearn is required")
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-delete-state-machine-input-state-machine-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-state-machine-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-state-machine-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-state-machine-input
                    'make-delete-state-machine-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-state-machine-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-state-machine-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state-machine-arn))
      (common-lisp:list
       (common-lisp:cons "stateMachineArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-state-machine-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-state-machine-output common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-state-machine-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-state-machine-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-state-machine-output
                    'make-delete-state-machine-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-state-machine-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-state-machine-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-state-machine-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-state-machine-version-input common-lisp:nil
                       ((state-machine-version-arn :initarg
                         :state-machine-version-arn :initform
                         (common-lisp:error
                          ":statemachineversionarn is required")
                         :type (common-lisp:or long-arn common-lisp:null)
                         :accessor
                         struct-shape-delete-state-machine-version-input-state-machine-version-arn
                         :shape "LongArn" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-state-machine-version-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-state-machine-version-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-state-machine-version-input
                    'make-delete-state-machine-version-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-state-machine-version-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-state-machine-version-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'state-machine-version-arn))
      (common-lisp:list
       (common-lisp:cons "stateMachineVersionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-state-machine-version-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-state-machine-version-output common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-state-machine-version-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-state-machine-version-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-state-machine-version-output
                    'make-delete-state-machine-version-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-state-machine-version-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-state-machine-version-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-state-machine-version-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-activity-input common-lisp:nil
                       ((activity-arn :initarg :activity-arn :initform
                         (common-lisp:error ":activityarn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-describe-activity-input-activity-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-activity-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-activity-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-activity-input 'make-describe-activity-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-activity-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-activity-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'activity-arn))
      (common-lisp:list
       (common-lisp:cons "activityArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-activity-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-activity-output common-lisp:nil
                       ((activity-arn :initarg :activity-arn :initform
                         (common-lisp:error ":activityarn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-describe-activity-output-activity-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-describe-activity-output-name :shape
                         "Name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (creation-date :initarg :creation-date :initform
                         (common-lisp:error ":creationdate is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-describe-activity-output-creation-date
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-activity-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-activity-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-activity-output 'make-describe-activity-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-activity-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-activity-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'activity-arn))
      (common-lisp:list
       (common-lisp:cons "activityArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "creationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-activity-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-execution-input common-lisp:nil
                       ((execution-arn :initarg :execution-arn :initform
                         (common-lisp:error ":executionarn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-describe-execution-input-execution-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-execution-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-execution-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-execution-input 'make-describe-execution-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-execution-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-execution-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execution-arn))
      (common-lisp:list
       (common-lisp:cons "executionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-execution-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-execution-output common-lisp:nil
                       ((execution-arn :initarg :execution-arn :initform
                         (common-lisp:error ":executionarn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-describe-execution-output-execution-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (state-machine-arn :initarg :state-machine-arn
                         :initform
                         (common-lisp:error ":statemachinearn is required")
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-describe-execution-output-state-machine-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-describe-execution-output-name :shape
                         "Name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (status :initarg :status :initform
                         (common-lisp:error ":status is required") :type
                         (common-lisp:or execution-status common-lisp:null)
                         :accessor
                         struct-shape-describe-execution-output-status :shape
                         "ExecutionStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (start-date :initarg :start-date :initform
                         (common-lisp:error ":startdate is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-describe-execution-output-start-date
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (stop-date :initarg :stop-date :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-describe-execution-output-stop-date
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (input :initarg :input :initform common-lisp:nil :type
                         (common-lisp:or sensitive-data common-lisp:null)
                         :accessor struct-shape-describe-execution-output-input
                         :shape "SensitiveData" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (input-details :initarg :input-details :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          cloud-watch-events-execution-data-details
                          common-lisp:null)
                         :accessor
                         struct-shape-describe-execution-output-input-details
                         :shape "CloudWatchEventsExecutionDataDetails"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (output :initarg :output :initform common-lisp:nil
                         :type (common-lisp:or sensitive-data common-lisp:null)
                         :accessor
                         struct-shape-describe-execution-output-output :shape
                         "SensitiveData" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (output-details :initarg :output-details :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          cloud-watch-events-execution-data-details
                          common-lisp:null)
                         :accessor
                         struct-shape-describe-execution-output-output-details
                         :shape "CloudWatchEventsExecutionDataDetails"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (trace-header :initarg :trace-header :initform
                         common-lisp:nil :type
                         (common-lisp:or trace-header common-lisp:null)
                         :accessor
                         struct-shape-describe-execution-output-trace-header
                         :shape "TraceHeader" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (map-run-arn :initarg :map-run-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or long-arn common-lisp:null) :accessor
                         struct-shape-describe-execution-output-map-run-arn
                         :shape "LongArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (error :initarg :error :initform common-lisp:nil :type
                         (common-lisp:or sensitive-error common-lisp:null)
                         :accessor struct-shape-describe-execution-output-error
                         :shape "SensitiveError" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cause :initarg :cause :initform common-lisp:nil :type
                         (common-lisp:or sensitive-cause common-lisp:null)
                         :accessor struct-shape-describe-execution-output-cause
                         :shape "SensitiveCause" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (state-machine-version-arn :initarg
                         :state-machine-version-arn :initform common-lisp:nil
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-describe-execution-output-state-machine-version-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (state-machine-alias-arn :initarg
                         :state-machine-alias-arn :initform common-lisp:nil
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-describe-execution-output-state-machine-alias-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (redrive-count :initarg :redrive-count :initform
                         common-lisp:nil :type
                         (common-lisp:or redrive-count common-lisp:null)
                         :accessor
                         struct-shape-describe-execution-output-redrive-count
                         :shape "RedriveCount" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (redrive-date :initarg :redrive-date :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-describe-execution-output-redrive-date
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (redrive-status :initarg :redrive-status :initform
                         common-lisp:nil :type
                         (common-lisp:or execution-redrive-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-execution-output-redrive-status
                         :shape "ExecutionRedriveStatus" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (redrive-status-reason :initarg :redrive-status-reason
                         :initform common-lisp:nil :type
                         (common-lisp:or sensitive-data common-lisp:null)
                         :accessor
                         struct-shape-describe-execution-output-redrive-status-reason
                         :shape "SensitiveData" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-execution-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-execution-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-execution-output
                    'make-describe-execution-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-execution-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-execution-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execution-arn))
      (common-lisp:list
       (common-lisp:cons "executionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state-machine-arn))
      (common-lisp:list
       (common-lisp:cons "stateMachineArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-date))
      (common-lisp:list
       (common-lisp:cons "startDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stop-date))
      (common-lisp:list
       (common-lisp:cons "stopDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input))
      (common-lisp:list
       (common-lisp:cons "input"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-details))
      (common-lisp:list
       (common-lisp:cons "inputDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output))
      (common-lisp:list
       (common-lisp:cons "output"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-details))
      (common-lisp:list
       (common-lisp:cons "outputDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trace-header))
      (common-lisp:list
       (common-lisp:cons "traceHeader"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'map-run-arn))
      (common-lisp:list
       (common-lisp:cons "mapRunArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error))
      (common-lisp:list
       (common-lisp:cons "error"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cause))
      (common-lisp:list
       (common-lisp:cons "cause"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'state-machine-version-arn))
      (common-lisp:list
       (common-lisp:cons "stateMachineVersionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'state-machine-alias-arn))
      (common-lisp:list
       (common-lisp:cons "stateMachineAliasArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'redrive-count))
      (common-lisp:list
       (common-lisp:cons "redriveCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'redrive-date))
      (common-lisp:list
       (common-lisp:cons "redriveDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'redrive-status))
      (common-lisp:list
       (common-lisp:cons "redriveStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'redrive-status-reason))
      (common-lisp:list
       (common-lisp:cons "redriveStatusReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-execution-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-map-run-input common-lisp:nil
                       ((map-run-arn :initarg :map-run-arn :initform
                         (common-lisp:error ":maprunarn is required") :type
                         (common-lisp:or long-arn common-lisp:null) :accessor
                         struct-shape-describe-map-run-input-map-run-arn :shape
                         "LongArn" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-map-run-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-map-run-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-map-run-input 'make-describe-map-run-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-map-run-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-map-run-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'map-run-arn))
      (common-lisp:list
       (common-lisp:cons "mapRunArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-map-run-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-map-run-output common-lisp:nil
                       ((map-run-arn :initarg :map-run-arn :initform
                         (common-lisp:error ":maprunarn is required") :type
                         (common-lisp:or long-arn common-lisp:null) :accessor
                         struct-shape-describe-map-run-output-map-run-arn
                         :shape "LongArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (execution-arn :initarg :execution-arn :initform
                         (common-lisp:error ":executionarn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-describe-map-run-output-execution-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (status :initarg :status :initform
                         (common-lisp:error ":status is required") :type
                         (common-lisp:or map-run-status common-lisp:null)
                         :accessor struct-shape-describe-map-run-output-status
                         :shape "MapRunStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (start-date :initarg :start-date :initform
                         (common-lisp:error ":startdate is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-describe-map-run-output-start-date :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (stop-date :initarg :stop-date :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-describe-map-run-output-stop-date :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (max-concurrency :initarg :max-concurrency :initform
                         (common-lisp:error ":maxconcurrency is required")
                         :type
                         (common-lisp:or max-concurrency common-lisp:null)
                         :accessor
                         struct-shape-describe-map-run-output-max-concurrency
                         :shape "MaxConcurrency" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tolerated-failure-percentage :initarg
                         :tolerated-failure-percentage :initform
                         (common-lisp:error
                          ":toleratedfailurepercentage is required")
                         :type
                         (common-lisp:or tolerated-failure-percentage
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-map-run-output-tolerated-failure-percentage
                         :shape "ToleratedFailurePercentage" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (tolerated-failure-count :initarg
                         :tolerated-failure-count :initform
                         (common-lisp:error
                          ":toleratedfailurecount is required")
                         :type
                         (common-lisp:or tolerated-failure-count
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-map-run-output-tolerated-failure-count
                         :shape "ToleratedFailureCount" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (item-counts :initarg :item-counts :initform
                         (common-lisp:error ":itemcounts is required") :type
                         (common-lisp:or map-run-item-counts common-lisp:null)
                         :accessor
                         struct-shape-describe-map-run-output-item-counts
                         :shape "MapRunItemCounts" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (execution-counts :initarg :execution-counts :initform
                         (common-lisp:error ":executioncounts is required")
                         :type
                         (common-lisp:or map-run-execution-counts
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-map-run-output-execution-counts
                         :shape "MapRunExecutionCounts" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (redrive-count :initarg :redrive-count :initform
                         common-lisp:nil :type
                         (common-lisp:or redrive-count common-lisp:null)
                         :accessor
                         struct-shape-describe-map-run-output-redrive-count
                         :shape "RedriveCount" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (redrive-date :initarg :redrive-date :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-describe-map-run-output-redrive-date
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-map-run-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-map-run-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-map-run-output 'make-describe-map-run-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-map-run-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-map-run-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'map-run-arn))
      (common-lisp:list
       (common-lisp:cons "mapRunArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execution-arn))
      (common-lisp:list
       (common-lisp:cons "executionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-date))
      (common-lisp:list
       (common-lisp:cons "startDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stop-date))
      (common-lisp:list
       (common-lisp:cons "stopDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-concurrency))
      (common-lisp:list
       (common-lisp:cons "maxConcurrency"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'tolerated-failure-percentage))
      (common-lisp:list
       (common-lisp:cons "toleratedFailurePercentage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'tolerated-failure-count))
      (common-lisp:list
       (common-lisp:cons "toleratedFailureCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'item-counts))
      (common-lisp:list
       (common-lisp:cons "itemCounts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execution-counts))
      (common-lisp:list
       (common-lisp:cons "executionCounts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'redrive-count))
      (common-lisp:list
       (common-lisp:cons "redriveCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'redrive-date))
      (common-lisp:list
       (common-lisp:cons "redriveDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-map-run-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-state-machine-alias-input common-lisp:nil
                       ((state-machine-alias-arn :initarg
                         :state-machine-alias-arn :initform
                         (common-lisp:error
                          ":statemachinealiasarn is required")
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-describe-state-machine-alias-input-state-machine-alias-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-state-machine-alias-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-state-machine-alias-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-state-machine-alias-input
                    'make-describe-state-machine-alias-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-state-machine-alias-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-state-machine-alias-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'state-machine-alias-arn))
      (common-lisp:list
       (common-lisp:cons "stateMachineAliasArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-state-machine-alias-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-state-machine-alias-output common-lisp:nil
                       ((state-machine-alias-arn :initarg
                         :state-machine-alias-arn :initform common-lisp:nil
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-describe-state-machine-alias-output-state-machine-alias-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-describe-state-machine-alias-output-name
                         :shape "Name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or alias-description common-lisp:null)
                         :accessor
                         struct-shape-describe-state-machine-alias-output-description
                         :shape "AliasDescription" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (routing-configuration :initarg :routing-configuration
                         :initform common-lisp:nil :type
                         (common-lisp:or routing-configuration-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-state-machine-alias-output-routing-configuration
                         :shape "RoutingConfigurationList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (creation-date :initarg :creation-date :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-describe-state-machine-alias-output-creation-date
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (update-date :initarg :update-date :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-describe-state-machine-alias-output-update-date
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-state-machine-alias-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-state-machine-alias-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-state-machine-alias-output
                    'make-describe-state-machine-alias-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-state-machine-alias-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-state-machine-alias-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'state-machine-alias-arn))
      (common-lisp:list
       (common-lisp:cons "stateMachineAliasArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'routing-configuration))
      (common-lisp:list
       (common-lisp:cons "routingConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "creationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-date))
      (common-lisp:list
       (common-lisp:cons "updateDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-state-machine-alias-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-state-machine-for-execution-input
                       common-lisp:nil
                       ((execution-arn :initarg :execution-arn :initform
                         (common-lisp:error ":executionarn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-describe-state-machine-for-execution-input-execution-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-state-machine-for-execution-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-state-machine-for-execution-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-state-machine-for-execution-input
                    'make-describe-state-machine-for-execution-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-state-machine-for-execution-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-state-machine-for-execution-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execution-arn))
      (common-lisp:list
       (common-lisp:cons "executionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-state-machine-for-execution-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-state-machine-for-execution-output
                       common-lisp:nil
                       ((state-machine-arn :initarg :state-machine-arn
                         :initform
                         (common-lisp:error ":statemachinearn is required")
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-describe-state-machine-for-execution-output-state-machine-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-describe-state-machine-for-execution-output-name
                         :shape "Name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (definition :initarg :definition :initform
                         (common-lisp:error ":definition is required") :type
                         (common-lisp:or definition common-lisp:null) :accessor
                         struct-shape-describe-state-machine-for-execution-output-definition
                         :shape "Definition" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (role-arn :initarg :role-arn :initform
                         (common-lisp:error ":rolearn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-describe-state-machine-for-execution-output-role-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (update-date :initarg :update-date :initform
                         (common-lisp:error ":updatedate is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-describe-state-machine-for-execution-output-update-date
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (logging-configuration :initarg :logging-configuration
                         :initform common-lisp:nil :type
                         (common-lisp:or logging-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-state-machine-for-execution-output-logging-configuration
                         :shape "LoggingConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (tracing-configuration :initarg :tracing-configuration
                         :initform common-lisp:nil :type
                         (common-lisp:or tracing-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-state-machine-for-execution-output-tracing-configuration
                         :shape "TracingConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (map-run-arn :initarg :map-run-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or long-arn common-lisp:null) :accessor
                         struct-shape-describe-state-machine-for-execution-output-map-run-arn
                         :shape "LongArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (label :initarg :label :initform common-lisp:nil :type
                         (common-lisp:or map-run-label common-lisp:null)
                         :accessor
                         struct-shape-describe-state-machine-for-execution-output-label
                         :shape "MapRunLabel" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (revision-id :initarg :revision-id :initform
                         common-lisp:nil :type
                         (common-lisp:or revision-id common-lisp:null)
                         :accessor
                         struct-shape-describe-state-machine-for-execution-output-revision-id
                         :shape "RevisionId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-state-machine-for-execution-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-state-machine-for-execution-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-state-machine-for-execution-output
                    'make-describe-state-machine-for-execution-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-state-machine-for-execution-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-state-machine-for-execution-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state-machine-arn))
      (common-lisp:list
       (common-lisp:cons "stateMachineArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'definition))
      (common-lisp:list
       (common-lisp:cons "definition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-date))
      (common-lisp:list
       (common-lisp:cons "updateDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'logging-configuration))
      (common-lisp:list
       (common-lisp:cons "loggingConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'tracing-configuration))
      (common-lisp:list
       (common-lisp:cons "tracingConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'map-run-arn))
      (common-lisp:list
       (common-lisp:cons "mapRunArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'label))
      (common-lisp:list
       (common-lisp:cons "label"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'revision-id))
      (common-lisp:list
       (common-lisp:cons "revisionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-state-machine-for-execution-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-state-machine-input common-lisp:nil
                       ((state-machine-arn :initarg :state-machine-arn
                         :initform
                         (common-lisp:error ":statemachinearn is required")
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-describe-state-machine-input-state-machine-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-state-machine-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-state-machine-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-state-machine-input
                    'make-describe-state-machine-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-state-machine-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-state-machine-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state-machine-arn))
      (common-lisp:list
       (common-lisp:cons "stateMachineArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-state-machine-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-state-machine-output common-lisp:nil
                       ((state-machine-arn :initarg :state-machine-arn
                         :initform
                         (common-lisp:error ":statemachinearn is required")
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-describe-state-machine-output-state-machine-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-describe-state-machine-output-name :shape
                         "Name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or state-machine-status common-lisp:null)
                         :accessor
                         struct-shape-describe-state-machine-output-status
                         :shape "StateMachineStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (definition :initarg :definition :initform
                         (common-lisp:error ":definition is required") :type
                         (common-lisp:or definition common-lisp:null) :accessor
                         struct-shape-describe-state-machine-output-definition
                         :shape "Definition" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (role-arn :initarg :role-arn :initform
                         (common-lisp:error ":rolearn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-describe-state-machine-output-role-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (type :initarg :type :initform
                         (common-lisp:error ":type is required") :type
                         (common-lisp:or state-machine-type common-lisp:null)
                         :accessor
                         struct-shape-describe-state-machine-output-type :shape
                         "StateMachineType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (creation-date :initarg :creation-date :initform
                         (common-lisp:error ":creationdate is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-describe-state-machine-output-creation-date
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (logging-configuration :initarg :logging-configuration
                         :initform common-lisp:nil :type
                         (common-lisp:or logging-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-state-machine-output-logging-configuration
                         :shape "LoggingConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (tracing-configuration :initarg :tracing-configuration
                         :initform common-lisp:nil :type
                         (common-lisp:or tracing-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-state-machine-output-tracing-configuration
                         :shape "TracingConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (label :initarg :label :initform common-lisp:nil :type
                         (common-lisp:or map-run-label common-lisp:null)
                         :accessor
                         struct-shape-describe-state-machine-output-label
                         :shape "MapRunLabel" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (revision-id :initarg :revision-id :initform
                         common-lisp:nil :type
                         (common-lisp:or revision-id common-lisp:null)
                         :accessor
                         struct-shape-describe-state-machine-output-revision-id
                         :shape "RevisionId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or version-description common-lisp:null)
                         :accessor
                         struct-shape-describe-state-machine-output-description
                         :shape "VersionDescription" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-state-machine-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-state-machine-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-state-machine-output
                    'make-describe-state-machine-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-state-machine-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-state-machine-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state-machine-arn))
      (common-lisp:list
       (common-lisp:cons "stateMachineArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'definition))
      (common-lisp:list
       (common-lisp:cons "definition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "creationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'logging-configuration))
      (common-lisp:list
       (common-lisp:cons "loggingConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'tracing-configuration))
      (common-lisp:list
       (common-lisp:cons "tracingConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'label))
      (common-lisp:list
       (common-lisp:cons "label"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'revision-id))
      (common-lisp:list
       (common-lisp:cons "revisionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-state-machine-output))
   common-lisp:nil))
(common-lisp:deftype enabled () 'common-lisp:boolean)
(common-lisp:deftype error-message () 'common-lisp:string)
(common-lisp:deftype event-id () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass execution-aborted-event-details common-lisp:nil
                       ((error :initarg :error :initform common-lisp:nil :type
                         (common-lisp:or sensitive-error common-lisp:null)
                         :accessor
                         struct-shape-execution-aborted-event-details-error
                         :shape "SensitiveError" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cause :initarg :cause :initform common-lisp:nil :type
                         (common-lisp:or sensitive-cause common-lisp:null)
                         :accessor
                         struct-shape-execution-aborted-event-details-cause
                         :shape "SensitiveCause" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-execution-aborted-event-details
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'execution-aborted-event-details
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'execution-aborted-event-details
                    'make-execution-aborted-event-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          execution-aborted-event-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          execution-aborted-event-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error))
      (common-lisp:list
       (common-lisp:cons "error"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cause))
      (common-lisp:list
       (common-lisp:cons "cause"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          execution-aborted-event-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition execution-already-exists
     (states-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       execution-already-exists-message)))
 (common-lisp:export
  (common-lisp:list 'execution-already-exists
                    'execution-already-exists-message)))
(common-lisp:progn
 (common-lisp:define-condition execution-does-not-exist
     (states-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       execution-does-not-exist-message)))
 (common-lisp:export
  (common-lisp:list 'execution-does-not-exist
                    'execution-does-not-exist-message)))
(common-lisp:progn
 (common-lisp:defclass execution-failed-event-details common-lisp:nil
                       ((error :initarg :error :initform common-lisp:nil :type
                         (common-lisp:or sensitive-error common-lisp:null)
                         :accessor
                         struct-shape-execution-failed-event-details-error
                         :shape "SensitiveError" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cause :initarg :cause :initform common-lisp:nil :type
                         (common-lisp:or sensitive-cause common-lisp:null)
                         :accessor
                         struct-shape-execution-failed-event-details-cause
                         :shape "SensitiveCause" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-execution-failed-event-details
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'execution-failed-event-details
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'execution-failed-event-details
                    'make-execution-failed-event-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          execution-failed-event-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          execution-failed-event-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error))
      (common-lisp:list
       (common-lisp:cons "error"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cause))
      (common-lisp:list
       (common-lisp:cons "cause"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          execution-failed-event-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition execution-limit-exceeded
     (states-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       execution-limit-exceeded-message)))
 (common-lisp:export
  (common-lisp:list 'execution-limit-exceeded
                    'execution-limit-exceeded-message)))
(common-lisp:progn
 (common-lisp:deftype execution-list ()
   '(trivial-types:proper-list execution-list-item))
 (common-lisp:defun make-execution-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list execution-list-item))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass execution-list-item common-lisp:nil
                       ((execution-arn :initarg :execution-arn :initform
                         (common-lisp:error ":executionarn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-execution-list-item-execution-arn :shape
                         "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (state-machine-arn :initarg :state-machine-arn
                         :initform
                         (common-lisp:error ":statemachinearn is required")
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-execution-list-item-state-machine-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-execution-list-item-name :shape "Name"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (status :initarg :status :initform
                         (common-lisp:error ":status is required") :type
                         (common-lisp:or execution-status common-lisp:null)
                         :accessor struct-shape-execution-list-item-status
                         :shape "ExecutionStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (start-date :initarg :start-date :initform
                         (common-lisp:error ":startdate is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-execution-list-item-start-date :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (stop-date :initarg :stop-date :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-execution-list-item-stop-date :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (map-run-arn :initarg :map-run-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or long-arn common-lisp:null) :accessor
                         struct-shape-execution-list-item-map-run-arn :shape
                         "LongArn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (item-count :initarg :item-count :initform
                         common-lisp:nil :type
                         (common-lisp:or unsigned-integer common-lisp:null)
                         :accessor struct-shape-execution-list-item-item-count
                         :shape "UnsignedInteger" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (state-machine-version-arn :initarg
                         :state-machine-version-arn :initform common-lisp:nil
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-execution-list-item-state-machine-version-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (state-machine-alias-arn :initarg
                         :state-machine-alias-arn :initform common-lisp:nil
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-execution-list-item-state-machine-alias-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (redrive-count :initarg :redrive-count :initform
                         common-lisp:nil :type
                         (common-lisp:or redrive-count common-lisp:null)
                         :accessor
                         struct-shape-execution-list-item-redrive-count :shape
                         "RedriveCount" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (redrive-date :initarg :redrive-date :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-execution-list-item-redrive-date :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-execution-list-item
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'execution-list-item
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'execution-list-item 'make-execution-list-item))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input execution-list-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input execution-list-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execution-arn))
      (common-lisp:list
       (common-lisp:cons "executionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state-machine-arn))
      (common-lisp:list
       (common-lisp:cons "stateMachineArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-date))
      (common-lisp:list
       (common-lisp:cons "startDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stop-date))
      (common-lisp:list
       (common-lisp:cons "stopDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'map-run-arn))
      (common-lisp:list
       (common-lisp:cons "mapRunArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'item-count))
      (common-lisp:list
       (common-lisp:cons "itemCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'state-machine-version-arn))
      (common-lisp:list
       (common-lisp:cons "stateMachineVersionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'state-machine-alias-arn))
      (common-lisp:list
       (common-lisp:cons "stateMachineAliasArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'redrive-count))
      (common-lisp:list
       (common-lisp:cons "redriveCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'redrive-date))
      (common-lisp:list
       (common-lisp:cons "redriveDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input execution-list-item))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition execution-not-redrivable
     (states-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       execution-not-redrivable-message)))
 (common-lisp:export
  (common-lisp:list 'execution-not-redrivable
                    'execution-not-redrivable-message)))
(common-lisp:deftype execution-redrive-filter () 'common-lisp:string)
(common-lisp:deftype execution-redrive-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass execution-redriven-event-details common-lisp:nil
                       ((redrive-count :initarg :redrive-count :initform
                         common-lisp:nil :type
                         (common-lisp:or redrive-count common-lisp:null)
                         :accessor
                         struct-shape-execution-redriven-event-details-redrive-count
                         :shape "RedriveCount" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-execution-redriven-event-details
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'execution-redriven-event-details
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'execution-redriven-event-details
                    'make-execution-redriven-event-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          execution-redriven-event-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          execution-redriven-event-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'redrive-count))
      (common-lisp:list
       (common-lisp:cons "redriveCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          execution-redriven-event-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass execution-started-event-details common-lisp:nil
                       ((input :initarg :input :initform common-lisp:nil :type
                         (common-lisp:or sensitive-data common-lisp:null)
                         :accessor
                         struct-shape-execution-started-event-details-input
                         :shape "SensitiveData" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (input-details :initarg :input-details :initform
                         common-lisp:nil :type
                         (common-lisp:or history-event-execution-data-details
                                         common-lisp:null)
                         :accessor
                         struct-shape-execution-started-event-details-input-details
                         :shape "HistoryEventExecutionDataDetails" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (role-arn :initarg :role-arn :initform common-lisp:nil
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-execution-started-event-details-role-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (state-machine-alias-arn :initarg
                         :state-machine-alias-arn :initform common-lisp:nil
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-execution-started-event-details-state-machine-alias-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (state-machine-version-arn :initarg
                         :state-machine-version-arn :initform common-lisp:nil
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-execution-started-event-details-state-machine-version-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-execution-started-event-details
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'execution-started-event-details
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'execution-started-event-details
                    'make-execution-started-event-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          execution-started-event-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          execution-started-event-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input))
      (common-lisp:list
       (common-lisp:cons "input"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-details))
      (common-lisp:list
       (common-lisp:cons "inputDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'state-machine-alias-arn))
      (common-lisp:list
       (common-lisp:cons "stateMachineAliasArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'state-machine-version-arn))
      (common-lisp:list
       (common-lisp:cons "stateMachineVersionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          execution-started-event-details))
   common-lisp:nil))
(common-lisp:deftype execution-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass execution-succeeded-event-details common-lisp:nil
                       ((output :initarg :output :initform common-lisp:nil
                         :type (common-lisp:or sensitive-data common-lisp:null)
                         :accessor
                         struct-shape-execution-succeeded-event-details-output
                         :shape "SensitiveData" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (output-details :initarg :output-details :initform
                         common-lisp:nil :type
                         (common-lisp:or history-event-execution-data-details
                                         common-lisp:null)
                         :accessor
                         struct-shape-execution-succeeded-event-details-output-details
                         :shape "HistoryEventExecutionDataDetails" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-execution-succeeded-event-details
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'execution-succeeded-event-details
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'execution-succeeded-event-details
                    'make-execution-succeeded-event-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          execution-succeeded-event-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          execution-succeeded-event-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output))
      (common-lisp:list
       (common-lisp:cons "output"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-details))
      (common-lisp:list
       (common-lisp:cons "outputDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          execution-succeeded-event-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass execution-timed-out-event-details common-lisp:nil
                       ((error :initarg :error :initform common-lisp:nil :type
                         (common-lisp:or sensitive-error common-lisp:null)
                         :accessor
                         struct-shape-execution-timed-out-event-details-error
                         :shape "SensitiveError" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cause :initarg :cause :initform common-lisp:nil :type
                         (common-lisp:or sensitive-cause common-lisp:null)
                         :accessor
                         struct-shape-execution-timed-out-event-details-cause
                         :shape "SensitiveCause" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-execution-timed-out-event-details
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'execution-timed-out-event-details
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'execution-timed-out-event-details
                    'make-execution-timed-out-event-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          execution-timed-out-event-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          execution-timed-out-event-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error))
      (common-lisp:list
       (common-lisp:cons "error"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cause))
      (common-lisp:list
       (common-lisp:cons "cause"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          execution-timed-out-event-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-activity-task-input common-lisp:nil
                       ((activity-arn :initarg :activity-arn :initform
                         (common-lisp:error ":activityarn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-get-activity-task-input-activity-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (worker-name :initarg :worker-name :initform
                         common-lisp:nil :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-get-activity-task-input-worker-name
                         :shape "Name" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-activity-task-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-activity-task-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-activity-task-input 'make-get-activity-task-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-activity-task-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-activity-task-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'activity-arn))
      (common-lisp:list
       (common-lisp:cons "activityArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'worker-name))
      (common-lisp:list
       (common-lisp:cons "workerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-activity-task-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-activity-task-output common-lisp:nil
                       ((task-token :initarg :task-token :initform
                         common-lisp:nil :type
                         (common-lisp:or task-token common-lisp:null) :accessor
                         struct-shape-get-activity-task-output-task-token
                         :shape "TaskToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (input :initarg :input :initform common-lisp:nil :type
                         (common-lisp:or sensitive-data-job-input
                                         common-lisp:null)
                         :accessor struct-shape-get-activity-task-output-input
                         :shape "SensitiveDataJobInput" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-activity-task-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-activity-task-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-activity-task-output 'make-get-activity-task-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-activity-task-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-activity-task-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-token))
      (common-lisp:list
       (common-lisp:cons "taskToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input))
      (common-lisp:list
       (common-lisp:cons "input"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-activity-task-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-execution-history-input common-lisp:nil
                       ((execution-arn :initarg :execution-arn :initform
                         (common-lisp:error ":executionarn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-get-execution-history-input-execution-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or page-size common-lisp:null) :accessor
                         struct-shape-get-execution-history-input-max-results
                         :shape "PageSize" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (reverse-order :initarg :reverse-order :initform
                         common-lisp:nil :type
                         (common-lisp:or reverse-order common-lisp:null)
                         :accessor
                         struct-shape-get-execution-history-input-reverse-order
                         :shape "ReverseOrder" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or page-token common-lisp:null) :accessor
                         struct-shape-get-execution-history-input-next-token
                         :shape "PageToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (include-execution-data :initarg
                         :include-execution-data :initform common-lisp:nil
                         :type
                         (common-lisp:or
                          include-execution-data-get-execution-history
                          common-lisp:null)
                         :accessor
                         struct-shape-get-execution-history-input-include-execution-data
                         :shape "IncludeExecutionDataGetExecutionHistory"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-execution-history-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-execution-history-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-execution-history-input
                    'make-get-execution-history-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-execution-history-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-execution-history-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execution-arn))
      (common-lisp:list
       (common-lisp:cons "executionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reverse-order))
      (common-lisp:list
       (common-lisp:cons "reverseOrder"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'include-execution-data))
      (common-lisp:list
       (common-lisp:cons "includeExecutionData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-execution-history-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-execution-history-output common-lisp:nil
                       ((events :initarg :events :initform
                         (common-lisp:error ":events is required") :type
                         (common-lisp:or history-event-list common-lisp:null)
                         :accessor
                         struct-shape-get-execution-history-output-events
                         :shape "HistoryEventList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or page-token common-lisp:null) :accessor
                         struct-shape-get-execution-history-output-next-token
                         :shape "PageToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-execution-history-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-execution-history-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-execution-history-output
                    'make-get-execution-history-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-execution-history-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-execution-history-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'events))
      (common-lisp:list
       (common-lisp:cons "events"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-execution-history-output))
   common-lisp:nil))
(common-lisp:deftype httpbody () 'common-lisp:string)
(common-lisp:deftype httpheaders () 'common-lisp:string)
(common-lisp:deftype httpmethod () 'common-lisp:string)
(common-lisp:deftype httpprotocol () 'common-lisp:string)
(common-lisp:deftype httpstatus-code () 'common-lisp:string)
(common-lisp:deftype httpstatus-message () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass history-event common-lisp:nil
                       ((timestamp :initarg :timestamp :initform
                         (common-lisp:error ":string is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-history-event-timestamp :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (type :initarg :type :initform
                         (common-lisp:error ":type is required") :type
                         (common-lisp:or history-event-type common-lisp:null)
                         :accessor struct-shape-history-event-type :shape
                         "HistoryEventType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (id :initarg :id :initform
                         (common-lisp:error ":id is required") :type
                         (common-lisp:or event-id common-lisp:null) :accessor
                         struct-shape-history-event-id :shape "EventId"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (previous-event-id :initarg :previous-event-id
                         :initform common-lisp:nil :type
                         (common-lisp:or event-id common-lisp:null) :accessor
                         struct-shape-history-event-previous-event-id :shape
                         "EventId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (activity-failed-event-details :initarg
                         :activity-failed-event-details :initform
                         common-lisp:nil :type
                         (common-lisp:or activity-failed-event-details
                                         common-lisp:null)
                         :accessor
                         struct-shape-history-event-activity-failed-event-details
                         :shape "ActivityFailedEventDetails" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (activity-schedule-failed-event-details :initarg
                         :activity-schedule-failed-event-details :initform
                         common-lisp:nil :type
                         (common-lisp:or activity-schedule-failed-event-details
                                         common-lisp:null)
                         :accessor
                         struct-shape-history-event-activity-schedule-failed-event-details
                         :shape "ActivityScheduleFailedEventDetails" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (activity-scheduled-event-details :initarg
                         :activity-scheduled-event-details :initform
                         common-lisp:nil :type
                         (common-lisp:or activity-scheduled-event-details
                                         common-lisp:null)
                         :accessor
                         struct-shape-history-event-activity-scheduled-event-details
                         :shape "ActivityScheduledEventDetails" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (activity-started-event-details :initarg
                         :activity-started-event-details :initform
                         common-lisp:nil :type
                         (common-lisp:or activity-started-event-details
                                         common-lisp:null)
                         :accessor
                         struct-shape-history-event-activity-started-event-details
                         :shape "ActivityStartedEventDetails" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (activity-succeeded-event-details :initarg
                         :activity-succeeded-event-details :initform
                         common-lisp:nil :type
                         (common-lisp:or activity-succeeded-event-details
                                         common-lisp:null)
                         :accessor
                         struct-shape-history-event-activity-succeeded-event-details
                         :shape "ActivitySucceededEventDetails" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (activity-timed-out-event-details :initarg
                         :activity-timed-out-event-details :initform
                         common-lisp:nil :type
                         (common-lisp:or activity-timed-out-event-details
                                         common-lisp:null)
                         :accessor
                         struct-shape-history-event-activity-timed-out-event-details
                         :shape "ActivityTimedOutEventDetails" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (task-failed-event-details :initarg
                         :task-failed-event-details :initform common-lisp:nil
                         :type
                         (common-lisp:or task-failed-event-details
                                         common-lisp:null)
                         :accessor
                         struct-shape-history-event-task-failed-event-details
                         :shape "TaskFailedEventDetails" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (task-scheduled-event-details :initarg
                         :task-scheduled-event-details :initform
                         common-lisp:nil :type
                         (common-lisp:or task-scheduled-event-details
                                         common-lisp:null)
                         :accessor
                         struct-shape-history-event-task-scheduled-event-details
                         :shape "TaskScheduledEventDetails" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (task-start-failed-event-details :initarg
                         :task-start-failed-event-details :initform
                         common-lisp:nil :type
                         (common-lisp:or task-start-failed-event-details
                                         common-lisp:null)
                         :accessor
                         struct-shape-history-event-task-start-failed-event-details
                         :shape "TaskStartFailedEventDetails" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (task-started-event-details :initarg
                         :task-started-event-details :initform common-lisp:nil
                         :type
                         (common-lisp:or task-started-event-details
                                         common-lisp:null)
                         :accessor
                         struct-shape-history-event-task-started-event-details
                         :shape "TaskStartedEventDetails" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (task-submit-failed-event-details :initarg
                         :task-submit-failed-event-details :initform
                         common-lisp:nil :type
                         (common-lisp:or task-submit-failed-event-details
                                         common-lisp:null)
                         :accessor
                         struct-shape-history-event-task-submit-failed-event-details
                         :shape "TaskSubmitFailedEventDetails" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (task-submitted-event-details :initarg
                         :task-submitted-event-details :initform
                         common-lisp:nil :type
                         (common-lisp:or task-submitted-event-details
                                         common-lisp:null)
                         :accessor
                         struct-shape-history-event-task-submitted-event-details
                         :shape "TaskSubmittedEventDetails" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (task-succeeded-event-details :initarg
                         :task-succeeded-event-details :initform
                         common-lisp:nil :type
                         (common-lisp:or task-succeeded-event-details
                                         common-lisp:null)
                         :accessor
                         struct-shape-history-event-task-succeeded-event-details
                         :shape "TaskSucceededEventDetails" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (task-timed-out-event-details :initarg
                         :task-timed-out-event-details :initform
                         common-lisp:nil :type
                         (common-lisp:or task-timed-out-event-details
                                         common-lisp:null)
                         :accessor
                         struct-shape-history-event-task-timed-out-event-details
                         :shape "TaskTimedOutEventDetails" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (execution-failed-event-details :initarg
                         :execution-failed-event-details :initform
                         common-lisp:nil :type
                         (common-lisp:or execution-failed-event-details
                                         common-lisp:null)
                         :accessor
                         struct-shape-history-event-execution-failed-event-details
                         :shape "ExecutionFailedEventDetails" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (execution-started-event-details :initarg
                         :execution-started-event-details :initform
                         common-lisp:nil :type
                         (common-lisp:or execution-started-event-details
                                         common-lisp:null)
                         :accessor
                         struct-shape-history-event-execution-started-event-details
                         :shape "ExecutionStartedEventDetails" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (execution-succeeded-event-details :initarg
                         :execution-succeeded-event-details :initform
                         common-lisp:nil :type
                         (common-lisp:or execution-succeeded-event-details
                                         common-lisp:null)
                         :accessor
                         struct-shape-history-event-execution-succeeded-event-details
                         :shape "ExecutionSucceededEventDetails" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (execution-aborted-event-details :initarg
                         :execution-aborted-event-details :initform
                         common-lisp:nil :type
                         (common-lisp:or execution-aborted-event-details
                                         common-lisp:null)
                         :accessor
                         struct-shape-history-event-execution-aborted-event-details
                         :shape "ExecutionAbortedEventDetails" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (execution-timed-out-event-details :initarg
                         :execution-timed-out-event-details :initform
                         common-lisp:nil :type
                         (common-lisp:or execution-timed-out-event-details
                                         common-lisp:null)
                         :accessor
                         struct-shape-history-event-execution-timed-out-event-details
                         :shape "ExecutionTimedOutEventDetails" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (execution-redriven-event-details :initarg
                         :execution-redriven-event-details :initform
                         common-lisp:nil :type
                         (common-lisp:or execution-redriven-event-details
                                         common-lisp:null)
                         :accessor
                         struct-shape-history-event-execution-redriven-event-details
                         :shape "ExecutionRedrivenEventDetails" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (map-state-started-event-details :initarg
                         :map-state-started-event-details :initform
                         common-lisp:nil :type
                         (common-lisp:or map-state-started-event-details
                                         common-lisp:null)
                         :accessor
                         struct-shape-history-event-map-state-started-event-details
                         :shape "MapStateStartedEventDetails" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (map-iteration-started-event-details :initarg
                         :map-iteration-started-event-details :initform
                         common-lisp:nil :type
                         (common-lisp:or map-iteration-event-details
                                         common-lisp:null)
                         :accessor
                         struct-shape-history-event-map-iteration-started-event-details
                         :shape "MapIterationEventDetails" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (map-iteration-succeeded-event-details :initarg
                         :map-iteration-succeeded-event-details :initform
                         common-lisp:nil :type
                         (common-lisp:or map-iteration-event-details
                                         common-lisp:null)
                         :accessor
                         struct-shape-history-event-map-iteration-succeeded-event-details
                         :shape "MapIterationEventDetails" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (map-iteration-failed-event-details :initarg
                         :map-iteration-failed-event-details :initform
                         common-lisp:nil :type
                         (common-lisp:or map-iteration-event-details
                                         common-lisp:null)
                         :accessor
                         struct-shape-history-event-map-iteration-failed-event-details
                         :shape "MapIterationEventDetails" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (map-iteration-aborted-event-details :initarg
                         :map-iteration-aborted-event-details :initform
                         common-lisp:nil :type
                         (common-lisp:or map-iteration-event-details
                                         common-lisp:null)
                         :accessor
                         struct-shape-history-event-map-iteration-aborted-event-details
                         :shape "MapIterationEventDetails" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (lambda-function-failed-event-details :initarg
                         :lambda-function-failed-event-details :initform
                         common-lisp:nil :type
                         (common-lisp:or lambda-function-failed-event-details
                                         common-lisp:null)
                         :accessor
                         struct-shape-history-event-lambda-function-failed-event-details
                         :shape "LambdaFunctionFailedEventDetails" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (lambda-function-schedule-failed-event-details :initarg
                         :lambda-function-schedule-failed-event-details
                         :initform common-lisp:nil :type
                         (common-lisp:or
                          lambda-function-schedule-failed-event-details
                          common-lisp:null)
                         :accessor
                         struct-shape-history-event-lambda-function-schedule-failed-event-details
                         :shape "LambdaFunctionScheduleFailedEventDetails"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (lambda-function-scheduled-event-details :initarg
                         :lambda-function-scheduled-event-details :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          lambda-function-scheduled-event-details
                          common-lisp:null)
                         :accessor
                         struct-shape-history-event-lambda-function-scheduled-event-details
                         :shape "LambdaFunctionScheduledEventDetails" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (lambda-function-start-failed-event-details :initarg
                         :lambda-function-start-failed-event-details :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          lambda-function-start-failed-event-details
                          common-lisp:null)
                         :accessor
                         struct-shape-history-event-lambda-function-start-failed-event-details
                         :shape "LambdaFunctionStartFailedEventDetails"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (lambda-function-succeeded-event-details :initarg
                         :lambda-function-succeeded-event-details :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          lambda-function-succeeded-event-details
                          common-lisp:null)
                         :accessor
                         struct-shape-history-event-lambda-function-succeeded-event-details
                         :shape "LambdaFunctionSucceededEventDetails" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (lambda-function-timed-out-event-details :initarg
                         :lambda-function-timed-out-event-details :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          lambda-function-timed-out-event-details
                          common-lisp:null)
                         :accessor
                         struct-shape-history-event-lambda-function-timed-out-event-details
                         :shape "LambdaFunctionTimedOutEventDetails" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (state-entered-event-details :initarg
                         :state-entered-event-details :initform common-lisp:nil
                         :type
                         (common-lisp:or state-entered-event-details
                                         common-lisp:null)
                         :accessor
                         struct-shape-history-event-state-entered-event-details
                         :shape "StateEnteredEventDetails" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (state-exited-event-details :initarg
                         :state-exited-event-details :initform common-lisp:nil
                         :type
                         (common-lisp:or state-exited-event-details
                                         common-lisp:null)
                         :accessor
                         struct-shape-history-event-state-exited-event-details
                         :shape "StateExitedEventDetails" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (map-run-started-event-details :initarg
                         :map-run-started-event-details :initform
                         common-lisp:nil :type
                         (common-lisp:or map-run-started-event-details
                                         common-lisp:null)
                         :accessor
                         struct-shape-history-event-map-run-started-event-details
                         :shape "MapRunStartedEventDetails" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (map-run-failed-event-details :initarg
                         :map-run-failed-event-details :initform
                         common-lisp:nil :type
                         (common-lisp:or map-run-failed-event-details
                                         common-lisp:null)
                         :accessor
                         struct-shape-history-event-map-run-failed-event-details
                         :shape "MapRunFailedEventDetails" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (map-run-redriven-event-details :initarg
                         :map-run-redriven-event-details :initform
                         common-lisp:nil :type
                         (common-lisp:or map-run-redriven-event-details
                                         common-lisp:null)
                         :accessor
                         struct-shape-history-event-map-run-redriven-event-details
                         :shape "MapRunRedrivenEventDetails" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-history-event
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'history-event
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'history-event 'make-history-event))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input history-event))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input history-event))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timestamp))
      (common-lisp:list
       (common-lisp:cons "timestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'previous-event-id))
      (common-lisp:list
       (common-lisp:cons "previousEventId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'activity-failed-event-details))
      (common-lisp:list
       (common-lisp:cons "activityFailedEventDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'activity-schedule-failed-event-details))
      (common-lisp:list
       (common-lisp:cons "activityScheduleFailedEventDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'activity-scheduled-event-details))
      (common-lisp:list
       (common-lisp:cons "activityScheduledEventDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'activity-started-event-details))
      (common-lisp:list
       (common-lisp:cons "activityStartedEventDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'activity-succeeded-event-details))
      (common-lisp:list
       (common-lisp:cons "activitySucceededEventDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'activity-timed-out-event-details))
      (common-lisp:list
       (common-lisp:cons "activityTimedOutEventDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'task-failed-event-details))
      (common-lisp:list
       (common-lisp:cons "taskFailedEventDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'task-scheduled-event-details))
      (common-lisp:list
       (common-lisp:cons "taskScheduledEventDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'task-start-failed-event-details))
      (common-lisp:list
       (common-lisp:cons "taskStartFailedEventDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'task-started-event-details))
      (common-lisp:list
       (common-lisp:cons "taskStartedEventDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'task-submit-failed-event-details))
      (common-lisp:list
       (common-lisp:cons "taskSubmitFailedEventDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'task-submitted-event-details))
      (common-lisp:list
       (common-lisp:cons "taskSubmittedEventDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'task-succeeded-event-details))
      (common-lisp:list
       (common-lisp:cons "taskSucceededEventDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'task-timed-out-event-details))
      (common-lisp:list
       (common-lisp:cons "taskTimedOutEventDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'execution-failed-event-details))
      (common-lisp:list
       (common-lisp:cons "executionFailedEventDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'execution-started-event-details))
      (common-lisp:list
       (common-lisp:cons "executionStartedEventDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'execution-succeeded-event-details))
      (common-lisp:list
       (common-lisp:cons "executionSucceededEventDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'execution-aborted-event-details))
      (common-lisp:list
       (common-lisp:cons "executionAbortedEventDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'execution-timed-out-event-details))
      (common-lisp:list
       (common-lisp:cons "executionTimedOutEventDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'execution-redriven-event-details))
      (common-lisp:list
       (common-lisp:cons "executionRedrivenEventDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'map-state-started-event-details))
      (common-lisp:list
       (common-lisp:cons "mapStateStartedEventDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'map-iteration-started-event-details))
      (common-lisp:list
       (common-lisp:cons "mapIterationStartedEventDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'map-iteration-succeeded-event-details))
      (common-lisp:list
       (common-lisp:cons "mapIterationSucceededEventDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'map-iteration-failed-event-details))
      (common-lisp:list
       (common-lisp:cons "mapIterationFailedEventDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'map-iteration-aborted-event-details))
      (common-lisp:list
       (common-lisp:cons "mapIterationAbortedEventDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'lambda-function-failed-event-details))
      (common-lisp:list
       (common-lisp:cons "lambdaFunctionFailedEventDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'lambda-function-schedule-failed-event-details))
      (common-lisp:list
       (common-lisp:cons "lambdaFunctionScheduleFailedEventDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'lambda-function-scheduled-event-details))
      (common-lisp:list
       (common-lisp:cons "lambdaFunctionScheduledEventDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'lambda-function-start-failed-event-details))
      (common-lisp:list
       (common-lisp:cons "lambdaFunctionStartFailedEventDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'lambda-function-succeeded-event-details))
      (common-lisp:list
       (common-lisp:cons "lambdaFunctionSucceededEventDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'lambda-function-timed-out-event-details))
      (common-lisp:list
       (common-lisp:cons "lambdaFunctionTimedOutEventDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'state-entered-event-details))
      (common-lisp:list
       (common-lisp:cons "stateEnteredEventDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'state-exited-event-details))
      (common-lisp:list
       (common-lisp:cons "stateExitedEventDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'map-run-started-event-details))
      (common-lisp:list
       (common-lisp:cons "mapRunStartedEventDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'map-run-failed-event-details))
      (common-lisp:list
       (common-lisp:cons "mapRunFailedEventDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'map-run-redriven-event-details))
      (common-lisp:list
       (common-lisp:cons "mapRunRedrivenEventDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input history-event))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass history-event-execution-data-details common-lisp:nil
                       ((truncated :initarg :truncated :initform
                         common-lisp:nil :type
                         (common-lisp:or |truncated| common-lisp:null)
                         :accessor
                         struct-shape-history-event-execution-data-details-truncated
                         :shape "truncated" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-history-event-execution-data-details
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'history-event-execution-data-details
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'history-event-execution-data-details
                    'make-history-event-execution-data-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          history-event-execution-data-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          history-event-execution-data-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'truncated))
      (common-lisp:list
       (common-lisp:cons "truncated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          history-event-execution-data-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype history-event-list ()
   '(trivial-types:proper-list history-event))
 (common-lisp:defun make-history-event-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list history-event))
   aws-sdk/generator/shape::members))
(common-lisp:deftype history-event-type () 'common-lisp:string)
(common-lisp:deftype identity () 'common-lisp:string)
(common-lisp:deftype include-execution-data () 'common-lisp:boolean)
(common-lisp:deftype include-execution-data-get-execution-history ()
  'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defclass inspection-data common-lisp:nil
                       ((input :initarg :input :initform common-lisp:nil :type
                         (common-lisp:or sensitive-data common-lisp:null)
                         :accessor struct-shape-inspection-data-input :shape
                         "SensitiveData" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (after-input-path :initarg :after-input-path :initform
                         common-lisp:nil :type
                         (common-lisp:or sensitive-data common-lisp:null)
                         :accessor
                         struct-shape-inspection-data-after-input-path :shape
                         "SensitiveData" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (after-parameters :initarg :after-parameters :initform
                         common-lisp:nil :type
                         (common-lisp:or sensitive-data common-lisp:null)
                         :accessor
                         struct-shape-inspection-data-after-parameters :shape
                         "SensitiveData" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (result :initarg :result :initform common-lisp:nil
                         :type (common-lisp:or sensitive-data common-lisp:null)
                         :accessor struct-shape-inspection-data-result :shape
                         "SensitiveData" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (after-result-selector :initarg :after-result-selector
                         :initform common-lisp:nil :type
                         (common-lisp:or sensitive-data common-lisp:null)
                         :accessor
                         struct-shape-inspection-data-after-result-selector
                         :shape "SensitiveData" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (after-result-path :initarg :after-result-path
                         :initform common-lisp:nil :type
                         (common-lisp:or sensitive-data common-lisp:null)
                         :accessor
                         struct-shape-inspection-data-after-result-path :shape
                         "SensitiveData" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (request :initarg :request :initform common-lisp:nil
                         :type
                         (common-lisp:or inspection-data-request
                                         common-lisp:null)
                         :accessor struct-shape-inspection-data-request :shape
                         "InspectionDataRequest" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (response :initarg :response :initform common-lisp:nil
                         :type
                         (common-lisp:or inspection-data-response
                                         common-lisp:null)
                         :accessor struct-shape-inspection-data-response :shape
                         "InspectionDataResponse" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-inspection-data
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'inspection-data
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'inspection-data 'make-inspection-data))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input inspection-data))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input inspection-data))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input))
      (common-lisp:list
       (common-lisp:cons "input"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'after-input-path))
      (common-lisp:list
       (common-lisp:cons "afterInputPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'after-parameters))
      (common-lisp:list
       (common-lisp:cons "afterParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'result))
      (common-lisp:list
       (common-lisp:cons "result"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'after-result-selector))
      (common-lisp:list
       (common-lisp:cons "afterResultSelector"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'after-result-path))
      (common-lisp:list
       (common-lisp:cons "afterResultPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request))
      (common-lisp:list
       (common-lisp:cons "request"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'response))
      (common-lisp:list
       (common-lisp:cons "response"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input inspection-data))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass inspection-data-request common-lisp:nil
                       ((protocol :initarg :protocol :initform common-lisp:nil
                         :type (common-lisp:or httpprotocol common-lisp:null)
                         :accessor
                         struct-shape-inspection-data-request-protocol :shape
                         "HTTPProtocol" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (method :initarg :method :initform common-lisp:nil
                         :type (common-lisp:or httpmethod common-lisp:null)
                         :accessor struct-shape-inspection-data-request-method
                         :shape "HTTPMethod" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (url :initarg :url :initform common-lisp:nil :type
                         (common-lisp:or url common-lisp:null) :accessor
                         struct-shape-inspection-data-request-url :shape "URL"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (headers :initarg :headers :initform common-lisp:nil
                         :type (common-lisp:or httpheaders common-lisp:null)
                         :accessor struct-shape-inspection-data-request-headers
                         :shape "HTTPHeaders" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (body :initarg :body :initform common-lisp:nil :type
                         (common-lisp:or httpbody common-lisp:null) :accessor
                         struct-shape-inspection-data-request-body :shape
                         "HTTPBody" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-inspection-data-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'inspection-data-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'inspection-data-request 'make-inspection-data-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          inspection-data-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          inspection-data-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'protocol))
      (common-lisp:list
       (common-lisp:cons "protocol"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'method))
      (common-lisp:list
       (common-lisp:cons "method"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'url))
      (common-lisp:list
       (common-lisp:cons "url"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'headers))
      (common-lisp:list
       (common-lisp:cons "headers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'body))
      (common-lisp:list
       (common-lisp:cons "body"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          inspection-data-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass inspection-data-response common-lisp:nil
                       ((protocol :initarg :protocol :initform common-lisp:nil
                         :type (common-lisp:or httpprotocol common-lisp:null)
                         :accessor
                         struct-shape-inspection-data-response-protocol :shape
                         "HTTPProtocol" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status-code :initarg :status-code :initform
                         common-lisp:nil :type
                         (common-lisp:or httpstatus-code common-lisp:null)
                         :accessor
                         struct-shape-inspection-data-response-status-code
                         :shape "HTTPStatusCode" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status-message :initarg :status-message :initform
                         common-lisp:nil :type
                         (common-lisp:or httpstatus-message common-lisp:null)
                         :accessor
                         struct-shape-inspection-data-response-status-message
                         :shape "HTTPStatusMessage" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (headers :initarg :headers :initform common-lisp:nil
                         :type (common-lisp:or httpheaders common-lisp:null)
                         :accessor
                         struct-shape-inspection-data-response-headers :shape
                         "HTTPHeaders" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (body :initarg :body :initform common-lisp:nil :type
                         (common-lisp:or httpbody common-lisp:null) :accessor
                         struct-shape-inspection-data-response-body :shape
                         "HTTPBody" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-inspection-data-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'inspection-data-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'inspection-data-response 'make-inspection-data-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          inspection-data-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          inspection-data-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'protocol))
      (common-lisp:list
       (common-lisp:cons "protocol"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-code))
      (common-lisp:list
       (common-lisp:cons "statusCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-message))
      (common-lisp:list
       (common-lisp:cons "statusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'headers))
      (common-lisp:list
       (common-lisp:cons "headers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'body))
      (common-lisp:list
       (common-lisp:cons "body"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          inspection-data-response))
   common-lisp:nil))
(common-lisp:deftype inspection-level () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition invalid-arn
     (states-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-arn-message)))
 (common-lisp:export (common-lisp:list 'invalid-arn 'invalid-arn-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-definition
     (states-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-definition-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-definition 'invalid-definition-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-execution-input
     (states-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-execution-input-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-execution-input 'invalid-execution-input-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-logging-configuration
     (states-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-logging-configuration-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-logging-configuration
                    'invalid-logging-configuration-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-name
     (states-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-name-message)))
 (common-lisp:export (common-lisp:list 'invalid-name 'invalid-name-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-output
     (states-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-output-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-output 'invalid-output-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-token
     (states-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-token-message)))
 (common-lisp:export (common-lisp:list 'invalid-token 'invalid-token-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-tracing-configuration
     (states-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-tracing-configuration-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-tracing-configuration
                    'invalid-tracing-configuration-message)))
(common-lisp:progn
 (common-lisp:defclass lambda-function-failed-event-details common-lisp:nil
                       ((error :initarg :error :initform common-lisp:nil :type
                         (common-lisp:or sensitive-error common-lisp:null)
                         :accessor
                         struct-shape-lambda-function-failed-event-details-error
                         :shape "SensitiveError" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cause :initarg :cause :initform common-lisp:nil :type
                         (common-lisp:or sensitive-cause common-lisp:null)
                         :accessor
                         struct-shape-lambda-function-failed-event-details-cause
                         :shape "SensitiveCause" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-lambda-function-failed-event-details
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'lambda-function-failed-event-details
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'lambda-function-failed-event-details
                    'make-lambda-function-failed-event-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          lambda-function-failed-event-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          lambda-function-failed-event-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error))
      (common-lisp:list
       (common-lisp:cons "error"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cause))
      (common-lisp:list
       (common-lisp:cons "cause"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          lambda-function-failed-event-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass lambda-function-schedule-failed-event-details
                       common-lisp:nil
                       ((error :initarg :error :initform common-lisp:nil :type
                         (common-lisp:or sensitive-error common-lisp:null)
                         :accessor
                         struct-shape-lambda-function-schedule-failed-event-details-error
                         :shape "SensitiveError" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cause :initarg :cause :initform common-lisp:nil :type
                         (common-lisp:or sensitive-cause common-lisp:null)
                         :accessor
                         struct-shape-lambda-function-schedule-failed-event-details-cause
                         :shape "SensitiveCause" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-lambda-function-schedule-failed-event-details
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'lambda-function-schedule-failed-event-details
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'lambda-function-schedule-failed-event-details
                    'make-lambda-function-schedule-failed-event-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          lambda-function-schedule-failed-event-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          lambda-function-schedule-failed-event-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error))
      (common-lisp:list
       (common-lisp:cons "error"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cause))
      (common-lisp:list
       (common-lisp:cons "cause"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          lambda-function-schedule-failed-event-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass lambda-function-scheduled-event-details common-lisp:nil
                       ((resource :initarg :resource :initform
                         (common-lisp:error ":resource is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-lambda-function-scheduled-event-details-resource
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (input :initarg :input :initform common-lisp:nil :type
                         (common-lisp:or sensitive-data common-lisp:null)
                         :accessor
                         struct-shape-lambda-function-scheduled-event-details-input
                         :shape "SensitiveData" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (input-details :initarg :input-details :initform
                         common-lisp:nil :type
                         (common-lisp:or history-event-execution-data-details
                                         common-lisp:null)
                         :accessor
                         struct-shape-lambda-function-scheduled-event-details-input-details
                         :shape "HistoryEventExecutionDataDetails" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (timeout-in-seconds :initarg :timeout-in-seconds
                         :initform common-lisp:nil :type
                         (common-lisp:or timeout-in-seconds common-lisp:null)
                         :accessor
                         struct-shape-lambda-function-scheduled-event-details-timeout-in-seconds
                         :shape "TimeoutInSeconds" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (task-credentials :initarg :task-credentials :initform
                         common-lisp:nil :type
                         (common-lisp:or task-credentials common-lisp:null)
                         :accessor
                         struct-shape-lambda-function-scheduled-event-details-task-credentials
                         :shape "TaskCredentials" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-lambda-function-scheduled-event-details
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'lambda-function-scheduled-event-details
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'lambda-function-scheduled-event-details
                    'make-lambda-function-scheduled-event-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          lambda-function-scheduled-event-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          lambda-function-scheduled-event-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource))
      (common-lisp:list
       (common-lisp:cons "resource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input))
      (common-lisp:list
       (common-lisp:cons "input"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-details))
      (common-lisp:list
       (common-lisp:cons "inputDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timeout-in-seconds))
      (common-lisp:list
       (common-lisp:cons "timeoutInSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-credentials))
      (common-lisp:list
       (common-lisp:cons "taskCredentials"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          lambda-function-scheduled-event-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass lambda-function-start-failed-event-details
                       common-lisp:nil
                       ((error :initarg :error :initform common-lisp:nil :type
                         (common-lisp:or sensitive-error common-lisp:null)
                         :accessor
                         struct-shape-lambda-function-start-failed-event-details-error
                         :shape "SensitiveError" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cause :initarg :cause :initform common-lisp:nil :type
                         (common-lisp:or sensitive-cause common-lisp:null)
                         :accessor
                         struct-shape-lambda-function-start-failed-event-details-cause
                         :shape "SensitiveCause" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-lambda-function-start-failed-event-details
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'lambda-function-start-failed-event-details
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'lambda-function-start-failed-event-details
                    'make-lambda-function-start-failed-event-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          lambda-function-start-failed-event-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          lambda-function-start-failed-event-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error))
      (common-lisp:list
       (common-lisp:cons "error"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cause))
      (common-lisp:list
       (common-lisp:cons "cause"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          lambda-function-start-failed-event-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass lambda-function-succeeded-event-details common-lisp:nil
                       ((output :initarg :output :initform common-lisp:nil
                         :type (common-lisp:or sensitive-data common-lisp:null)
                         :accessor
                         struct-shape-lambda-function-succeeded-event-details-output
                         :shape "SensitiveData" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (output-details :initarg :output-details :initform
                         common-lisp:nil :type
                         (common-lisp:or history-event-execution-data-details
                                         common-lisp:null)
                         :accessor
                         struct-shape-lambda-function-succeeded-event-details-output-details
                         :shape "HistoryEventExecutionDataDetails" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-lambda-function-succeeded-event-details
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'lambda-function-succeeded-event-details
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'lambda-function-succeeded-event-details
                    'make-lambda-function-succeeded-event-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          lambda-function-succeeded-event-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          lambda-function-succeeded-event-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output))
      (common-lisp:list
       (common-lisp:cons "output"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-details))
      (common-lisp:list
       (common-lisp:cons "outputDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          lambda-function-succeeded-event-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass lambda-function-timed-out-event-details common-lisp:nil
                       ((error :initarg :error :initform common-lisp:nil :type
                         (common-lisp:or sensitive-error common-lisp:null)
                         :accessor
                         struct-shape-lambda-function-timed-out-event-details-error
                         :shape "SensitiveError" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cause :initarg :cause :initform common-lisp:nil :type
                         (common-lisp:or sensitive-cause common-lisp:null)
                         :accessor
                         struct-shape-lambda-function-timed-out-event-details-cause
                         :shape "SensitiveCause" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-lambda-function-timed-out-event-details
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'lambda-function-timed-out-event-details
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'lambda-function-timed-out-event-details
                    'make-lambda-function-timed-out-event-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          lambda-function-timed-out-event-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          lambda-function-timed-out-event-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error))
      (common-lisp:list
       (common-lisp:cons "error"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cause))
      (common-lisp:list
       (common-lisp:cons "cause"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          lambda-function-timed-out-event-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-activities-input common-lisp:nil
                       ((max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or page-size common-lisp:null) :accessor
                         struct-shape-list-activities-input-max-results :shape
                         "PageSize" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or page-token common-lisp:null) :accessor
                         struct-shape-list-activities-input-next-token :shape
                         "PageToken" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-activities-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-activities-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-activities-input 'make-list-activities-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-activities-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-activities-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-activities-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-activities-output common-lisp:nil
                       ((activities :initarg :activities :initform
                         (common-lisp:error ":activities is required") :type
                         (common-lisp:or activity-list common-lisp:null)
                         :accessor
                         struct-shape-list-activities-output-activities :shape
                         "ActivityList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or page-token common-lisp:null) :accessor
                         struct-shape-list-activities-output-next-token :shape
                         "PageToken" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-activities-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-activities-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-activities-output 'make-list-activities-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-activities-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-activities-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'activities))
      (common-lisp:list
       (common-lisp:cons "activities"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-activities-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-executions-input common-lisp:nil
                       ((state-machine-arn :initarg :state-machine-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-list-executions-input-state-machine-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (status-filter :initarg :status-filter :initform
                         common-lisp:nil :type
                         (common-lisp:or execution-status common-lisp:null)
                         :accessor
                         struct-shape-list-executions-input-status-filter
                         :shape "ExecutionStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or page-size common-lisp:null) :accessor
                         struct-shape-list-executions-input-max-results :shape
                         "PageSize" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or list-executions-page-token
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-executions-input-next-token :shape
                         "ListExecutionsPageToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (map-run-arn :initarg :map-run-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or long-arn common-lisp:null) :accessor
                         struct-shape-list-executions-input-map-run-arn :shape
                         "LongArn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (redrive-filter :initarg :redrive-filter :initform
                         common-lisp:nil :type
                         (common-lisp:or execution-redrive-filter
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-executions-input-redrive-filter
                         :shape "ExecutionRedriveFilter" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-executions-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-executions-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-executions-input 'make-list-executions-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-executions-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-executions-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state-machine-arn))
      (common-lisp:list
       (common-lisp:cons "stateMachineArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-filter))
      (common-lisp:list
       (common-lisp:cons "statusFilter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'map-run-arn))
      (common-lisp:list
       (common-lisp:cons "mapRunArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'redrive-filter))
      (common-lisp:list
       (common-lisp:cons "redriveFilter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-executions-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-executions-output common-lisp:nil
                       ((executions :initarg :executions :initform
                         (common-lisp:error ":executions is required") :type
                         (common-lisp:or execution-list common-lisp:null)
                         :accessor
                         struct-shape-list-executions-output-executions :shape
                         "ExecutionList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or list-executions-page-token
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-executions-output-next-token :shape
                         "ListExecutionsPageToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-executions-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-executions-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-executions-output 'make-list-executions-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-executions-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-executions-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'executions))
      (common-lisp:list
       (common-lisp:cons "executions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-executions-output))
   common-lisp:nil))
(common-lisp:deftype list-executions-page-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass list-map-runs-input common-lisp:nil
                       ((execution-arn :initarg :execution-arn :initform
                         (common-lisp:error ":executionarn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-list-map-runs-input-execution-arn :shape
                         "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or page-size common-lisp:null) :accessor
                         struct-shape-list-map-runs-input-max-results :shape
                         "PageSize" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or page-token common-lisp:null) :accessor
                         struct-shape-list-map-runs-input-next-token :shape
                         "PageToken" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-map-runs-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-map-runs-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-map-runs-input 'make-list-map-runs-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-map-runs-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-map-runs-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execution-arn))
      (common-lisp:list
       (common-lisp:cons "executionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-map-runs-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-map-runs-output common-lisp:nil
                       ((map-runs :initarg :map-runs :initform
                         (common-lisp:error ":mapruns is required") :type
                         (common-lisp:or map-run-list common-lisp:null)
                         :accessor struct-shape-list-map-runs-output-map-runs
                         :shape "MapRunList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or page-token common-lisp:null) :accessor
                         struct-shape-list-map-runs-output-next-token :shape
                         "PageToken" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-map-runs-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-map-runs-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-map-runs-output 'make-list-map-runs-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-map-runs-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-map-runs-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'map-runs))
      (common-lisp:list
       (common-lisp:cons "mapRuns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-map-runs-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-state-machine-aliases-input common-lisp:nil
                       ((state-machine-arn :initarg :state-machine-arn
                         :initform
                         (common-lisp:error ":statemachinearn is required")
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-list-state-machine-aliases-input-state-machine-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or page-token common-lisp:null) :accessor
                         struct-shape-list-state-machine-aliases-input-next-token
                         :shape "PageToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or page-size common-lisp:null) :accessor
                         struct-shape-list-state-machine-aliases-input-max-results
                         :shape "PageSize" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-state-machine-aliases-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-state-machine-aliases-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-state-machine-aliases-input
                    'make-list-state-machine-aliases-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-state-machine-aliases-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-state-machine-aliases-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state-machine-arn))
      (common-lisp:list
       (common-lisp:cons "stateMachineArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-state-machine-aliases-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-state-machine-aliases-output common-lisp:nil
                       ((state-machine-aliases :initarg :state-machine-aliases
                         :initform
                         (common-lisp:error ":statemachinealiases is required")
                         :type
                         (common-lisp:or state-machine-alias-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-state-machine-aliases-output-state-machine-aliases
                         :shape "StateMachineAliasList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or page-token common-lisp:null) :accessor
                         struct-shape-list-state-machine-aliases-output-next-token
                         :shape "PageToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-state-machine-aliases-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-state-machine-aliases-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-state-machine-aliases-output
                    'make-list-state-machine-aliases-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-state-machine-aliases-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-state-machine-aliases-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'state-machine-aliases))
      (common-lisp:list
       (common-lisp:cons "stateMachineAliases"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-state-machine-aliases-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-state-machine-versions-input common-lisp:nil
                       ((state-machine-arn :initarg :state-machine-arn
                         :initform
                         (common-lisp:error ":statemachinearn is required")
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-list-state-machine-versions-input-state-machine-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or page-token common-lisp:null) :accessor
                         struct-shape-list-state-machine-versions-input-next-token
                         :shape "PageToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or page-size common-lisp:null) :accessor
                         struct-shape-list-state-machine-versions-input-max-results
                         :shape "PageSize" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-state-machine-versions-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-state-machine-versions-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-state-machine-versions-input
                    'make-list-state-machine-versions-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-state-machine-versions-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-state-machine-versions-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state-machine-arn))
      (common-lisp:list
       (common-lisp:cons "stateMachineArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-state-machine-versions-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-state-machine-versions-output common-lisp:nil
                       ((state-machine-versions :initarg
                         :state-machine-versions :initform
                         (common-lisp:error
                          ":statemachineversions is required")
                         :type
                         (common-lisp:or state-machine-version-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-state-machine-versions-output-state-machine-versions
                         :shape "StateMachineVersionList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or page-token common-lisp:null) :accessor
                         struct-shape-list-state-machine-versions-output-next-token
                         :shape "PageToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-state-machine-versions-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-state-machine-versions-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-state-machine-versions-output
                    'make-list-state-machine-versions-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-state-machine-versions-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-state-machine-versions-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'state-machine-versions))
      (common-lisp:list
       (common-lisp:cons "stateMachineVersions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-state-machine-versions-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-state-machines-input common-lisp:nil
                       ((max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or page-size common-lisp:null) :accessor
                         struct-shape-list-state-machines-input-max-results
                         :shape "PageSize" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or page-token common-lisp:null) :accessor
                         struct-shape-list-state-machines-input-next-token
                         :shape "PageToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-state-machines-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-state-machines-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-state-machines-input
                    'make-list-state-machines-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-state-machines-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-state-machines-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-state-machines-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-state-machines-output common-lisp:nil
                       ((state-machines :initarg :state-machines :initform
                         (common-lisp:error ":statemachines is required") :type
                         (common-lisp:or state-machine-list common-lisp:null)
                         :accessor
                         struct-shape-list-state-machines-output-state-machines
                         :shape "StateMachineList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or page-token common-lisp:null) :accessor
                         struct-shape-list-state-machines-output-next-token
                         :shape "PageToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-state-machines-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-state-machines-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-state-machines-output
                    'make-list-state-machines-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-state-machines-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-state-machines-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state-machines))
      (common-lisp:list
       (common-lisp:cons "stateMachines"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-state-machines-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-input common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resourcearn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-list-tags-for-resource-input-resource-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-tags-for-resource-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-tags-for-resource-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-input
                    'make-list-tags-for-resource-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "resourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-output common-lisp:nil
                       ((tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-list-tags-for-resource-output-tags :shape
                         "TagList" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-tags-for-resource-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-output
                    'make-list-tags-for-resource-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass log-destination common-lisp:nil
                       ((cloud-watch-logs-log-group :initarg
                         :cloud-watch-logs-log-group :initform common-lisp:nil
                         :type
                         (common-lisp:or cloud-watch-logs-log-group
                                         common-lisp:null)
                         :accessor
                         struct-shape-log-destination-cloud-watch-logs-log-group
                         :shape "CloudWatchLogsLogGroup" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-log-destination
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'log-destination
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'log-destination 'make-log-destination))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input log-destination))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input log-destination))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cloud-watch-logs-log-group))
      (common-lisp:list
       (common-lisp:cons "cloudWatchLogsLogGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input log-destination))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype log-destination-list ()
   '(trivial-types:proper-list log-destination))
 (common-lisp:defun make-log-destination-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list log-destination))
   aws-sdk/generator/shape::members))
(common-lisp:deftype log-level () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass logging-configuration common-lisp:nil
                       ((level :initarg :level :initform common-lisp:nil :type
                         (common-lisp:or log-level common-lisp:null) :accessor
                         struct-shape-logging-configuration-level :shape
                         "LogLevel" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (include-execution-data :initarg
                         :include-execution-data :initform common-lisp:nil
                         :type
                         (common-lisp:or include-execution-data
                                         common-lisp:null)
                         :accessor
                         struct-shape-logging-configuration-include-execution-data
                         :shape "IncludeExecutionData" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (destinations :initarg :destinations :initform
                         common-lisp:nil :type
                         (common-lisp:or log-destination-list common-lisp:null)
                         :accessor
                         struct-shape-logging-configuration-destinations :shape
                         "LogDestinationList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-logging-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'logging-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'logging-configuration 'make-logging-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          logging-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          logging-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'level))
      (common-lisp:list
       (common-lisp:cons "level"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'include-execution-data))
      (common-lisp:list
       (common-lisp:cons "includeExecutionData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destinations))
      (common-lisp:list
       (common-lisp:cons "destinations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          logging-configuration))
   common-lisp:nil))
(common-lisp:deftype long-arn () 'common-lisp:string)
(common-lisp:deftype long-object () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass map-iteration-event-details common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-map-iteration-event-details-name :shape
                         "Name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (index :initarg :index :initform common-lisp:nil :type
                         (common-lisp:or unsigned-integer common-lisp:null)
                         :accessor
                         struct-shape-map-iteration-event-details-index :shape
                         "UnsignedInteger" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-map-iteration-event-details
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'map-iteration-event-details
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'map-iteration-event-details
                    'make-map-iteration-event-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          map-iteration-event-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          map-iteration-event-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'index))
      (common-lisp:list
       (common-lisp:cons "index"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          map-iteration-event-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass map-run-execution-counts common-lisp:nil
                       ((pending :initarg :pending :initform
                         (common-lisp:error ":pending is required") :type
                         (common-lisp:or unsigned-long common-lisp:null)
                         :accessor
                         struct-shape-map-run-execution-counts-pending :shape
                         "UnsignedLong" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (running :initarg :running :initform
                         (common-lisp:error ":running is required") :type
                         (common-lisp:or unsigned-long common-lisp:null)
                         :accessor
                         struct-shape-map-run-execution-counts-running :shape
                         "UnsignedLong" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (succeeded :initarg :succeeded :initform
                         (common-lisp:error ":succeeded is required") :type
                         (common-lisp:or unsigned-long common-lisp:null)
                         :accessor
                         struct-shape-map-run-execution-counts-succeeded :shape
                         "UnsignedLong" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (failed :initarg :failed :initform
                         (common-lisp:error ":failed is required") :type
                         (common-lisp:or unsigned-long common-lisp:null)
                         :accessor struct-shape-map-run-execution-counts-failed
                         :shape "UnsignedLong" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (timed-out :initarg :timed-out :initform
                         (common-lisp:error ":timedout is required") :type
                         (common-lisp:or unsigned-long common-lisp:null)
                         :accessor
                         struct-shape-map-run-execution-counts-timed-out :shape
                         "UnsignedLong" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (aborted :initarg :aborted :initform
                         (common-lisp:error ":aborted is required") :type
                         (common-lisp:or unsigned-long common-lisp:null)
                         :accessor
                         struct-shape-map-run-execution-counts-aborted :shape
                         "UnsignedLong" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (total :initarg :total :initform
                         (common-lisp:error ":total is required") :type
                         (common-lisp:or unsigned-long common-lisp:null)
                         :accessor struct-shape-map-run-execution-counts-total
                         :shape "UnsignedLong" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (results-written :initarg :results-written :initform
                         (common-lisp:error ":resultswritten is required")
                         :type (common-lisp:or unsigned-long common-lisp:null)
                         :accessor
                         struct-shape-map-run-execution-counts-results-written
                         :shape "UnsignedLong" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (failures-not-redrivable :initarg
                         :failures-not-redrivable :initform common-lisp:nil
                         :type (common-lisp:or long-object common-lisp:null)
                         :accessor
                         struct-shape-map-run-execution-counts-failures-not-redrivable
                         :shape "LongObject" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (pending-redrive :initarg :pending-redrive :initform
                         common-lisp:nil :type
                         (common-lisp:or long-object common-lisp:null)
                         :accessor
                         struct-shape-map-run-execution-counts-pending-redrive
                         :shape "LongObject" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-map-run-execution-counts
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'map-run-execution-counts
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'map-run-execution-counts 'make-map-run-execution-counts))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          map-run-execution-counts))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          map-run-execution-counts))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pending))
      (common-lisp:list
       (common-lisp:cons "pending"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'running))
      (common-lisp:list
       (common-lisp:cons "running"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'succeeded))
      (common-lisp:list
       (common-lisp:cons "succeeded"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failed))
      (common-lisp:list
       (common-lisp:cons "failed"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timed-out))
      (common-lisp:list
       (common-lisp:cons "timedOut"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aborted))
      (common-lisp:list
       (common-lisp:cons "aborted"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total))
      (common-lisp:list
       (common-lisp:cons "total"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'results-written))
      (common-lisp:list
       (common-lisp:cons "resultsWritten"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'failures-not-redrivable))
      (common-lisp:list
       (common-lisp:cons "failuresNotRedrivable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pending-redrive))
      (common-lisp:list
       (common-lisp:cons "pendingRedrive"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          map-run-execution-counts))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass map-run-failed-event-details common-lisp:nil
                       ((error :initarg :error :initform common-lisp:nil :type
                         (common-lisp:or sensitive-error common-lisp:null)
                         :accessor
                         struct-shape-map-run-failed-event-details-error :shape
                         "SensitiveError" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cause :initarg :cause :initform common-lisp:nil :type
                         (common-lisp:or sensitive-cause common-lisp:null)
                         :accessor
                         struct-shape-map-run-failed-event-details-cause :shape
                         "SensitiveCause" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-map-run-failed-event-details
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'map-run-failed-event-details
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'map-run-failed-event-details
                    'make-map-run-failed-event-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          map-run-failed-event-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          map-run-failed-event-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error))
      (common-lisp:list
       (common-lisp:cons "error"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cause))
      (common-lisp:list
       (common-lisp:cons "cause"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          map-run-failed-event-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass map-run-item-counts common-lisp:nil
                       ((pending :initarg :pending :initform
                         (common-lisp:error ":pending is required") :type
                         (common-lisp:or unsigned-long common-lisp:null)
                         :accessor struct-shape-map-run-item-counts-pending
                         :shape "UnsignedLong" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (running :initarg :running :initform
                         (common-lisp:error ":running is required") :type
                         (common-lisp:or unsigned-long common-lisp:null)
                         :accessor struct-shape-map-run-item-counts-running
                         :shape "UnsignedLong" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (succeeded :initarg :succeeded :initform
                         (common-lisp:error ":succeeded is required") :type
                         (common-lisp:or unsigned-long common-lisp:null)
                         :accessor struct-shape-map-run-item-counts-succeeded
                         :shape "UnsignedLong" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (failed :initarg :failed :initform
                         (common-lisp:error ":failed is required") :type
                         (common-lisp:or unsigned-long common-lisp:null)
                         :accessor struct-shape-map-run-item-counts-failed
                         :shape "UnsignedLong" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (timed-out :initarg :timed-out :initform
                         (common-lisp:error ":timedout is required") :type
                         (common-lisp:or unsigned-long common-lisp:null)
                         :accessor struct-shape-map-run-item-counts-timed-out
                         :shape "UnsignedLong" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (aborted :initarg :aborted :initform
                         (common-lisp:error ":aborted is required") :type
                         (common-lisp:or unsigned-long common-lisp:null)
                         :accessor struct-shape-map-run-item-counts-aborted
                         :shape "UnsignedLong" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (total :initarg :total :initform
                         (common-lisp:error ":total is required") :type
                         (common-lisp:or unsigned-long common-lisp:null)
                         :accessor struct-shape-map-run-item-counts-total
                         :shape "UnsignedLong" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (results-written :initarg :results-written :initform
                         (common-lisp:error ":resultswritten is required")
                         :type (common-lisp:or unsigned-long common-lisp:null)
                         :accessor
                         struct-shape-map-run-item-counts-results-written
                         :shape "UnsignedLong" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (failures-not-redrivable :initarg
                         :failures-not-redrivable :initform common-lisp:nil
                         :type (common-lisp:or long-object common-lisp:null)
                         :accessor
                         struct-shape-map-run-item-counts-failures-not-redrivable
                         :shape "LongObject" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (pending-redrive :initarg :pending-redrive :initform
                         common-lisp:nil :type
                         (common-lisp:or long-object common-lisp:null)
                         :accessor
                         struct-shape-map-run-item-counts-pending-redrive
                         :shape "LongObject" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-map-run-item-counts
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'map-run-item-counts
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'map-run-item-counts 'make-map-run-item-counts))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input map-run-item-counts))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input map-run-item-counts))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pending))
      (common-lisp:list
       (common-lisp:cons "pending"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'running))
      (common-lisp:list
       (common-lisp:cons "running"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'succeeded))
      (common-lisp:list
       (common-lisp:cons "succeeded"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failed))
      (common-lisp:list
       (common-lisp:cons "failed"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timed-out))
      (common-lisp:list
       (common-lisp:cons "timedOut"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aborted))
      (common-lisp:list
       (common-lisp:cons "aborted"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total))
      (common-lisp:list
       (common-lisp:cons "total"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'results-written))
      (common-lisp:list
       (common-lisp:cons "resultsWritten"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'failures-not-redrivable))
      (common-lisp:list
       (common-lisp:cons "failuresNotRedrivable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pending-redrive))
      (common-lisp:list
       (common-lisp:cons "pendingRedrive"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input map-run-item-counts))
   common-lisp:nil))
(common-lisp:deftype map-run-label () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype map-run-list ()
   '(trivial-types:proper-list map-run-list-item))
 (common-lisp:defun make-map-run-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list map-run-list-item))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass map-run-list-item common-lisp:nil
                       ((execution-arn :initarg :execution-arn :initform
                         (common-lisp:error ":executionarn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-map-run-list-item-execution-arn :shape
                         "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (map-run-arn :initarg :map-run-arn :initform
                         (common-lisp:error ":maprunarn is required") :type
                         (common-lisp:or long-arn common-lisp:null) :accessor
                         struct-shape-map-run-list-item-map-run-arn :shape
                         "LongArn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (state-machine-arn :initarg :state-machine-arn
                         :initform
                         (common-lisp:error ":statemachinearn is required")
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-map-run-list-item-state-machine-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (start-date :initarg :start-date :initform
                         (common-lisp:error ":startdate is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-map-run-list-item-start-date :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (stop-date :initarg :stop-date :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-map-run-list-item-stop-date :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-map-run-list-item
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'map-run-list-item
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'map-run-list-item 'make-map-run-list-item))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input map-run-list-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input map-run-list-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execution-arn))
      (common-lisp:list
       (common-lisp:cons "executionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'map-run-arn))
      (common-lisp:list
       (common-lisp:cons "mapRunArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state-machine-arn))
      (common-lisp:list
       (common-lisp:cons "stateMachineArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-date))
      (common-lisp:list
       (common-lisp:cons "startDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stop-date))
      (common-lisp:list
       (common-lisp:cons "stopDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input map-run-list-item))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass map-run-redriven-event-details common-lisp:nil
                       ((map-run-arn :initarg :map-run-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or long-arn common-lisp:null) :accessor
                         struct-shape-map-run-redriven-event-details-map-run-arn
                         :shape "LongArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (redrive-count :initarg :redrive-count :initform
                         common-lisp:nil :type
                         (common-lisp:or redrive-count common-lisp:null)
                         :accessor
                         struct-shape-map-run-redriven-event-details-redrive-count
                         :shape "RedriveCount" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-map-run-redriven-event-details
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'map-run-redriven-event-details
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'map-run-redriven-event-details
                    'make-map-run-redriven-event-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          map-run-redriven-event-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          map-run-redriven-event-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'map-run-arn))
      (common-lisp:list
       (common-lisp:cons "mapRunArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'redrive-count))
      (common-lisp:list
       (common-lisp:cons "redriveCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          map-run-redriven-event-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass map-run-started-event-details common-lisp:nil
                       ((map-run-arn :initarg :map-run-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or long-arn common-lisp:null) :accessor
                         struct-shape-map-run-started-event-details-map-run-arn
                         :shape "LongArn" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-map-run-started-event-details
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'map-run-started-event-details
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'map-run-started-event-details
                    'make-map-run-started-event-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          map-run-started-event-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          map-run-started-event-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'map-run-arn))
      (common-lisp:list
       (common-lisp:cons "mapRunArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          map-run-started-event-details))
   common-lisp:nil))
(common-lisp:deftype map-run-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass map-state-started-event-details common-lisp:nil
                       ((length :initarg :length :initform common-lisp:nil
                         :type
                         (common-lisp:or unsigned-integer common-lisp:null)
                         :accessor
                         struct-shape-map-state-started-event-details-length
                         :shape "UnsignedInteger" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-map-state-started-event-details
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'map-state-started-event-details
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'map-state-started-event-details
                    'make-map-state-started-event-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          map-state-started-event-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          map-state-started-event-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'length))
      (common-lisp:list
       (common-lisp:cons "length"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          map-state-started-event-details))
   common-lisp:nil))
(common-lisp:deftype max-concurrency () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition missing-required-parameter
     (states-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       missing-required-parameter-message)))
 (common-lisp:export
  (common-lisp:list 'missing-required-parameter
                    'missing-required-parameter-message)))
(common-lisp:deftype name () 'common-lisp:string)
(common-lisp:deftype page-size () 'common-lisp:integer)
(common-lisp:deftype page-token () 'common-lisp:string)
(common-lisp:deftype publish () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defclass publish-state-machine-version-input common-lisp:nil
                       ((state-machine-arn :initarg :state-machine-arn
                         :initform
                         (common-lisp:error ":statemachinearn is required")
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-publish-state-machine-version-input-state-machine-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (revision-id :initarg :revision-id :initform
                         common-lisp:nil :type
                         (common-lisp:or revision-id common-lisp:null)
                         :accessor
                         struct-shape-publish-state-machine-version-input-revision-id
                         :shape "RevisionId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or version-description common-lisp:null)
                         :accessor
                         struct-shape-publish-state-machine-version-input-description
                         :shape "VersionDescription" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-publish-state-machine-version-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'publish-state-machine-version-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'publish-state-machine-version-input
                    'make-publish-state-machine-version-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          publish-state-machine-version-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          publish-state-machine-version-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state-machine-arn))
      (common-lisp:list
       (common-lisp:cons "stateMachineArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'revision-id))
      (common-lisp:list
       (common-lisp:cons "revisionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          publish-state-machine-version-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass publish-state-machine-version-output common-lisp:nil
                       ((creation-date :initarg :creation-date :initform
                         (common-lisp:error ":creationdate is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-publish-state-machine-version-output-creation-date
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (state-machine-version-arn :initarg
                         :state-machine-version-arn :initform
                         (common-lisp:error
                          ":statemachineversionarn is required")
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-publish-state-machine-version-output-state-machine-version-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-publish-state-machine-version-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'publish-state-machine-version-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'publish-state-machine-version-output
                    'make-publish-state-machine-version-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          publish-state-machine-version-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          publish-state-machine-version-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "creationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'state-machine-version-arn))
      (common-lisp:list
       (common-lisp:cons "stateMachineVersionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          publish-state-machine-version-output))
   common-lisp:nil))
(common-lisp:deftype redrive-count () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass redrive-execution-input common-lisp:nil
                       ((execution-arn :initarg :execution-arn :initform
                         (common-lisp:error ":executionarn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-redrive-execution-input-execution-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor
                         struct-shape-redrive-execution-input-client-token
                         :shape "ClientToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-redrive-execution-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'redrive-execution-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'redrive-execution-input 'make-redrive-execution-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          redrive-execution-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          redrive-execution-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execution-arn))
      (common-lisp:list
       (common-lisp:cons "executionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          redrive-execution-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass redrive-execution-output common-lisp:nil
                       ((redrive-date :initarg :redrive-date :initform
                         (common-lisp:error ":redrivedate is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-redrive-execution-output-redrive-date
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-redrive-execution-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'redrive-execution-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'redrive-execution-output 'make-redrive-execution-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          redrive-execution-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          redrive-execution-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'redrive-date))
      (common-lisp:list
       (common-lisp:cons "redriveDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          redrive-execution-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition resource-not-found
     (states-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-not-found-message)
      (resource-name :initarg :resource-name :initform common-lisp:nil :reader
       resource-not-found-resource-name)))
 (common-lisp:export
  (common-lisp:list 'resource-not-found 'resource-not-found-message
                    'resource-not-found-resource-name)))
(common-lisp:deftype reveal-secrets () 'common-lisp:boolean)
(common-lisp:deftype reverse-order () 'common-lisp:boolean)
(common-lisp:deftype revision-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype routing-configuration-list ()
   '(trivial-types:proper-list routing-configuration-list-item))
 (common-lisp:defun make-routing-configuration-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            routing-configuration-list-item))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass routing-configuration-list-item common-lisp:nil
                       ((state-machine-version-arn :initarg
                         :state-machine-version-arn :initform
                         (common-lisp:error
                          ":statemachineversionarn is required")
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-routing-configuration-list-item-state-machine-version-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (weight :initarg :weight :initform
                         (common-lisp:error ":weight is required") :type
                         (common-lisp:or version-weight common-lisp:null)
                         :accessor
                         struct-shape-routing-configuration-list-item-weight
                         :shape "VersionWeight" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-routing-configuration-list-item
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'routing-configuration-list-item
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'routing-configuration-list-item
                    'make-routing-configuration-list-item))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          routing-configuration-list-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          routing-configuration-list-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'state-machine-version-arn))
      (common-lisp:list
       (common-lisp:cons "stateMachineVersionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'weight))
      (common-lisp:list
       (common-lisp:cons "weight"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          routing-configuration-list-item))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass send-task-failure-input common-lisp:nil
                       ((task-token :initarg :task-token :initform
                         (common-lisp:error ":tasktoken is required") :type
                         (common-lisp:or task-token common-lisp:null) :accessor
                         struct-shape-send-task-failure-input-task-token :shape
                         "TaskToken" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (error :initarg :error :initform common-lisp:nil :type
                         (common-lisp:or sensitive-error common-lisp:null)
                         :accessor struct-shape-send-task-failure-input-error
                         :shape "SensitiveError" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cause :initarg :cause :initform common-lisp:nil :type
                         (common-lisp:or sensitive-cause common-lisp:null)
                         :accessor struct-shape-send-task-failure-input-cause
                         :shape "SensitiveCause" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-send-task-failure-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'send-task-failure-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'send-task-failure-input 'make-send-task-failure-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          send-task-failure-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          send-task-failure-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-token))
      (common-lisp:list
       (common-lisp:cons "taskToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error))
      (common-lisp:list
       (common-lisp:cons "error"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cause))
      (common-lisp:list
       (common-lisp:cons "cause"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          send-task-failure-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass send-task-failure-output common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-send-task-failure-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'send-task-failure-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'send-task-failure-output 'make-send-task-failure-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          send-task-failure-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          send-task-failure-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          send-task-failure-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass send-task-heartbeat-input common-lisp:nil
                       ((task-token :initarg :task-token :initform
                         (common-lisp:error ":tasktoken is required") :type
                         (common-lisp:or task-token common-lisp:null) :accessor
                         struct-shape-send-task-heartbeat-input-task-token
                         :shape "TaskToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-send-task-heartbeat-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'send-task-heartbeat-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'send-task-heartbeat-input
                    'make-send-task-heartbeat-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          send-task-heartbeat-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          send-task-heartbeat-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-token))
      (common-lisp:list
       (common-lisp:cons "taskToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          send-task-heartbeat-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass send-task-heartbeat-output common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-send-task-heartbeat-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'send-task-heartbeat-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'send-task-heartbeat-output
                    'make-send-task-heartbeat-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          send-task-heartbeat-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          send-task-heartbeat-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          send-task-heartbeat-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass send-task-success-input common-lisp:nil
                       ((task-token :initarg :task-token :initform
                         (common-lisp:error ":tasktoken is required") :type
                         (common-lisp:or task-token common-lisp:null) :accessor
                         struct-shape-send-task-success-input-task-token :shape
                         "TaskToken" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (output :initarg :output :initform
                         (common-lisp:error ":output is required") :type
                         (common-lisp:or sensitive-data common-lisp:null)
                         :accessor struct-shape-send-task-success-input-output
                         :shape "SensitiveData" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-send-task-success-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'send-task-success-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'send-task-success-input 'make-send-task-success-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          send-task-success-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          send-task-success-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-token))
      (common-lisp:list
       (common-lisp:cons "taskToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output))
      (common-lisp:list
       (common-lisp:cons "output"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          send-task-success-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass send-task-success-output common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-send-task-success-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'send-task-success-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'send-task-success-output 'make-send-task-success-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          send-task-success-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          send-task-success-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          send-task-success-output))
   common-lisp:nil))
(common-lisp:deftype sensitive-cause () 'common-lisp:string)
(common-lisp:deftype sensitive-data () 'common-lisp:string)
(common-lisp:deftype sensitive-data-job-input () 'common-lisp:string)
(common-lisp:deftype sensitive-error () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition service-quota-exceeded-exception
     (states-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       service-quota-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'service-quota-exceeded-exception
                    'service-quota-exceeded-exception-message)))
(common-lisp:progn
 (common-lisp:defclass start-execution-input common-lisp:nil
                       ((state-machine-arn :initarg :state-machine-arn
                         :initform
                         (common-lisp:error ":statemachinearn is required")
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-start-execution-input-state-machine-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-start-execution-input-name :shape "Name"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (input :initarg :input :initform common-lisp:nil :type
                         (common-lisp:or sensitive-data common-lisp:null)
                         :accessor struct-shape-start-execution-input-input
                         :shape "SensitiveData" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (trace-header :initarg :trace-header :initform
                         common-lisp:nil :type
                         (common-lisp:or trace-header common-lisp:null)
                         :accessor
                         struct-shape-start-execution-input-trace-header :shape
                         "TraceHeader" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-execution-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'start-execution-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-execution-input 'make-start-execution-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-execution-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-execution-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state-machine-arn))
      (common-lisp:list
       (common-lisp:cons "stateMachineArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input))
      (common-lisp:list
       (common-lisp:cons "input"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trace-header))
      (common-lisp:list
       (common-lisp:cons "traceHeader"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-execution-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-execution-output common-lisp:nil
                       ((execution-arn :initarg :execution-arn :initform
                         (common-lisp:error ":executionarn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-start-execution-output-execution-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (start-date :initarg :start-date :initform
                         (common-lisp:error ":startdate is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-start-execution-output-start-date :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-execution-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'start-execution-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-execution-output 'make-start-execution-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-execution-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-execution-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execution-arn))
      (common-lisp:list
       (common-lisp:cons "executionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-date))
      (common-lisp:list
       (common-lisp:cons "startDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-execution-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-sync-execution-input common-lisp:nil
                       ((state-machine-arn :initarg :state-machine-arn
                         :initform
                         (common-lisp:error ":statemachinearn is required")
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-start-sync-execution-input-state-machine-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-start-sync-execution-input-name :shape
                         "Name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (input :initarg :input :initform common-lisp:nil :type
                         (common-lisp:or sensitive-data common-lisp:null)
                         :accessor
                         struct-shape-start-sync-execution-input-input :shape
                         "SensitiveData" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (trace-header :initarg :trace-header :initform
                         common-lisp:nil :type
                         (common-lisp:or trace-header common-lisp:null)
                         :accessor
                         struct-shape-start-sync-execution-input-trace-header
                         :shape "TraceHeader" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-sync-execution-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'start-sync-execution-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-sync-execution-input
                    'make-start-sync-execution-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-sync-execution-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-sync-execution-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state-machine-arn))
      (common-lisp:list
       (common-lisp:cons "stateMachineArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input))
      (common-lisp:list
       (common-lisp:cons "input"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trace-header))
      (common-lisp:list
       (common-lisp:cons "traceHeader"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-sync-execution-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-sync-execution-output common-lisp:nil
                       ((execution-arn :initarg :execution-arn :initform
                         (common-lisp:error ":executionarn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-start-sync-execution-output-execution-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (state-machine-arn :initarg :state-machine-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-start-sync-execution-output-state-machine-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-start-sync-execution-output-name :shape
                         "Name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (start-date :initarg :start-date :initform
                         (common-lisp:error ":startdate is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-start-sync-execution-output-start-date
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (stop-date :initarg :stop-date :initform
                         (common-lisp:error ":stopdate is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-start-sync-execution-output-stop-date
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform
                         (common-lisp:error ":status is required") :type
                         (common-lisp:or sync-execution-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-start-sync-execution-output-status :shape
                         "SyncExecutionStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (error :initarg :error :initform common-lisp:nil :type
                         (common-lisp:or sensitive-error common-lisp:null)
                         :accessor
                         struct-shape-start-sync-execution-output-error :shape
                         "SensitiveError" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cause :initarg :cause :initform common-lisp:nil :type
                         (common-lisp:or sensitive-cause common-lisp:null)
                         :accessor
                         struct-shape-start-sync-execution-output-cause :shape
                         "SensitiveCause" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (input :initarg :input :initform common-lisp:nil :type
                         (common-lisp:or sensitive-data common-lisp:null)
                         :accessor
                         struct-shape-start-sync-execution-output-input :shape
                         "SensitiveData" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (input-details :initarg :input-details :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          cloud-watch-events-execution-data-details
                          common-lisp:null)
                         :accessor
                         struct-shape-start-sync-execution-output-input-details
                         :shape "CloudWatchEventsExecutionDataDetails"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (output :initarg :output :initform common-lisp:nil
                         :type (common-lisp:or sensitive-data common-lisp:null)
                         :accessor
                         struct-shape-start-sync-execution-output-output :shape
                         "SensitiveData" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (output-details :initarg :output-details :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          cloud-watch-events-execution-data-details
                          common-lisp:null)
                         :accessor
                         struct-shape-start-sync-execution-output-output-details
                         :shape "CloudWatchEventsExecutionDataDetails"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (trace-header :initarg :trace-header :initform
                         common-lisp:nil :type
                         (common-lisp:or trace-header common-lisp:null)
                         :accessor
                         struct-shape-start-sync-execution-output-trace-header
                         :shape "TraceHeader" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (billing-details :initarg :billing-details :initform
                         common-lisp:nil :type
                         (common-lisp:or billing-details common-lisp:null)
                         :accessor
                         struct-shape-start-sync-execution-output-billing-details
                         :shape "BillingDetails" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-sync-execution-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'start-sync-execution-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-sync-execution-output
                    'make-start-sync-execution-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-sync-execution-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-sync-execution-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execution-arn))
      (common-lisp:list
       (common-lisp:cons "executionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state-machine-arn))
      (common-lisp:list
       (common-lisp:cons "stateMachineArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-date))
      (common-lisp:list
       (common-lisp:cons "startDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stop-date))
      (common-lisp:list
       (common-lisp:cons "stopDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error))
      (common-lisp:list
       (common-lisp:cons "error"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cause))
      (common-lisp:list
       (common-lisp:cons "cause"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input))
      (common-lisp:list
       (common-lisp:cons "input"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-details))
      (common-lisp:list
       (common-lisp:cons "inputDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output))
      (common-lisp:list
       (common-lisp:cons "output"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-details))
      (common-lisp:list
       (common-lisp:cons "outputDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trace-header))
      (common-lisp:list
       (common-lisp:cons "traceHeader"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'billing-details))
      (common-lisp:list
       (common-lisp:cons "billingDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-sync-execution-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass state-entered-event-details common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-state-entered-event-details-name :shape
                         "Name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (input :initarg :input :initform common-lisp:nil :type
                         (common-lisp:or sensitive-data common-lisp:null)
                         :accessor
                         struct-shape-state-entered-event-details-input :shape
                         "SensitiveData" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (input-details :initarg :input-details :initform
                         common-lisp:nil :type
                         (common-lisp:or history-event-execution-data-details
                                         common-lisp:null)
                         :accessor
                         struct-shape-state-entered-event-details-input-details
                         :shape "HistoryEventExecutionDataDetails" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-state-entered-event-details
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'state-entered-event-details
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'state-entered-event-details
                    'make-state-entered-event-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          state-entered-event-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          state-entered-event-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input))
      (common-lisp:list
       (common-lisp:cons "input"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-details))
      (common-lisp:list
       (common-lisp:cons "inputDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          state-entered-event-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass state-exited-event-details common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-state-exited-event-details-name :shape
                         "Name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (output :initarg :output :initform common-lisp:nil
                         :type (common-lisp:or sensitive-data common-lisp:null)
                         :accessor
                         struct-shape-state-exited-event-details-output :shape
                         "SensitiveData" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (output-details :initarg :output-details :initform
                         common-lisp:nil :type
                         (common-lisp:or history-event-execution-data-details
                                         common-lisp:null)
                         :accessor
                         struct-shape-state-exited-event-details-output-details
                         :shape "HistoryEventExecutionDataDetails" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-state-exited-event-details
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'state-exited-event-details
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'state-exited-event-details
                    'make-state-exited-event-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          state-exited-event-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          state-exited-event-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output))
      (common-lisp:list
       (common-lisp:cons "output"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-details))
      (common-lisp:list
       (common-lisp:cons "outputDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          state-exited-event-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype state-machine-alias-list ()
   '(trivial-types:proper-list state-machine-alias-list-item))
 (common-lisp:defun make-state-machine-alias-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            state-machine-alias-list-item))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass state-machine-alias-list-item common-lisp:nil
                       ((state-machine-alias-arn :initarg
                         :state-machine-alias-arn :initform
                         (common-lisp:error
                          ":statemachinealiasarn is required")
                         :type (common-lisp:or long-arn common-lisp:null)
                         :accessor
                         struct-shape-state-machine-alias-list-item-state-machine-alias-arn
                         :shape "LongArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (creation-date :initarg :creation-date :initform
                         (common-lisp:error ":creationdate is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-state-machine-alias-list-item-creation-date
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-state-machine-alias-list-item
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'state-machine-alias-list-item
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'state-machine-alias-list-item
                    'make-state-machine-alias-list-item))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          state-machine-alias-list-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          state-machine-alias-list-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'state-machine-alias-arn))
      (common-lisp:list
       (common-lisp:cons "stateMachineAliasArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "creationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          state-machine-alias-list-item))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition state-machine-already-exists
     (states-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       state-machine-already-exists-message)))
 (common-lisp:export
  (common-lisp:list 'state-machine-already-exists
                    'state-machine-already-exists-message)))
(common-lisp:progn
 (common-lisp:define-condition state-machine-deleting
     (states-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       state-machine-deleting-message)))
 (common-lisp:export
  (common-lisp:list 'state-machine-deleting 'state-machine-deleting-message)))
(common-lisp:progn
 (common-lisp:define-condition state-machine-does-not-exist
     (states-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       state-machine-does-not-exist-message)))
 (common-lisp:export
  (common-lisp:list 'state-machine-does-not-exist
                    'state-machine-does-not-exist-message)))
(common-lisp:progn
 (common-lisp:define-condition state-machine-limit-exceeded
     (states-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       state-machine-limit-exceeded-message)))
 (common-lisp:export
  (common-lisp:list 'state-machine-limit-exceeded
                    'state-machine-limit-exceeded-message)))
(common-lisp:progn
 (common-lisp:deftype state-machine-list ()
   '(trivial-types:proper-list state-machine-list-item))
 (common-lisp:defun make-state-machine-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list state-machine-list-item))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass state-machine-list-item common-lisp:nil
                       ((state-machine-arn :initarg :state-machine-arn
                         :initform
                         (common-lisp:error ":statemachinearn is required")
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-state-machine-list-item-state-machine-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-state-machine-list-item-name :shape
                         "Name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (type :initarg :type :initform
                         (common-lisp:error ":type is required") :type
                         (common-lisp:or state-machine-type common-lisp:null)
                         :accessor struct-shape-state-machine-list-item-type
                         :shape "StateMachineType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (creation-date :initarg :creation-date :initform
                         (common-lisp:error ":creationdate is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-state-machine-list-item-creation-date
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-state-machine-list-item
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'state-machine-list-item
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'state-machine-list-item 'make-state-machine-list-item))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          state-machine-list-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          state-machine-list-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state-machine-arn))
      (common-lisp:list
       (common-lisp:cons "stateMachineArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "creationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          state-machine-list-item))
   common-lisp:nil))
(common-lisp:deftype state-machine-status () 'common-lisp:string)
(common-lisp:deftype state-machine-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition state-machine-type-not-supported
     (states-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       state-machine-type-not-supported-message)))
 (common-lisp:export
  (common-lisp:list 'state-machine-type-not-supported
                    'state-machine-type-not-supported-message)))
(common-lisp:progn
 (common-lisp:deftype state-machine-version-list ()
   '(trivial-types:proper-list state-machine-version-list-item))
 (common-lisp:defun make-state-machine-version-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            state-machine-version-list-item))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass state-machine-version-list-item common-lisp:nil
                       ((state-machine-version-arn :initarg
                         :state-machine-version-arn :initform
                         (common-lisp:error
                          ":statemachineversionarn is required")
                         :type (common-lisp:or long-arn common-lisp:null)
                         :accessor
                         struct-shape-state-machine-version-list-item-state-machine-version-arn
                         :shape "LongArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (creation-date :initarg :creation-date :initform
                         (common-lisp:error ":creationdate is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-state-machine-version-list-item-creation-date
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-state-machine-version-list-item
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'state-machine-version-list-item
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'state-machine-version-list-item
                    'make-state-machine-version-list-item))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          state-machine-version-list-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          state-machine-version-list-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'state-machine-version-arn))
      (common-lisp:list
       (common-lisp:cons "stateMachineVersionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "creationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          state-machine-version-list-item))
   common-lisp:nil))
(common-lisp:deftype state-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass stop-execution-input common-lisp:nil
                       ((execution-arn :initarg :execution-arn :initform
                         (common-lisp:error ":executionarn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-stop-execution-input-execution-arn :shape
                         "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (error :initarg :error :initform common-lisp:nil :type
                         (common-lisp:or sensitive-error common-lisp:null)
                         :accessor struct-shape-stop-execution-input-error
                         :shape "SensitiveError" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cause :initarg :cause :initform common-lisp:nil :type
                         (common-lisp:or sensitive-cause common-lisp:null)
                         :accessor struct-shape-stop-execution-input-cause
                         :shape "SensitiveCause" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-stop-execution-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'stop-execution-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'stop-execution-input 'make-stop-execution-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input stop-execution-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input stop-execution-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execution-arn))
      (common-lisp:list
       (common-lisp:cons "executionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error))
      (common-lisp:list
       (common-lisp:cons "error"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cause))
      (common-lisp:list
       (common-lisp:cons "cause"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input stop-execution-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass stop-execution-output common-lisp:nil
                       ((stop-date :initarg :stop-date :initform
                         (common-lisp:error ":stopdate is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-stop-execution-output-stop-date :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-stop-execution-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'stop-execution-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'stop-execution-output 'make-stop-execution-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-execution-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-execution-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stop-date))
      (common-lisp:list
       (common-lisp:cons "stopDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-execution-output))
   common-lisp:nil))
(common-lisp:deftype sync-execution-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass tag common-lisp:nil
                       ((key :initarg :key :initform common-lisp:nil :type
                         (common-lisp:or tag-key common-lisp:null) :accessor
                         struct-shape-tag-key :shape "TagKey" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (value :initarg :value :initform common-lisp:nil :type
                         (common-lisp:or tag-value common-lisp:null) :accessor
                         struct-shape-tag-value :shape "TagValue" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tag (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'tag
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'tag 'make-tag))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag))
   common-lisp:nil))
(common-lisp:deftype tag-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tag-key-list () '(trivial-types:proper-list tag-key))
 (common-lisp:defun make-tag-key-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype tag-list () '(trivial-types:proper-list tag))
 (common-lisp:defun make-tag-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass tag-resource-input common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resourcearn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-tag-resource-input-resource-arn :shape
                         "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (tags :initarg :tags :initform
                         (common-lisp:error ":tags is required") :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-tag-resource-input-tags :shape "TagList"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tag-resource-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'tag-resource-input 'make-tag-resource-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "resourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass tag-resource-output common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tag-resource-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'tag-resource-output 'make-tag-resource-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-output))
   common-lisp:nil))
(common-lisp:deftype tag-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass task-credentials common-lisp:nil
                       ((role-arn :initarg :role-arn :initform common-lisp:nil
                         :type (common-lisp:or long-arn common-lisp:null)
                         :accessor struct-shape-task-credentials-role-arn
                         :shape "LongArn" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-task-credentials
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'task-credentials
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'task-credentials 'make-task-credentials))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input task-credentials))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input task-credentials))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input task-credentials))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition task-does-not-exist
     (states-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       task-does-not-exist-message)))
 (common-lisp:export
  (common-lisp:list 'task-does-not-exist 'task-does-not-exist-message)))
(common-lisp:progn
 (common-lisp:defclass task-failed-event-details common-lisp:nil
                       ((resource-type :initarg :resource-type :initform
                         (common-lisp:error ":resourcetype is required") :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-task-failed-event-details-resource-type
                         :shape "Name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (resource :initarg :resource :initform
                         (common-lisp:error ":resource is required") :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-task-failed-event-details-resource :shape
                         "Name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (error :initarg :error :initform common-lisp:nil :type
                         (common-lisp:or sensitive-error common-lisp:null)
                         :accessor struct-shape-task-failed-event-details-error
                         :shape "SensitiveError" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cause :initarg :cause :initform common-lisp:nil :type
                         (common-lisp:or sensitive-cause common-lisp:null)
                         :accessor struct-shape-task-failed-event-details-cause
                         :shape "SensitiveCause" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-task-failed-event-details
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'task-failed-event-details
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'task-failed-event-details
                    'make-task-failed-event-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          task-failed-event-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          task-failed-event-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "resourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource))
      (common-lisp:list
       (common-lisp:cons "resource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error))
      (common-lisp:list
       (common-lisp:cons "error"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cause))
      (common-lisp:list
       (common-lisp:cons "cause"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          task-failed-event-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass task-scheduled-event-details common-lisp:nil
                       ((resource-type :initarg :resource-type :initform
                         (common-lisp:error ":resourcetype is required") :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-task-scheduled-event-details-resource-type
                         :shape "Name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (resource :initarg :resource :initform
                         (common-lisp:error ":resource is required") :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-task-scheduled-event-details-resource
                         :shape "Name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (region :initarg :region :initform
                         (common-lisp:error ":region is required") :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-task-scheduled-event-details-region
                         :shape "Name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (parameters :initarg :parameters :initform
                         (common-lisp:error ":parameters is required") :type
                         (common-lisp:or connector-parameters common-lisp:null)
                         :accessor
                         struct-shape-task-scheduled-event-details-parameters
                         :shape "ConnectorParameters" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (timeout-in-seconds :initarg :timeout-in-seconds
                         :initform common-lisp:nil :type
                         (common-lisp:or timeout-in-seconds common-lisp:null)
                         :accessor
                         struct-shape-task-scheduled-event-details-timeout-in-seconds
                         :shape "TimeoutInSeconds" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (heartbeat-in-seconds :initarg :heartbeat-in-seconds
                         :initform common-lisp:nil :type
                         (common-lisp:or timeout-in-seconds common-lisp:null)
                         :accessor
                         struct-shape-task-scheduled-event-details-heartbeat-in-seconds
                         :shape "TimeoutInSeconds" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (task-credentials :initarg :task-credentials :initform
                         common-lisp:nil :type
                         (common-lisp:or task-credentials common-lisp:null)
                         :accessor
                         struct-shape-task-scheduled-event-details-task-credentials
                         :shape "TaskCredentials" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-task-scheduled-event-details
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'task-scheduled-event-details
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'task-scheduled-event-details
                    'make-task-scheduled-event-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          task-scheduled-event-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          task-scheduled-event-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "resourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource))
      (common-lisp:list
       (common-lisp:cons "resource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'region))
      (common-lisp:list
       (common-lisp:cons "region"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameters))
      (common-lisp:list
       (common-lisp:cons "parameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timeout-in-seconds))
      (common-lisp:list
       (common-lisp:cons "timeoutInSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'heartbeat-in-seconds))
      (common-lisp:list
       (common-lisp:cons "heartbeatInSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-credentials))
      (common-lisp:list
       (common-lisp:cons "taskCredentials"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          task-scheduled-event-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass task-start-failed-event-details common-lisp:nil
                       ((resource-type :initarg :resource-type :initform
                         (common-lisp:error ":resourcetype is required") :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-task-start-failed-event-details-resource-type
                         :shape "Name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (resource :initarg :resource :initform
                         (common-lisp:error ":resource is required") :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-task-start-failed-event-details-resource
                         :shape "Name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (error :initarg :error :initform common-lisp:nil :type
                         (common-lisp:or sensitive-error common-lisp:null)
                         :accessor
                         struct-shape-task-start-failed-event-details-error
                         :shape "SensitiveError" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cause :initarg :cause :initform common-lisp:nil :type
                         (common-lisp:or sensitive-cause common-lisp:null)
                         :accessor
                         struct-shape-task-start-failed-event-details-cause
                         :shape "SensitiveCause" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-task-start-failed-event-details
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'task-start-failed-event-details
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'task-start-failed-event-details
                    'make-task-start-failed-event-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          task-start-failed-event-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          task-start-failed-event-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "resourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource))
      (common-lisp:list
       (common-lisp:cons "resource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error))
      (common-lisp:list
       (common-lisp:cons "error"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cause))
      (common-lisp:list
       (common-lisp:cons "cause"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          task-start-failed-event-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass task-started-event-details common-lisp:nil
                       ((resource-type :initarg :resource-type :initform
                         (common-lisp:error ":resourcetype is required") :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-task-started-event-details-resource-type
                         :shape "Name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (resource :initarg :resource :initform
                         (common-lisp:error ":resource is required") :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-task-started-event-details-resource
                         :shape "Name" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-task-started-event-details
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'task-started-event-details
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'task-started-event-details
                    'make-task-started-event-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          task-started-event-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          task-started-event-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "resourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource))
      (common-lisp:list
       (common-lisp:cons "resource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          task-started-event-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass task-submit-failed-event-details common-lisp:nil
                       ((resource-type :initarg :resource-type :initform
                         (common-lisp:error ":resourcetype is required") :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-task-submit-failed-event-details-resource-type
                         :shape "Name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (resource :initarg :resource :initform
                         (common-lisp:error ":resource is required") :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-task-submit-failed-event-details-resource
                         :shape "Name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (error :initarg :error :initform common-lisp:nil :type
                         (common-lisp:or sensitive-error common-lisp:null)
                         :accessor
                         struct-shape-task-submit-failed-event-details-error
                         :shape "SensitiveError" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cause :initarg :cause :initform common-lisp:nil :type
                         (common-lisp:or sensitive-cause common-lisp:null)
                         :accessor
                         struct-shape-task-submit-failed-event-details-cause
                         :shape "SensitiveCause" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-task-submit-failed-event-details
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'task-submit-failed-event-details
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'task-submit-failed-event-details
                    'make-task-submit-failed-event-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          task-submit-failed-event-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          task-submit-failed-event-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "resourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource))
      (common-lisp:list
       (common-lisp:cons "resource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error))
      (common-lisp:list
       (common-lisp:cons "error"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cause))
      (common-lisp:list
       (common-lisp:cons "cause"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          task-submit-failed-event-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass task-submitted-event-details common-lisp:nil
                       ((resource-type :initarg :resource-type :initform
                         (common-lisp:error ":resourcetype is required") :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-task-submitted-event-details-resource-type
                         :shape "Name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (resource :initarg :resource :initform
                         (common-lisp:error ":resource is required") :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-task-submitted-event-details-resource
                         :shape "Name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (output :initarg :output :initform common-lisp:nil
                         :type (common-lisp:or sensitive-data common-lisp:null)
                         :accessor
                         struct-shape-task-submitted-event-details-output
                         :shape "SensitiveData" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (output-details :initarg :output-details :initform
                         common-lisp:nil :type
                         (common-lisp:or history-event-execution-data-details
                                         common-lisp:null)
                         :accessor
                         struct-shape-task-submitted-event-details-output-details
                         :shape "HistoryEventExecutionDataDetails" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-task-submitted-event-details
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'task-submitted-event-details
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'task-submitted-event-details
                    'make-task-submitted-event-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          task-submitted-event-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          task-submitted-event-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "resourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource))
      (common-lisp:list
       (common-lisp:cons "resource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output))
      (common-lisp:list
       (common-lisp:cons "output"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-details))
      (common-lisp:list
       (common-lisp:cons "outputDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          task-submitted-event-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass task-succeeded-event-details common-lisp:nil
                       ((resource-type :initarg :resource-type :initform
                         (common-lisp:error ":resourcetype is required") :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-task-succeeded-event-details-resource-type
                         :shape "Name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (resource :initarg :resource :initform
                         (common-lisp:error ":resource is required") :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-task-succeeded-event-details-resource
                         :shape "Name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (output :initarg :output :initform common-lisp:nil
                         :type (common-lisp:or sensitive-data common-lisp:null)
                         :accessor
                         struct-shape-task-succeeded-event-details-output
                         :shape "SensitiveData" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (output-details :initarg :output-details :initform
                         common-lisp:nil :type
                         (common-lisp:or history-event-execution-data-details
                                         common-lisp:null)
                         :accessor
                         struct-shape-task-succeeded-event-details-output-details
                         :shape "HistoryEventExecutionDataDetails" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-task-succeeded-event-details
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'task-succeeded-event-details
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'task-succeeded-event-details
                    'make-task-succeeded-event-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          task-succeeded-event-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          task-succeeded-event-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "resourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource))
      (common-lisp:list
       (common-lisp:cons "resource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output))
      (common-lisp:list
       (common-lisp:cons "output"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-details))
      (common-lisp:list
       (common-lisp:cons "outputDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          task-succeeded-event-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition task-timed-out
     (states-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       task-timed-out-message)))
 (common-lisp:export
  (common-lisp:list 'task-timed-out 'task-timed-out-message)))
(common-lisp:progn
 (common-lisp:defclass task-timed-out-event-details common-lisp:nil
                       ((resource-type :initarg :resource-type :initform
                         (common-lisp:error ":resourcetype is required") :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-task-timed-out-event-details-resource-type
                         :shape "Name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (resource :initarg :resource :initform
                         (common-lisp:error ":resource is required") :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-task-timed-out-event-details-resource
                         :shape "Name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (error :initarg :error :initform common-lisp:nil :type
                         (common-lisp:or sensitive-error common-lisp:null)
                         :accessor
                         struct-shape-task-timed-out-event-details-error :shape
                         "SensitiveError" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cause :initarg :cause :initform common-lisp:nil :type
                         (common-lisp:or sensitive-cause common-lisp:null)
                         :accessor
                         struct-shape-task-timed-out-event-details-cause :shape
                         "SensitiveCause" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-task-timed-out-event-details
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'task-timed-out-event-details
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'task-timed-out-event-details
                    'make-task-timed-out-event-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          task-timed-out-event-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          task-timed-out-event-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "resourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource))
      (common-lisp:list
       (common-lisp:cons "resource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error))
      (common-lisp:list
       (common-lisp:cons "error"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cause))
      (common-lisp:list
       (common-lisp:cons "cause"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          task-timed-out-event-details))
   common-lisp:nil))
(common-lisp:deftype task-token () 'common-lisp:string)
(common-lisp:deftype test-execution-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass test-state-input common-lisp:nil
                       ((definition :initarg :definition :initform
                         (common-lisp:error ":definition is required") :type
                         (common-lisp:or definition common-lisp:null) :accessor
                         struct-shape-test-state-input-definition :shape
                         "Definition" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (role-arn :initarg :role-arn :initform
                         (common-lisp:error ":rolearn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-test-state-input-role-arn :shape "Arn"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (input :initarg :input :initform common-lisp:nil :type
                         (common-lisp:or sensitive-data common-lisp:null)
                         :accessor struct-shape-test-state-input-input :shape
                         "SensitiveData" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (inspection-level :initarg :inspection-level :initform
                         common-lisp:nil :type
                         (common-lisp:or inspection-level common-lisp:null)
                         :accessor
                         struct-shape-test-state-input-inspection-level :shape
                         "InspectionLevel" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (reveal-secrets :initarg :reveal-secrets :initform
                         common-lisp:nil :type
                         (common-lisp:or reveal-secrets common-lisp:null)
                         :accessor struct-shape-test-state-input-reveal-secrets
                         :shape "RevealSecrets" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-test-state-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'test-state-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'test-state-input 'make-test-state-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input test-state-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input test-state-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'definition))
      (common-lisp:list
       (common-lisp:cons "definition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input))
      (common-lisp:list
       (common-lisp:cons "input"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'inspection-level))
      (common-lisp:list
       (common-lisp:cons "inspectionLevel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reveal-secrets))
      (common-lisp:list
       (common-lisp:cons "revealSecrets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input test-state-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass test-state-output common-lisp:nil
                       ((output :initarg :output :initform common-lisp:nil
                         :type (common-lisp:or sensitive-data common-lisp:null)
                         :accessor struct-shape-test-state-output-output :shape
                         "SensitiveData" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (error :initarg :error :initform common-lisp:nil :type
                         (common-lisp:or sensitive-error common-lisp:null)
                         :accessor struct-shape-test-state-output-error :shape
                         "SensitiveError" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cause :initarg :cause :initform common-lisp:nil :type
                         (common-lisp:or sensitive-cause common-lisp:null)
                         :accessor struct-shape-test-state-output-cause :shape
                         "SensitiveCause" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (inspection-data :initarg :inspection-data :initform
                         common-lisp:nil :type
                         (common-lisp:or inspection-data common-lisp:null)
                         :accessor
                         struct-shape-test-state-output-inspection-data :shape
                         "InspectionData" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-state :initarg :next-state :initform
                         common-lisp:nil :type
                         (common-lisp:or state-name common-lisp:null) :accessor
                         struct-shape-test-state-output-next-state :shape
                         "StateName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or test-execution-status
                                         common-lisp:null)
                         :accessor struct-shape-test-state-output-status :shape
                         "TestExecutionStatus" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-test-state-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'test-state-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'test-state-output 'make-test-state-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input test-state-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input test-state-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output))
      (common-lisp:list
       (common-lisp:cons "output"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error))
      (common-lisp:list
       (common-lisp:cons "error"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cause))
      (common-lisp:list
       (common-lisp:cons "cause"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'inspection-data))
      (common-lisp:list
       (common-lisp:cons "inspectionData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-state))
      (common-lisp:list
       (common-lisp:cons "nextState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input test-state-output))
   common-lisp:nil))
(common-lisp:deftype timeout-in-seconds () 'common-lisp:integer)
(common-lisp:deftype timestamp () 'common-lisp:string)
(common-lisp:deftype tolerated-failure-count () 'common-lisp:integer)
(common-lisp:deftype tolerated-failure-percentage () 'common-lisp:single-float)
(common-lisp:progn
 (common-lisp:define-condition too-many-tags
     (states-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       too-many-tags-message)
      (resource-name :initarg :resource-name :initform common-lisp:nil :reader
       too-many-tags-resource-name)))
 (common-lisp:export
  (common-lisp:list 'too-many-tags 'too-many-tags-message
                    'too-many-tags-resource-name)))
(common-lisp:deftype trace-header () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass tracing-configuration common-lisp:nil
                       ((enabled :initarg :enabled :initform common-lisp:nil
                         :type (common-lisp:or enabled common-lisp:null)
                         :accessor struct-shape-tracing-configuration-enabled
                         :shape "Enabled" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tracing-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'tracing-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'tracing-configuration 'make-tracing-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          tracing-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          tracing-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          tracing-configuration))
   common-lisp:nil))
(common-lisp:deftype url () 'common-lisp:string)
(common-lisp:deftype unsigned-integer () 'common-lisp:integer)
(common-lisp:deftype unsigned-long () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass untag-resource-input common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resourcearn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-untag-resource-input-resource-arn :shape
                         "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (tag-keys :initarg :tag-keys :initform
                         (common-lisp:error ":tagkeys is required") :type
                         (common-lisp:or tag-key-list common-lisp:null)
                         :accessor struct-shape-untag-resource-input-tag-keys
                         :shape "TagKeyList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-untag-resource-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'untag-resource-input 'make-untag-resource-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input untag-resource-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input untag-resource-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "resourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-keys))
      (common-lisp:list
       (common-lisp:cons "tagKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input untag-resource-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass untag-resource-output common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-untag-resource-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'untag-resource-output 'make-untag-resource-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-map-run-input common-lisp:nil
                       ((map-run-arn :initarg :map-run-arn :initform
                         (common-lisp:error ":maprunarn is required") :type
                         (common-lisp:or long-arn common-lisp:null) :accessor
                         struct-shape-update-map-run-input-map-run-arn :shape
                         "LongArn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (max-concurrency :initarg :max-concurrency :initform
                         common-lisp:nil :type
                         (common-lisp:or max-concurrency common-lisp:null)
                         :accessor
                         struct-shape-update-map-run-input-max-concurrency
                         :shape "MaxConcurrency" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tolerated-failure-percentage :initarg
                         :tolerated-failure-percentage :initform
                         common-lisp:nil :type
                         (common-lisp:or tolerated-failure-percentage
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-map-run-input-tolerated-failure-percentage
                         :shape "ToleratedFailurePercentage" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (tolerated-failure-count :initarg
                         :tolerated-failure-count :initform common-lisp:nil
                         :type
                         (common-lisp:or tolerated-failure-count
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-map-run-input-tolerated-failure-count
                         :shape "ToleratedFailureCount" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-map-run-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-map-run-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-map-run-input 'make-update-map-run-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-map-run-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-map-run-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'map-run-arn))
      (common-lisp:list
       (common-lisp:cons "mapRunArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-concurrency))
      (common-lisp:list
       (common-lisp:cons "maxConcurrency"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'tolerated-failure-percentage))
      (common-lisp:list
       (common-lisp:cons "toleratedFailurePercentage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'tolerated-failure-count))
      (common-lisp:list
       (common-lisp:cons "toleratedFailureCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-map-run-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-map-run-output common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-map-run-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-map-run-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-map-run-output 'make-update-map-run-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-map-run-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-map-run-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-map-run-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-state-machine-alias-input common-lisp:nil
                       ((state-machine-alias-arn :initarg
                         :state-machine-alias-arn :initform
                         (common-lisp:error
                          ":statemachinealiasarn is required")
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-update-state-machine-alias-input-state-machine-alias-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or alias-description common-lisp:null)
                         :accessor
                         struct-shape-update-state-machine-alias-input-description
                         :shape "AliasDescription" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (routing-configuration :initarg :routing-configuration
                         :initform common-lisp:nil :type
                         (common-lisp:or routing-configuration-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-state-machine-alias-input-routing-configuration
                         :shape "RoutingConfigurationList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-state-machine-alias-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-state-machine-alias-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-state-machine-alias-input
                    'make-update-state-machine-alias-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-state-machine-alias-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-state-machine-alias-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'state-machine-alias-arn))
      (common-lisp:list
       (common-lisp:cons "stateMachineAliasArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'routing-configuration))
      (common-lisp:list
       (common-lisp:cons "routingConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-state-machine-alias-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-state-machine-alias-output common-lisp:nil
                       ((update-date :initarg :update-date :initform
                         (common-lisp:error ":updatedate is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-update-state-machine-alias-output-update-date
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-state-machine-alias-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-state-machine-alias-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-state-machine-alias-output
                    'make-update-state-machine-alias-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-state-machine-alias-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-state-machine-alias-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-date))
      (common-lisp:list
       (common-lisp:cons "updateDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-state-machine-alias-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-state-machine-input common-lisp:nil
                       ((state-machine-arn :initarg :state-machine-arn
                         :initform
                         (common-lisp:error ":statemachinearn is required")
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-update-state-machine-input-state-machine-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (definition :initarg :definition :initform
                         common-lisp:nil :type
                         (common-lisp:or definition common-lisp:null) :accessor
                         struct-shape-update-state-machine-input-definition
                         :shape "Definition" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (role-arn :initarg :role-arn :initform common-lisp:nil
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-update-state-machine-input-role-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (logging-configuration :initarg :logging-configuration
                         :initform common-lisp:nil :type
                         (common-lisp:or logging-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-state-machine-input-logging-configuration
                         :shape "LoggingConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (tracing-configuration :initarg :tracing-configuration
                         :initform common-lisp:nil :type
                         (common-lisp:or tracing-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-state-machine-input-tracing-configuration
                         :shape "TracingConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (publish :initarg :publish :initform common-lisp:nil
                         :type (common-lisp:or publish common-lisp:null)
                         :accessor
                         struct-shape-update-state-machine-input-publish :shape
                         "Publish" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (version-description :initarg :version-description
                         :initform common-lisp:nil :type
                         (common-lisp:or version-description common-lisp:null)
                         :accessor
                         struct-shape-update-state-machine-input-version-description
                         :shape "VersionDescription" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-state-machine-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-state-machine-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-state-machine-input
                    'make-update-state-machine-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-state-machine-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-state-machine-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state-machine-arn))
      (common-lisp:list
       (common-lisp:cons "stateMachineArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'definition))
      (common-lisp:list
       (common-lisp:cons "definition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'logging-configuration))
      (common-lisp:list
       (common-lisp:cons "loggingConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'tracing-configuration))
      (common-lisp:list
       (common-lisp:cons "tracingConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'publish))
      (common-lisp:list
       (common-lisp:cons "publish"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-description))
      (common-lisp:list
       (common-lisp:cons "versionDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-state-machine-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-state-machine-output common-lisp:nil
                       ((update-date :initarg :update-date :initform
                         (common-lisp:error ":updatedate is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-update-state-machine-output-update-date
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (revision-id :initarg :revision-id :initform
                         common-lisp:nil :type
                         (common-lisp:or revision-id common-lisp:null)
                         :accessor
                         struct-shape-update-state-machine-output-revision-id
                         :shape "RevisionId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (state-machine-version-arn :initarg
                         :state-machine-version-arn :initform common-lisp:nil
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-update-state-machine-output-state-machine-version-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-state-machine-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-state-machine-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-state-machine-output
                    'make-update-state-machine-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-state-machine-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-state-machine-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-date))
      (common-lisp:list
       (common-lisp:cons "updateDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'revision-id))
      (common-lisp:list
       (common-lisp:cons "revisionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'state-machine-version-arn))
      (common-lisp:list
       (common-lisp:cons "stateMachineVersionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-state-machine-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition validation-exception
     (states-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       validation-exception-message)
      (reason :initarg :reason :initform common-lisp:nil :reader
       validation-exception-reason)))
 (common-lisp:export
  (common-lisp:list 'validation-exception 'validation-exception-message
                    'validation-exception-reason)))
(common-lisp:deftype validation-exception-reason () 'common-lisp:string)
(common-lisp:deftype version-description () 'common-lisp:string)
(common-lisp:deftype version-weight () 'common-lisp:integer)
(common-lisp:deftype |includedDetails| () 'common-lisp:boolean)
(common-lisp:deftype |truncated| () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defun create-activity
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name tags)
   (common-lisp:declare (common-lisp:ignorable name tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-activity-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'states-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateActivity"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-activity))
(common-lisp:progn
 (common-lisp:defun create-state-machine
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name definition role-arn type
                     logging-configuration tags tracing-configuration publish
                     version-description)
   (common-lisp:declare
    (common-lisp:ignorable name definition role-arn type logging-configuration
     tags tracing-configuration publish version-description))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-state-machine-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'states-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateStateMachine"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-state-machine))
(common-lisp:progn
 (common-lisp:defun create-state-machine-alias
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key description name routing-configuration)
   (common-lisp:declare
    (common-lisp:ignorable description name routing-configuration))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-state-machine-alias-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'states-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateStateMachineAlias"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-state-machine-alias))
(common-lisp:progn
 (common-lisp:defun delete-activity
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key activity-arn)
   (common-lisp:declare (common-lisp:ignorable activity-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-activity-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'states-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteActivity"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-activity))
(common-lisp:progn
 (common-lisp:defun delete-state-machine
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key state-machine-arn)
   (common-lisp:declare (common-lisp:ignorable state-machine-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-state-machine-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'states-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteStateMachine"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-state-machine))
(common-lisp:progn
 (common-lisp:defun delete-state-machine-alias
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key state-machine-alias-arn)
   (common-lisp:declare (common-lisp:ignorable state-machine-alias-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-state-machine-alias-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'states-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteStateMachineAlias"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-state-machine-alias))
(common-lisp:progn
 (common-lisp:defun delete-state-machine-version
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key state-machine-version-arn)
   (common-lisp:declare (common-lisp:ignorable state-machine-version-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-state-machine-version-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'states-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteStateMachineVersion"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-state-machine-version))
(common-lisp:progn
 (common-lisp:defun describe-activity
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key activity-arn)
   (common-lisp:declare (common-lisp:ignorable activity-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-activity-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'states-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeActivity"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-activity))
(common-lisp:progn
 (common-lisp:defun describe-execution
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key execution-arn)
   (common-lisp:declare (common-lisp:ignorable execution-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-execution-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'states-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeExecution"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-execution))
(common-lisp:progn
 (common-lisp:defun describe-map-run
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key map-run-arn)
   (common-lisp:declare (common-lisp:ignorable map-run-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-map-run-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'states-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeMapRun"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-map-run))
(common-lisp:progn
 (common-lisp:defun describe-state-machine
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key state-machine-arn)
   (common-lisp:declare (common-lisp:ignorable state-machine-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-state-machine-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'states-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeStateMachine"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-state-machine))
(common-lisp:progn
 (common-lisp:defun describe-state-machine-alias
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key state-machine-alias-arn)
   (common-lisp:declare (common-lisp:ignorable state-machine-alias-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-state-machine-alias-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'states-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeStateMachineAlias"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-state-machine-alias))
(common-lisp:progn
 (common-lisp:defun describe-state-machine-for-execution
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key execution-arn)
   (common-lisp:declare (common-lisp:ignorable execution-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-state-machine-for-execution-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'states-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeStateMachineForExecution"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-state-machine-for-execution))
(common-lisp:progn
 (common-lisp:defun get-activity-task
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key activity-arn worker-name)
   (common-lisp:declare (common-lisp:ignorable activity-arn worker-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-activity-task-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'states-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetActivityTask"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-activity-task))
(common-lisp:progn
 (common-lisp:defun get-execution-history
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key execution-arn max-results reverse-order
                     next-token include-execution-data)
   (common-lisp:declare
    (common-lisp:ignorable execution-arn max-results reverse-order next-token
     include-execution-data))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-execution-history-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'states-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetExecutionHistory"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-execution-history))
(common-lisp:progn
 (common-lisp:defun list-activities
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-activities-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'states-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListActivities"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-activities))
(common-lisp:progn
 (common-lisp:defun list-executions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key state-machine-arn status-filter
                     max-results next-token map-run-arn redrive-filter)
   (common-lisp:declare
    (common-lisp:ignorable state-machine-arn status-filter max-results
     next-token map-run-arn redrive-filter))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-executions-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'states-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListExecutions"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-executions))
(common-lisp:progn
 (common-lisp:defun list-map-runs
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key execution-arn max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable execution-arn max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-map-runs-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'states-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListMapRuns"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-map-runs))
(common-lisp:progn
 (common-lisp:defun list-state-machine-aliases
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key state-machine-arn next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable state-machine-arn next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-state-machine-aliases-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'states-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListStateMachineAliases"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-state-machine-aliases))
(common-lisp:progn
 (common-lisp:defun list-state-machine-versions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key state-machine-arn next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable state-machine-arn next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-state-machine-versions-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'states-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListStateMachineVersions"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-state-machine-versions))
(common-lisp:progn
 (common-lisp:defun list-state-machines
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-state-machines-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'states-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListStateMachines"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-state-machines))
(common-lisp:progn
 (common-lisp:defun list-tags-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn)
   (common-lisp:declare (common-lisp:ignorable resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-for-resource-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'states-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListTagsForResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-tags-for-resource))
(common-lisp:progn
 (common-lisp:defun publish-state-machine-version
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key state-machine-arn revision-id
                     description)
   (common-lisp:declare
    (common-lisp:ignorable state-machine-arn revision-id description))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-publish-state-machine-version-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'states-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "PublishStateMachineVersion"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'publish-state-machine-version))
(common-lisp:progn
 (common-lisp:defun redrive-execution
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key execution-arn client-token)
   (common-lisp:declare (common-lisp:ignorable execution-arn client-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-redrive-execution-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'states-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "RedriveExecution"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'redrive-execution))
(common-lisp:progn
 (common-lisp:defun send-task-failure
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key task-token error cause)
   (common-lisp:declare (common-lisp:ignorable task-token error cause))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-send-task-failure-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'states-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "SendTaskFailure"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'send-task-failure))
(common-lisp:progn
 (common-lisp:defun send-task-heartbeat
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key task-token)
   (common-lisp:declare (common-lisp:ignorable task-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-send-task-heartbeat-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'states-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "SendTaskHeartbeat"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'send-task-heartbeat))
(common-lisp:progn
 (common-lisp:defun send-task-success
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key task-token output)
   (common-lisp:declare (common-lisp:ignorable task-token output))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-send-task-success-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'states-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "SendTaskSuccess"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'send-task-success))
(common-lisp:progn
 (common-lisp:defun start-execution
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key state-machine-arn name input
                     trace-header)
   (common-lisp:declare
    (common-lisp:ignorable state-machine-arn name input trace-header))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-start-execution-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'states-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "StartExecution"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'start-execution))
(common-lisp:progn
 (common-lisp:defun start-sync-execution
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key state-machine-arn name input
                     trace-header)
   (common-lisp:declare
    (common-lisp:ignorable state-machine-arn name input trace-header))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-start-sync-execution-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'states-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "StartSyncExecution"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'start-sync-execution))
(common-lisp:progn
 (common-lisp:defun stop-execution
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key execution-arn error cause)
   (common-lisp:declare (common-lisp:ignorable execution-arn error cause))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-stop-execution-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'states-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "StopExecution"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'stop-execution))
(common-lisp:progn
 (common-lisp:defun tag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tags)
   (common-lisp:declare (common-lisp:ignorable resource-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-resource-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'states-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "TagResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'tag-resource))
(common-lisp:progn
 (common-lisp:defun test-state
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key definition role-arn input
                     inspection-level reveal-secrets)
   (common-lisp:declare
    (common-lisp:ignorable definition role-arn input inspection-level
     reveal-secrets))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-test-state-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'states-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "TestState"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'test-state))
(common-lisp:progn
 (common-lisp:defun untag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tag-keys)
   (common-lisp:declare (common-lisp:ignorable resource-arn tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-resource-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'states-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UntagResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'untag-resource))
(common-lisp:progn
 (common-lisp:defun update-map-run
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key map-run-arn max-concurrency
                     tolerated-failure-percentage tolerated-failure-count)
   (common-lisp:declare
    (common-lisp:ignorable map-run-arn max-concurrency
     tolerated-failure-percentage tolerated-failure-count))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-map-run-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'states-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateMapRun"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-map-run))
(common-lisp:progn
 (common-lisp:defun update-state-machine
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key state-machine-arn definition role-arn
                     logging-configuration tracing-configuration publish
                     version-description)
   (common-lisp:declare
    (common-lisp:ignorable state-machine-arn definition role-arn
     logging-configuration tracing-configuration publish version-description))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-state-machine-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'states-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateStateMachine"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-state-machine))
(common-lisp:progn
 (common-lisp:defun update-state-machine-alias
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key state-machine-alias-arn description
                     routing-configuration)
   (common-lisp:declare
    (common-lisp:ignorable state-machine-alias-arn description
     routing-configuration))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-state-machine-alias-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'states-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateStateMachineAlias"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-state-machine-alias))
