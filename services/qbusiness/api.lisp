;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/qbusiness/api
  (:use)
  (:nicknames #:aws/qbusiness)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/json-request)
  (:import-from #:aws-sdk/rest-json-request)
  (:import-from #:aws-sdk/rest-xml-request)
  (:import-from #:aws-sdk/query-request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/qbusiness/api)
(common-lisp:progn
 (common-lisp:define-condition qbusiness-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'qbusiness-error))
(common-lisp:progn
 (common-lisp:defclass qbusiness-request
                       (aws-sdk/generator/service::rest-json-request)
                       common-lisp:nil
                       (:default-initargs :service "qbusiness" :api-version
                        "2023-11-27" :host-prefix "qbusiness" :signing-name
                        "qbusiness" :global-host common-lisp:nil))
 (common-lisp:export 'qbusiness-request))
(common-lisp:defvar *error-map*
  '(("AccessDeniedException" . access-denied-exception)
    ("ConflictException" . conflict-exception)
    ("InternalServerException" . internal-server-exception)
    ("LicenseNotFoundException" . license-not-found-exception)
    ("ResourceNotFoundException" . resource-not-found-exception)
    ("ServiceQuotaExceededException" . service-quota-exceeded-exception)
    ("ThrottlingException" . throttling-exception)
    ("ValidationException" . validation-exception)))
(common-lisp:progn
 (common-lisp:defclass access-configuration common-lisp:nil
                       ((access-controls :initarg :access-controls :initform
                         (common-lisp:error ":accesscontrols is required")
                         :type
                         (common-lisp:or access-controls common-lisp:null)
                         :accessor
                         struct-shape-access-configuration-access-controls
                         :shape "AccessControls" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (member-relation :initarg :member-relation :initform
                         common-lisp:nil :type
                         (common-lisp:or member-relation common-lisp:null)
                         :accessor
                         struct-shape-access-configuration-member-relation
                         :shape "MemberRelation" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-access-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'access-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'access-configuration 'make-access-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input access-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input access-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-controls))
      (common-lisp:list
       (common-lisp:cons "accessControls"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'member-relation))
      (common-lisp:list
       (common-lisp:cons "memberRelation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input access-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass access-control common-lisp:nil
                       ((member-relation :initarg :member-relation :initform
                         common-lisp:nil :type
                         (common-lisp:or member-relation common-lisp:null)
                         :accessor struct-shape-access-control-member-relation
                         :shape "MemberRelation" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (principals :initarg :principals :initform
                         (common-lisp:error ":principals is required") :type
                         (common-lisp:or principals common-lisp:null) :accessor
                         struct-shape-access-control-principals :shape
                         "Principals" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-access-control
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'access-control
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'access-control 'make-access-control))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input access-control))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input access-control))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'member-relation))
      (common-lisp:list
       (common-lisp:cons "memberRelation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'principals))
      (common-lisp:list
       (common-lisp:cons "principals"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input access-control))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype access-controls ()
   '(trivial-types:proper-list access-control))
 (common-lisp:defun make-access-controls
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list access-control))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition access-denied-exception
     (qbusiness-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       access-denied-exception-message)))
 (common-lisp:export
  (common-lisp:list 'access-denied-exception 'access-denied-exception-message)))
(common-lisp:deftype action-payload-field-key () 'common-lisp:string)
(common-lisp:deftype action-payload-field-name-separator () 'common-lisp:string)
(common-lisp:deftype action-payload-field-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass action-review common-lisp:nil
                       ((payload :initarg :payload :initform common-lisp:nil
                         :type
                         (common-lisp:or action-review-payload
                                         common-lisp:null)
                         :accessor struct-shape-action-review-payload :shape
                         "ActionReviewPayload" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (payload-field-name-separator :initarg
                         :payload-field-name-separator :initform
                         common-lisp:nil :type
                         (common-lisp:or action-payload-field-name-separator
                                         common-lisp:null)
                         :accessor
                         struct-shape-action-review-payload-field-name-separator
                         :shape "ActionPayloadFieldNameSeparator" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (plugin-id :initarg :plugin-id :initform
                         common-lisp:nil :type
                         (common-lisp:or plugin-id common-lisp:null) :accessor
                         struct-shape-action-review-plugin-id :shape "PluginId"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (plugin-type :initarg :plugin-type :initform
                         common-lisp:nil :type
                         (common-lisp:or plugin-type common-lisp:null)
                         :accessor struct-shape-action-review-plugin-type
                         :shape "PluginType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-action-review
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'action-review
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'action-review 'make-action-review))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input action-review))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input action-review))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'payload))
      (common-lisp:list
       (common-lisp:cons "payload"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'payload-field-name-separator))
      (common-lisp:list
       (common-lisp:cons "payloadFieldNameSeparator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'plugin-id))
      (common-lisp:list
       (common-lisp:cons "pluginId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'plugin-type))
      (common-lisp:list
       (common-lisp:cons "pluginType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input action-review))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype action-review-payload () 'common-lisp:hash-table)
 (common-lisp:defun make-action-review-payload
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defclass action-review-payload-field common-lisp:nil
                       ((allowed-values :initarg :allowed-values :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          action-review-payload-field-allowed-values
                          common-lisp:null)
                         :accessor
                         struct-shape-action-review-payload-field-allowed-values
                         :shape "ActionReviewPayloadFieldAllowedValues"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (display-name :initarg :display-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-action-review-payload-field-display-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (display-order :initarg :display-order :initform
                         common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-action-review-payload-field-display-order
                         :shape "Integer" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (required :initarg :required :initform common-lisp:nil
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         struct-shape-action-review-payload-field-required
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or action-payload-field-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-action-review-payload-field-type :shape
                         "ActionPayloadFieldType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-action-review-payload-field
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'action-review-payload-field
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'action-review-payload-field
                    'make-action-review-payload-field))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          action-review-payload-field))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          action-review-payload-field))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allowed-values))
      (common-lisp:list
       (common-lisp:cons "allowedValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-name))
      (common-lisp:list
       (common-lisp:cons "displayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-order))
      (common-lisp:list
       (common-lisp:cons "displayOrder"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'required))
      (common-lisp:list
       (common-lisp:cons "required"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          action-review-payload-field))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass action-review-payload-field-allowed-value
                       common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-action-review-payload-field-allowed-value
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'action-review-payload-field-allowed-value
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'action-review-payload-field-allowed-value
                    'make-action-review-payload-field-allowed-value))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          action-review-payload-field-allowed-value))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          action-review-payload-field-allowed-value))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          action-review-payload-field-allowed-value))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype action-review-payload-field-allowed-values ()
   '(trivial-types:proper-list action-review-payload-field-allowed-value))
 (common-lisp:defun make-action-review-payload-field-allowed-values
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            action-review-payload-field-allowed-value))
   aws-sdk/generator/shape::members))
(common-lisp:deftype amazon-resource-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass application common-lisp:nil
                       ((application-id :initarg :application-id :initform
                         common-lisp:nil :type
                         (common-lisp:or application-id common-lisp:null)
                         :accessor struct-shape-application-application-id
                         :shape "ApplicationId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (created-at :initarg :created-at :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-application-created-at :shape "Timestamp"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (display-name :initarg :display-name :initform
                         common-lisp:nil :type
                         (common-lisp:or application-name common-lisp:null)
                         :accessor struct-shape-application-display-name :shape
                         "ApplicationName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or application-status common-lisp:null)
                         :accessor struct-shape-application-status :shape
                         "ApplicationStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (updated-at :initarg :updated-at :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-application-updated-at :shape "Timestamp"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-application
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'application
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'application 'make-application))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input application))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input application))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-id))
      (common-lisp:list
       (common-lisp:cons "applicationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-name))
      (common-lisp:list
       (common-lisp:cons "displayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input application))
   common-lisp:nil))
(common-lisp:deftype application-arn () 'common-lisp:string)
(common-lisp:deftype application-id () 'common-lisp:string)
(common-lisp:deftype application-name () 'common-lisp:string)
(common-lisp:deftype application-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype applications () '(trivial-types:proper-list application))
 (common-lisp:defun make-applications
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list application))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass applied-attachments-configuration common-lisp:nil
                       ((attachments-control-mode :initarg
                         :attachments-control-mode :initform common-lisp:nil
                         :type
                         (common-lisp:or attachments-control-mode
                                         common-lisp:null)
                         :accessor
                         struct-shape-applied-attachments-configuration-attachments-control-mode
                         :shape "AttachmentsControlMode" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-applied-attachments-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'applied-attachments-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'applied-attachments-configuration
                    'make-applied-attachments-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          applied-attachments-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          applied-attachments-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'attachments-control-mode))
      (common-lisp:list
       (common-lisp:cons "attachmentsControlMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          applied-attachments-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass attachment-input common-lisp:nil
                       ((data :initarg :data :initform
                         (common-lisp:error ":data is required") :type
                         (common-lisp:or blob common-lisp:null) :accessor
                         struct-shape-attachment-input-data :shape "Blob"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or attachment-name common-lisp:null)
                         :accessor struct-shape-attachment-input-name :shape
                         "AttachmentName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-attachment-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'attachment-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'attachment-input 'make-attachment-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input attachment-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input attachment-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data))
      (common-lisp:list
       (common-lisp:cons "data"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input attachment-input))
   common-lisp:nil))
(common-lisp:deftype attachment-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass attachment-output common-lisp:nil
                       ((error :initarg :error :initform common-lisp:nil :type
                         (common-lisp:or error-detail common-lisp:null)
                         :accessor struct-shape-attachment-output-error :shape
                         "ErrorDetail" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or attachment-name common-lisp:null)
                         :accessor struct-shape-attachment-output-name :shape
                         "AttachmentName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or attachment-status common-lisp:null)
                         :accessor struct-shape-attachment-output-status :shape
                         "AttachmentStatus" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-attachment-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'attachment-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'attachment-output 'make-attachment-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input attachment-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input attachment-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error))
      (common-lisp:list
       (common-lisp:cons "error"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input attachment-output))
   common-lisp:nil))
(common-lisp:deftype attachment-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass attachments-configuration common-lisp:nil
                       ((attachments-control-mode :initarg
                         :attachments-control-mode :initform
                         (common-lisp:error
                          ":attachmentscontrolmode is required")
                         :type
                         (common-lisp:or attachments-control-mode
                                         common-lisp:null)
                         :accessor
                         struct-shape-attachments-configuration-attachments-control-mode
                         :shape "AttachmentsControlMode" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-attachments-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'attachments-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'attachments-configuration
                    'make-attachments-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          attachments-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          attachments-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'attachments-control-mode))
      (common-lisp:list
       (common-lisp:cons "attachmentsControlMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          attachments-configuration))
   common-lisp:nil))
(common-lisp:deftype attachments-control-mode () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype attachments-input ()
   '(trivial-types:proper-list attachment-input))
 (common-lisp:defun make-attachments-input
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list attachment-input))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype attachments-output ()
   '(trivial-types:proper-list attachment-output))
 (common-lisp:defun make-attachments-output
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list attachment-output))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass attribute-filter common-lisp:nil
                       ((and-all-filters :initarg :and-all-filters :initform
                         common-lisp:nil :type
                         (common-lisp:or attribute-filters common-lisp:null)
                         :accessor
                         struct-shape-attribute-filter-and-all-filters :shape
                         "AttributeFilters" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (contains-all :initarg :contains-all :initform
                         common-lisp:nil :type
                         (common-lisp:or document-attribute common-lisp:null)
                         :accessor struct-shape-attribute-filter-contains-all
                         :shape "DocumentAttribute" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (contains-any :initarg :contains-any :initform
                         common-lisp:nil :type
                         (common-lisp:or document-attribute common-lisp:null)
                         :accessor struct-shape-attribute-filter-contains-any
                         :shape "DocumentAttribute" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (equals-to :initarg :equals-to :initform
                         common-lisp:nil :type
                         (common-lisp:or document-attribute common-lisp:null)
                         :accessor struct-shape-attribute-filter-equals-to
                         :shape "DocumentAttribute" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (greater-than :initarg :greater-than :initform
                         common-lisp:nil :type
                         (common-lisp:or document-attribute common-lisp:null)
                         :accessor struct-shape-attribute-filter-greater-than
                         :shape "DocumentAttribute" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (greater-than-or-equals :initarg
                         :greater-than-or-equals :initform common-lisp:nil
                         :type
                         (common-lisp:or document-attribute common-lisp:null)
                         :accessor
                         struct-shape-attribute-filter-greater-than-or-equals
                         :shape "DocumentAttribute" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (less-than :initarg :less-than :initform
                         common-lisp:nil :type
                         (common-lisp:or document-attribute common-lisp:null)
                         :accessor struct-shape-attribute-filter-less-than
                         :shape "DocumentAttribute" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (less-than-or-equals :initarg :less-than-or-equals
                         :initform common-lisp:nil :type
                         (common-lisp:or document-attribute common-lisp:null)
                         :accessor
                         struct-shape-attribute-filter-less-than-or-equals
                         :shape "DocumentAttribute" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (not-filter :initarg :not-filter :initform
                         common-lisp:nil :type
                         (common-lisp:or attribute-filter common-lisp:null)
                         :accessor struct-shape-attribute-filter-not-filter
                         :shape "AttributeFilter" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (or-all-filters :initarg :or-all-filters :initform
                         common-lisp:nil :type
                         (common-lisp:or attribute-filters common-lisp:null)
                         :accessor struct-shape-attribute-filter-or-all-filters
                         :shape "AttributeFilters" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-attribute-filter
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'attribute-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'attribute-filter 'make-attribute-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input attribute-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input attribute-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'and-all-filters))
      (common-lisp:list
       (common-lisp:cons "andAllFilters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'contains-all))
      (common-lisp:list
       (common-lisp:cons "containsAll"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'contains-any))
      (common-lisp:list
       (common-lisp:cons "containsAny"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'equals-to))
      (common-lisp:list
       (common-lisp:cons "equalsTo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'greater-than))
      (common-lisp:list
       (common-lisp:cons "greaterThan"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'greater-than-or-equals))
      (common-lisp:list
       (common-lisp:cons "greaterThanOrEquals"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'less-than))
      (common-lisp:list
       (common-lisp:cons "lessThan"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'less-than-or-equals))
      (common-lisp:list
       (common-lisp:cons "lessThanOrEquals"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'not-filter))
      (common-lisp:list
       (common-lisp:cons "notFilter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'or-all-filters))
      (common-lisp:list
       (common-lisp:cons "orAllFilters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input attribute-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype attribute-filters ()
   '(trivial-types:proper-list attribute-filter))
 (common-lisp:defun make-attribute-filters
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list attribute-filter))
   aws-sdk/generator/shape::members))
(common-lisp:deftype attribute-type () 'common-lisp:string)
(common-lisp:deftype attribute-value-operator () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass basic-auth-configuration common-lisp:nil
                       ((role-arn :initarg :role-arn :initform
                         (common-lisp:error ":rolearn is required") :type
                         (common-lisp:or role-arn common-lisp:null) :accessor
                         struct-shape-basic-auth-configuration-role-arn :shape
                         "RoleArn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (secret-arn :initarg :secret-arn :initform
                         (common-lisp:error ":secretarn is required") :type
                         (common-lisp:or secret-arn common-lisp:null) :accessor
                         struct-shape-basic-auth-configuration-secret-arn
                         :shape "SecretArn" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-basic-auth-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'basic-auth-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'basic-auth-configuration 'make-basic-auth-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          basic-auth-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          basic-auth-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'secret-arn))
      (common-lisp:list
       (common-lisp:cons "secretArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          basic-auth-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass batch-delete-document-request common-lisp:nil
                       ((application-id :initarg :application-id :initform
                         (common-lisp:error ":applicationid is required") :type
                         (common-lisp:or application-id common-lisp:null)
                         :accessor
                         struct-shape-batch-delete-document-request-application-id
                         :shape "ApplicationId" :location "uri" :location-name
                         "applicationId")
                        (data-source-sync-id :initarg :data-source-sync-id
                         :initform common-lisp:nil :type
                         (common-lisp:or execution-id common-lisp:null)
                         :accessor
                         struct-shape-batch-delete-document-request-data-source-sync-id
                         :shape "ExecutionId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (documents :initarg :documents :initform
                         (common-lisp:error ":documents is required") :type
                         (common-lisp:or delete-documents common-lisp:null)
                         :accessor
                         struct-shape-batch-delete-document-request-documents
                         :shape "DeleteDocuments" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (index-id :initarg :index-id :initform
                         (common-lisp:error ":indexid is required") :type
                         (common-lisp:or index-id common-lisp:null) :accessor
                         struct-shape-batch-delete-document-request-index-id
                         :shape "IndexId" :location "uri" :location-name
                         "indexId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-batch-delete-document-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'batch-delete-document-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'batch-delete-document-request
                    'make-batch-delete-document-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-delete-document-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-delete-document-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-source-sync-id))
      (common-lisp:list
       (common-lisp:cons "dataSourceSyncId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'documents))
      (common-lisp:list
       (common-lisp:cons "documents"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-delete-document-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass batch-delete-document-response common-lisp:nil
                       ((failed-documents :initarg :failed-documents :initform
                         common-lisp:nil :type
                         (common-lisp:or failed-documents common-lisp:null)
                         :accessor
                         struct-shape-batch-delete-document-response-failed-documents
                         :shape "FailedDocuments" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-batch-delete-document-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'batch-delete-document-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'batch-delete-document-response
                    'make-batch-delete-document-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-delete-document-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-delete-document-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failed-documents))
      (common-lisp:list
       (common-lisp:cons "failedDocuments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-delete-document-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass batch-put-document-request common-lisp:nil
                       ((application-id :initarg :application-id :initform
                         (common-lisp:error ":applicationid is required") :type
                         (common-lisp:or application-id common-lisp:null)
                         :accessor
                         struct-shape-batch-put-document-request-application-id
                         :shape "ApplicationId" :location "uri" :location-name
                         "applicationId")
                        (data-source-sync-id :initarg :data-source-sync-id
                         :initform common-lisp:nil :type
                         (common-lisp:or execution-id common-lisp:null)
                         :accessor
                         struct-shape-batch-put-document-request-data-source-sync-id
                         :shape "ExecutionId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (documents :initarg :documents :initform
                         (common-lisp:error ":documents is required") :type
                         (common-lisp:or documents common-lisp:null) :accessor
                         struct-shape-batch-put-document-request-documents
                         :shape "Documents" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (index-id :initarg :index-id :initform
                         (common-lisp:error ":indexid is required") :type
                         (common-lisp:or index-id common-lisp:null) :accessor
                         struct-shape-batch-put-document-request-index-id
                         :shape "IndexId" :location "uri" :location-name
                         "indexId")
                        (role-arn :initarg :role-arn :initform common-lisp:nil
                         :type (common-lisp:or role-arn common-lisp:null)
                         :accessor
                         struct-shape-batch-put-document-request-role-arn
                         :shape "RoleArn" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-batch-put-document-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'batch-put-document-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'batch-put-document-request
                    'make-batch-put-document-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-put-document-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-put-document-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-source-sync-id))
      (common-lisp:list
       (common-lisp:cons "dataSourceSyncId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'documents))
      (common-lisp:list
       (common-lisp:cons "documents"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-put-document-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass batch-put-document-response common-lisp:nil
                       ((failed-documents :initarg :failed-documents :initform
                         common-lisp:nil :type
                         (common-lisp:or failed-documents common-lisp:null)
                         :accessor
                         struct-shape-batch-put-document-response-failed-documents
                         :shape "FailedDocuments" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-batch-put-document-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'batch-put-document-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'batch-put-document-response
                    'make-batch-put-document-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-put-document-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-put-document-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failed-documents))
      (common-lisp:list
       (common-lisp:cons "failedDocuments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-put-document-response))
   common-lisp:nil))
(common-lisp:deftype blob ()
  '(common-lisp:simple-array (common-lisp:unsigned-byte 8) (common-lisp:*)))
(common-lisp:deftype blocked-phrase () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype blocked-phrases ()
   '(trivial-types:proper-list blocked-phrase))
 (common-lisp:defun make-blocked-phrases
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list blocked-phrase))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass blocked-phrases-configuration common-lisp:nil
                       ((blocked-phrases :initarg :blocked-phrases :initform
                         common-lisp:nil :type
                         (common-lisp:or blocked-phrases common-lisp:null)
                         :accessor
                         struct-shape-blocked-phrases-configuration-blocked-phrases
                         :shape "BlockedPhrases" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (system-message-override :initarg
                         :system-message-override :initform common-lisp:nil
                         :type
                         (common-lisp:or system-message-override
                                         common-lisp:null)
                         :accessor
                         struct-shape-blocked-phrases-configuration-system-message-override
                         :shape "SystemMessageOverride" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-blocked-phrases-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'blocked-phrases-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'blocked-phrases-configuration
                    'make-blocked-phrases-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          blocked-phrases-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          blocked-phrases-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'blocked-phrases))
      (common-lisp:list
       (common-lisp:cons "blockedPhrases"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'system-message-override))
      (common-lisp:list
       (common-lisp:cons "systemMessageOverride"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          blocked-phrases-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass blocked-phrases-configuration-update common-lisp:nil
                       ((blocked-phrases-to-create-or-update :initarg
                         :blocked-phrases-to-create-or-update :initform
                         common-lisp:nil :type
                         (common-lisp:or blocked-phrases common-lisp:null)
                         :accessor
                         struct-shape-blocked-phrases-configuration-update-blocked-phrases-to-create-or-update
                         :shape "BlockedPhrases" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (blocked-phrases-to-delete :initarg
                         :blocked-phrases-to-delete :initform common-lisp:nil
                         :type
                         (common-lisp:or blocked-phrases common-lisp:null)
                         :accessor
                         struct-shape-blocked-phrases-configuration-update-blocked-phrases-to-delete
                         :shape "BlockedPhrases" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (system-message-override :initarg
                         :system-message-override :initform common-lisp:nil
                         :type
                         (common-lisp:or system-message-override
                                         common-lisp:null)
                         :accessor
                         struct-shape-blocked-phrases-configuration-update-system-message-override
                         :shape "SystemMessageOverride" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-blocked-phrases-configuration-update
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'blocked-phrases-configuration-update
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'blocked-phrases-configuration-update
                    'make-blocked-phrases-configuration-update))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          blocked-phrases-configuration-update))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          blocked-phrases-configuration-update))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'blocked-phrases-to-create-or-update))
      (common-lisp:list
       (common-lisp:cons "blockedPhrasesToCreateOrUpdate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'blocked-phrases-to-delete))
      (common-lisp:list
       (common-lisp:cons "blockedPhrasesToDelete"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'system-message-override))
      (common-lisp:list
       (common-lisp:cons "systemMessageOverride"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          blocked-phrases-configuration-update))
   common-lisp:nil))
(common-lisp:deftype boolean () 'common-lisp:boolean)
(common-lisp:deftype boosting-duration-in-seconds () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass chat-sync-input common-lisp:nil
                       ((application-id :initarg :application-id :initform
                         (common-lisp:error ":applicationid is required") :type
                         (common-lisp:or application-id common-lisp:null)
                         :accessor struct-shape-chat-sync-input-application-id
                         :shape "ApplicationId" :location "uri" :location-name
                         "applicationId")
                        (attachments :initarg :attachments :initform
                         common-lisp:nil :type
                         (common-lisp:or attachments-input common-lisp:null)
                         :accessor struct-shape-chat-sync-input-attachments
                         :shape "AttachmentsInput" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (attribute-filter :initarg :attribute-filter :initform
                         common-lisp:nil :type
                         (common-lisp:or attribute-filter common-lisp:null)
                         :accessor
                         struct-shape-chat-sync-input-attribute-filter :shape
                         "AttributeFilter" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor struct-shape-chat-sync-input-client-token
                         :shape "ClientToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (conversation-id :initarg :conversation-id :initform
                         common-lisp:nil :type
                         (common-lisp:or conversation-id common-lisp:null)
                         :accessor struct-shape-chat-sync-input-conversation-id
                         :shape "ConversationId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (parent-message-id :initarg :parent-message-id
                         :initform common-lisp:nil :type
                         (common-lisp:or message-id common-lisp:null) :accessor
                         struct-shape-chat-sync-input-parent-message-id :shape
                         "MessageId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (user-groups :initarg :user-groups :initform
                         common-lisp:nil :type
                         (common-lisp:or user-groups common-lisp:null)
                         :accessor struct-shape-chat-sync-input-user-groups
                         :shape "UserGroups" :location "querystring"
                         :location-name "userGroups")
                        (user-id :initarg :user-id :initform
                         (common-lisp:error ":userid is required") :type
                         (common-lisp:or user-id common-lisp:null) :accessor
                         struct-shape-chat-sync-input-user-id :shape "UserId"
                         :location "querystring" :location-name "userId")
                        (user-message :initarg :user-message :initform
                         common-lisp:nil :type
                         (common-lisp:or user-message common-lisp:null)
                         :accessor struct-shape-chat-sync-input-user-message
                         :shape "UserMessage" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-chat-sync-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'chat-sync-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'chat-sync-input 'make-chat-sync-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input chat-sync-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input chat-sync-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attachments))
      (common-lisp:list
       (common-lisp:cons "attachments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attribute-filter))
      (common-lisp:list
       (common-lisp:cons "attributeFilter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'conversation-id))
      (common-lisp:list
       (common-lisp:cons "conversationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parent-message-id))
      (common-lisp:list
       (common-lisp:cons "parentMessageId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-message))
      (common-lisp:list
       (common-lisp:cons "userMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input chat-sync-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass chat-sync-output common-lisp:nil
                       ((action-review :initarg :action-review :initform
                         common-lisp:nil :type
                         (common-lisp:or action-review common-lisp:null)
                         :accessor struct-shape-chat-sync-output-action-review
                         :shape "ActionReview" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (conversation-id :initarg :conversation-id :initform
                         common-lisp:nil :type
                         (common-lisp:or conversation-id common-lisp:null)
                         :accessor
                         struct-shape-chat-sync-output-conversation-id :shape
                         "ConversationId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (failed-attachments :initarg :failed-attachments
                         :initform common-lisp:nil :type
                         (common-lisp:or attachments-output common-lisp:null)
                         :accessor
                         struct-shape-chat-sync-output-failed-attachments
                         :shape "AttachmentsOutput" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (source-attributions :initarg :source-attributions
                         :initform common-lisp:nil :type
                         (common-lisp:or source-attributions common-lisp:null)
                         :accessor
                         struct-shape-chat-sync-output-source-attributions
                         :shape "SourceAttributions" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (system-message :initarg :system-message :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-chat-sync-output-system-message :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (system-message-id :initarg :system-message-id
                         :initform common-lisp:nil :type
                         (common-lisp:or message-id common-lisp:null) :accessor
                         struct-shape-chat-sync-output-system-message-id :shape
                         "MessageId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (user-message-id :initarg :user-message-id :initform
                         common-lisp:nil :type
                         (common-lisp:or message-id common-lisp:null) :accessor
                         struct-shape-chat-sync-output-user-message-id :shape
                         "MessageId" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-chat-sync-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'chat-sync-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'chat-sync-output 'make-chat-sync-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input chat-sync-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input chat-sync-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-review))
      (common-lisp:list
       (common-lisp:cons "actionReview"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'conversation-id))
      (common-lisp:list
       (common-lisp:cons "conversationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failed-attachments))
      (common-lisp:list
       (common-lisp:cons "failedAttachments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-attributions))
      (common-lisp:list
       (common-lisp:cons "sourceAttributions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'system-message))
      (common-lisp:list
       (common-lisp:cons "systemMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'system-message-id))
      (common-lisp:list
       (common-lisp:cons "systemMessageId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-message-id))
      (common-lisp:list
       (common-lisp:cons "userMessageId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input chat-sync-output))
   common-lisp:nil))
(common-lisp:deftype client-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition conflict-exception
     (qbusiness-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       conflict-exception-message)
      (resource-id :initarg :resource-id :initform common-lisp:nil :reader
       conflict-exception-resource-id)
      (resource-type :initarg :resource-type :initform common-lisp:nil :reader
       conflict-exception-resource-type)))
 (common-lisp:export
  (common-lisp:list 'conflict-exception 'conflict-exception-message
                    'conflict-exception-resource-id
                    'conflict-exception-resource-type)))
(common-lisp:progn
 (common-lisp:defclass content-blocker-rule common-lisp:nil
                       ((system-message-override :initarg
                         :system-message-override :initform common-lisp:nil
                         :type
                         (common-lisp:or system-message-override
                                         common-lisp:null)
                         :accessor
                         struct-shape-content-blocker-rule-system-message-override
                         :shape "SystemMessageOverride" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-content-blocker-rule
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'content-blocker-rule
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'content-blocker-rule 'make-content-blocker-rule))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input content-blocker-rule))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input content-blocker-rule))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'system-message-override))
      (common-lisp:list
       (common-lisp:cons "systemMessageOverride"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input content-blocker-rule))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass content-retrieval-rule common-lisp:nil
                       ((eligible-data-sources :initarg :eligible-data-sources
                         :initform common-lisp:nil :type
                         (common-lisp:or eligible-data-sources
                                         common-lisp:null)
                         :accessor
                         struct-shape-content-retrieval-rule-eligible-data-sources
                         :shape "EligibleDataSources" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-content-retrieval-rule
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'content-retrieval-rule
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'content-retrieval-rule 'make-content-retrieval-rule))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          content-retrieval-rule))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          content-retrieval-rule))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'eligible-data-sources))
      (common-lisp:list
       (common-lisp:cons "eligibleDataSources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          content-retrieval-rule))
   common-lisp:nil))
(common-lisp:deftype content-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass conversation common-lisp:nil
                       ((conversation-id :initarg :conversation-id :initform
                         common-lisp:nil :type
                         (common-lisp:or conversation-id common-lisp:null)
                         :accessor struct-shape-conversation-conversation-id
                         :shape "ConversationId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (start-time :initarg :start-time :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-conversation-start-time :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (title :initarg :title :initform common-lisp:nil :type
                         (common-lisp:or conversation-title common-lisp:null)
                         :accessor struct-shape-conversation-title :shape
                         "ConversationTitle" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-conversation
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'conversation
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'conversation 'make-conversation))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input conversation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input conversation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'conversation-id))
      (common-lisp:list
       (common-lisp:cons "conversationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "startTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'title))
      (common-lisp:list
       (common-lisp:cons "title"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input conversation))
   common-lisp:nil))
(common-lisp:deftype conversation-id () 'common-lisp:string)
(common-lisp:deftype conversation-title () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype conversations ()
   '(trivial-types:proper-list conversation))
 (common-lisp:defun make-conversations
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list conversation))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass create-application-request common-lisp:nil
                       ((attachments-configuration :initarg
                         :attachments-configuration :initform common-lisp:nil
                         :type
                         (common-lisp:or attachments-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-application-request-attachments-configuration
                         :shape "AttachmentsConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor
                         struct-shape-create-application-request-client-token
                         :shape "ClientToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor
                         struct-shape-create-application-request-description
                         :shape "Description" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (display-name :initarg :display-name :initform
                         (common-lisp:error ":displayname is required") :type
                         (common-lisp:or application-name common-lisp:null)
                         :accessor
                         struct-shape-create-application-request-display-name
                         :shape "ApplicationName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (encryption-configuration :initarg
                         :encryption-configuration :initform common-lisp:nil
                         :type
                         (common-lisp:or encryption-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-application-request-encryption-configuration
                         :shape "EncryptionConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (role-arn :initarg :role-arn :initform
                         (common-lisp:error ":rolearn is required") :type
                         (common-lisp:or role-arn common-lisp:null) :accessor
                         struct-shape-create-application-request-role-arn
                         :shape "RoleArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         struct-shape-create-application-request-tags :shape
                         "Tags" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-application-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-application-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-application-request
                    'make-create-application-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-application-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-application-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'attachments-configuration))
      (common-lisp:list
       (common-lisp:cons "attachmentsConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-name))
      (common-lisp:list
       (common-lisp:cons "displayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'encryption-configuration))
      (common-lisp:list
       (common-lisp:cons "encryptionConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-application-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-application-response common-lisp:nil
                       ((application-arn :initarg :application-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or application-arn common-lisp:null)
                         :accessor
                         struct-shape-create-application-response-application-arn
                         :shape "ApplicationArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (application-id :initarg :application-id :initform
                         common-lisp:nil :type
                         (common-lisp:or application-id common-lisp:null)
                         :accessor
                         struct-shape-create-application-response-application-id
                         :shape "ApplicationId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-application-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-application-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-application-response
                    'make-create-application-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-application-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-application-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-arn))
      (common-lisp:list
       (common-lisp:cons "applicationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-id))
      (common-lisp:list
       (common-lisp:cons "applicationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-application-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-data-source-response common-lisp:nil
                       ((data-source-arn :initarg :data-source-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or data-source-arn common-lisp:null)
                         :accessor
                         struct-shape-create-data-source-response-data-source-arn
                         :shape "DataSourceArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (data-source-id :initarg :data-source-id :initform
                         common-lisp:nil :type
                         (common-lisp:or data-source-id common-lisp:null)
                         :accessor
                         struct-shape-create-data-source-response-data-source-id
                         :shape "DataSourceId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-data-source-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-data-source-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-data-source-response
                    'make-create-data-source-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-data-source-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-data-source-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-source-arn))
      (common-lisp:list
       (common-lisp:cons "dataSourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-source-id))
      (common-lisp:list
       (common-lisp:cons "dataSourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-data-source-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-index-request common-lisp:nil
                       ((application-id :initarg :application-id :initform
                         (common-lisp:error ":applicationid is required") :type
                         (common-lisp:or application-id common-lisp:null)
                         :accessor
                         struct-shape-create-index-request-application-id
                         :shape "ApplicationId" :location "uri" :location-name
                         "applicationId")
                        (capacity-configuration :initarg
                         :capacity-configuration :initform common-lisp:nil
                         :type
                         (common-lisp:or index-capacity-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-index-request-capacity-configuration
                         :shape "IndexCapacityConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor
                         struct-shape-create-index-request-client-token :shape
                         "ClientToken" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor
                         struct-shape-create-index-request-description :shape
                         "Description" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (display-name :initarg :display-name :initform
                         (common-lisp:error ":displayname is required") :type
                         (common-lisp:or index-name common-lisp:null) :accessor
                         struct-shape-create-index-request-display-name :shape
                         "IndexName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         struct-shape-create-index-request-tags :shape "Tags"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-index-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-index-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-index-request 'make-create-index-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-index-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-index-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'capacity-configuration))
      (common-lisp:list
       (common-lisp:cons "capacityConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-name))
      (common-lisp:list
       (common-lisp:cons "displayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-index-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-index-response common-lisp:nil
                       ((index-arn :initarg :index-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or index-arn common-lisp:null) :accessor
                         struct-shape-create-index-response-index-arn :shape
                         "IndexArn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (index-id :initarg :index-id :initform common-lisp:nil
                         :type (common-lisp:or index-id common-lisp:null)
                         :accessor struct-shape-create-index-response-index-id
                         :shape "IndexId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-index-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-index-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-index-response 'make-create-index-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-index-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-index-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'index-arn))
      (common-lisp:list
       (common-lisp:cons "indexArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'index-id))
      (common-lisp:list
       (common-lisp:cons "indexId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-index-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-plugin-request common-lisp:nil
                       ((application-id :initarg :application-id :initform
                         (common-lisp:error ":applicationid is required") :type
                         (common-lisp:or application-id common-lisp:null)
                         :accessor
                         struct-shape-create-plugin-request-application-id
                         :shape "ApplicationId" :location "uri" :location-name
                         "applicationId")
                        (auth-configuration :initarg :auth-configuration
                         :initform
                         (common-lisp:error ":authconfiguration is required")
                         :type
                         (common-lisp:or plugin-auth-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-plugin-request-auth-configuration
                         :shape "PluginAuthConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor
                         struct-shape-create-plugin-request-client-token :shape
                         "ClientToken" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (display-name :initarg :display-name :initform
                         (common-lisp:error ":displayname is required") :type
                         (common-lisp:or plugin-name common-lisp:null)
                         :accessor
                         struct-shape-create-plugin-request-display-name :shape
                         "PluginName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (server-url :initarg :server-url :initform
                         (common-lisp:error ":serverurl is required") :type
                         (common-lisp:or url common-lisp:null) :accessor
                         struct-shape-create-plugin-request-server-url :shape
                         "Url" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         struct-shape-create-plugin-request-tags :shape "Tags"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (type :initarg :type :initform
                         (common-lisp:error ":type is required") :type
                         (common-lisp:or plugin-type common-lisp:null)
                         :accessor struct-shape-create-plugin-request-type
                         :shape "PluginType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-plugin-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-plugin-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-plugin-request 'make-create-plugin-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-plugin-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-plugin-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auth-configuration))
      (common-lisp:list
       (common-lisp:cons "authConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-name))
      (common-lisp:list
       (common-lisp:cons "displayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'server-url))
      (common-lisp:list
       (common-lisp:cons "serverUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-plugin-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-plugin-response common-lisp:nil
                       ((plugin-arn :initarg :plugin-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or plugin-arn common-lisp:null) :accessor
                         struct-shape-create-plugin-response-plugin-arn :shape
                         "PluginArn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (plugin-id :initarg :plugin-id :initform
                         common-lisp:nil :type
                         (common-lisp:or plugin-id common-lisp:null) :accessor
                         struct-shape-create-plugin-response-plugin-id :shape
                         "PluginId" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-plugin-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-plugin-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-plugin-response 'make-create-plugin-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-plugin-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-plugin-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'plugin-arn))
      (common-lisp:list
       (common-lisp:cons "pluginArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'plugin-id))
      (common-lisp:list
       (common-lisp:cons "pluginId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-plugin-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-retriever-request common-lisp:nil
                       ((application-id :initarg :application-id :initform
                         (common-lisp:error ":applicationid is required") :type
                         (common-lisp:or application-id common-lisp:null)
                         :accessor
                         struct-shape-create-retriever-request-application-id
                         :shape "ApplicationId" :location "uri" :location-name
                         "applicationId")
                        (client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor
                         struct-shape-create-retriever-request-client-token
                         :shape "ClientToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (configuration :initarg :configuration :initform
                         (common-lisp:error ":configuration is required") :type
                         (common-lisp:or retriever-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-retriever-request-configuration
                         :shape "RetrieverConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (display-name :initarg :display-name :initform
                         (common-lisp:error ":displayname is required") :type
                         (common-lisp:or retriever-name common-lisp:null)
                         :accessor
                         struct-shape-create-retriever-request-display-name
                         :shape "RetrieverName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (role-arn :initarg :role-arn :initform common-lisp:nil
                         :type (common-lisp:or role-arn common-lisp:null)
                         :accessor
                         struct-shape-create-retriever-request-role-arn :shape
                         "RoleArn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         struct-shape-create-retriever-request-tags :shape
                         "Tags" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (type :initarg :type :initform
                         (common-lisp:error ":type is required") :type
                         (common-lisp:or retriever-type common-lisp:null)
                         :accessor struct-shape-create-retriever-request-type
                         :shape "RetrieverType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-retriever-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-retriever-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-retriever-request 'make-create-retriever-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-retriever-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-retriever-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration))
      (common-lisp:list
       (common-lisp:cons "configuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-name))
      (common-lisp:list
       (common-lisp:cons "displayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-retriever-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-retriever-response common-lisp:nil
                       ((retriever-arn :initarg :retriever-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or retriever-arn common-lisp:null)
                         :accessor
                         struct-shape-create-retriever-response-retriever-arn
                         :shape "RetrieverArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (retriever-id :initarg :retriever-id :initform
                         common-lisp:nil :type
                         (common-lisp:or retriever-id common-lisp:null)
                         :accessor
                         struct-shape-create-retriever-response-retriever-id
                         :shape "RetrieverId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-retriever-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-retriever-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-retriever-response
                    'make-create-retriever-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-retriever-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-retriever-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'retriever-arn))
      (common-lisp:list
       (common-lisp:cons "retrieverArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'retriever-id))
      (common-lisp:list
       (common-lisp:cons "retrieverId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-retriever-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-user-request common-lisp:nil
                       ((application-id :initarg :application-id :initform
                         (common-lisp:error ":applicationid is required") :type
                         (common-lisp:or application-id common-lisp:null)
                         :accessor
                         struct-shape-create-user-request-application-id :shape
                         "ApplicationId" :location "uri" :location-name
                         "applicationId")
                        (client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor
                         struct-shape-create-user-request-client-token :shape
                         "ClientToken" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (user-aliases :initarg :user-aliases :initform
                         common-lisp:nil :type
                         (common-lisp:or create-user-request-user-aliases-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-user-request-user-aliases :shape
                         "CreateUserRequestUserAliasesList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (user-id :initarg :user-id :initform
                         (common-lisp:error ":userid is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-user-request-user-id :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-user-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-user-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-user-request 'make-create-user-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-user-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-user-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-aliases))
      (common-lisp:list
       (common-lisp:cons "userAliases"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-id))
      (common-lisp:list
       (common-lisp:cons "userId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-user-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype create-user-request-user-aliases-list ()
   '(trivial-types:proper-list user-alias))
 (common-lisp:defun make-create-user-request-user-aliases-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list user-alias))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass create-user-response common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-user-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-user-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-user-response 'make-create-user-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-user-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-user-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-user-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-web-experience-request common-lisp:nil
                       ((application-id :initarg :application-id :initform
                         (common-lisp:error ":applicationid is required") :type
                         (common-lisp:or application-id common-lisp:null)
                         :accessor
                         struct-shape-create-web-experience-request-application-id
                         :shape "ApplicationId" :location "uri" :location-name
                         "applicationId")
                        (client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor
                         struct-shape-create-web-experience-request-client-token
                         :shape "ClientToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (sample-prompts-control-mode :initarg
                         :sample-prompts-control-mode :initform common-lisp:nil
                         :type
                         (common-lisp:or
                          web-experience-sample-prompts-control-mode
                          common-lisp:null)
                         :accessor
                         struct-shape-create-web-experience-request-sample-prompts-control-mode
                         :shape "WebExperienceSamplePromptsControlMode"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (subtitle :initarg :subtitle :initform common-lisp:nil
                         :type
                         (common-lisp:or web-experience-subtitle
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-web-experience-request-subtitle
                         :shape "WebExperienceSubtitle" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         struct-shape-create-web-experience-request-tags :shape
                         "Tags" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (title :initarg :title :initform common-lisp:nil :type
                         (common-lisp:or web-experience-title common-lisp:null)
                         :accessor
                         struct-shape-create-web-experience-request-title
                         :shape "WebExperienceTitle" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (welcome-message :initarg :welcome-message :initform
                         common-lisp:nil :type
                         (common-lisp:or web-experience-welcome-message
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-web-experience-request-welcome-message
                         :shape "WebExperienceWelcomeMessage" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-web-experience-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-web-experience-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-web-experience-request
                    'make-create-web-experience-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-web-experience-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-web-experience-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'sample-prompts-control-mode))
      (common-lisp:list
       (common-lisp:cons "samplePromptsControlMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subtitle))
      (common-lisp:list
       (common-lisp:cons "subtitle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'title))
      (common-lisp:list
       (common-lisp:cons "title"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'welcome-message))
      (common-lisp:list
       (common-lisp:cons "welcomeMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-web-experience-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-web-experience-response common-lisp:nil
                       ((web-experience-arn :initarg :web-experience-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or web-experience-arn common-lisp:null)
                         :accessor
                         struct-shape-create-web-experience-response-web-experience-arn
                         :shape "WebExperienceArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (web-experience-id :initarg :web-experience-id
                         :initform common-lisp:nil :type
                         (common-lisp:or web-experience-id common-lisp:null)
                         :accessor
                         struct-shape-create-web-experience-response-web-experience-id
                         :shape "WebExperienceId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-web-experience-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-web-experience-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-web-experience-response
                    'make-create-web-experience-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-web-experience-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-web-experience-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'web-experience-arn))
      (common-lisp:list
       (common-lisp:cons "webExperienceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'web-experience-id))
      (common-lisp:list
       (common-lisp:cons "webExperienceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-web-experience-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass data-source common-lisp:nil
                       ((created-at :initarg :created-at :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-data-source-created-at :shape "Timestamp"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (data-source-id :initarg :data-source-id :initform
                         common-lisp:nil :type
                         (common-lisp:or data-source-id common-lisp:null)
                         :accessor struct-shape-data-source-data-source-id
                         :shape "DataSourceId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (display-name :initarg :display-name :initform
                         common-lisp:nil :type
                         (common-lisp:or data-source-name common-lisp:null)
                         :accessor struct-shape-data-source-display-name :shape
                         "DataSourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or data-source-status common-lisp:null)
                         :accessor struct-shape-data-source-status :shape
                         "DataSourceStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-data-source-type :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (updated-at :initarg :updated-at :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-data-source-updated-at :shape "Timestamp"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-data-source
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'data-source
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'data-source 'make-data-source))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input data-source))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input data-source))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-source-id))
      (common-lisp:list
       (common-lisp:cons "dataSourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-name))
      (common-lisp:list
       (common-lisp:cons "displayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input data-source))
   common-lisp:nil))
(common-lisp:deftype data-source-arn () 'common-lisp:string)
(common-lisp:deftype data-source-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype data-source-ids ()
   '(trivial-types:proper-list data-source-id))
 (common-lisp:defun make-data-source-ids
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list data-source-id))
   aws-sdk/generator/shape::members))
(common-lisp:deftype data-source-name () 'common-lisp:string)
(common-lisp:deftype data-source-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass data-source-sync-job common-lisp:nil
                       ((data-source-error-code :initarg
                         :data-source-error-code :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-data-source-sync-job-data-source-error-code
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (end-time :initarg :end-time :initform common-lisp:nil
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor struct-shape-data-source-sync-job-end-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (error :initarg :error :initform common-lisp:nil :type
                         (common-lisp:or error-detail common-lisp:null)
                         :accessor struct-shape-data-source-sync-job-error
                         :shape "ErrorDetail" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (execution-id :initarg :execution-id :initform
                         common-lisp:nil :type
                         (common-lisp:or execution-id common-lisp:null)
                         :accessor
                         struct-shape-data-source-sync-job-execution-id :shape
                         "ExecutionId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (metrics :initarg :metrics :initform common-lisp:nil
                         :type
                         (common-lisp:or data-source-sync-job-metrics
                                         common-lisp:null)
                         :accessor struct-shape-data-source-sync-job-metrics
                         :shape "DataSourceSyncJobMetrics" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (start-time :initarg :start-time :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-data-source-sync-job-start-time :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or data-source-sync-job-status
                                         common-lisp:null)
                         :accessor struct-shape-data-source-sync-job-status
                         :shape "DataSourceSyncJobStatus" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-data-source-sync-job
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'data-source-sync-job
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'data-source-sync-job 'make-data-source-sync-job))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input data-source-sync-job))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input data-source-sync-job))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-source-error-code))
      (common-lisp:list
       (common-lisp:cons "dataSourceErrorCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "endTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error))
      (common-lisp:list
       (common-lisp:cons "error"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execution-id))
      (common-lisp:list
       (common-lisp:cons "executionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metrics))
      (common-lisp:list
       (common-lisp:cons "metrics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "startTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input data-source-sync-job))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass data-source-sync-job-metrics common-lisp:nil
                       ((documents-added :initarg :documents-added :initform
                         common-lisp:nil :type
                         (common-lisp:or metric-value common-lisp:null)
                         :accessor
                         struct-shape-data-source-sync-job-metrics-documents-added
                         :shape "MetricValue" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (documents-deleted :initarg :documents-deleted
                         :initform common-lisp:nil :type
                         (common-lisp:or metric-value common-lisp:null)
                         :accessor
                         struct-shape-data-source-sync-job-metrics-documents-deleted
                         :shape "MetricValue" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (documents-failed :initarg :documents-failed :initform
                         common-lisp:nil :type
                         (common-lisp:or metric-value common-lisp:null)
                         :accessor
                         struct-shape-data-source-sync-job-metrics-documents-failed
                         :shape "MetricValue" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (documents-modified :initarg :documents-modified
                         :initform common-lisp:nil :type
                         (common-lisp:or metric-value common-lisp:null)
                         :accessor
                         struct-shape-data-source-sync-job-metrics-documents-modified
                         :shape "MetricValue" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (documents-scanned :initarg :documents-scanned
                         :initform common-lisp:nil :type
                         (common-lisp:or metric-value common-lisp:null)
                         :accessor
                         struct-shape-data-source-sync-job-metrics-documents-scanned
                         :shape "MetricValue" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-data-source-sync-job-metrics
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'data-source-sync-job-metrics
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'data-source-sync-job-metrics
                    'make-data-source-sync-job-metrics))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          data-source-sync-job-metrics))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          data-source-sync-job-metrics))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'documents-added))
      (common-lisp:list
       (common-lisp:cons "documentsAdded"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'documents-deleted))
      (common-lisp:list
       (common-lisp:cons "documentsDeleted"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'documents-failed))
      (common-lisp:list
       (common-lisp:cons "documentsFailed"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'documents-modified))
      (common-lisp:list
       (common-lisp:cons "documentsModified"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'documents-scanned))
      (common-lisp:list
       (common-lisp:cons "documentsScanned"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          data-source-sync-job-metrics))
   common-lisp:nil))
(common-lisp:deftype data-source-sync-job-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype data-source-sync-jobs ()
   '(trivial-types:proper-list data-source-sync-job))
 (common-lisp:defun make-data-source-sync-jobs
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list data-source-sync-job))
   aws-sdk/generator/shape::members))
(common-lisp:deftype data-source-user-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass data-source-vpc-configuration common-lisp:nil
                       ((security-group-ids :initarg :security-group-ids
                         :initform
                         (common-lisp:error ":securitygroupids is required")
                         :type
                         (common-lisp:or security-group-ids common-lisp:null)
                         :accessor
                         struct-shape-data-source-vpc-configuration-security-group-ids
                         :shape "SecurityGroupIds" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (subnet-ids :initarg :subnet-ids :initform
                         (common-lisp:error ":subnetids is required") :type
                         (common-lisp:or subnet-ids common-lisp:null) :accessor
                         struct-shape-data-source-vpc-configuration-subnet-ids
                         :shape "SubnetIds" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-data-source-vpc-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'data-source-vpc-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'data-source-vpc-configuration
                    'make-data-source-vpc-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          data-source-vpc-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          data-source-vpc-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-group-ids))
      (common-lisp:list
       (common-lisp:cons "securityGroupIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-ids))
      (common-lisp:list
       (common-lisp:cons "subnetIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          data-source-vpc-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype data-sources () '(trivial-types:proper-list data-source))
 (common-lisp:defun make-data-sources
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list data-source))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass date-attribute-boosting-configuration common-lisp:nil
                       ((boosting-duration-in-seconds :initarg
                         :boosting-duration-in-seconds :initform
                         common-lisp:nil :type
                         (common-lisp:or boosting-duration-in-seconds
                                         common-lisp:null)
                         :accessor
                         struct-shape-date-attribute-boosting-configuration-boosting-duration-in-seconds
                         :shape "BoostingDurationInSeconds" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (boosting-level :initarg :boosting-level :initform
                         (common-lisp:error ":boostinglevel is required") :type
                         (common-lisp:or document-attribute-boosting-level
                                         common-lisp:null)
                         :accessor
                         struct-shape-date-attribute-boosting-configuration-boosting-level
                         :shape "DocumentAttributeBoostingLevel" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-date-attribute-boosting-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'date-attribute-boosting-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'date-attribute-boosting-configuration
                    'make-date-attribute-boosting-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          date-attribute-boosting-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          date-attribute-boosting-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'boosting-duration-in-seconds))
      (common-lisp:list
       (common-lisp:cons "boostingDurationInSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'boosting-level))
      (common-lisp:list
       (common-lisp:cons "boostingLevel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          date-attribute-boosting-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-application-request common-lisp:nil
                       ((application-id :initarg :application-id :initform
                         (common-lisp:error ":applicationid is required") :type
                         (common-lisp:or application-id common-lisp:null)
                         :accessor
                         struct-shape-delete-application-request-application-id
                         :shape "ApplicationId" :location "uri" :location-name
                         "applicationId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-application-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-application-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-application-request
                    'make-delete-application-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-application-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-application-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-application-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-application-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-application-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-application-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-application-response
                    'make-delete-application-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-application-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-application-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-application-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-chat-controls-configuration-request
                       common-lisp:nil
                       ((application-id :initarg :application-id :initform
                         (common-lisp:error ":applicationid is required") :type
                         (common-lisp:or application-id common-lisp:null)
                         :accessor
                         struct-shape-delete-chat-controls-configuration-request-application-id
                         :shape "ApplicationId" :location "uri" :location-name
                         "applicationId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-chat-controls-configuration-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-chat-controls-configuration-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-chat-controls-configuration-request
                    'make-delete-chat-controls-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-chat-controls-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-chat-controls-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-chat-controls-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-chat-controls-configuration-response
                       common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-chat-controls-configuration-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-chat-controls-configuration-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-chat-controls-configuration-response
                    'make-delete-chat-controls-configuration-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-chat-controls-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-chat-controls-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-chat-controls-configuration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-conversation-request common-lisp:nil
                       ((application-id :initarg :application-id :initform
                         (common-lisp:error ":applicationid is required") :type
                         (common-lisp:or application-id common-lisp:null)
                         :accessor
                         struct-shape-delete-conversation-request-application-id
                         :shape "ApplicationId" :location "uri" :location-name
                         "applicationId")
                        (conversation-id :initarg :conversation-id :initform
                         (common-lisp:error ":conversationid is required")
                         :type
                         (common-lisp:or conversation-id common-lisp:null)
                         :accessor
                         struct-shape-delete-conversation-request-conversation-id
                         :shape "ConversationId" :location "uri" :location-name
                         "conversationId")
                        (user-id :initarg :user-id :initform
                         (common-lisp:error ":userid is required") :type
                         (common-lisp:or user-id common-lisp:null) :accessor
                         struct-shape-delete-conversation-request-user-id
                         :shape "UserId" :location "querystring" :location-name
                         "userId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-conversation-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-conversation-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-conversation-request
                    'make-delete-conversation-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-conversation-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-conversation-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-conversation-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-conversation-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-conversation-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-conversation-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-conversation-response
                    'make-delete-conversation-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-conversation-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-conversation-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-conversation-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-data-source-request common-lisp:nil
                       ((application-id :initarg :application-id :initform
                         (common-lisp:error ":applicationid is required") :type
                         (common-lisp:or application-id common-lisp:null)
                         :accessor
                         struct-shape-delete-data-source-request-application-id
                         :shape "ApplicationId" :location "uri" :location-name
                         "applicationId")
                        (data-source-id :initarg :data-source-id :initform
                         (common-lisp:error ":datasourceid is required") :type
                         (common-lisp:or data-source-id common-lisp:null)
                         :accessor
                         struct-shape-delete-data-source-request-data-source-id
                         :shape "DataSourceId" :location "uri" :location-name
                         "dataSourceId")
                        (index-id :initarg :index-id :initform
                         (common-lisp:error ":indexid is required") :type
                         (common-lisp:or index-id common-lisp:null) :accessor
                         struct-shape-delete-data-source-request-index-id
                         :shape "IndexId" :location "uri" :location-name
                         "indexId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-data-source-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-data-source-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-data-source-request
                    'make-delete-data-source-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-data-source-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-data-source-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-data-source-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-data-source-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-data-source-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-data-source-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-data-source-response
                    'make-delete-data-source-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-data-source-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-data-source-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-data-source-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-document common-lisp:nil
                       ((document-id :initarg :document-id :initform
                         (common-lisp:error ":documentid is required") :type
                         (common-lisp:or document-id common-lisp:null)
                         :accessor struct-shape-delete-document-document-id
                         :shape "DocumentId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-document
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-document
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'delete-document 'make-delete-document))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-document))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-document))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'document-id))
      (common-lisp:list
       (common-lisp:cons "documentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-document))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype delete-documents ()
   '(trivial-types:proper-list delete-document))
 (common-lisp:defun make-delete-documents
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list delete-document))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass delete-group-request common-lisp:nil
                       ((application-id :initarg :application-id :initform
                         (common-lisp:error ":applicationid is required") :type
                         (common-lisp:or application-id common-lisp:null)
                         :accessor
                         struct-shape-delete-group-request-application-id
                         :shape "ApplicationId" :location "uri" :location-name
                         "applicationId")
                        (data-source-id :initarg :data-source-id :initform
                         common-lisp:nil :type
                         (common-lisp:or data-source-id common-lisp:null)
                         :accessor
                         struct-shape-delete-group-request-data-source-id
                         :shape "DataSourceId" :location "querystring"
                         :location-name "dataSourceId")
                        (group-name :initarg :group-name :initform
                         (common-lisp:error ":groupname is required") :type
                         (common-lisp:or group-name common-lisp:null) :accessor
                         struct-shape-delete-group-request-group-name :shape
                         "GroupName" :location "uri" :location-name
                         "groupName")
                        (index-id :initarg :index-id :initform
                         (common-lisp:error ":indexid is required") :type
                         (common-lisp:or index-id common-lisp:null) :accessor
                         struct-shape-delete-group-request-index-id :shape
                         "IndexId" :location "uri" :location-name "indexId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-group-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-group-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-group-request 'make-delete-group-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-group-response common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-group-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-group-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-group-response 'make-delete-group-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-group-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-index-request common-lisp:nil
                       ((application-id :initarg :application-id :initform
                         (common-lisp:error ":applicationid is required") :type
                         (common-lisp:or application-id common-lisp:null)
                         :accessor
                         struct-shape-delete-index-request-application-id
                         :shape "ApplicationId" :location "uri" :location-name
                         "applicationId")
                        (index-id :initarg :index-id :initform
                         (common-lisp:error ":indexid is required") :type
                         (common-lisp:or index-id common-lisp:null) :accessor
                         struct-shape-delete-index-request-index-id :shape
                         "IndexId" :location "uri" :location-name "indexId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-index-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-index-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-index-request 'make-delete-index-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-index-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-index-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-index-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-index-response common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-index-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-index-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-index-response 'make-delete-index-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-index-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-index-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-index-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-plugin-request common-lisp:nil
                       ((application-id :initarg :application-id :initform
                         (common-lisp:error ":applicationid is required") :type
                         (common-lisp:or application-id common-lisp:null)
                         :accessor
                         struct-shape-delete-plugin-request-application-id
                         :shape "ApplicationId" :location "uri" :location-name
                         "applicationId")
                        (plugin-id :initarg :plugin-id :initform
                         (common-lisp:error ":pluginid is required") :type
                         (common-lisp:or plugin-id common-lisp:null) :accessor
                         struct-shape-delete-plugin-request-plugin-id :shape
                         "PluginId" :location "uri" :location-name "pluginId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-plugin-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-plugin-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-plugin-request 'make-delete-plugin-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-plugin-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-plugin-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-plugin-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-plugin-response common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-plugin-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-plugin-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-plugin-response 'make-delete-plugin-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-plugin-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-plugin-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-plugin-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-retriever-request common-lisp:nil
                       ((application-id :initarg :application-id :initform
                         (common-lisp:error ":applicationid is required") :type
                         (common-lisp:or application-id common-lisp:null)
                         :accessor
                         struct-shape-delete-retriever-request-application-id
                         :shape "ApplicationId" :location "uri" :location-name
                         "applicationId")
                        (retriever-id :initarg :retriever-id :initform
                         (common-lisp:error ":retrieverid is required") :type
                         (common-lisp:or retriever-id common-lisp:null)
                         :accessor
                         struct-shape-delete-retriever-request-retriever-id
                         :shape "RetrieverId" :location "uri" :location-name
                         "retrieverId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-retriever-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-retriever-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-retriever-request 'make-delete-retriever-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-retriever-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-retriever-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-retriever-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-retriever-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-retriever-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-retriever-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-retriever-response
                    'make-delete-retriever-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-retriever-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-retriever-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-retriever-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-user-request common-lisp:nil
                       ((application-id :initarg :application-id :initform
                         (common-lisp:error ":applicationid is required") :type
                         (common-lisp:or application-id common-lisp:null)
                         :accessor
                         struct-shape-delete-user-request-application-id :shape
                         "ApplicationId" :location "uri" :location-name
                         "applicationId")
                        (user-id :initarg :user-id :initform
                         (common-lisp:error ":userid is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-delete-user-request-user-id :shape
                         "String" :location "uri" :location-name "userId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-user-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-user-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-user-request 'make-delete-user-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-user-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-user-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-user-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-user-response common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-user-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-user-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-user-response 'make-delete-user-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-user-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-user-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-user-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-web-experience-request common-lisp:nil
                       ((application-id :initarg :application-id :initform
                         (common-lisp:error ":applicationid is required") :type
                         (common-lisp:or application-id common-lisp:null)
                         :accessor
                         struct-shape-delete-web-experience-request-application-id
                         :shape "ApplicationId" :location "uri" :location-name
                         "applicationId")
                        (web-experience-id :initarg :web-experience-id
                         :initform
                         (common-lisp:error ":webexperienceid is required")
                         :type
                         (common-lisp:or web-experience-id common-lisp:null)
                         :accessor
                         struct-shape-delete-web-experience-request-web-experience-id
                         :shape "WebExperienceId" :location "uri"
                         :location-name "webExperienceId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-web-experience-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-web-experience-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-web-experience-request
                    'make-delete-web-experience-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-web-experience-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-web-experience-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-web-experience-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-web-experience-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-web-experience-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-web-experience-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-web-experience-response
                    'make-delete-web-experience-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-web-experience-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-web-experience-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-web-experience-response))
   common-lisp:nil))
(common-lisp:deftype description () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass document common-lisp:nil
                       ((access-configuration :initarg :access-configuration
                         :initform common-lisp:nil :type
                         (common-lisp:or access-configuration common-lisp:null)
                         :accessor struct-shape-document-access-configuration
                         :shape "AccessConfiguration" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (attributes :initarg :attributes :initform
                         common-lisp:nil :type
                         (common-lisp:or document-attributes common-lisp:null)
                         :accessor struct-shape-document-attributes :shape
                         "DocumentAttributes" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (content :initarg :content :initform common-lisp:nil
                         :type
                         (common-lisp:or document-content common-lisp:null)
                         :accessor struct-shape-document-content :shape
                         "DocumentContent" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (content-type :initarg :content-type :initform
                         common-lisp:nil :type
                         (common-lisp:or content-type common-lisp:null)
                         :accessor struct-shape-document-content-type :shape
                         "ContentType" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (document-enrichment-configuration :initarg
                         :document-enrichment-configuration :initform
                         common-lisp:nil :type
                         (common-lisp:or document-enrichment-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-document-document-enrichment-configuration
                         :shape "DocumentEnrichmentConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (id :initarg :id :initform
                         (common-lisp:error ":id is required") :type
                         (common-lisp:or document-id common-lisp:null)
                         :accessor struct-shape-document-id :shape "DocumentId"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (title :initarg :title :initform common-lisp:nil :type
                         (common-lisp:or title common-lisp:null) :accessor
                         struct-shape-document-title :shape "Title" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-document
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'document
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'document 'make-document))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input document))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input document))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'access-configuration))
      (common-lisp:list
       (common-lisp:cons "accessConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attributes))
      (common-lisp:list
       (common-lisp:cons "attributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content))
      (common-lisp:list
       (common-lisp:cons "content"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-type))
      (common-lisp:list
       (common-lisp:cons "contentType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'document-enrichment-configuration))
      (common-lisp:list
       (common-lisp:cons "documentEnrichmentConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'title))
      (common-lisp:list
       (common-lisp:cons "title"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input document))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass document-attribute common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or document-attribute-key
                                         common-lisp:null)
                         :accessor struct-shape-document-attribute-name :shape
                         "DocumentAttributeKey" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (value :initarg :value :initform
                         (common-lisp:error ":value is required") :type
                         (common-lisp:or document-attribute-value
                                         common-lisp:null)
                         :accessor struct-shape-document-attribute-value :shape
                         "DocumentAttributeValue" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-document-attribute
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'document-attribute
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'document-attribute 'make-document-attribute))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input document-attribute))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input document-attribute))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input document-attribute))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass document-attribute-boosting-configuration
                       common-lisp:nil
                       ((date-configuration :initarg :date-configuration
                         :initform common-lisp:nil :type
                         (common-lisp:or date-attribute-boosting-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-document-attribute-boosting-configuration-date-configuration
                         :shape "DateAttributeBoostingConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (number-configuration :initarg :number-configuration
                         :initform common-lisp:nil :type
                         (common-lisp:or
                          number-attribute-boosting-configuration
                          common-lisp:null)
                         :accessor
                         struct-shape-document-attribute-boosting-configuration-number-configuration
                         :shape "NumberAttributeBoostingConfiguration"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (string-configuration :initarg :string-configuration
                         :initform common-lisp:nil :type
                         (common-lisp:or
                          string-attribute-boosting-configuration
                          common-lisp:null)
                         :accessor
                         struct-shape-document-attribute-boosting-configuration-string-configuration
                         :shape "StringAttributeBoostingConfiguration"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (string-list-configuration :initarg
                         :string-list-configuration :initform common-lisp:nil
                         :type
                         (common-lisp:or
                          string-list-attribute-boosting-configuration
                          common-lisp:null)
                         :accessor
                         struct-shape-document-attribute-boosting-configuration-string-list-configuration
                         :shape "StringListAttributeBoostingConfiguration"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-document-attribute-boosting-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'document-attribute-boosting-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'document-attribute-boosting-configuration
                    'make-document-attribute-boosting-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          document-attribute-boosting-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          document-attribute-boosting-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'date-configuration))
      (common-lisp:list
       (common-lisp:cons "dateConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'number-configuration))
      (common-lisp:list
       (common-lisp:cons "numberConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'string-configuration))
      (common-lisp:list
       (common-lisp:cons "stringConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'string-list-configuration))
      (common-lisp:list
       (common-lisp:cons "stringListConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          document-attribute-boosting-configuration))
   common-lisp:nil))
(common-lisp:deftype document-attribute-boosting-level () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype document-attribute-boosting-override-map ()
   'common-lisp:hash-table)
 (common-lisp:defun make-document-attribute-boosting-override-map
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defclass document-attribute-condition common-lisp:nil
                       ((key :initarg :key :initform
                         (common-lisp:error ":key is required") :type
                         (common-lisp:or document-attribute-key
                                         common-lisp:null)
                         :accessor
                         struct-shape-document-attribute-condition-key :shape
                         "DocumentAttributeKey" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (operator :initarg :operator :initform
                         (common-lisp:error ":operator is required") :type
                         (common-lisp:or document-enrichment-condition-operator
                                         common-lisp:null)
                         :accessor
                         struct-shape-document-attribute-condition-operator
                         :shape "DocumentEnrichmentConditionOperator" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (value :initarg :value :initform common-lisp:nil :type
                         (common-lisp:or document-attribute-value
                                         common-lisp:null)
                         :accessor
                         struct-shape-document-attribute-condition-value :shape
                         "DocumentAttributeValue" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-document-attribute-condition
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'document-attribute-condition
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'document-attribute-condition
                    'make-document-attribute-condition))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          document-attribute-condition))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          document-attribute-condition))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operator))
      (common-lisp:list
       (common-lisp:cons "operator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          document-attribute-condition))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass document-attribute-configuration common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-document-attribute-configuration-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (search :initarg :search :initform common-lisp:nil
                         :type (common-lisp:or status common-lisp:null)
                         :accessor
                         struct-shape-document-attribute-configuration-search
                         :shape "Status" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or attribute-type common-lisp:null)
                         :accessor
                         struct-shape-document-attribute-configuration-type
                         :shape "AttributeType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-document-attribute-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'document-attribute-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'document-attribute-configuration
                    'make-document-attribute-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          document-attribute-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          document-attribute-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'search))
      (common-lisp:list
       (common-lisp:cons "search"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          document-attribute-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype document-attribute-configurations ()
   '(trivial-types:proper-list document-attribute-configuration))
 (common-lisp:defun make-document-attribute-configurations
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            document-attribute-configuration))
   aws-sdk/generator/shape::members))
(common-lisp:deftype document-attribute-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype document-attribute-string-list-value ()
   '(trivial-types:proper-list string))
 (common-lisp:defun make-document-attribute-string-list-value
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass document-attribute-target common-lisp:nil
                       ((attribute-value-operator :initarg
                         :attribute-value-operator :initform common-lisp:nil
                         :type
                         (common-lisp:or attribute-value-operator
                                         common-lisp:null)
                         :accessor
                         struct-shape-document-attribute-target-attribute-value-operator
                         :shape "AttributeValueOperator" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (key :initarg :key :initform
                         (common-lisp:error ":key is required") :type
                         (common-lisp:or document-attribute-key
                                         common-lisp:null)
                         :accessor struct-shape-document-attribute-target-key
                         :shape "DocumentAttributeKey" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (value :initarg :value :initform common-lisp:nil :type
                         (common-lisp:or document-attribute-value
                                         common-lisp:null)
                         :accessor struct-shape-document-attribute-target-value
                         :shape "DocumentAttributeValue" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-document-attribute-target
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'document-attribute-target
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'document-attribute-target
                    'make-document-attribute-target))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          document-attribute-target))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          document-attribute-target))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'attribute-value-operator))
      (common-lisp:list
       (common-lisp:cons "attributeValueOperator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          document-attribute-target))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass document-attribute-value common-lisp:nil
                       ((date-value :initarg :date-value :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-document-attribute-value-date-value
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (long-value :initarg :long-value :initform
                         common-lisp:nil :type
                         (common-lisp:or long common-lisp:null) :accessor
                         struct-shape-document-attribute-value-long-value
                         :shape "Long" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (string-list-value :initarg :string-list-value
                         :initform common-lisp:nil :type
                         (common-lisp:or document-attribute-string-list-value
                                         common-lisp:null)
                         :accessor
                         struct-shape-document-attribute-value-string-list-value
                         :shape "DocumentAttributeStringListValue" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (string-value :initarg :string-value :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          document-attribute-value-string-value-string
                          common-lisp:null)
                         :accessor
                         struct-shape-document-attribute-value-string-value
                         :shape "DocumentAttributeValueStringValueString"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-document-attribute-value
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'document-attribute-value
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'document-attribute-value 'make-document-attribute-value))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          document-attribute-value))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          document-attribute-value))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'date-value))
      (common-lisp:list
       (common-lisp:cons "dateValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'long-value))
      (common-lisp:list
       (common-lisp:cons "longValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'string-list-value))
      (common-lisp:list
       (common-lisp:cons "stringListValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'string-value))
      (common-lisp:list
       (common-lisp:cons "stringValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          document-attribute-value))
   common-lisp:nil))
(common-lisp:deftype document-attribute-value-string-value-string ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype document-attributes ()
   '(trivial-types:proper-list document-attribute))
 (common-lisp:defun make-document-attributes
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list document-attribute))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass document-content common-lisp:nil
                       ((blob :initarg :blob :initform common-lisp:nil :type
                         (common-lisp:or blob common-lisp:null) :accessor
                         struct-shape-document-content-blob :shape "Blob"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (s3 :initarg :s3 :initform common-lisp:nil :type
                         (common-lisp:or s3 common-lisp:null) :accessor
                         struct-shape-document-content-s3 :shape "S3" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-document-content
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'document-content
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'document-content 'make-document-content))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input document-content))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input document-content))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'blob))
      (common-lisp:list
       (common-lisp:cons "blob"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3))
      (common-lisp:list
       (common-lisp:cons "s3"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input document-content))
   common-lisp:nil))
(common-lisp:deftype document-content-operator () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype document-detail-list ()
   '(trivial-types:proper-list document-details))
 (common-lisp:defun make-document-detail-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list document-details))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass document-details common-lisp:nil
                       ((created-at :initarg :created-at :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-document-details-created-at :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (document-id :initarg :document-id :initform
                         common-lisp:nil :type
                         (common-lisp:or document-id common-lisp:null)
                         :accessor struct-shape-document-details-document-id
                         :shape "DocumentId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (error :initarg :error :initform common-lisp:nil :type
                         (common-lisp:or error-detail common-lisp:null)
                         :accessor struct-shape-document-details-error :shape
                         "ErrorDetail" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or document-status common-lisp:null)
                         :accessor struct-shape-document-details-status :shape
                         "DocumentStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (updated-at :initarg :updated-at :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-document-details-updated-at :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-document-details
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'document-details
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'document-details 'make-document-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input document-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input document-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'document-id))
      (common-lisp:list
       (common-lisp:cons "documentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error))
      (common-lisp:list
       (common-lisp:cons "error"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input document-details))
   common-lisp:nil))
(common-lisp:deftype document-enrichment-condition-operator ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass document-enrichment-configuration common-lisp:nil
                       ((inline-configurations :initarg :inline-configurations
                         :initform common-lisp:nil :type
                         (common-lisp:or
                          inline-document-enrichment-configurations
                          common-lisp:null)
                         :accessor
                         struct-shape-document-enrichment-configuration-inline-configurations
                         :shape "InlineDocumentEnrichmentConfigurations"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (post-extraction-hook-configuration :initarg
                         :post-extraction-hook-configuration :initform
                         common-lisp:nil :type
                         (common-lisp:or hook-configuration common-lisp:null)
                         :accessor
                         struct-shape-document-enrichment-configuration-post-extraction-hook-configuration
                         :shape "HookConfiguration" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (pre-extraction-hook-configuration :initarg
                         :pre-extraction-hook-configuration :initform
                         common-lisp:nil :type
                         (common-lisp:or hook-configuration common-lisp:null)
                         :accessor
                         struct-shape-document-enrichment-configuration-pre-extraction-hook-configuration
                         :shape "HookConfiguration" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-document-enrichment-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'document-enrichment-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'document-enrichment-configuration
                    'make-document-enrichment-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          document-enrichment-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          document-enrichment-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'inline-configurations))
      (common-lisp:list
       (common-lisp:cons "inlineConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'post-extraction-hook-configuration))
      (common-lisp:list
       (common-lisp:cons "postExtractionHookConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pre-extraction-hook-configuration))
      (common-lisp:list
       (common-lisp:cons "preExtractionHookConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          document-enrichment-configuration))
   common-lisp:nil))
(common-lisp:deftype document-id () 'common-lisp:string)
(common-lisp:deftype document-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype documents () '(trivial-types:proper-list document))
 (common-lisp:defun make-documents
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list document))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass eligible-data-source common-lisp:nil
                       ((data-source-id :initarg :data-source-id :initform
                         common-lisp:nil :type
                         (common-lisp:or data-source-id common-lisp:null)
                         :accessor
                         struct-shape-eligible-data-source-data-source-id
                         :shape "DataSourceId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (index-id :initarg :index-id :initform common-lisp:nil
                         :type (common-lisp:or index-id common-lisp:null)
                         :accessor struct-shape-eligible-data-source-index-id
                         :shape "IndexId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-eligible-data-source
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'eligible-data-source
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'eligible-data-source 'make-eligible-data-source))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input eligible-data-source))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input eligible-data-source))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-source-id))
      (common-lisp:list
       (common-lisp:cons "dataSourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'index-id))
      (common-lisp:list
       (common-lisp:cons "indexId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input eligible-data-source))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype eligible-data-sources ()
   '(trivial-types:proper-list eligible-data-source))
 (common-lisp:defun make-eligible-data-sources
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list eligible-data-source))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass encryption-configuration common-lisp:nil
                       ((kms-key-id :initarg :kms-key-id :initform
                         common-lisp:nil :type
                         (common-lisp:or kms-key-id common-lisp:null) :accessor
                         struct-shape-encryption-configuration-kms-key-id
                         :shape "KmsKeyId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-encryption-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'encryption-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'encryption-configuration 'make-encryption-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          encryption-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          encryption-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "kmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          encryption-configuration))
   common-lisp:nil))
(common-lisp:deftype error-code () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass error-detail common-lisp:nil
                       ((error-code :initarg :error-code :initform
                         common-lisp:nil :type
                         (common-lisp:or error-code common-lisp:null) :accessor
                         struct-shape-error-detail-error-code :shape
                         "ErrorCode" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (error-message :initarg :error-message :initform
                         common-lisp:nil :type
                         (common-lisp:or error-message common-lisp:null)
                         :accessor struct-shape-error-detail-error-message
                         :shape "ErrorMessage" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-error-detail
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'error-detail
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'error-detail 'make-error-detail))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input error-detail))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input error-detail))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-code))
      (common-lisp:list
       (common-lisp:cons "errorCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-message))
      (common-lisp:list
       (common-lisp:cons "errorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input error-detail))
   common-lisp:nil))
(common-lisp:deftype error-message () 'common-lisp:string)
(common-lisp:deftype example-chat-message () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype example-chat-messages ()
   '(trivial-types:proper-list example-chat-message))
 (common-lisp:defun make-example-chat-messages
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list example-chat-message))
   aws-sdk/generator/shape::members))
(common-lisp:deftype execution-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass failed-document common-lisp:nil
                       ((data-source-id :initarg :data-source-id :initform
                         common-lisp:nil :type
                         (common-lisp:or data-source-id common-lisp:null)
                         :accessor struct-shape-failed-document-data-source-id
                         :shape "DataSourceId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (error :initarg :error :initform common-lisp:nil :type
                         (common-lisp:or error-detail common-lisp:null)
                         :accessor struct-shape-failed-document-error :shape
                         "ErrorDetail" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (id :initarg :id :initform common-lisp:nil :type
                         (common-lisp:or document-id common-lisp:null)
                         :accessor struct-shape-failed-document-id :shape
                         "DocumentId" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-failed-document
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'failed-document
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'failed-document 'make-failed-document))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input failed-document))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input failed-document))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-source-id))
      (common-lisp:list
       (common-lisp:cons "dataSourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error))
      (common-lisp:list
       (common-lisp:cons "error"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input failed-document))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype failed-documents ()
   '(trivial-types:proper-list failed-document))
 (common-lisp:defun make-failed-documents
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list failed-document))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass get-application-request common-lisp:nil
                       ((application-id :initarg :application-id :initform
                         (common-lisp:error ":applicationid is required") :type
                         (common-lisp:or application-id common-lisp:null)
                         :accessor
                         struct-shape-get-application-request-application-id
                         :shape "ApplicationId" :location "uri" :location-name
                         "applicationId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-application-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-application-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-application-request 'make-get-application-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-application-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-application-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-application-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-application-response common-lisp:nil
                       ((application-arn :initarg :application-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or application-arn common-lisp:null)
                         :accessor
                         struct-shape-get-application-response-application-arn
                         :shape "ApplicationArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (application-id :initarg :application-id :initform
                         common-lisp:nil :type
                         (common-lisp:or application-id common-lisp:null)
                         :accessor
                         struct-shape-get-application-response-application-id
                         :shape "ApplicationId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (attachments-configuration :initarg
                         :attachments-configuration :initform common-lisp:nil
                         :type
                         (common-lisp:or applied-attachments-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-application-response-attachments-configuration
                         :shape "AppliedAttachmentsConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (created-at :initarg :created-at :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-get-application-response-created-at
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor
                         struct-shape-get-application-response-description
                         :shape "Description" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (display-name :initarg :display-name :initform
                         common-lisp:nil :type
                         (common-lisp:or application-name common-lisp:null)
                         :accessor
                         struct-shape-get-application-response-display-name
                         :shape "ApplicationName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (encryption-configuration :initarg
                         :encryption-configuration :initform common-lisp:nil
                         :type
                         (common-lisp:or encryption-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-application-response-encryption-configuration
                         :shape "EncryptionConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (error :initarg :error :initform common-lisp:nil :type
                         (common-lisp:or error-detail common-lisp:null)
                         :accessor struct-shape-get-application-response-error
                         :shape "ErrorDetail" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (role-arn :initarg :role-arn :initform common-lisp:nil
                         :type (common-lisp:or role-arn common-lisp:null)
                         :accessor
                         struct-shape-get-application-response-role-arn :shape
                         "RoleArn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or application-status common-lisp:null)
                         :accessor struct-shape-get-application-response-status
                         :shape "ApplicationStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (updated-at :initarg :updated-at :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-get-application-response-updated-at
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-application-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-application-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-application-response 'make-get-application-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-application-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-application-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-arn))
      (common-lisp:list
       (common-lisp:cons "applicationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-id))
      (common-lisp:list
       (common-lisp:cons "applicationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'attachments-configuration))
      (common-lisp:list
       (common-lisp:cons "attachmentsConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-name))
      (common-lisp:list
       (common-lisp:cons "displayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'encryption-configuration))
      (common-lisp:list
       (common-lisp:cons "encryptionConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error))
      (common-lisp:list
       (common-lisp:cons "error"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-application-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-chat-controls-configuration-request common-lisp:nil
                       ((application-id :initarg :application-id :initform
                         (common-lisp:error ":applicationid is required") :type
                         (common-lisp:or application-id common-lisp:null)
                         :accessor
                         struct-shape-get-chat-controls-configuration-request-application-id
                         :shape "ApplicationId" :location "uri" :location-name
                         "applicationId")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          max-results-integer-for-get-topic-configurations
                          common-lisp:null)
                         :accessor
                         struct-shape-get-chat-controls-configuration-request-max-results
                         :shape "MaxResultsIntegerForGetTopicConfigurations"
                         :location "querystring" :location-name "maxResults")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-get-chat-controls-configuration-request-next-token
                         :shape "NextToken" :location "querystring"
                         :location-name "nextToken"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-chat-controls-configuration-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-chat-controls-configuration-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-chat-controls-configuration-request
                    'make-get-chat-controls-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-chat-controls-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-chat-controls-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-chat-controls-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-chat-controls-configuration-response common-lisp:nil
                       ((blocked-phrases :initarg :blocked-phrases :initform
                         common-lisp:nil :type
                         (common-lisp:or blocked-phrases-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-chat-controls-configuration-response-blocked-phrases
                         :shape "BlockedPhrasesConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-get-chat-controls-configuration-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (response-scope :initarg :response-scope :initform
                         common-lisp:nil :type
                         (common-lisp:or response-scope common-lisp:null)
                         :accessor
                         struct-shape-get-chat-controls-configuration-response-response-scope
                         :shape "ResponseScope" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (topic-configurations :initarg :topic-configurations
                         :initform common-lisp:nil :type
                         (common-lisp:or topic-configurations common-lisp:null)
                         :accessor
                         struct-shape-get-chat-controls-configuration-response-topic-configurations
                         :shape "TopicConfigurations" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-chat-controls-configuration-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-chat-controls-configuration-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-chat-controls-configuration-response
                    'make-get-chat-controls-configuration-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-chat-controls-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-chat-controls-configuration-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'blocked-phrases))
      (common-lisp:list
       (common-lisp:cons "blockedPhrases"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'response-scope))
      (common-lisp:list
       (common-lisp:cons "responseScope"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'topic-configurations))
      (common-lisp:list
       (common-lisp:cons "topicConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-chat-controls-configuration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-data-source-request common-lisp:nil
                       ((application-id :initarg :application-id :initform
                         (common-lisp:error ":applicationid is required") :type
                         (common-lisp:or application-id common-lisp:null)
                         :accessor
                         struct-shape-get-data-source-request-application-id
                         :shape "ApplicationId" :location "uri" :location-name
                         "applicationId")
                        (data-source-id :initarg :data-source-id :initform
                         (common-lisp:error ":datasourceid is required") :type
                         (common-lisp:or data-source-id common-lisp:null)
                         :accessor
                         struct-shape-get-data-source-request-data-source-id
                         :shape "DataSourceId" :location "uri" :location-name
                         "dataSourceId")
                        (index-id :initarg :index-id :initform
                         (common-lisp:error ":indexid is required") :type
                         (common-lisp:or index-id common-lisp:null) :accessor
                         struct-shape-get-data-source-request-index-id :shape
                         "IndexId" :location "uri" :location-name "indexId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-data-source-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-data-source-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-data-source-request 'make-get-data-source-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-data-source-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-data-source-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-data-source-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-data-source-response common-lisp:nil
                       ((application-id :initarg :application-id :initform
                         common-lisp:nil :type
                         (common-lisp:or application-id common-lisp:null)
                         :accessor
                         struct-shape-get-data-source-response-application-id
                         :shape "ApplicationId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (created-at :initarg :created-at :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-get-data-source-response-created-at
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (data-source-arn :initarg :data-source-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or data-source-arn common-lisp:null)
                         :accessor
                         struct-shape-get-data-source-response-data-source-arn
                         :shape "DataSourceArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (data-source-id :initarg :data-source-id :initform
                         common-lisp:nil :type
                         (common-lisp:or data-source-id common-lisp:null)
                         :accessor
                         struct-shape-get-data-source-response-data-source-id
                         :shape "DataSourceId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor
                         struct-shape-get-data-source-response-description
                         :shape "Description" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (display-name :initarg :display-name :initform
                         common-lisp:nil :type
                         (common-lisp:or data-source-name common-lisp:null)
                         :accessor
                         struct-shape-get-data-source-response-display-name
                         :shape "DataSourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (document-enrichment-configuration :initarg
                         :document-enrichment-configuration :initform
                         common-lisp:nil :type
                         (common-lisp:or document-enrichment-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-data-source-response-document-enrichment-configuration
                         :shape "DocumentEnrichmentConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (error :initarg :error :initform common-lisp:nil :type
                         (common-lisp:or error-detail common-lisp:null)
                         :accessor struct-shape-get-data-source-response-error
                         :shape "ErrorDetail" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (index-id :initarg :index-id :initform common-lisp:nil
                         :type (common-lisp:or index-id common-lisp:null)
                         :accessor
                         struct-shape-get-data-source-response-index-id :shape
                         "IndexId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (role-arn :initarg :role-arn :initform common-lisp:nil
                         :type (common-lisp:or role-arn common-lisp:null)
                         :accessor
                         struct-shape-get-data-source-response-role-arn :shape
                         "RoleArn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or data-source-status common-lisp:null)
                         :accessor struct-shape-get-data-source-response-status
                         :shape "DataSourceStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (sync-schedule :initarg :sync-schedule :initform
                         common-lisp:nil :type
                         (common-lisp:or sync-schedule common-lisp:null)
                         :accessor
                         struct-shape-get-data-source-response-sync-schedule
                         :shape "SyncSchedule" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-get-data-source-response-type :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (updated-at :initarg :updated-at :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-get-data-source-response-updated-at
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (vpc-configuration :initarg :vpc-configuration
                         :initform common-lisp:nil :type
                         (common-lisp:or data-source-vpc-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-data-source-response-vpc-configuration
                         :shape "DataSourceVpcConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-data-source-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-data-source-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-data-source-response 'make-get-data-source-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-data-source-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-data-source-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-id))
      (common-lisp:list
       (common-lisp:cons "applicationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-source-arn))
      (common-lisp:list
       (common-lisp:cons "dataSourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-source-id))
      (common-lisp:list
       (common-lisp:cons "dataSourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-name))
      (common-lisp:list
       (common-lisp:cons "displayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'document-enrichment-configuration))
      (common-lisp:list
       (common-lisp:cons "documentEnrichmentConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error))
      (common-lisp:list
       (common-lisp:cons "error"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'index-id))
      (common-lisp:list
       (common-lisp:cons "indexId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sync-schedule))
      (common-lisp:list
       (common-lisp:cons "syncSchedule"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-configuration))
      (common-lisp:list
       (common-lisp:cons "vpcConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-data-source-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-group-request common-lisp:nil
                       ((application-id :initarg :application-id :initform
                         (common-lisp:error ":applicationid is required") :type
                         (common-lisp:or application-id common-lisp:null)
                         :accessor
                         struct-shape-get-group-request-application-id :shape
                         "ApplicationId" :location "uri" :location-name
                         "applicationId")
                        (data-source-id :initarg :data-source-id :initform
                         common-lisp:nil :type
                         (common-lisp:or data-source-id common-lisp:null)
                         :accessor
                         struct-shape-get-group-request-data-source-id :shape
                         "DataSourceId" :location "querystring" :location-name
                         "dataSourceId")
                        (group-name :initarg :group-name :initform
                         (common-lisp:error ":groupname is required") :type
                         (common-lisp:or group-name common-lisp:null) :accessor
                         struct-shape-get-group-request-group-name :shape
                         "GroupName" :location "uri" :location-name
                         "groupName")
                        (index-id :initarg :index-id :initform
                         (common-lisp:error ":indexid is required") :type
                         (common-lisp:or index-id common-lisp:null) :accessor
                         struct-shape-get-group-request-index-id :shape
                         "IndexId" :location "uri" :location-name "indexId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-group-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-group-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-group-request 'make-get-group-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-group-response common-lisp:nil
                       ((status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or group-status-detail common-lisp:null)
                         :accessor struct-shape-get-group-response-status
                         :shape "GroupStatusDetail" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status-history :initarg :status-history :initform
                         common-lisp:nil :type
                         (common-lisp:or group-status-details common-lisp:null)
                         :accessor
                         struct-shape-get-group-response-status-history :shape
                         "GroupStatusDetails" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-group-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-group-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-group-response 'make-get-group-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-group-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-history))
      (common-lisp:list
       (common-lisp:cons "statusHistory"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-group-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-index-request common-lisp:nil
                       ((application-id :initarg :application-id :initform
                         (common-lisp:error ":applicationid is required") :type
                         (common-lisp:or application-id common-lisp:null)
                         :accessor
                         struct-shape-get-index-request-application-id :shape
                         "ApplicationId" :location "uri" :location-name
                         "applicationId")
                        (index-id :initarg :index-id :initform
                         (common-lisp:error ":indexid is required") :type
                         (common-lisp:or index-id common-lisp:null) :accessor
                         struct-shape-get-index-request-index-id :shape
                         "IndexId" :location "uri" :location-name "indexId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-index-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-index-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-index-request 'make-get-index-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-index-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-index-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-index-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-index-response common-lisp:nil
                       ((application-id :initarg :application-id :initform
                         common-lisp:nil :type
                         (common-lisp:or application-id common-lisp:null)
                         :accessor
                         struct-shape-get-index-response-application-id :shape
                         "ApplicationId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (capacity-configuration :initarg
                         :capacity-configuration :initform common-lisp:nil
                         :type
                         (common-lisp:or index-capacity-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-index-response-capacity-configuration
                         :shape "IndexCapacityConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (created-at :initarg :created-at :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-get-index-response-created-at :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor struct-shape-get-index-response-description
                         :shape "Description" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (display-name :initarg :display-name :initform
                         common-lisp:nil :type
                         (common-lisp:or index-name common-lisp:null) :accessor
                         struct-shape-get-index-response-display-name :shape
                         "IndexName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (document-attribute-configurations :initarg
                         :document-attribute-configurations :initform
                         common-lisp:nil :type
                         (common-lisp:or document-attribute-configurations
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-index-response-document-attribute-configurations
                         :shape "DocumentAttributeConfigurations" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (error :initarg :error :initform common-lisp:nil :type
                         (common-lisp:or error-detail common-lisp:null)
                         :accessor struct-shape-get-index-response-error :shape
                         "ErrorDetail" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (index-arn :initarg :index-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or index-arn common-lisp:null) :accessor
                         struct-shape-get-index-response-index-arn :shape
                         "IndexArn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (index-id :initarg :index-id :initform common-lisp:nil
                         :type (common-lisp:or index-id common-lisp:null)
                         :accessor struct-shape-get-index-response-index-id
                         :shape "IndexId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (index-statistics :initarg :index-statistics :initform
                         common-lisp:nil :type
                         (common-lisp:or index-statistics common-lisp:null)
                         :accessor
                         struct-shape-get-index-response-index-statistics
                         :shape "IndexStatistics" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or index-status common-lisp:null)
                         :accessor struct-shape-get-index-response-status
                         :shape "IndexStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (updated-at :initarg :updated-at :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-get-index-response-updated-at :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-index-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-index-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-index-response 'make-get-index-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-index-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-index-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-id))
      (common-lisp:list
       (common-lisp:cons "applicationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'capacity-configuration))
      (common-lisp:list
       (common-lisp:cons "capacityConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-name))
      (common-lisp:list
       (common-lisp:cons "displayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'document-attribute-configurations))
      (common-lisp:list
       (common-lisp:cons "documentAttributeConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error))
      (common-lisp:list
       (common-lisp:cons "error"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'index-arn))
      (common-lisp:list
       (common-lisp:cons "indexArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'index-id))
      (common-lisp:list
       (common-lisp:cons "indexId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'index-statistics))
      (common-lisp:list
       (common-lisp:cons "indexStatistics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-index-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-plugin-request common-lisp:nil
                       ((application-id :initarg :application-id :initform
                         (common-lisp:error ":applicationid is required") :type
                         (common-lisp:or application-id common-lisp:null)
                         :accessor
                         struct-shape-get-plugin-request-application-id :shape
                         "ApplicationId" :location "uri" :location-name
                         "applicationId")
                        (plugin-id :initarg :plugin-id :initform
                         (common-lisp:error ":pluginid is required") :type
                         (common-lisp:or plugin-id common-lisp:null) :accessor
                         struct-shape-get-plugin-request-plugin-id :shape
                         "PluginId" :location "uri" :location-name "pluginId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-plugin-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-plugin-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-plugin-request 'make-get-plugin-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-plugin-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-plugin-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-plugin-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-plugin-response common-lisp:nil
                       ((application-id :initarg :application-id :initform
                         common-lisp:nil :type
                         (common-lisp:or application-id common-lisp:null)
                         :accessor
                         struct-shape-get-plugin-response-application-id :shape
                         "ApplicationId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (auth-configuration :initarg :auth-configuration
                         :initform common-lisp:nil :type
                         (common-lisp:or plugin-auth-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-plugin-response-auth-configuration
                         :shape "PluginAuthConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (created-at :initarg :created-at :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-get-plugin-response-created-at :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (display-name :initarg :display-name :initform
                         common-lisp:nil :type
                         (common-lisp:or plugin-name common-lisp:null)
                         :accessor
                         struct-shape-get-plugin-response-display-name :shape
                         "PluginName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (plugin-arn :initarg :plugin-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or plugin-arn common-lisp:null) :accessor
                         struct-shape-get-plugin-response-plugin-arn :shape
                         "PluginArn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (plugin-id :initarg :plugin-id :initform
                         common-lisp:nil :type
                         (common-lisp:or plugin-id common-lisp:null) :accessor
                         struct-shape-get-plugin-response-plugin-id :shape
                         "PluginId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (server-url :initarg :server-url :initform
                         common-lisp:nil :type
                         (common-lisp:or url common-lisp:null) :accessor
                         struct-shape-get-plugin-response-server-url :shape
                         "Url" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (state :initarg :state :initform common-lisp:nil :type
                         (common-lisp:or plugin-state common-lisp:null)
                         :accessor struct-shape-get-plugin-response-state
                         :shape "PluginState" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or plugin-type common-lisp:null)
                         :accessor struct-shape-get-plugin-response-type :shape
                         "PluginType" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (updated-at :initarg :updated-at :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-get-plugin-response-updated-at :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-plugin-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-plugin-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-plugin-response 'make-get-plugin-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-plugin-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-plugin-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-id))
      (common-lisp:list
       (common-lisp:cons "applicationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auth-configuration))
      (common-lisp:list
       (common-lisp:cons "authConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-name))
      (common-lisp:list
       (common-lisp:cons "displayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'plugin-arn))
      (common-lisp:list
       (common-lisp:cons "pluginArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'plugin-id))
      (common-lisp:list
       (common-lisp:cons "pluginId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'server-url))
      (common-lisp:list
       (common-lisp:cons "serverUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "state"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-plugin-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-retriever-request common-lisp:nil
                       ((application-id :initarg :application-id :initform
                         (common-lisp:error ":applicationid is required") :type
                         (common-lisp:or application-id common-lisp:null)
                         :accessor
                         struct-shape-get-retriever-request-application-id
                         :shape "ApplicationId" :location "uri" :location-name
                         "applicationId")
                        (retriever-id :initarg :retriever-id :initform
                         (common-lisp:error ":retrieverid is required") :type
                         (common-lisp:or retriever-id common-lisp:null)
                         :accessor
                         struct-shape-get-retriever-request-retriever-id :shape
                         "RetrieverId" :location "uri" :location-name
                         "retrieverId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-retriever-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-retriever-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-retriever-request 'make-get-retriever-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-retriever-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-retriever-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-retriever-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-retriever-response common-lisp:nil
                       ((application-id :initarg :application-id :initform
                         common-lisp:nil :type
                         (common-lisp:or application-id common-lisp:null)
                         :accessor
                         struct-shape-get-retriever-response-application-id
                         :shape "ApplicationId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (configuration :initarg :configuration :initform
                         common-lisp:nil :type
                         (common-lisp:or retriever-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-retriever-response-configuration
                         :shape "RetrieverConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (created-at :initarg :created-at :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-get-retriever-response-created-at :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (display-name :initarg :display-name :initform
                         common-lisp:nil :type
                         (common-lisp:or retriever-name common-lisp:null)
                         :accessor
                         struct-shape-get-retriever-response-display-name
                         :shape "RetrieverName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (retriever-arn :initarg :retriever-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or retriever-arn common-lisp:null)
                         :accessor
                         struct-shape-get-retriever-response-retriever-arn
                         :shape "RetrieverArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (retriever-id :initarg :retriever-id :initform
                         common-lisp:nil :type
                         (common-lisp:or retriever-id common-lisp:null)
                         :accessor
                         struct-shape-get-retriever-response-retriever-id
                         :shape "RetrieverId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (role-arn :initarg :role-arn :initform common-lisp:nil
                         :type (common-lisp:or role-arn common-lisp:null)
                         :accessor struct-shape-get-retriever-response-role-arn
                         :shape "RoleArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or retriever-status common-lisp:null)
                         :accessor struct-shape-get-retriever-response-status
                         :shape "RetrieverStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or retriever-type common-lisp:null)
                         :accessor struct-shape-get-retriever-response-type
                         :shape "RetrieverType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (updated-at :initarg :updated-at :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-get-retriever-response-updated-at :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-retriever-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-retriever-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-retriever-response 'make-get-retriever-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-retriever-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-retriever-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-id))
      (common-lisp:list
       (common-lisp:cons "applicationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration))
      (common-lisp:list
       (common-lisp:cons "configuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-name))
      (common-lisp:list
       (common-lisp:cons "displayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'retriever-arn))
      (common-lisp:list
       (common-lisp:cons "retrieverArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'retriever-id))
      (common-lisp:list
       (common-lisp:cons "retrieverId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-retriever-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-user-request common-lisp:nil
                       ((application-id :initarg :application-id :initform
                         (common-lisp:error ":applicationid is required") :type
                         (common-lisp:or application-id common-lisp:null)
                         :accessor struct-shape-get-user-request-application-id
                         :shape "ApplicationId" :location "uri" :location-name
                         "applicationId")
                        (user-id :initarg :user-id :initform
                         (common-lisp:error ":userid is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-get-user-request-user-id :shape "String"
                         :location "uri" :location-name "userId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-user-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-user-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-user-request 'make-get-user-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-user-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-user-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-user-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-user-response common-lisp:nil
                       ((user-aliases :initarg :user-aliases :initform
                         common-lisp:nil :type
                         (common-lisp:or user-aliases common-lisp:null)
                         :accessor struct-shape-get-user-response-user-aliases
                         :shape "UserAliases" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-user-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-user-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-user-response 'make-get-user-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-user-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-user-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-aliases))
      (common-lisp:list
       (common-lisp:cons "userAliases"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-user-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-web-experience-request common-lisp:nil
                       ((application-id :initarg :application-id :initform
                         (common-lisp:error ":applicationid is required") :type
                         (common-lisp:or application-id common-lisp:null)
                         :accessor
                         struct-shape-get-web-experience-request-application-id
                         :shape "ApplicationId" :location "uri" :location-name
                         "applicationId")
                        (web-experience-id :initarg :web-experience-id
                         :initform
                         (common-lisp:error ":webexperienceid is required")
                         :type
                         (common-lisp:or web-experience-id common-lisp:null)
                         :accessor
                         struct-shape-get-web-experience-request-web-experience-id
                         :shape "WebExperienceId" :location "uri"
                         :location-name "webExperienceId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-web-experience-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-web-experience-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-web-experience-request
                    'make-get-web-experience-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-web-experience-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-web-experience-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-web-experience-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-web-experience-response common-lisp:nil
                       ((application-id :initarg :application-id :initform
                         common-lisp:nil :type
                         (common-lisp:or application-id common-lisp:null)
                         :accessor
                         struct-shape-get-web-experience-response-application-id
                         :shape "ApplicationId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (authentication-configuration :initarg
                         :authentication-configuration :initform
                         common-lisp:nil :type
                         (common-lisp:or web-experience-auth-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-web-experience-response-authentication-configuration
                         :shape "WebExperienceAuthConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (created-at :initarg :created-at :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-get-web-experience-response-created-at
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (default-endpoint :initarg :default-endpoint :initform
                         common-lisp:nil :type
                         (common-lisp:or url common-lisp:null) :accessor
                         struct-shape-get-web-experience-response-default-endpoint
                         :shape "Url" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (error :initarg :error :initform common-lisp:nil :type
                         (common-lisp:or error-detail common-lisp:null)
                         :accessor
                         struct-shape-get-web-experience-response-error :shape
                         "ErrorDetail" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (sample-prompts-control-mode :initarg
                         :sample-prompts-control-mode :initform common-lisp:nil
                         :type
                         (common-lisp:or
                          web-experience-sample-prompts-control-mode
                          common-lisp:null)
                         :accessor
                         struct-shape-get-web-experience-response-sample-prompts-control-mode
                         :shape "WebExperienceSamplePromptsControlMode"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or web-experience-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-web-experience-response-status :shape
                         "WebExperienceStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (subtitle :initarg :subtitle :initform common-lisp:nil
                         :type
                         (common-lisp:or web-experience-subtitle
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-web-experience-response-subtitle
                         :shape "WebExperienceSubtitle" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (title :initarg :title :initform common-lisp:nil :type
                         (common-lisp:or web-experience-title common-lisp:null)
                         :accessor
                         struct-shape-get-web-experience-response-title :shape
                         "WebExperienceTitle" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (updated-at :initarg :updated-at :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-get-web-experience-response-updated-at
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (web-experience-arn :initarg :web-experience-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or web-experience-arn common-lisp:null)
                         :accessor
                         struct-shape-get-web-experience-response-web-experience-arn
                         :shape "WebExperienceArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (web-experience-id :initarg :web-experience-id
                         :initform common-lisp:nil :type
                         (common-lisp:or web-experience-id common-lisp:null)
                         :accessor
                         struct-shape-get-web-experience-response-web-experience-id
                         :shape "WebExperienceId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (welcome-message :initarg :welcome-message :initform
                         common-lisp:nil :type
                         (common-lisp:or web-experience-welcome-message
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-web-experience-response-welcome-message
                         :shape "WebExperienceWelcomeMessage" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-web-experience-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-web-experience-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-web-experience-response
                    'make-get-web-experience-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-web-experience-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-web-experience-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-id))
      (common-lisp:list
       (common-lisp:cons "applicationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'authentication-configuration))
      (common-lisp:list
       (common-lisp:cons "authenticationConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-endpoint))
      (common-lisp:list
       (common-lisp:cons "defaultEndpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error))
      (common-lisp:list
       (common-lisp:cons "error"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'sample-prompts-control-mode))
      (common-lisp:list
       (common-lisp:cons "samplePromptsControlMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subtitle))
      (common-lisp:list
       (common-lisp:cons "subtitle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'title))
      (common-lisp:list
       (common-lisp:cons "title"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'web-experience-arn))
      (common-lisp:list
       (common-lisp:cons "webExperienceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'web-experience-id))
      (common-lisp:list
       (common-lisp:cons "webExperienceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'welcome-message))
      (common-lisp:list
       (common-lisp:cons "welcomeMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-web-experience-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass group-members common-lisp:nil
                       ((member-groups :initarg :member-groups :initform
                         common-lisp:nil :type
                         (common-lisp:or member-groups common-lisp:null)
                         :accessor struct-shape-group-members-member-groups
                         :shape "MemberGroups" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (member-users :initarg :member-users :initform
                         common-lisp:nil :type
                         (common-lisp:or member-users common-lisp:null)
                         :accessor struct-shape-group-members-member-users
                         :shape "MemberUsers" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-group-members
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'group-members
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'group-members 'make-group-members))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input group-members))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input group-members))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'member-groups))
      (common-lisp:list
       (common-lisp:cons "memberGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'member-users))
      (common-lisp:list
       (common-lisp:cons "memberUsers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input group-members))
   common-lisp:nil))
(common-lisp:deftype group-name () 'common-lisp:string)
(common-lisp:deftype group-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass group-status-detail common-lisp:nil
                       ((error-detail :initarg :error-detail :initform
                         common-lisp:nil :type
                         (common-lisp:or error-detail common-lisp:null)
                         :accessor
                         struct-shape-group-status-detail-error-detail :shape
                         "ErrorDetail" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (last-updated-at :initarg :last-updated-at :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-group-status-detail-last-updated-at
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or group-status common-lisp:null)
                         :accessor struct-shape-group-status-detail-status
                         :shape "GroupStatus" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-group-status-detail
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'group-status-detail
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'group-status-detail 'make-group-status-detail))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input group-status-detail))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input group-status-detail))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-detail))
      (common-lisp:list
       (common-lisp:cons "errorDetail"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-at))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input group-status-detail))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype group-status-details ()
   '(trivial-types:proper-list group-status-detail))
 (common-lisp:defun make-group-status-details
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list group-status-detail))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass group-summary common-lisp:nil
                       ((group-name :initarg :group-name :initform
                         common-lisp:nil :type
                         (common-lisp:or group-name common-lisp:null) :accessor
                         struct-shape-group-summary-group-name :shape
                         "GroupName" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-group-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'group-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'group-summary 'make-group-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input group-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input group-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-name))
      (common-lisp:list
       (common-lisp:cons "groupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input group-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype group-summary-list ()
   '(trivial-types:proper-list group-summary))
 (common-lisp:defun make-group-summary-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list group-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass hook-configuration common-lisp:nil
                       ((invocation-condition :initarg :invocation-condition
                         :initform common-lisp:nil :type
                         (common-lisp:or document-attribute-condition
                                         common-lisp:null)
                         :accessor
                         struct-shape-hook-configuration-invocation-condition
                         :shape "DocumentAttributeCondition" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (lambda-arn :initarg :lambda-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or lambda-arn common-lisp:null) :accessor
                         struct-shape-hook-configuration-lambda-arn :shape
                         "LambdaArn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (role-arn :initarg :role-arn :initform common-lisp:nil
                         :type (common-lisp:or role-arn common-lisp:null)
                         :accessor struct-shape-hook-configuration-role-arn
                         :shape "RoleArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (s3bucket-name :initarg :s3bucket-name :initform
                         common-lisp:nil :type
                         (common-lisp:or s3bucket-name common-lisp:null)
                         :accessor
                         struct-shape-hook-configuration-s3bucket-name :shape
                         "S3BucketName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-hook-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'hook-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'hook-configuration 'make-hook-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input hook-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input hook-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'invocation-condition))
      (common-lisp:list
       (common-lisp:cons "invocationCondition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lambda-arn))
      (common-lisp:list
       (common-lisp:cons "lambdaArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3bucket-name))
      (common-lisp:list
       (common-lisp:cons "s3BucketName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input hook-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass index common-lisp:nil
                       ((created-at :initarg :created-at :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-index-created-at :shape "Timestamp"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (display-name :initarg :display-name :initform
                         common-lisp:nil :type
                         (common-lisp:or index-name common-lisp:null) :accessor
                         struct-shape-index-display-name :shape "IndexName"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (index-id :initarg :index-id :initform common-lisp:nil
                         :type (common-lisp:or index-id common-lisp:null)
                         :accessor struct-shape-index-index-id :shape "IndexId"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or index-status common-lisp:null)
                         :accessor struct-shape-index-status :shape
                         "IndexStatus" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (updated-at :initarg :updated-at :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-index-updated-at :shape "Timestamp"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-index
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'index
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'index 'make-index))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input index))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input index))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-name))
      (common-lisp:list
       (common-lisp:cons "displayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'index-id))
      (common-lisp:list
       (common-lisp:cons "indexId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input index))
   common-lisp:nil))
(common-lisp:deftype index-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass index-capacity-configuration common-lisp:nil
                       ((units :initarg :units :initform common-lisp:nil :type
                         (common-lisp:or index-capacity-integer
                                         common-lisp:null)
                         :accessor
                         struct-shape-index-capacity-configuration-units :shape
                         "IndexCapacityInteger" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-index-capacity-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'index-capacity-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'index-capacity-configuration
                    'make-index-capacity-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          index-capacity-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          index-capacity-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'units))
      (common-lisp:list
       (common-lisp:cons "units"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          index-capacity-configuration))
   common-lisp:nil))
(common-lisp:deftype index-capacity-integer () 'common-lisp:integer)
(common-lisp:deftype index-id () 'common-lisp:string)
(common-lisp:deftype index-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass index-statistics common-lisp:nil
                       ((text-document-statistics :initarg
                         :text-document-statistics :initform common-lisp:nil
                         :type
                         (common-lisp:or text-document-statistics
                                         common-lisp:null)
                         :accessor
                         struct-shape-index-statistics-text-document-statistics
                         :shape "TextDocumentStatistics" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-index-statistics
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'index-statistics
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'index-statistics 'make-index-statistics))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input index-statistics))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input index-statistics))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'text-document-statistics))
      (common-lisp:list
       (common-lisp:cons "textDocumentStatistics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input index-statistics))
   common-lisp:nil))
(common-lisp:deftype index-status () 'common-lisp:string)
(common-lisp:deftype indexed-text-bytes () 'common-lisp:integer)
(common-lisp:deftype indexed-text-document () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:deftype indices () '(trivial-types:proper-list index))
 (common-lisp:defun make-indices
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list index))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass inline-document-enrichment-configuration common-lisp:nil
                       ((condition :initarg :condition :initform
                         common-lisp:nil :type
                         (common-lisp:or document-attribute-condition
                                         common-lisp:null)
                         :accessor
                         struct-shape-inline-document-enrichment-configuration-condition
                         :shape "DocumentAttributeCondition" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (document-content-operator :initarg
                         :document-content-operator :initform common-lisp:nil
                         :type
                         (common-lisp:or document-content-operator
                                         common-lisp:null)
                         :accessor
                         struct-shape-inline-document-enrichment-configuration-document-content-operator
                         :shape "DocumentContentOperator" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (target :initarg :target :initform common-lisp:nil
                         :type
                         (common-lisp:or document-attribute-target
                                         common-lisp:null)
                         :accessor
                         struct-shape-inline-document-enrichment-configuration-target
                         :shape "DocumentAttributeTarget" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-inline-document-enrichment-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'inline-document-enrichment-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'inline-document-enrichment-configuration
                    'make-inline-document-enrichment-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          inline-document-enrichment-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          inline-document-enrichment-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'condition))
      (common-lisp:list
       (common-lisp:cons "condition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'document-content-operator))
      (common-lisp:list
       (common-lisp:cons "documentContentOperator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target))
      (common-lisp:list
       (common-lisp:cons "target"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          inline-document-enrichment-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype inline-document-enrichment-configurations ()
   '(trivial-types:proper-list inline-document-enrichment-configuration))
 (common-lisp:defun make-inline-document-enrichment-configurations
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            inline-document-enrichment-configuration))
   aws-sdk/generator/shape::members))
(common-lisp:deftype integer () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition internal-server-exception
     (qbusiness-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       internal-server-exception-message)))
 (common-lisp:export
  (common-lisp:list 'internal-server-exception
                    'internal-server-exception-message)))
(common-lisp:progn
 (common-lisp:defclass kendra-index-configuration common-lisp:nil
                       ((index-id :initarg :index-id :initform
                         (common-lisp:error ":indexid is required") :type
                         (common-lisp:or kendra-index-id common-lisp:null)
                         :accessor
                         struct-shape-kendra-index-configuration-index-id
                         :shape "KendraIndexId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-kendra-index-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'kendra-index-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'kendra-index-configuration
                    'make-kendra-index-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          kendra-index-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          kendra-index-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'index-id))
      (common-lisp:list
       (common-lisp:cons "indexId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          kendra-index-configuration))
   common-lisp:nil))
(common-lisp:deftype kendra-index-id () 'common-lisp:string)
(common-lisp:deftype kms-key-id () 'common-lisp:string)
(common-lisp:deftype lambda-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition license-not-found-exception
     (qbusiness-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       license-not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'license-not-found-exception
                    'license-not-found-exception-message)))
(common-lisp:progn
 (common-lisp:defclass list-applications-request common-lisp:nil
                       ((max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          max-results-integer-for-list-applications
                          common-lisp:null)
                         :accessor
                         struct-shape-list-applications-request-max-results
                         :shape "MaxResultsIntegerForListApplications"
                         :location "querystring" :location-name "maxResults")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-applications-request-next-token
                         :shape "NextToken" :location "querystring"
                         :location-name "nextToken"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-applications-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-applications-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-applications-request
                    'make-list-applications-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-applications-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-applications-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-applications-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-applications-response common-lisp:nil
                       ((applications :initarg :applications :initform
                         common-lisp:nil :type
                         (common-lisp:or applications common-lisp:null)
                         :accessor
                         struct-shape-list-applications-response-applications
                         :shape "Applications" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-applications-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-applications-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-applications-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-applications-response
                    'make-list-applications-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-applications-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-applications-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'applications))
      (common-lisp:list
       (common-lisp:cons "applications"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-applications-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-conversations-request common-lisp:nil
                       ((application-id :initarg :application-id :initform
                         (common-lisp:error ":applicationid is required") :type
                         (common-lisp:or application-id common-lisp:null)
                         :accessor
                         struct-shape-list-conversations-request-application-id
                         :shape "ApplicationId" :location "uri" :location-name
                         "applicationId")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          max-results-integer-for-list-conversations
                          common-lisp:null)
                         :accessor
                         struct-shape-list-conversations-request-max-results
                         :shape "MaxResultsIntegerForListConversations"
                         :location "querystring" :location-name "maxResults")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-conversations-request-next-token
                         :shape "NextToken" :location "querystring"
                         :location-name "nextToken")
                        (user-id :initarg :user-id :initform
                         (common-lisp:error ":userid is required") :type
                         (common-lisp:or user-id common-lisp:null) :accessor
                         struct-shape-list-conversations-request-user-id :shape
                         "UserId" :location "querystring" :location-name
                         "userId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-conversations-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-conversations-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-conversations-request
                    'make-list-conversations-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-conversations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-conversations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-conversations-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-conversations-response common-lisp:nil
                       ((conversations :initarg :conversations :initform
                         common-lisp:nil :type
                         (common-lisp:or conversations common-lisp:null)
                         :accessor
                         struct-shape-list-conversations-response-conversations
                         :shape "Conversations" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-conversations-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-conversations-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-conversations-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-conversations-response
                    'make-list-conversations-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-conversations-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-conversations-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'conversations))
      (common-lisp:list
       (common-lisp:cons "conversations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-conversations-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-data-source-sync-jobs-request common-lisp:nil
                       ((application-id :initarg :application-id :initform
                         (common-lisp:error ":applicationid is required") :type
                         (common-lisp:or application-id common-lisp:null)
                         :accessor
                         struct-shape-list-data-source-sync-jobs-request-application-id
                         :shape "ApplicationId" :location "uri" :location-name
                         "applicationId")
                        (data-source-id :initarg :data-source-id :initform
                         (common-lisp:error ":datasourceid is required") :type
                         (common-lisp:or data-source-id common-lisp:null)
                         :accessor
                         struct-shape-list-data-source-sync-jobs-request-data-source-id
                         :shape "DataSourceId" :location "uri" :location-name
                         "dataSourceId")
                        (end-time :initarg :end-time :initform common-lisp:nil
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         struct-shape-list-data-source-sync-jobs-request-end-time
                         :shape "Timestamp" :location "querystring"
                         :location-name "endTime")
                        (index-id :initarg :index-id :initform
                         (common-lisp:error ":indexid is required") :type
                         (common-lisp:or index-id common-lisp:null) :accessor
                         struct-shape-list-data-source-sync-jobs-request-index-id
                         :shape "IndexId" :location "uri" :location-name
                         "indexId")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          max-results-integer-for-list-data-sources-sync-jobs
                          common-lisp:null)
                         :accessor
                         struct-shape-list-data-source-sync-jobs-request-max-results
                         :shape "MaxResultsIntegerForListDataSourcesSyncJobs"
                         :location "querystring" :location-name "maxResults")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-data-source-sync-jobs-request-next-token
                         :shape "NextToken" :location "querystring"
                         :location-name "nextToken")
                        (start-time :initarg :start-time :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-list-data-source-sync-jobs-request-start-time
                         :shape "Timestamp" :location "querystring"
                         :location-name "startTime")
                        (status-filter :initarg :status-filter :initform
                         common-lisp:nil :type
                         (common-lisp:or data-source-sync-job-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-data-source-sync-jobs-request-status-filter
                         :shape "DataSourceSyncJobStatus" :location
                         "querystring" :location-name "syncStatus"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-data-source-sync-jobs-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-data-source-sync-jobs-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-data-source-sync-jobs-request
                    'make-list-data-source-sync-jobs-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-data-source-sync-jobs-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-data-source-sync-jobs-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-data-source-sync-jobs-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-data-source-sync-jobs-response common-lisp:nil
                       ((history :initarg :history :initform common-lisp:nil
                         :type
                         (common-lisp:or data-source-sync-jobs
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-data-source-sync-jobs-response-history
                         :shape "DataSourceSyncJobs" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-data-source-sync-jobs-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-data-source-sync-jobs-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-data-source-sync-jobs-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-data-source-sync-jobs-response
                    'make-list-data-source-sync-jobs-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-data-source-sync-jobs-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-data-source-sync-jobs-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'history))
      (common-lisp:list
       (common-lisp:cons "history"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-data-source-sync-jobs-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-data-sources-request common-lisp:nil
                       ((application-id :initarg :application-id :initform
                         (common-lisp:error ":applicationid is required") :type
                         (common-lisp:or application-id common-lisp:null)
                         :accessor
                         struct-shape-list-data-sources-request-application-id
                         :shape "ApplicationId" :location "uri" :location-name
                         "applicationId")
                        (index-id :initarg :index-id :initform
                         (common-lisp:error ":indexid is required") :type
                         (common-lisp:or index-id common-lisp:null) :accessor
                         struct-shape-list-data-sources-request-index-id :shape
                         "IndexId" :location "uri" :location-name "indexId")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          max-results-integer-for-list-data-sources
                          common-lisp:null)
                         :accessor
                         struct-shape-list-data-sources-request-max-results
                         :shape "MaxResultsIntegerForListDataSources" :location
                         "querystring" :location-name "maxResults")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-data-sources-request-next-token
                         :shape "NextToken" :location "querystring"
                         :location-name "nextToken"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-data-sources-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-data-sources-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-data-sources-request
                    'make-list-data-sources-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-data-sources-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-data-sources-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-data-sources-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-data-sources-response common-lisp:nil
                       ((data-sources :initarg :data-sources :initform
                         common-lisp:nil :type
                         (common-lisp:or data-sources common-lisp:null)
                         :accessor
                         struct-shape-list-data-sources-response-data-sources
                         :shape "DataSources" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-data-sources-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-data-sources-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-data-sources-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-data-sources-response
                    'make-list-data-sources-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-data-sources-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-data-sources-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-sources))
      (common-lisp:list
       (common-lisp:cons "dataSources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-data-sources-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-documents-request common-lisp:nil
                       ((application-id :initarg :application-id :initform
                         (common-lisp:error ":applicationid is required") :type
                         (common-lisp:or application-id common-lisp:null)
                         :accessor
                         struct-shape-list-documents-request-application-id
                         :shape "ApplicationId" :location "uri" :location-name
                         "applicationId")
                        (data-source-ids :initarg :data-source-ids :initform
                         common-lisp:nil :type
                         (common-lisp:or data-source-ids common-lisp:null)
                         :accessor
                         struct-shape-list-documents-request-data-source-ids
                         :shape "DataSourceIds" :location "querystring"
                         :location-name "dataSourceIds")
                        (index-id :initarg :index-id :initform
                         (common-lisp:error ":indexid is required") :type
                         (common-lisp:or index-id common-lisp:null) :accessor
                         struct-shape-list-documents-request-index-id :shape
                         "IndexId" :location "uri" :location-name "indexId")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results-integer-for-list-documents
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-documents-request-max-results :shape
                         "MaxResultsIntegerForListDocuments" :location
                         "querystring" :location-name "maxResults")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-documents-request-next-token :shape
                         "NextToken" :location "querystring" :location-name
                         "nextToken"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-documents-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-documents-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-documents-request 'make-list-documents-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-documents-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-documents-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-documents-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-documents-response common-lisp:nil
                       ((document-detail-list :initarg :document-detail-list
                         :initform common-lisp:nil :type
                         (common-lisp:or document-detail-list common-lisp:null)
                         :accessor
                         struct-shape-list-documents-response-document-detail-list
                         :shape "DocumentDetailList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-documents-response-next-token :shape
                         "NextToken" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-documents-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-documents-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-documents-response 'make-list-documents-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-documents-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-documents-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'document-detail-list))
      (common-lisp:list
       (common-lisp:cons "documentDetailList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-documents-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-groups-request common-lisp:nil
                       ((application-id :initarg :application-id :initform
                         (common-lisp:error ":applicationid is required") :type
                         (common-lisp:or application-id common-lisp:null)
                         :accessor
                         struct-shape-list-groups-request-application-id :shape
                         "ApplicationId" :location "uri" :location-name
                         "applicationId")
                        (data-source-id :initarg :data-source-id :initform
                         common-lisp:nil :type
                         (common-lisp:or data-source-id common-lisp:null)
                         :accessor
                         struct-shape-list-groups-request-data-source-id :shape
                         "DataSourceId" :location "querystring" :location-name
                         "dataSourceId")
                        (index-id :initarg :index-id :initform
                         (common-lisp:error ":indexid is required") :type
                         (common-lisp:or index-id common-lisp:null) :accessor
                         struct-shape-list-groups-request-index-id :shape
                         "IndexId" :location "uri" :location-name "indexId")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          max-results-integer-for-list-groups-request
                          common-lisp:null)
                         :accessor struct-shape-list-groups-request-max-results
                         :shape "MaxResultsIntegerForListGroupsRequest"
                         :location "querystring" :location-name "maxResults")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-groups-request-next-token :shape
                         "NextToken" :location "querystring" :location-name
                         "nextToken")
                        (updated-earlier-than :initarg :updated-earlier-than
                         :initform
                         (common-lisp:error ":updatedearlierthan is required")
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         struct-shape-list-groups-request-updated-earlier-than
                         :shape "Timestamp" :location "querystring"
                         :location-name "updatedEarlierThan"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-groups-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-groups-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-groups-request 'make-list-groups-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-groups-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-groups-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-groups-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-groups-response common-lisp:nil
                       ((items :initarg :items :initform common-lisp:nil :type
                         (common-lisp:or group-summary-list common-lisp:null)
                         :accessor struct-shape-list-groups-response-items
                         :shape "GroupSummaryList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-groups-response-next-token :shape
                         "NextToken" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-groups-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-groups-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-groups-response 'make-list-groups-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-groups-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-groups-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'items))
      (common-lisp:list
       (common-lisp:cons "items"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-groups-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-indices-request common-lisp:nil
                       ((application-id :initarg :application-id :initform
                         (common-lisp:error ":applicationid is required") :type
                         (common-lisp:or application-id common-lisp:null)
                         :accessor
                         struct-shape-list-indices-request-application-id
                         :shape "ApplicationId" :location "uri" :location-name
                         "applicationId")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results-integer-for-list-indices
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-indices-request-max-results :shape
                         "MaxResultsIntegerForListIndices" :location
                         "querystring" :location-name "maxResults")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-indices-request-next-token :shape
                         "NextToken" :location "querystring" :location-name
                         "nextToken"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-indices-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-indices-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-indices-request 'make-list-indices-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-indices-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-indices-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-indices-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-indices-response common-lisp:nil
                       ((indices :initarg :indices :initform common-lisp:nil
                         :type (common-lisp:or indices common-lisp:null)
                         :accessor struct-shape-list-indices-response-indices
                         :shape "Indices" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-indices-response-next-token :shape
                         "NextToken" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-indices-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-indices-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-indices-response 'make-list-indices-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-indices-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-indices-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'indices))
      (common-lisp:list
       (common-lisp:cons "indices"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-indices-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-messages-request common-lisp:nil
                       ((application-id :initarg :application-id :initform
                         (common-lisp:error ":applicationid is required") :type
                         (common-lisp:or application-id common-lisp:null)
                         :accessor
                         struct-shape-list-messages-request-application-id
                         :shape "ApplicationId" :location "uri" :location-name
                         "applicationId")
                        (conversation-id :initarg :conversation-id :initform
                         (common-lisp:error ":conversationid is required")
                         :type
                         (common-lisp:or conversation-id common-lisp:null)
                         :accessor
                         struct-shape-list-messages-request-conversation-id
                         :shape "ConversationId" :location "uri" :location-name
                         "conversationId")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results-integer-for-list-messages
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-messages-request-max-results :shape
                         "MaxResultsIntegerForListMessages" :location
                         "querystring" :location-name "maxResults")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-messages-request-next-token :shape
                         "NextToken" :location "querystring" :location-name
                         "nextToken")
                        (user-id :initarg :user-id :initform
                         (common-lisp:error ":userid is required") :type
                         (common-lisp:or user-id common-lisp:null) :accessor
                         struct-shape-list-messages-request-user-id :shape
                         "UserId" :location "querystring" :location-name
                         "userId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-messages-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-messages-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-messages-request 'make-list-messages-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-messages-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-messages-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-messages-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-messages-response common-lisp:nil
                       ((messages :initarg :messages :initform common-lisp:nil
                         :type (common-lisp:or messages common-lisp:null)
                         :accessor struct-shape-list-messages-response-messages
                         :shape "Messages" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-messages-response-next-token :shape
                         "NextToken" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-messages-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-messages-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-messages-response 'make-list-messages-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-messages-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-messages-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'messages))
      (common-lisp:list
       (common-lisp:cons "messages"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-messages-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-plugins-request common-lisp:nil
                       ((application-id :initarg :application-id :initform
                         (common-lisp:error ":applicationid is required") :type
                         (common-lisp:or application-id common-lisp:null)
                         :accessor
                         struct-shape-list-plugins-request-application-id
                         :shape "ApplicationId" :location "uri" :location-name
                         "applicationId")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results-integer-for-list-plugins
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-plugins-request-max-results :shape
                         "MaxResultsIntegerForListPlugins" :location
                         "querystring" :location-name "maxResults")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-plugins-request-next-token :shape
                         "NextToken" :location "querystring" :location-name
                         "nextToken"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-plugins-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-plugins-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-plugins-request 'make-list-plugins-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-plugins-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-plugins-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-plugins-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-plugins-response common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-plugins-response-next-token :shape
                         "NextToken" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (plugins :initarg :plugins :initform common-lisp:nil
                         :type (common-lisp:or plugins common-lisp:null)
                         :accessor struct-shape-list-plugins-response-plugins
                         :shape "Plugins" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-plugins-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-plugins-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-plugins-response 'make-list-plugins-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-plugins-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-plugins-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'plugins))
      (common-lisp:list
       (common-lisp:cons "plugins"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-plugins-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-retrievers-request common-lisp:nil
                       ((application-id :initarg :application-id :initform
                         (common-lisp:error ":applicationid is required") :type
                         (common-lisp:or application-id common-lisp:null)
                         :accessor
                         struct-shape-list-retrievers-request-application-id
                         :shape "ApplicationId" :location "uri" :location-name
                         "applicationId")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          max-results-integer-for-list-retrievers-request
                          common-lisp:null)
                         :accessor
                         struct-shape-list-retrievers-request-max-results
                         :shape "MaxResultsIntegerForListRetrieversRequest"
                         :location "querystring" :location-name "maxResults")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-retrievers-request-next-token :shape
                         "NextToken" :location "querystring" :location-name
                         "nextToken"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-retrievers-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-retrievers-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-retrievers-request 'make-list-retrievers-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-retrievers-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-retrievers-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-retrievers-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-retrievers-response common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-retrievers-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (retrievers :initarg :retrievers :initform
                         common-lisp:nil :type
                         (common-lisp:or retrievers common-lisp:null) :accessor
                         struct-shape-list-retrievers-response-retrievers
                         :shape "Retrievers" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-retrievers-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-retrievers-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-retrievers-response 'make-list-retrievers-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-retrievers-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-retrievers-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'retrievers))
      (common-lisp:list
       (common-lisp:cons "retrievers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-retrievers-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-request common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resourcearn is required") :type
                         (common-lisp:or amazon-resource-name common-lisp:null)
                         :accessor
                         struct-shape-list-tags-for-resource-request-resource-arn
                         :shape "AmazonResourceName" :location "uri"
                         :location-name "resourceARN"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-tags-for-resource-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-request
                    'make-list-tags-for-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-response common-lisp:nil
                       ((tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         struct-shape-list-tags-for-resource-response-tags
                         :shape "Tags" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-tags-for-resource-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-response
                    'make-list-tags-for-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-web-experiences-request common-lisp:nil
                       ((application-id :initarg :application-id :initform
                         (common-lisp:error ":applicationid is required") :type
                         (common-lisp:or application-id common-lisp:null)
                         :accessor
                         struct-shape-list-web-experiences-request-application-id
                         :shape "ApplicationId" :location "uri" :location-name
                         "applicationId")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          max-results-integer-for-list-web-experiences-request
                          common-lisp:null)
                         :accessor
                         struct-shape-list-web-experiences-request-max-results
                         :shape "MaxResultsIntegerForListWebExperiencesRequest"
                         :location "querystring" :location-name "maxResults")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-web-experiences-request-next-token
                         :shape "NextToken" :location "querystring"
                         :location-name "nextToken"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-web-experiences-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-web-experiences-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-web-experiences-request
                    'make-list-web-experiences-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-web-experiences-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-web-experiences-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-web-experiences-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-web-experiences-response common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-web-experiences-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (web-experiences :initarg :web-experiences :initform
                         common-lisp:nil :type
                         (common-lisp:or web-experiences common-lisp:null)
                         :accessor
                         struct-shape-list-web-experiences-response-web-experiences
                         :shape "WebExperiences" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-web-experiences-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-web-experiences-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-web-experiences-response
                    'make-list-web-experiences-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-web-experiences-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-web-experiences-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'web-experiences))
      (common-lisp:list
       (common-lisp:cons "webExperiences"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-web-experiences-response))
   common-lisp:nil))
(common-lisp:deftype long () 'common-lisp:integer)
(common-lisp:deftype max-results-integer-for-get-topic-configurations ()
  'common-lisp:integer)
(common-lisp:deftype max-results-integer-for-list-applications ()
  'common-lisp:integer)
(common-lisp:deftype max-results-integer-for-list-conversations ()
  'common-lisp:integer)
(common-lisp:deftype max-results-integer-for-list-data-sources ()
  'common-lisp:integer)
(common-lisp:deftype max-results-integer-for-list-data-sources-sync-jobs ()
  'common-lisp:integer)
(common-lisp:deftype max-results-integer-for-list-documents ()
  'common-lisp:integer)
(common-lisp:deftype max-results-integer-for-list-groups-request ()
  'common-lisp:integer)
(common-lisp:deftype max-results-integer-for-list-indices ()
  'common-lisp:integer)
(common-lisp:deftype max-results-integer-for-list-messages ()
  'common-lisp:integer)
(common-lisp:deftype max-results-integer-for-list-plugins ()
  'common-lisp:integer)
(common-lisp:deftype max-results-integer-for-list-retrievers-request ()
  'common-lisp:integer)
(common-lisp:deftype max-results-integer-for-list-web-experiences-request ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass member-group common-lisp:nil
                       ((group-name :initarg :group-name :initform
                         (common-lisp:error ":groupname is required") :type
                         (common-lisp:or group-name common-lisp:null) :accessor
                         struct-shape-member-group-group-name :shape
                         "GroupName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or membership-type common-lisp:null)
                         :accessor struct-shape-member-group-type :shape
                         "MembershipType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-member-group
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'member-group
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'member-group 'make-member-group))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input member-group))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input member-group))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-name))
      (common-lisp:list
       (common-lisp:cons "groupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input member-group))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype member-groups ()
   '(trivial-types:proper-list member-group))
 (common-lisp:defun make-member-groups
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list member-group))
   aws-sdk/generator/shape::members))
(common-lisp:deftype member-relation () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass member-user common-lisp:nil
                       ((type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or membership-type common-lisp:null)
                         :accessor struct-shape-member-user-type :shape
                         "MembershipType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (user-id :initarg :user-id :initform
                         (common-lisp:error ":userid is required") :type
                         (common-lisp:or data-source-user-id common-lisp:null)
                         :accessor struct-shape-member-user-user-id :shape
                         "DataSourceUserId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-member-user
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'member-user
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'member-user 'make-member-user))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input member-user))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input member-user))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-id))
      (common-lisp:list
       (common-lisp:cons "userId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input member-user))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype member-users () '(trivial-types:proper-list member-user))
 (common-lisp:defun make-member-users
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list member-user))
   aws-sdk/generator/shape::members))
(common-lisp:deftype membership-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass message common-lisp:nil
                       ((action-review :initarg :action-review :initform
                         common-lisp:nil :type
                         (common-lisp:or action-review common-lisp:null)
                         :accessor struct-shape-message-action-review :shape
                         "ActionReview" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (attachments :initarg :attachments :initform
                         common-lisp:nil :type
                         (common-lisp:or attachments-output common-lisp:null)
                         :accessor struct-shape-message-attachments :shape
                         "AttachmentsOutput" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (body :initarg :body :initform common-lisp:nil :type
                         (common-lisp:or message-body common-lisp:null)
                         :accessor struct-shape-message-body :shape
                         "MessageBody" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (message-id :initarg :message-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-message-message-id :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (source-attribution :initarg :source-attribution
                         :initform common-lisp:nil :type
                         (common-lisp:or source-attributions common-lisp:null)
                         :accessor struct-shape-message-source-attribution
                         :shape "SourceAttributions" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (time :initarg :time :initform common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-message-time :shape "Timestamp" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or message-type common-lisp:null)
                         :accessor struct-shape-message-type :shape
                         "MessageType" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'message
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'message 'make-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-review))
      (common-lisp:list
       (common-lisp:cons "actionReview"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attachments))
      (common-lisp:list
       (common-lisp:cons "attachments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'body))
      (common-lisp:list
       (common-lisp:cons "body"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message-id))
      (common-lisp:list
       (common-lisp:cons "messageId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-attribution))
      (common-lisp:list
       (common-lisp:cons "sourceAttribution"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'time))
      (common-lisp:list
       (common-lisp:cons "time"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input message))
   common-lisp:nil))
(common-lisp:deftype message-body () 'common-lisp:string)
(common-lisp:deftype message-id () 'common-lisp:string)
(common-lisp:deftype message-type () 'common-lisp:string)
(common-lisp:deftype message-usefulness () 'common-lisp:string)
(common-lisp:deftype message-usefulness-comment () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass message-usefulness-feedback common-lisp:nil
                       ((comment :initarg :comment :initform common-lisp:nil
                         :type
                         (common-lisp:or message-usefulness-comment
                                         common-lisp:null)
                         :accessor
                         struct-shape-message-usefulness-feedback-comment
                         :shape "MessageUsefulnessComment" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (reason :initarg :reason :initform common-lisp:nil
                         :type
                         (common-lisp:or message-usefulness-reason
                                         common-lisp:null)
                         :accessor
                         struct-shape-message-usefulness-feedback-reason :shape
                         "MessageUsefulnessReason" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (submitted-at :initarg :submitted-at :initform
                         (common-lisp:error ":submittedat is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-message-usefulness-feedback-submitted-at
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (usefulness :initarg :usefulness :initform
                         (common-lisp:error ":usefulness is required") :type
                         (common-lisp:or message-usefulness common-lisp:null)
                         :accessor
                         struct-shape-message-usefulness-feedback-usefulness
                         :shape "MessageUsefulness" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-message-usefulness-feedback
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'message-usefulness-feedback
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'message-usefulness-feedback
                    'make-message-usefulness-feedback))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          message-usefulness-feedback))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          message-usefulness-feedback))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'comment))
      (common-lisp:list
       (common-lisp:cons "comment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reason))
      (common-lisp:list
       (common-lisp:cons "reason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'submitted-at))
      (common-lisp:list
       (common-lisp:cons "submittedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'usefulness))
      (common-lisp:list
       (common-lisp:cons "usefulness"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          message-usefulness-feedback))
   common-lisp:nil))
(common-lisp:deftype message-usefulness-reason () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype messages () '(trivial-types:proper-list message))
 (common-lisp:defun make-messages
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list message))
   aws-sdk/generator/shape::members))
(common-lisp:deftype metric-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass native-index-configuration common-lisp:nil
                       ((boosting-override :initarg :boosting-override
                         :initform common-lisp:nil :type
                         (common-lisp:or
                          document-attribute-boosting-override-map
                          common-lisp:null)
                         :accessor
                         struct-shape-native-index-configuration-boosting-override
                         :shape "DocumentAttributeBoostingOverrideMap"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (index-id :initarg :index-id :initform
                         (common-lisp:error ":indexid is required") :type
                         (common-lisp:or index-id common-lisp:null) :accessor
                         struct-shape-native-index-configuration-index-id
                         :shape "IndexId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-native-index-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'native-index-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'native-index-configuration
                    'make-native-index-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          native-index-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          native-index-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'boosting-override))
      (common-lisp:list
       (common-lisp:cons "boostingOverride"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'index-id))
      (common-lisp:list
       (common-lisp:cons "indexId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          native-index-configuration))
   common-lisp:nil))
(common-lisp:deftype next-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass number-attribute-boosting-configuration common-lisp:nil
                       ((boosting-level :initarg :boosting-level :initform
                         (common-lisp:error ":boostinglevel is required") :type
                         (common-lisp:or document-attribute-boosting-level
                                         common-lisp:null)
                         :accessor
                         struct-shape-number-attribute-boosting-configuration-boosting-level
                         :shape "DocumentAttributeBoostingLevel" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (boosting-type :initarg :boosting-type :initform
                         common-lisp:nil :type
                         (common-lisp:or number-attribute-boosting-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-number-attribute-boosting-configuration-boosting-type
                         :shape "NumberAttributeBoostingType" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-number-attribute-boosting-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'number-attribute-boosting-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'number-attribute-boosting-configuration
                    'make-number-attribute-boosting-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          number-attribute-boosting-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          number-attribute-boosting-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'boosting-level))
      (common-lisp:list
       (common-lisp:cons "boostingLevel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'boosting-type))
      (common-lisp:list
       (common-lisp:cons "boostingType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          number-attribute-boosting-configuration))
   common-lisp:nil))
(common-lisp:deftype number-attribute-boosting-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass oauth2client-credential-configuration common-lisp:nil
                       ((role-arn :initarg :role-arn :initform
                         (common-lisp:error ":rolearn is required") :type
                         (common-lisp:or role-arn common-lisp:null) :accessor
                         struct-shape-oauth2client-credential-configuration-role-arn
                         :shape "RoleArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (secret-arn :initarg :secret-arn :initform
                         (common-lisp:error ":secretarn is required") :type
                         (common-lisp:or secret-arn common-lisp:null) :accessor
                         struct-shape-oauth2client-credential-configuration-secret-arn
                         :shape "SecretArn" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-oauth2client-credential-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'oauth2client-credential-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'oauth2client-credential-configuration
                    'make-oauth2client-credential-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          oauth2client-credential-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          oauth2client-credential-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'secret-arn))
      (common-lisp:list
       (common-lisp:cons "secretArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          oauth2client-credential-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass plugin common-lisp:nil
                       ((created-at :initarg :created-at :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-plugin-created-at :shape "Timestamp"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (display-name :initarg :display-name :initform
                         common-lisp:nil :type
                         (common-lisp:or plugin-name common-lisp:null)
                         :accessor struct-shape-plugin-display-name :shape
                         "PluginName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (plugin-id :initarg :plugin-id :initform
                         common-lisp:nil :type
                         (common-lisp:or plugin-id common-lisp:null) :accessor
                         struct-shape-plugin-plugin-id :shape "PluginId"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (server-url :initarg :server-url :initform
                         common-lisp:nil :type
                         (common-lisp:or url common-lisp:null) :accessor
                         struct-shape-plugin-server-url :shape "Url" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (state :initarg :state :initform common-lisp:nil :type
                         (common-lisp:or plugin-state common-lisp:null)
                         :accessor struct-shape-plugin-state :shape
                         "PluginState" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or plugin-type common-lisp:null)
                         :accessor struct-shape-plugin-type :shape "PluginType"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (updated-at :initarg :updated-at :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-plugin-updated-at :shape "Timestamp"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-plugin
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'plugin
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'plugin 'make-plugin))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input plugin))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input plugin))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-name))
      (common-lisp:list
       (common-lisp:cons "displayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'plugin-id))
      (common-lisp:list
       (common-lisp:cons "pluginId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'server-url))
      (common-lisp:list
       (common-lisp:cons "serverUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "state"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input plugin))
   common-lisp:nil))
(common-lisp:deftype plugin-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass plugin-auth-configuration common-lisp:nil
                       ((basic-auth-configuration :initarg
                         :basic-auth-configuration :initform common-lisp:nil
                         :type
                         (common-lisp:or basic-auth-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-plugin-auth-configuration-basic-auth-configuration
                         :shape "BasicAuthConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (o-auth2client-credential-configuration :initarg
                         :o-auth2client-credential-configuration :initform
                         common-lisp:nil :type
                         (common-lisp:or oauth2client-credential-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-plugin-auth-configuration-o-auth2client-credential-configuration
                         :shape "OAuth2ClientCredentialConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-plugin-auth-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'plugin-auth-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'plugin-auth-configuration
                    'make-plugin-auth-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          plugin-auth-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          plugin-auth-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'basic-auth-configuration))
      (common-lisp:list
       (common-lisp:cons "basicAuthConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'o-auth2client-credential-configuration))
      (common-lisp:list
       (common-lisp:cons "oAuth2ClientCredentialConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          plugin-auth-configuration))
   common-lisp:nil))
(common-lisp:deftype plugin-id () 'common-lisp:string)
(common-lisp:deftype plugin-name () 'common-lisp:string)
(common-lisp:deftype plugin-state () 'common-lisp:string)
(common-lisp:deftype plugin-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype plugins () '(trivial-types:proper-list plugin))
 (common-lisp:defun make-plugins
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list plugin))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass principal common-lisp:nil
                       ((group :initarg :group :initform common-lisp:nil :type
                         (common-lisp:or principal-group common-lisp:null)
                         :accessor struct-shape-principal-group :shape
                         "PrincipalGroup" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (user :initarg :user :initform common-lisp:nil :type
                         (common-lisp:or principal-user common-lisp:null)
                         :accessor struct-shape-principal-user :shape
                         "PrincipalUser" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-principal
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'principal
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'principal 'make-principal))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input principal))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input principal))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group))
      (common-lisp:list
       (common-lisp:cons "group"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user))
      (common-lisp:list
       (common-lisp:cons "user"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input principal))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass principal-group common-lisp:nil
                       ((access :initarg :access :initform
                         (common-lisp:error ":access is required") :type
                         (common-lisp:or read-access-type common-lisp:null)
                         :accessor struct-shape-principal-group-access :shape
                         "ReadAccessType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (membership-type :initarg :membership-type :initform
                         common-lisp:nil :type
                         (common-lisp:or membership-type common-lisp:null)
                         :accessor struct-shape-principal-group-membership-type
                         :shape "MembershipType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or group-name common-lisp:null) :accessor
                         struct-shape-principal-group-name :shape "GroupName"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-principal-group
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'principal-group
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'principal-group 'make-principal-group))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input principal-group))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input principal-group))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access))
      (common-lisp:list
       (common-lisp:cons "access"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'membership-type))
      (common-lisp:list
       (common-lisp:cons "membershipType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input principal-group))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass principal-user common-lisp:nil
                       ((access :initarg :access :initform
                         (common-lisp:error ":access is required") :type
                         (common-lisp:or read-access-type common-lisp:null)
                         :accessor struct-shape-principal-user-access :shape
                         "ReadAccessType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (id :initarg :id :initform common-lisp:nil :type
                         (common-lisp:or user-id common-lisp:null) :accessor
                         struct-shape-principal-user-id :shape "UserId"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (membership-type :initarg :membership-type :initform
                         common-lisp:nil :type
                         (common-lisp:or membership-type common-lisp:null)
                         :accessor struct-shape-principal-user-membership-type
                         :shape "MembershipType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-principal-user
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'principal-user
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'principal-user 'make-principal-user))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input principal-user))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input principal-user))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access))
      (common-lisp:list
       (common-lisp:cons "access"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'membership-type))
      (common-lisp:list
       (common-lisp:cons "membershipType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input principal-user))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype principals () '(trivial-types:proper-list principal))
 (common-lisp:defun make-principals
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list principal))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass put-feedback-request common-lisp:nil
                       ((application-id :initarg :application-id :initform
                         (common-lisp:error ":applicationid is required") :type
                         (common-lisp:or application-id common-lisp:null)
                         :accessor
                         struct-shape-put-feedback-request-application-id
                         :shape "ApplicationId" :location "uri" :location-name
                         "applicationId")
                        (conversation-id :initarg :conversation-id :initform
                         (common-lisp:error ":conversationid is required")
                         :type
                         (common-lisp:or conversation-id common-lisp:null)
                         :accessor
                         struct-shape-put-feedback-request-conversation-id
                         :shape "ConversationId" :location "uri" :location-name
                         "conversationId")
                        (message-copied-at :initarg :message-copied-at
                         :initform common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-put-feedback-request-message-copied-at
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (message-id :initarg :message-id :initform
                         (common-lisp:error ":messageid is required") :type
                         (common-lisp:or system-message-id common-lisp:null)
                         :accessor struct-shape-put-feedback-request-message-id
                         :shape "SystemMessageId" :location "uri"
                         :location-name "messageId")
                        (message-usefulness :initarg :message-usefulness
                         :initform common-lisp:nil :type
                         (common-lisp:or message-usefulness-feedback
                                         common-lisp:null)
                         :accessor
                         struct-shape-put-feedback-request-message-usefulness
                         :shape "MessageUsefulnessFeedback" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (user-id :initarg :user-id :initform
                         (common-lisp:error ":userid is required") :type
                         (common-lisp:or user-id common-lisp:null) :accessor
                         struct-shape-put-feedback-request-user-id :shape
                         "UserId" :location "querystring" :location-name
                         "userId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-feedback-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'put-feedback-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-feedback-request 'make-put-feedback-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input put-feedback-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input put-feedback-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message-copied-at))
      (common-lisp:list
       (common-lisp:cons "messageCopiedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message-usefulness))
      (common-lisp:list
       (common-lisp:cons "messageUsefulness"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input put-feedback-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-group-request common-lisp:nil
                       ((application-id :initarg :application-id :initform
                         (common-lisp:error ":applicationid is required") :type
                         (common-lisp:or application-id common-lisp:null)
                         :accessor
                         struct-shape-put-group-request-application-id :shape
                         "ApplicationId" :location "uri" :location-name
                         "applicationId")
                        (data-source-id :initarg :data-source-id :initform
                         common-lisp:nil :type
                         (common-lisp:or data-source-id common-lisp:null)
                         :accessor
                         struct-shape-put-group-request-data-source-id :shape
                         "DataSourceId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (group-members :initarg :group-members :initform
                         (common-lisp:error ":groupmembers is required") :type
                         (common-lisp:or group-members common-lisp:null)
                         :accessor struct-shape-put-group-request-group-members
                         :shape "GroupMembers" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (group-name :initarg :group-name :initform
                         (common-lisp:error ":groupname is required") :type
                         (common-lisp:or group-name common-lisp:null) :accessor
                         struct-shape-put-group-request-group-name :shape
                         "GroupName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (index-id :initarg :index-id :initform
                         (common-lisp:error ":indexid is required") :type
                         (common-lisp:or index-id common-lisp:null) :accessor
                         struct-shape-put-group-request-index-id :shape
                         "IndexId" :location "uri" :location-name "indexId")
                        (type :initarg :type :initform
                         (common-lisp:error ":type is required") :type
                         (common-lisp:or membership-type common-lisp:null)
                         :accessor struct-shape-put-group-request-type :shape
                         "MembershipType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-group-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'put-group-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-group-request 'make-put-group-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input put-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input put-group-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-source-id))
      (common-lisp:list
       (common-lisp:cons "dataSourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-members))
      (common-lisp:list
       (common-lisp:cons "groupMembers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-name))
      (common-lisp:list
       (common-lisp:cons "groupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input put-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-group-response common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-group-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'put-group-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-group-response 'make-put-group-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input put-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input put-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input put-group-response))
   common-lisp:nil))
(common-lisp:deftype read-access-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-exception
     (qbusiness-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-not-found-exception-message)
      (resource-id :initarg :resource-id :initform common-lisp:nil :reader
       resource-not-found-exception-resource-id)
      (resource-type :initarg :resource-type :initform common-lisp:nil :reader
       resource-not-found-exception-resource-type)))
 (common-lisp:export
  (common-lisp:list 'resource-not-found-exception
                    'resource-not-found-exception-message
                    'resource-not-found-exception-resource-id
                    'resource-not-found-exception-resource-type)))
(common-lisp:deftype response-scope () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass retriever common-lisp:nil
                       ((application-id :initarg :application-id :initform
                         common-lisp:nil :type
                         (common-lisp:or application-id common-lisp:null)
                         :accessor struct-shape-retriever-application-id :shape
                         "ApplicationId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (display-name :initarg :display-name :initform
                         common-lisp:nil :type
                         (common-lisp:or retriever-name common-lisp:null)
                         :accessor struct-shape-retriever-display-name :shape
                         "RetrieverName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (retriever-id :initarg :retriever-id :initform
                         common-lisp:nil :type
                         (common-lisp:or retriever-id common-lisp:null)
                         :accessor struct-shape-retriever-retriever-id :shape
                         "RetrieverId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or retriever-status common-lisp:null)
                         :accessor struct-shape-retriever-status :shape
                         "RetrieverStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or retriever-type common-lisp:null)
                         :accessor struct-shape-retriever-type :shape
                         "RetrieverType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-retriever
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'retriever
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'retriever 'make-retriever))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input retriever))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input retriever))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-id))
      (common-lisp:list
       (common-lisp:cons "applicationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-name))
      (common-lisp:list
       (common-lisp:cons "displayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'retriever-id))
      (common-lisp:list
       (common-lisp:cons "retrieverId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input retriever))
   common-lisp:nil))
(common-lisp:deftype retriever-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass retriever-configuration common-lisp:nil
                       ((kendra-index-configuration :initarg
                         :kendra-index-configuration :initform common-lisp:nil
                         :type
                         (common-lisp:or kendra-index-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-retriever-configuration-kendra-index-configuration
                         :shape "KendraIndexConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (native-index-configuration :initarg
                         :native-index-configuration :initform common-lisp:nil
                         :type
                         (common-lisp:or native-index-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-retriever-configuration-native-index-configuration
                         :shape "NativeIndexConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-retriever-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'retriever-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'retriever-configuration 'make-retriever-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          retriever-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          retriever-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'kendra-index-configuration))
      (common-lisp:list
       (common-lisp:cons "kendraIndexConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'native-index-configuration))
      (common-lisp:list
       (common-lisp:cons "nativeIndexConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          retriever-configuration))
   common-lisp:nil))
(common-lisp:deftype retriever-id () 'common-lisp:string)
(common-lisp:deftype retriever-name () 'common-lisp:string)
(common-lisp:deftype retriever-status () 'common-lisp:string)
(common-lisp:deftype retriever-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype retrievers () '(trivial-types:proper-list retriever))
 (common-lisp:defun make-retrievers
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list retriever))
   aws-sdk/generator/shape::members))
(common-lisp:deftype role-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass rule common-lisp:nil
                       ((excluded-users-and-groups :initarg
                         :excluded-users-and-groups :initform common-lisp:nil
                         :type
                         (common-lisp:or users-and-groups common-lisp:null)
                         :accessor struct-shape-rule-excluded-users-and-groups
                         :shape "UsersAndGroups" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (included-users-and-groups :initarg
                         :included-users-and-groups :initform common-lisp:nil
                         :type
                         (common-lisp:or users-and-groups common-lisp:null)
                         :accessor struct-shape-rule-included-users-and-groups
                         :shape "UsersAndGroups" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (rule-configuration :initarg :rule-configuration
                         :initform common-lisp:nil :type
                         (common-lisp:or rule-configuration common-lisp:null)
                         :accessor struct-shape-rule-rule-configuration :shape
                         "RuleConfiguration" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (rule-type :initarg :rule-type :initform
                         (common-lisp:error ":ruletype is required") :type
                         (common-lisp:or rule-type common-lisp:null) :accessor
                         struct-shape-rule-rule-type :shape "RuleType"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-rule (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'rule
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'rule 'make-rule))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input rule))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input rule))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'excluded-users-and-groups))
      (common-lisp:list
       (common-lisp:cons "excludedUsersAndGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'included-users-and-groups))
      (common-lisp:list
       (common-lisp:cons "includedUsersAndGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-configuration))
      (common-lisp:list
       (common-lisp:cons "ruleConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-type))
      (common-lisp:list
       (common-lisp:cons "ruleType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input rule))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass rule-configuration common-lisp:nil
                       ((content-blocker-rule :initarg :content-blocker-rule
                         :initform common-lisp:nil :type
                         (common-lisp:or content-blocker-rule common-lisp:null)
                         :accessor
                         struct-shape-rule-configuration-content-blocker-rule
                         :shape "ContentBlockerRule" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (content-retrieval-rule :initarg
                         :content-retrieval-rule :initform common-lisp:nil
                         :type
                         (common-lisp:or content-retrieval-rule
                                         common-lisp:null)
                         :accessor
                         struct-shape-rule-configuration-content-retrieval-rule
                         :shape "ContentRetrievalRule" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-rule-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'rule-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'rule-configuration 'make-rule-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input rule-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input rule-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'content-blocker-rule))
      (common-lisp:list
       (common-lisp:cons "contentBlockerRule"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'content-retrieval-rule))
      (common-lisp:list
       (common-lisp:cons "contentRetrievalRule"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input rule-configuration))
   common-lisp:nil))
(common-lisp:deftype rule-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype rules () '(trivial-types:proper-list rule))
 (common-lisp:defun make-rules
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list rule))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass s3 common-lisp:nil
                       ((bucket :initarg :bucket :initform
                         (common-lisp:error ":bucket is required") :type
                         (common-lisp:or s3bucket-name common-lisp:null)
                         :accessor struct-shape-s3-bucket :shape "S3BucketName"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (key :initarg :key :initform
                         (common-lisp:error ":key is required") :type
                         (common-lisp:or s3object-key common-lisp:null)
                         :accessor struct-shape-s3-key :shape "S3ObjectKey"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-s3 (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 's3
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 's3 'make-s3))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input s3))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input s3))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket))
      (common-lisp:list
       (common-lisp:cons "bucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input s3))
   common-lisp:nil))
(common-lisp:deftype s3bucket-name () 'common-lisp:string)
(common-lisp:deftype s3object-key () 'common-lisp:string)
(common-lisp:deftype saml-attribute () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass saml-configuration common-lisp:nil
                       ((metadata-xml :initarg :metadata-xml :initform
                         (common-lisp:error ":metadataxml is required") :type
                         (common-lisp:or saml-metadata-xml common-lisp:null)
                         :accessor struct-shape-saml-configuration-metadata-xml
                         :shape "SamlMetadataXML" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (role-arn :initarg :role-arn :initform
                         (common-lisp:error ":rolearn is required") :type
                         (common-lisp:or role-arn common-lisp:null) :accessor
                         struct-shape-saml-configuration-role-arn :shape
                         "RoleArn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (user-group-attribute :initarg :user-group-attribute
                         :initform common-lisp:nil :type
                         (common-lisp:or saml-attribute common-lisp:null)
                         :accessor
                         struct-shape-saml-configuration-user-group-attribute
                         :shape "SamlAttribute" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (user-id-attribute :initarg :user-id-attribute
                         :initform
                         (common-lisp:error ":useridattribute is required")
                         :type (common-lisp:or saml-attribute common-lisp:null)
                         :accessor
                         struct-shape-saml-configuration-user-id-attribute
                         :shape "SamlAttribute" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-saml-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'saml-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'saml-configuration 'make-saml-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input saml-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input saml-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metadata-xml))
      (common-lisp:list
       (common-lisp:cons "metadataXML"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'user-group-attribute))
      (common-lisp:list
       (common-lisp:cons "userGroupAttribute"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-id-attribute))
      (common-lisp:list
       (common-lisp:cons "userIdAttribute"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input saml-configuration))
   common-lisp:nil))
(common-lisp:deftype saml-metadata-xml () 'common-lisp:string)
(common-lisp:deftype secret-arn () 'common-lisp:string)
(common-lisp:deftype security-group-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype security-group-ids ()
   '(trivial-types:proper-list security-group-id))
 (common-lisp:defun make-security-group-ids
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list security-group-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition service-quota-exceeded-exception
     (qbusiness-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       service-quota-exceeded-exception-message)
      (resource-id :initarg :resource-id :initform common-lisp:nil :reader
       service-quota-exceeded-exception-resource-id)
      (resource-type :initarg :resource-type :initform common-lisp:nil :reader
       service-quota-exceeded-exception-resource-type)))
 (common-lisp:export
  (common-lisp:list 'service-quota-exceeded-exception
                    'service-quota-exceeded-exception-message
                    'service-quota-exceeded-exception-resource-id
                    'service-quota-exceeded-exception-resource-type)))
(common-lisp:progn
 (common-lisp:defclass source-attribution common-lisp:nil
                       ((citation-number :initarg :citation-number :initform
                         common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-source-attribution-citation-number :shape
                         "Integer" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (snippet :initarg :snippet :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-source-attribution-snippet
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (text-message-segments :initarg :text-message-segments
                         :initform common-lisp:nil :type
                         (common-lisp:or text-segment-list common-lisp:null)
                         :accessor
                         struct-shape-source-attribution-text-message-segments
                         :shape "TextSegmentList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (title :initarg :title :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-source-attribution-title :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (updated-at :initarg :updated-at :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-source-attribution-updated-at :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (url :initarg :url :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-source-attribution-url :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-source-attribution
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'source-attribution
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'source-attribution 'make-source-attribution))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input source-attribution))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input source-attribution))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'citation-number))
      (common-lisp:list
       (common-lisp:cons "citationNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snippet))
      (common-lisp:list
       (common-lisp:cons "snippet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'text-message-segments))
      (common-lisp:list
       (common-lisp:cons "textMessageSegments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'title))
      (common-lisp:list
       (common-lisp:cons "title"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'url))
      (common-lisp:list
       (common-lisp:cons "url"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input source-attribution))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype source-attributions ()
   '(trivial-types:proper-list source-attribution))
 (common-lisp:defun make-source-attributions
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list source-attribution))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass start-data-source-sync-job-request common-lisp:nil
                       ((application-id :initarg :application-id :initform
                         (common-lisp:error ":applicationid is required") :type
                         (common-lisp:or application-id common-lisp:null)
                         :accessor
                         struct-shape-start-data-source-sync-job-request-application-id
                         :shape "ApplicationId" :location "uri" :location-name
                         "applicationId")
                        (data-source-id :initarg :data-source-id :initform
                         (common-lisp:error ":datasourceid is required") :type
                         (common-lisp:or data-source-id common-lisp:null)
                         :accessor
                         struct-shape-start-data-source-sync-job-request-data-source-id
                         :shape "DataSourceId" :location "uri" :location-name
                         "dataSourceId")
                        (index-id :initarg :index-id :initform
                         (common-lisp:error ":indexid is required") :type
                         (common-lisp:or index-id common-lisp:null) :accessor
                         struct-shape-start-data-source-sync-job-request-index-id
                         :shape "IndexId" :location "uri" :location-name
                         "indexId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-data-source-sync-job-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-data-source-sync-job-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-data-source-sync-job-request
                    'make-start-data-source-sync-job-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-data-source-sync-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-data-source-sync-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-data-source-sync-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-data-source-sync-job-response common-lisp:nil
                       ((execution-id :initarg :execution-id :initform
                         common-lisp:nil :type
                         (common-lisp:or execution-id common-lisp:null)
                         :accessor
                         struct-shape-start-data-source-sync-job-response-execution-id
                         :shape "ExecutionId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-data-source-sync-job-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-data-source-sync-job-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-data-source-sync-job-response
                    'make-start-data-source-sync-job-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-data-source-sync-job-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-data-source-sync-job-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execution-id))
      (common-lisp:list
       (common-lisp:cons "executionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-data-source-sync-job-response))
   common-lisp:nil))
(common-lisp:deftype status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass stop-data-source-sync-job-request common-lisp:nil
                       ((application-id :initarg :application-id :initform
                         (common-lisp:error ":applicationid is required") :type
                         (common-lisp:or application-id common-lisp:null)
                         :accessor
                         struct-shape-stop-data-source-sync-job-request-application-id
                         :shape "ApplicationId" :location "uri" :location-name
                         "applicationId")
                        (data-source-id :initarg :data-source-id :initform
                         (common-lisp:error ":datasourceid is required") :type
                         (common-lisp:or data-source-id common-lisp:null)
                         :accessor
                         struct-shape-stop-data-source-sync-job-request-data-source-id
                         :shape "DataSourceId" :location "uri" :location-name
                         "dataSourceId")
                        (index-id :initarg :index-id :initform
                         (common-lisp:error ":indexid is required") :type
                         (common-lisp:or index-id common-lisp:null) :accessor
                         struct-shape-stop-data-source-sync-job-request-index-id
                         :shape "IndexId" :location "uri" :location-name
                         "indexId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-stop-data-source-sync-job-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'stop-data-source-sync-job-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'stop-data-source-sync-job-request
                    'make-stop-data-source-sync-job-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-data-source-sync-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-data-source-sync-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-data-source-sync-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass stop-data-source-sync-job-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-stop-data-source-sync-job-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'stop-data-source-sync-job-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'stop-data-source-sync-job-response
                    'make-stop-data-source-sync-job-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-data-source-sync-job-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-data-source-sync-job-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-data-source-sync-job-response))
   common-lisp:nil))
(common-lisp:deftype string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass string-attribute-boosting-configuration common-lisp:nil
                       ((attribute-value-boosting :initarg
                         :attribute-value-boosting :initform common-lisp:nil
                         :type
                         (common-lisp:or string-attribute-value-boosting
                                         common-lisp:null)
                         :accessor
                         struct-shape-string-attribute-boosting-configuration-attribute-value-boosting
                         :shape "StringAttributeValueBoosting" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (boosting-level :initarg :boosting-level :initform
                         (common-lisp:error ":boostinglevel is required") :type
                         (common-lisp:or document-attribute-boosting-level
                                         common-lisp:null)
                         :accessor
                         struct-shape-string-attribute-boosting-configuration-boosting-level
                         :shape "DocumentAttributeBoostingLevel" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-string-attribute-boosting-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'string-attribute-boosting-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'string-attribute-boosting-configuration
                    'make-string-attribute-boosting-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          string-attribute-boosting-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          string-attribute-boosting-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'attribute-value-boosting))
      (common-lisp:list
       (common-lisp:cons "attributeValueBoosting"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'boosting-level))
      (common-lisp:list
       (common-lisp:cons "boostingLevel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          string-attribute-boosting-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype string-attribute-value-boosting ()
   'common-lisp:hash-table)
 (common-lisp:defun make-string-attribute-value-boosting
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype string-attribute-value-boosting-level ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass string-list-attribute-boosting-configuration
                       common-lisp:nil
                       ((boosting-level :initarg :boosting-level :initform
                         (common-lisp:error ":boostinglevel is required") :type
                         (common-lisp:or document-attribute-boosting-level
                                         common-lisp:null)
                         :accessor
                         struct-shape-string-list-attribute-boosting-configuration-boosting-level
                         :shape "DocumentAttributeBoostingLevel" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-string-list-attribute-boosting-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'string-list-attribute-boosting-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'string-list-attribute-boosting-configuration
                    'make-string-list-attribute-boosting-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          string-list-attribute-boosting-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          string-list-attribute-boosting-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'boosting-level))
      (common-lisp:list
       (common-lisp:cons "boostingLevel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          string-list-attribute-boosting-configuration))
   common-lisp:nil))
(common-lisp:deftype subnet-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype subnet-ids () '(trivial-types:proper-list subnet-id))
 (common-lisp:defun make-subnet-ids
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list subnet-id))
   aws-sdk/generator/shape::members))
(common-lisp:deftype sync-schedule () 'common-lisp:string)
(common-lisp:deftype system-message-id () 'common-lisp:string)
(common-lisp:deftype system-message-override () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass tag common-lisp:nil
                       ((key :initarg :key :initform
                         (common-lisp:error ":key is required") :type
                         (common-lisp:or tag-key common-lisp:null) :accessor
                         struct-shape-tag-key :shape "TagKey" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (value :initarg :value :initform
                         (common-lisp:error ":value is required") :type
                         (common-lisp:or tag-value common-lisp:null) :accessor
                         struct-shape-tag-value :shape "TagValue" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tag (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'tag
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'tag 'make-tag))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag))
   common-lisp:nil))
(common-lisp:deftype tag-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tag-keys () '(trivial-types:proper-list tag-key))
 (common-lisp:defun make-tag-keys
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass tag-resource-request common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resourcearn is required") :type
                         (common-lisp:or amazon-resource-name common-lisp:null)
                         :accessor
                         struct-shape-tag-resource-request-resource-arn :shape
                         "AmazonResourceName" :location "uri" :location-name
                         "resourceARN")
                        (tags :initarg :tags :initform
                         (common-lisp:error ":tags is required") :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         struct-shape-tag-resource-request-tags :shape "Tags"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tag-resource-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'tag-resource-request 'make-tag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass tag-resource-response common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tag-resource-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'tag-resource-response 'make-tag-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   common-lisp:nil))
(common-lisp:deftype tag-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tags () '(trivial-types:proper-list tag))
 (common-lisp:defun make-tags
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass text-document-statistics common-lisp:nil
                       ((indexed-text-bytes :initarg :indexed-text-bytes
                         :initform common-lisp:nil :type
                         (common-lisp:or indexed-text-bytes common-lisp:null)
                         :accessor
                         struct-shape-text-document-statistics-indexed-text-bytes
                         :shape "IndexedTextBytes" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (indexed-text-document-count :initarg
                         :indexed-text-document-count :initform common-lisp:nil
                         :type
                         (common-lisp:or indexed-text-document
                                         common-lisp:null)
                         :accessor
                         struct-shape-text-document-statistics-indexed-text-document-count
                         :shape "IndexedTextDocument" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-text-document-statistics
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'text-document-statistics
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'text-document-statistics 'make-text-document-statistics))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          text-document-statistics))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          text-document-statistics))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'indexed-text-bytes))
      (common-lisp:list
       (common-lisp:cons "indexedTextBytes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'indexed-text-document-count))
      (common-lisp:list
       (common-lisp:cons "indexedTextDocumentCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          text-document-statistics))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass text-segment common-lisp:nil
                       ((begin-offset :initarg :begin-offset :initform
                         common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-text-segment-begin-offset :shape
                         "Integer" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (end-offset :initarg :end-offset :initform
                         common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-text-segment-end-offset :shape "Integer"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-text-segment
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'text-segment
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'text-segment 'make-text-segment))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input text-segment))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input text-segment))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'begin-offset))
      (common-lisp:list
       (common-lisp:cons "beginOffset"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-offset))
      (common-lisp:list
       (common-lisp:cons "endOffset"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input text-segment))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype text-segment-list ()
   '(trivial-types:proper-list text-segment))
 (common-lisp:defun make-text-segment-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list text-segment))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition throttling-exception
     (qbusiness-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       throttling-exception-message)))
 (common-lisp:export
  (common-lisp:list 'throttling-exception 'throttling-exception-message)))
(common-lisp:deftype timestamp () 'common-lisp:string)
(common-lisp:deftype title () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass topic-configuration common-lisp:nil
                       ((description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or topic-description common-lisp:null)
                         :accessor struct-shape-topic-configuration-description
                         :shape "TopicDescription" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (example-chat-messages :initarg :example-chat-messages
                         :initform common-lisp:nil :type
                         (common-lisp:or example-chat-messages
                                         common-lisp:null)
                         :accessor
                         struct-shape-topic-configuration-example-chat-messages
                         :shape "ExampleChatMessages" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or topic-configuration-name
                                         common-lisp:null)
                         :accessor struct-shape-topic-configuration-name :shape
                         "TopicConfigurationName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (rules :initarg :rules :initform
                         (common-lisp:error ":rules is required") :type
                         (common-lisp:or rules common-lisp:null) :accessor
                         struct-shape-topic-configuration-rules :shape "Rules"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-topic-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'topic-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'topic-configuration 'make-topic-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input topic-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input topic-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'example-chat-messages))
      (common-lisp:list
       (common-lisp:cons "exampleChatMessages"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rules))
      (common-lisp:list
       (common-lisp:cons "rules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input topic-configuration))
   common-lisp:nil))
(common-lisp:deftype topic-configuration-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype topic-configurations ()
   '(trivial-types:proper-list topic-configuration))
 (common-lisp:defun make-topic-configurations
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list topic-configuration))
   aws-sdk/generator/shape::members))
(common-lisp:deftype topic-description () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass untag-resource-request common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resourcearn is required") :type
                         (common-lisp:or amazon-resource-name common-lisp:null)
                         :accessor
                         struct-shape-untag-resource-request-resource-arn
                         :shape "AmazonResourceName" :location "uri"
                         :location-name "resourceARN")
                        (tag-keys :initarg :tag-keys :initform
                         (common-lisp:error ":tagkeys is required") :type
                         (common-lisp:or tag-keys common-lisp:null) :accessor
                         struct-shape-untag-resource-request-tag-keys :shape
                         "TagKeys" :location "querystring" :location-name
                         "tagKeys"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-untag-resource-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'untag-resource-request 'make-untag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass untag-resource-response common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-untag-resource-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'untag-resource-response 'make-untag-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-application-request common-lisp:nil
                       ((application-id :initarg :application-id :initform
                         (common-lisp:error ":applicationid is required") :type
                         (common-lisp:or application-id common-lisp:null)
                         :accessor
                         struct-shape-update-application-request-application-id
                         :shape "ApplicationId" :location "uri" :location-name
                         "applicationId")
                        (attachments-configuration :initarg
                         :attachments-configuration :initform common-lisp:nil
                         :type
                         (common-lisp:or attachments-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-application-request-attachments-configuration
                         :shape "AttachmentsConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor
                         struct-shape-update-application-request-description
                         :shape "Description" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (display-name :initarg :display-name :initform
                         common-lisp:nil :type
                         (common-lisp:or application-name common-lisp:null)
                         :accessor
                         struct-shape-update-application-request-display-name
                         :shape "ApplicationName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (role-arn :initarg :role-arn :initform common-lisp:nil
                         :type (common-lisp:or role-arn common-lisp:null)
                         :accessor
                         struct-shape-update-application-request-role-arn
                         :shape "RoleArn" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-application-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-application-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-application-request
                    'make-update-application-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-application-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-application-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'attachments-configuration))
      (common-lisp:list
       (common-lisp:cons "attachmentsConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-name))
      (common-lisp:list
       (common-lisp:cons "displayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-application-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-application-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-application-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-application-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-application-response
                    'make-update-application-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-application-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-application-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-application-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-chat-controls-configuration-request
                       common-lisp:nil
                       ((application-id :initarg :application-id :initform
                         (common-lisp:error ":applicationid is required") :type
                         (common-lisp:or application-id common-lisp:null)
                         :accessor
                         struct-shape-update-chat-controls-configuration-request-application-id
                         :shape "ApplicationId" :location "uri" :location-name
                         "applicationId")
                        (blocked-phrases-configuration-update :initarg
                         :blocked-phrases-configuration-update :initform
                         common-lisp:nil :type
                         (common-lisp:or blocked-phrases-configuration-update
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-chat-controls-configuration-request-blocked-phrases-configuration-update
                         :shape "BlockedPhrasesConfigurationUpdate" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor
                         struct-shape-update-chat-controls-configuration-request-client-token
                         :shape "ClientToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (response-scope :initarg :response-scope :initform
                         common-lisp:nil :type
                         (common-lisp:or response-scope common-lisp:null)
                         :accessor
                         struct-shape-update-chat-controls-configuration-request-response-scope
                         :shape "ResponseScope" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (topic-configurations-to-create-or-update :initarg
                         :topic-configurations-to-create-or-update :initform
                         common-lisp:nil :type
                         (common-lisp:or topic-configurations common-lisp:null)
                         :accessor
                         struct-shape-update-chat-controls-configuration-request-topic-configurations-to-create-or-update
                         :shape "TopicConfigurations" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (topic-configurations-to-delete :initarg
                         :topic-configurations-to-delete :initform
                         common-lisp:nil :type
                         (common-lisp:or topic-configurations common-lisp:null)
                         :accessor
                         struct-shape-update-chat-controls-configuration-request-topic-configurations-to-delete
                         :shape "TopicConfigurations" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-chat-controls-configuration-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-chat-controls-configuration-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-chat-controls-configuration-request
                    'make-update-chat-controls-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-chat-controls-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-chat-controls-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'blocked-phrases-configuration-update))
      (common-lisp:list
       (common-lisp:cons "blockedPhrasesConfigurationUpdate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'response-scope))
      (common-lisp:list
       (common-lisp:cons "responseScope"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'topic-configurations-to-create-or-update))
      (common-lisp:list
       (common-lisp:cons "topicConfigurationsToCreateOrUpdate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'topic-configurations-to-delete))
      (common-lisp:list
       (common-lisp:cons "topicConfigurationsToDelete"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-chat-controls-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-chat-controls-configuration-response
                       common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-chat-controls-configuration-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-chat-controls-configuration-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-chat-controls-configuration-response
                    'make-update-chat-controls-configuration-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-chat-controls-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-chat-controls-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-chat-controls-configuration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-data-source-request common-lisp:nil
                       ((application-id :initarg :application-id :initform
                         (common-lisp:error ":applicationid is required") :type
                         (common-lisp:or application-id common-lisp:null)
                         :accessor
                         struct-shape-update-data-source-request-application-id
                         :shape "ApplicationId" :location "uri" :location-name
                         "applicationId")
                        (data-source-id :initarg :data-source-id :initform
                         (common-lisp:error ":datasourceid is required") :type
                         (common-lisp:or data-source-id common-lisp:null)
                         :accessor
                         struct-shape-update-data-source-request-data-source-id
                         :shape "DataSourceId" :location "uri" :location-name
                         "dataSourceId")
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor
                         struct-shape-update-data-source-request-description
                         :shape "Description" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (display-name :initarg :display-name :initform
                         common-lisp:nil :type
                         (common-lisp:or data-source-name common-lisp:null)
                         :accessor
                         struct-shape-update-data-source-request-display-name
                         :shape "DataSourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (document-enrichment-configuration :initarg
                         :document-enrichment-configuration :initform
                         common-lisp:nil :type
                         (common-lisp:or document-enrichment-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-data-source-request-document-enrichment-configuration
                         :shape "DocumentEnrichmentConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (index-id :initarg :index-id :initform
                         (common-lisp:error ":indexid is required") :type
                         (common-lisp:or index-id common-lisp:null) :accessor
                         struct-shape-update-data-source-request-index-id
                         :shape "IndexId" :location "uri" :location-name
                         "indexId")
                        (role-arn :initarg :role-arn :initform common-lisp:nil
                         :type (common-lisp:or role-arn common-lisp:null)
                         :accessor
                         struct-shape-update-data-source-request-role-arn
                         :shape "RoleArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (sync-schedule :initarg :sync-schedule :initform
                         common-lisp:nil :type
                         (common-lisp:or sync-schedule common-lisp:null)
                         :accessor
                         struct-shape-update-data-source-request-sync-schedule
                         :shape "SyncSchedule" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (vpc-configuration :initarg :vpc-configuration
                         :initform common-lisp:nil :type
                         (common-lisp:or data-source-vpc-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-data-source-request-vpc-configuration
                         :shape "DataSourceVpcConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-data-source-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-data-source-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-data-source-request
                    'make-update-data-source-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-data-source-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-data-source-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-name))
      (common-lisp:list
       (common-lisp:cons "displayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'document-enrichment-configuration))
      (common-lisp:list
       (common-lisp:cons "documentEnrichmentConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sync-schedule))
      (common-lisp:list
       (common-lisp:cons "syncSchedule"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-configuration))
      (common-lisp:list
       (common-lisp:cons "vpcConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-data-source-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-data-source-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-data-source-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-data-source-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-data-source-response
                    'make-update-data-source-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-data-source-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-data-source-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-data-source-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-index-request common-lisp:nil
                       ((application-id :initarg :application-id :initform
                         (common-lisp:error ":applicationid is required") :type
                         (common-lisp:or application-id common-lisp:null)
                         :accessor
                         struct-shape-update-index-request-application-id
                         :shape "ApplicationId" :location "uri" :location-name
                         "applicationId")
                        (capacity-configuration :initarg
                         :capacity-configuration :initform common-lisp:nil
                         :type
                         (common-lisp:or index-capacity-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-index-request-capacity-configuration
                         :shape "IndexCapacityConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor
                         struct-shape-update-index-request-description :shape
                         "Description" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (display-name :initarg :display-name :initform
                         common-lisp:nil :type
                         (common-lisp:or application-name common-lisp:null)
                         :accessor
                         struct-shape-update-index-request-display-name :shape
                         "ApplicationName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (document-attribute-configurations :initarg
                         :document-attribute-configurations :initform
                         common-lisp:nil :type
                         (common-lisp:or document-attribute-configurations
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-index-request-document-attribute-configurations
                         :shape "DocumentAttributeConfigurations" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (index-id :initarg :index-id :initform
                         (common-lisp:error ":indexid is required") :type
                         (common-lisp:or index-id common-lisp:null) :accessor
                         struct-shape-update-index-request-index-id :shape
                         "IndexId" :location "uri" :location-name "indexId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-index-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-index-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-index-request 'make-update-index-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-index-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-index-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'capacity-configuration))
      (common-lisp:list
       (common-lisp:cons "capacityConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-name))
      (common-lisp:list
       (common-lisp:cons "displayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'document-attribute-configurations))
      (common-lisp:list
       (common-lisp:cons "documentAttributeConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-index-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-index-response common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-index-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-index-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-index-response 'make-update-index-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-index-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-index-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-index-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-plugin-request common-lisp:nil
                       ((application-id :initarg :application-id :initform
                         (common-lisp:error ":applicationid is required") :type
                         (common-lisp:or application-id common-lisp:null)
                         :accessor
                         struct-shape-update-plugin-request-application-id
                         :shape "ApplicationId" :location "uri" :location-name
                         "applicationId")
                        (auth-configuration :initarg :auth-configuration
                         :initform common-lisp:nil :type
                         (common-lisp:or plugin-auth-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-plugin-request-auth-configuration
                         :shape "PluginAuthConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (display-name :initarg :display-name :initform
                         common-lisp:nil :type
                         (common-lisp:or plugin-name common-lisp:null)
                         :accessor
                         struct-shape-update-plugin-request-display-name :shape
                         "PluginName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (plugin-id :initarg :plugin-id :initform
                         (common-lisp:error ":pluginid is required") :type
                         (common-lisp:or plugin-id common-lisp:null) :accessor
                         struct-shape-update-plugin-request-plugin-id :shape
                         "PluginId" :location "uri" :location-name "pluginId")
                        (server-url :initarg :server-url :initform
                         common-lisp:nil :type
                         (common-lisp:or url common-lisp:null) :accessor
                         struct-shape-update-plugin-request-server-url :shape
                         "Url" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (state :initarg :state :initform common-lisp:nil :type
                         (common-lisp:or plugin-state common-lisp:null)
                         :accessor struct-shape-update-plugin-request-state
                         :shape "PluginState" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-plugin-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-plugin-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-plugin-request 'make-update-plugin-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-plugin-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-plugin-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auth-configuration))
      (common-lisp:list
       (common-lisp:cons "authConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-name))
      (common-lisp:list
       (common-lisp:cons "displayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'server-url))
      (common-lisp:list
       (common-lisp:cons "serverUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "state"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-plugin-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-plugin-response common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-plugin-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-plugin-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-plugin-response 'make-update-plugin-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-plugin-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-plugin-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-plugin-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-retriever-request common-lisp:nil
                       ((application-id :initarg :application-id :initform
                         (common-lisp:error ":applicationid is required") :type
                         (common-lisp:or application-id common-lisp:null)
                         :accessor
                         struct-shape-update-retriever-request-application-id
                         :shape "ApplicationId" :location "uri" :location-name
                         "applicationId")
                        (configuration :initarg :configuration :initform
                         common-lisp:nil :type
                         (common-lisp:or retriever-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-retriever-request-configuration
                         :shape "RetrieverConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (display-name :initarg :display-name :initform
                         common-lisp:nil :type
                         (common-lisp:or retriever-name common-lisp:null)
                         :accessor
                         struct-shape-update-retriever-request-display-name
                         :shape "RetrieverName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (retriever-id :initarg :retriever-id :initform
                         (common-lisp:error ":retrieverid is required") :type
                         (common-lisp:or retriever-id common-lisp:null)
                         :accessor
                         struct-shape-update-retriever-request-retriever-id
                         :shape "RetrieverId" :location "uri" :location-name
                         "retrieverId")
                        (role-arn :initarg :role-arn :initform common-lisp:nil
                         :type (common-lisp:or role-arn common-lisp:null)
                         :accessor
                         struct-shape-update-retriever-request-role-arn :shape
                         "RoleArn" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-retriever-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-retriever-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-retriever-request 'make-update-retriever-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-retriever-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-retriever-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration))
      (common-lisp:list
       (common-lisp:cons "configuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-name))
      (common-lisp:list
       (common-lisp:cons "displayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-retriever-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-retriever-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-retriever-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-retriever-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-retriever-response
                    'make-update-retriever-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-retriever-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-retriever-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-retriever-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-user-request common-lisp:nil
                       ((application-id :initarg :application-id :initform
                         (common-lisp:error ":applicationid is required") :type
                         (common-lisp:or application-id common-lisp:null)
                         :accessor
                         struct-shape-update-user-request-application-id :shape
                         "ApplicationId" :location "uri" :location-name
                         "applicationId")
                        (user-aliases-to-delete :initarg
                         :user-aliases-to-delete :initform common-lisp:nil
                         :type (common-lisp:or user-aliases common-lisp:null)
                         :accessor
                         struct-shape-update-user-request-user-aliases-to-delete
                         :shape "UserAliases" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (user-aliases-to-update :initarg
                         :user-aliases-to-update :initform common-lisp:nil
                         :type (common-lisp:or user-aliases common-lisp:null)
                         :accessor
                         struct-shape-update-user-request-user-aliases-to-update
                         :shape "UserAliases" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (user-id :initarg :user-id :initform
                         (common-lisp:error ":userid is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-update-user-request-user-id :shape
                         "String" :location "uri" :location-name "userId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-user-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-user-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-user-request 'make-update-user-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-user-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-user-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'user-aliases-to-delete))
      (common-lisp:list
       (common-lisp:cons "userAliasesToDelete"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'user-aliases-to-update))
      (common-lisp:list
       (common-lisp:cons "userAliasesToUpdate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-user-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-user-response common-lisp:nil
                       ((user-aliases-added :initarg :user-aliases-added
                         :initform common-lisp:nil :type
                         (common-lisp:or user-aliases common-lisp:null)
                         :accessor
                         struct-shape-update-user-response-user-aliases-added
                         :shape "UserAliases" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (user-aliases-deleted :initarg :user-aliases-deleted
                         :initform common-lisp:nil :type
                         (common-lisp:or user-aliases common-lisp:null)
                         :accessor
                         struct-shape-update-user-response-user-aliases-deleted
                         :shape "UserAliases" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (user-aliases-updated :initarg :user-aliases-updated
                         :initform common-lisp:nil :type
                         (common-lisp:or user-aliases common-lisp:null)
                         :accessor
                         struct-shape-update-user-response-user-aliases-updated
                         :shape "UserAliases" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-user-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-user-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-user-response 'make-update-user-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-user-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-user-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-aliases-added))
      (common-lisp:list
       (common-lisp:cons "userAliasesAdded"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'user-aliases-deleted))
      (common-lisp:list
       (common-lisp:cons "userAliasesDeleted"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'user-aliases-updated))
      (common-lisp:list
       (common-lisp:cons "userAliasesUpdated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-user-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-web-experience-request common-lisp:nil
                       ((application-id :initarg :application-id :initform
                         (common-lisp:error ":applicationid is required") :type
                         (common-lisp:or application-id common-lisp:null)
                         :accessor
                         struct-shape-update-web-experience-request-application-id
                         :shape "ApplicationId" :location "uri" :location-name
                         "applicationId")
                        (authentication-configuration :initarg
                         :authentication-configuration :initform
                         common-lisp:nil :type
                         (common-lisp:or web-experience-auth-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-web-experience-request-authentication-configuration
                         :shape "WebExperienceAuthConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (sample-prompts-control-mode :initarg
                         :sample-prompts-control-mode :initform common-lisp:nil
                         :type
                         (common-lisp:or
                          web-experience-sample-prompts-control-mode
                          common-lisp:null)
                         :accessor
                         struct-shape-update-web-experience-request-sample-prompts-control-mode
                         :shape "WebExperienceSamplePromptsControlMode"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (subtitle :initarg :subtitle :initform common-lisp:nil
                         :type
                         (common-lisp:or web-experience-subtitle
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-web-experience-request-subtitle
                         :shape "WebExperienceSubtitle" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (title :initarg :title :initform common-lisp:nil :type
                         (common-lisp:or web-experience-title common-lisp:null)
                         :accessor
                         struct-shape-update-web-experience-request-title
                         :shape "WebExperienceTitle" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (web-experience-id :initarg :web-experience-id
                         :initform
                         (common-lisp:error ":webexperienceid is required")
                         :type
                         (common-lisp:or web-experience-id common-lisp:null)
                         :accessor
                         struct-shape-update-web-experience-request-web-experience-id
                         :shape "WebExperienceId" :location "uri"
                         :location-name "webExperienceId")
                        (welcome-message :initarg :welcome-message :initform
                         common-lisp:nil :type
                         (common-lisp:or web-experience-welcome-message
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-web-experience-request-welcome-message
                         :shape "WebExperienceWelcomeMessage" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-web-experience-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-web-experience-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-web-experience-request
                    'make-update-web-experience-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-web-experience-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-web-experience-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'authentication-configuration))
      (common-lisp:list
       (common-lisp:cons "authenticationConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'sample-prompts-control-mode))
      (common-lisp:list
       (common-lisp:cons "samplePromptsControlMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subtitle))
      (common-lisp:list
       (common-lisp:cons "subtitle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'title))
      (common-lisp:list
       (common-lisp:cons "title"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'welcome-message))
      (common-lisp:list
       (common-lisp:cons "welcomeMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-web-experience-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-web-experience-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-web-experience-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-web-experience-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-web-experience-response
                    'make-update-web-experience-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-web-experience-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-web-experience-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-web-experience-response))
   common-lisp:nil))
(common-lisp:deftype url () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass user-alias common-lisp:nil
                       ((data-source-id :initarg :data-source-id :initform
                         common-lisp:nil :type
                         (common-lisp:or data-source-id common-lisp:null)
                         :accessor struct-shape-user-alias-data-source-id
                         :shape "DataSourceId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (index-id :initarg :index-id :initform common-lisp:nil
                         :type (common-lisp:or index-id common-lisp:null)
                         :accessor struct-shape-user-alias-index-id :shape
                         "IndexId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (user-id :initarg :user-id :initform
                         (common-lisp:error ":userid is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-user-alias-user-id :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-user-alias
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'user-alias
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'user-alias 'make-user-alias))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input user-alias))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input user-alias))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-source-id))
      (common-lisp:list
       (common-lisp:cons "dataSourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'index-id))
      (common-lisp:list
       (common-lisp:cons "indexId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-id))
      (common-lisp:list
       (common-lisp:cons "userId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input user-alias))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype user-aliases () '(trivial-types:proper-list user-alias))
 (common-lisp:defun make-user-aliases
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list user-alias))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype user-groups () '(trivial-types:proper-list string))
 (common-lisp:defun make-user-groups
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype user-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype user-ids () '(trivial-types:proper-list string))
 (common-lisp:defun make-user-ids
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype user-message () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass users-and-groups common-lisp:nil
                       ((user-groups :initarg :user-groups :initform
                         common-lisp:nil :type
                         (common-lisp:or user-groups common-lisp:null)
                         :accessor struct-shape-users-and-groups-user-groups
                         :shape "UserGroups" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (user-ids :initarg :user-ids :initform common-lisp:nil
                         :type (common-lisp:or user-ids common-lisp:null)
                         :accessor struct-shape-users-and-groups-user-ids
                         :shape "UserIds" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-users-and-groups
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'users-and-groups
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'users-and-groups 'make-users-and-groups))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input users-and-groups))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input users-and-groups))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-groups))
      (common-lisp:list
       (common-lisp:cons "userGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-ids))
      (common-lisp:list
       (common-lisp:cons "userIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input users-and-groups))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition validation-exception
     (qbusiness-error)
     ((fields :initarg :fields :initform common-lisp:nil :reader
       validation-exception-fields)
      (message :initarg :message :initform common-lisp:nil :reader
       validation-exception-message)
      (reason :initarg :reason :initform common-lisp:nil :reader
       validation-exception-reason)))
 (common-lisp:export
  (common-lisp:list 'validation-exception 'validation-exception-fields
                    'validation-exception-message
                    'validation-exception-reason)))
(common-lisp:progn
 (common-lisp:defclass validation-exception-field common-lisp:nil
                       ((message :initarg :message :initform
                         (common-lisp:error ":message is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-validation-exception-field-message :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-validation-exception-field-name :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-validation-exception-field
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'validation-exception-field
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'validation-exception-field
                    'make-validation-exception-field))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          validation-exception-field))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          validation-exception-field))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          validation-exception-field))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype validation-exception-fields ()
   '(trivial-types:proper-list validation-exception-field))
 (common-lisp:defun make-validation-exception-fields
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            validation-exception-field))
   aws-sdk/generator/shape::members))
(common-lisp:deftype validation-exception-reason () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass web-experience common-lisp:nil
                       ((created-at :initarg :created-at :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-web-experience-created-at :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (default-endpoint :initarg :default-endpoint :initform
                         common-lisp:nil :type
                         (common-lisp:or url common-lisp:null) :accessor
                         struct-shape-web-experience-default-endpoint :shape
                         "Url" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or web-experience-status
                                         common-lisp:null)
                         :accessor struct-shape-web-experience-status :shape
                         "WebExperienceStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (updated-at :initarg :updated-at :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-web-experience-updated-at :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (web-experience-id :initarg :web-experience-id
                         :initform common-lisp:nil :type
                         (common-lisp:or web-experience-id common-lisp:null)
                         :accessor
                         struct-shape-web-experience-web-experience-id :shape
                         "WebExperienceId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-web-experience
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'web-experience
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'web-experience 'make-web-experience))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input web-experience))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input web-experience))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-endpoint))
      (common-lisp:list
       (common-lisp:cons "defaultEndpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'web-experience-id))
      (common-lisp:list
       (common-lisp:cons "webExperienceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input web-experience))
   common-lisp:nil))
(common-lisp:deftype web-experience-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass web-experience-auth-configuration common-lisp:nil
                       ((saml-configuration :initarg :saml-configuration
                         :initform common-lisp:nil :type
                         (common-lisp:or saml-configuration common-lisp:null)
                         :accessor
                         struct-shape-web-experience-auth-configuration-saml-configuration
                         :shape "SamlConfiguration" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-web-experience-auth-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'web-experience-auth-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'web-experience-auth-configuration
                    'make-web-experience-auth-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          web-experience-auth-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          web-experience-auth-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'saml-configuration))
      (common-lisp:list
       (common-lisp:cons "samlConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          web-experience-auth-configuration))
   common-lisp:nil))
(common-lisp:deftype web-experience-id () 'common-lisp:string)
(common-lisp:deftype web-experience-sample-prompts-control-mode ()
  'common-lisp:string)
(common-lisp:deftype web-experience-status () 'common-lisp:string)
(common-lisp:deftype web-experience-subtitle () 'common-lisp:string)
(common-lisp:deftype web-experience-title () 'common-lisp:string)
(common-lisp:deftype web-experience-welcome-message () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype web-experiences ()
   '(trivial-types:proper-list web-experience))
 (common-lisp:defun make-web-experiences
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list web-experience))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defun batch-delete-document
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id data-source-sync-id
                     documents index-id)
   (common-lisp:declare
    (common-lisp:ignorable application-id data-source-sync-id documents
     index-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-batch-delete-document-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'qbusiness-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/applications/~A/indices/~A/documents/delete"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'index-id))))
                                                        "BatchDeleteDocument"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'batch-delete-document))
(common-lisp:progn
 (common-lisp:defun batch-put-document
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id data-source-sync-id
                     documents index-id role-arn)
   (common-lisp:declare
    (common-lisp:ignorable application-id data-source-sync-id documents
     index-id role-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-batch-put-document-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'qbusiness-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/applications/~A/indices/~A/documents"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'index-id))))
                                                        "BatchPutDocument"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'batch-put-document))
(common-lisp:progn
 (common-lisp:defun chat-sync
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id attachments
                     attribute-filter client-token conversation-id
                     parent-message-id user-groups user-id user-message)
   (common-lisp:declare
    (common-lisp:ignorable application-id attachments attribute-filter
     client-token conversation-id parent-message-id user-groups user-id
     user-message))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-chat-sync-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'qbusiness-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/applications/~A/conversations?sync"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))))
                                                        "ChatSync"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'chat-sync))
(common-lisp:progn
 (common-lisp:defun create-application
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key attachments-configuration client-token
                     description display-name encryption-configuration role-arn
                     tags)
   (common-lisp:declare
    (common-lisp:ignorable attachments-configuration client-token description
     display-name encryption-configuration role-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-application-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'qbusiness-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/applications"
                                                        "CreateApplication"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-application))
(common-lisp:progn
 (common-lisp:defun create-index
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id capacity-configuration
                     client-token description display-name tags)
   (common-lisp:declare
    (common-lisp:ignorable application-id capacity-configuration client-token
     description display-name tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-index-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'qbusiness-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/applications/~A/indices"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))))
                                                        "CreateIndex"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-index))
(common-lisp:progn
 (common-lisp:defun create-plugin
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id auth-configuration
                     client-token display-name server-url tags type)
   (common-lisp:declare
    (common-lisp:ignorable application-id auth-configuration client-token
     display-name server-url tags type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-plugin-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'qbusiness-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/applications/~A/plugins"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))))
                                                        "CreatePlugin"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-plugin))
(common-lisp:progn
 (common-lisp:defun create-retriever
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id client-token configuration
                     display-name role-arn tags type)
   (common-lisp:declare
    (common-lisp:ignorable application-id client-token configuration
     display-name role-arn tags type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-retriever-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'qbusiness-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/applications/~A/retrievers"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))))
                                                        "CreateRetriever"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-retriever))
(common-lisp:progn
 (common-lisp:defun create-user
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id client-token user-aliases
                     user-id)
   (common-lisp:declare
    (common-lisp:ignorable application-id client-token user-aliases user-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-user-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'qbusiness-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/applications/~A/users"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))))
                                                        "CreateUser"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-user))
(common-lisp:progn
 (common-lisp:defun create-web-experience
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id client-token
                     sample-prompts-control-mode subtitle tags title
                     welcome-message)
   (common-lisp:declare
    (common-lisp:ignorable application-id client-token
     sample-prompts-control-mode subtitle tags title welcome-message))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-web-experience-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'qbusiness-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/applications/~A/experiences"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))))
                                                        "CreateWebExperience"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-web-experience))
(common-lisp:progn
 (common-lisp:defun delete-application
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id)
   (common-lisp:declare (common-lisp:ignorable application-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-application-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'qbusiness-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/applications/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))))
                                                        "DeleteApplication"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-application))
(common-lisp:progn
 (common-lisp:defun delete-chat-controls-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id)
   (common-lisp:declare (common-lisp:ignorable application-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-chat-controls-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'qbusiness-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/applications/~A/chatcontrols"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))))
                                                        "DeleteChatControlsConfiguration"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-chat-controls-configuration))
(common-lisp:progn
 (common-lisp:defun delete-conversation
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id conversation-id user-id)
   (common-lisp:declare
    (common-lisp:ignorable application-id conversation-id user-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-conversation-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'qbusiness-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/applications/~A/conversations/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'conversation-id))))
                                                        "DeleteConversation"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-conversation))
(common-lisp:progn
 (common-lisp:defun delete-data-source
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id data-source-id index-id)
   (common-lisp:declare
    (common-lisp:ignorable application-id data-source-id index-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-data-source-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'qbusiness-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/applications/~A/indices/~A/datasources/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'index-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'data-source-id))))
                                                        "DeleteDataSource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-data-source))
(common-lisp:progn
 (common-lisp:defun delete-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id data-source-id group-name
                     index-id)
   (common-lisp:declare
    (common-lisp:ignorable application-id data-source-id group-name index-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-group-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'qbusiness-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/applications/~A/indices/~A/groups/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'index-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'group-name))))
                                                        "DeleteGroup"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-group))
(common-lisp:progn
 (common-lisp:defun delete-index
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id index-id)
   (common-lisp:declare (common-lisp:ignorable application-id index-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-index-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'qbusiness-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/applications/~A/indices/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'index-id))))
                                                        "DeleteIndex"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-index))
(common-lisp:progn
 (common-lisp:defun delete-plugin
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id plugin-id)
   (common-lisp:declare (common-lisp:ignorable application-id plugin-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-plugin-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'qbusiness-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/applications/~A/plugins/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'plugin-id))))
                                                        "DeletePlugin"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-plugin))
(common-lisp:progn
 (common-lisp:defun delete-retriever
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id retriever-id)
   (common-lisp:declare (common-lisp:ignorable application-id retriever-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-retriever-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'qbusiness-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/applications/~A/retrievers/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'retriever-id))))
                                                        "DeleteRetriever"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-retriever))
(common-lisp:progn
 (common-lisp:defun delete-user
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id user-id)
   (common-lisp:declare (common-lisp:ignorable application-id user-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-user-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'qbusiness-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/applications/~A/users/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'user-id))))
                                                        "DeleteUser"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-user))
(common-lisp:progn
 (common-lisp:defun delete-web-experience
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id web-experience-id)
   (common-lisp:declare
    (common-lisp:ignorable application-id web-experience-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-web-experience-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'qbusiness-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/applications/~A/experiences/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'web-experience-id))))
                                                        "DeleteWebExperience"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-web-experience))
(common-lisp:progn
 (common-lisp:defun get-application
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id)
   (common-lisp:declare (common-lisp:ignorable application-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-application-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'qbusiness-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/applications/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))))
                                                        "GetApplication"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-application))
(common-lisp:progn
 (common-lisp:defun get-chat-controls-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable application-id max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-chat-controls-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'qbusiness-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/applications/~A/chatcontrols"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))))
                                                        "GetChatControlsConfiguration"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-chat-controls-configuration))
(common-lisp:progn
 (common-lisp:defun get-data-source
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id data-source-id index-id)
   (common-lisp:declare
    (common-lisp:ignorable application-id data-source-id index-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-data-source-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'qbusiness-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/applications/~A/indices/~A/datasources/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'index-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'data-source-id))))
                                                        "GetDataSource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-data-source))
(common-lisp:progn
 (common-lisp:defun get-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id data-source-id group-name
                     index-id)
   (common-lisp:declare
    (common-lisp:ignorable application-id data-source-id group-name index-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-group-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'qbusiness-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/applications/~A/indices/~A/groups/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'index-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'group-name))))
                                                        "GetGroup"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-group))
(common-lisp:progn
 (common-lisp:defun get-index
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id index-id)
   (common-lisp:declare (common-lisp:ignorable application-id index-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-index-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'qbusiness-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/applications/~A/indices/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'index-id))))
                                                        "GetIndex"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-index))
(common-lisp:progn
 (common-lisp:defun get-plugin
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id plugin-id)
   (common-lisp:declare (common-lisp:ignorable application-id plugin-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-plugin-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'qbusiness-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/applications/~A/plugins/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'plugin-id))))
                                                        "GetPlugin"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-plugin))
(common-lisp:progn
 (common-lisp:defun get-retriever
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id retriever-id)
   (common-lisp:declare (common-lisp:ignorable application-id retriever-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-retriever-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'qbusiness-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/applications/~A/retrievers/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'retriever-id))))
                                                        "GetRetriever"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-retriever))
(common-lisp:progn
 (common-lisp:defun get-user
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id user-id)
   (common-lisp:declare (common-lisp:ignorable application-id user-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-user-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'qbusiness-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/applications/~A/users/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'user-id))))
                                                        "GetUser"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-user))
(common-lisp:progn
 (common-lisp:defun get-web-experience
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id web-experience-id)
   (common-lisp:declare
    (common-lisp:ignorable application-id web-experience-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-web-experience-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'qbusiness-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/applications/~A/experiences/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'web-experience-id))))
                                                        "GetWebExperience"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-web-experience))
(common-lisp:progn
 (common-lisp:defun list-applications
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-applications-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'qbusiness-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" "/applications"
                                                        "ListApplications"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-applications))
(common-lisp:progn
 (common-lisp:defun list-conversations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id max-results next-token
                     user-id)
   (common-lisp:declare
    (common-lisp:ignorable application-id max-results next-token user-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-conversations-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'qbusiness-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/applications/~A/conversations"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))))
                                                        "ListConversations"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-conversations))
(common-lisp:progn
 (common-lisp:defun list-data-source-sync-jobs
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id data-source-id end-time
                     index-id max-results next-token start-time status-filter)
   (common-lisp:declare
    (common-lisp:ignorable application-id data-source-id end-time index-id
     max-results next-token start-time status-filter))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-data-source-sync-jobs-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'qbusiness-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/applications/~A/indices/~A/datasources/~A/syncjobs"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'index-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'data-source-id))))
                                                        "ListDataSourceSyncJobs"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-data-source-sync-jobs))
(common-lisp:progn
 (common-lisp:defun list-data-sources
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id index-id max-results
                     next-token)
   (common-lisp:declare
    (common-lisp:ignorable application-id index-id max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-data-sources-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'qbusiness-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/applications/~A/indices/~A/datasources"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'index-id))))
                                                        "ListDataSources"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-data-sources))
(common-lisp:progn
 (common-lisp:defun list-documents
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id data-source-ids index-id
                     max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable application-id data-source-ids index-id max-results
     next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-documents-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'qbusiness-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/applications/~A/index/~A/documents"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'index-id))))
                                                        "ListDocuments"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-documents))
(common-lisp:progn
 (common-lisp:defun list-groups
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id data-source-id index-id
                     max-results next-token updated-earlier-than)
   (common-lisp:declare
    (common-lisp:ignorable application-id data-source-id index-id max-results
     next-token updated-earlier-than))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-groups-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'qbusiness-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/applications/~A/indices/~A/groups"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'index-id))))
                                                        "ListGroups"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-groups))
(common-lisp:progn
 (common-lisp:defun list-indices
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable application-id max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-indices-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'qbusiness-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/applications/~A/indices"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))))
                                                        "ListIndices"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-indices))
(common-lisp:progn
 (common-lisp:defun list-messages
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id conversation-id
                     max-results next-token user-id)
   (common-lisp:declare
    (common-lisp:ignorable application-id conversation-id max-results
     next-token user-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-messages-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'qbusiness-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/applications/~A/conversations/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'conversation-id))))
                                                        "ListMessages"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-messages))
(common-lisp:progn
 (common-lisp:defun list-plugins
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable application-id max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-plugins-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'qbusiness-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/applications/~A/plugins"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))))
                                                        "ListPlugins"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-plugins))
(common-lisp:progn
 (common-lisp:defun list-retrievers
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable application-id max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-retrievers-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'qbusiness-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/applications/~A/retrievers"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))))
                                                        "ListRetrievers"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-retrievers))
(common-lisp:progn
 (common-lisp:defun list-tags-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn)
   (common-lisp:declare (common-lisp:ignorable resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-for-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'qbusiness-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "ListTagsForResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-tags-for-resource))
(common-lisp:progn
 (common-lisp:defun list-web-experiences
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable application-id max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-web-experiences-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'qbusiness-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/applications/~A/experiences"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))))
                                                        "ListWebExperiences"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-web-experiences))
(common-lisp:progn
 (common-lisp:defun put-feedback
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id conversation-id
                     message-copied-at message-id message-usefulness user-id)
   (common-lisp:declare
    (common-lisp:ignorable application-id conversation-id message-copied-at
     message-id message-usefulness user-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-feedback-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'qbusiness-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/applications/~A/conversations/~A/messages/~A/feedback"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'conversation-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'message-id))))
                                                        "PutFeedback"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'put-feedback))
(common-lisp:progn
 (common-lisp:defun put-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id data-source-id
                     group-members group-name index-id type)
   (common-lisp:declare
    (common-lisp:ignorable application-id data-source-id group-members
     group-name index-id type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-group-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'qbusiness-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/applications/~A/indices/~A/groups"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'index-id))))
                                                        "PutGroup"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'put-group))
(common-lisp:progn
 (common-lisp:defun start-data-source-sync-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id data-source-id index-id)
   (common-lisp:declare
    (common-lisp:ignorable application-id data-source-id index-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-start-data-source-sync-job-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'qbusiness-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/applications/~A/indices/~A/datasources/~A/startsync"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'index-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'data-source-id))))
                                                        "StartDataSourceSyncJob"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'start-data-source-sync-job))
(common-lisp:progn
 (common-lisp:defun stop-data-source-sync-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id data-source-id index-id)
   (common-lisp:declare
    (common-lisp:ignorable application-id data-source-id index-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-stop-data-source-sync-job-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'qbusiness-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/applications/~A/indices/~A/datasources/~A/stopsync"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'index-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'data-source-id))))
                                                        "StopDataSourceSyncJob"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'stop-data-source-sync-job))
(common-lisp:progn
 (common-lisp:defun tag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tags)
   (common-lisp:declare (common-lisp:ignorable resource-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'qbusiness-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "TagResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'tag-resource))
(common-lisp:progn
 (common-lisp:defun untag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tag-keys)
   (common-lisp:declare (common-lisp:ignorable resource-arn tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'qbusiness-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "UntagResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'untag-resource))
(common-lisp:progn
 (common-lisp:defun update-application
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id attachments-configuration
                     description display-name role-arn)
   (common-lisp:declare
    (common-lisp:ignorable application-id attachments-configuration description
     display-name role-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-application-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'qbusiness-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/applications/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))))
                                                        "UpdateApplication"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-application))
(common-lisp:progn
 (common-lisp:defun update-chat-controls-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id
                     blocked-phrases-configuration-update client-token
                     response-scope topic-configurations-to-create-or-update
                     topic-configurations-to-delete)
   (common-lisp:declare
    (common-lisp:ignorable application-id blocked-phrases-configuration-update
     client-token response-scope topic-configurations-to-create-or-update
     topic-configurations-to-delete))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-chat-controls-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'qbusiness-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/applications/~A/chatcontrols"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))))
                                                        "UpdateChatControlsConfiguration"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-chat-controls-configuration))
(common-lisp:progn
 (common-lisp:defun update-data-source
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id data-source-id description
                     display-name document-enrichment-configuration index-id
                     role-arn sync-schedule vpc-configuration)
   (common-lisp:declare
    (common-lisp:ignorable application-id data-source-id description
     display-name document-enrichment-configuration index-id role-arn
     sync-schedule vpc-configuration))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-data-source-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'qbusiness-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/applications/~A/indices/~A/datasources/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'index-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'data-source-id))))
                                                        "UpdateDataSource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-data-source))
(common-lisp:progn
 (common-lisp:defun update-index
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id capacity-configuration
                     description display-name document-attribute-configurations
                     index-id)
   (common-lisp:declare
    (common-lisp:ignorable application-id capacity-configuration description
     display-name document-attribute-configurations index-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-index-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'qbusiness-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/applications/~A/indices/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'index-id))))
                                                        "UpdateIndex"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-index))
(common-lisp:progn
 (common-lisp:defun update-plugin
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id auth-configuration
                     display-name plugin-id server-url state)
   (common-lisp:declare
    (common-lisp:ignorable application-id auth-configuration display-name
     plugin-id server-url state))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-plugin-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'qbusiness-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/applications/~A/plugins/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'plugin-id))))
                                                        "UpdatePlugin"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-plugin))
(common-lisp:progn
 (common-lisp:defun update-retriever
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id configuration display-name
                     retriever-id role-arn)
   (common-lisp:declare
    (common-lisp:ignorable application-id configuration display-name
     retriever-id role-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-retriever-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'qbusiness-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/applications/~A/retrievers/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'retriever-id))))
                                                        "UpdateRetriever"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-retriever))
(common-lisp:progn
 (common-lisp:defun update-user
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id user-aliases-to-delete
                     user-aliases-to-update user-id)
   (common-lisp:declare
    (common-lisp:ignorable application-id user-aliases-to-delete
     user-aliases-to-update user-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-user-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'qbusiness-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/applications/~A/users/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'user-id))))
                                                        "UpdateUser"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-user))
(common-lisp:progn
 (common-lisp:defun update-web-experience
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id
                     authentication-configuration sample-prompts-control-mode
                     subtitle title web-experience-id welcome-message)
   (common-lisp:declare
    (common-lisp:ignorable application-id authentication-configuration
     sample-prompts-control-mode subtitle title web-experience-id
     welcome-message))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-web-experience-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'qbusiness-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/applications/~A/experiences/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'web-experience-id))))
                                                        "UpdateWebExperience"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-web-experience))
