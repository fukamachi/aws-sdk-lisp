;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/kafka/api
  (:use)
  (:nicknames #:aws/kafka)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/json-request)
  (:import-from #:aws-sdk/rest-json-request)
  (:import-from #:aws-sdk/rest-xml-request)
  (:import-from #:aws-sdk/query-request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/kafka/api)
(common-lisp:progn
 (common-lisp:define-condition kafka-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'kafka-error))
(common-lisp:progn
 (common-lisp:defclass kafka-request
                       (aws-sdk/generator/service::rest-json-request)
                       common-lisp:nil
                       (:default-initargs :service "kafka" :api-version
                        "2018-11-14" :host-prefix "kafka" :signing-name "kafka"
                        :global-host common-lisp:nil))
 (common-lisp:export 'kafka-request))
(common-lisp:defvar *error-map*
  '(("BadRequestException" . bad-request-exception)
    ("ConflictException" . conflict-exception)
    ("ForbiddenException" . forbidden-exception)
    ("InternalServerErrorException" . internal-server-error-exception)
    ("NotFoundException" . not-found-exception)
    ("ServiceUnavailableException" . service-unavailable-exception)
    ("TooManyRequestsException" . too-many-requests-exception)
    ("UnauthorizedException" . unauthorized-exception)))
(common-lisp:progn
 (common-lisp:defclass amazon-msk-cluster common-lisp:nil
                       ((msk-cluster-arn :initarg :msk-cluster-arn :initform
                         (common-lisp:error ":msk-cluster-arn is required")
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-amazon-msk-cluster-msk-cluster-arn :shape
                         "__string" :location common-lisp:nil :location-name
                         "mskClusterArn"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-amazon-msk-cluster
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'amazon-msk-cluster
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'amazon-msk-cluster 'make-amazon-msk-cluster))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input amazon-msk-cluster))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input amazon-msk-cluster))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'msk-cluster-arn))
      (common-lisp:list
       (common-lisp:cons "MskClusterArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input amazon-msk-cluster))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass batch-associate-scram-secret-request common-lisp:nil
                       ((cluster-arn :initarg :cluster-arn :initform
                         (common-lisp:error ":cluster-arn is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-batch-associate-scram-secret-request-cluster-arn
                         :shape "__string" :location "uri" :location-name
                         "clusterArn")
                        (secret-arn-list :initarg :secret-arn-list :initform
                         (common-lisp:error ":secret-arn-list is required")
                         :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor
                         struct-shape-batch-associate-scram-secret-request-secret-arn-list
                         :shape "__listOf__string" :location common-lisp:nil
                         :location-name "secretArnList"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-batch-associate-scram-secret-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'batch-associate-scram-secret-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'batch-associate-scram-secret-request
                    'make-batch-associate-scram-secret-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-associate-scram-secret-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-associate-scram-secret-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'secret-arn-list))
      (common-lisp:list
       (common-lisp:cons "SecretArnList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-associate-scram-secret-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass batch-associate-scram-secret-response common-lisp:nil
                       ((cluster-arn :initarg :cluster-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-batch-associate-scram-secret-response-cluster-arn
                         :shape "__string" :location common-lisp:nil
                         :location-name "clusterArn")
                        (unprocessed-scram-secrets :initarg
                         :unprocessed-scram-secrets :initform common-lisp:nil
                         :type
                         (common-lisp:or |__listOfUnprocessedScramSecret|
                                         common-lisp:null)
                         :accessor
                         struct-shape-batch-associate-scram-secret-response-unprocessed-scram-secrets
                         :shape "__listOfUnprocessedScramSecret" :location
                         common-lisp:nil :location-name
                         "unprocessedScramSecrets"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-batch-associate-scram-secret-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'batch-associate-scram-secret-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'batch-associate-scram-secret-response
                    'make-batch-associate-scram-secret-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-associate-scram-secret-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-associate-scram-secret-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-arn))
      (common-lisp:list
       (common-lisp:cons "ClusterArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'unprocessed-scram-secrets))
      (common-lisp:list
       (common-lisp:cons "UnprocessedScramSecrets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-associate-scram-secret-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition bad-request-exception
     (kafka-error)
     ((invalid-parameter :initarg :invalid-parameter :initform common-lisp:nil
       :reader bad-request-exception-invalid-parameter)
      (message :initarg :message :initform common-lisp:nil :reader
       bad-request-exception-message)))
 (common-lisp:export
  (common-lisp:list 'bad-request-exception
                    'bad-request-exception-invalid-parameter
                    'bad-request-exception-message)))
(common-lisp:deftype broker-azdistribution () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass broker-ebsvolume-info common-lisp:nil
                       ((kafka-broker-node-id :initarg :kafka-broker-node-id
                         :initform
                         (common-lisp:error
                          ":kafka-broker-node-id is required")
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-broker-ebsvolume-info-kafka-broker-node-id
                         :shape "__string" :location common-lisp:nil
                         :location-name "kafkaBrokerNodeId")
                        (provisioned-throughput :initarg
                         :provisioned-throughput :initform common-lisp:nil
                         :type
                         (common-lisp:or provisioned-throughput
                                         common-lisp:null)
                         :accessor
                         struct-shape-broker-ebsvolume-info-provisioned-throughput
                         :shape "ProvisionedThroughput" :location
                         common-lisp:nil :location-name
                         "provisionedThroughput")
                        (volume-size-gb :initarg :volume-size-gb :initform
                         common-lisp:nil :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor
                         struct-shape-broker-ebsvolume-info-volume-size-gb
                         :shape "__integer" :location common-lisp:nil
                         :location-name "volumeSizeGB"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-broker-ebsvolume-info
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'broker-ebsvolume-info
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'broker-ebsvolume-info 'make-broker-ebsvolume-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          broker-ebsvolume-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          broker-ebsvolume-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'kafka-broker-node-id))
      (common-lisp:list
       (common-lisp:cons "KafkaBrokerNodeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'provisioned-throughput))
      (common-lisp:list
       (common-lisp:cons "ProvisionedThroughput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'volume-size-gb))
      (common-lisp:list
       (common-lisp:cons "VolumeSizeGB"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          broker-ebsvolume-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass broker-logs common-lisp:nil
                       ((cloud-watch-logs :initarg :cloud-watch-logs :initform
                         common-lisp:nil :type
                         (common-lisp:or cloud-watch-logs common-lisp:null)
                         :accessor struct-shape-broker-logs-cloud-watch-logs
                         :shape "CloudWatchLogs" :location common-lisp:nil
                         :location-name "cloudWatchLogs")
                        (firehose :initarg :firehose :initform common-lisp:nil
                         :type (common-lisp:or firehose common-lisp:null)
                         :accessor struct-shape-broker-logs-firehose :shape
                         "Firehose" :location common-lisp:nil :location-name
                         "firehose")
                        (s3 :initarg :s3 :initform common-lisp:nil :type
                         (common-lisp:or s3 common-lisp:null) :accessor
                         struct-shape-broker-logs-s3 :shape "S3" :location
                         common-lisp:nil :location-name "s3"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-broker-logs
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'broker-logs
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'broker-logs 'make-broker-logs))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input broker-logs))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input broker-logs))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cloud-watch-logs))
      (common-lisp:list
       (common-lisp:cons "CloudWatchLogs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'firehose))
      (common-lisp:list
       (common-lisp:cons "Firehose"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3))
      (common-lisp:list
       (common-lisp:cons "S3"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input broker-logs))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass broker-node-group-info common-lisp:nil
                       ((broker-azdistribution :initarg :broker-azdistribution
                         :initform common-lisp:nil :type
                         (common-lisp:or broker-azdistribution
                                         common-lisp:null)
                         :accessor
                         struct-shape-broker-node-group-info-broker-azdistribution
                         :shape "BrokerAZDistribution" :location
                         common-lisp:nil :location-name "brokerAZDistribution")
                        (client-subnets :initarg :client-subnets :initform
                         (common-lisp:error ":client-subnets is required")
                         :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor
                         struct-shape-broker-node-group-info-client-subnets
                         :shape "__listOf__string" :location common-lisp:nil
                         :location-name "clientSubnets")
                        (instance-type :initarg :instance-type :initform
                         (common-lisp:error ":instance-type is required") :type
                         (common-lisp:or |__stringMin5Max32| common-lisp:null)
                         :accessor
                         struct-shape-broker-node-group-info-instance-type
                         :shape "__stringMin5Max32" :location common-lisp:nil
                         :location-name "instanceType")
                        (security-groups :initarg :security-groups :initform
                         common-lisp:nil :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor
                         struct-shape-broker-node-group-info-security-groups
                         :shape "__listOf__string" :location common-lisp:nil
                         :location-name "securityGroups")
                        (storage-info :initarg :storage-info :initform
                         common-lisp:nil :type
                         (common-lisp:or storage-info common-lisp:null)
                         :accessor
                         struct-shape-broker-node-group-info-storage-info
                         :shape "StorageInfo" :location common-lisp:nil
                         :location-name "storageInfo")
                        (connectivity-info :initarg :connectivity-info
                         :initform common-lisp:nil :type
                         (common-lisp:or connectivity-info common-lisp:null)
                         :accessor
                         struct-shape-broker-node-group-info-connectivity-info
                         :shape "ConnectivityInfo" :location common-lisp:nil
                         :location-name "connectivityInfo")
                        (zone-ids :initarg :zone-ids :initform common-lisp:nil
                         :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor struct-shape-broker-node-group-info-zone-ids
                         :shape "__listOf__string" :location common-lisp:nil
                         :location-name "zoneIds"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-broker-node-group-info
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'broker-node-group-info
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'broker-node-group-info 'make-broker-node-group-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          broker-node-group-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          broker-node-group-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'broker-azdistribution))
      (common-lisp:list
       (common-lisp:cons "BrokerAZDistribution"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-subnets))
      (common-lisp:list
       (common-lisp:cons "ClientSubnets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-type))
      (common-lisp:list
       (common-lisp:cons "InstanceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-groups))
      (common-lisp:list
       (common-lisp:cons "SecurityGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-info))
      (common-lisp:list
       (common-lisp:cons "StorageInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connectivity-info))
      (common-lisp:list
       (common-lisp:cons "ConnectivityInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'zone-ids))
      (common-lisp:list
       (common-lisp:cons "ZoneIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          broker-node-group-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass broker-node-info common-lisp:nil
                       ((attached-eniid :initarg :attached-eniid :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-broker-node-info-attached-eniid :shape
                         "__string" :location common-lisp:nil :location-name
                         "attachedENIId")
                        (broker-id :initarg :broker-id :initform
                         common-lisp:nil :type
                         (common-lisp:or |__double| common-lisp:null) :accessor
                         struct-shape-broker-node-info-broker-id :shape
                         "__double" :location common-lisp:nil :location-name
                         "brokerId")
                        (client-subnet :initarg :client-subnet :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-broker-node-info-client-subnet :shape
                         "__string" :location common-lisp:nil :location-name
                         "clientSubnet")
                        (client-vpc-ip-address :initarg :client-vpc-ip-address
                         :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-broker-node-info-client-vpc-ip-address
                         :shape "__string" :location common-lisp:nil
                         :location-name "clientVpcIpAddress")
                        (current-broker-software-info :initarg
                         :current-broker-software-info :initform
                         common-lisp:nil :type
                         (common-lisp:or broker-software-info common-lisp:null)
                         :accessor
                         struct-shape-broker-node-info-current-broker-software-info
                         :shape "BrokerSoftwareInfo" :location common-lisp:nil
                         :location-name "currentBrokerSoftwareInfo")
                        (endpoints :initarg :endpoints :initform
                         common-lisp:nil :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor struct-shape-broker-node-info-endpoints
                         :shape "__listOf__string" :location common-lisp:nil
                         :location-name "endpoints"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-broker-node-info
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'broker-node-info
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'broker-node-info 'make-broker-node-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input broker-node-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input broker-node-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attached-eniid))
      (common-lisp:list
       (common-lisp:cons "AttachedENIId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'broker-id))
      (common-lisp:list
       (common-lisp:cons "BrokerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-subnet))
      (common-lisp:list
       (common-lisp:cons "ClientSubnet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-vpc-ip-address))
      (common-lisp:list
       (common-lisp:cons "ClientVpcIpAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'current-broker-software-info))
      (common-lisp:list
       (common-lisp:cons "CurrentBrokerSoftwareInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoints))
      (common-lisp:list
       (common-lisp:cons "Endpoints"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input broker-node-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass broker-software-info common-lisp:nil
                       ((configuration-arn :initarg :configuration-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-broker-software-info-configuration-arn
                         :shape "__string" :location common-lisp:nil
                         :location-name "configurationArn")
                        (configuration-revision :initarg
                         :configuration-revision :initform common-lisp:nil
                         :type (common-lisp:or |__long| common-lisp:null)
                         :accessor
                         struct-shape-broker-software-info-configuration-revision
                         :shape "__long" :location common-lisp:nil
                         :location-name "configurationRevision")
                        (kafka-version :initarg :kafka-version :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-broker-software-info-kafka-version :shape
                         "__string" :location common-lisp:nil :location-name
                         "kafkaVersion"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-broker-software-info
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'broker-software-info
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'broker-software-info 'make-broker-software-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input broker-software-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input broker-software-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration-arn))
      (common-lisp:list
       (common-lisp:cons "ConfigurationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'configuration-revision))
      (common-lisp:list
       (common-lisp:cons "ConfigurationRevision"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kafka-version))
      (common-lisp:list
       (common-lisp:cons "KafkaVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input broker-software-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass client-authentication common-lisp:nil
                       ((sasl :initarg :sasl :initform common-lisp:nil :type
                         (common-lisp:or sasl common-lisp:null) :accessor
                         struct-shape-client-authentication-sasl :shape "Sasl"
                         :location common-lisp:nil :location-name "sasl")
                        (tls :initarg :tls :initform common-lisp:nil :type
                         (common-lisp:or tls common-lisp:null) :accessor
                         struct-shape-client-authentication-tls :shape "Tls"
                         :location common-lisp:nil :location-name "tls")
                        (unauthenticated :initarg :unauthenticated :initform
                         common-lisp:nil :type
                         (common-lisp:or unauthenticated common-lisp:null)
                         :accessor
                         struct-shape-client-authentication-unauthenticated
                         :shape "Unauthenticated" :location common-lisp:nil
                         :location-name "unauthenticated"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-client-authentication
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'client-authentication
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'client-authentication 'make-client-authentication))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          client-authentication))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          client-authentication))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sasl))
      (common-lisp:list
       (common-lisp:cons "Sasl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tls))
      (common-lisp:list
       (common-lisp:cons "Tls"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'unauthenticated))
      (common-lisp:list
       (common-lisp:cons "Unauthenticated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          client-authentication))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass vpc-connectivity-client-authentication common-lisp:nil
                       ((sasl :initarg :sasl :initform common-lisp:nil :type
                         (common-lisp:or vpc-connectivity-sasl
                                         common-lisp:null)
                         :accessor
                         struct-shape-vpc-connectivity-client-authentication-sasl
                         :shape "VpcConnectivitySasl" :location common-lisp:nil
                         :location-name "sasl")
                        (tls :initarg :tls :initform common-lisp:nil :type
                         (common-lisp:or vpc-connectivity-tls common-lisp:null)
                         :accessor
                         struct-shape-vpc-connectivity-client-authentication-tls
                         :shape "VpcConnectivityTls" :location common-lisp:nil
                         :location-name "tls"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-vpc-connectivity-client-authentication
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'vpc-connectivity-client-authentication
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'vpc-connectivity-client-authentication
                    'make-vpc-connectivity-client-authentication))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          vpc-connectivity-client-authentication))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          vpc-connectivity-client-authentication))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sasl))
      (common-lisp:list
       (common-lisp:cons "Sasl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tls))
      (common-lisp:list
       (common-lisp:cons "Tls"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          vpc-connectivity-client-authentication))
   common-lisp:nil))
(common-lisp:deftype client-broker () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass cloud-watch-logs common-lisp:nil
                       ((enabled :initarg :enabled :initform
                         (common-lisp:error ":enabled is required") :type
                         (common-lisp:or |__boolean| common-lisp:null)
                         :accessor struct-shape-cloud-watch-logs-enabled :shape
                         "__boolean" :location common-lisp:nil :location-name
                         "enabled")
                        (log-group :initarg :log-group :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-cloud-watch-logs-log-group :shape
                         "__string" :location common-lisp:nil :location-name
                         "logGroup"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-cloud-watch-logs
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'cloud-watch-logs
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'cloud-watch-logs 'make-cloud-watch-logs))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input cloud-watch-logs))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input cloud-watch-logs))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "Enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-group))
      (common-lisp:list
       (common-lisp:cons "LogGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input cloud-watch-logs))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass cluster-info common-lisp:nil
                       ((active-operation-arn :initarg :active-operation-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-cluster-info-active-operation-arn :shape
                         "__string" :location common-lisp:nil :location-name
                         "activeOperationArn")
                        (broker-node-group-info :initarg
                         :broker-node-group-info :initform common-lisp:nil
                         :type
                         (common-lisp:or broker-node-group-info
                                         common-lisp:null)
                         :accessor
                         struct-shape-cluster-info-broker-node-group-info
                         :shape "BrokerNodeGroupInfo" :location common-lisp:nil
                         :location-name "brokerNodeGroupInfo")
                        (client-authentication :initarg :client-authentication
                         :initform common-lisp:nil :type
                         (common-lisp:or client-authentication
                                         common-lisp:null)
                         :accessor
                         struct-shape-cluster-info-client-authentication :shape
                         "ClientAuthentication" :location common-lisp:nil
                         :location-name "clientAuthentication")
                        (cluster-arn :initarg :cluster-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-cluster-info-cluster-arn :shape
                         "__string" :location common-lisp:nil :location-name
                         "clusterArn")
                        (cluster-name :initarg :cluster-name :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-cluster-info-cluster-name :shape
                         "__string" :location common-lisp:nil :location-name
                         "clusterName")
                        (creation-time :initarg :creation-time :initform
                         common-lisp:nil :type
                         (common-lisp:or |__timestampIso8601| common-lisp:null)
                         :accessor struct-shape-cluster-info-creation-time
                         :shape "__timestampIso8601" :location common-lisp:nil
                         :location-name "creationTime")
                        (current-broker-software-info :initarg
                         :current-broker-software-info :initform
                         common-lisp:nil :type
                         (common-lisp:or broker-software-info common-lisp:null)
                         :accessor
                         struct-shape-cluster-info-current-broker-software-info
                         :shape "BrokerSoftwareInfo" :location common-lisp:nil
                         :location-name "currentBrokerSoftwareInfo")
                        (logging-info :initarg :logging-info :initform
                         common-lisp:nil :type
                         (common-lisp:or logging-info common-lisp:null)
                         :accessor struct-shape-cluster-info-logging-info
                         :shape "LoggingInfo" :location common-lisp:nil
                         :location-name "loggingInfo")
                        (current-version :initarg :current-version :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-cluster-info-current-version :shape
                         "__string" :location common-lisp:nil :location-name
                         "currentVersion")
                        (encryption-info :initarg :encryption-info :initform
                         common-lisp:nil :type
                         (common-lisp:or encryption-info common-lisp:null)
                         :accessor struct-shape-cluster-info-encryption-info
                         :shape "EncryptionInfo" :location common-lisp:nil
                         :location-name "encryptionInfo")
                        (enhanced-monitoring :initarg :enhanced-monitoring
                         :initform common-lisp:nil :type
                         (common-lisp:or enhanced-monitoring common-lisp:null)
                         :accessor
                         struct-shape-cluster-info-enhanced-monitoring :shape
                         "EnhancedMonitoring" :location common-lisp:nil
                         :location-name "enhancedMonitoring")
                        (number-of-broker-nodes :initarg
                         :number-of-broker-nodes :initform common-lisp:nil
                         :type (common-lisp:or |__integer| common-lisp:null)
                         :accessor
                         struct-shape-cluster-info-number-of-broker-nodes
                         :shape "__integer" :location common-lisp:nil
                         :location-name "numberOfBrokerNodes")
                        (open-monitoring :initarg :open-monitoring :initform
                         common-lisp:nil :type
                         (common-lisp:or open-monitoring common-lisp:null)
                         :accessor struct-shape-cluster-info-open-monitoring
                         :shape "OpenMonitoring" :location common-lisp:nil
                         :location-name "openMonitoring")
                        (state :initarg :state :initform common-lisp:nil :type
                         (common-lisp:or cluster-state common-lisp:null)
                         :accessor struct-shape-cluster-info-state :shape
                         "ClusterState" :location common-lisp:nil
                         :location-name "state")
                        (state-info :initarg :state-info :initform
                         common-lisp:nil :type
                         (common-lisp:or state-info common-lisp:null) :accessor
                         struct-shape-cluster-info-state-info :shape
                         "StateInfo" :location common-lisp:nil :location-name
                         "stateInfo")
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or |__mapOf__string| common-lisp:null)
                         :accessor struct-shape-cluster-info-tags :shape
                         "__mapOf__string" :location common-lisp:nil
                         :location-name "tags")
                        (zookeeper-connect-string :initarg
                         :zookeeper-connect-string :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-cluster-info-zookeeper-connect-string
                         :shape "__string" :location common-lisp:nil
                         :location-name "zookeeperConnectString")
                        (zookeeper-connect-string-tls :initarg
                         :zookeeper-connect-string-tls :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-cluster-info-zookeeper-connect-string-tls
                         :shape "__string" :location common-lisp:nil
                         :location-name "zookeeperConnectStringTls")
                        (storage-mode :initarg :storage-mode :initform
                         common-lisp:nil :type
                         (common-lisp:or storage-mode common-lisp:null)
                         :accessor struct-shape-cluster-info-storage-mode
                         :shape "StorageMode" :location common-lisp:nil
                         :location-name "storageMode")
                        (customer-action-status :initarg
                         :customer-action-status :initform common-lisp:nil
                         :type
                         (common-lisp:or customer-action-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-cluster-info-customer-action-status
                         :shape "CustomerActionStatus" :location
                         common-lisp:nil :location-name
                         "customerActionStatus"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-cluster-info
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'cluster-info
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'cluster-info 'make-cluster-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input cluster-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input cluster-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'active-operation-arn))
      (common-lisp:list
       (common-lisp:cons "ActiveOperationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'broker-node-group-info))
      (common-lisp:list
       (common-lisp:cons "BrokerNodeGroupInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-authentication))
      (common-lisp:list
       (common-lisp:cons "ClientAuthentication"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-arn))
      (common-lisp:list
       (common-lisp:cons "ClusterArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-name))
      (common-lisp:list
       (common-lisp:cons "ClusterName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'current-broker-software-info))
      (common-lisp:list
       (common-lisp:cons "CurrentBrokerSoftwareInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'logging-info))
      (common-lisp:list
       (common-lisp:cons "LoggingInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'current-version))
      (common-lisp:list
       (common-lisp:cons "CurrentVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encryption-info))
      (common-lisp:list
       (common-lisp:cons "EncryptionInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enhanced-monitoring))
      (common-lisp:list
       (common-lisp:cons "EnhancedMonitoring"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'number-of-broker-nodes))
      (common-lisp:list
       (common-lisp:cons "NumberOfBrokerNodes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'open-monitoring))
      (common-lisp:list
       (common-lisp:cons "OpenMonitoring"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state-info))
      (common-lisp:list
       (common-lisp:cons "StateInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'zookeeper-connect-string))
      (common-lisp:list
       (common-lisp:cons "ZookeeperConnectString"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'zookeeper-connect-string-tls))
      (common-lisp:list
       (common-lisp:cons "ZookeeperConnectStringTls"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-mode))
      (common-lisp:list
       (common-lisp:cons "StorageMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'customer-action-status))
      (common-lisp:list
       (common-lisp:cons "CustomerActionStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input cluster-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass cluster-operation-info common-lisp:nil
                       ((client-request-id :initarg :client-request-id
                         :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-cluster-operation-info-client-request-id
                         :shape "__string" :location common-lisp:nil
                         :location-name "clientRequestId")
                        (cluster-arn :initarg :cluster-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-cluster-operation-info-cluster-arn :shape
                         "__string" :location common-lisp:nil :location-name
                         "clusterArn")
                        (creation-time :initarg :creation-time :initform
                         common-lisp:nil :type
                         (common-lisp:or |__timestampIso8601| common-lisp:null)
                         :accessor
                         struct-shape-cluster-operation-info-creation-time
                         :shape "__timestampIso8601" :location common-lisp:nil
                         :location-name "creationTime")
                        (end-time :initarg :end-time :initform common-lisp:nil
                         :type
                         (common-lisp:or |__timestampIso8601| common-lisp:null)
                         :accessor struct-shape-cluster-operation-info-end-time
                         :shape "__timestampIso8601" :location common-lisp:nil
                         :location-name "endTime")
                        (error-info :initarg :error-info :initform
                         common-lisp:nil :type
                         (common-lisp:or error-info common-lisp:null) :accessor
                         struct-shape-cluster-operation-info-error-info :shape
                         "ErrorInfo" :location common-lisp:nil :location-name
                         "errorInfo")
                        (operation-steps :initarg :operation-steps :initform
                         common-lisp:nil :type
                         (common-lisp:or |__listOfClusterOperationStep|
                                         common-lisp:null)
                         :accessor
                         struct-shape-cluster-operation-info-operation-steps
                         :shape "__listOfClusterOperationStep" :location
                         common-lisp:nil :location-name "operationSteps")
                        (operation-arn :initarg :operation-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-cluster-operation-info-operation-arn
                         :shape "__string" :location common-lisp:nil
                         :location-name "operationArn")
                        (operation-state :initarg :operation-state :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-cluster-operation-info-operation-state
                         :shape "__string" :location common-lisp:nil
                         :location-name "operationState")
                        (operation-type :initarg :operation-type :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-cluster-operation-info-operation-type
                         :shape "__string" :location common-lisp:nil
                         :location-name "operationType")
                        (source-cluster-info :initarg :source-cluster-info
                         :initform common-lisp:nil :type
                         (common-lisp:or mutable-cluster-info common-lisp:null)
                         :accessor
                         struct-shape-cluster-operation-info-source-cluster-info
                         :shape "MutableClusterInfo" :location common-lisp:nil
                         :location-name "sourceClusterInfo")
                        (target-cluster-info :initarg :target-cluster-info
                         :initform common-lisp:nil :type
                         (common-lisp:or mutable-cluster-info common-lisp:null)
                         :accessor
                         struct-shape-cluster-operation-info-target-cluster-info
                         :shape "MutableClusterInfo" :location common-lisp:nil
                         :location-name "targetClusterInfo")
                        (vpc-connection-info :initarg :vpc-connection-info
                         :initform common-lisp:nil :type
                         (common-lisp:or vpc-connection-info common-lisp:null)
                         :accessor
                         struct-shape-cluster-operation-info-vpc-connection-info
                         :shape "VpcConnectionInfo" :location common-lisp:nil
                         :location-name "vpcConnectionInfo"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-cluster-operation-info
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'cluster-operation-info
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'cluster-operation-info 'make-cluster-operation-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cluster-operation-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cluster-operation-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-request-id))
      (common-lisp:list
       (common-lisp:cons "ClientRequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-arn))
      (common-lisp:list
       (common-lisp:cons "ClusterArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "EndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-info))
      (common-lisp:list
       (common-lisp:cons "ErrorInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operation-steps))
      (common-lisp:list
       (common-lisp:cons "OperationSteps"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operation-arn))
      (common-lisp:list
       (common-lisp:cons "OperationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operation-state))
      (common-lisp:list
       (common-lisp:cons "OperationState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operation-type))
      (common-lisp:list
       (common-lisp:cons "OperationType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-cluster-info))
      (common-lisp:list
       (common-lisp:cons "SourceClusterInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-cluster-info))
      (common-lisp:list
       (common-lisp:cons "TargetClusterInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-connection-info))
      (common-lisp:list
       (common-lisp:cons "VpcConnectionInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cluster-operation-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass cluster-operation-step common-lisp:nil
                       ((step-info :initarg :step-info :initform
                         common-lisp:nil :type
                         (common-lisp:or cluster-operation-step-info
                                         common-lisp:null)
                         :accessor
                         struct-shape-cluster-operation-step-step-info :shape
                         "ClusterOperationStepInfo" :location common-lisp:nil
                         :location-name "stepInfo")
                        (step-name :initarg :step-name :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-cluster-operation-step-step-name :shape
                         "__string" :location common-lisp:nil :location-name
                         "stepName"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-cluster-operation-step
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'cluster-operation-step
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'cluster-operation-step 'make-cluster-operation-step))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cluster-operation-step))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cluster-operation-step))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'step-info))
      (common-lisp:list
       (common-lisp:cons "StepInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'step-name))
      (common-lisp:list
       (common-lisp:cons "StepName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cluster-operation-step))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass cluster-operation-step-info common-lisp:nil
                       ((step-status :initarg :step-status :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-cluster-operation-step-info-step-status
                         :shape "__string" :location common-lisp:nil
                         :location-name "stepStatus"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-cluster-operation-step-info
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'cluster-operation-step-info
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'cluster-operation-step-info
                    'make-cluster-operation-step-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cluster-operation-step-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cluster-operation-step-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'step-status))
      (common-lisp:list
       (common-lisp:cons "StepStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cluster-operation-step-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass cluster-operation-v2 common-lisp:nil
                       ((cluster-arn :initarg :cluster-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-cluster-operation-v2-cluster-arn :shape
                         "__string" :location common-lisp:nil :location-name
                         "clusterArn")
                        (cluster-type :initarg :cluster-type :initform
                         common-lisp:nil :type
                         (common-lisp:or cluster-type common-lisp:null)
                         :accessor
                         struct-shape-cluster-operation-v2-cluster-type :shape
                         "ClusterType" :location common-lisp:nil :location-name
                         "clusterType")
                        (start-time :initarg :start-time :initform
                         common-lisp:nil :type
                         (common-lisp:or |__timestampIso8601| common-lisp:null)
                         :accessor struct-shape-cluster-operation-v2-start-time
                         :shape "__timestampIso8601" :location common-lisp:nil
                         :location-name "startTime")
                        (end-time :initarg :end-time :initform common-lisp:nil
                         :type
                         (common-lisp:or |__timestampIso8601| common-lisp:null)
                         :accessor struct-shape-cluster-operation-v2-end-time
                         :shape "__timestampIso8601" :location common-lisp:nil
                         :location-name "endTime")
                        (operation-arn :initarg :operation-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-cluster-operation-v2-operation-arn :shape
                         "__string" :location common-lisp:nil :location-name
                         "operationArn")
                        (operation-state :initarg :operation-state :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-cluster-operation-v2-operation-state
                         :shape "__string" :location common-lisp:nil
                         :location-name "operationState")
                        (operation-type :initarg :operation-type :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-cluster-operation-v2-operation-type
                         :shape "__string" :location common-lisp:nil
                         :location-name "operationType")
                        (provisioned :initarg :provisioned :initform
                         common-lisp:nil :type
                         (common-lisp:or cluster-operation-v2provisioned
                                         common-lisp:null)
                         :accessor
                         struct-shape-cluster-operation-v2-provisioned :shape
                         "ClusterOperationV2Provisioned" :location
                         common-lisp:nil :location-name "provisioned")
                        (serverless :initarg :serverless :initform
                         common-lisp:nil :type
                         (common-lisp:or cluster-operation-v2serverless
                                         common-lisp:null)
                         :accessor struct-shape-cluster-operation-v2-serverless
                         :shape "ClusterOperationV2Serverless" :location
                         common-lisp:nil :location-name "serverless"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-cluster-operation-v2
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'cluster-operation-v2
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'cluster-operation-v2 'make-cluster-operation-v2))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input cluster-operation-v2))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input cluster-operation-v2))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-arn))
      (common-lisp:list
       (common-lisp:cons "ClusterArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-type))
      (common-lisp:list
       (common-lisp:cons "ClusterType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "StartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "EndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operation-arn))
      (common-lisp:list
       (common-lisp:cons "OperationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operation-state))
      (common-lisp:list
       (common-lisp:cons "OperationState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operation-type))
      (common-lisp:list
       (common-lisp:cons "OperationType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'provisioned))
      (common-lisp:list
       (common-lisp:cons "Provisioned"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'serverless))
      (common-lisp:list
       (common-lisp:cons "Serverless"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input cluster-operation-v2))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass cluster-operation-v2provisioned common-lisp:nil
                       ((operation-steps :initarg :operation-steps :initform
                         common-lisp:nil :type
                         (common-lisp:or |__listOfClusterOperationStep|
                                         common-lisp:null)
                         :accessor
                         struct-shape-cluster-operation-v2provisioned-operation-steps
                         :shape "__listOfClusterOperationStep" :location
                         common-lisp:nil :location-name "operationSteps")
                        (source-cluster-info :initarg :source-cluster-info
                         :initform common-lisp:nil :type
                         (common-lisp:or mutable-cluster-info common-lisp:null)
                         :accessor
                         struct-shape-cluster-operation-v2provisioned-source-cluster-info
                         :shape "MutableClusterInfo" :location common-lisp:nil
                         :location-name "sourceClusterInfo")
                        (target-cluster-info :initarg :target-cluster-info
                         :initform common-lisp:nil :type
                         (common-lisp:or mutable-cluster-info common-lisp:null)
                         :accessor
                         struct-shape-cluster-operation-v2provisioned-target-cluster-info
                         :shape "MutableClusterInfo" :location common-lisp:nil
                         :location-name "targetClusterInfo")
                        (vpc-connection-info :initarg :vpc-connection-info
                         :initform common-lisp:nil :type
                         (common-lisp:or vpc-connection-info common-lisp:null)
                         :accessor
                         struct-shape-cluster-operation-v2provisioned-vpc-connection-info
                         :shape "VpcConnectionInfo" :location common-lisp:nil
                         :location-name "vpcConnectionInfo"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-cluster-operation-v2provisioned
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'cluster-operation-v2provisioned
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'cluster-operation-v2provisioned
                    'make-cluster-operation-v2provisioned))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cluster-operation-v2provisioned))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cluster-operation-v2provisioned))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operation-steps))
      (common-lisp:list
       (common-lisp:cons "OperationSteps"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-cluster-info))
      (common-lisp:list
       (common-lisp:cons "SourceClusterInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-cluster-info))
      (common-lisp:list
       (common-lisp:cons "TargetClusterInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-connection-info))
      (common-lisp:list
       (common-lisp:cons "VpcConnectionInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cluster-operation-v2provisioned))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass cluster-operation-v2serverless common-lisp:nil
                       ((vpc-connection-info :initarg :vpc-connection-info
                         :initform common-lisp:nil :type
                         (common-lisp:or vpc-connection-info-serverless
                                         common-lisp:null)
                         :accessor
                         struct-shape-cluster-operation-v2serverless-vpc-connection-info
                         :shape "VpcConnectionInfoServerless" :location
                         common-lisp:nil :location-name "vpcConnectionInfo"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-cluster-operation-v2serverless
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'cluster-operation-v2serverless
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'cluster-operation-v2serverless
                    'make-cluster-operation-v2serverless))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cluster-operation-v2serverless))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cluster-operation-v2serverless))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-connection-info))
      (common-lisp:list
       (common-lisp:cons "VpcConnectionInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cluster-operation-v2serverless))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass cluster-operation-v2summary common-lisp:nil
                       ((cluster-arn :initarg :cluster-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-cluster-operation-v2summary-cluster-arn
                         :shape "__string" :location common-lisp:nil
                         :location-name "clusterArn")
                        (cluster-type :initarg :cluster-type :initform
                         common-lisp:nil :type
                         (common-lisp:or cluster-type common-lisp:null)
                         :accessor
                         struct-shape-cluster-operation-v2summary-cluster-type
                         :shape "ClusterType" :location common-lisp:nil
                         :location-name "clusterType")
                        (start-time :initarg :start-time :initform
                         common-lisp:nil :type
                         (common-lisp:or |__timestampIso8601| common-lisp:null)
                         :accessor
                         struct-shape-cluster-operation-v2summary-start-time
                         :shape "__timestampIso8601" :location common-lisp:nil
                         :location-name "startTime")
                        (end-time :initarg :end-time :initform common-lisp:nil
                         :type
                         (common-lisp:or |__timestampIso8601| common-lisp:null)
                         :accessor
                         struct-shape-cluster-operation-v2summary-end-time
                         :shape "__timestampIso8601" :location common-lisp:nil
                         :location-name "endTime")
                        (operation-arn :initarg :operation-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-cluster-operation-v2summary-operation-arn
                         :shape "__string" :location common-lisp:nil
                         :location-name "operationArn")
                        (operation-state :initarg :operation-state :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-cluster-operation-v2summary-operation-state
                         :shape "__string" :location common-lisp:nil
                         :location-name "operationState")
                        (operation-type :initarg :operation-type :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-cluster-operation-v2summary-operation-type
                         :shape "__string" :location common-lisp:nil
                         :location-name "operationType"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-cluster-operation-v2summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'cluster-operation-v2summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'cluster-operation-v2summary
                    'make-cluster-operation-v2summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cluster-operation-v2summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cluster-operation-v2summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-arn))
      (common-lisp:list
       (common-lisp:cons "ClusterArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-type))
      (common-lisp:list
       (common-lisp:cons "ClusterType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "StartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "EndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operation-arn))
      (common-lisp:list
       (common-lisp:cons "OperationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operation-state))
      (common-lisp:list
       (common-lisp:cons "OperationState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operation-type))
      (common-lisp:list
       (common-lisp:cons "OperationType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cluster-operation-v2summary))
   common-lisp:nil))
(common-lisp:deftype cluster-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass client-vpc-connection common-lisp:nil
                       ((authentication :initarg :authentication :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-client-vpc-connection-authentication
                         :shape "__string" :location common-lisp:nil
                         :location-name "authentication")
                        (creation-time :initarg :creation-time :initform
                         common-lisp:nil :type
                         (common-lisp:or |__timestampIso8601| common-lisp:null)
                         :accessor
                         struct-shape-client-vpc-connection-creation-time
                         :shape "__timestampIso8601" :location common-lisp:nil
                         :location-name "creationTime")
                        (state :initarg :state :initform common-lisp:nil :type
                         (common-lisp:or vpc-connection-state common-lisp:null)
                         :accessor struct-shape-client-vpc-connection-state
                         :shape "VpcConnectionState" :location common-lisp:nil
                         :location-name "state")
                        (vpc-connection-arn :initarg :vpc-connection-arn
                         :initform
                         (common-lisp:error ":vpc-connection-arn is required")
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-client-vpc-connection-vpc-connection-arn
                         :shape "__string" :location common-lisp:nil
                         :location-name "vpcConnectionArn")
                        (owner :initarg :owner :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-client-vpc-connection-owner :shape
                         "__string" :location common-lisp:nil :location-name
                         "owner"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-client-vpc-connection
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'client-vpc-connection
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'client-vpc-connection 'make-client-vpc-connection))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          client-vpc-connection))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          client-vpc-connection))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'authentication))
      (common-lisp:list
       (common-lisp:cons "Authentication"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-connection-arn))
      (common-lisp:list
       (common-lisp:cons "VpcConnectionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner))
      (common-lisp:list
       (common-lisp:cons "Owner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          client-vpc-connection))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass vpc-connection common-lisp:nil
                       ((vpc-connection-arn :initarg :vpc-connection-arn
                         :initform
                         (common-lisp:error ":vpc-connection-arn is required")
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-vpc-connection-vpc-connection-arn :shape
                         "__string" :location common-lisp:nil :location-name
                         "vpcConnectionArn")
                        (target-cluster-arn :initarg :target-cluster-arn
                         :initform
                         (common-lisp:error ":target-cluster-arn is required")
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-vpc-connection-target-cluster-arn :shape
                         "__string" :location common-lisp:nil :location-name
                         "targetClusterArn")
                        (creation-time :initarg :creation-time :initform
                         common-lisp:nil :type
                         (common-lisp:or |__timestampIso8601| common-lisp:null)
                         :accessor struct-shape-vpc-connection-creation-time
                         :shape "__timestampIso8601" :location common-lisp:nil
                         :location-name "creationTime")
                        (authentication :initarg :authentication :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-vpc-connection-authentication :shape
                         "__string" :location common-lisp:nil :location-name
                         "authentication")
                        (vpc-id :initarg :vpc-id :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor struct-shape-vpc-connection-vpc-id :shape
                         "__string" :location common-lisp:nil :location-name
                         "vpcId")
                        (state :initarg :state :initform common-lisp:nil :type
                         (common-lisp:or vpc-connection-state common-lisp:null)
                         :accessor struct-shape-vpc-connection-state :shape
                         "VpcConnectionState" :location common-lisp:nil
                         :location-name "state"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-vpc-connection
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'vpc-connection
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'vpc-connection 'make-vpc-connection))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input vpc-connection))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input vpc-connection))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-connection-arn))
      (common-lisp:list
       (common-lisp:cons "VpcConnectionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-cluster-arn))
      (common-lisp:list
       (common-lisp:cons "TargetClusterArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'authentication))
      (common-lisp:list
       (common-lisp:cons "Authentication"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-id))
      (common-lisp:list
       (common-lisp:cons "VpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input vpc-connection))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass compatible-kafka-version common-lisp:nil
                       ((source-version :initarg :source-version :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-compatible-kafka-version-source-version
                         :shape "__string" :location common-lisp:nil
                         :location-name "sourceVersion")
                        (target-versions :initarg :target-versions :initform
                         common-lisp:nil :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor
                         struct-shape-compatible-kafka-version-target-versions
                         :shape "__listOf__string" :location common-lisp:nil
                         :location-name "targetVersions"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-compatible-kafka-version
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'compatible-kafka-version
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'compatible-kafka-version 'make-compatible-kafka-version))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          compatible-kafka-version))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          compatible-kafka-version))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-version))
      (common-lisp:list
       (common-lisp:cons "SourceVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-versions))
      (common-lisp:list
       (common-lisp:cons "TargetVersions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          compatible-kafka-version))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass configuration common-lisp:nil
                       ((arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-configuration-arn :shape "__string"
                         :location common-lisp:nil :location-name "arn")
                        (creation-time :initarg :creation-time :initform
                         (common-lisp:error ":creation-time is required") :type
                         (common-lisp:or |__timestampIso8601| common-lisp:null)
                         :accessor struct-shape-configuration-creation-time
                         :shape "__timestampIso8601" :location common-lisp:nil
                         :location-name "creationTime")
                        (description :initarg :description :initform
                         (common-lisp:error ":description is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-configuration-description :shape
                         "__string" :location common-lisp:nil :location-name
                         "description")
                        (kafka-versions :initarg :kafka-versions :initform
                         (common-lisp:error ":kafka-versions is required")
                         :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor struct-shape-configuration-kafka-versions
                         :shape "__listOf__string" :location common-lisp:nil
                         :location-name "kafkaVersions")
                        (latest-revision :initarg :latest-revision :initform
                         (common-lisp:error ":latest-revision is required")
                         :type
                         (common-lisp:or configuration-revision
                                         common-lisp:null)
                         :accessor struct-shape-configuration-latest-revision
                         :shape "ConfigurationRevision" :location
                         common-lisp:nil :location-name "latestRevision")
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-configuration-name :shape "__string"
                         :location common-lisp:nil :location-name "name")
                        (state :initarg :state :initform
                         (common-lisp:error ":state is required") :type
                         (common-lisp:or configuration-state common-lisp:null)
                         :accessor struct-shape-configuration-state :shape
                         "ConfigurationState" :location common-lisp:nil
                         :location-name "state"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'configuration 'make-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kafka-versions))
      (common-lisp:list
       (common-lisp:cons "KafkaVersions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'latest-revision))
      (common-lisp:list
       (common-lisp:cons "LatestRevision"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass configuration-info common-lisp:nil
                       ((arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-configuration-info-arn :shape "__string"
                         :location common-lisp:nil :location-name "arn")
                        (revision :initarg :revision :initform
                         (common-lisp:error ":revision is required") :type
                         (common-lisp:or |__long| common-lisp:null) :accessor
                         struct-shape-configuration-info-revision :shape
                         "__long" :location common-lisp:nil :location-name
                         "revision"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-configuration-info
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'configuration-info
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'configuration-info 'make-configuration-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input configuration-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input configuration-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'revision))
      (common-lisp:list
       (common-lisp:cons "Revision"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input configuration-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass configuration-revision common-lisp:nil
                       ((creation-time :initarg :creation-time :initform
                         (common-lisp:error ":creation-time is required") :type
                         (common-lisp:or |__timestampIso8601| common-lisp:null)
                         :accessor
                         struct-shape-configuration-revision-creation-time
                         :shape "__timestampIso8601" :location common-lisp:nil
                         :location-name "creationTime")
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-configuration-revision-description :shape
                         "__string" :location common-lisp:nil :location-name
                         "description")
                        (revision :initarg :revision :initform
                         (common-lisp:error ":revision is required") :type
                         (common-lisp:or |__long| common-lisp:null) :accessor
                         struct-shape-configuration-revision-revision :shape
                         "__long" :location common-lisp:nil :location-name
                         "revision"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-configuration-revision
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'configuration-revision
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'configuration-revision 'make-configuration-revision))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          configuration-revision))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          configuration-revision))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'revision))
      (common-lisp:list
       (common-lisp:cons "Revision"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          configuration-revision))
   common-lisp:nil))
(common-lisp:deftype configuration-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition conflict-exception
     (kafka-error)
     ((invalid-parameter :initarg :invalid-parameter :initform common-lisp:nil
       :reader conflict-exception-invalid-parameter)
      (message :initarg :message :initform common-lisp:nil :reader
       conflict-exception-message)))
 (common-lisp:export
  (common-lisp:list 'conflict-exception 'conflict-exception-invalid-parameter
                    'conflict-exception-message)))
(common-lisp:progn
 (common-lisp:defclass connectivity-info common-lisp:nil
                       ((public-access :initarg :public-access :initform
                         common-lisp:nil :type
                         (common-lisp:or public-access common-lisp:null)
                         :accessor struct-shape-connectivity-info-public-access
                         :shape "PublicAccess" :location common-lisp:nil
                         :location-name "publicAccess")
                        (vpc-connectivity :initarg :vpc-connectivity :initform
                         common-lisp:nil :type
                         (common-lisp:or vpc-connectivity common-lisp:null)
                         :accessor
                         struct-shape-connectivity-info-vpc-connectivity :shape
                         "VpcConnectivity" :location common-lisp:nil
                         :location-name "vpcConnectivity"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-connectivity-info
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'connectivity-info
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'connectivity-info 'make-connectivity-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input connectivity-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input connectivity-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'public-access))
      (common-lisp:list
       (common-lisp:cons "PublicAccess"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-connectivity))
      (common-lisp:list
       (common-lisp:cons "VpcConnectivity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input connectivity-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass consumer-group-replication common-lisp:nil
                       ((consumer-groups-to-exclude :initarg
                         :consumer-groups-to-exclude :initform common-lisp:nil
                         :type
                         (common-lisp:or |__listOf__stringMax256|
                                         common-lisp:null)
                         :accessor
                         struct-shape-consumer-group-replication-consumer-groups-to-exclude
                         :shape "__listOf__stringMax256" :location
                         common-lisp:nil :location-name
                         "consumerGroupsToExclude")
                        (consumer-groups-to-replicate :initarg
                         :consumer-groups-to-replicate :initform
                         (common-lisp:error
                          ":consumer-groups-to-replicate is required")
                         :type
                         (common-lisp:or |__listOf__stringMax256|
                                         common-lisp:null)
                         :accessor
                         struct-shape-consumer-group-replication-consumer-groups-to-replicate
                         :shape "__listOf__stringMax256" :location
                         common-lisp:nil :location-name
                         "consumerGroupsToReplicate")
                        (detect-and-copy-new-consumer-groups :initarg
                         :detect-and-copy-new-consumer-groups :initform
                         common-lisp:nil :type
                         (common-lisp:or |__boolean| common-lisp:null)
                         :accessor
                         struct-shape-consumer-group-replication-detect-and-copy-new-consumer-groups
                         :shape "__boolean" :location common-lisp:nil
                         :location-name "detectAndCopyNewConsumerGroups")
                        (synchronise-consumer-group-offsets :initarg
                         :synchronise-consumer-group-offsets :initform
                         common-lisp:nil :type
                         (common-lisp:or |__boolean| common-lisp:null)
                         :accessor
                         struct-shape-consumer-group-replication-synchronise-consumer-group-offsets
                         :shape "__boolean" :location common-lisp:nil
                         :location-name "synchroniseConsumerGroupOffsets"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-consumer-group-replication
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'consumer-group-replication
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'consumer-group-replication
                    'make-consumer-group-replication))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          consumer-group-replication))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          consumer-group-replication))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'consumer-groups-to-exclude))
      (common-lisp:list
       (common-lisp:cons "ConsumerGroupsToExclude"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'consumer-groups-to-replicate))
      (common-lisp:list
       (common-lisp:cons "ConsumerGroupsToReplicate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'detect-and-copy-new-consumer-groups))
      (common-lisp:list
       (common-lisp:cons "DetectAndCopyNewConsumerGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'synchronise-consumer-group-offsets))
      (common-lisp:list
       (common-lisp:cons "SynchroniseConsumerGroupOffsets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          consumer-group-replication))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass consumer-group-replication-update common-lisp:nil
                       ((consumer-groups-to-exclude :initarg
                         :consumer-groups-to-exclude :initform
                         (common-lisp:error
                          ":consumer-groups-to-exclude is required")
                         :type
                         (common-lisp:or |__listOf__stringMax256|
                                         common-lisp:null)
                         :accessor
                         struct-shape-consumer-group-replication-update-consumer-groups-to-exclude
                         :shape "__listOf__stringMax256" :location
                         common-lisp:nil :location-name
                         "consumerGroupsToExclude")
                        (consumer-groups-to-replicate :initarg
                         :consumer-groups-to-replicate :initform
                         (common-lisp:error
                          ":consumer-groups-to-replicate is required")
                         :type
                         (common-lisp:or |__listOf__stringMax256|
                                         common-lisp:null)
                         :accessor
                         struct-shape-consumer-group-replication-update-consumer-groups-to-replicate
                         :shape "__listOf__stringMax256" :location
                         common-lisp:nil :location-name
                         "consumerGroupsToReplicate")
                        (detect-and-copy-new-consumer-groups :initarg
                         :detect-and-copy-new-consumer-groups :initform
                         (common-lisp:error
                          ":detect-and-copy-new-consumer-groups is required")
                         :type (common-lisp:or |__boolean| common-lisp:null)
                         :accessor
                         struct-shape-consumer-group-replication-update-detect-and-copy-new-consumer-groups
                         :shape "__boolean" :location common-lisp:nil
                         :location-name "detectAndCopyNewConsumerGroups")
                        (synchronise-consumer-group-offsets :initarg
                         :synchronise-consumer-group-offsets :initform
                         (common-lisp:error
                          ":synchronise-consumer-group-offsets is required")
                         :type (common-lisp:or |__boolean| common-lisp:null)
                         :accessor
                         struct-shape-consumer-group-replication-update-synchronise-consumer-group-offsets
                         :shape "__boolean" :location common-lisp:nil
                         :location-name "synchroniseConsumerGroupOffsets"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-consumer-group-replication-update
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'consumer-group-replication-update
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'consumer-group-replication-update
                    'make-consumer-group-replication-update))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          consumer-group-replication-update))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          consumer-group-replication-update))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'consumer-groups-to-exclude))
      (common-lisp:list
       (common-lisp:cons "ConsumerGroupsToExclude"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'consumer-groups-to-replicate))
      (common-lisp:list
       (common-lisp:cons "ConsumerGroupsToReplicate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'detect-and-copy-new-consumer-groups))
      (common-lisp:list
       (common-lisp:cons "DetectAndCopyNewConsumerGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'synchronise-consumer-group-offsets))
      (common-lisp:list
       (common-lisp:cons "SynchroniseConsumerGroupOffsets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          consumer-group-replication-update))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-cluster-request common-lisp:nil
                       ((broker-node-group-info :initarg
                         :broker-node-group-info :initform
                         (common-lisp:error
                          ":broker-node-group-info is required")
                         :type
                         (common-lisp:or broker-node-group-info
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-cluster-request-broker-node-group-info
                         :shape "BrokerNodeGroupInfo" :location common-lisp:nil
                         :location-name "brokerNodeGroupInfo")
                        (client-authentication :initarg :client-authentication
                         :initform common-lisp:nil :type
                         (common-lisp:or client-authentication
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-cluster-request-client-authentication
                         :shape "ClientAuthentication" :location
                         common-lisp:nil :location-name "clientAuthentication")
                        (cluster-name :initarg :cluster-name :initform
                         (common-lisp:error ":cluster-name is required") :type
                         (common-lisp:or |__stringMin1Max64| common-lisp:null)
                         :accessor
                         struct-shape-create-cluster-request-cluster-name
                         :shape "__stringMin1Max64" :location common-lisp:nil
                         :location-name "clusterName")
                        (configuration-info :initarg :configuration-info
                         :initform common-lisp:nil :type
                         (common-lisp:or configuration-info common-lisp:null)
                         :accessor
                         struct-shape-create-cluster-request-configuration-info
                         :shape "ConfigurationInfo" :location common-lisp:nil
                         :location-name "configurationInfo")
                        (encryption-info :initarg :encryption-info :initform
                         common-lisp:nil :type
                         (common-lisp:or encryption-info common-lisp:null)
                         :accessor
                         struct-shape-create-cluster-request-encryption-info
                         :shape "EncryptionInfo" :location common-lisp:nil
                         :location-name "encryptionInfo")
                        (enhanced-monitoring :initarg :enhanced-monitoring
                         :initform common-lisp:nil :type
                         (common-lisp:or enhanced-monitoring common-lisp:null)
                         :accessor
                         struct-shape-create-cluster-request-enhanced-monitoring
                         :shape "EnhancedMonitoring" :location common-lisp:nil
                         :location-name "enhancedMonitoring")
                        (kafka-version :initarg :kafka-version :initform
                         (common-lisp:error ":kafka-version is required") :type
                         (common-lisp:or |__stringMin1Max128| common-lisp:null)
                         :accessor
                         struct-shape-create-cluster-request-kafka-version
                         :shape "__stringMin1Max128" :location common-lisp:nil
                         :location-name "kafkaVersion")
                        (logging-info :initarg :logging-info :initform
                         common-lisp:nil :type
                         (common-lisp:or logging-info common-lisp:null)
                         :accessor
                         struct-shape-create-cluster-request-logging-info
                         :shape "LoggingInfo" :location common-lisp:nil
                         :location-name "loggingInfo")
                        (number-of-broker-nodes :initarg
                         :number-of-broker-nodes :initform
                         (common-lisp:error
                          ":number-of-broker-nodes is required")
                         :type
                         (common-lisp:or |__integerMin1Max15| common-lisp:null)
                         :accessor
                         struct-shape-create-cluster-request-number-of-broker-nodes
                         :shape "__integerMin1Max15" :location common-lisp:nil
                         :location-name "numberOfBrokerNodes")
                        (open-monitoring :initarg :open-monitoring :initform
                         common-lisp:nil :type
                         (common-lisp:or open-monitoring-info common-lisp:null)
                         :accessor
                         struct-shape-create-cluster-request-open-monitoring
                         :shape "OpenMonitoringInfo" :location common-lisp:nil
                         :location-name "openMonitoring")
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or |__mapOf__string| common-lisp:null)
                         :accessor struct-shape-create-cluster-request-tags
                         :shape "__mapOf__string" :location common-lisp:nil
                         :location-name "tags")
                        (storage-mode :initarg :storage-mode :initform
                         common-lisp:nil :type
                         (common-lisp:or storage-mode common-lisp:null)
                         :accessor
                         struct-shape-create-cluster-request-storage-mode
                         :shape "StorageMode" :location common-lisp:nil
                         :location-name "storageMode"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-cluster-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-cluster-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-cluster-request 'make-create-cluster-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-cluster-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-cluster-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'broker-node-group-info))
      (common-lisp:list
       (common-lisp:cons "BrokerNodeGroupInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-authentication))
      (common-lisp:list
       (common-lisp:cons "ClientAuthentication"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-name))
      (common-lisp:list
       (common-lisp:cons "ClusterName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration-info))
      (common-lisp:list
       (common-lisp:cons "ConfigurationInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encryption-info))
      (common-lisp:list
       (common-lisp:cons "EncryptionInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enhanced-monitoring))
      (common-lisp:list
       (common-lisp:cons "EnhancedMonitoring"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kafka-version))
      (common-lisp:list
       (common-lisp:cons "KafkaVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'logging-info))
      (common-lisp:list
       (common-lisp:cons "LoggingInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'number-of-broker-nodes))
      (common-lisp:list
       (common-lisp:cons "NumberOfBrokerNodes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'open-monitoring))
      (common-lisp:list
       (common-lisp:cons "OpenMonitoring"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-mode))
      (common-lisp:list
       (common-lisp:cons "StorageMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-cluster-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-cluster-response common-lisp:nil
                       ((cluster-arn :initarg :cluster-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-create-cluster-response-cluster-arn
                         :shape "__string" :location common-lisp:nil
                         :location-name "clusterArn")
                        (cluster-name :initarg :cluster-name :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-create-cluster-response-cluster-name
                         :shape "__string" :location common-lisp:nil
                         :location-name "clusterName")
                        (state :initarg :state :initform common-lisp:nil :type
                         (common-lisp:or cluster-state common-lisp:null)
                         :accessor struct-shape-create-cluster-response-state
                         :shape "ClusterState" :location common-lisp:nil
                         :location-name "state"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-cluster-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-cluster-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-cluster-response 'make-create-cluster-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-cluster-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-cluster-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-arn))
      (common-lisp:list
       (common-lisp:cons "ClusterArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-name))
      (common-lisp:list
       (common-lisp:cons "ClusterName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-cluster-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-configuration-request common-lisp:nil
                       ((description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-create-configuration-request-description
                         :shape "__string" :location common-lisp:nil
                         :location-name "description")
                        (kafka-versions :initarg :kafka-versions :initform
                         common-lisp:nil :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor
                         struct-shape-create-configuration-request-kafka-versions
                         :shape "__listOf__string" :location common-lisp:nil
                         :location-name "kafkaVersions")
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-create-configuration-request-name :shape
                         "__string" :location common-lisp:nil :location-name
                         "name")
                        (server-properties :initarg :server-properties
                         :initform
                         (common-lisp:error ":server-properties is required")
                         :type (common-lisp:or |__blob| common-lisp:null)
                         :accessor
                         struct-shape-create-configuration-request-server-properties
                         :shape "__blob" :location common-lisp:nil
                         :location-name "serverProperties"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-configuration-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-configuration-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-configuration-request
                    'make-create-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kafka-versions))
      (common-lisp:list
       (common-lisp:cons "KafkaVersions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'server-properties))
      (common-lisp:list
       (common-lisp:cons "ServerProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-configuration-response common-lisp:nil
                       ((arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-create-configuration-response-arn :shape
                         "__string" :location common-lisp:nil :location-name
                         "arn")
                        (creation-time :initarg :creation-time :initform
                         common-lisp:nil :type
                         (common-lisp:or |__timestampIso8601| common-lisp:null)
                         :accessor
                         struct-shape-create-configuration-response-creation-time
                         :shape "__timestampIso8601" :location common-lisp:nil
                         :location-name "creationTime")
                        (latest-revision :initarg :latest-revision :initform
                         common-lisp:nil :type
                         (common-lisp:or configuration-revision
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-configuration-response-latest-revision
                         :shape "ConfigurationRevision" :location
                         common-lisp:nil :location-name "latestRevision")
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-create-configuration-response-name :shape
                         "__string" :location common-lisp:nil :location-name
                         "name")
                        (state :initarg :state :initform common-lisp:nil :type
                         (common-lisp:or configuration-state common-lisp:null)
                         :accessor
                         struct-shape-create-configuration-response-state
                         :shape "ConfigurationState" :location common-lisp:nil
                         :location-name "state"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-configuration-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-configuration-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-configuration-response
                    'make-create-configuration-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-configuration-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'latest-revision))
      (common-lisp:list
       (common-lisp:cons "LatestRevision"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-configuration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-replicator-request common-lisp:nil
                       ((description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or |__stringMax1024| common-lisp:null)
                         :accessor
                         struct-shape-create-replicator-request-description
                         :shape "__stringMax1024" :location common-lisp:nil
                         :location-name "description")
                        (kafka-clusters :initarg :kafka-clusters :initform
                         (common-lisp:error ":kafka-clusters is required")
                         :type
                         (common-lisp:or |__listOfKafkaCluster|
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-replicator-request-kafka-clusters
                         :shape "__listOfKafkaCluster" :location
                         common-lisp:nil :location-name "kafkaClusters")
                        (replication-info-list :initarg :replication-info-list
                         :initform
                         (common-lisp:error
                          ":replication-info-list is required")
                         :type
                         (common-lisp:or |__listOfReplicationInfo|
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-replicator-request-replication-info-list
                         :shape "__listOfReplicationInfo" :location
                         common-lisp:nil :location-name "replicationInfoList")
                        (replicator-name :initarg :replicator-name :initform
                         (common-lisp:error ":replicator-name is required")
                         :type
                         (common-lisp:or
                          |__stringMin1Max128Pattern09AZaZ09AZaZ0|
                          common-lisp:null)
                         :accessor
                         struct-shape-create-replicator-request-replicator-name
                         :shape "__stringMin1Max128Pattern09AZaZ09AZaZ0"
                         :location common-lisp:nil :location-name
                         "replicatorName")
                        (service-execution-role-arn :initarg
                         :service-execution-role-arn :initform
                         (common-lisp:error
                          ":service-execution-role-arn is required")
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-create-replicator-request-service-execution-role-arn
                         :shape "__string" :location common-lisp:nil
                         :location-name "serviceExecutionRoleArn")
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or |__mapOf__string| common-lisp:null)
                         :accessor struct-shape-create-replicator-request-tags
                         :shape "__mapOf__string" :location common-lisp:nil
                         :location-name "tags"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-replicator-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-replicator-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-replicator-request
                    'make-create-replicator-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-replicator-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-replicator-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kafka-clusters))
      (common-lisp:list
       (common-lisp:cons "KafkaClusters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-info-list))
      (common-lisp:list
       (common-lisp:cons "ReplicationInfoList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'replicator-name))
      (common-lisp:list
       (common-lisp:cons "ReplicatorName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'service-execution-role-arn))
      (common-lisp:list
       (common-lisp:cons "ServiceExecutionRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-replicator-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-replicator-response common-lisp:nil
                       ((replicator-arn :initarg :replicator-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-create-replicator-response-replicator-arn
                         :shape "__string" :location common-lisp:nil
                         :location-name "replicatorArn")
                        (replicator-name :initarg :replicator-name :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-create-replicator-response-replicator-name
                         :shape "__string" :location common-lisp:nil
                         :location-name "replicatorName")
                        (replicator-state :initarg :replicator-state :initform
                         common-lisp:nil :type
                         (common-lisp:or replicator-state common-lisp:null)
                         :accessor
                         struct-shape-create-replicator-response-replicator-state
                         :shape "ReplicatorState" :location common-lisp:nil
                         :location-name "replicatorState"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-replicator-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-replicator-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-replicator-response
                    'make-create-replicator-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-replicator-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-replicator-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'replicator-arn))
      (common-lisp:list
       (common-lisp:cons "ReplicatorArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'replicator-name))
      (common-lisp:list
       (common-lisp:cons "ReplicatorName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'replicator-state))
      (common-lisp:list
       (common-lisp:cons "ReplicatorState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-replicator-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-vpc-connection-request common-lisp:nil
                       ((target-cluster-arn :initarg :target-cluster-arn
                         :initform
                         (common-lisp:error ":target-cluster-arn is required")
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-create-vpc-connection-request-target-cluster-arn
                         :shape "__string" :location common-lisp:nil
                         :location-name "targetClusterArn")
                        (authentication :initarg :authentication :initform
                         (common-lisp:error ":authentication is required")
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-create-vpc-connection-request-authentication
                         :shape "__string" :location common-lisp:nil
                         :location-name "authentication")
                        (vpc-id :initarg :vpc-id :initform
                         (common-lisp:error ":vpc-id is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-create-vpc-connection-request-vpc-id
                         :shape "__string" :location common-lisp:nil
                         :location-name "vpcId")
                        (client-subnets :initarg :client-subnets :initform
                         (common-lisp:error ":client-subnets is required")
                         :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor
                         struct-shape-create-vpc-connection-request-client-subnets
                         :shape "__listOf__string" :location common-lisp:nil
                         :location-name "clientSubnets")
                        (security-groups :initarg :security-groups :initform
                         (common-lisp:error ":security-groups is required")
                         :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor
                         struct-shape-create-vpc-connection-request-security-groups
                         :shape "__listOf__string" :location common-lisp:nil
                         :location-name "securityGroups")
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or |__mapOf__string| common-lisp:null)
                         :accessor
                         struct-shape-create-vpc-connection-request-tags :shape
                         "__mapOf__string" :location common-lisp:nil
                         :location-name "tags"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-vpc-connection-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-vpc-connection-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-vpc-connection-request
                    'make-create-vpc-connection-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-vpc-connection-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-vpc-connection-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-cluster-arn))
      (common-lisp:list
       (common-lisp:cons "TargetClusterArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'authentication))
      (common-lisp:list
       (common-lisp:cons "Authentication"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-id))
      (common-lisp:list
       (common-lisp:cons "VpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-subnets))
      (common-lisp:list
       (common-lisp:cons "ClientSubnets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-groups))
      (common-lisp:list
       (common-lisp:cons "SecurityGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-vpc-connection-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-vpc-connection-response common-lisp:nil
                       ((vpc-connection-arn :initarg :vpc-connection-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-create-vpc-connection-response-vpc-connection-arn
                         :shape "__string" :location common-lisp:nil
                         :location-name "vpcConnectionArn")
                        (state :initarg :state :initform common-lisp:nil :type
                         (common-lisp:or vpc-connection-state common-lisp:null)
                         :accessor
                         struct-shape-create-vpc-connection-response-state
                         :shape "VpcConnectionState" :location common-lisp:nil
                         :location-name "state")
                        (authentication :initarg :authentication :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-create-vpc-connection-response-authentication
                         :shape "__string" :location common-lisp:nil
                         :location-name "authentication")
                        (vpc-id :initarg :vpc-id :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-create-vpc-connection-response-vpc-id
                         :shape "__string" :location common-lisp:nil
                         :location-name "vpcId")
                        (client-subnets :initarg :client-subnets :initform
                         common-lisp:nil :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor
                         struct-shape-create-vpc-connection-response-client-subnets
                         :shape "__listOf__string" :location common-lisp:nil
                         :location-name "clientSubnets")
                        (security-groups :initarg :security-groups :initform
                         common-lisp:nil :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor
                         struct-shape-create-vpc-connection-response-security-groups
                         :shape "__listOf__string" :location common-lisp:nil
                         :location-name "securityGroups")
                        (creation-time :initarg :creation-time :initform
                         common-lisp:nil :type
                         (common-lisp:or |__timestampIso8601| common-lisp:null)
                         :accessor
                         struct-shape-create-vpc-connection-response-creation-time
                         :shape "__timestampIso8601" :location common-lisp:nil
                         :location-name "creationTime")
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or |__mapOf__string| common-lisp:null)
                         :accessor
                         struct-shape-create-vpc-connection-response-tags
                         :shape "__mapOf__string" :location common-lisp:nil
                         :location-name "tags"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-vpc-connection-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-vpc-connection-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-vpc-connection-response
                    'make-create-vpc-connection-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-vpc-connection-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-vpc-connection-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-connection-arn))
      (common-lisp:list
       (common-lisp:cons "VpcConnectionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'authentication))
      (common-lisp:list
       (common-lisp:cons "Authentication"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-id))
      (common-lisp:list
       (common-lisp:cons "VpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-subnets))
      (common-lisp:list
       (common-lisp:cons "ClientSubnets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-groups))
      (common-lisp:list
       (common-lisp:cons "SecurityGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-vpc-connection-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-cluster-request common-lisp:nil
                       ((cluster-arn :initarg :cluster-arn :initform
                         (common-lisp:error ":cluster-arn is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-delete-cluster-request-cluster-arn :shape
                         "__string" :location "uri" :location-name
                         "clusterArn")
                        (current-version :initarg :current-version :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-delete-cluster-request-current-version
                         :shape "__string" :location "querystring"
                         :location-name "currentVersion"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-cluster-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-cluster-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-cluster-request 'make-delete-cluster-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-cluster-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-cluster-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-cluster-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-cluster-response common-lisp:nil
                       ((cluster-arn :initarg :cluster-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-delete-cluster-response-cluster-arn
                         :shape "__string" :location common-lisp:nil
                         :location-name "clusterArn")
                        (state :initarg :state :initform common-lisp:nil :type
                         (common-lisp:or cluster-state common-lisp:null)
                         :accessor struct-shape-delete-cluster-response-state
                         :shape "ClusterState" :location common-lisp:nil
                         :location-name "state"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-cluster-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-cluster-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-cluster-response 'make-delete-cluster-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-cluster-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-cluster-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-arn))
      (common-lisp:list
       (common-lisp:cons "ClusterArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-cluster-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-configuration-request common-lisp:nil
                       ((arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-delete-configuration-request-arn :shape
                         "__string" :location "uri" :location-name "arn"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-configuration-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-configuration-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-configuration-request
                    'make-delete-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-configuration-response common-lisp:nil
                       ((arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-delete-configuration-response-arn :shape
                         "__string" :location common-lisp:nil :location-name
                         "arn")
                        (state :initarg :state :initform common-lisp:nil :type
                         (common-lisp:or configuration-state common-lisp:null)
                         :accessor
                         struct-shape-delete-configuration-response-state
                         :shape "ConfigurationState" :location common-lisp:nil
                         :location-name "state"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-configuration-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-configuration-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-configuration-response
                    'make-delete-configuration-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-configuration-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-configuration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-replicator-request common-lisp:nil
                       ((current-version :initarg :current-version :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-delete-replicator-request-current-version
                         :shape "__string" :location "querystring"
                         :location-name "currentVersion")
                        (replicator-arn :initarg :replicator-arn :initform
                         (common-lisp:error ":replicator-arn is required")
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-delete-replicator-request-replicator-arn
                         :shape "__string" :location "uri" :location-name
                         "replicatorArn"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-replicator-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-replicator-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-replicator-request
                    'make-delete-replicator-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-replicator-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-replicator-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-replicator-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-replicator-response common-lisp:nil
                       ((replicator-arn :initarg :replicator-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-delete-replicator-response-replicator-arn
                         :shape "__string" :location common-lisp:nil
                         :location-name "replicatorArn")
                        (replicator-state :initarg :replicator-state :initform
                         common-lisp:nil :type
                         (common-lisp:or replicator-state common-lisp:null)
                         :accessor
                         struct-shape-delete-replicator-response-replicator-state
                         :shape "ReplicatorState" :location common-lisp:nil
                         :location-name "replicatorState"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-replicator-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-replicator-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-replicator-response
                    'make-delete-replicator-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-replicator-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-replicator-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'replicator-arn))
      (common-lisp:list
       (common-lisp:cons "ReplicatorArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'replicator-state))
      (common-lisp:list
       (common-lisp:cons "ReplicatorState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-replicator-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-vpc-connection-request common-lisp:nil
                       ((arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-delete-vpc-connection-request-arn :shape
                         "__string" :location "uri" :location-name "arn"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-vpc-connection-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-vpc-connection-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-vpc-connection-request
                    'make-delete-vpc-connection-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-vpc-connection-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-vpc-connection-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-vpc-connection-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-vpc-connection-response common-lisp:nil
                       ((vpc-connection-arn :initarg :vpc-connection-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-delete-vpc-connection-response-vpc-connection-arn
                         :shape "__string" :location common-lisp:nil
                         :location-name "vpcConnectionArn")
                        (state :initarg :state :initform common-lisp:nil :type
                         (common-lisp:or vpc-connection-state common-lisp:null)
                         :accessor
                         struct-shape-delete-vpc-connection-response-state
                         :shape "VpcConnectionState" :location common-lisp:nil
                         :location-name "state"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-vpc-connection-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-vpc-connection-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-vpc-connection-response
                    'make-delete-vpc-connection-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-vpc-connection-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-vpc-connection-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-connection-arn))
      (common-lisp:list
       (common-lisp:cons "VpcConnectionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-vpc-connection-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-cluster-operation-request common-lisp:nil
                       ((cluster-operation-arn :initarg :cluster-operation-arn
                         :initform
                         (common-lisp:error
                          ":cluster-operation-arn is required")
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-describe-cluster-operation-request-cluster-operation-arn
                         :shape "__string" :location "uri" :location-name
                         "clusterOperationArn"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-cluster-operation-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-cluster-operation-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-cluster-operation-request
                    'make-describe-cluster-operation-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-cluster-operation-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-cluster-operation-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-cluster-operation-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-cluster-operation-v2request common-lisp:nil
                       ((cluster-operation-arn :initarg :cluster-operation-arn
                         :initform
                         (common-lisp:error
                          ":cluster-operation-arn is required")
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-describe-cluster-operation-v2request-cluster-operation-arn
                         :shape "__string" :location "uri" :location-name
                         "clusterOperationArn"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-cluster-operation-v2request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-cluster-operation-v2request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-cluster-operation-v2request
                    'make-describe-cluster-operation-v2request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-cluster-operation-v2request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-cluster-operation-v2request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-cluster-operation-v2request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-cluster-operation-response common-lisp:nil
                       ((cluster-operation-info :initarg
                         :cluster-operation-info :initform common-lisp:nil
                         :type
                         (common-lisp:or cluster-operation-info
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-cluster-operation-response-cluster-operation-info
                         :shape "ClusterOperationInfo" :location
                         common-lisp:nil :location-name
                         "clusterOperationInfo"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-cluster-operation-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-cluster-operation-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-cluster-operation-response
                    'make-describe-cluster-operation-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-cluster-operation-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-cluster-operation-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cluster-operation-info))
      (common-lisp:list
       (common-lisp:cons "ClusterOperationInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-cluster-operation-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-cluster-operation-v2response common-lisp:nil
                       ((cluster-operation-info :initarg
                         :cluster-operation-info :initform common-lisp:nil
                         :type
                         (common-lisp:or cluster-operation-v2 common-lisp:null)
                         :accessor
                         struct-shape-describe-cluster-operation-v2response-cluster-operation-info
                         :shape "ClusterOperationV2" :location common-lisp:nil
                         :location-name "clusterOperationInfo"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-cluster-operation-v2response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-cluster-operation-v2response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-cluster-operation-v2response
                    'make-describe-cluster-operation-v2response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-cluster-operation-v2response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-cluster-operation-v2response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cluster-operation-info))
      (common-lisp:list
       (common-lisp:cons "ClusterOperationInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-cluster-operation-v2response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-cluster-request common-lisp:nil
                       ((cluster-arn :initarg :cluster-arn :initform
                         (common-lisp:error ":cluster-arn is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-describe-cluster-request-cluster-arn
                         :shape "__string" :location "uri" :location-name
                         "clusterArn"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-cluster-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-cluster-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-cluster-request 'make-describe-cluster-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-cluster-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-cluster-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-cluster-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-cluster-response common-lisp:nil
                       ((cluster-info :initarg :cluster-info :initform
                         common-lisp:nil :type
                         (common-lisp:or cluster-info common-lisp:null)
                         :accessor
                         struct-shape-describe-cluster-response-cluster-info
                         :shape "ClusterInfo" :location common-lisp:nil
                         :location-name "clusterInfo"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-cluster-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-cluster-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-cluster-response
                    'make-describe-cluster-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-cluster-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-cluster-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-info))
      (common-lisp:list
       (common-lisp:cons "ClusterInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-cluster-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-configuration-request common-lisp:nil
                       ((arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-describe-configuration-request-arn :shape
                         "__string" :location "uri" :location-name "arn"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-configuration-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-configuration-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-configuration-request
                    'make-describe-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-configuration-response common-lisp:nil
                       ((arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-describe-configuration-response-arn
                         :shape "__string" :location common-lisp:nil
                         :location-name "arn")
                        (creation-time :initarg :creation-time :initform
                         common-lisp:nil :type
                         (common-lisp:or |__timestampIso8601| common-lisp:null)
                         :accessor
                         struct-shape-describe-configuration-response-creation-time
                         :shape "__timestampIso8601" :location common-lisp:nil
                         :location-name "creationTime")
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-describe-configuration-response-description
                         :shape "__string" :location common-lisp:nil
                         :location-name "description")
                        (kafka-versions :initarg :kafka-versions :initform
                         common-lisp:nil :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor
                         struct-shape-describe-configuration-response-kafka-versions
                         :shape "__listOf__string" :location common-lisp:nil
                         :location-name "kafkaVersions")
                        (latest-revision :initarg :latest-revision :initform
                         common-lisp:nil :type
                         (common-lisp:or configuration-revision
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-configuration-response-latest-revision
                         :shape "ConfigurationRevision" :location
                         common-lisp:nil :location-name "latestRevision")
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-describe-configuration-response-name
                         :shape "__string" :location common-lisp:nil
                         :location-name "name")
                        (state :initarg :state :initform common-lisp:nil :type
                         (common-lisp:or configuration-state common-lisp:null)
                         :accessor
                         struct-shape-describe-configuration-response-state
                         :shape "ConfigurationState" :location common-lisp:nil
                         :location-name "state"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-configuration-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-configuration-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-configuration-response
                    'make-describe-configuration-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-configuration-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kafka-versions))
      (common-lisp:list
       (common-lisp:cons "KafkaVersions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'latest-revision))
      (common-lisp:list
       (common-lisp:cons "LatestRevision"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-configuration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-configuration-revision-request common-lisp:nil
                       ((arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-describe-configuration-revision-request-arn
                         :shape "__string" :location "uri" :location-name
                         "arn")
                        (revision :initarg :revision :initform
                         (common-lisp:error ":revision is required") :type
                         (common-lisp:or |__long| common-lisp:null) :accessor
                         struct-shape-describe-configuration-revision-request-revision
                         :shape "__long" :location "uri" :location-name
                         "revision"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-configuration-revision-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-configuration-revision-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-configuration-revision-request
                    'make-describe-configuration-revision-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-configuration-revision-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-configuration-revision-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-configuration-revision-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-configuration-revision-response common-lisp:nil
                       ((arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-describe-configuration-revision-response-arn
                         :shape "__string" :location common-lisp:nil
                         :location-name "arn")
                        (creation-time :initarg :creation-time :initform
                         common-lisp:nil :type
                         (common-lisp:or |__timestampIso8601| common-lisp:null)
                         :accessor
                         struct-shape-describe-configuration-revision-response-creation-time
                         :shape "__timestampIso8601" :location common-lisp:nil
                         :location-name "creationTime")
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-describe-configuration-revision-response-description
                         :shape "__string" :location common-lisp:nil
                         :location-name "description")
                        (revision :initarg :revision :initform common-lisp:nil
                         :type (common-lisp:or |__long| common-lisp:null)
                         :accessor
                         struct-shape-describe-configuration-revision-response-revision
                         :shape "__long" :location common-lisp:nil
                         :location-name "revision")
                        (server-properties :initarg :server-properties
                         :initform common-lisp:nil :type
                         (common-lisp:or |__blob| common-lisp:null) :accessor
                         struct-shape-describe-configuration-revision-response-server-properties
                         :shape "__blob" :location common-lisp:nil
                         :location-name "serverProperties"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-configuration-revision-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-configuration-revision-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-configuration-revision-response
                    'make-describe-configuration-revision-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-configuration-revision-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-configuration-revision-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'revision))
      (common-lisp:list
       (common-lisp:cons "Revision"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'server-properties))
      (common-lisp:list
       (common-lisp:cons "ServerProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-configuration-revision-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-replicator-request common-lisp:nil
                       ((replicator-arn :initarg :replicator-arn :initform
                         (common-lisp:error ":replicator-arn is required")
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-describe-replicator-request-replicator-arn
                         :shape "__string" :location "uri" :location-name
                         "replicatorArn"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-replicator-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-replicator-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-replicator-request
                    'make-describe-replicator-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-replicator-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-replicator-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-replicator-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-replicator-response common-lisp:nil
                       ((creation-time :initarg :creation-time :initform
                         common-lisp:nil :type
                         (common-lisp:or |__timestampIso8601| common-lisp:null)
                         :accessor
                         struct-shape-describe-replicator-response-creation-time
                         :shape "__timestampIso8601" :location common-lisp:nil
                         :location-name "creationTime")
                        (current-version :initarg :current-version :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-describe-replicator-response-current-version
                         :shape "__string" :location common-lisp:nil
                         :location-name "currentVersion")
                        (is-replicator-reference :initarg
                         :is-replicator-reference :initform common-lisp:nil
                         :type (common-lisp:or |__boolean| common-lisp:null)
                         :accessor
                         struct-shape-describe-replicator-response-is-replicator-reference
                         :shape "__boolean" :location common-lisp:nil
                         :location-name "isReplicatorReference")
                        (kafka-clusters :initarg :kafka-clusters :initform
                         common-lisp:nil :type
                         (common-lisp:or |__listOfKafkaClusterDescription|
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-replicator-response-kafka-clusters
                         :shape "__listOfKafkaClusterDescription" :location
                         common-lisp:nil :location-name "kafkaClusters")
                        (replication-info-list :initarg :replication-info-list
                         :initform common-lisp:nil :type
                         (common-lisp:or |__listOfReplicationInfoDescription|
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-replicator-response-replication-info-list
                         :shape "__listOfReplicationInfoDescription" :location
                         common-lisp:nil :location-name "replicationInfoList")
                        (replicator-arn :initarg :replicator-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-describe-replicator-response-replicator-arn
                         :shape "__string" :location common-lisp:nil
                         :location-name "replicatorArn")
                        (replicator-description :initarg
                         :replicator-description :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-describe-replicator-response-replicator-description
                         :shape "__string" :location common-lisp:nil
                         :location-name "replicatorDescription")
                        (replicator-name :initarg :replicator-name :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-describe-replicator-response-replicator-name
                         :shape "__string" :location common-lisp:nil
                         :location-name "replicatorName")
                        (replicator-resource-arn :initarg
                         :replicator-resource-arn :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-describe-replicator-response-replicator-resource-arn
                         :shape "__string" :location common-lisp:nil
                         :location-name "replicatorResourceArn")
                        (replicator-state :initarg :replicator-state :initform
                         common-lisp:nil :type
                         (common-lisp:or replicator-state common-lisp:null)
                         :accessor
                         struct-shape-describe-replicator-response-replicator-state
                         :shape "ReplicatorState" :location common-lisp:nil
                         :location-name "replicatorState")
                        (service-execution-role-arn :initarg
                         :service-execution-role-arn :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-describe-replicator-response-service-execution-role-arn
                         :shape "__string" :location common-lisp:nil
                         :location-name "serviceExecutionRoleArn")
                        (state-info :initarg :state-info :initform
                         common-lisp:nil :type
                         (common-lisp:or replication-state-info
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-replicator-response-state-info
                         :shape "ReplicationStateInfo" :location
                         common-lisp:nil :location-name "stateInfo")
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or |__mapOf__string| common-lisp:null)
                         :accessor
                         struct-shape-describe-replicator-response-tags :shape
                         "__mapOf__string" :location common-lisp:nil
                         :location-name "tags"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-replicator-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-replicator-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-replicator-response
                    'make-describe-replicator-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-replicator-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-replicator-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'current-version))
      (common-lisp:list
       (common-lisp:cons "CurrentVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'is-replicator-reference))
      (common-lisp:list
       (common-lisp:cons "IsReplicatorReference"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kafka-clusters))
      (common-lisp:list
       (common-lisp:cons "KafkaClusters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-info-list))
      (common-lisp:list
       (common-lisp:cons "ReplicationInfoList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'replicator-arn))
      (common-lisp:list
       (common-lisp:cons "ReplicatorArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replicator-description))
      (common-lisp:list
       (common-lisp:cons "ReplicatorDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'replicator-name))
      (common-lisp:list
       (common-lisp:cons "ReplicatorName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replicator-resource-arn))
      (common-lisp:list
       (common-lisp:cons "ReplicatorResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'replicator-state))
      (common-lisp:list
       (common-lisp:cons "ReplicatorState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'service-execution-role-arn))
      (common-lisp:list
       (common-lisp:cons "ServiceExecutionRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state-info))
      (common-lisp:list
       (common-lisp:cons "StateInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-replicator-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-vpc-connection-request common-lisp:nil
                       ((arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-describe-vpc-connection-request-arn
                         :shape "__string" :location "uri" :location-name
                         "arn"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-vpc-connection-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-vpc-connection-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-vpc-connection-request
                    'make-describe-vpc-connection-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-vpc-connection-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-vpc-connection-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-vpc-connection-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-vpc-connection-response common-lisp:nil
                       ((vpc-connection-arn :initarg :vpc-connection-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-describe-vpc-connection-response-vpc-connection-arn
                         :shape "__string" :location common-lisp:nil
                         :location-name "vpcConnectionArn")
                        (target-cluster-arn :initarg :target-cluster-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-describe-vpc-connection-response-target-cluster-arn
                         :shape "__string" :location common-lisp:nil
                         :location-name "targetClusterArn")
                        (state :initarg :state :initform common-lisp:nil :type
                         (common-lisp:or vpc-connection-state common-lisp:null)
                         :accessor
                         struct-shape-describe-vpc-connection-response-state
                         :shape "VpcConnectionState" :location common-lisp:nil
                         :location-name "state")
                        (authentication :initarg :authentication :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-describe-vpc-connection-response-authentication
                         :shape "__string" :location common-lisp:nil
                         :location-name "authentication")
                        (vpc-id :initarg :vpc-id :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-describe-vpc-connection-response-vpc-id
                         :shape "__string" :location common-lisp:nil
                         :location-name "vpcId")
                        (subnets :initarg :subnets :initform common-lisp:nil
                         :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor
                         struct-shape-describe-vpc-connection-response-subnets
                         :shape "__listOf__string" :location common-lisp:nil
                         :location-name "subnets")
                        (security-groups :initarg :security-groups :initform
                         common-lisp:nil :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor
                         struct-shape-describe-vpc-connection-response-security-groups
                         :shape "__listOf__string" :location common-lisp:nil
                         :location-name "securityGroups")
                        (creation-time :initarg :creation-time :initform
                         common-lisp:nil :type
                         (common-lisp:or |__timestampIso8601| common-lisp:null)
                         :accessor
                         struct-shape-describe-vpc-connection-response-creation-time
                         :shape "__timestampIso8601" :location common-lisp:nil
                         :location-name "creationTime")
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or |__mapOf__string| common-lisp:null)
                         :accessor
                         struct-shape-describe-vpc-connection-response-tags
                         :shape "__mapOf__string" :location common-lisp:nil
                         :location-name "tags"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-vpc-connection-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-vpc-connection-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-vpc-connection-response
                    'make-describe-vpc-connection-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-vpc-connection-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-vpc-connection-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-connection-arn))
      (common-lisp:list
       (common-lisp:cons "VpcConnectionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-cluster-arn))
      (common-lisp:list
       (common-lisp:cons "TargetClusterArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'authentication))
      (common-lisp:list
       (common-lisp:cons "Authentication"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-id))
      (common-lisp:list
       (common-lisp:cons "VpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnets))
      (common-lisp:list
       (common-lisp:cons "Subnets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-groups))
      (common-lisp:list
       (common-lisp:cons "SecurityGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-vpc-connection-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass batch-disassociate-scram-secret-request common-lisp:nil
                       ((cluster-arn :initarg :cluster-arn :initform
                         (common-lisp:error ":cluster-arn is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-batch-disassociate-scram-secret-request-cluster-arn
                         :shape "__string" :location "uri" :location-name
                         "clusterArn")
                        (secret-arn-list :initarg :secret-arn-list :initform
                         (common-lisp:error ":secret-arn-list is required")
                         :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor
                         struct-shape-batch-disassociate-scram-secret-request-secret-arn-list
                         :shape "__listOf__string" :location common-lisp:nil
                         :location-name "secretArnList"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-batch-disassociate-scram-secret-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'batch-disassociate-scram-secret-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'batch-disassociate-scram-secret-request
                    'make-batch-disassociate-scram-secret-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-disassociate-scram-secret-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-disassociate-scram-secret-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'secret-arn-list))
      (common-lisp:list
       (common-lisp:cons "SecretArnList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-disassociate-scram-secret-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass batch-disassociate-scram-secret-response common-lisp:nil
                       ((cluster-arn :initarg :cluster-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-batch-disassociate-scram-secret-response-cluster-arn
                         :shape "__string" :location common-lisp:nil
                         :location-name "clusterArn")
                        (unprocessed-scram-secrets :initarg
                         :unprocessed-scram-secrets :initform common-lisp:nil
                         :type
                         (common-lisp:or |__listOfUnprocessedScramSecret|
                                         common-lisp:null)
                         :accessor
                         struct-shape-batch-disassociate-scram-secret-response-unprocessed-scram-secrets
                         :shape "__listOfUnprocessedScramSecret" :location
                         common-lisp:nil :location-name
                         "unprocessedScramSecrets"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-batch-disassociate-scram-secret-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'batch-disassociate-scram-secret-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'batch-disassociate-scram-secret-response
                    'make-batch-disassociate-scram-secret-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-disassociate-scram-secret-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-disassociate-scram-secret-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-arn))
      (common-lisp:list
       (common-lisp:cons "ClusterArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'unprocessed-scram-secrets))
      (common-lisp:list
       (common-lisp:cons "UnprocessedScramSecrets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-disassociate-scram-secret-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass ebsstorage-info common-lisp:nil
                       ((provisioned-throughput :initarg
                         :provisioned-throughput :initform common-lisp:nil
                         :type
                         (common-lisp:or provisioned-throughput
                                         common-lisp:null)
                         :accessor
                         struct-shape-ebsstorage-info-provisioned-throughput
                         :shape "ProvisionedThroughput" :location
                         common-lisp:nil :location-name
                         "provisionedThroughput")
                        (volume-size :initarg :volume-size :initform
                         common-lisp:nil :type
                         (common-lisp:or |__integerMin1Max16384|
                                         common-lisp:null)
                         :accessor struct-shape-ebsstorage-info-volume-size
                         :shape "__integerMin1Max16384" :location
                         common-lisp:nil :location-name "volumeSize"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-ebsstorage-info
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'ebsstorage-info
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'ebsstorage-info 'make-ebsstorage-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input ebsstorage-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input ebsstorage-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'provisioned-throughput))
      (common-lisp:list
       (common-lisp:cons "ProvisionedThroughput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'volume-size))
      (common-lisp:list
       (common-lisp:cons "VolumeSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input ebsstorage-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass encryption-at-rest common-lisp:nil
                       ((data-volume-kmskey-id :initarg :data-volume-kmskey-id
                         :initform
                         (common-lisp:error
                          ":data-volume-kmskey-id is required")
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-encryption-at-rest-data-volume-kmskey-id
                         :shape "__string" :location common-lisp:nil
                         :location-name "dataVolumeKMSKeyId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-encryption-at-rest
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'encryption-at-rest
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'encryption-at-rest 'make-encryption-at-rest))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input encryption-at-rest))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input encryption-at-rest))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-volume-kmskey-id))
      (common-lisp:list
       (common-lisp:cons "DataVolumeKMSKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input encryption-at-rest))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass encryption-in-transit common-lisp:nil
                       ((client-broker :initarg :client-broker :initform
                         common-lisp:nil :type
                         (common-lisp:or client-broker common-lisp:null)
                         :accessor
                         struct-shape-encryption-in-transit-client-broker
                         :shape "ClientBroker" :location common-lisp:nil
                         :location-name "clientBroker")
                        (in-cluster :initarg :in-cluster :initform
                         common-lisp:nil :type
                         (common-lisp:or |__boolean| common-lisp:null)
                         :accessor
                         struct-shape-encryption-in-transit-in-cluster :shape
                         "__boolean" :location common-lisp:nil :location-name
                         "inCluster"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-encryption-in-transit
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'encryption-in-transit
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'encryption-in-transit 'make-encryption-in-transit))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          encryption-in-transit))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          encryption-in-transit))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-broker))
      (common-lisp:list
       (common-lisp:cons "ClientBroker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'in-cluster))
      (common-lisp:list
       (common-lisp:cons "InCluster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          encryption-in-transit))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass encryption-info common-lisp:nil
                       ((encryption-at-rest :initarg :encryption-at-rest
                         :initform common-lisp:nil :type
                         (common-lisp:or encryption-at-rest common-lisp:null)
                         :accessor
                         struct-shape-encryption-info-encryption-at-rest :shape
                         "EncryptionAtRest" :location common-lisp:nil
                         :location-name "encryptionAtRest")
                        (encryption-in-transit :initarg :encryption-in-transit
                         :initform common-lisp:nil :type
                         (common-lisp:or encryption-in-transit
                                         common-lisp:null)
                         :accessor
                         struct-shape-encryption-info-encryption-in-transit
                         :shape "EncryptionInTransit" :location common-lisp:nil
                         :location-name "encryptionInTransit"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-encryption-info
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'encryption-info
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'encryption-info 'make-encryption-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input encryption-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input encryption-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encryption-at-rest))
      (common-lisp:list
       (common-lisp:cons "EncryptionAtRest"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'encryption-in-transit))
      (common-lisp:list
       (common-lisp:cons "EncryptionInTransit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input encryption-info))
   common-lisp:nil))
(common-lisp:deftype enhanced-monitoring () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass error common-lisp:nil
                       ((invalid-parameter :initarg :invalid-parameter
                         :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-error-invalid-parameter :shape "__string"
                         :location common-lisp:nil :location-name
                         "invalidParameter")
                        (message :initarg :message :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor struct-shape-error-message :shape "__string"
                         :location common-lisp:nil :location-name "message"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-error
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'error
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'error 'make-error))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input error))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input error))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'invalid-parameter))
      (common-lisp:list
       (common-lisp:cons "InvalidParameter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input error))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass firehose common-lisp:nil
                       ((delivery-stream :initarg :delivery-stream :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-firehose-delivery-stream :shape
                         "__string" :location common-lisp:nil :location-name
                         "deliveryStream")
                        (enabled :initarg :enabled :initform
                         (common-lisp:error ":enabled is required") :type
                         (common-lisp:or |__boolean| common-lisp:null)
                         :accessor struct-shape-firehose-enabled :shape
                         "__boolean" :location common-lisp:nil :location-name
                         "enabled"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-firehose
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'firehose
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'firehose 'make-firehose))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input firehose))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input firehose))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'delivery-stream))
      (common-lisp:list
       (common-lisp:cons "DeliveryStream"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "Enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input firehose))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass error-info common-lisp:nil
                       ((error-code :initarg :error-code :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-error-info-error-code :shape "__string"
                         :location common-lisp:nil :location-name "errorCode")
                        (error-string :initarg :error-string :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-error-info-error-string :shape "__string"
                         :location common-lisp:nil :location-name
                         "errorString"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-error-info
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'error-info
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'error-info 'make-error-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input error-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input error-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-code))
      (common-lisp:list
       (common-lisp:cons "ErrorCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-string))
      (common-lisp:list
       (common-lisp:cons "ErrorString"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input error-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition forbidden-exception
     (kafka-error)
     ((invalid-parameter :initarg :invalid-parameter :initform common-lisp:nil
       :reader forbidden-exception-invalid-parameter)
      (message :initarg :message :initform common-lisp:nil :reader
       forbidden-exception-message)))
 (common-lisp:export
  (common-lisp:list 'forbidden-exception 'forbidden-exception-invalid-parameter
                    'forbidden-exception-message)))
(common-lisp:progn
 (common-lisp:defclass get-bootstrap-brokers-request common-lisp:nil
                       ((cluster-arn :initarg :cluster-arn :initform
                         (common-lisp:error ":cluster-arn is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-get-bootstrap-brokers-request-cluster-arn
                         :shape "__string" :location "uri" :location-name
                         "clusterArn"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-bootstrap-brokers-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-bootstrap-brokers-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-bootstrap-brokers-request
                    'make-get-bootstrap-brokers-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-bootstrap-brokers-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-bootstrap-brokers-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-bootstrap-brokers-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-bootstrap-brokers-response common-lisp:nil
                       ((bootstrap-broker-string :initarg
                         :bootstrap-broker-string :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-get-bootstrap-brokers-response-bootstrap-broker-string
                         :shape "__string" :location common-lisp:nil
                         :location-name "bootstrapBrokerString")
                        (bootstrap-broker-string-public-sasl-iam :initarg
                         :bootstrap-broker-string-public-sasl-iam :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-get-bootstrap-brokers-response-bootstrap-broker-string-public-sasl-iam
                         :shape "__string" :location common-lisp:nil
                         :location-name "bootstrapBrokerStringPublicSaslIam")
                        (bootstrap-broker-string-public-sasl-scram :initarg
                         :bootstrap-broker-string-public-sasl-scram :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-get-bootstrap-brokers-response-bootstrap-broker-string-public-sasl-scram
                         :shape "__string" :location common-lisp:nil
                         :location-name "bootstrapBrokerStringPublicSaslScram")
                        (bootstrap-broker-string-public-tls :initarg
                         :bootstrap-broker-string-public-tls :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-get-bootstrap-brokers-response-bootstrap-broker-string-public-tls
                         :shape "__string" :location common-lisp:nil
                         :location-name "bootstrapBrokerStringPublicTls")
                        (bootstrap-broker-string-tls :initarg
                         :bootstrap-broker-string-tls :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-get-bootstrap-brokers-response-bootstrap-broker-string-tls
                         :shape "__string" :location common-lisp:nil
                         :location-name "bootstrapBrokerStringTls")
                        (bootstrap-broker-string-sasl-scram :initarg
                         :bootstrap-broker-string-sasl-scram :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-get-bootstrap-brokers-response-bootstrap-broker-string-sasl-scram
                         :shape "__string" :location common-lisp:nil
                         :location-name "bootstrapBrokerStringSaslScram")
                        (bootstrap-broker-string-sasl-iam :initarg
                         :bootstrap-broker-string-sasl-iam :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-get-bootstrap-brokers-response-bootstrap-broker-string-sasl-iam
                         :shape "__string" :location common-lisp:nil
                         :location-name "bootstrapBrokerStringSaslIam")
                        (bootstrap-broker-string-vpc-connectivity-tls :initarg
                         :bootstrap-broker-string-vpc-connectivity-tls
                         :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-get-bootstrap-brokers-response-bootstrap-broker-string-vpc-connectivity-tls
                         :shape "__string" :location common-lisp:nil
                         :location-name
                         "bootstrapBrokerStringVpcConnectivityTls")
                        (bootstrap-broker-string-vpc-connectivity-sasl-scram
                         :initarg
                         :bootstrap-broker-string-vpc-connectivity-sasl-scram
                         :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-get-bootstrap-brokers-response-bootstrap-broker-string-vpc-connectivity-sasl-scram
                         :shape "__string" :location common-lisp:nil
                         :location-name
                         "bootstrapBrokerStringVpcConnectivitySaslScram")
                        (bootstrap-broker-string-vpc-connectivity-sasl-iam
                         :initarg
                         :bootstrap-broker-string-vpc-connectivity-sasl-iam
                         :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-get-bootstrap-brokers-response-bootstrap-broker-string-vpc-connectivity-sasl-iam
                         :shape "__string" :location common-lisp:nil
                         :location-name
                         "bootstrapBrokerStringVpcConnectivitySaslIam"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-bootstrap-brokers-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-bootstrap-brokers-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-bootstrap-brokers-response
                    'make-get-bootstrap-brokers-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-bootstrap-brokers-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-bootstrap-brokers-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'bootstrap-broker-string))
      (common-lisp:list
       (common-lisp:cons "BootstrapBrokerString"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'bootstrap-broker-string-public-sasl-iam))
      (common-lisp:list
       (common-lisp:cons "BootstrapBrokerStringPublicSaslIam"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'bootstrap-broker-string-public-sasl-scram))
      (common-lisp:list
       (common-lisp:cons "BootstrapBrokerStringPublicSaslScram"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'bootstrap-broker-string-public-tls))
      (common-lisp:list
       (common-lisp:cons "BootstrapBrokerStringPublicTls"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'bootstrap-broker-string-tls))
      (common-lisp:list
       (common-lisp:cons "BootstrapBrokerStringTls"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'bootstrap-broker-string-sasl-scram))
      (common-lisp:list
       (common-lisp:cons "BootstrapBrokerStringSaslScram"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'bootstrap-broker-string-sasl-iam))
      (common-lisp:list
       (common-lisp:cons "BootstrapBrokerStringSaslIam"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'bootstrap-broker-string-vpc-connectivity-tls))
      (common-lisp:list
       (common-lisp:cons "BootstrapBrokerStringVpcConnectivityTls"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'bootstrap-broker-string-vpc-connectivity-sasl-scram))
      (common-lisp:list
       (common-lisp:cons "BootstrapBrokerStringVpcConnectivitySaslScram"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'bootstrap-broker-string-vpc-connectivity-sasl-iam))
      (common-lisp:list
       (common-lisp:cons "BootstrapBrokerStringVpcConnectivitySaslIam"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-bootstrap-brokers-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-compatible-kafka-versions-request common-lisp:nil
                       ((cluster-arn :initarg :cluster-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-get-compatible-kafka-versions-request-cluster-arn
                         :shape "__string" :location "querystring"
                         :location-name "clusterArn"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-compatible-kafka-versions-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-compatible-kafka-versions-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-compatible-kafka-versions-request
                    'make-get-compatible-kafka-versions-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-compatible-kafka-versions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-compatible-kafka-versions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-compatible-kafka-versions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-compatible-kafka-versions-response common-lisp:nil
                       ((compatible-kafka-versions :initarg
                         :compatible-kafka-versions :initform common-lisp:nil
                         :type
                         (common-lisp:or |__listOfCompatibleKafkaVersion|
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-compatible-kafka-versions-response-compatible-kafka-versions
                         :shape "__listOfCompatibleKafkaVersion" :location
                         common-lisp:nil :location-name
                         "compatibleKafkaVersions"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-compatible-kafka-versions-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-compatible-kafka-versions-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-compatible-kafka-versions-response
                    'make-get-compatible-kafka-versions-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-compatible-kafka-versions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-compatible-kafka-versions-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'compatible-kafka-versions))
      (common-lisp:list
       (common-lisp:cons "CompatibleKafkaVersions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-compatible-kafka-versions-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition internal-server-error-exception
     (kafka-error)
     ((invalid-parameter :initarg :invalid-parameter :initform common-lisp:nil
       :reader internal-server-error-exception-invalid-parameter)
      (message :initarg :message :initform common-lisp:nil :reader
       internal-server-error-exception-message)))
 (common-lisp:export
  (common-lisp:list 'internal-server-error-exception
                    'internal-server-error-exception-invalid-parameter
                    'internal-server-error-exception-message)))
(common-lisp:progn
 (common-lisp:defclass kafka-cluster common-lisp:nil
                       ((amazon-msk-cluster :initarg :amazon-msk-cluster
                         :initform
                         (common-lisp:error ":amazon-msk-cluster is required")
                         :type
                         (common-lisp:or amazon-msk-cluster common-lisp:null)
                         :accessor
                         struct-shape-kafka-cluster-amazon-msk-cluster :shape
                         "AmazonMskCluster" :location common-lisp:nil
                         :location-name "amazonMskCluster")
                        (vpc-config :initarg :vpc-config :initform
                         (common-lisp:error ":vpc-config is required") :type
                         (common-lisp:or kafka-cluster-client-vpc-config
                                         common-lisp:null)
                         :accessor struct-shape-kafka-cluster-vpc-config :shape
                         "KafkaClusterClientVpcConfig" :location
                         common-lisp:nil :location-name "vpcConfig"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-kafka-cluster
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'kafka-cluster
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'kafka-cluster 'make-kafka-cluster))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input kafka-cluster))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input kafka-cluster))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'amazon-msk-cluster))
      (common-lisp:list
       (common-lisp:cons "AmazonMskCluster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-config))
      (common-lisp:list
       (common-lisp:cons "VpcConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input kafka-cluster))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass kafka-cluster-client-vpc-config common-lisp:nil
                       ((security-group-ids :initarg :security-group-ids
                         :initform common-lisp:nil :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor
                         struct-shape-kafka-cluster-client-vpc-config-security-group-ids
                         :shape "__listOf__string" :location common-lisp:nil
                         :location-name "securityGroupIds")
                        (subnet-ids :initarg :subnet-ids :initform
                         (common-lisp:error ":subnet-ids is required") :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor
                         struct-shape-kafka-cluster-client-vpc-config-subnet-ids
                         :shape "__listOf__string" :location common-lisp:nil
                         :location-name "subnetIds"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-kafka-cluster-client-vpc-config
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'kafka-cluster-client-vpc-config
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'kafka-cluster-client-vpc-config
                    'make-kafka-cluster-client-vpc-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          kafka-cluster-client-vpc-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          kafka-cluster-client-vpc-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-group-ids))
      (common-lisp:list
       (common-lisp:cons "SecurityGroupIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-ids))
      (common-lisp:list
       (common-lisp:cons "SubnetIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          kafka-cluster-client-vpc-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass kafka-cluster-description common-lisp:nil
                       ((amazon-msk-cluster :initarg :amazon-msk-cluster
                         :initform common-lisp:nil :type
                         (common-lisp:or amazon-msk-cluster common-lisp:null)
                         :accessor
                         struct-shape-kafka-cluster-description-amazon-msk-cluster
                         :shape "AmazonMskCluster" :location common-lisp:nil
                         :location-name "amazonMskCluster")
                        (kafka-cluster-alias :initarg :kafka-cluster-alias
                         :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-kafka-cluster-description-kafka-cluster-alias
                         :shape "__string" :location common-lisp:nil
                         :location-name "kafkaClusterAlias")
                        (vpc-config :initarg :vpc-config :initform
                         common-lisp:nil :type
                         (common-lisp:or kafka-cluster-client-vpc-config
                                         common-lisp:null)
                         :accessor
                         struct-shape-kafka-cluster-description-vpc-config
                         :shape "KafkaClusterClientVpcConfig" :location
                         common-lisp:nil :location-name "vpcConfig"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-kafka-cluster-description
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'kafka-cluster-description
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'kafka-cluster-description
                    'make-kafka-cluster-description))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          kafka-cluster-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          kafka-cluster-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'amazon-msk-cluster))
      (common-lisp:list
       (common-lisp:cons "AmazonMskCluster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kafka-cluster-alias))
      (common-lisp:list
       (common-lisp:cons "KafkaClusterAlias"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-config))
      (common-lisp:list
       (common-lisp:cons "VpcConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          kafka-cluster-description))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass kafka-cluster-summary common-lisp:nil
                       ((amazon-msk-cluster :initarg :amazon-msk-cluster
                         :initform common-lisp:nil :type
                         (common-lisp:or amazon-msk-cluster common-lisp:null)
                         :accessor
                         struct-shape-kafka-cluster-summary-amazon-msk-cluster
                         :shape "AmazonMskCluster" :location common-lisp:nil
                         :location-name "amazonMskCluster")
                        (kafka-cluster-alias :initarg :kafka-cluster-alias
                         :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-kafka-cluster-summary-kafka-cluster-alias
                         :shape "__string" :location common-lisp:nil
                         :location-name "kafkaClusterAlias"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-kafka-cluster-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'kafka-cluster-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'kafka-cluster-summary 'make-kafka-cluster-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          kafka-cluster-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          kafka-cluster-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'amazon-msk-cluster))
      (common-lisp:list
       (common-lisp:cons "AmazonMskCluster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kafka-cluster-alias))
      (common-lisp:list
       (common-lisp:cons "KafkaClusterAlias"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          kafka-cluster-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass kafka-version common-lisp:nil
                       ((version :initarg :version :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor struct-shape-kafka-version-version :shape
                         "__string" :location common-lisp:nil :location-name
                         "version")
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or kafka-version-status common-lisp:null)
                         :accessor struct-shape-kafka-version-status :shape
                         "KafkaVersionStatus" :location common-lisp:nil
                         :location-name "status"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-kafka-version
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'kafka-version
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'kafka-version 'make-kafka-version))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input kafka-version))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input kafka-version))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "Version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input kafka-version))
   common-lisp:nil))
(common-lisp:deftype kafka-version-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass list-cluster-operations-request common-lisp:nil
                       ((cluster-arn :initarg :cluster-arn :initform
                         (common-lisp:error ":cluster-arn is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-list-cluster-operations-request-cluster-arn
                         :shape "__string" :location "uri" :location-name
                         "clusterArn")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-cluster-operations-request-max-results
                         :shape "MaxResults" :location "querystring"
                         :location-name "maxResults")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-list-cluster-operations-request-next-token
                         :shape "__string" :location "querystring"
                         :location-name "nextToken"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-cluster-operations-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-cluster-operations-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-cluster-operations-request
                    'make-list-cluster-operations-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-cluster-operations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-cluster-operations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-cluster-operations-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-cluster-operations-v2request common-lisp:nil
                       ((cluster-arn :initarg :cluster-arn :initform
                         (common-lisp:error ":cluster-arn is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-list-cluster-operations-v2request-cluster-arn
                         :shape "__string" :location "uri" :location-name
                         "clusterArn")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-cluster-operations-v2request-max-results
                         :shape "MaxResults" :location "querystring"
                         :location-name "maxResults")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-list-cluster-operations-v2request-next-token
                         :shape "__string" :location "querystring"
                         :location-name "nextToken"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-cluster-operations-v2request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-cluster-operations-v2request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-cluster-operations-v2request
                    'make-list-cluster-operations-v2request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-cluster-operations-v2request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-cluster-operations-v2request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-cluster-operations-v2request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-cluster-operations-response common-lisp:nil
                       ((cluster-operation-info-list :initarg
                         :cluster-operation-info-list :initform common-lisp:nil
                         :type
                         (common-lisp:or |__listOfClusterOperationInfo|
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-cluster-operations-response-cluster-operation-info-list
                         :shape "__listOfClusterOperationInfo" :location
                         common-lisp:nil :location-name
                         "clusterOperationInfoList")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-list-cluster-operations-response-next-token
                         :shape "__string" :location common-lisp:nil
                         :location-name "nextToken"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-cluster-operations-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-cluster-operations-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-cluster-operations-response
                    'make-list-cluster-operations-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-cluster-operations-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-cluster-operations-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cluster-operation-info-list))
      (common-lisp:list
       (common-lisp:cons "ClusterOperationInfoList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-cluster-operations-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-cluster-operations-v2response common-lisp:nil
                       ((cluster-operation-info-list :initarg
                         :cluster-operation-info-list :initform common-lisp:nil
                         :type
                         (common-lisp:or |__listOfClusterOperationV2Summary|
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-cluster-operations-v2response-cluster-operation-info-list
                         :shape "__listOfClusterOperationV2Summary" :location
                         common-lisp:nil :location-name
                         "clusterOperationInfoList")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-list-cluster-operations-v2response-next-token
                         :shape "__string" :location common-lisp:nil
                         :location-name "nextToken"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-cluster-operations-v2response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-cluster-operations-v2response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-cluster-operations-v2response
                    'make-list-cluster-operations-v2response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-cluster-operations-v2response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-cluster-operations-v2response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cluster-operation-info-list))
      (common-lisp:list
       (common-lisp:cons "ClusterOperationInfoList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-cluster-operations-v2response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-clusters-v2request common-lisp:nil
                       ((cluster-name-filter :initarg :cluster-name-filter
                         :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-list-clusters-v2request-cluster-name-filter
                         :shape "__string" :location "querystring"
                         :location-name "clusterNameFilter")
                        (cluster-type-filter :initarg :cluster-type-filter
                         :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-list-clusters-v2request-cluster-type-filter
                         :shape "__string" :location "querystring"
                         :location-name "clusterTypeFilter")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-clusters-v2request-max-results
                         :shape "MaxResults" :location "querystring"
                         :location-name "maxResults")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-list-clusters-v2request-next-token :shape
                         "__string" :location "querystring" :location-name
                         "nextToken"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-clusters-v2request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-clusters-v2request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-clusters-v2request 'make-list-clusters-v2request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-clusters-v2request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-clusters-v2request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-clusters-v2request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-clusters-v2response common-lisp:nil
                       ((cluster-info-list :initarg :cluster-info-list
                         :initform common-lisp:nil :type
                         (common-lisp:or |__listOfCluster| common-lisp:null)
                         :accessor
                         struct-shape-list-clusters-v2response-cluster-info-list
                         :shape "__listOfCluster" :location common-lisp:nil
                         :location-name "clusterInfoList")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-list-clusters-v2response-next-token
                         :shape "__string" :location common-lisp:nil
                         :location-name "nextToken"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-clusters-v2response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-clusters-v2response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-clusters-v2response 'make-list-clusters-v2response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-clusters-v2response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-clusters-v2response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-info-list))
      (common-lisp:list
       (common-lisp:cons "ClusterInfoList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-clusters-v2response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-cluster-v2request common-lisp:nil
                       ((cluster-name :initarg :cluster-name :initform
                         (common-lisp:error ":cluster-name is required") :type
                         (common-lisp:or |__stringMin1Max64| common-lisp:null)
                         :accessor
                         struct-shape-create-cluster-v2request-cluster-name
                         :shape "__stringMin1Max64" :location common-lisp:nil
                         :location-name "clusterName")
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or |__mapOf__string| common-lisp:null)
                         :accessor struct-shape-create-cluster-v2request-tags
                         :shape "__mapOf__string" :location common-lisp:nil
                         :location-name "tags")
                        (provisioned :initarg :provisioned :initform
                         common-lisp:nil :type
                         (common-lisp:or provisioned-request common-lisp:null)
                         :accessor
                         struct-shape-create-cluster-v2request-provisioned
                         :shape "ProvisionedRequest" :location common-lisp:nil
                         :location-name "provisioned")
                        (serverless :initarg :serverless :initform
                         common-lisp:nil :type
                         (common-lisp:or serverless-request common-lisp:null)
                         :accessor
                         struct-shape-create-cluster-v2request-serverless
                         :shape "ServerlessRequest" :location common-lisp:nil
                         :location-name "serverless"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-cluster-v2request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-cluster-v2request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-cluster-v2request 'make-create-cluster-v2request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-cluster-v2request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-cluster-v2request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-name))
      (common-lisp:list
       (common-lisp:cons "ClusterName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'provisioned))
      (common-lisp:list
       (common-lisp:cons "Provisioned"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'serverless))
      (common-lisp:list
       (common-lisp:cons "Serverless"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-cluster-v2request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-cluster-v2response common-lisp:nil
                       ((cluster-arn :initarg :cluster-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-create-cluster-v2response-cluster-arn
                         :shape "__string" :location common-lisp:nil
                         :location-name "clusterArn")
                        (cluster-name :initarg :cluster-name :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-create-cluster-v2response-cluster-name
                         :shape "__string" :location common-lisp:nil
                         :location-name "clusterName")
                        (state :initarg :state :initform common-lisp:nil :type
                         (common-lisp:or cluster-state common-lisp:null)
                         :accessor struct-shape-create-cluster-v2response-state
                         :shape "ClusterState" :location common-lisp:nil
                         :location-name "state")
                        (cluster-type :initarg :cluster-type :initform
                         common-lisp:nil :type
                         (common-lisp:or cluster-type common-lisp:null)
                         :accessor
                         struct-shape-create-cluster-v2response-cluster-type
                         :shape "ClusterType" :location common-lisp:nil
                         :location-name "clusterType"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-cluster-v2response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-cluster-v2response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-cluster-v2response
                    'make-create-cluster-v2response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-cluster-v2response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-cluster-v2response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-arn))
      (common-lisp:list
       (common-lisp:cons "ClusterArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-name))
      (common-lisp:list
       (common-lisp:cons "ClusterName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-type))
      (common-lisp:list
       (common-lisp:cons "ClusterType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-cluster-v2response))
   common-lisp:nil))
(common-lisp:deftype customer-action-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass describe-cluster-v2request common-lisp:nil
                       ((cluster-arn :initarg :cluster-arn :initform
                         (common-lisp:error ":cluster-arn is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-describe-cluster-v2request-cluster-arn
                         :shape "__string" :location "uri" :location-name
                         "clusterArn"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-cluster-v2request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-cluster-v2request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-cluster-v2request
                    'make-describe-cluster-v2request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-cluster-v2request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-cluster-v2request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-cluster-v2request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-cluster-v2response common-lisp:nil
                       ((cluster-info :initarg :cluster-info :initform
                         common-lisp:nil :type
                         (common-lisp:or cluster common-lisp:null) :accessor
                         struct-shape-describe-cluster-v2response-cluster-info
                         :shape "Cluster" :location common-lisp:nil
                         :location-name "clusterInfo"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-cluster-v2response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-cluster-v2response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-cluster-v2response
                    'make-describe-cluster-v2response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-cluster-v2response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-cluster-v2response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-info))
      (common-lisp:list
       (common-lisp:cons "ClusterInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-cluster-v2response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-cluster-policy-request common-lisp:nil
                       ((cluster-arn :initarg :cluster-arn :initform
                         (common-lisp:error ":cluster-arn is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-delete-cluster-policy-request-cluster-arn
                         :shape "__string" :location "uri" :location-name
                         "clusterArn"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-cluster-policy-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-cluster-policy-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-cluster-policy-request
                    'make-delete-cluster-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-cluster-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-cluster-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-cluster-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-cluster-policy-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-cluster-policy-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-cluster-policy-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-cluster-policy-response
                    'make-delete-cluster-policy-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-cluster-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-cluster-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-cluster-policy-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-cluster-policy-request common-lisp:nil
                       ((cluster-arn :initarg :cluster-arn :initform
                         (common-lisp:error ":cluster-arn is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-get-cluster-policy-request-cluster-arn
                         :shape "__string" :location "uri" :location-name
                         "clusterArn"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-cluster-policy-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-cluster-policy-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-cluster-policy-request
                    'make-get-cluster-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-cluster-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-cluster-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-cluster-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-cluster-policy-response common-lisp:nil
                       ((current-version :initarg :current-version :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-get-cluster-policy-response-current-version
                         :shape "__string" :location common-lisp:nil
                         :location-name "currentVersion")
                        (policy :initarg :policy :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-get-cluster-policy-response-policy :shape
                         "__string" :location common-lisp:nil :location-name
                         "policy"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-cluster-policy-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-cluster-policy-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-cluster-policy-response
                    'make-get-cluster-policy-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-cluster-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-cluster-policy-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'current-version))
      (common-lisp:list
       (common-lisp:cons "CurrentVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy))
      (common-lisp:list
       (common-lisp:cons "Policy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-cluster-policy-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-cluster-policy-request common-lisp:nil
                       ((cluster-arn :initarg :cluster-arn :initform
                         (common-lisp:error ":cluster-arn is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-put-cluster-policy-request-cluster-arn
                         :shape "__string" :location "uri" :location-name
                         "clusterArn")
                        (current-version :initarg :current-version :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-put-cluster-policy-request-current-version
                         :shape "__string" :location common-lisp:nil
                         :location-name "currentVersion")
                        (policy :initarg :policy :initform
                         (common-lisp:error ":policy is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-put-cluster-policy-request-policy :shape
                         "__string" :location common-lisp:nil :location-name
                         "policy"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-cluster-policy-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'put-cluster-policy-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-cluster-policy-request
                    'make-put-cluster-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-cluster-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-cluster-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'current-version))
      (common-lisp:list
       (common-lisp:cons "CurrentVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy))
      (common-lisp:list
       (common-lisp:cons "Policy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-cluster-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-cluster-policy-response common-lisp:nil
                       ((current-version :initarg :current-version :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-put-cluster-policy-response-current-version
                         :shape "__string" :location common-lisp:nil
                         :location-name "currentVersion"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-cluster-policy-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'put-cluster-policy-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-cluster-policy-response
                    'make-put-cluster-policy-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-cluster-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-cluster-policy-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'current-version))
      (common-lisp:list
       (common-lisp:cons "CurrentVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-cluster-policy-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass cluster common-lisp:nil
                       ((active-operation-arn :initarg :active-operation-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-cluster-active-operation-arn :shape
                         "__string" :location common-lisp:nil :location-name
                         "activeOperationArn")
                        (cluster-type :initarg :cluster-type :initform
                         common-lisp:nil :type
                         (common-lisp:or cluster-type common-lisp:null)
                         :accessor struct-shape-cluster-cluster-type :shape
                         "ClusterType" :location common-lisp:nil :location-name
                         "clusterType")
                        (cluster-arn :initarg :cluster-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-cluster-cluster-arn :shape "__string"
                         :location common-lisp:nil :location-name "clusterArn")
                        (cluster-name :initarg :cluster-name :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-cluster-cluster-name :shape "__string"
                         :location common-lisp:nil :location-name
                         "clusterName")
                        (creation-time :initarg :creation-time :initform
                         common-lisp:nil :type
                         (common-lisp:or |__timestampIso8601| common-lisp:null)
                         :accessor struct-shape-cluster-creation-time :shape
                         "__timestampIso8601" :location common-lisp:nil
                         :location-name "creationTime")
                        (current-version :initarg :current-version :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-cluster-current-version :shape "__string"
                         :location common-lisp:nil :location-name
                         "currentVersion")
                        (state :initarg :state :initform common-lisp:nil :type
                         (common-lisp:or cluster-state common-lisp:null)
                         :accessor struct-shape-cluster-state :shape
                         "ClusterState" :location common-lisp:nil
                         :location-name "state")
                        (state-info :initarg :state-info :initform
                         common-lisp:nil :type
                         (common-lisp:or state-info common-lisp:null) :accessor
                         struct-shape-cluster-state-info :shape "StateInfo"
                         :location common-lisp:nil :location-name "stateInfo")
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or |__mapOf__string| common-lisp:null)
                         :accessor struct-shape-cluster-tags :shape
                         "__mapOf__string" :location common-lisp:nil
                         :location-name "tags")
                        (provisioned :initarg :provisioned :initform
                         common-lisp:nil :type
                         (common-lisp:or provisioned common-lisp:null)
                         :accessor struct-shape-cluster-provisioned :shape
                         "Provisioned" :location common-lisp:nil :location-name
                         "provisioned")
                        (serverless :initarg :serverless :initform
                         common-lisp:nil :type
                         (common-lisp:or serverless common-lisp:null) :accessor
                         struct-shape-cluster-serverless :shape "Serverless"
                         :location common-lisp:nil :location-name
                         "serverless"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-cluster
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'cluster
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'cluster 'make-cluster))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input cluster))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input cluster))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'active-operation-arn))
      (common-lisp:list
       (common-lisp:cons "ActiveOperationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-type))
      (common-lisp:list
       (common-lisp:cons "ClusterType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-arn))
      (common-lisp:list
       (common-lisp:cons "ClusterArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-name))
      (common-lisp:list
       (common-lisp:cons "ClusterName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'current-version))
      (common-lisp:list
       (common-lisp:cons "CurrentVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state-info))
      (common-lisp:list
       (common-lisp:cons "StateInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'provisioned))
      (common-lisp:list
       (common-lisp:cons "Provisioned"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'serverless))
      (common-lisp:list
       (common-lisp:cons "Serverless"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input cluster))
   common-lisp:nil))
(common-lisp:deftype cluster-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass provisioned-request common-lisp:nil
                       ((broker-node-group-info :initarg
                         :broker-node-group-info :initform
                         (common-lisp:error
                          ":broker-node-group-info is required")
                         :type
                         (common-lisp:or broker-node-group-info
                                         common-lisp:null)
                         :accessor
                         struct-shape-provisioned-request-broker-node-group-info
                         :shape "BrokerNodeGroupInfo" :location common-lisp:nil
                         :location-name "brokerNodeGroupInfo")
                        (client-authentication :initarg :client-authentication
                         :initform common-lisp:nil :type
                         (common-lisp:or client-authentication
                                         common-lisp:null)
                         :accessor
                         struct-shape-provisioned-request-client-authentication
                         :shape "ClientAuthentication" :location
                         common-lisp:nil :location-name "clientAuthentication")
                        (configuration-info :initarg :configuration-info
                         :initform common-lisp:nil :type
                         (common-lisp:or configuration-info common-lisp:null)
                         :accessor
                         struct-shape-provisioned-request-configuration-info
                         :shape "ConfigurationInfo" :location common-lisp:nil
                         :location-name "configurationInfo")
                        (encryption-info :initarg :encryption-info :initform
                         common-lisp:nil :type
                         (common-lisp:or encryption-info common-lisp:null)
                         :accessor
                         struct-shape-provisioned-request-encryption-info
                         :shape "EncryptionInfo" :location common-lisp:nil
                         :location-name "encryptionInfo")
                        (enhanced-monitoring :initarg :enhanced-monitoring
                         :initform common-lisp:nil :type
                         (common-lisp:or enhanced-monitoring common-lisp:null)
                         :accessor
                         struct-shape-provisioned-request-enhanced-monitoring
                         :shape "EnhancedMonitoring" :location common-lisp:nil
                         :location-name "enhancedMonitoring")
                        (open-monitoring :initarg :open-monitoring :initform
                         common-lisp:nil :type
                         (common-lisp:or open-monitoring-info common-lisp:null)
                         :accessor
                         struct-shape-provisioned-request-open-monitoring
                         :shape "OpenMonitoringInfo" :location common-lisp:nil
                         :location-name "openMonitoring")
                        (kafka-version :initarg :kafka-version :initform
                         (common-lisp:error ":kafka-version is required") :type
                         (common-lisp:or |__stringMin1Max128| common-lisp:null)
                         :accessor
                         struct-shape-provisioned-request-kafka-version :shape
                         "__stringMin1Max128" :location common-lisp:nil
                         :location-name "kafkaVersion")
                        (logging-info :initarg :logging-info :initform
                         common-lisp:nil :type
                         (common-lisp:or logging-info common-lisp:null)
                         :accessor
                         struct-shape-provisioned-request-logging-info :shape
                         "LoggingInfo" :location common-lisp:nil :location-name
                         "loggingInfo")
                        (number-of-broker-nodes :initarg
                         :number-of-broker-nodes :initform
                         (common-lisp:error
                          ":number-of-broker-nodes is required")
                         :type
                         (common-lisp:or |__integerMin1Max15| common-lisp:null)
                         :accessor
                         struct-shape-provisioned-request-number-of-broker-nodes
                         :shape "__integerMin1Max15" :location common-lisp:nil
                         :location-name "numberOfBrokerNodes")
                        (storage-mode :initarg :storage-mode :initform
                         common-lisp:nil :type
                         (common-lisp:or storage-mode common-lisp:null)
                         :accessor
                         struct-shape-provisioned-request-storage-mode :shape
                         "StorageMode" :location common-lisp:nil :location-name
                         "storageMode"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-provisioned-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'provisioned-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'provisioned-request 'make-provisioned-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input provisioned-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input provisioned-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'broker-node-group-info))
      (common-lisp:list
       (common-lisp:cons "BrokerNodeGroupInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-authentication))
      (common-lisp:list
       (common-lisp:cons "ClientAuthentication"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration-info))
      (common-lisp:list
       (common-lisp:cons "ConfigurationInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encryption-info))
      (common-lisp:list
       (common-lisp:cons "EncryptionInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enhanced-monitoring))
      (common-lisp:list
       (common-lisp:cons "EnhancedMonitoring"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'open-monitoring))
      (common-lisp:list
       (common-lisp:cons "OpenMonitoring"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kafka-version))
      (common-lisp:list
       (common-lisp:cons "KafkaVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'logging-info))
      (common-lisp:list
       (common-lisp:cons "LoggingInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'number-of-broker-nodes))
      (common-lisp:list
       (common-lisp:cons "NumberOfBrokerNodes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-mode))
      (common-lisp:list
       (common-lisp:cons "StorageMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input provisioned-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass provisioned common-lisp:nil
                       ((broker-node-group-info :initarg
                         :broker-node-group-info :initform
                         (common-lisp:error
                          ":broker-node-group-info is required")
                         :type
                         (common-lisp:or broker-node-group-info
                                         common-lisp:null)
                         :accessor
                         struct-shape-provisioned-broker-node-group-info :shape
                         "BrokerNodeGroupInfo" :location common-lisp:nil
                         :location-name "brokerNodeGroupInfo")
                        (current-broker-software-info :initarg
                         :current-broker-software-info :initform
                         common-lisp:nil :type
                         (common-lisp:or broker-software-info common-lisp:null)
                         :accessor
                         struct-shape-provisioned-current-broker-software-info
                         :shape "BrokerSoftwareInfo" :location common-lisp:nil
                         :location-name "currentBrokerSoftwareInfo")
                        (client-authentication :initarg :client-authentication
                         :initform common-lisp:nil :type
                         (common-lisp:or client-authentication
                                         common-lisp:null)
                         :accessor
                         struct-shape-provisioned-client-authentication :shape
                         "ClientAuthentication" :location common-lisp:nil
                         :location-name "clientAuthentication")
                        (encryption-info :initarg :encryption-info :initform
                         common-lisp:nil :type
                         (common-lisp:or encryption-info common-lisp:null)
                         :accessor struct-shape-provisioned-encryption-info
                         :shape "EncryptionInfo" :location common-lisp:nil
                         :location-name "encryptionInfo")
                        (enhanced-monitoring :initarg :enhanced-monitoring
                         :initform common-lisp:nil :type
                         (common-lisp:or enhanced-monitoring common-lisp:null)
                         :accessor struct-shape-provisioned-enhanced-monitoring
                         :shape "EnhancedMonitoring" :location common-lisp:nil
                         :location-name "enhancedMonitoring")
                        (open-monitoring :initarg :open-monitoring :initform
                         common-lisp:nil :type
                         (common-lisp:or open-monitoring-info common-lisp:null)
                         :accessor struct-shape-provisioned-open-monitoring
                         :shape "OpenMonitoringInfo" :location common-lisp:nil
                         :location-name "openMonitoring")
                        (logging-info :initarg :logging-info :initform
                         common-lisp:nil :type
                         (common-lisp:or logging-info common-lisp:null)
                         :accessor struct-shape-provisioned-logging-info :shape
                         "LoggingInfo" :location common-lisp:nil :location-name
                         "loggingInfo")
                        (number-of-broker-nodes :initarg
                         :number-of-broker-nodes :initform
                         (common-lisp:error
                          ":number-of-broker-nodes is required")
                         :type
                         (common-lisp:or |__integerMin1Max15| common-lisp:null)
                         :accessor
                         struct-shape-provisioned-number-of-broker-nodes :shape
                         "__integerMin1Max15" :location common-lisp:nil
                         :location-name "numberOfBrokerNodes")
                        (zookeeper-connect-string :initarg
                         :zookeeper-connect-string :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-provisioned-zookeeper-connect-string
                         :shape "__string" :location common-lisp:nil
                         :location-name "zookeeperConnectString")
                        (zookeeper-connect-string-tls :initarg
                         :zookeeper-connect-string-tls :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-provisioned-zookeeper-connect-string-tls
                         :shape "__string" :location common-lisp:nil
                         :location-name "zookeeperConnectStringTls")
                        (storage-mode :initarg :storage-mode :initform
                         common-lisp:nil :type
                         (common-lisp:or storage-mode common-lisp:null)
                         :accessor struct-shape-provisioned-storage-mode :shape
                         "StorageMode" :location common-lisp:nil :location-name
                         "storageMode")
                        (customer-action-status :initarg
                         :customer-action-status :initform common-lisp:nil
                         :type
                         (common-lisp:or customer-action-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-provisioned-customer-action-status :shape
                         "CustomerActionStatus" :location common-lisp:nil
                         :location-name "customerActionStatus"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-provisioned
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'provisioned
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'provisioned 'make-provisioned))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input provisioned))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input provisioned))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'broker-node-group-info))
      (common-lisp:list
       (common-lisp:cons "BrokerNodeGroupInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'current-broker-software-info))
      (common-lisp:list
       (common-lisp:cons "CurrentBrokerSoftwareInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-authentication))
      (common-lisp:list
       (common-lisp:cons "ClientAuthentication"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encryption-info))
      (common-lisp:list
       (common-lisp:cons "EncryptionInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enhanced-monitoring))
      (common-lisp:list
       (common-lisp:cons "EnhancedMonitoring"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'open-monitoring))
      (common-lisp:list
       (common-lisp:cons "OpenMonitoring"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'logging-info))
      (common-lisp:list
       (common-lisp:cons "LoggingInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'number-of-broker-nodes))
      (common-lisp:list
       (common-lisp:cons "NumberOfBrokerNodes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'zookeeper-connect-string))
      (common-lisp:list
       (common-lisp:cons "ZookeeperConnectString"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'zookeeper-connect-string-tls))
      (common-lisp:list
       (common-lisp:cons "ZookeeperConnectStringTls"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-mode))
      (common-lisp:list
       (common-lisp:cons "StorageMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'customer-action-status))
      (common-lisp:list
       (common-lisp:cons "CustomerActionStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input provisioned))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass vpc-config common-lisp:nil
                       ((subnet-ids :initarg :subnet-ids :initform
                         (common-lisp:error ":subnet-ids is required") :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor struct-shape-vpc-config-subnet-ids :shape
                         "__listOf__string" :location common-lisp:nil
                         :location-name "subnetIds")
                        (security-group-ids :initarg :security-group-ids
                         :initform common-lisp:nil :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor struct-shape-vpc-config-security-group-ids
                         :shape "__listOf__string" :location common-lisp:nil
                         :location-name "securityGroupIds"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-vpc-config
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'vpc-config
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'vpc-config 'make-vpc-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input vpc-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input vpc-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-ids))
      (common-lisp:list
       (common-lisp:cons "SubnetIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-group-ids))
      (common-lisp:list
       (common-lisp:cons "SecurityGroupIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input vpc-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass serverless-request common-lisp:nil
                       ((vpc-configs :initarg :vpc-configs :initform
                         (common-lisp:error ":vpc-configs is required") :type
                         (common-lisp:or |__listOfVpcConfig| common-lisp:null)
                         :accessor struct-shape-serverless-request-vpc-configs
                         :shape "__listOfVpcConfig" :location common-lisp:nil
                         :location-name "vpcConfigs")
                        (client-authentication :initarg :client-authentication
                         :initform common-lisp:nil :type
                         (common-lisp:or serverless-client-authentication
                                         common-lisp:null)
                         :accessor
                         struct-shape-serverless-request-client-authentication
                         :shape "ServerlessClientAuthentication" :location
                         common-lisp:nil :location-name
                         "clientAuthentication"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-serverless-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'serverless-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'serverless-request 'make-serverless-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input serverless-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input serverless-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-configs))
      (common-lisp:list
       (common-lisp:cons "VpcConfigs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-authentication))
      (common-lisp:list
       (common-lisp:cons "ClientAuthentication"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input serverless-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass serverless-client-authentication common-lisp:nil
                       ((sasl :initarg :sasl :initform common-lisp:nil :type
                         (common-lisp:or serverless-sasl common-lisp:null)
                         :accessor
                         struct-shape-serverless-client-authentication-sasl
                         :shape "ServerlessSasl" :location common-lisp:nil
                         :location-name "sasl"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-serverless-client-authentication
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'serverless-client-authentication
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'serverless-client-authentication
                    'make-serverless-client-authentication))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          serverless-client-authentication))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          serverless-client-authentication))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sasl))
      (common-lisp:list
       (common-lisp:cons "Sasl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          serverless-client-authentication))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass serverless-sasl common-lisp:nil
                       ((iam :initarg :iam :initform common-lisp:nil :type
                         (common-lisp:or iam common-lisp:null) :accessor
                         struct-shape-serverless-sasl-iam :shape "Iam"
                         :location common-lisp:nil :location-name "iam"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-serverless-sasl
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'serverless-sasl
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'serverless-sasl 'make-serverless-sasl))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input serverless-sasl))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input serverless-sasl))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iam))
      (common-lisp:list
       (common-lisp:cons "Iam"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input serverless-sasl))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass serverless common-lisp:nil
                       ((vpc-configs :initarg :vpc-configs :initform
                         (common-lisp:error ":vpc-configs is required") :type
                         (common-lisp:or |__listOfVpcConfig| common-lisp:null)
                         :accessor struct-shape-serverless-vpc-configs :shape
                         "__listOfVpcConfig" :location common-lisp:nil
                         :location-name "vpcConfigs")
                        (client-authentication :initarg :client-authentication
                         :initform common-lisp:nil :type
                         (common-lisp:or serverless-client-authentication
                                         common-lisp:null)
                         :accessor
                         struct-shape-serverless-client-authentication :shape
                         "ServerlessClientAuthentication" :location
                         common-lisp:nil :location-name
                         "clientAuthentication"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-serverless
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'serverless
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'serverless 'make-serverless))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input serverless))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input serverless))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-configs))
      (common-lisp:list
       (common-lisp:cons "VpcConfigs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-authentication))
      (common-lisp:list
       (common-lisp:cons "ClientAuthentication"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input serverless))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-clusters-request common-lisp:nil
                       ((cluster-name-filter :initarg :cluster-name-filter
                         :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-list-clusters-request-cluster-name-filter
                         :shape "__string" :location "querystring"
                         :location-name "clusterNameFilter")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-clusters-request-max-results :shape
                         "MaxResults" :location "querystring" :location-name
                         "maxResults")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-list-clusters-request-next-token :shape
                         "__string" :location "querystring" :location-name
                         "nextToken"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-clusters-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-clusters-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-clusters-request 'make-list-clusters-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-clusters-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-clusters-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-clusters-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-clusters-response common-lisp:nil
                       ((cluster-info-list :initarg :cluster-info-list
                         :initform common-lisp:nil :type
                         (common-lisp:or |__listOfClusterInfo|
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-clusters-response-cluster-info-list
                         :shape "__listOfClusterInfo" :location common-lisp:nil
                         :location-name "clusterInfoList")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-list-clusters-response-next-token :shape
                         "__string" :location common-lisp:nil :location-name
                         "nextToken"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-clusters-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-clusters-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-clusters-response 'make-list-clusters-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-clusters-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-clusters-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-info-list))
      (common-lisp:list
       (common-lisp:cons "ClusterInfoList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-clusters-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-configuration-revisions-request common-lisp:nil
                       ((arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-list-configuration-revisions-request-arn
                         :shape "__string" :location "uri" :location-name
                         "arn")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-configuration-revisions-request-max-results
                         :shape "MaxResults" :location "querystring"
                         :location-name "maxResults")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-list-configuration-revisions-request-next-token
                         :shape "__string" :location "querystring"
                         :location-name "nextToken"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-configuration-revisions-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-configuration-revisions-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-configuration-revisions-request
                    'make-list-configuration-revisions-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-configuration-revisions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-configuration-revisions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-configuration-revisions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-configuration-revisions-response common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-list-configuration-revisions-response-next-token
                         :shape "__string" :location common-lisp:nil
                         :location-name "nextToken")
                        (revisions :initarg :revisions :initform
                         common-lisp:nil :type
                         (common-lisp:or |__listOfConfigurationRevision|
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-configuration-revisions-response-revisions
                         :shape "__listOfConfigurationRevision" :location
                         common-lisp:nil :location-name "revisions"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-configuration-revisions-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-configuration-revisions-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-configuration-revisions-response
                    'make-list-configuration-revisions-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-configuration-revisions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-configuration-revisions-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'revisions))
      (common-lisp:list
       (common-lisp:cons "Revisions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-configuration-revisions-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-configurations-request common-lisp:nil
                       ((max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-configurations-request-max-results
                         :shape "MaxResults" :location "querystring"
                         :location-name "maxResults")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-list-configurations-request-next-token
                         :shape "__string" :location "querystring"
                         :location-name "nextToken"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-configurations-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-configurations-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-configurations-request
                    'make-list-configurations-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-configurations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-configurations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-configurations-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-configurations-response common-lisp:nil
                       ((configurations :initarg :configurations :initform
                         common-lisp:nil :type
                         (common-lisp:or |__listOfConfiguration|
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-configurations-response-configurations
                         :shape "__listOfConfiguration" :location
                         common-lisp:nil :location-name "configurations")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-list-configurations-response-next-token
                         :shape "__string" :location common-lisp:nil
                         :location-name "nextToken"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-configurations-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-configurations-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-configurations-response
                    'make-list-configurations-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-configurations-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-configurations-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configurations))
      (common-lisp:list
       (common-lisp:cons "Configurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-configurations-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-kafka-versions-request common-lisp:nil
                       ((max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-kafka-versions-request-max-results
                         :shape "MaxResults" :location "querystring"
                         :location-name "maxResults")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-list-kafka-versions-request-next-token
                         :shape "__string" :location "querystring"
                         :location-name "nextToken"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-kafka-versions-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-kafka-versions-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-kafka-versions-request
                    'make-list-kafka-versions-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-kafka-versions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-kafka-versions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-kafka-versions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-kafka-versions-response common-lisp:nil
                       ((kafka-versions :initarg :kafka-versions :initform
                         common-lisp:nil :type
                         (common-lisp:or |__listOfKafkaVersion|
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-kafka-versions-response-kafka-versions
                         :shape "__listOfKafkaVersion" :location
                         common-lisp:nil :location-name "kafkaVersions")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-list-kafka-versions-response-next-token
                         :shape "__string" :location common-lisp:nil
                         :location-name "nextToken"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-kafka-versions-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-kafka-versions-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-kafka-versions-response
                    'make-list-kafka-versions-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-kafka-versions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-kafka-versions-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kafka-versions))
      (common-lisp:list
       (common-lisp:cons "KafkaVersions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-kafka-versions-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-nodes-request common-lisp:nil
                       ((cluster-arn :initarg :cluster-arn :initform
                         (common-lisp:error ":cluster-arn is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-list-nodes-request-cluster-arn :shape
                         "__string" :location "uri" :location-name
                         "clusterArn")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor struct-shape-list-nodes-request-max-results
                         :shape "MaxResults" :location "querystring"
                         :location-name "maxResults")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-list-nodes-request-next-token :shape
                         "__string" :location "querystring" :location-name
                         "nextToken"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-nodes-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-nodes-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-nodes-request 'make-list-nodes-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-nodes-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-nodes-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-nodes-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-nodes-response common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-list-nodes-response-next-token :shape
                         "__string" :location common-lisp:nil :location-name
                         "nextToken")
                        (node-info-list :initarg :node-info-list :initform
                         common-lisp:nil :type
                         (common-lisp:or |__listOfNodeInfo| common-lisp:null)
                         :accessor
                         struct-shape-list-nodes-response-node-info-list :shape
                         "__listOfNodeInfo" :location common-lisp:nil
                         :location-name "nodeInfoList"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-nodes-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-nodes-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-nodes-response 'make-list-nodes-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-nodes-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-nodes-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'node-info-list))
      (common-lisp:list
       (common-lisp:cons "NodeInfoList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-nodes-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-scram-secrets-request common-lisp:nil
                       ((cluster-arn :initarg :cluster-arn :initform
                         (common-lisp:error ":cluster-arn is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-list-scram-secrets-request-cluster-arn
                         :shape "__string" :location "uri" :location-name
                         "clusterArn")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-scram-secrets-request-max-results
                         :shape "MaxResults" :location "querystring"
                         :location-name "maxResults")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-list-scram-secrets-request-next-token
                         :shape "__string" :location "querystring"
                         :location-name "nextToken"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-scram-secrets-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-scram-secrets-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-scram-secrets-request
                    'make-list-scram-secrets-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-scram-secrets-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-scram-secrets-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-scram-secrets-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-scram-secrets-response common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-list-scram-secrets-response-next-token
                         :shape "__string" :location common-lisp:nil
                         :location-name "nextToken")
                        (secret-arn-list :initarg :secret-arn-list :initform
                         common-lisp:nil :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor
                         struct-shape-list-scram-secrets-response-secret-arn-list
                         :shape "__listOf__string" :location common-lisp:nil
                         :location-name "secretArnList"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-scram-secrets-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-scram-secrets-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-scram-secrets-response
                    'make-list-scram-secrets-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-scram-secrets-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-scram-secrets-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'secret-arn-list))
      (common-lisp:list
       (common-lisp:cons "SecretArnList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-scram-secrets-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-request common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resource-arn is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-list-tags-for-resource-request-resource-arn
                         :shape "__string" :location "uri" :location-name
                         "resourceArn"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-tags-for-resource-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-request
                    'make-list-tags-for-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-response common-lisp:nil
                       ((tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or |__mapOf__string| common-lisp:null)
                         :accessor
                         struct-shape-list-tags-for-resource-response-tags
                         :shape "__mapOf__string" :location common-lisp:nil
                         :location-name "tags"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-tags-for-resource-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-response
                    'make-list-tags-for-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   common-lisp:nil))
(common-lisp:deftype max-results () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass logging-info common-lisp:nil
                       ((broker-logs :initarg :broker-logs :initform
                         (common-lisp:error ":broker-logs is required") :type
                         (common-lisp:or broker-logs common-lisp:null)
                         :accessor struct-shape-logging-info-broker-logs :shape
                         "BrokerLogs" :location common-lisp:nil :location-name
                         "brokerLogs"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-logging-info
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'logging-info
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'logging-info 'make-logging-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input logging-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input logging-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'broker-logs))
      (common-lisp:list
       (common-lisp:cons "BrokerLogs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input logging-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-client-vpc-connections-request common-lisp:nil
                       ((cluster-arn :initarg :cluster-arn :initform
                         (common-lisp:error ":cluster-arn is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-list-client-vpc-connections-request-cluster-arn
                         :shape "__string" :location "uri" :location-name
                         "clusterArn")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-client-vpc-connections-request-max-results
                         :shape "MaxResults" :location "querystring"
                         :location-name "maxResults")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-list-client-vpc-connections-request-next-token
                         :shape "__string" :location "querystring"
                         :location-name "nextToken"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-client-vpc-connections-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-client-vpc-connections-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-client-vpc-connections-request
                    'make-list-client-vpc-connections-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-client-vpc-connections-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-client-vpc-connections-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-client-vpc-connections-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-client-vpc-connections-response common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-list-client-vpc-connections-response-next-token
                         :shape "__string" :location common-lisp:nil
                         :location-name "nextToken")
                        (client-vpc-connections :initarg
                         :client-vpc-connections :initform common-lisp:nil
                         :type
                         (common-lisp:or |__listOfClientVpcConnection|
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-client-vpc-connections-response-client-vpc-connections
                         :shape "__listOfClientVpcConnection" :location
                         common-lisp:nil :location-name
                         "clientVpcConnections"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-client-vpc-connections-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-client-vpc-connections-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-client-vpc-connections-response
                    'make-list-client-vpc-connections-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-client-vpc-connections-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-client-vpc-connections-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-vpc-connections))
      (common-lisp:list
       (common-lisp:cons "ClientVpcConnections"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-client-vpc-connections-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-replicators-request common-lisp:nil
                       ((max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-replicators-request-max-results
                         :shape "MaxResults" :location "querystring"
                         :location-name "maxResults")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-list-replicators-request-next-token
                         :shape "__string" :location "querystring"
                         :location-name "nextToken")
                        (replicator-name-filter :initarg
                         :replicator-name-filter :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-list-replicators-request-replicator-name-filter
                         :shape "__string" :location "querystring"
                         :location-name "replicatorNameFilter"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-replicators-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-replicators-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-replicators-request 'make-list-replicators-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-replicators-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-replicators-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-replicators-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-replicators-response common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-list-replicators-response-next-token
                         :shape "__string" :location common-lisp:nil
                         :location-name "nextToken")
                        (replicators :initarg :replicators :initform
                         common-lisp:nil :type
                         (common-lisp:or |__listOfReplicatorSummary|
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-replicators-response-replicators
                         :shape "__listOfReplicatorSummary" :location
                         common-lisp:nil :location-name "replicators"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-replicators-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-replicators-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-replicators-response
                    'make-list-replicators-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-replicators-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-replicators-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'replicators))
      (common-lisp:list
       (common-lisp:cons "Replicators"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-replicators-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-vpc-connections-request common-lisp:nil
                       ((max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-vpc-connections-request-max-results
                         :shape "MaxResults" :location "querystring"
                         :location-name "maxResults")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-list-vpc-connections-request-next-token
                         :shape "__string" :location "querystring"
                         :location-name "nextToken"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-vpc-connections-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-vpc-connections-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-vpc-connections-request
                    'make-list-vpc-connections-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-vpc-connections-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-vpc-connections-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-vpc-connections-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-vpc-connections-response common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-list-vpc-connections-response-next-token
                         :shape "__string" :location common-lisp:nil
                         :location-name "nextToken")
                        (vpc-connections :initarg :vpc-connections :initform
                         common-lisp:nil :type
                         (common-lisp:or |__listOfVpcConnection|
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-vpc-connections-response-vpc-connections
                         :shape "__listOfVpcConnection" :location
                         common-lisp:nil :location-name "vpcConnections"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-vpc-connections-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-vpc-connections-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-vpc-connections-response
                    'make-list-vpc-connections-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-vpc-connections-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-vpc-connections-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-connections))
      (common-lisp:list
       (common-lisp:cons "VpcConnections"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-vpc-connections-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass reject-client-vpc-connection-request common-lisp:nil
                       ((cluster-arn :initarg :cluster-arn :initform
                         (common-lisp:error ":cluster-arn is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-reject-client-vpc-connection-request-cluster-arn
                         :shape "__string" :location "uri" :location-name
                         "clusterArn")
                        (vpc-connection-arn :initarg :vpc-connection-arn
                         :initform
                         (common-lisp:error ":vpc-connection-arn is required")
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-reject-client-vpc-connection-request-vpc-connection-arn
                         :shape "__string" :location common-lisp:nil
                         :location-name "vpcConnectionArn"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-reject-client-vpc-connection-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'reject-client-vpc-connection-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'reject-client-vpc-connection-request
                    'make-reject-client-vpc-connection-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reject-client-vpc-connection-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reject-client-vpc-connection-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-connection-arn))
      (common-lisp:list
       (common-lisp:cons "VpcConnectionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reject-client-vpc-connection-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass reject-client-vpc-connection-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-reject-client-vpc-connection-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'reject-client-vpc-connection-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'reject-client-vpc-connection-response
                    'make-reject-client-vpc-connection-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reject-client-vpc-connection-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reject-client-vpc-connection-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reject-client-vpc-connection-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass mutable-cluster-info common-lisp:nil
                       ((broker-ebsvolume-info :initarg :broker-ebsvolume-info
                         :initform common-lisp:nil :type
                         (common-lisp:or |__listOfBrokerEBSVolumeInfo|
                                         common-lisp:null)
                         :accessor
                         struct-shape-mutable-cluster-info-broker-ebsvolume-info
                         :shape "__listOfBrokerEBSVolumeInfo" :location
                         common-lisp:nil :location-name "brokerEBSVolumeInfo")
                        (configuration-info :initarg :configuration-info
                         :initform common-lisp:nil :type
                         (common-lisp:or configuration-info common-lisp:null)
                         :accessor
                         struct-shape-mutable-cluster-info-configuration-info
                         :shape "ConfigurationInfo" :location common-lisp:nil
                         :location-name "configurationInfo")
                        (number-of-broker-nodes :initarg
                         :number-of-broker-nodes :initform common-lisp:nil
                         :type (common-lisp:or |__integer| common-lisp:null)
                         :accessor
                         struct-shape-mutable-cluster-info-number-of-broker-nodes
                         :shape "__integer" :location common-lisp:nil
                         :location-name "numberOfBrokerNodes")
                        (open-monitoring :initarg :open-monitoring :initform
                         common-lisp:nil :type
                         (common-lisp:or open-monitoring common-lisp:null)
                         :accessor
                         struct-shape-mutable-cluster-info-open-monitoring
                         :shape "OpenMonitoring" :location common-lisp:nil
                         :location-name "openMonitoring")
                        (enhanced-monitoring :initarg :enhanced-monitoring
                         :initform common-lisp:nil :type
                         (common-lisp:or enhanced-monitoring common-lisp:null)
                         :accessor
                         struct-shape-mutable-cluster-info-enhanced-monitoring
                         :shape "EnhancedMonitoring" :location common-lisp:nil
                         :location-name "enhancedMonitoring")
                        (kafka-version :initarg :kafka-version :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-mutable-cluster-info-kafka-version :shape
                         "__string" :location common-lisp:nil :location-name
                         "kafkaVersion")
                        (logging-info :initarg :logging-info :initform
                         common-lisp:nil :type
                         (common-lisp:or logging-info common-lisp:null)
                         :accessor
                         struct-shape-mutable-cluster-info-logging-info :shape
                         "LoggingInfo" :location common-lisp:nil :location-name
                         "loggingInfo")
                        (instance-type :initarg :instance-type :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-mutable-cluster-info-instance-type :shape
                         "__string" :location common-lisp:nil :location-name
                         "instanceType")
                        (client-authentication :initarg :client-authentication
                         :initform common-lisp:nil :type
                         (common-lisp:or client-authentication
                                         common-lisp:null)
                         :accessor
                         struct-shape-mutable-cluster-info-client-authentication
                         :shape "ClientAuthentication" :location
                         common-lisp:nil :location-name "clientAuthentication")
                        (encryption-info :initarg :encryption-info :initform
                         common-lisp:nil :type
                         (common-lisp:or encryption-info common-lisp:null)
                         :accessor
                         struct-shape-mutable-cluster-info-encryption-info
                         :shape "EncryptionInfo" :location common-lisp:nil
                         :location-name "encryptionInfo")
                        (connectivity-info :initarg :connectivity-info
                         :initform common-lisp:nil :type
                         (common-lisp:or connectivity-info common-lisp:null)
                         :accessor
                         struct-shape-mutable-cluster-info-connectivity-info
                         :shape "ConnectivityInfo" :location common-lisp:nil
                         :location-name "connectivityInfo")
                        (storage-mode :initarg :storage-mode :initform
                         common-lisp:nil :type
                         (common-lisp:or storage-mode common-lisp:null)
                         :accessor
                         struct-shape-mutable-cluster-info-storage-mode :shape
                         "StorageMode" :location common-lisp:nil :location-name
                         "storageMode"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-mutable-cluster-info
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'mutable-cluster-info
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'mutable-cluster-info 'make-mutable-cluster-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input mutable-cluster-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input mutable-cluster-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'broker-ebsvolume-info))
      (common-lisp:list
       (common-lisp:cons "BrokerEBSVolumeInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration-info))
      (common-lisp:list
       (common-lisp:cons "ConfigurationInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'number-of-broker-nodes))
      (common-lisp:list
       (common-lisp:cons "NumberOfBrokerNodes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'open-monitoring))
      (common-lisp:list
       (common-lisp:cons "OpenMonitoring"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enhanced-monitoring))
      (common-lisp:list
       (common-lisp:cons "EnhancedMonitoring"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kafka-version))
      (common-lisp:list
       (common-lisp:cons "KafkaVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'logging-info))
      (common-lisp:list
       (common-lisp:cons "LoggingInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-type))
      (common-lisp:list
       (common-lisp:cons "InstanceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-authentication))
      (common-lisp:list
       (common-lisp:cons "ClientAuthentication"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encryption-info))
      (common-lisp:list
       (common-lisp:cons "EncryptionInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connectivity-info))
      (common-lisp:list
       (common-lisp:cons "ConnectivityInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-mode))
      (common-lisp:list
       (common-lisp:cons "StorageMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input mutable-cluster-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass node-info common-lisp:nil
                       ((added-to-cluster-time :initarg :added-to-cluster-time
                         :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-node-info-added-to-cluster-time :shape
                         "__string" :location common-lisp:nil :location-name
                         "addedToClusterTime")
                        (broker-node-info :initarg :broker-node-info :initform
                         common-lisp:nil :type
                         (common-lisp:or broker-node-info common-lisp:null)
                         :accessor struct-shape-node-info-broker-node-info
                         :shape "BrokerNodeInfo" :location common-lisp:nil
                         :location-name "brokerNodeInfo")
                        (instance-type :initarg :instance-type :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-node-info-instance-type :shape "__string"
                         :location common-lisp:nil :location-name
                         "instanceType")
                        (node-arn :initarg :node-arn :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor struct-shape-node-info-node-arn :shape
                         "__string" :location common-lisp:nil :location-name
                         "nodeARN")
                        (node-type :initarg :node-type :initform
                         common-lisp:nil :type
                         (common-lisp:or node-type common-lisp:null) :accessor
                         struct-shape-node-info-node-type :shape "NodeType"
                         :location common-lisp:nil :location-name "nodeType")
                        (zookeeper-node-info :initarg :zookeeper-node-info
                         :initform common-lisp:nil :type
                         (common-lisp:or zookeeper-node-info common-lisp:null)
                         :accessor struct-shape-node-info-zookeeper-node-info
                         :shape "ZookeeperNodeInfo" :location common-lisp:nil
                         :location-name "zookeeperNodeInfo"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-node-info
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'node-info
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'node-info 'make-node-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input node-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input node-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'added-to-cluster-time))
      (common-lisp:list
       (common-lisp:cons "AddedToClusterTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'broker-node-info))
      (common-lisp:list
       (common-lisp:cons "BrokerNodeInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-type))
      (common-lisp:list
       (common-lisp:cons "InstanceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'node-arn))
      (common-lisp:list
       (common-lisp:cons "NodeARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'node-type))
      (common-lisp:list
       (common-lisp:cons "NodeType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'zookeeper-node-info))
      (common-lisp:list
       (common-lisp:cons "ZookeeperNodeInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input node-info))
   common-lisp:nil))
(common-lisp:deftype node-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition not-found-exception
     (kafka-error)
     ((invalid-parameter :initarg :invalid-parameter :initform common-lisp:nil
       :reader not-found-exception-invalid-parameter)
      (message :initarg :message :initform common-lisp:nil :reader
       not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'not-found-exception 'not-found-exception-invalid-parameter
                    'not-found-exception-message)))
(common-lisp:progn
 (common-lisp:defclass replication-info common-lisp:nil
                       ((consumer-group-replication :initarg
                         :consumer-group-replication :initform
                         (common-lisp:error
                          ":consumer-group-replication is required")
                         :type
                         (common-lisp:or consumer-group-replication
                                         common-lisp:null)
                         :accessor
                         struct-shape-replication-info-consumer-group-replication
                         :shape "ConsumerGroupReplication" :location
                         common-lisp:nil :location-name
                         "consumerGroupReplication")
                        (source-kafka-cluster-arn :initarg
                         :source-kafka-cluster-arn :initform
                         (common-lisp:error
                          ":source-kafka-cluster-arn is required")
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-replication-info-source-kafka-cluster-arn
                         :shape "__string" :location common-lisp:nil
                         :location-name "sourceKafkaClusterArn")
                        (target-compression-type :initarg
                         :target-compression-type :initform
                         (common-lisp:error
                          ":target-compression-type is required")
                         :type
                         (common-lisp:or target-compression-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-replication-info-target-compression-type
                         :shape "TargetCompressionType" :location
                         common-lisp:nil :location-name
                         "targetCompressionType")
                        (target-kafka-cluster-arn :initarg
                         :target-kafka-cluster-arn :initform
                         (common-lisp:error
                          ":target-kafka-cluster-arn is required")
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-replication-info-target-kafka-cluster-arn
                         :shape "__string" :location common-lisp:nil
                         :location-name "targetKafkaClusterArn")
                        (topic-replication :initarg :topic-replication
                         :initform
                         (common-lisp:error ":topic-replication is required")
                         :type
                         (common-lisp:or topic-replication common-lisp:null)
                         :accessor
                         struct-shape-replication-info-topic-replication :shape
                         "TopicReplication" :location common-lisp:nil
                         :location-name "topicReplication"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-replication-info
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'replication-info
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'replication-info 'make-replication-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input replication-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input replication-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'consumer-group-replication))
      (common-lisp:list
       (common-lisp:cons "ConsumerGroupReplication"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-kafka-cluster-arn))
      (common-lisp:list
       (common-lisp:cons "SourceKafkaClusterArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'target-compression-type))
      (common-lisp:list
       (common-lisp:cons "TargetCompressionType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'target-kafka-cluster-arn))
      (common-lisp:list
       (common-lisp:cons "TargetKafkaClusterArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'topic-replication))
      (common-lisp:list
       (common-lisp:cons "TopicReplication"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input replication-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass replication-info-description common-lisp:nil
                       ((consumer-group-replication :initarg
                         :consumer-group-replication :initform common-lisp:nil
                         :type
                         (common-lisp:or consumer-group-replication
                                         common-lisp:null)
                         :accessor
                         struct-shape-replication-info-description-consumer-group-replication
                         :shape "ConsumerGroupReplication" :location
                         common-lisp:nil :location-name
                         "consumerGroupReplication")
                        (source-kafka-cluster-alias :initarg
                         :source-kafka-cluster-alias :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-replication-info-description-source-kafka-cluster-alias
                         :shape "__string" :location common-lisp:nil
                         :location-name "sourceKafkaClusterAlias")
                        (target-compression-type :initarg
                         :target-compression-type :initform common-lisp:nil
                         :type
                         (common-lisp:or target-compression-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-replication-info-description-target-compression-type
                         :shape "TargetCompressionType" :location
                         common-lisp:nil :location-name
                         "targetCompressionType")
                        (target-kafka-cluster-alias :initarg
                         :target-kafka-cluster-alias :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-replication-info-description-target-kafka-cluster-alias
                         :shape "__string" :location common-lisp:nil
                         :location-name "targetKafkaClusterAlias")
                        (topic-replication :initarg :topic-replication
                         :initform common-lisp:nil :type
                         (common-lisp:or topic-replication common-lisp:null)
                         :accessor
                         struct-shape-replication-info-description-topic-replication
                         :shape "TopicReplication" :location common-lisp:nil
                         :location-name "topicReplication"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-replication-info-description
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'replication-info-description
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'replication-info-description
                    'make-replication-info-description))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          replication-info-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          replication-info-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'consumer-group-replication))
      (common-lisp:list
       (common-lisp:cons "ConsumerGroupReplication"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-kafka-cluster-alias))
      (common-lisp:list
       (common-lisp:cons "SourceKafkaClusterAlias"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'target-compression-type))
      (common-lisp:list
       (common-lisp:cons "TargetCompressionType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'target-kafka-cluster-alias))
      (common-lisp:list
       (common-lisp:cons "TargetKafkaClusterAlias"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'topic-replication))
      (common-lisp:list
       (common-lisp:cons "TopicReplication"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          replication-info-description))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass replication-info-summary common-lisp:nil
                       ((source-kafka-cluster-alias :initarg
                         :source-kafka-cluster-alias :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-replication-info-summary-source-kafka-cluster-alias
                         :shape "__string" :location common-lisp:nil
                         :location-name "sourceKafkaClusterAlias")
                        (target-kafka-cluster-alias :initarg
                         :target-kafka-cluster-alias :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-replication-info-summary-target-kafka-cluster-alias
                         :shape "__string" :location common-lisp:nil
                         :location-name "targetKafkaClusterAlias"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-replication-info-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'replication-info-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'replication-info-summary 'make-replication-info-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          replication-info-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          replication-info-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-kafka-cluster-alias))
      (common-lisp:list
       (common-lisp:cons "SourceKafkaClusterAlias"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'target-kafka-cluster-alias))
      (common-lisp:list
       (common-lisp:cons "TargetKafkaClusterAlias"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          replication-info-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass replication-state-info common-lisp:nil
                       ((code :initarg :code :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-replication-state-info-code :shape
                         "__string" :location common-lisp:nil :location-name
                         "code")
                        (message :initarg :message :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor struct-shape-replication-state-info-message
                         :shape "__string" :location common-lisp:nil
                         :location-name "message"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-replication-state-info
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'replication-state-info
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'replication-state-info 'make-replication-state-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          replication-state-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          replication-state-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code))
      (common-lisp:list
       (common-lisp:cons "Code"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          replication-state-info))
   common-lisp:nil))
(common-lisp:deftype replicator-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass replicator-summary common-lisp:nil
                       ((creation-time :initarg :creation-time :initform
                         common-lisp:nil :type
                         (common-lisp:or |__timestampIso8601| common-lisp:null)
                         :accessor
                         struct-shape-replicator-summary-creation-time :shape
                         "__timestampIso8601" :location common-lisp:nil
                         :location-name "creationTime")
                        (current-version :initarg :current-version :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-replicator-summary-current-version :shape
                         "__string" :location common-lisp:nil :location-name
                         "currentVersion")
                        (is-replicator-reference :initarg
                         :is-replicator-reference :initform common-lisp:nil
                         :type (common-lisp:or |__boolean| common-lisp:null)
                         :accessor
                         struct-shape-replicator-summary-is-replicator-reference
                         :shape "__boolean" :location common-lisp:nil
                         :location-name "isReplicatorReference")
                        (kafka-clusters-summary :initarg
                         :kafka-clusters-summary :initform common-lisp:nil
                         :type
                         (common-lisp:or |__listOfKafkaClusterSummary|
                                         common-lisp:null)
                         :accessor
                         struct-shape-replicator-summary-kafka-clusters-summary
                         :shape "__listOfKafkaClusterSummary" :location
                         common-lisp:nil :location-name "kafkaClustersSummary")
                        (replication-info-summary-list :initarg
                         :replication-info-summary-list :initform
                         common-lisp:nil :type
                         (common-lisp:or |__listOfReplicationInfoSummary|
                                         common-lisp:null)
                         :accessor
                         struct-shape-replicator-summary-replication-info-summary-list
                         :shape "__listOfReplicationInfoSummary" :location
                         common-lisp:nil :location-name
                         "replicationInfoSummaryList")
                        (replicator-arn :initarg :replicator-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-replicator-summary-replicator-arn :shape
                         "__string" :location common-lisp:nil :location-name
                         "replicatorArn")
                        (replicator-name :initarg :replicator-name :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-replicator-summary-replicator-name :shape
                         "__string" :location common-lisp:nil :location-name
                         "replicatorName")
                        (replicator-resource-arn :initarg
                         :replicator-resource-arn :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-replicator-summary-replicator-resource-arn
                         :shape "__string" :location common-lisp:nil
                         :location-name "replicatorResourceArn")
                        (replicator-state :initarg :replicator-state :initform
                         common-lisp:nil :type
                         (common-lisp:or replicator-state common-lisp:null)
                         :accessor
                         struct-shape-replicator-summary-replicator-state
                         :shape "ReplicatorState" :location common-lisp:nil
                         :location-name "replicatorState"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-replicator-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'replicator-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'replicator-summary 'make-replicator-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input replicator-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input replicator-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'current-version))
      (common-lisp:list
       (common-lisp:cons "CurrentVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'is-replicator-reference))
      (common-lisp:list
       (common-lisp:cons "IsReplicatorReference"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'kafka-clusters-summary))
      (common-lisp:list
       (common-lisp:cons "KafkaClustersSummary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-info-summary-list))
      (common-lisp:list
       (common-lisp:cons "ReplicationInfoSummaryList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'replicator-arn))
      (common-lisp:list
       (common-lisp:cons "ReplicatorArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'replicator-name))
      (common-lisp:list
       (common-lisp:cons "ReplicatorName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replicator-resource-arn))
      (common-lisp:list
       (common-lisp:cons "ReplicatorResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'replicator-state))
      (common-lisp:list
       (common-lisp:cons "ReplicatorState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input replicator-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass sasl common-lisp:nil
                       ((scram :initarg :scram :initform common-lisp:nil :type
                         (common-lisp:or scram common-lisp:null) :accessor
                         struct-shape-sasl-scram :shape "Scram" :location
                         common-lisp:nil :location-name "scram")
                        (iam :initarg :iam :initform common-lisp:nil :type
                         (common-lisp:or iam common-lisp:null) :accessor
                         struct-shape-sasl-iam :shape "Iam" :location
                         common-lisp:nil :location-name "iam"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-sasl (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'sasl
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'sasl 'make-sasl))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input sasl))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input sasl))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scram))
      (common-lisp:list
       (common-lisp:cons "Scram"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iam))
      (common-lisp:list
       (common-lisp:cons "Iam"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input sasl))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass vpc-connectivity-sasl common-lisp:nil
                       ((scram :initarg :scram :initform common-lisp:nil :type
                         (common-lisp:or vpc-connectivity-scram
                                         common-lisp:null)
                         :accessor struct-shape-vpc-connectivity-sasl-scram
                         :shape "VpcConnectivityScram" :location
                         common-lisp:nil :location-name "scram")
                        (iam :initarg :iam :initform common-lisp:nil :type
                         (common-lisp:or vpc-connectivity-iam common-lisp:null)
                         :accessor struct-shape-vpc-connectivity-sasl-iam
                         :shape "VpcConnectivityIam" :location common-lisp:nil
                         :location-name "iam"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-vpc-connectivity-sasl
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'vpc-connectivity-sasl
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'vpc-connectivity-sasl 'make-vpc-connectivity-sasl))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          vpc-connectivity-sasl))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          vpc-connectivity-sasl))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scram))
      (common-lisp:list
       (common-lisp:cons "Scram"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iam))
      (common-lisp:list
       (common-lisp:cons "Iam"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          vpc-connectivity-sasl))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass scram common-lisp:nil
                       ((enabled :initarg :enabled :initform common-lisp:nil
                         :type (common-lisp:or |__boolean| common-lisp:null)
                         :accessor struct-shape-scram-enabled :shape
                         "__boolean" :location common-lisp:nil :location-name
                         "enabled"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-scram
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'scram
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'scram 'make-scram))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input scram))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input scram))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "Enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input scram))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass vpc-connectivity-scram common-lisp:nil
                       ((enabled :initarg :enabled :initform common-lisp:nil
                         :type (common-lisp:or |__boolean| common-lisp:null)
                         :accessor struct-shape-vpc-connectivity-scram-enabled
                         :shape "__boolean" :location common-lisp:nil
                         :location-name "enabled"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-vpc-connectivity-scram
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'vpc-connectivity-scram
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'vpc-connectivity-scram 'make-vpc-connectivity-scram))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          vpc-connectivity-scram))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          vpc-connectivity-scram))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "Enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          vpc-connectivity-scram))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass iam common-lisp:nil
                       ((enabled :initarg :enabled :initform common-lisp:nil
                         :type (common-lisp:or |__boolean| common-lisp:null)
                         :accessor struct-shape-iam-enabled :shape "__boolean"
                         :location common-lisp:nil :location-name "enabled"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-iam (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'iam
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'iam 'make-iam))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input iam))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input iam))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "Enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input iam))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass vpc-connectivity-iam common-lisp:nil
                       ((enabled :initarg :enabled :initform common-lisp:nil
                         :type (common-lisp:or |__boolean| common-lisp:null)
                         :accessor struct-shape-vpc-connectivity-iam-enabled
                         :shape "__boolean" :location common-lisp:nil
                         :location-name "enabled"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-vpc-connectivity-iam
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'vpc-connectivity-iam
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'vpc-connectivity-iam 'make-vpc-connectivity-iam))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input vpc-connectivity-iam))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input vpc-connectivity-iam))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "Enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input vpc-connectivity-iam))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition service-unavailable-exception
     (kafka-error)
     ((invalid-parameter :initarg :invalid-parameter :initform common-lisp:nil
       :reader service-unavailable-exception-invalid-parameter)
      (message :initarg :message :initform common-lisp:nil :reader
       service-unavailable-exception-message)))
 (common-lisp:export
  (common-lisp:list 'service-unavailable-exception
                    'service-unavailable-exception-invalid-parameter
                    'service-unavailable-exception-message)))
(common-lisp:progn
 (common-lisp:defclass state-info common-lisp:nil
                       ((code :initarg :code :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-state-info-code :shape "__string"
                         :location common-lisp:nil :location-name "code")
                        (message :initarg :message :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor struct-shape-state-info-message :shape
                         "__string" :location common-lisp:nil :location-name
                         "message"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-state-info
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'state-info
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'state-info 'make-state-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input state-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input state-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code))
      (common-lisp:list
       (common-lisp:cons "Code"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input state-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass storage-info common-lisp:nil
                       ((ebs-storage-info :initarg :ebs-storage-info :initform
                         common-lisp:nil :type
                         (common-lisp:or ebsstorage-info common-lisp:null)
                         :accessor struct-shape-storage-info-ebs-storage-info
                         :shape "EBSStorageInfo" :location common-lisp:nil
                         :location-name "ebsStorageInfo"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-storage-info
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'storage-info
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'storage-info 'make-storage-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input storage-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input storage-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ebs-storage-info))
      (common-lisp:list
       (common-lisp:cons "EbsStorageInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input storage-info))
   common-lisp:nil))
(common-lisp:deftype storage-mode () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass tag-resource-request common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resource-arn is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-tag-resource-request-resource-arn :shape
                         "__string" :location "uri" :location-name
                         "resourceArn")
                        (tags :initarg :tags :initform
                         (common-lisp:error ":tags is required") :type
                         (common-lisp:or |__mapOf__string| common-lisp:null)
                         :accessor struct-shape-tag-resource-request-tags
                         :shape "__mapOf__string" :location common-lisp:nil
                         :location-name "tags"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tag-resource-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'tag-resource-request 'make-tag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-request))
   common-lisp:nil))
(common-lisp:deftype target-compression-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass topic-replication common-lisp:nil
                       ((copy-access-control-lists-for-topics :initarg
                         :copy-access-control-lists-for-topics :initform
                         common-lisp:nil :type
                         (common-lisp:or |__boolean| common-lisp:null)
                         :accessor
                         struct-shape-topic-replication-copy-access-control-lists-for-topics
                         :shape "__boolean" :location common-lisp:nil
                         :location-name "copyAccessControlListsForTopics")
                        (copy-topic-configurations :initarg
                         :copy-topic-configurations :initform common-lisp:nil
                         :type (common-lisp:or |__boolean| common-lisp:null)
                         :accessor
                         struct-shape-topic-replication-copy-topic-configurations
                         :shape "__boolean" :location common-lisp:nil
                         :location-name "copyTopicConfigurations")
                        (detect-and-copy-new-topics :initarg
                         :detect-and-copy-new-topics :initform common-lisp:nil
                         :type (common-lisp:or |__boolean| common-lisp:null)
                         :accessor
                         struct-shape-topic-replication-detect-and-copy-new-topics
                         :shape "__boolean" :location common-lisp:nil
                         :location-name "detectAndCopyNewTopics")
                        (topics-to-exclude :initarg :topics-to-exclude
                         :initform common-lisp:nil :type
                         (common-lisp:or |__listOf__stringMax249|
                                         common-lisp:null)
                         :accessor
                         struct-shape-topic-replication-topics-to-exclude
                         :shape "__listOf__stringMax249" :location
                         common-lisp:nil :location-name "topicsToExclude")
                        (topics-to-replicate :initarg :topics-to-replicate
                         :initform
                         (common-lisp:error ":topics-to-replicate is required")
                         :type
                         (common-lisp:or |__listOf__stringMax249|
                                         common-lisp:null)
                         :accessor
                         struct-shape-topic-replication-topics-to-replicate
                         :shape "__listOf__stringMax249" :location
                         common-lisp:nil :location-name "topicsToReplicate"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-topic-replication
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'topic-replication
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'topic-replication 'make-topic-replication))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input topic-replication))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input topic-replication))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'copy-access-control-lists-for-topics))
      (common-lisp:list
       (common-lisp:cons "CopyAccessControlListsForTopics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'copy-topic-configurations))
      (common-lisp:list
       (common-lisp:cons "CopyTopicConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'detect-and-copy-new-topics))
      (common-lisp:list
       (common-lisp:cons "DetectAndCopyNewTopics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'topics-to-exclude))
      (common-lisp:list
       (common-lisp:cons "TopicsToExclude"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'topics-to-replicate))
      (common-lisp:list
       (common-lisp:cons "TopicsToReplicate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input topic-replication))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass topic-replication-update common-lisp:nil
                       ((copy-access-control-lists-for-topics :initarg
                         :copy-access-control-lists-for-topics :initform
                         (common-lisp:error
                          ":copy-access-control-lists-for-topics is required")
                         :type (common-lisp:or |__boolean| common-lisp:null)
                         :accessor
                         struct-shape-topic-replication-update-copy-access-control-lists-for-topics
                         :shape "__boolean" :location common-lisp:nil
                         :location-name "copyAccessControlListsForTopics")
                        (copy-topic-configurations :initarg
                         :copy-topic-configurations :initform
                         (common-lisp:error
                          ":copy-topic-configurations is required")
                         :type (common-lisp:or |__boolean| common-lisp:null)
                         :accessor
                         struct-shape-topic-replication-update-copy-topic-configurations
                         :shape "__boolean" :location common-lisp:nil
                         :location-name "copyTopicConfigurations")
                        (detect-and-copy-new-topics :initarg
                         :detect-and-copy-new-topics :initform
                         (common-lisp:error
                          ":detect-and-copy-new-topics is required")
                         :type (common-lisp:or |__boolean| common-lisp:null)
                         :accessor
                         struct-shape-topic-replication-update-detect-and-copy-new-topics
                         :shape "__boolean" :location common-lisp:nil
                         :location-name "detectAndCopyNewTopics")
                        (topics-to-exclude :initarg :topics-to-exclude
                         :initform
                         (common-lisp:error ":topics-to-exclude is required")
                         :type
                         (common-lisp:or |__listOf__stringMax249|
                                         common-lisp:null)
                         :accessor
                         struct-shape-topic-replication-update-topics-to-exclude
                         :shape "__listOf__stringMax249" :location
                         common-lisp:nil :location-name "topicsToExclude")
                        (topics-to-replicate :initarg :topics-to-replicate
                         :initform
                         (common-lisp:error ":topics-to-replicate is required")
                         :type
                         (common-lisp:or |__listOf__stringMax249|
                                         common-lisp:null)
                         :accessor
                         struct-shape-topic-replication-update-topics-to-replicate
                         :shape "__listOf__stringMax249" :location
                         common-lisp:nil :location-name "topicsToReplicate"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-topic-replication-update
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'topic-replication-update
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'topic-replication-update 'make-topic-replication-update))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          topic-replication-update))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          topic-replication-update))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'copy-access-control-lists-for-topics))
      (common-lisp:list
       (common-lisp:cons "CopyAccessControlListsForTopics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'copy-topic-configurations))
      (common-lisp:list
       (common-lisp:cons "CopyTopicConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'detect-and-copy-new-topics))
      (common-lisp:list
       (common-lisp:cons "DetectAndCopyNewTopics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'topics-to-exclude))
      (common-lisp:list
       (common-lisp:cons "TopicsToExclude"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'topics-to-replicate))
      (common-lisp:list
       (common-lisp:cons "TopicsToReplicate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          topic-replication-update))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass tls common-lisp:nil
                       ((certificate-authority-arn-list :initarg
                         :certificate-authority-arn-list :initform
                         common-lisp:nil :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor
                         struct-shape-tls-certificate-authority-arn-list :shape
                         "__listOf__string" :location common-lisp:nil
                         :location-name "certificateAuthorityArnList")
                        (enabled :initarg :enabled :initform common-lisp:nil
                         :type (common-lisp:or |__boolean| common-lisp:null)
                         :accessor struct-shape-tls-enabled :shape "__boolean"
                         :location common-lisp:nil :location-name "enabled"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tls (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'tls
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'tls 'make-tls))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tls))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tls))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'certificate-authority-arn-list))
      (common-lisp:list
       (common-lisp:cons "CertificateAuthorityArnList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "Enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tls))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass vpc-connectivity-tls common-lisp:nil
                       ((enabled :initarg :enabled :initform common-lisp:nil
                         :type (common-lisp:or |__boolean| common-lisp:null)
                         :accessor struct-shape-vpc-connectivity-tls-enabled
                         :shape "__boolean" :location common-lisp:nil
                         :location-name "enabled"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-vpc-connectivity-tls
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'vpc-connectivity-tls
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'vpc-connectivity-tls 'make-vpc-connectivity-tls))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input vpc-connectivity-tls))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input vpc-connectivity-tls))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "Enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input vpc-connectivity-tls))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition too-many-requests-exception
     (kafka-error)
     ((invalid-parameter :initarg :invalid-parameter :initform common-lisp:nil
       :reader too-many-requests-exception-invalid-parameter)
      (message :initarg :message :initform common-lisp:nil :reader
       too-many-requests-exception-message)))
 (common-lisp:export
  (common-lisp:list 'too-many-requests-exception
                    'too-many-requests-exception-invalid-parameter
                    'too-many-requests-exception-message)))
(common-lisp:progn
 (common-lisp:defclass unauthenticated common-lisp:nil
                       ((enabled :initarg :enabled :initform common-lisp:nil
                         :type (common-lisp:or |__boolean| common-lisp:null)
                         :accessor struct-shape-unauthenticated-enabled :shape
                         "__boolean" :location common-lisp:nil :location-name
                         "enabled"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-unauthenticated
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'unauthenticated
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'unauthenticated 'make-unauthenticated))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input unauthenticated))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input unauthenticated))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "Enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input unauthenticated))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition unauthorized-exception
     (kafka-error)
     ((invalid-parameter :initarg :invalid-parameter :initform common-lisp:nil
       :reader unauthorized-exception-invalid-parameter)
      (message :initarg :message :initform common-lisp:nil :reader
       unauthorized-exception-message)))
 (common-lisp:export
  (common-lisp:list 'unauthorized-exception
                    'unauthorized-exception-invalid-parameter
                    'unauthorized-exception-message)))
(common-lisp:progn
 (common-lisp:defclass unprocessed-scram-secret common-lisp:nil
                       ((error-code :initarg :error-code :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-unprocessed-scram-secret-error-code
                         :shape "__string" :location common-lisp:nil
                         :location-name "errorCode")
                        (error-message :initarg :error-message :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-unprocessed-scram-secret-error-message
                         :shape "__string" :location common-lisp:nil
                         :location-name "errorMessage")
                        (secret-arn :initarg :secret-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-unprocessed-scram-secret-secret-arn
                         :shape "__string" :location common-lisp:nil
                         :location-name "secretArn"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-unprocessed-scram-secret
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'unprocessed-scram-secret
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'unprocessed-scram-secret 'make-unprocessed-scram-secret))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          unprocessed-scram-secret))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          unprocessed-scram-secret))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-code))
      (common-lisp:list
       (common-lisp:cons "ErrorCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-message))
      (common-lisp:list
       (common-lisp:cons "ErrorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'secret-arn))
      (common-lisp:list
       (common-lisp:cons "SecretArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          unprocessed-scram-secret))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass untag-resource-request common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resource-arn is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-untag-resource-request-resource-arn
                         :shape "__string" :location "uri" :location-name
                         "resourceArn")
                        (tag-keys :initarg :tag-keys :initform
                         (common-lisp:error ":tag-keys is required") :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor struct-shape-untag-resource-request-tag-keys
                         :shape "__listOf__string" :location "querystring"
                         :location-name "tagKeys"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-untag-resource-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'untag-resource-request 'make-untag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-broker-type-request common-lisp:nil
                       ((cluster-arn :initarg :cluster-arn :initform
                         (common-lisp:error ":cluster-arn is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-update-broker-type-request-cluster-arn
                         :shape "__string" :location "uri" :location-name
                         "clusterArn")
                        (current-version :initarg :current-version :initform
                         (common-lisp:error ":current-version is required")
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-update-broker-type-request-current-version
                         :shape "__string" :location common-lisp:nil
                         :location-name "currentVersion")
                        (target-instance-type :initarg :target-instance-type
                         :initform
                         (common-lisp:error
                          ":target-instance-type is required")
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-update-broker-type-request-target-instance-type
                         :shape "__string" :location common-lisp:nil
                         :location-name "targetInstanceType"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-broker-type-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-broker-type-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-broker-type-request
                    'make-update-broker-type-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-broker-type-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-broker-type-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'current-version))
      (common-lisp:list
       (common-lisp:cons "CurrentVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'target-instance-type))
      (common-lisp:list
       (common-lisp:cons "TargetInstanceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-broker-type-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-broker-type-response common-lisp:nil
                       ((cluster-arn :initarg :cluster-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-update-broker-type-response-cluster-arn
                         :shape "__string" :location common-lisp:nil
                         :location-name "clusterArn")
                        (cluster-operation-arn :initarg :cluster-operation-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-update-broker-type-response-cluster-operation-arn
                         :shape "__string" :location common-lisp:nil
                         :location-name "clusterOperationArn"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-broker-type-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-broker-type-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-broker-type-response
                    'make-update-broker-type-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-broker-type-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-broker-type-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-arn))
      (common-lisp:list
       (common-lisp:cons "ClusterArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cluster-operation-arn))
      (common-lisp:list
       (common-lisp:cons "ClusterOperationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-broker-type-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-broker-count-request common-lisp:nil
                       ((cluster-arn :initarg :cluster-arn :initform
                         (common-lisp:error ":cluster-arn is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-update-broker-count-request-cluster-arn
                         :shape "__string" :location "uri" :location-name
                         "clusterArn")
                        (current-version :initarg :current-version :initform
                         (common-lisp:error ":current-version is required")
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-update-broker-count-request-current-version
                         :shape "__string" :location common-lisp:nil
                         :location-name "currentVersion")
                        (target-number-of-broker-nodes :initarg
                         :target-number-of-broker-nodes :initform
                         (common-lisp:error
                          ":target-number-of-broker-nodes is required")
                         :type
                         (common-lisp:or |__integerMin1Max15| common-lisp:null)
                         :accessor
                         struct-shape-update-broker-count-request-target-number-of-broker-nodes
                         :shape "__integerMin1Max15" :location common-lisp:nil
                         :location-name "targetNumberOfBrokerNodes"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-broker-count-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-broker-count-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-broker-count-request
                    'make-update-broker-count-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-broker-count-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-broker-count-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'current-version))
      (common-lisp:list
       (common-lisp:cons "CurrentVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'target-number-of-broker-nodes))
      (common-lisp:list
       (common-lisp:cons "TargetNumberOfBrokerNodes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-broker-count-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-broker-count-response common-lisp:nil
                       ((cluster-arn :initarg :cluster-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-update-broker-count-response-cluster-arn
                         :shape "__string" :location common-lisp:nil
                         :location-name "clusterArn")
                        (cluster-operation-arn :initarg :cluster-operation-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-update-broker-count-response-cluster-operation-arn
                         :shape "__string" :location common-lisp:nil
                         :location-name "clusterOperationArn"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-broker-count-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-broker-count-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-broker-count-response
                    'make-update-broker-count-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-broker-count-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-broker-count-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-arn))
      (common-lisp:list
       (common-lisp:cons "ClusterArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cluster-operation-arn))
      (common-lisp:list
       (common-lisp:cons "ClusterOperationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-broker-count-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-broker-storage-request common-lisp:nil
                       ((cluster-arn :initarg :cluster-arn :initform
                         (common-lisp:error ":cluster-arn is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-update-broker-storage-request-cluster-arn
                         :shape "__string" :location "uri" :location-name
                         "clusterArn")
                        (current-version :initarg :current-version :initform
                         (common-lisp:error ":current-version is required")
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-update-broker-storage-request-current-version
                         :shape "__string" :location common-lisp:nil
                         :location-name "currentVersion")
                        (target-broker-ebsvolume-info :initarg
                         :target-broker-ebsvolume-info :initform
                         (common-lisp:error
                          ":target-broker-ebsvolume-info is required")
                         :type
                         (common-lisp:or |__listOfBrokerEBSVolumeInfo|
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-broker-storage-request-target-broker-ebsvolume-info
                         :shape "__listOfBrokerEBSVolumeInfo" :location
                         common-lisp:nil :location-name
                         "targetBrokerEBSVolumeInfo"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-broker-storage-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-broker-storage-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-broker-storage-request
                    'make-update-broker-storage-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-broker-storage-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-broker-storage-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'current-version))
      (common-lisp:list
       (common-lisp:cons "CurrentVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'target-broker-ebsvolume-info))
      (common-lisp:list
       (common-lisp:cons "TargetBrokerEBSVolumeInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-broker-storage-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-broker-storage-response common-lisp:nil
                       ((cluster-arn :initarg :cluster-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-update-broker-storage-response-cluster-arn
                         :shape "__string" :location common-lisp:nil
                         :location-name "clusterArn")
                        (cluster-operation-arn :initarg :cluster-operation-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-update-broker-storage-response-cluster-operation-arn
                         :shape "__string" :location common-lisp:nil
                         :location-name "clusterOperationArn"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-broker-storage-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-broker-storage-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-broker-storage-response
                    'make-update-broker-storage-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-broker-storage-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-broker-storage-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-arn))
      (common-lisp:list
       (common-lisp:cons "ClusterArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cluster-operation-arn))
      (common-lisp:list
       (common-lisp:cons "ClusterOperationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-broker-storage-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-cluster-configuration-request common-lisp:nil
                       ((cluster-arn :initarg :cluster-arn :initform
                         (common-lisp:error ":cluster-arn is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-update-cluster-configuration-request-cluster-arn
                         :shape "__string" :location "uri" :location-name
                         "clusterArn")
                        (configuration-info :initarg :configuration-info
                         :initform
                         (common-lisp:error ":configuration-info is required")
                         :type
                         (common-lisp:or configuration-info common-lisp:null)
                         :accessor
                         struct-shape-update-cluster-configuration-request-configuration-info
                         :shape "ConfigurationInfo" :location common-lisp:nil
                         :location-name "configurationInfo")
                        (current-version :initarg :current-version :initform
                         (common-lisp:error ":current-version is required")
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-update-cluster-configuration-request-current-version
                         :shape "__string" :location common-lisp:nil
                         :location-name "currentVersion"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-cluster-configuration-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-cluster-configuration-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-cluster-configuration-request
                    'make-update-cluster-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-cluster-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-cluster-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration-info))
      (common-lisp:list
       (common-lisp:cons "ConfigurationInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'current-version))
      (common-lisp:list
       (common-lisp:cons "CurrentVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-cluster-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-cluster-configuration-response common-lisp:nil
                       ((cluster-arn :initarg :cluster-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-update-cluster-configuration-response-cluster-arn
                         :shape "__string" :location common-lisp:nil
                         :location-name "clusterArn")
                        (cluster-operation-arn :initarg :cluster-operation-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-update-cluster-configuration-response-cluster-operation-arn
                         :shape "__string" :location common-lisp:nil
                         :location-name "clusterOperationArn"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-cluster-configuration-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-cluster-configuration-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-cluster-configuration-response
                    'make-update-cluster-configuration-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-cluster-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-cluster-configuration-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-arn))
      (common-lisp:list
       (common-lisp:cons "ClusterArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cluster-operation-arn))
      (common-lisp:list
       (common-lisp:cons "ClusterOperationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-cluster-configuration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-cluster-kafka-version-request common-lisp:nil
                       ((cluster-arn :initarg :cluster-arn :initform
                         (common-lisp:error ":cluster-arn is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-update-cluster-kafka-version-request-cluster-arn
                         :shape "__string" :location "uri" :location-name
                         "clusterArn")
                        (configuration-info :initarg :configuration-info
                         :initform common-lisp:nil :type
                         (common-lisp:or configuration-info common-lisp:null)
                         :accessor
                         struct-shape-update-cluster-kafka-version-request-configuration-info
                         :shape "ConfigurationInfo" :location common-lisp:nil
                         :location-name "configurationInfo")
                        (current-version :initarg :current-version :initform
                         (common-lisp:error ":current-version is required")
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-update-cluster-kafka-version-request-current-version
                         :shape "__string" :location common-lisp:nil
                         :location-name "currentVersion")
                        (target-kafka-version :initarg :target-kafka-version
                         :initform
                         (common-lisp:error
                          ":target-kafka-version is required")
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-update-cluster-kafka-version-request-target-kafka-version
                         :shape "__string" :location common-lisp:nil
                         :location-name "targetKafkaVersion"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-cluster-kafka-version-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-cluster-kafka-version-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-cluster-kafka-version-request
                    'make-update-cluster-kafka-version-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-cluster-kafka-version-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-cluster-kafka-version-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration-info))
      (common-lisp:list
       (common-lisp:cons "ConfigurationInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'current-version))
      (common-lisp:list
       (common-lisp:cons "CurrentVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'target-kafka-version))
      (common-lisp:list
       (common-lisp:cons "TargetKafkaVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-cluster-kafka-version-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-cluster-kafka-version-response common-lisp:nil
                       ((cluster-arn :initarg :cluster-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-update-cluster-kafka-version-response-cluster-arn
                         :shape "__string" :location common-lisp:nil
                         :location-name "clusterArn")
                        (cluster-operation-arn :initarg :cluster-operation-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-update-cluster-kafka-version-response-cluster-operation-arn
                         :shape "__string" :location common-lisp:nil
                         :location-name "clusterOperationArn"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-cluster-kafka-version-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-cluster-kafka-version-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-cluster-kafka-version-response
                    'make-update-cluster-kafka-version-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-cluster-kafka-version-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-cluster-kafka-version-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-arn))
      (common-lisp:list
       (common-lisp:cons "ClusterArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cluster-operation-arn))
      (common-lisp:list
       (common-lisp:cons "ClusterOperationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-cluster-kafka-version-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-configuration-request common-lisp:nil
                       ((arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-update-configuration-request-arn :shape
                         "__string" :location "uri" :location-name "arn")
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-update-configuration-request-description
                         :shape "__string" :location common-lisp:nil
                         :location-name "description")
                        (server-properties :initarg :server-properties
                         :initform
                         (common-lisp:error ":server-properties is required")
                         :type (common-lisp:or |__blob| common-lisp:null)
                         :accessor
                         struct-shape-update-configuration-request-server-properties
                         :shape "__blob" :location common-lisp:nil
                         :location-name "serverProperties"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-configuration-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-configuration-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-configuration-request
                    'make-update-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'server-properties))
      (common-lisp:list
       (common-lisp:cons "ServerProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-configuration-response common-lisp:nil
                       ((arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-update-configuration-response-arn :shape
                         "__string" :location common-lisp:nil :location-name
                         "arn")
                        (latest-revision :initarg :latest-revision :initform
                         common-lisp:nil :type
                         (common-lisp:or configuration-revision
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-configuration-response-latest-revision
                         :shape "ConfigurationRevision" :location
                         common-lisp:nil :location-name "latestRevision"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-configuration-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-configuration-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-configuration-response
                    'make-update-configuration-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-configuration-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'latest-revision))
      (common-lisp:list
       (common-lisp:cons "LatestRevision"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-configuration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-connectivity-request common-lisp:nil
                       ((cluster-arn :initarg :cluster-arn :initform
                         (common-lisp:error ":cluster-arn is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-update-connectivity-request-cluster-arn
                         :shape "__string" :location "uri" :location-name
                         "clusterArn")
                        (connectivity-info :initarg :connectivity-info
                         :initform
                         (common-lisp:error ":connectivity-info is required")
                         :type
                         (common-lisp:or connectivity-info common-lisp:null)
                         :accessor
                         struct-shape-update-connectivity-request-connectivity-info
                         :shape "ConnectivityInfo" :location common-lisp:nil
                         :location-name "connectivityInfo")
                        (current-version :initarg :current-version :initform
                         (common-lisp:error ":current-version is required")
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-update-connectivity-request-current-version
                         :shape "__string" :location common-lisp:nil
                         :location-name "currentVersion"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-connectivity-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-connectivity-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-connectivity-request
                    'make-update-connectivity-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-connectivity-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-connectivity-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connectivity-info))
      (common-lisp:list
       (common-lisp:cons "ConnectivityInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'current-version))
      (common-lisp:list
       (common-lisp:cons "CurrentVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-connectivity-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-connectivity-response common-lisp:nil
                       ((cluster-arn :initarg :cluster-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-update-connectivity-response-cluster-arn
                         :shape "__string" :location common-lisp:nil
                         :location-name "clusterArn")
                        (cluster-operation-arn :initarg :cluster-operation-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-update-connectivity-response-cluster-operation-arn
                         :shape "__string" :location common-lisp:nil
                         :location-name "clusterOperationArn"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-connectivity-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-connectivity-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-connectivity-response
                    'make-update-connectivity-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-connectivity-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-connectivity-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-arn))
      (common-lisp:list
       (common-lisp:cons "ClusterArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cluster-operation-arn))
      (common-lisp:list
       (common-lisp:cons "ClusterOperationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-connectivity-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-monitoring-request common-lisp:nil
                       ((cluster-arn :initarg :cluster-arn :initform
                         (common-lisp:error ":cluster-arn is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-update-monitoring-request-cluster-arn
                         :shape "__string" :location "uri" :location-name
                         "clusterArn")
                        (current-version :initarg :current-version :initform
                         (common-lisp:error ":current-version is required")
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-update-monitoring-request-current-version
                         :shape "__string" :location common-lisp:nil
                         :location-name "currentVersion")
                        (enhanced-monitoring :initarg :enhanced-monitoring
                         :initform common-lisp:nil :type
                         (common-lisp:or enhanced-monitoring common-lisp:null)
                         :accessor
                         struct-shape-update-monitoring-request-enhanced-monitoring
                         :shape "EnhancedMonitoring" :location common-lisp:nil
                         :location-name "enhancedMonitoring")
                        (open-monitoring :initarg :open-monitoring :initform
                         common-lisp:nil :type
                         (common-lisp:or open-monitoring-info common-lisp:null)
                         :accessor
                         struct-shape-update-monitoring-request-open-monitoring
                         :shape "OpenMonitoringInfo" :location common-lisp:nil
                         :location-name "openMonitoring")
                        (logging-info :initarg :logging-info :initform
                         common-lisp:nil :type
                         (common-lisp:or logging-info common-lisp:null)
                         :accessor
                         struct-shape-update-monitoring-request-logging-info
                         :shape "LoggingInfo" :location common-lisp:nil
                         :location-name "loggingInfo"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-monitoring-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-monitoring-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-monitoring-request
                    'make-update-monitoring-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-monitoring-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-monitoring-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'current-version))
      (common-lisp:list
       (common-lisp:cons "CurrentVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enhanced-monitoring))
      (common-lisp:list
       (common-lisp:cons "EnhancedMonitoring"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'open-monitoring))
      (common-lisp:list
       (common-lisp:cons "OpenMonitoring"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'logging-info))
      (common-lisp:list
       (common-lisp:cons "LoggingInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-monitoring-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-monitoring-response common-lisp:nil
                       ((cluster-arn :initarg :cluster-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-update-monitoring-response-cluster-arn
                         :shape "__string" :location common-lisp:nil
                         :location-name "clusterArn")
                        (cluster-operation-arn :initarg :cluster-operation-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-update-monitoring-response-cluster-operation-arn
                         :shape "__string" :location common-lisp:nil
                         :location-name "clusterOperationArn"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-monitoring-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-monitoring-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-monitoring-response
                    'make-update-monitoring-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-monitoring-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-monitoring-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-arn))
      (common-lisp:list
       (common-lisp:cons "ClusterArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cluster-operation-arn))
      (common-lisp:list
       (common-lisp:cons "ClusterOperationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-monitoring-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-replication-info-request common-lisp:nil
                       ((consumer-group-replication :initarg
                         :consumer-group-replication :initform common-lisp:nil
                         :type
                         (common-lisp:or consumer-group-replication-update
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-replication-info-request-consumer-group-replication
                         :shape "ConsumerGroupReplicationUpdate" :location
                         common-lisp:nil :location-name
                         "consumerGroupReplication")
                        (current-version :initarg :current-version :initform
                         (common-lisp:error ":current-version is required")
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-update-replication-info-request-current-version
                         :shape "__string" :location common-lisp:nil
                         :location-name "currentVersion")
                        (replicator-arn :initarg :replicator-arn :initform
                         (common-lisp:error ":replicator-arn is required")
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-update-replication-info-request-replicator-arn
                         :shape "__string" :location "uri" :location-name
                         "replicatorArn")
                        (source-kafka-cluster-arn :initarg
                         :source-kafka-cluster-arn :initform
                         (common-lisp:error
                          ":source-kafka-cluster-arn is required")
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-update-replication-info-request-source-kafka-cluster-arn
                         :shape "__string" :location common-lisp:nil
                         :location-name "sourceKafkaClusterArn")
                        (target-kafka-cluster-arn :initarg
                         :target-kafka-cluster-arn :initform
                         (common-lisp:error
                          ":target-kafka-cluster-arn is required")
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-update-replication-info-request-target-kafka-cluster-arn
                         :shape "__string" :location common-lisp:nil
                         :location-name "targetKafkaClusterArn")
                        (topic-replication :initarg :topic-replication
                         :initform common-lisp:nil :type
                         (common-lisp:or topic-replication-update
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-replication-info-request-topic-replication
                         :shape "TopicReplicationUpdate" :location
                         common-lisp:nil :location-name "topicReplication"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-replication-info-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-replication-info-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-replication-info-request
                    'make-update-replication-info-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-replication-info-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-replication-info-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'consumer-group-replication))
      (common-lisp:list
       (common-lisp:cons "ConsumerGroupReplication"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'current-version))
      (common-lisp:list
       (common-lisp:cons "CurrentVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-kafka-cluster-arn))
      (common-lisp:list
       (common-lisp:cons "SourceKafkaClusterArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'target-kafka-cluster-arn))
      (common-lisp:list
       (common-lisp:cons "TargetKafkaClusterArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'topic-replication))
      (common-lisp:list
       (common-lisp:cons "TopicReplication"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-replication-info-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-replication-info-response common-lisp:nil
                       ((replicator-arn :initarg :replicator-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-update-replication-info-response-replicator-arn
                         :shape "__string" :location common-lisp:nil
                         :location-name "replicatorArn")
                        (replicator-state :initarg :replicator-state :initform
                         common-lisp:nil :type
                         (common-lisp:or replicator-state common-lisp:null)
                         :accessor
                         struct-shape-update-replication-info-response-replicator-state
                         :shape "ReplicatorState" :location common-lisp:nil
                         :location-name "replicatorState"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-replication-info-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-replication-info-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-replication-info-response
                    'make-update-replication-info-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-replication-info-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-replication-info-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'replicator-arn))
      (common-lisp:list
       (common-lisp:cons "ReplicatorArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'replicator-state))
      (common-lisp:list
       (common-lisp:cons "ReplicatorState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-replication-info-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-security-request common-lisp:nil
                       ((client-authentication :initarg :client-authentication
                         :initform common-lisp:nil :type
                         (common-lisp:or client-authentication
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-security-request-client-authentication
                         :shape "ClientAuthentication" :location
                         common-lisp:nil :location-name "clientAuthentication")
                        (cluster-arn :initarg :cluster-arn :initform
                         (common-lisp:error ":cluster-arn is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-update-security-request-cluster-arn
                         :shape "__string" :location "uri" :location-name
                         "clusterArn")
                        (current-version :initarg :current-version :initform
                         (common-lisp:error ":current-version is required")
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-update-security-request-current-version
                         :shape "__string" :location common-lisp:nil
                         :location-name "currentVersion")
                        (encryption-info :initarg :encryption-info :initform
                         common-lisp:nil :type
                         (common-lisp:or encryption-info common-lisp:null)
                         :accessor
                         struct-shape-update-security-request-encryption-info
                         :shape "EncryptionInfo" :location common-lisp:nil
                         :location-name "encryptionInfo"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-security-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-security-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-security-request 'make-update-security-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-security-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-security-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-authentication))
      (common-lisp:list
       (common-lisp:cons "ClientAuthentication"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'current-version))
      (common-lisp:list
       (common-lisp:cons "CurrentVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encryption-info))
      (common-lisp:list
       (common-lisp:cons "EncryptionInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-security-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-security-response common-lisp:nil
                       ((cluster-arn :initarg :cluster-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-update-security-response-cluster-arn
                         :shape "__string" :location common-lisp:nil
                         :location-name "clusterArn")
                        (cluster-operation-arn :initarg :cluster-operation-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-update-security-response-cluster-operation-arn
                         :shape "__string" :location common-lisp:nil
                         :location-name "clusterOperationArn"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-security-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-security-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-security-response 'make-update-security-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-security-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-security-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-arn))
      (common-lisp:list
       (common-lisp:cons "ClusterArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cluster-operation-arn))
      (common-lisp:list
       (common-lisp:cons "ClusterOperationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-security-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-storage-request common-lisp:nil
                       ((cluster-arn :initarg :cluster-arn :initform
                         (common-lisp:error ":cluster-arn is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-update-storage-request-cluster-arn :shape
                         "__string" :location "uri" :location-name
                         "clusterArn")
                        (current-version :initarg :current-version :initform
                         (common-lisp:error ":current-version is required")
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-update-storage-request-current-version
                         :shape "__string" :location common-lisp:nil
                         :location-name "currentVersion")
                        (provisioned-throughput :initarg
                         :provisioned-throughput :initform common-lisp:nil
                         :type
                         (common-lisp:or provisioned-throughput
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-storage-request-provisioned-throughput
                         :shape "ProvisionedThroughput" :location
                         common-lisp:nil :location-name
                         "provisionedThroughput")
                        (storage-mode :initarg :storage-mode :initform
                         common-lisp:nil :type
                         (common-lisp:or storage-mode common-lisp:null)
                         :accessor
                         struct-shape-update-storage-request-storage-mode
                         :shape "StorageMode" :location common-lisp:nil
                         :location-name "storageMode")
                        (volume-size-gb :initarg :volume-size-gb :initform
                         common-lisp:nil :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor
                         struct-shape-update-storage-request-volume-size-gb
                         :shape "__integer" :location common-lisp:nil
                         :location-name "volumeSizeGB"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-storage-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-storage-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-storage-request 'make-update-storage-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-storage-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-storage-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'current-version))
      (common-lisp:list
       (common-lisp:cons "CurrentVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'provisioned-throughput))
      (common-lisp:list
       (common-lisp:cons "ProvisionedThroughput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-mode))
      (common-lisp:list
       (common-lisp:cons "StorageMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'volume-size-gb))
      (common-lisp:list
       (common-lisp:cons "VolumeSizeGB"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-storage-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-storage-response common-lisp:nil
                       ((cluster-arn :initarg :cluster-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-update-storage-response-cluster-arn
                         :shape "__string" :location common-lisp:nil
                         :location-name "clusterArn")
                        (cluster-operation-arn :initarg :cluster-operation-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-update-storage-response-cluster-operation-arn
                         :shape "__string" :location common-lisp:nil
                         :location-name "clusterOperationArn"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-storage-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-storage-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-storage-response 'make-update-storage-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-storage-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-storage-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-arn))
      (common-lisp:list
       (common-lisp:cons "ClusterArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cluster-operation-arn))
      (common-lisp:list
       (common-lisp:cons "ClusterOperationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-storage-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass user-identity common-lisp:nil
                       ((type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or user-identity-type common-lisp:null)
                         :accessor struct-shape-user-identity-type :shape
                         "UserIdentityType" :location common-lisp:nil
                         :location-name "type")
                        (principal-id :initarg :principal-id :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-user-identity-principal-id :shape
                         "__string" :location common-lisp:nil :location-name
                         "principalId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-user-identity
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'user-identity
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'user-identity 'make-user-identity))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input user-identity))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input user-identity))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'principal-id))
      (common-lisp:list
       (common-lisp:cons "PrincipalId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input user-identity))
   common-lisp:nil))
(common-lisp:deftype user-identity-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass zookeeper-node-info common-lisp:nil
                       ((attached-eniid :initarg :attached-eniid :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-zookeeper-node-info-attached-eniid :shape
                         "__string" :location common-lisp:nil :location-name
                         "attachedENIId")
                        (client-vpc-ip-address :initarg :client-vpc-ip-address
                         :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-zookeeper-node-info-client-vpc-ip-address
                         :shape "__string" :location common-lisp:nil
                         :location-name "clientVpcIpAddress")
                        (endpoints :initarg :endpoints :initform
                         common-lisp:nil :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor struct-shape-zookeeper-node-info-endpoints
                         :shape "__listOf__string" :location common-lisp:nil
                         :location-name "endpoints")
                        (zookeeper-id :initarg :zookeeper-id :initform
                         common-lisp:nil :type
                         (common-lisp:or |__double| common-lisp:null) :accessor
                         struct-shape-zookeeper-node-info-zookeeper-id :shape
                         "__double" :location common-lisp:nil :location-name
                         "zookeeperId")
                        (zookeeper-version :initarg :zookeeper-version
                         :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-zookeeper-node-info-zookeeper-version
                         :shape "__string" :location common-lisp:nil
                         :location-name "zookeeperVersion"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-zookeeper-node-info
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'zookeeper-node-info
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'zookeeper-node-info 'make-zookeeper-node-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input zookeeper-node-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input zookeeper-node-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attached-eniid))
      (common-lisp:list
       (common-lisp:cons "AttachedENIId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-vpc-ip-address))
      (common-lisp:list
       (common-lisp:cons "ClientVpcIpAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoints))
      (common-lisp:list
       (common-lisp:cons "Endpoints"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'zookeeper-id))
      (common-lisp:list
       (common-lisp:cons "ZookeeperId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'zookeeper-version))
      (common-lisp:list
       (common-lisp:cons "ZookeeperVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input zookeeper-node-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass open-monitoring common-lisp:nil
                       ((prometheus :initarg :prometheus :initform
                         (common-lisp:error ":prometheus is required") :type
                         (common-lisp:or prometheus common-lisp:null) :accessor
                         struct-shape-open-monitoring-prometheus :shape
                         "Prometheus" :location common-lisp:nil :location-name
                         "prometheus"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-open-monitoring
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'open-monitoring
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'open-monitoring 'make-open-monitoring))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input open-monitoring))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input open-monitoring))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'prometheus))
      (common-lisp:list
       (common-lisp:cons "Prometheus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input open-monitoring))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass open-monitoring-info common-lisp:nil
                       ((prometheus :initarg :prometheus :initform
                         (common-lisp:error ":prometheus is required") :type
                         (common-lisp:or prometheus-info common-lisp:null)
                         :accessor struct-shape-open-monitoring-info-prometheus
                         :shape "PrometheusInfo" :location common-lisp:nil
                         :location-name "prometheus"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-open-monitoring-info
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'open-monitoring-info
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'open-monitoring-info 'make-open-monitoring-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input open-monitoring-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input open-monitoring-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'prometheus))
      (common-lisp:list
       (common-lisp:cons "Prometheus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input open-monitoring-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass prometheus common-lisp:nil
                       ((jmx-exporter :initarg :jmx-exporter :initform
                         common-lisp:nil :type
                         (common-lisp:or jmx-exporter common-lisp:null)
                         :accessor struct-shape-prometheus-jmx-exporter :shape
                         "JmxExporter" :location common-lisp:nil :location-name
                         "jmxExporter")
                        (node-exporter :initarg :node-exporter :initform
                         common-lisp:nil :type
                         (common-lisp:or node-exporter common-lisp:null)
                         :accessor struct-shape-prometheus-node-exporter :shape
                         "NodeExporter" :location common-lisp:nil
                         :location-name "nodeExporter"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-prometheus
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'prometheus
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'prometheus 'make-prometheus))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input prometheus))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input prometheus))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'jmx-exporter))
      (common-lisp:list
       (common-lisp:cons "JmxExporter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'node-exporter))
      (common-lisp:list
       (common-lisp:cons "NodeExporter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input prometheus))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass prometheus-info common-lisp:nil
                       ((jmx-exporter :initarg :jmx-exporter :initform
                         common-lisp:nil :type
                         (common-lisp:or jmx-exporter-info common-lisp:null)
                         :accessor struct-shape-prometheus-info-jmx-exporter
                         :shape "JmxExporterInfo" :location common-lisp:nil
                         :location-name "jmxExporter")
                        (node-exporter :initarg :node-exporter :initform
                         common-lisp:nil :type
                         (common-lisp:or node-exporter-info common-lisp:null)
                         :accessor struct-shape-prometheus-info-node-exporter
                         :shape "NodeExporterInfo" :location common-lisp:nil
                         :location-name "nodeExporter"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-prometheus-info
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'prometheus-info
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'prometheus-info 'make-prometheus-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input prometheus-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input prometheus-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'jmx-exporter))
      (common-lisp:list
       (common-lisp:cons "JmxExporter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'node-exporter))
      (common-lisp:list
       (common-lisp:cons "NodeExporter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input prometheus-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass provisioned-throughput common-lisp:nil
                       ((enabled :initarg :enabled :initform common-lisp:nil
                         :type (common-lisp:or |__boolean| common-lisp:null)
                         :accessor struct-shape-provisioned-throughput-enabled
                         :shape "__boolean" :location common-lisp:nil
                         :location-name "enabled")
                        (volume-throughput :initarg :volume-throughput
                         :initform common-lisp:nil :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor
                         struct-shape-provisioned-throughput-volume-throughput
                         :shape "__integer" :location common-lisp:nil
                         :location-name "volumeThroughput"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-provisioned-throughput
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'provisioned-throughput
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'provisioned-throughput 'make-provisioned-throughput))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          provisioned-throughput))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          provisioned-throughput))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "Enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'volume-throughput))
      (common-lisp:list
       (common-lisp:cons "VolumeThroughput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          provisioned-throughput))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass public-access common-lisp:nil
                       ((type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-public-access-type :shape "__string"
                         :location common-lisp:nil :location-name "type"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-public-access
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'public-access
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'public-access 'make-public-access))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input public-access))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input public-access))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input public-access))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass vpc-connectivity common-lisp:nil
                       ((client-authentication :initarg :client-authentication
                         :initform common-lisp:nil :type
                         (common-lisp:or vpc-connectivity-client-authentication
                                         common-lisp:null)
                         :accessor
                         struct-shape-vpc-connectivity-client-authentication
                         :shape "VpcConnectivityClientAuthentication" :location
                         common-lisp:nil :location-name
                         "clientAuthentication"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-vpc-connectivity
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'vpc-connectivity
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'vpc-connectivity 'make-vpc-connectivity))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input vpc-connectivity))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input vpc-connectivity))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-authentication))
      (common-lisp:list
       (common-lisp:cons "ClientAuthentication"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input vpc-connectivity))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass vpc-connection-info common-lisp:nil
                       ((vpc-connection-arn :initarg :vpc-connection-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-vpc-connection-info-vpc-connection-arn
                         :shape "__string" :location common-lisp:nil
                         :location-name "vpcConnectionArn")
                        (owner :initarg :owner :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-vpc-connection-info-owner :shape
                         "__string" :location common-lisp:nil :location-name
                         "owner")
                        (user-identity :initarg :user-identity :initform
                         common-lisp:nil :type
                         (common-lisp:or user-identity common-lisp:null)
                         :accessor
                         struct-shape-vpc-connection-info-user-identity :shape
                         "UserIdentity" :location common-lisp:nil
                         :location-name "userIdentity")
                        (creation-time :initarg :creation-time :initform
                         common-lisp:nil :type
                         (common-lisp:or |__timestampIso8601| common-lisp:null)
                         :accessor
                         struct-shape-vpc-connection-info-creation-time :shape
                         "__timestampIso8601" :location common-lisp:nil
                         :location-name "creationTime"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-vpc-connection-info
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'vpc-connection-info
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'vpc-connection-info 'make-vpc-connection-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input vpc-connection-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input vpc-connection-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-connection-arn))
      (common-lisp:list
       (common-lisp:cons "VpcConnectionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner))
      (common-lisp:list
       (common-lisp:cons "Owner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-identity))
      (common-lisp:list
       (common-lisp:cons "UserIdentity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input vpc-connection-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass vpc-connection-info-serverless common-lisp:nil
                       ((creation-time :initarg :creation-time :initform
                         common-lisp:nil :type
                         (common-lisp:or |__timestampIso8601| common-lisp:null)
                         :accessor
                         struct-shape-vpc-connection-info-serverless-creation-time
                         :shape "__timestampIso8601" :location common-lisp:nil
                         :location-name "creationTime")
                        (owner :initarg :owner :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-vpc-connection-info-serverless-owner
                         :shape "__string" :location common-lisp:nil
                         :location-name "owner")
                        (user-identity :initarg :user-identity :initform
                         common-lisp:nil :type
                         (common-lisp:or user-identity common-lisp:null)
                         :accessor
                         struct-shape-vpc-connection-info-serverless-user-identity
                         :shape "UserIdentity" :location common-lisp:nil
                         :location-name "userIdentity")
                        (vpc-connection-arn :initarg :vpc-connection-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-vpc-connection-info-serverless-vpc-connection-arn
                         :shape "__string" :location common-lisp:nil
                         :location-name "vpcConnectionArn"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-vpc-connection-info-serverless
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'vpc-connection-info-serverless
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'vpc-connection-info-serverless
                    'make-vpc-connection-info-serverless))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          vpc-connection-info-serverless))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          vpc-connection-info-serverless))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner))
      (common-lisp:list
       (common-lisp:cons "Owner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-identity))
      (common-lisp:list
       (common-lisp:cons "UserIdentity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-connection-arn))
      (common-lisp:list
       (common-lisp:cons "VpcConnectionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          vpc-connection-info-serverless))
   common-lisp:nil))
(common-lisp:deftype vpc-connection-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass reboot-broker-request common-lisp:nil
                       ((broker-ids :initarg :broker-ids :initform
                         (common-lisp:error ":broker-ids is required") :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor
                         struct-shape-reboot-broker-request-broker-ids :shape
                         "__listOf__string" :location common-lisp:nil
                         :location-name "brokerIds")
                        (cluster-arn :initarg :cluster-arn :initform
                         (common-lisp:error ":cluster-arn is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-reboot-broker-request-cluster-arn :shape
                         "__string" :location "uri" :location-name
                         "clusterArn"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-reboot-broker-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'reboot-broker-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'reboot-broker-request 'make-reboot-broker-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reboot-broker-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reboot-broker-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'broker-ids))
      (common-lisp:list
       (common-lisp:cons "BrokerIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reboot-broker-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass reboot-broker-response common-lisp:nil
                       ((cluster-arn :initarg :cluster-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-reboot-broker-response-cluster-arn :shape
                         "__string" :location common-lisp:nil :location-name
                         "clusterArn")
                        (cluster-operation-arn :initarg :cluster-operation-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-reboot-broker-response-cluster-operation-arn
                         :shape "__string" :location common-lisp:nil
                         :location-name "clusterOperationArn"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-reboot-broker-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'reboot-broker-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'reboot-broker-response 'make-reboot-broker-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reboot-broker-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reboot-broker-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-arn))
      (common-lisp:list
       (common-lisp:cons "ClusterArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cluster-operation-arn))
      (common-lisp:list
       (common-lisp:cons "ClusterOperationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reboot-broker-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass s3 common-lisp:nil
                       ((bucket :initarg :bucket :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor struct-shape-s3-bucket :shape "__string"
                         :location common-lisp:nil :location-name "bucket")
                        (enabled :initarg :enabled :initform
                         (common-lisp:error ":enabled is required") :type
                         (common-lisp:or |__boolean| common-lisp:null)
                         :accessor struct-shape-s3-enabled :shape "__boolean"
                         :location common-lisp:nil :location-name "enabled")
                        (prefix :initarg :prefix :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor struct-shape-s3-prefix :shape "__string"
                         :location common-lisp:nil :location-name "prefix"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-s3 (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 's3
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 's3 'make-s3))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input s3))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input s3))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket))
      (common-lisp:list
       (common-lisp:cons "Bucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "Enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'prefix))
      (common-lisp:list
       (common-lisp:cons "Prefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input s3))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass jmx-exporter common-lisp:nil
                       ((enabled-in-broker :initarg :enabled-in-broker
                         :initform
                         (common-lisp:error ":enabled-in-broker is required")
                         :type (common-lisp:or |__boolean| common-lisp:null)
                         :accessor struct-shape-jmx-exporter-enabled-in-broker
                         :shape "__boolean" :location common-lisp:nil
                         :location-name "enabledInBroker"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-jmx-exporter
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'jmx-exporter
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'jmx-exporter 'make-jmx-exporter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input jmx-exporter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input jmx-exporter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled-in-broker))
      (common-lisp:list
       (common-lisp:cons "EnabledInBroker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input jmx-exporter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass jmx-exporter-info common-lisp:nil
                       ((enabled-in-broker :initarg :enabled-in-broker
                         :initform
                         (common-lisp:error ":enabled-in-broker is required")
                         :type (common-lisp:or |__boolean| common-lisp:null)
                         :accessor
                         struct-shape-jmx-exporter-info-enabled-in-broker
                         :shape "__boolean" :location common-lisp:nil
                         :location-name "enabledInBroker"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-jmx-exporter-info
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'jmx-exporter-info
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'jmx-exporter-info 'make-jmx-exporter-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input jmx-exporter-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input jmx-exporter-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled-in-broker))
      (common-lisp:list
       (common-lisp:cons "EnabledInBroker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input jmx-exporter-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass node-exporter common-lisp:nil
                       ((enabled-in-broker :initarg :enabled-in-broker
                         :initform
                         (common-lisp:error ":enabled-in-broker is required")
                         :type (common-lisp:or |__boolean| common-lisp:null)
                         :accessor struct-shape-node-exporter-enabled-in-broker
                         :shape "__boolean" :location common-lisp:nil
                         :location-name "enabledInBroker"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-node-exporter
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'node-exporter
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'node-exporter 'make-node-exporter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input node-exporter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input node-exporter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled-in-broker))
      (common-lisp:list
       (common-lisp:cons "EnabledInBroker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input node-exporter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass node-exporter-info common-lisp:nil
                       ((enabled-in-broker :initarg :enabled-in-broker
                         :initform
                         (common-lisp:error ":enabled-in-broker is required")
                         :type (common-lisp:or |__boolean| common-lisp:null)
                         :accessor
                         struct-shape-node-exporter-info-enabled-in-broker
                         :shape "__boolean" :location common-lisp:nil
                         :location-name "enabledInBroker"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-node-exporter-info
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'node-exporter-info
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'node-exporter-info 'make-node-exporter-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input node-exporter-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input node-exporter-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled-in-broker))
      (common-lisp:list
       (common-lisp:cons "EnabledInBroker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input node-exporter-info))
   common-lisp:nil))
(common-lisp:deftype |__boolean| () 'common-lisp:boolean)
(common-lisp:deftype |__blob| ()
  '(common-lisp:simple-array (common-lisp:unsigned-byte 8) (common-lisp:*)))
(common-lisp:deftype |__double| () 'common-lisp:double-float)
(common-lisp:deftype |__integer| () 'common-lisp:integer)
(common-lisp:deftype |__integerMin1Max15| () 'common-lisp:integer)
(common-lisp:deftype |__integerMin1Max16384| () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:deftype |__listOfBrokerEBSVolumeInfo| ()
   '(trivial-types:proper-list broker-ebsvolume-info))
 (common-lisp:defun make-__listofbrokerebsvolumeinfo
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list broker-ebsvolume-info))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfClusterInfo| ()
   '(trivial-types:proper-list cluster-info))
 (common-lisp:defun make-__listofclusterinfo
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list cluster-info))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfClusterOperationV2Summary| ()
   '(trivial-types:proper-list cluster-operation-v2summary))
 (common-lisp:defun make-__listofclusteroperationv2summary
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            cluster-operation-v2summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfClusterOperationInfo| ()
   '(trivial-types:proper-list cluster-operation-info))
 (common-lisp:defun make-__listofclusteroperationinfo
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list cluster-operation-info))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfClusterOperationStep| ()
   '(trivial-types:proper-list cluster-operation-step))
 (common-lisp:defun make-__listofclusteroperationstep
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list cluster-operation-step))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfCompatibleKafkaVersion| ()
   '(trivial-types:proper-list compatible-kafka-version))
 (common-lisp:defun make-__listofcompatiblekafkaversion
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            compatible-kafka-version))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfCluster| ()
   '(trivial-types:proper-list cluster))
 (common-lisp:defun make-__listofcluster
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list cluster))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfVpcConfig| ()
   '(trivial-types:proper-list vpc-config))
 (common-lisp:defun make-__listofvpcconfig
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list vpc-config))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfConfiguration| ()
   '(trivial-types:proper-list configuration))
 (common-lisp:defun make-__listofconfiguration
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list configuration))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfConfigurationRevision| ()
   '(trivial-types:proper-list configuration-revision))
 (common-lisp:defun make-__listofconfigurationrevision
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list configuration-revision))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfKafkaCluster| ()
   '(trivial-types:proper-list kafka-cluster))
 (common-lisp:defun make-__listofkafkacluster
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list kafka-cluster))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfKafkaClusterDescription| ()
   '(trivial-types:proper-list kafka-cluster-description))
 (common-lisp:defun make-__listofkafkaclusterdescription
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            kafka-cluster-description))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfKafkaClusterSummary| ()
   '(trivial-types:proper-list kafka-cluster-summary))
 (common-lisp:defun make-__listofkafkaclustersummary
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list kafka-cluster-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfKafkaVersion| ()
   '(trivial-types:proper-list kafka-version))
 (common-lisp:defun make-__listofkafkaversion
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list kafka-version))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfNodeInfo| ()
   '(trivial-types:proper-list node-info))
 (common-lisp:defun make-__listofnodeinfo
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list node-info))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfClientVpcConnection| ()
   '(trivial-types:proper-list client-vpc-connection))
 (common-lisp:defun make-__listofclientvpcconnection
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list client-vpc-connection))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfReplicationInfo| ()
   '(trivial-types:proper-list replication-info))
 (common-lisp:defun make-__listofreplicationinfo
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list replication-info))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfReplicationInfoDescription| ()
   '(trivial-types:proper-list replication-info-description))
 (common-lisp:defun make-__listofreplicationinfodescription
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            replication-info-description))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfReplicationInfoSummary| ()
   '(trivial-types:proper-list replication-info-summary))
 (common-lisp:defun make-__listofreplicationinfosummary
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            replication-info-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfReplicatorSummary| ()
   '(trivial-types:proper-list replicator-summary))
 (common-lisp:defun make-__listofreplicatorsummary
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list replicator-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfVpcConnection| ()
   '(trivial-types:proper-list vpc-connection))
 (common-lisp:defun make-__listofvpcconnection
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list vpc-connection))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfUnprocessedScramSecret| ()
   '(trivial-types:proper-list unprocessed-scram-secret))
 (common-lisp:defun make-__listofunprocessedscramsecret
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            unprocessed-scram-secret))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOf__string| ()
   '(trivial-types:proper-list |__string|))
 (common-lisp:defun make-__listof__string
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list |__string|))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOf__stringMax249| ()
   '(trivial-types:proper-list |__stringMax249|))
 (common-lisp:defun make-__listof__stringmax249
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list |__stringMax249|))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOf__stringMax256| ()
   '(trivial-types:proper-list |__stringMax256|))
 (common-lisp:defun make-__listof__stringmax256
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list |__stringMax256|))
   aws-sdk/generator/shape::members))
(common-lisp:deftype |__long| () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:deftype |__mapOf__string| () 'common-lisp:hash-table)
 (common-lisp:defun make-__mapof__string (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype |__string| () 'common-lisp:string)
(common-lisp:deftype |__stringMax1024| () 'common-lisp:string)
(common-lisp:deftype |__stringMax249| () 'common-lisp:string)
(common-lisp:deftype |__stringMax256| () 'common-lisp:string)
(common-lisp:deftype |__stringMin1Max128| () 'common-lisp:string)
(common-lisp:deftype |__stringMin1Max128Pattern09AZaZ09AZaZ0| ()
  'common-lisp:string)
(common-lisp:deftype |__stringMin1Max64| () 'common-lisp:string)
(common-lisp:deftype |__stringMin5Max32| () 'common-lisp:string)
(common-lisp:deftype |__timestampIso8601| () 'common-lisp:string)
(common-lisp:deftype |__timestampUnix| () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defun batch-associate-scram-secret
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-arn secret-arn-list)
   (common-lisp:declare (common-lisp:ignorable cluster-arn secret-arn-list))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-batch-associate-scram-secret-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kafka-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/clusters/~A/scram-secrets"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'cluster-arn))))
                                                        "BatchAssociateScramSecret"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'batch-associate-scram-secret))
(common-lisp:progn
 (common-lisp:defun create-cluster
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key broker-node-group-info
                     client-authentication cluster-name configuration-info
                     encryption-info enhanced-monitoring kafka-version
                     logging-info number-of-broker-nodes open-monitoring tags
                     storage-mode)
   (common-lisp:declare
    (common-lisp:ignorable broker-node-group-info client-authentication
     cluster-name configuration-info encryption-info enhanced-monitoring
     kafka-version logging-info number-of-broker-nodes open-monitoring tags
     storage-mode))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-cluster-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kafka-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/v1/clusters"
                                                        "CreateCluster"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-cluster))
(common-lisp:progn
 (common-lisp:defun create-cluster-v2
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-name tags provisioned serverless)
   (common-lisp:declare
    (common-lisp:ignorable cluster-name tags provisioned serverless))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-cluster-v2request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kafka-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/api/v2/clusters"
                                                        "CreateClusterV2"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-cluster-v2))
(common-lisp:progn
 (common-lisp:defun create-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key description kafka-versions name
                     server-properties)
   (common-lisp:declare
    (common-lisp:ignorable description kafka-versions name server-properties))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-configuration-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kafka-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/v1/configurations"
                                                        "CreateConfiguration"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-configuration))
(common-lisp:progn
 (common-lisp:defun create-replicator
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key description kafka-clusters
                     replication-info-list replicator-name
                     service-execution-role-arn tags)
   (common-lisp:declare
    (common-lisp:ignorable description kafka-clusters replication-info-list
     replicator-name service-execution-role-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-replicator-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kafka-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/replication/v1/replicators"
                                                        "CreateReplicator"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-replicator))
(common-lisp:progn
 (common-lisp:defun create-vpc-connection
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key target-cluster-arn authentication vpc-id
                     client-subnets security-groups tags)
   (common-lisp:declare
    (common-lisp:ignorable target-cluster-arn authentication vpc-id
     client-subnets security-groups tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-vpc-connection-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kafka-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/v1/vpc-connection"
                                                        "CreateVpcConnection"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-vpc-connection))
(common-lisp:progn
 (common-lisp:defun delete-cluster
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-arn current-version)
   (common-lisp:declare (common-lisp:ignorable cluster-arn current-version))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-cluster-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kafka-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/clusters/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'cluster-arn))))
                                                        "DeleteCluster"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-cluster))
(common-lisp:progn
 (common-lisp:defun delete-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key arn)
   (common-lisp:declare (common-lisp:ignorable arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-configuration-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kafka-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/configurations/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'arn))))
                                                        "DeleteConfiguration"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-configuration))
(common-lisp:progn
 (common-lisp:defun delete-replicator
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key current-version replicator-arn)
   (common-lisp:declare (common-lisp:ignorable current-version replicator-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-replicator-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kafka-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/replication/v1/replicators/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'replicator-arn))))
                                                        "DeleteReplicator"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-replicator))
(common-lisp:progn
 (common-lisp:defun delete-vpc-connection
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key arn)
   (common-lisp:declare (common-lisp:ignorable arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-vpc-connection-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kafka-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/vpc-connection/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'arn))))
                                                        "DeleteVpcConnection"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-vpc-connection))
(common-lisp:progn
 (common-lisp:defun describe-cluster
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-arn)
   (common-lisp:declare (common-lisp:ignorable cluster-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-cluster-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kafka-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/clusters/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'cluster-arn))))
                                                        "DescribeCluster"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-cluster))
(common-lisp:progn
 (common-lisp:defun describe-cluster-v2
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-arn)
   (common-lisp:declare (common-lisp:ignorable cluster-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-cluster-v2request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kafka-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/api/v2/clusters/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'cluster-arn))))
                                                        "DescribeClusterV2"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-cluster-v2))
(common-lisp:progn
 (common-lisp:defun describe-cluster-operation
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-operation-arn)
   (common-lisp:declare (common-lisp:ignorable cluster-operation-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-cluster-operation-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kafka-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/operations/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'cluster-operation-arn))))
                                                        "DescribeClusterOperation"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-cluster-operation))
(common-lisp:progn
 (common-lisp:defun describe-cluster-operation-v2
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-operation-arn)
   (common-lisp:declare (common-lisp:ignorable cluster-operation-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-cluster-operation-v2request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kafka-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/api/v2/operations/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'cluster-operation-arn))))
                                                        "DescribeClusterOperationV2"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-cluster-operation-v2))
(common-lisp:progn
 (common-lisp:defun describe-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key arn)
   (common-lisp:declare (common-lisp:ignorable arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-configuration-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kafka-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/configurations/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'arn))))
                                                        "DescribeConfiguration"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-configuration))
(common-lisp:progn
 (common-lisp:defun describe-configuration-revision
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key arn revision)
   (common-lisp:declare (common-lisp:ignorable arn revision))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-configuration-revision-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kafka-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/configurations/~A/revisions/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'arn))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'revision))))
                                                        "DescribeConfigurationRevision"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-configuration-revision))
(common-lisp:progn
 (common-lisp:defun describe-replicator
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key replicator-arn)
   (common-lisp:declare (common-lisp:ignorable replicator-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-replicator-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kafka-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/replication/v1/replicators/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'replicator-arn))))
                                                        "DescribeReplicator"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-replicator))
(common-lisp:progn
 (common-lisp:defun describe-vpc-connection
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key arn)
   (common-lisp:declare (common-lisp:ignorable arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-vpc-connection-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kafka-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/vpc-connection/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'arn))))
                                                        "DescribeVpcConnection"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-vpc-connection))
(common-lisp:progn
 (common-lisp:defun batch-disassociate-scram-secret
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-arn secret-arn-list)
   (common-lisp:declare (common-lisp:ignorable cluster-arn secret-arn-list))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-batch-disassociate-scram-secret-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kafka-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/clusters/~A/scram-secrets"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'cluster-arn))))
                                                        "BatchDisassociateScramSecret"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'batch-disassociate-scram-secret))
(common-lisp:progn
 (common-lisp:defun get-bootstrap-brokers
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-arn)
   (common-lisp:declare (common-lisp:ignorable cluster-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-bootstrap-brokers-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kafka-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/clusters/~A/bootstrap-brokers"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'cluster-arn))))
                                                        "GetBootstrapBrokers"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-bootstrap-brokers))
(common-lisp:progn
 (common-lisp:defun get-compatible-kafka-versions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-arn)
   (common-lisp:declare (common-lisp:ignorable cluster-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-compatible-kafka-versions-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kafka-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        "/v1/compatible-kafka-versions"
                                                        "GetCompatibleKafkaVersions"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-compatible-kafka-versions))
(common-lisp:progn
 (common-lisp:defun list-cluster-operations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-arn max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable cluster-arn max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-cluster-operations-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kafka-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/clusters/~A/operations"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'cluster-arn))))
                                                        "ListClusterOperations"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-cluster-operations))
(common-lisp:progn
 (common-lisp:defun list-cluster-operations-v2
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-arn max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable cluster-arn max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-cluster-operations-v2request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kafka-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/api/v2/clusters/~A/operations"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'cluster-arn))))
                                                        "ListClusterOperationsV2"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-cluster-operations-v2))
(common-lisp:progn
 (common-lisp:defun list-clusters
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-name-filter max-results
                     next-token)
   (common-lisp:declare
    (common-lisp:ignorable cluster-name-filter max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-clusters-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kafka-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" "/v1/clusters"
                                                        "ListClusters"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-clusters))
(common-lisp:progn
 (common-lisp:defun list-clusters-v2
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-name-filter cluster-type-filter
                     max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable cluster-name-filter cluster-type-filter max-results
     next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-clusters-v2request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kafka-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        "/api/v2/clusters"
                                                        "ListClustersV2"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-clusters-v2))
(common-lisp:progn
 (common-lisp:defun list-configuration-revisions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key arn max-results next-token)
   (common-lisp:declare (common-lisp:ignorable arn max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-configuration-revisions-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kafka-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/configurations/~A/revisions"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'arn))))
                                                        "ListConfigurationRevisions"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-configuration-revisions))
(common-lisp:progn
 (common-lisp:defun list-configurations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-configurations-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kafka-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        "/v1/configurations"
                                                        "ListConfigurations"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-configurations))
(common-lisp:progn
 (common-lisp:defun list-kafka-versions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-kafka-versions-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kafka-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        "/v1/kafka-versions"
                                                        "ListKafkaVersions"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-kafka-versions))
(common-lisp:progn
 (common-lisp:defun list-nodes
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-arn max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable cluster-arn max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-nodes-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kafka-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/clusters/~A/nodes"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'cluster-arn))))
                                                        "ListNodes"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-nodes))
(common-lisp:progn
 (common-lisp:defun list-replicators
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token
                     replicator-name-filter)
   (common-lisp:declare
    (common-lisp:ignorable max-results next-token replicator-name-filter))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-replicators-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kafka-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        "/replication/v1/replicators"
                                                        "ListReplicators"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-replicators))
(common-lisp:progn
 (common-lisp:defun list-scram-secrets
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-arn max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable cluster-arn max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-scram-secrets-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kafka-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/clusters/~A/scram-secrets"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'cluster-arn))))
                                                        "ListScramSecrets"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-scram-secrets))
(common-lisp:progn
 (common-lisp:defun list-tags-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn)
   (common-lisp:declare (common-lisp:ignorable resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-for-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kafka-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "ListTagsForResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-tags-for-resource))
(common-lisp:progn
 (common-lisp:defun list-client-vpc-connections
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-arn max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable cluster-arn max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-client-vpc-connections-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kafka-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/clusters/~A/client-vpc-connections"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'cluster-arn))))
                                                        "ListClientVpcConnections"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-client-vpc-connections))
(common-lisp:progn
 (common-lisp:defun list-vpc-connections
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-vpc-connections-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kafka-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        "/v1/vpc-connections"
                                                        "ListVpcConnections"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-vpc-connections))
(common-lisp:progn
 (common-lisp:defun reject-client-vpc-connection
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-arn vpc-connection-arn)
   (common-lisp:declare (common-lisp:ignorable cluster-arn vpc-connection-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-reject-client-vpc-connection-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kafka-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/clusters/~A/client-vpc-connection"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'cluster-arn))))
                                                        "RejectClientVpcConnection"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'reject-client-vpc-connection))
(common-lisp:progn
 (common-lisp:defun delete-cluster-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-arn)
   (common-lisp:declare (common-lisp:ignorable cluster-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-cluster-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kafka-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/clusters/~A/policy"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'cluster-arn))))
                                                        "DeleteClusterPolicy"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-cluster-policy))
(common-lisp:progn
 (common-lisp:defun get-cluster-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-arn)
   (common-lisp:declare (common-lisp:ignorable cluster-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-cluster-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kafka-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/clusters/~A/policy"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'cluster-arn))))
                                                        "GetClusterPolicy"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-cluster-policy))
(common-lisp:progn
 (common-lisp:defun put-cluster-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-arn current-version policy)
   (common-lisp:declare
    (common-lisp:ignorable cluster-arn current-version policy))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-cluster-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kafka-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/clusters/~A/policy"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'cluster-arn))))
                                                        "PutClusterPolicy"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'put-cluster-policy))
(common-lisp:progn
 (common-lisp:defun reboot-broker
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key broker-ids cluster-arn)
   (common-lisp:declare (common-lisp:ignorable broker-ids cluster-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-reboot-broker-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kafka-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/clusters/~A/reboot-broker"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'cluster-arn))))
                                                        "RebootBroker"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'reboot-broker))
(common-lisp:progn
 (common-lisp:defun tag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tags)
   (common-lisp:declare (common-lisp:ignorable resource-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kafka-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "TagResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'tag-resource))
(common-lisp:progn
 (common-lisp:defun untag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tag-keys)
   (common-lisp:declare (common-lisp:ignorable resource-arn tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kafka-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "UntagResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'untag-resource))
(common-lisp:progn
 (common-lisp:defun update-broker-count
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-arn current-version
                     target-number-of-broker-nodes)
   (common-lisp:declare
    (common-lisp:ignorable cluster-arn current-version
     target-number-of-broker-nodes))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-broker-count-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kafka-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/clusters/~A/nodes/count"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'cluster-arn))))
                                                        "UpdateBrokerCount"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-broker-count))
(common-lisp:progn
 (common-lisp:defun update-broker-type
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-arn current-version
                     target-instance-type)
   (common-lisp:declare
    (common-lisp:ignorable cluster-arn current-version target-instance-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-broker-type-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kafka-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/clusters/~A/nodes/type"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'cluster-arn))))
                                                        "UpdateBrokerType"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-broker-type))
(common-lisp:progn
 (common-lisp:defun update-broker-storage
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-arn current-version
                     target-broker-ebsvolume-info)
   (common-lisp:declare
    (common-lisp:ignorable cluster-arn current-version
     target-broker-ebsvolume-info))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-broker-storage-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kafka-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/clusters/~A/nodes/storage"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'cluster-arn))))
                                                        "UpdateBrokerStorage"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-broker-storage))
(common-lisp:progn
 (common-lisp:defun update-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key arn description server-properties)
   (common-lisp:declare
    (common-lisp:ignorable arn description server-properties))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-configuration-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kafka-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/configurations/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'arn))))
                                                        "UpdateConfiguration"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-configuration))
(common-lisp:progn
 (common-lisp:defun update-cluster-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-arn configuration-info
                     current-version)
   (common-lisp:declare
    (common-lisp:ignorable cluster-arn configuration-info current-version))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-cluster-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kafka-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/clusters/~A/configuration"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'cluster-arn))))
                                                        "UpdateClusterConfiguration"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-cluster-configuration))
(common-lisp:progn
 (common-lisp:defun update-cluster-kafka-version
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-arn configuration-info
                     current-version target-kafka-version)
   (common-lisp:declare
    (common-lisp:ignorable cluster-arn configuration-info current-version
     target-kafka-version))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-cluster-kafka-version-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kafka-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/clusters/~A/version"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'cluster-arn))))
                                                        "UpdateClusterKafkaVersion"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-cluster-kafka-version))
(common-lisp:progn
 (common-lisp:defun update-connectivity
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-arn connectivity-info
                     current-version)
   (common-lisp:declare
    (common-lisp:ignorable cluster-arn connectivity-info current-version))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-connectivity-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kafka-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/clusters/~A/connectivity"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'cluster-arn))))
                                                        "UpdateConnectivity"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-connectivity))
(common-lisp:progn
 (common-lisp:defun update-monitoring
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-arn current-version
                     enhanced-monitoring open-monitoring logging-info)
   (common-lisp:declare
    (common-lisp:ignorable cluster-arn current-version enhanced-monitoring
     open-monitoring logging-info))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-monitoring-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kafka-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/clusters/~A/monitoring"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'cluster-arn))))
                                                        "UpdateMonitoring"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-monitoring))
(common-lisp:progn
 (common-lisp:defun update-replication-info
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key consumer-group-replication
                     current-version replicator-arn source-kafka-cluster-arn
                     target-kafka-cluster-arn topic-replication)
   (common-lisp:declare
    (common-lisp:ignorable consumer-group-replication current-version
     replicator-arn source-kafka-cluster-arn target-kafka-cluster-arn
     topic-replication))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-replication-info-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kafka-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/replication/v1/replicators/~A/replication-info"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'replicator-arn))))
                                                        "UpdateReplicationInfo"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-replication-info))
(common-lisp:progn
 (common-lisp:defun update-security
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-authentication cluster-arn
                     current-version encryption-info)
   (common-lisp:declare
    (common-lisp:ignorable client-authentication cluster-arn current-version
     encryption-info))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-security-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kafka-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/clusters/~A/security"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'cluster-arn))))
                                                        "UpdateSecurity"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-security))
(common-lisp:progn
 (common-lisp:defun update-storage
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-arn current-version
                     provisioned-throughput storage-mode volume-size-gb)
   (common-lisp:declare
    (common-lisp:ignorable cluster-arn current-version provisioned-throughput
     storage-mode volume-size-gb))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-storage-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kafka-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/clusters/~A/storage"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'cluster-arn))))
                                                        "UpdateStorage"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-storage))
