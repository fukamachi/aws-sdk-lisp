;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(uiop/package:define-package #:aws-sdk/services/transcribe-streaming/api (:use)
                             (:nicknames #:aws/transcribe-streaming)
                             (:import-from #:aws-sdk/generator/shape)
                             (:import-from #:aws-sdk/generator/operation)
                             (:import-from #:aws-sdk/api)
                             (:import-from #:aws-sdk/request)
                             (:import-from #:aws-sdk/json-request)
                             (:import-from #:aws-sdk/rest-json-request)
                             (:import-from #:aws-sdk/rest-xml-request)
                             (:import-from #:aws-sdk/query-request)
                             (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/transcribe-streaming/api)
(common-lisp:progn
 (common-lisp:define-condition transcribe-streaming-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'transcribe-streaming-error))
(common-lisp:progn
 (common-lisp:defclass transcribe-streaming-request
                       (aws-sdk/generator/service::rest-json-request)
                       common-lisp:nil
                       (:default-initargs :service "transcribe-streaming"
                        :api-version "2017-10-26" :host-prefix
                        "transcribestreaming" :signing-name "transcribe"
                        :global-host common-lisp:nil))
 (common-lisp:export 'transcribe-streaming-request))
(common-lisp:defvar *error-map*
  '(("BadRequestException" . bad-request-exception)
    ("ConflictException" . conflict-exception)
    ("InternalFailureException" . internal-failure-exception)
    ("LimitExceededException" . limit-exceeded-exception)
    ("ServiceUnavailableException" . service-unavailable-exception)))
(common-lisp:progn
 (common-lisp:defclass alternative common-lisp:nil
                       ((transcript :initarg :transcript :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-alternative-transcript :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (items :initarg :items :initform common-lisp:nil :type
                         (common-lisp:or item-list common-lisp:null) :accessor
                         struct-shape-alternative-items :shape "ItemList"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (entities :initarg :entities :initform common-lisp:nil
                         :type (common-lisp:or entity-list common-lisp:null)
                         :accessor struct-shape-alternative-entities :shape
                         "EntityList" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-alternative
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'alternative
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'alternative 'make-alternative))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input alternative))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input alternative))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transcript))
      (common-lisp:list
       (common-lisp:cons "Transcript"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'items))
      (common-lisp:list
       (common-lisp:cons "Items"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entities))
      (common-lisp:list
       (common-lisp:cons "Entities"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input alternative))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype alternative-list ()
   '(trivial-types:proper-list alternative))
 (common-lisp:defun make-alternative-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list alternative))
   aws-sdk/generator/shape::members))
(common-lisp:deftype audio-chunk ()
  '(common-lisp:simple-array (common-lisp:unsigned-byte 8) (common-lisp:*)))
(common-lisp:progn
 (common-lisp:defclass audio-event common-lisp:nil
                       ((audio-chunk :initarg :audio-chunk :initform
                         common-lisp:nil :type
                         (common-lisp:or audio-chunk common-lisp:null)
                         :accessor struct-shape-audio-event-audio-chunk :shape
                         "AudioChunk" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-audio-event
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'audio-event
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'audio-event 'make-audio-event))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input audio-event))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input audio-event))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'audio-chunk))
      (common-lisp:list
       (common-lisp:cons "AudioChunk"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input audio-event))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass audio-stream common-lisp:nil
                       ((audio-event :initarg :audio-event :initform
                         common-lisp:nil :type
                         (common-lisp:or audio-event common-lisp:null)
                         :accessor struct-shape-audio-stream-audio-event :shape
                         "AudioEvent" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (configuration-event :initarg :configuration-event
                         :initform common-lisp:nil :type
                         (common-lisp:or configuration-event common-lisp:null)
                         :accessor
                         struct-shape-audio-stream-configuration-event :shape
                         "ConfigurationEvent" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-audio-stream
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'audio-stream
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'audio-stream 'make-audio-stream))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input audio-stream))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input audio-stream))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'audio-event))
      (common-lisp:list
       (common-lisp:cons "AudioEvent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration-event))
      (common-lisp:list
       (common-lisp:cons "ConfigurationEvent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input audio-stream))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition bad-request-exception
     (transcribe-streaming-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       bad-request-exception-message)))
 (common-lisp:export
  (common-lisp:list 'bad-request-exception 'bad-request-exception-message)))
(common-lisp:deftype boolean () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defclass call-analytics-entity common-lisp:nil
                       ((begin-offset-millis :initarg :begin-offset-millis
                         :initform common-lisp:nil :type
                         (common-lisp:or long common-lisp:null) :accessor
                         struct-shape-call-analytics-entity-begin-offset-millis
                         :shape "Long" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (end-offset-millis :initarg :end-offset-millis
                         :initform common-lisp:nil :type
                         (common-lisp:or long common-lisp:null) :accessor
                         struct-shape-call-analytics-entity-end-offset-millis
                         :shape "Long" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (category :initarg :category :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-call-analytics-entity-category
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-call-analytics-entity-type :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (content :initarg :content :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-call-analytics-entity-content
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (confidence :initarg :confidence :initform
                         common-lisp:nil :type
                         (common-lisp:or confidence common-lisp:null) :accessor
                         struct-shape-call-analytics-entity-confidence :shape
                         "Confidence" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-call-analytics-entity
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'call-analytics-entity
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'call-analytics-entity 'make-call-analytics-entity))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          call-analytics-entity))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          call-analytics-entity))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'begin-offset-millis))
      (common-lisp:list
       (common-lisp:cons "BeginOffsetMillis"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-offset-millis))
      (common-lisp:list
       (common-lisp:cons "EndOffsetMillis"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'category))
      (common-lisp:list
       (common-lisp:cons "Category"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content))
      (common-lisp:list
       (common-lisp:cons "Content"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'confidence))
      (common-lisp:list
       (common-lisp:cons "Confidence"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          call-analytics-entity))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype call-analytics-entity-list ()
   '(trivial-types:proper-list call-analytics-entity))
 (common-lisp:defun make-call-analytics-entity-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list call-analytics-entity))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass call-analytics-item common-lisp:nil
                       ((begin-offset-millis :initarg :begin-offset-millis
                         :initform common-lisp:nil :type
                         (common-lisp:or long common-lisp:null) :accessor
                         struct-shape-call-analytics-item-begin-offset-millis
                         :shape "Long" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (end-offset-millis :initarg :end-offset-millis
                         :initform common-lisp:nil :type
                         (common-lisp:or long common-lisp:null) :accessor
                         struct-shape-call-analytics-item-end-offset-millis
                         :shape "Long" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or item-type common-lisp:null) :accessor
                         struct-shape-call-analytics-item-type :shape
                         "ItemType" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (content :initarg :content :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-call-analytics-item-content
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (confidence :initarg :confidence :initform
                         common-lisp:nil :type
                         (common-lisp:or confidence common-lisp:null) :accessor
                         struct-shape-call-analytics-item-confidence :shape
                         "Confidence" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (vocabulary-filter-match :initarg
                         :vocabulary-filter-match :initform common-lisp:nil
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         struct-shape-call-analytics-item-vocabulary-filter-match
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (stable :initarg :stable :initform common-lisp:nil
                         :type (common-lisp:or stable common-lisp:null)
                         :accessor struct-shape-call-analytics-item-stable
                         :shape "Stable" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-call-analytics-item
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'call-analytics-item
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'call-analytics-item 'make-call-analytics-item))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input call-analytics-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input call-analytics-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'begin-offset-millis))
      (common-lisp:list
       (common-lisp:cons "BeginOffsetMillis"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-offset-millis))
      (common-lisp:list
       (common-lisp:cons "EndOffsetMillis"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content))
      (common-lisp:list
       (common-lisp:cons "Content"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'confidence))
      (common-lisp:list
       (common-lisp:cons "Confidence"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vocabulary-filter-match))
      (common-lisp:list
       (common-lisp:cons "VocabularyFilterMatch"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stable))
      (common-lisp:list
       (common-lisp:cons "Stable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input call-analytics-item))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype call-analytics-item-list ()
   '(trivial-types:proper-list call-analytics-item))
 (common-lisp:defun make-call-analytics-item-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list call-analytics-item))
   aws-sdk/generator/shape::members))
(common-lisp:deftype call-analytics-language-code () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass call-analytics-transcript-result-stream common-lisp:nil
                       ((utterance-event :initarg :utterance-event :initform
                         common-lisp:nil :type
                         (common-lisp:or utterance-event common-lisp:null)
                         :accessor
                         struct-shape-call-analytics-transcript-result-stream-utterance-event
                         :shape "UtteranceEvent" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (category-event :initarg :category-event :initform
                         common-lisp:nil :type
                         (common-lisp:or category-event common-lisp:null)
                         :accessor
                         struct-shape-call-analytics-transcript-result-stream-category-event
                         :shape "CategoryEvent" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (bad-request-exception :initarg :bad-request-exception
                         :initform common-lisp:nil :type
                         (common-lisp:or bad-request-exception
                                         common-lisp:null)
                         :accessor
                         struct-shape-call-analytics-transcript-result-stream-bad-request-exception
                         :shape "BadRequestException" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (limit-exceeded-exception :initarg
                         :limit-exceeded-exception :initform common-lisp:nil
                         :type
                         (common-lisp:or limit-exceeded-exception
                                         common-lisp:null)
                         :accessor
                         struct-shape-call-analytics-transcript-result-stream-limit-exceeded-exception
                         :shape "LimitExceededException" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (internal-failure-exception :initarg
                         :internal-failure-exception :initform common-lisp:nil
                         :type
                         (common-lisp:or internal-failure-exception
                                         common-lisp:null)
                         :accessor
                         struct-shape-call-analytics-transcript-result-stream-internal-failure-exception
                         :shape "InternalFailureException" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (conflict-exception :initarg :conflict-exception
                         :initform common-lisp:nil :type
                         (common-lisp:or conflict-exception common-lisp:null)
                         :accessor
                         struct-shape-call-analytics-transcript-result-stream-conflict-exception
                         :shape "ConflictException" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (service-unavailable-exception :initarg
                         :service-unavailable-exception :initform
                         common-lisp:nil :type
                         (common-lisp:or service-unavailable-exception
                                         common-lisp:null)
                         :accessor
                         struct-shape-call-analytics-transcript-result-stream-service-unavailable-exception
                         :shape "ServiceUnavailableException" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-call-analytics-transcript-result-stream
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'call-analytics-transcript-result-stream
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'call-analytics-transcript-result-stream
                    'make-call-analytics-transcript-result-stream))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          call-analytics-transcript-result-stream))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          call-analytics-transcript-result-stream))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'utterance-event))
      (common-lisp:list
       (common-lisp:cons "UtteranceEvent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'category-event))
      (common-lisp:list
       (common-lisp:cons "CategoryEvent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'bad-request-exception))
      (common-lisp:list
       (common-lisp:cons "BadRequestException"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'limit-exceeded-exception))
      (common-lisp:list
       (common-lisp:cons "LimitExceededException"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'internal-failure-exception))
      (common-lisp:list
       (common-lisp:cons "InternalFailureException"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'conflict-exception))
      (common-lisp:list
       (common-lisp:cons "ConflictException"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'service-unavailable-exception))
      (common-lisp:list
       (common-lisp:cons "ServiceUnavailableException"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          call-analytics-transcript-result-stream))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass category-event common-lisp:nil
                       ((matched-categories :initarg :matched-categories
                         :initform common-lisp:nil :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor
                         struct-shape-category-event-matched-categories :shape
                         "StringList" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (matched-details :initarg :matched-details :initform
                         common-lisp:nil :type
                         (common-lisp:or matched-category-details
                                         common-lisp:null)
                         :accessor struct-shape-category-event-matched-details
                         :shape "MatchedCategoryDetails" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-category-event
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'category-event
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'category-event 'make-category-event))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input category-event))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input category-event))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'matched-categories))
      (common-lisp:list
       (common-lisp:cons "MatchedCategories"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'matched-details))
      (common-lisp:list
       (common-lisp:cons "MatchedDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input category-event))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass channel-definition common-lisp:nil
                       ((channel-id :initarg :channel-id :initform
                         (common-lisp:error ":channel-id is required") :type
                         (common-lisp:or channel-id common-lisp:null) :accessor
                         struct-shape-channel-definition-channel-id :shape
                         "ChannelId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (participant-role :initarg :participant-role :initform
                         (common-lisp:error ":participant-role is required")
                         :type
                         (common-lisp:or participant-role common-lisp:null)
                         :accessor
                         struct-shape-channel-definition-participant-role
                         :shape "ParticipantRole" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-channel-definition
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'channel-definition
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'channel-definition 'make-channel-definition))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input channel-definition))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input channel-definition))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channel-id))
      (common-lisp:list
       (common-lisp:cons "ChannelId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'participant-role))
      (common-lisp:list
       (common-lisp:cons "ParticipantRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input channel-definition))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype channel-definitions ()
   '(trivial-types:proper-list channel-definition))
 (common-lisp:defun make-channel-definitions
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list channel-definition))
   aws-sdk/generator/shape::members))
(common-lisp:deftype channel-id () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass character-offsets common-lisp:nil
                       ((begin :initarg :begin :initform common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-character-offsets-begin :shape "Integer"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (end :initarg :end :initform common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-character-offsets-end :shape "Integer"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-character-offsets
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'character-offsets
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'character-offsets 'make-character-offsets))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input character-offsets))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input character-offsets))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'begin))
      (common-lisp:list
       (common-lisp:cons "Begin"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end))
      (common-lisp:list
       (common-lisp:cons "End"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input character-offsets))
   common-lisp:nil))
(common-lisp:deftype confidence () 'common-lisp:double-float)
(common-lisp:progn
 (common-lisp:defclass configuration-event common-lisp:nil
                       ((channel-definitions :initarg :channel-definitions
                         :initform common-lisp:nil :type
                         (common-lisp:or channel-definitions common-lisp:null)
                         :accessor
                         struct-shape-configuration-event-channel-definitions
                         :shape "ChannelDefinitions" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (post-call-analytics-settings :initarg
                         :post-call-analytics-settings :initform
                         common-lisp:nil :type
                         (common-lisp:or post-call-analytics-settings
                                         common-lisp:null)
                         :accessor
                         struct-shape-configuration-event-post-call-analytics-settings
                         :shape "PostCallAnalyticsSettings" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-configuration-event
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'configuration-event
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'configuration-event 'make-configuration-event))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input configuration-event))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input configuration-event))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channel-definitions))
      (common-lisp:list
       (common-lisp:cons "ChannelDefinitions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'post-call-analytics-settings))
      (common-lisp:list
       (common-lisp:cons "PostCallAnalyticsSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input configuration-event))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition conflict-exception
     (transcribe-streaming-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       conflict-exception-message)))
 (common-lisp:export
  (common-lisp:list 'conflict-exception 'conflict-exception-message)))
(common-lisp:deftype content-identification-type () 'common-lisp:string)
(common-lisp:deftype content-redaction-output () 'common-lisp:string)
(common-lisp:deftype content-redaction-type () 'common-lisp:string)
(common-lisp:deftype double () 'common-lisp:double-float)
(common-lisp:progn
 (common-lisp:defclass entity common-lisp:nil
                       ((start-time :initarg :start-time :initform
                         common-lisp:nil :type
                         (common-lisp:or double common-lisp:null) :accessor
                         struct-shape-entity-start-time :shape "Double"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (end-time :initarg :end-time :initform common-lisp:nil
                         :type (common-lisp:or double common-lisp:null)
                         :accessor struct-shape-entity-end-time :shape "Double"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (category :initarg :category :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-entity-category :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-entity-type :shape "String" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (content :initarg :content :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-entity-content :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (confidence :initarg :confidence :initform
                         common-lisp:nil :type
                         (common-lisp:or confidence common-lisp:null) :accessor
                         struct-shape-entity-confidence :shape "Confidence"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-entity
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'entity
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'entity 'make-entity))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input entity))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input entity))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "StartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "EndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'category))
      (common-lisp:list
       (common-lisp:cons "Category"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content))
      (common-lisp:list
       (common-lisp:cons "Content"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'confidence))
      (common-lisp:list
       (common-lisp:cons "Confidence"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input entity))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype entity-list () '(trivial-types:proper-list entity))
 (common-lisp:defun make-entity-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list entity))
   aws-sdk/generator/shape::members))
(common-lisp:deftype integer () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition internal-failure-exception
     (transcribe-streaming-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       internal-failure-exception-message)))
 (common-lisp:export
  (common-lisp:list 'internal-failure-exception
                    'internal-failure-exception-message)))
(common-lisp:progn
 (common-lisp:defclass issue-detected common-lisp:nil
                       ((character-offsets :initarg :character-offsets
                         :initform common-lisp:nil :type
                         (common-lisp:or character-offsets common-lisp:null)
                         :accessor
                         struct-shape-issue-detected-character-offsets :shape
                         "CharacterOffsets" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-issue-detected
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'issue-detected
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'issue-detected 'make-issue-detected))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input issue-detected))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input issue-detected))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'character-offsets))
      (common-lisp:list
       (common-lisp:cons "CharacterOffsets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input issue-detected))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype issues-detected ()
   '(trivial-types:proper-list issue-detected))
 (common-lisp:defun make-issues-detected
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list issue-detected))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass item common-lisp:nil
                       ((start-time :initarg :start-time :initform
                         common-lisp:nil :type
                         (common-lisp:or double common-lisp:null) :accessor
                         struct-shape-item-start-time :shape "Double" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (end-time :initarg :end-time :initform common-lisp:nil
                         :type (common-lisp:or double common-lisp:null)
                         :accessor struct-shape-item-end-time :shape "Double"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or item-type common-lisp:null) :accessor
                         struct-shape-item-type :shape "ItemType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (content :initarg :content :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-item-content :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (vocabulary-filter-match :initarg
                         :vocabulary-filter-match :initform common-lisp:nil
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor struct-shape-item-vocabulary-filter-match
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (speaker :initarg :speaker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-item-speaker :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (confidence :initarg :confidence :initform
                         common-lisp:nil :type
                         (common-lisp:or confidence common-lisp:null) :accessor
                         struct-shape-item-confidence :shape "Confidence"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (stable :initarg :stable :initform common-lisp:nil
                         :type (common-lisp:or stable common-lisp:null)
                         :accessor struct-shape-item-stable :shape "Stable"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-item (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'item
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'item 'make-item))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "StartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "EndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content))
      (common-lisp:list
       (common-lisp:cons "Content"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vocabulary-filter-match))
      (common-lisp:list
       (common-lisp:cons "VocabularyFilterMatch"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'speaker))
      (common-lisp:list
       (common-lisp:cons "Speaker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'confidence))
      (common-lisp:list
       (common-lisp:cons "Confidence"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stable))
      (common-lisp:list
       (common-lisp:cons "Stable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input item))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype item-list () '(trivial-types:proper-list item))
 (common-lisp:defun make-item-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list item))
   aws-sdk/generator/shape::members))
(common-lisp:deftype item-type () 'common-lisp:string)
(common-lisp:deftype language-code () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype language-identification ()
   '(trivial-types:proper-list language-with-score))
 (common-lisp:defun make-language-identification
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list language-with-score))
   aws-sdk/generator/shape::members))
(common-lisp:deftype language-options () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass language-with-score common-lisp:nil
                       ((language-code :initarg :language-code :initform
                         common-lisp:nil :type
                         (common-lisp:or language-code common-lisp:null)
                         :accessor
                         struct-shape-language-with-score-language-code :shape
                         "LanguageCode" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (score :initarg :score :initform common-lisp:nil :type
                         (common-lisp:or double common-lisp:null) :accessor
                         struct-shape-language-with-score-score :shape "Double"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-language-with-score
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'language-with-score
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'language-with-score 'make-language-with-score))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input language-with-score))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input language-with-score))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'language-code))
      (common-lisp:list
       (common-lisp:cons "LanguageCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'score))
      (common-lisp:list
       (common-lisp:cons "Score"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input language-with-score))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition limit-exceeded-exception
     (transcribe-streaming-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       limit-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'limit-exceeded-exception
                    'limit-exceeded-exception-message)))
(common-lisp:deftype long () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:deftype matched-category-details () 'common-lisp:hash-table)
 (common-lisp:defun make-matched-category-details
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype media-encoding () 'common-lisp:string)
(common-lisp:deftype media-sample-rate-hertz () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass medical-alternative common-lisp:nil
                       ((transcript :initarg :transcript :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-medical-alternative-transcript :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (items :initarg :items :initform common-lisp:nil :type
                         (common-lisp:or medical-item-list common-lisp:null)
                         :accessor struct-shape-medical-alternative-items
                         :shape "MedicalItemList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (entities :initarg :entities :initform common-lisp:nil
                         :type
                         (common-lisp:or medical-entity-list common-lisp:null)
                         :accessor struct-shape-medical-alternative-entities
                         :shape "MedicalEntityList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-medical-alternative
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'medical-alternative
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'medical-alternative 'make-medical-alternative))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input medical-alternative))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input medical-alternative))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transcript))
      (common-lisp:list
       (common-lisp:cons "Transcript"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'items))
      (common-lisp:list
       (common-lisp:cons "Items"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entities))
      (common-lisp:list
       (common-lisp:cons "Entities"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input medical-alternative))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype medical-alternative-list ()
   '(trivial-types:proper-list medical-alternative))
 (common-lisp:defun make-medical-alternative-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list medical-alternative))
   aws-sdk/generator/shape::members))
(common-lisp:deftype medical-content-identification-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass medical-entity common-lisp:nil
                       ((start-time :initarg :start-time :initform
                         common-lisp:nil :type
                         (common-lisp:or double common-lisp:null) :accessor
                         struct-shape-medical-entity-start-time :shape "Double"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (end-time :initarg :end-time :initform common-lisp:nil
                         :type (common-lisp:or double common-lisp:null)
                         :accessor struct-shape-medical-entity-end-time :shape
                         "Double" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (category :initarg :category :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-medical-entity-category :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (content :initarg :content :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-medical-entity-content :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (confidence :initarg :confidence :initform
                         common-lisp:nil :type
                         (common-lisp:or confidence common-lisp:null) :accessor
                         struct-shape-medical-entity-confidence :shape
                         "Confidence" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-medical-entity
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'medical-entity
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'medical-entity 'make-medical-entity))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input medical-entity))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input medical-entity))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "StartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "EndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'category))
      (common-lisp:list
       (common-lisp:cons "Category"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content))
      (common-lisp:list
       (common-lisp:cons "Content"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'confidence))
      (common-lisp:list
       (common-lisp:cons "Confidence"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input medical-entity))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype medical-entity-list ()
   '(trivial-types:proper-list medical-entity))
 (common-lisp:defun make-medical-entity-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list medical-entity))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass medical-item common-lisp:nil
                       ((start-time :initarg :start-time :initform
                         common-lisp:nil :type
                         (common-lisp:or double common-lisp:null) :accessor
                         struct-shape-medical-item-start-time :shape "Double"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (end-time :initarg :end-time :initform common-lisp:nil
                         :type (common-lisp:or double common-lisp:null)
                         :accessor struct-shape-medical-item-end-time :shape
                         "Double" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or item-type common-lisp:null) :accessor
                         struct-shape-medical-item-type :shape "ItemType"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (content :initarg :content :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-medical-item-content :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (confidence :initarg :confidence :initform
                         common-lisp:nil :type
                         (common-lisp:or confidence common-lisp:null) :accessor
                         struct-shape-medical-item-confidence :shape
                         "Confidence" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (speaker :initarg :speaker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-medical-item-speaker :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-medical-item
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'medical-item
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'medical-item 'make-medical-item))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input medical-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input medical-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "StartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "EndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content))
      (common-lisp:list
       (common-lisp:cons "Content"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'confidence))
      (common-lisp:list
       (common-lisp:cons "Confidence"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'speaker))
      (common-lisp:list
       (common-lisp:cons "Speaker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input medical-item))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype medical-item-list ()
   '(trivial-types:proper-list medical-item))
 (common-lisp:defun make-medical-item-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list medical-item))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass medical-result common-lisp:nil
                       ((result-id :initarg :result-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-medical-result-result-id :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (start-time :initarg :start-time :initform
                         common-lisp:nil :type
                         (common-lisp:or double common-lisp:null) :accessor
                         struct-shape-medical-result-start-time :shape "Double"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (end-time :initarg :end-time :initform common-lisp:nil
                         :type (common-lisp:or double common-lisp:null)
                         :accessor struct-shape-medical-result-end-time :shape
                         "Double" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (is-partial :initarg :is-partial :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-medical-result-is-partial :shape
                         "Boolean" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (alternatives :initarg :alternatives :initform
                         common-lisp:nil :type
                         (common-lisp:or medical-alternative-list
                                         common-lisp:null)
                         :accessor struct-shape-medical-result-alternatives
                         :shape "MedicalAlternativeList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (channel-id :initarg :channel-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-medical-result-channel-id :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-medical-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'medical-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'medical-result 'make-medical-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input medical-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input medical-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'result-id))
      (common-lisp:list
       (common-lisp:cons "ResultId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "StartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "EndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-partial))
      (common-lisp:list
       (common-lisp:cons "IsPartial"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alternatives))
      (common-lisp:list
       (common-lisp:cons "Alternatives"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channel-id))
      (common-lisp:list
       (common-lisp:cons "ChannelId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input medical-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype medical-result-list ()
   '(trivial-types:proper-list medical-result))
 (common-lisp:defun make-medical-result-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list medical-result))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass medical-transcript common-lisp:nil
                       ((results :initarg :results :initform common-lisp:nil
                         :type
                         (common-lisp:or medical-result-list common-lisp:null)
                         :accessor struct-shape-medical-transcript-results
                         :shape "MedicalResultList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-medical-transcript
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'medical-transcript
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'medical-transcript 'make-medical-transcript))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input medical-transcript))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input medical-transcript))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'results))
      (common-lisp:list
       (common-lisp:cons "Results"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input medical-transcript))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass medical-transcript-event common-lisp:nil
                       ((transcript :initarg :transcript :initform
                         common-lisp:nil :type
                         (common-lisp:or medical-transcript common-lisp:null)
                         :accessor
                         struct-shape-medical-transcript-event-transcript
                         :shape "MedicalTranscript" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-medical-transcript-event
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'medical-transcript-event
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'medical-transcript-event 'make-medical-transcript-event))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          medical-transcript-event))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          medical-transcript-event))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transcript))
      (common-lisp:list
       (common-lisp:cons "Transcript"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          medical-transcript-event))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass medical-transcript-result-stream common-lisp:nil
                       ((transcript-event :initarg :transcript-event :initform
                         common-lisp:nil :type
                         (common-lisp:or medical-transcript-event
                                         common-lisp:null)
                         :accessor
                         struct-shape-medical-transcript-result-stream-transcript-event
                         :shape "MedicalTranscriptEvent" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (bad-request-exception :initarg :bad-request-exception
                         :initform common-lisp:nil :type
                         (common-lisp:or bad-request-exception
                                         common-lisp:null)
                         :accessor
                         struct-shape-medical-transcript-result-stream-bad-request-exception
                         :shape "BadRequestException" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (limit-exceeded-exception :initarg
                         :limit-exceeded-exception :initform common-lisp:nil
                         :type
                         (common-lisp:or limit-exceeded-exception
                                         common-lisp:null)
                         :accessor
                         struct-shape-medical-transcript-result-stream-limit-exceeded-exception
                         :shape "LimitExceededException" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (internal-failure-exception :initarg
                         :internal-failure-exception :initform common-lisp:nil
                         :type
                         (common-lisp:or internal-failure-exception
                                         common-lisp:null)
                         :accessor
                         struct-shape-medical-transcript-result-stream-internal-failure-exception
                         :shape "InternalFailureException" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (conflict-exception :initarg :conflict-exception
                         :initform common-lisp:nil :type
                         (common-lisp:or conflict-exception common-lisp:null)
                         :accessor
                         struct-shape-medical-transcript-result-stream-conflict-exception
                         :shape "ConflictException" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (service-unavailable-exception :initarg
                         :service-unavailable-exception :initform
                         common-lisp:nil :type
                         (common-lisp:or service-unavailable-exception
                                         common-lisp:null)
                         :accessor
                         struct-shape-medical-transcript-result-stream-service-unavailable-exception
                         :shape "ServiceUnavailableException" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-medical-transcript-result-stream
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'medical-transcript-result-stream
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'medical-transcript-result-stream
                    'make-medical-transcript-result-stream))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          medical-transcript-result-stream))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          medical-transcript-result-stream))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transcript-event))
      (common-lisp:list
       (common-lisp:cons "TranscriptEvent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'bad-request-exception))
      (common-lisp:list
       (common-lisp:cons "BadRequestException"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'limit-exceeded-exception))
      (common-lisp:list
       (common-lisp:cons "LimitExceededException"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'internal-failure-exception))
      (common-lisp:list
       (common-lisp:cons "InternalFailureException"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'conflict-exception))
      (common-lisp:list
       (common-lisp:cons "ConflictException"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'service-unavailable-exception))
      (common-lisp:list
       (common-lisp:cons "ServiceUnavailableException"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          medical-transcript-result-stream))
   common-lisp:nil))
(common-lisp:deftype model-name () 'common-lisp:string)
(common-lisp:deftype number-of-channels () 'common-lisp:integer)
(common-lisp:deftype partial-results-stability () 'common-lisp:string)
(common-lisp:deftype participant-role () 'common-lisp:string)
(common-lisp:deftype pii-entity-types () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass points-of-interest common-lisp:nil
                       ((timestamp-ranges :initarg :timestamp-ranges :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp-ranges common-lisp:null)
                         :accessor
                         struct-shape-points-of-interest-timestamp-ranges
                         :shape "TimestampRanges" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-points-of-interest
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'points-of-interest
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'points-of-interest 'make-points-of-interest))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input points-of-interest))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input points-of-interest))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timestamp-ranges))
      (common-lisp:list
       (common-lisp:cons "TimestampRanges"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input points-of-interest))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass post-call-analytics-settings common-lisp:nil
                       ((output-location :initarg :output-location :initform
                         (common-lisp:error ":output-location is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-post-call-analytics-settings-output-location
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (data-access-role-arn :initarg :data-access-role-arn
                         :initform
                         (common-lisp:error
                          ":data-access-role-arn is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-post-call-analytics-settings-data-access-role-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (content-redaction-output :initarg
                         :content-redaction-output :initform common-lisp:nil
                         :type
                         (common-lisp:or content-redaction-output
                                         common-lisp:null)
                         :accessor
                         struct-shape-post-call-analytics-settings-content-redaction-output
                         :shape "ContentRedactionOutput" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (output-encryption-kmskey-id :initarg
                         :output-encryption-kmskey-id :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-post-call-analytics-settings-output-encryption-kmskey-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-post-call-analytics-settings
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'post-call-analytics-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'post-call-analytics-settings
                    'make-post-call-analytics-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          post-call-analytics-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          post-call-analytics-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-location))
      (common-lisp:list
       (common-lisp:cons "OutputLocation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-access-role-arn))
      (common-lisp:list
       (common-lisp:cons "DataAccessRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'content-redaction-output))
      (common-lisp:list
       (common-lisp:cons "ContentRedactionOutput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'output-encryption-kmskey-id))
      (common-lisp:list
       (common-lisp:cons "OutputEncryptionKMSKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          post-call-analytics-settings))
   common-lisp:nil))
(common-lisp:deftype request-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass result common-lisp:nil
                       ((result-id :initarg :result-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-result-result-id :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (start-time :initarg :start-time :initform
                         common-lisp:nil :type
                         (common-lisp:or double common-lisp:null) :accessor
                         struct-shape-result-start-time :shape "Double"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (end-time :initarg :end-time :initform common-lisp:nil
                         :type (common-lisp:or double common-lisp:null)
                         :accessor struct-shape-result-end-time :shape "Double"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (is-partial :initarg :is-partial :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-result-is-partial :shape "Boolean"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (alternatives :initarg :alternatives :initform
                         common-lisp:nil :type
                         (common-lisp:or alternative-list common-lisp:null)
                         :accessor struct-shape-result-alternatives :shape
                         "AlternativeList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (channel-id :initarg :channel-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-result-channel-id :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (language-code :initarg :language-code :initform
                         common-lisp:nil :type
                         (common-lisp:or language-code common-lisp:null)
                         :accessor struct-shape-result-language-code :shape
                         "LanguageCode" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (language-identification :initarg
                         :language-identification :initform common-lisp:nil
                         :type
                         (common-lisp:or language-identification
                                         common-lisp:null)
                         :accessor struct-shape-result-language-identification
                         :shape "LanguageIdentification" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'result
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'result 'make-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'result-id))
      (common-lisp:list
       (common-lisp:cons "ResultId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "StartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "EndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-partial))
      (common-lisp:list
       (common-lisp:cons "IsPartial"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alternatives))
      (common-lisp:list
       (common-lisp:cons "Alternatives"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channel-id))
      (common-lisp:list
       (common-lisp:cons "ChannelId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'language-code))
      (common-lisp:list
       (common-lisp:cons "LanguageCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'language-identification))
      (common-lisp:list
       (common-lisp:cons "LanguageIdentification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype result-list () '(trivial-types:proper-list result))
 (common-lisp:defun make-result-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list result))
   aws-sdk/generator/shape::members))
(common-lisp:deftype sentiment () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition service-unavailable-exception
     (transcribe-streaming-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       service-unavailable-exception-message)))
 (common-lisp:export
  (common-lisp:list 'service-unavailable-exception
                    'service-unavailable-exception-message)))
(common-lisp:deftype session-id () 'common-lisp:string)
(common-lisp:deftype specialty () 'common-lisp:string)
(common-lisp:deftype stable () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defclass start-call-analytics-stream-transcription-request
                       common-lisp:nil
                       ((language-code :initarg :language-code :initform
                         (common-lisp:error ":language-code is required") :type
                         (common-lisp:or call-analytics-language-code
                                         common-lisp:null)
                         :accessor
                         struct-shape-start-call-analytics-stream-transcription-request-language-code
                         :shape "CallAnalyticsLanguageCode" :location "header"
                         :location-name "x-amzn-transcribe-language-code")
                        (media-sample-rate-hertz :initarg
                         :media-sample-rate-hertz :initform
                         (common-lisp:error
                          ":media-sample-rate-hertz is required")
                         :type
                         (common-lisp:or media-sample-rate-hertz
                                         common-lisp:null)
                         :accessor
                         struct-shape-start-call-analytics-stream-transcription-request-media-sample-rate-hertz
                         :shape "MediaSampleRateHertz" :location "header"
                         :location-name "x-amzn-transcribe-sample-rate")
                        (media-encoding :initarg :media-encoding :initform
                         (common-lisp:error ":media-encoding is required")
                         :type (common-lisp:or media-encoding common-lisp:null)
                         :accessor
                         struct-shape-start-call-analytics-stream-transcription-request-media-encoding
                         :shape "MediaEncoding" :location "header"
                         :location-name "x-amzn-transcribe-media-encoding")
                        (vocabulary-name :initarg :vocabulary-name :initform
                         common-lisp:nil :type
                         (common-lisp:or vocabulary-name common-lisp:null)
                         :accessor
                         struct-shape-start-call-analytics-stream-transcription-request-vocabulary-name
                         :shape "VocabularyName" :location "header"
                         :location-name "x-amzn-transcribe-vocabulary-name")
                        (session-id :initarg :session-id :initform
                         common-lisp:nil :type
                         (common-lisp:or session-id common-lisp:null) :accessor
                         struct-shape-start-call-analytics-stream-transcription-request-session-id
                         :shape "SessionId" :location "header" :location-name
                         "x-amzn-transcribe-session-id")
                        (audio-stream :initarg :audio-stream :initform
                         (common-lisp:error ":audio-stream is required") :type
                         (common-lisp:or audio-stream common-lisp:null)
                         :accessor
                         struct-shape-start-call-analytics-stream-transcription-request-audio-stream
                         :shape "AudioStream" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (vocabulary-filter-name :initarg
                         :vocabulary-filter-name :initform common-lisp:nil
                         :type
                         (common-lisp:or vocabulary-filter-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-start-call-analytics-stream-transcription-request-vocabulary-filter-name
                         :shape "VocabularyFilterName" :location "header"
                         :location-name
                         "x-amzn-transcribe-vocabulary-filter-name")
                        (vocabulary-filter-method :initarg
                         :vocabulary-filter-method :initform common-lisp:nil
                         :type
                         (common-lisp:or vocabulary-filter-method
                                         common-lisp:null)
                         :accessor
                         struct-shape-start-call-analytics-stream-transcription-request-vocabulary-filter-method
                         :shape "VocabularyFilterMethod" :location "header"
                         :location-name
                         "x-amzn-transcribe-vocabulary-filter-method")
                        (language-model-name :initarg :language-model-name
                         :initform common-lisp:nil :type
                         (common-lisp:or model-name common-lisp:null) :accessor
                         struct-shape-start-call-analytics-stream-transcription-request-language-model-name
                         :shape "ModelName" :location "header" :location-name
                         "x-amzn-transcribe-language-model-name")
                        (enable-partial-results-stabilization :initarg
                         :enable-partial-results-stabilization :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-start-call-analytics-stream-transcription-request-enable-partial-results-stabilization
                         :shape "Boolean" :location "header" :location-name
                         "x-amzn-transcribe-enable-partial-results-stabilization")
                        (partial-results-stability :initarg
                         :partial-results-stability :initform common-lisp:nil
                         :type
                         (common-lisp:or partial-results-stability
                                         common-lisp:null)
                         :accessor
                         struct-shape-start-call-analytics-stream-transcription-request-partial-results-stability
                         :shape "PartialResultsStability" :location "header"
                         :location-name
                         "x-amzn-transcribe-partial-results-stability")
                        (content-identification-type :initarg
                         :content-identification-type :initform common-lisp:nil
                         :type
                         (common-lisp:or content-identification-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-start-call-analytics-stream-transcription-request-content-identification-type
                         :shape "ContentIdentificationType" :location "header"
                         :location-name
                         "x-amzn-transcribe-content-identification-type")
                        (content-redaction-type :initarg
                         :content-redaction-type :initform common-lisp:nil
                         :type
                         (common-lisp:or content-redaction-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-start-call-analytics-stream-transcription-request-content-redaction-type
                         :shape "ContentRedactionType" :location "header"
                         :location-name
                         "x-amzn-transcribe-content-redaction-type")
                        (pii-entity-types :initarg :pii-entity-types :initform
                         common-lisp:nil :type
                         (common-lisp:or pii-entity-types common-lisp:null)
                         :accessor
                         struct-shape-start-call-analytics-stream-transcription-request-pii-entity-types
                         :shape "PiiEntityTypes" :location "header"
                         :location-name "x-amzn-transcribe-pii-entity-types"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-call-analytics-stream-transcription-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-call-analytics-stream-transcription-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-call-analytics-stream-transcription-request
                    'make-start-call-analytics-stream-transcription-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-call-analytics-stream-transcription-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'language-code))
      (common-lisp:cons "x-amzn-transcribe-language-code"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'media-sample-rate-hertz))
      (common-lisp:cons "x-amzn-transcribe-sample-rate"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'media-encoding))
      (common-lisp:cons "x-amzn-transcribe-media-encoding"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vocabulary-name))
      (common-lisp:cons "x-amzn-transcribe-vocabulary-name"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session-id))
      (common-lisp:cons "x-amzn-transcribe-session-id"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vocabulary-filter-name))
      (common-lisp:cons "x-amzn-transcribe-vocabulary-filter-name"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vocabulary-filter-method))
      (common-lisp:cons "x-amzn-transcribe-vocabulary-filter-method"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'language-model-name))
      (common-lisp:cons "x-amzn-transcribe-language-model-name"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-partial-results-stabilization))
      (common-lisp:cons
       "x-amzn-transcribe-enable-partial-results-stabilization"
       aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'partial-results-stability))
      (common-lisp:cons "x-amzn-transcribe-partial-results-stability"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'content-identification-type))
      (common-lisp:cons "x-amzn-transcribe-content-identification-type"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'content-redaction-type))
      (common-lisp:cons "x-amzn-transcribe-content-redaction-type"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pii-entity-types))
      (common-lisp:cons "x-amzn-transcribe-pii-entity-types"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-call-analytics-stream-transcription-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'audio-stream))
      (common-lisp:list
       (common-lisp:cons "AudioStream"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-call-analytics-stream-transcription-request))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'audio-stream))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload-properties
                        (
                         (aws-sdk/generator/shape::input
                          start-call-analytics-stream-transcription-request))
   (common-lisp:declare (common-lisp:ignore aws-sdk/generator/shape::input))
   (common-lisp:list)))
(common-lisp:progn
 (common-lisp:defclass start-call-analytics-stream-transcription-response
                       common-lisp:nil
                       ((request-id :initarg :request-id :initform
                         common-lisp:nil :type
                         (common-lisp:or request-id common-lisp:null) :accessor
                         struct-shape-start-call-analytics-stream-transcription-response-request-id
                         :shape "RequestId" :location "header" :location-name
                         "x-amzn-request-id")
                        (language-code :initarg :language-code :initform
                         common-lisp:nil :type
                         (common-lisp:or call-analytics-language-code
                                         common-lisp:null)
                         :accessor
                         struct-shape-start-call-analytics-stream-transcription-response-language-code
                         :shape "CallAnalyticsLanguageCode" :location "header"
                         :location-name "x-amzn-transcribe-language-code")
                        (media-sample-rate-hertz :initarg
                         :media-sample-rate-hertz :initform common-lisp:nil
                         :type
                         (common-lisp:or media-sample-rate-hertz
                                         common-lisp:null)
                         :accessor
                         struct-shape-start-call-analytics-stream-transcription-response-media-sample-rate-hertz
                         :shape "MediaSampleRateHertz" :location "header"
                         :location-name "x-amzn-transcribe-sample-rate")
                        (media-encoding :initarg :media-encoding :initform
                         common-lisp:nil :type
                         (common-lisp:or media-encoding common-lisp:null)
                         :accessor
                         struct-shape-start-call-analytics-stream-transcription-response-media-encoding
                         :shape "MediaEncoding" :location "header"
                         :location-name "x-amzn-transcribe-media-encoding")
                        (vocabulary-name :initarg :vocabulary-name :initform
                         common-lisp:nil :type
                         (common-lisp:or vocabulary-name common-lisp:null)
                         :accessor
                         struct-shape-start-call-analytics-stream-transcription-response-vocabulary-name
                         :shape "VocabularyName" :location "header"
                         :location-name "x-amzn-transcribe-vocabulary-name")
                        (session-id :initarg :session-id :initform
                         common-lisp:nil :type
                         (common-lisp:or session-id common-lisp:null) :accessor
                         struct-shape-start-call-analytics-stream-transcription-response-session-id
                         :shape "SessionId" :location "header" :location-name
                         "x-amzn-transcribe-session-id")
                        (call-analytics-transcript-result-stream :initarg
                         :call-analytics-transcript-result-stream :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          call-analytics-transcript-result-stream
                          common-lisp:null)
                         :accessor
                         struct-shape-start-call-analytics-stream-transcription-response-call-analytics-transcript-result-stream
                         :shape "CallAnalyticsTranscriptResultStream" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (vocabulary-filter-name :initarg
                         :vocabulary-filter-name :initform common-lisp:nil
                         :type
                         (common-lisp:or vocabulary-filter-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-start-call-analytics-stream-transcription-response-vocabulary-filter-name
                         :shape "VocabularyFilterName" :location "header"
                         :location-name
                         "x-amzn-transcribe-vocabulary-filter-name")
                        (vocabulary-filter-method :initarg
                         :vocabulary-filter-method :initform common-lisp:nil
                         :type
                         (common-lisp:or vocabulary-filter-method
                                         common-lisp:null)
                         :accessor
                         struct-shape-start-call-analytics-stream-transcription-response-vocabulary-filter-method
                         :shape "VocabularyFilterMethod" :location "header"
                         :location-name
                         "x-amzn-transcribe-vocabulary-filter-method")
                        (language-model-name :initarg :language-model-name
                         :initform common-lisp:nil :type
                         (common-lisp:or model-name common-lisp:null) :accessor
                         struct-shape-start-call-analytics-stream-transcription-response-language-model-name
                         :shape "ModelName" :location "header" :location-name
                         "x-amzn-transcribe-language-model-name")
                        (enable-partial-results-stabilization :initarg
                         :enable-partial-results-stabilization :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-start-call-analytics-stream-transcription-response-enable-partial-results-stabilization
                         :shape "Boolean" :location "header" :location-name
                         "x-amzn-transcribe-enable-partial-results-stabilization")
                        (partial-results-stability :initarg
                         :partial-results-stability :initform common-lisp:nil
                         :type
                         (common-lisp:or partial-results-stability
                                         common-lisp:null)
                         :accessor
                         struct-shape-start-call-analytics-stream-transcription-response-partial-results-stability
                         :shape "PartialResultsStability" :location "header"
                         :location-name
                         "x-amzn-transcribe-partial-results-stability")
                        (content-identification-type :initarg
                         :content-identification-type :initform common-lisp:nil
                         :type
                         (common-lisp:or content-identification-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-start-call-analytics-stream-transcription-response-content-identification-type
                         :shape "ContentIdentificationType" :location "header"
                         :location-name
                         "x-amzn-transcribe-content-identification-type")
                        (content-redaction-type :initarg
                         :content-redaction-type :initform common-lisp:nil
                         :type
                         (common-lisp:or content-redaction-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-start-call-analytics-stream-transcription-response-content-redaction-type
                         :shape "ContentRedactionType" :location "header"
                         :location-name
                         "x-amzn-transcribe-content-redaction-type")
                        (pii-entity-types :initarg :pii-entity-types :initform
                         common-lisp:nil :type
                         (common-lisp:or pii-entity-types common-lisp:null)
                         :accessor
                         struct-shape-start-call-analytics-stream-transcription-response-pii-entity-types
                         :shape "PiiEntityTypes" :location "header"
                         :location-name "x-amzn-transcribe-pii-entity-types"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-call-analytics-stream-transcription-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-call-analytics-stream-transcription-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-call-analytics-stream-transcription-response
                    'make-start-call-analytics-stream-transcription-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-call-analytics-stream-transcription-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:cons "x-amzn-request-id" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'language-code))
      (common-lisp:cons "x-amzn-transcribe-language-code"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'media-sample-rate-hertz))
      (common-lisp:cons "x-amzn-transcribe-sample-rate"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'media-encoding))
      (common-lisp:cons "x-amzn-transcribe-media-encoding"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vocabulary-name))
      (common-lisp:cons "x-amzn-transcribe-vocabulary-name"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session-id))
      (common-lisp:cons "x-amzn-transcribe-session-id"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vocabulary-filter-name))
      (common-lisp:cons "x-amzn-transcribe-vocabulary-filter-name"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vocabulary-filter-method))
      (common-lisp:cons "x-amzn-transcribe-vocabulary-filter-method"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'language-model-name))
      (common-lisp:cons "x-amzn-transcribe-language-model-name"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-partial-results-stabilization))
      (common-lisp:cons
       "x-amzn-transcribe-enable-partial-results-stabilization"
       aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'partial-results-stability))
      (common-lisp:cons "x-amzn-transcribe-partial-results-stability"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'content-identification-type))
      (common-lisp:cons "x-amzn-transcribe-content-identification-type"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'content-redaction-type))
      (common-lisp:cons "x-amzn-transcribe-content-redaction-type"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pii-entity-types))
      (common-lisp:cons "x-amzn-transcribe-pii-entity-types"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-call-analytics-stream-transcription-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'call-analytics-transcript-result-stream))
      (common-lisp:list
       (common-lisp:cons "CallAnalyticsTranscriptResultStream"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-call-analytics-stream-transcription-response))
   (common-lisp:slot-value aws-sdk/generator/shape::input
                           'call-analytics-transcript-result-stream))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload-properties
                        (
                         (aws-sdk/generator/shape::input
                          start-call-analytics-stream-transcription-response))
   (common-lisp:declare (common-lisp:ignore aws-sdk/generator/shape::input))
   (common-lisp:list)))
(common-lisp:progn
 (common-lisp:defclass start-medical-stream-transcription-request
                       common-lisp:nil
                       ((language-code :initarg :language-code :initform
                         (common-lisp:error ":language-code is required") :type
                         (common-lisp:or language-code common-lisp:null)
                         :accessor
                         struct-shape-start-medical-stream-transcription-request-language-code
                         :shape "LanguageCode" :location "header"
                         :location-name "x-amzn-transcribe-language-code")
                        (media-sample-rate-hertz :initarg
                         :media-sample-rate-hertz :initform
                         (common-lisp:error
                          ":media-sample-rate-hertz is required")
                         :type
                         (common-lisp:or media-sample-rate-hertz
                                         common-lisp:null)
                         :accessor
                         struct-shape-start-medical-stream-transcription-request-media-sample-rate-hertz
                         :shape "MediaSampleRateHertz" :location "header"
                         :location-name "x-amzn-transcribe-sample-rate")
                        (media-encoding :initarg :media-encoding :initform
                         (common-lisp:error ":media-encoding is required")
                         :type (common-lisp:or media-encoding common-lisp:null)
                         :accessor
                         struct-shape-start-medical-stream-transcription-request-media-encoding
                         :shape "MediaEncoding" :location "header"
                         :location-name "x-amzn-transcribe-media-encoding")
                        (vocabulary-name :initarg :vocabulary-name :initform
                         common-lisp:nil :type
                         (common-lisp:or vocabulary-name common-lisp:null)
                         :accessor
                         struct-shape-start-medical-stream-transcription-request-vocabulary-name
                         :shape "VocabularyName" :location "header"
                         :location-name "x-amzn-transcribe-vocabulary-name")
                        (specialty :initarg :specialty :initform
                         (common-lisp:error ":specialty is required") :type
                         (common-lisp:or specialty common-lisp:null) :accessor
                         struct-shape-start-medical-stream-transcription-request-specialty
                         :shape "Specialty" :location "header" :location-name
                         "x-amzn-transcribe-specialty")
                        (type :initarg :type :initform
                         (common-lisp:error ":type is required") :type
                         (common-lisp:or type common-lisp:null) :accessor
                         struct-shape-start-medical-stream-transcription-request-type
                         :shape "Type" :location "header" :location-name
                         "x-amzn-transcribe-type")
                        (show-speaker-label :initarg :show-speaker-label
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-start-medical-stream-transcription-request-show-speaker-label
                         :shape "Boolean" :location "header" :location-name
                         "x-amzn-transcribe-show-speaker-label")
                        (session-id :initarg :session-id :initform
                         common-lisp:nil :type
                         (common-lisp:or session-id common-lisp:null) :accessor
                         struct-shape-start-medical-stream-transcription-request-session-id
                         :shape "SessionId" :location "header" :location-name
                         "x-amzn-transcribe-session-id")
                        (audio-stream :initarg :audio-stream :initform
                         (common-lisp:error ":audio-stream is required") :type
                         (common-lisp:or audio-stream common-lisp:null)
                         :accessor
                         struct-shape-start-medical-stream-transcription-request-audio-stream
                         :shape "AudioStream" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (enable-channel-identification :initarg
                         :enable-channel-identification :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-start-medical-stream-transcription-request-enable-channel-identification
                         :shape "Boolean" :location "header" :location-name
                         "x-amzn-transcribe-enable-channel-identification")
                        (number-of-channels :initarg :number-of-channels
                         :initform common-lisp:nil :type
                         (common-lisp:or number-of-channels common-lisp:null)
                         :accessor
                         struct-shape-start-medical-stream-transcription-request-number-of-channels
                         :shape "NumberOfChannels" :location "header"
                         :location-name "x-amzn-transcribe-number-of-channels")
                        (content-identification-type :initarg
                         :content-identification-type :initform common-lisp:nil
                         :type
                         (common-lisp:or medical-content-identification-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-start-medical-stream-transcription-request-content-identification-type
                         :shape "MedicalContentIdentificationType" :location
                         "header" :location-name
                         "x-amzn-transcribe-content-identification-type"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-medical-stream-transcription-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-medical-stream-transcription-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-medical-stream-transcription-request
                    'make-start-medical-stream-transcription-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-medical-stream-transcription-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'language-code))
      (common-lisp:cons "x-amzn-transcribe-language-code"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'media-sample-rate-hertz))
      (common-lisp:cons "x-amzn-transcribe-sample-rate"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'media-encoding))
      (common-lisp:cons "x-amzn-transcribe-media-encoding"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vocabulary-name))
      (common-lisp:cons "x-amzn-transcribe-vocabulary-name"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'specialty))
      (common-lisp:cons "x-amzn-transcribe-specialty"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:cons "x-amzn-transcribe-type"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'show-speaker-label))
      (common-lisp:cons "x-amzn-transcribe-show-speaker-label"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session-id))
      (common-lisp:cons "x-amzn-transcribe-session-id"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-channel-identification))
      (common-lisp:cons "x-amzn-transcribe-enable-channel-identification"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'number-of-channels))
      (common-lisp:cons "x-amzn-transcribe-number-of-channels"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'content-identification-type))
      (common-lisp:cons "x-amzn-transcribe-content-identification-type"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-medical-stream-transcription-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'audio-stream))
      (common-lisp:list
       (common-lisp:cons "AudioStream"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-medical-stream-transcription-request))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'audio-stream))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload-properties
                        (
                         (aws-sdk/generator/shape::input
                          start-medical-stream-transcription-request))
   (common-lisp:declare (common-lisp:ignore aws-sdk/generator/shape::input))
   (common-lisp:list)))
(common-lisp:progn
 (common-lisp:defclass start-medical-stream-transcription-response
                       common-lisp:nil
                       ((request-id :initarg :request-id :initform
                         common-lisp:nil :type
                         (common-lisp:or request-id common-lisp:null) :accessor
                         struct-shape-start-medical-stream-transcription-response-request-id
                         :shape "RequestId" :location "header" :location-name
                         "x-amzn-request-id")
                        (language-code :initarg :language-code :initform
                         common-lisp:nil :type
                         (common-lisp:or language-code common-lisp:null)
                         :accessor
                         struct-shape-start-medical-stream-transcription-response-language-code
                         :shape "LanguageCode" :location "header"
                         :location-name "x-amzn-transcribe-language-code")
                        (media-sample-rate-hertz :initarg
                         :media-sample-rate-hertz :initform common-lisp:nil
                         :type
                         (common-lisp:or media-sample-rate-hertz
                                         common-lisp:null)
                         :accessor
                         struct-shape-start-medical-stream-transcription-response-media-sample-rate-hertz
                         :shape "MediaSampleRateHertz" :location "header"
                         :location-name "x-amzn-transcribe-sample-rate")
                        (media-encoding :initarg :media-encoding :initform
                         common-lisp:nil :type
                         (common-lisp:or media-encoding common-lisp:null)
                         :accessor
                         struct-shape-start-medical-stream-transcription-response-media-encoding
                         :shape "MediaEncoding" :location "header"
                         :location-name "x-amzn-transcribe-media-encoding")
                        (vocabulary-name :initarg :vocabulary-name :initform
                         common-lisp:nil :type
                         (common-lisp:or vocabulary-name common-lisp:null)
                         :accessor
                         struct-shape-start-medical-stream-transcription-response-vocabulary-name
                         :shape "VocabularyName" :location "header"
                         :location-name "x-amzn-transcribe-vocabulary-name")
                        (specialty :initarg :specialty :initform
                         common-lisp:nil :type
                         (common-lisp:or specialty common-lisp:null) :accessor
                         struct-shape-start-medical-stream-transcription-response-specialty
                         :shape "Specialty" :location "header" :location-name
                         "x-amzn-transcribe-specialty")
                        (type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or type common-lisp:null) :accessor
                         struct-shape-start-medical-stream-transcription-response-type
                         :shape "Type" :location "header" :location-name
                         "x-amzn-transcribe-type")
                        (show-speaker-label :initarg :show-speaker-label
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-start-medical-stream-transcription-response-show-speaker-label
                         :shape "Boolean" :location "header" :location-name
                         "x-amzn-transcribe-show-speaker-label")
                        (session-id :initarg :session-id :initform
                         common-lisp:nil :type
                         (common-lisp:or session-id common-lisp:null) :accessor
                         struct-shape-start-medical-stream-transcription-response-session-id
                         :shape "SessionId" :location "header" :location-name
                         "x-amzn-transcribe-session-id")
                        (transcript-result-stream :initarg
                         :transcript-result-stream :initform common-lisp:nil
                         :type
                         (common-lisp:or medical-transcript-result-stream
                                         common-lisp:null)
                         :accessor
                         struct-shape-start-medical-stream-transcription-response-transcript-result-stream
                         :shape "MedicalTranscriptResultStream" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (enable-channel-identification :initarg
                         :enable-channel-identification :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-start-medical-stream-transcription-response-enable-channel-identification
                         :shape "Boolean" :location "header" :location-name
                         "x-amzn-transcribe-enable-channel-identification")
                        (number-of-channels :initarg :number-of-channels
                         :initform common-lisp:nil :type
                         (common-lisp:or number-of-channels common-lisp:null)
                         :accessor
                         struct-shape-start-medical-stream-transcription-response-number-of-channels
                         :shape "NumberOfChannels" :location "header"
                         :location-name "x-amzn-transcribe-number-of-channels")
                        (content-identification-type :initarg
                         :content-identification-type :initform common-lisp:nil
                         :type
                         (common-lisp:or medical-content-identification-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-start-medical-stream-transcription-response-content-identification-type
                         :shape "MedicalContentIdentificationType" :location
                         "header" :location-name
                         "x-amzn-transcribe-content-identification-type"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-medical-stream-transcription-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-medical-stream-transcription-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-medical-stream-transcription-response
                    'make-start-medical-stream-transcription-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-medical-stream-transcription-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:cons "x-amzn-request-id" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'language-code))
      (common-lisp:cons "x-amzn-transcribe-language-code"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'media-sample-rate-hertz))
      (common-lisp:cons "x-amzn-transcribe-sample-rate"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'media-encoding))
      (common-lisp:cons "x-amzn-transcribe-media-encoding"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vocabulary-name))
      (common-lisp:cons "x-amzn-transcribe-vocabulary-name"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'specialty))
      (common-lisp:cons "x-amzn-transcribe-specialty"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:cons "x-amzn-transcribe-type"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'show-speaker-label))
      (common-lisp:cons "x-amzn-transcribe-show-speaker-label"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session-id))
      (common-lisp:cons "x-amzn-transcribe-session-id"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-channel-identification))
      (common-lisp:cons "x-amzn-transcribe-enable-channel-identification"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'number-of-channels))
      (common-lisp:cons "x-amzn-transcribe-number-of-channels"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'content-identification-type))
      (common-lisp:cons "x-amzn-transcribe-content-identification-type"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-medical-stream-transcription-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'transcript-result-stream))
      (common-lisp:list
       (common-lisp:cons "TranscriptResultStream"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-medical-stream-transcription-response))
   (common-lisp:slot-value aws-sdk/generator/shape::input
                           'transcript-result-stream))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload-properties
                        (
                         (aws-sdk/generator/shape::input
                          start-medical-stream-transcription-response))
   (common-lisp:declare (common-lisp:ignore aws-sdk/generator/shape::input))
   (common-lisp:list)))
(common-lisp:progn
 (common-lisp:defclass start-stream-transcription-request common-lisp:nil
                       ((language-code :initarg :language-code :initform
                         common-lisp:nil :type
                         (common-lisp:or language-code common-lisp:null)
                         :accessor
                         struct-shape-start-stream-transcription-request-language-code
                         :shape "LanguageCode" :location "header"
                         :location-name "x-amzn-transcribe-language-code")
                        (media-sample-rate-hertz :initarg
                         :media-sample-rate-hertz :initform
                         (common-lisp:error
                          ":media-sample-rate-hertz is required")
                         :type
                         (common-lisp:or media-sample-rate-hertz
                                         common-lisp:null)
                         :accessor
                         struct-shape-start-stream-transcription-request-media-sample-rate-hertz
                         :shape "MediaSampleRateHertz" :location "header"
                         :location-name "x-amzn-transcribe-sample-rate")
                        (media-encoding :initarg :media-encoding :initform
                         (common-lisp:error ":media-encoding is required")
                         :type (common-lisp:or media-encoding common-lisp:null)
                         :accessor
                         struct-shape-start-stream-transcription-request-media-encoding
                         :shape "MediaEncoding" :location "header"
                         :location-name "x-amzn-transcribe-media-encoding")
                        (vocabulary-name :initarg :vocabulary-name :initform
                         common-lisp:nil :type
                         (common-lisp:or vocabulary-name common-lisp:null)
                         :accessor
                         struct-shape-start-stream-transcription-request-vocabulary-name
                         :shape "VocabularyName" :location "header"
                         :location-name "x-amzn-transcribe-vocabulary-name")
                        (session-id :initarg :session-id :initform
                         common-lisp:nil :type
                         (common-lisp:or session-id common-lisp:null) :accessor
                         struct-shape-start-stream-transcription-request-session-id
                         :shape "SessionId" :location "header" :location-name
                         "x-amzn-transcribe-session-id")
                        (audio-stream :initarg :audio-stream :initform
                         (common-lisp:error ":audio-stream is required") :type
                         (common-lisp:or audio-stream common-lisp:null)
                         :accessor
                         struct-shape-start-stream-transcription-request-audio-stream
                         :shape "AudioStream" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (vocabulary-filter-name :initarg
                         :vocabulary-filter-name :initform common-lisp:nil
                         :type
                         (common-lisp:or vocabulary-filter-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-start-stream-transcription-request-vocabulary-filter-name
                         :shape "VocabularyFilterName" :location "header"
                         :location-name
                         "x-amzn-transcribe-vocabulary-filter-name")
                        (vocabulary-filter-method :initarg
                         :vocabulary-filter-method :initform common-lisp:nil
                         :type
                         (common-lisp:or vocabulary-filter-method
                                         common-lisp:null)
                         :accessor
                         struct-shape-start-stream-transcription-request-vocabulary-filter-method
                         :shape "VocabularyFilterMethod" :location "header"
                         :location-name
                         "x-amzn-transcribe-vocabulary-filter-method")
                        (show-speaker-label :initarg :show-speaker-label
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-start-stream-transcription-request-show-speaker-label
                         :shape "Boolean" :location "header" :location-name
                         "x-amzn-transcribe-show-speaker-label")
                        (enable-channel-identification :initarg
                         :enable-channel-identification :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-start-stream-transcription-request-enable-channel-identification
                         :shape "Boolean" :location "header" :location-name
                         "x-amzn-transcribe-enable-channel-identification")
                        (number-of-channels :initarg :number-of-channels
                         :initform common-lisp:nil :type
                         (common-lisp:or number-of-channels common-lisp:null)
                         :accessor
                         struct-shape-start-stream-transcription-request-number-of-channels
                         :shape "NumberOfChannels" :location "header"
                         :location-name "x-amzn-transcribe-number-of-channels")
                        (enable-partial-results-stabilization :initarg
                         :enable-partial-results-stabilization :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-start-stream-transcription-request-enable-partial-results-stabilization
                         :shape "Boolean" :location "header" :location-name
                         "x-amzn-transcribe-enable-partial-results-stabilization")
                        (partial-results-stability :initarg
                         :partial-results-stability :initform common-lisp:nil
                         :type
                         (common-lisp:or partial-results-stability
                                         common-lisp:null)
                         :accessor
                         struct-shape-start-stream-transcription-request-partial-results-stability
                         :shape "PartialResultsStability" :location "header"
                         :location-name
                         "x-amzn-transcribe-partial-results-stability")
                        (content-identification-type :initarg
                         :content-identification-type :initform common-lisp:nil
                         :type
                         (common-lisp:or content-identification-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-start-stream-transcription-request-content-identification-type
                         :shape "ContentIdentificationType" :location "header"
                         :location-name
                         "x-amzn-transcribe-content-identification-type")
                        (content-redaction-type :initarg
                         :content-redaction-type :initform common-lisp:nil
                         :type
                         (common-lisp:or content-redaction-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-start-stream-transcription-request-content-redaction-type
                         :shape "ContentRedactionType" :location "header"
                         :location-name
                         "x-amzn-transcribe-content-redaction-type")
                        (pii-entity-types :initarg :pii-entity-types :initform
                         common-lisp:nil :type
                         (common-lisp:or pii-entity-types common-lisp:null)
                         :accessor
                         struct-shape-start-stream-transcription-request-pii-entity-types
                         :shape "PiiEntityTypes" :location "header"
                         :location-name "x-amzn-transcribe-pii-entity-types")
                        (language-model-name :initarg :language-model-name
                         :initform common-lisp:nil :type
                         (common-lisp:or model-name common-lisp:null) :accessor
                         struct-shape-start-stream-transcription-request-language-model-name
                         :shape "ModelName" :location "header" :location-name
                         "x-amzn-transcribe-language-model-name")
                        (identify-language :initarg :identify-language
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-start-stream-transcription-request-identify-language
                         :shape "Boolean" :location "header" :location-name
                         "x-amzn-transcribe-identify-language")
                        (language-options :initarg :language-options :initform
                         common-lisp:nil :type
                         (common-lisp:or language-options common-lisp:null)
                         :accessor
                         struct-shape-start-stream-transcription-request-language-options
                         :shape "LanguageOptions" :location "header"
                         :location-name "x-amzn-transcribe-language-options")
                        (preferred-language :initarg :preferred-language
                         :initform common-lisp:nil :type
                         (common-lisp:or language-code common-lisp:null)
                         :accessor
                         struct-shape-start-stream-transcription-request-preferred-language
                         :shape "LanguageCode" :location "header"
                         :location-name "x-amzn-transcribe-preferred-language")
                        (identify-multiple-languages :initarg
                         :identify-multiple-languages :initform common-lisp:nil
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         struct-shape-start-stream-transcription-request-identify-multiple-languages
                         :shape "Boolean" :location "header" :location-name
                         "x-amzn-transcribe-identify-multiple-languages")
                        (vocabulary-names :initarg :vocabulary-names :initform
                         common-lisp:nil :type
                         (common-lisp:or vocabulary-names common-lisp:null)
                         :accessor
                         struct-shape-start-stream-transcription-request-vocabulary-names
                         :shape "VocabularyNames" :location "header"
                         :location-name "x-amzn-transcribe-vocabulary-names")
                        (vocabulary-filter-names :initarg
                         :vocabulary-filter-names :initform common-lisp:nil
                         :type
                         (common-lisp:or vocabulary-filter-names
                                         common-lisp:null)
                         :accessor
                         struct-shape-start-stream-transcription-request-vocabulary-filter-names
                         :shape "VocabularyFilterNames" :location "header"
                         :location-name
                         "x-amzn-transcribe-vocabulary-filter-names"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-stream-transcription-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-stream-transcription-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-stream-transcription-request
                    'make-start-stream-transcription-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-stream-transcription-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'language-code))
      (common-lisp:cons "x-amzn-transcribe-language-code"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'media-sample-rate-hertz))
      (common-lisp:cons "x-amzn-transcribe-sample-rate"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'media-encoding))
      (common-lisp:cons "x-amzn-transcribe-media-encoding"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vocabulary-name))
      (common-lisp:cons "x-amzn-transcribe-vocabulary-name"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session-id))
      (common-lisp:cons "x-amzn-transcribe-session-id"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vocabulary-filter-name))
      (common-lisp:cons "x-amzn-transcribe-vocabulary-filter-name"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vocabulary-filter-method))
      (common-lisp:cons "x-amzn-transcribe-vocabulary-filter-method"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'show-speaker-label))
      (common-lisp:cons "x-amzn-transcribe-show-speaker-label"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-channel-identification))
      (common-lisp:cons "x-amzn-transcribe-enable-channel-identification"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'number-of-channels))
      (common-lisp:cons "x-amzn-transcribe-number-of-channels"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-partial-results-stabilization))
      (common-lisp:cons
       "x-amzn-transcribe-enable-partial-results-stabilization"
       aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'partial-results-stability))
      (common-lisp:cons "x-amzn-transcribe-partial-results-stability"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'content-identification-type))
      (common-lisp:cons "x-amzn-transcribe-content-identification-type"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'content-redaction-type))
      (common-lisp:cons "x-amzn-transcribe-content-redaction-type"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pii-entity-types))
      (common-lisp:cons "x-amzn-transcribe-pii-entity-types"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'language-model-name))
      (common-lisp:cons "x-amzn-transcribe-language-model-name"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identify-language))
      (common-lisp:cons "x-amzn-transcribe-identify-language"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'language-options))
      (common-lisp:cons "x-amzn-transcribe-language-options"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'preferred-language))
      (common-lisp:cons "x-amzn-transcribe-preferred-language"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'identify-multiple-languages))
      (common-lisp:cons "x-amzn-transcribe-identify-multiple-languages"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vocabulary-names))
      (common-lisp:cons "x-amzn-transcribe-vocabulary-names"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vocabulary-filter-names))
      (common-lisp:cons "x-amzn-transcribe-vocabulary-filter-names"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-stream-transcription-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'audio-stream))
      (common-lisp:list
       (common-lisp:cons "AudioStream"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-stream-transcription-request))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'audio-stream))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload-properties
                        (
                         (aws-sdk/generator/shape::input
                          start-stream-transcription-request))
   (common-lisp:declare (common-lisp:ignore aws-sdk/generator/shape::input))
   (common-lisp:list)))
(common-lisp:progn
 (common-lisp:defclass start-stream-transcription-response common-lisp:nil
                       ((request-id :initarg :request-id :initform
                         common-lisp:nil :type
                         (common-lisp:or request-id common-lisp:null) :accessor
                         struct-shape-start-stream-transcription-response-request-id
                         :shape "RequestId" :location "header" :location-name
                         "x-amzn-request-id")
                        (language-code :initarg :language-code :initform
                         common-lisp:nil :type
                         (common-lisp:or language-code common-lisp:null)
                         :accessor
                         struct-shape-start-stream-transcription-response-language-code
                         :shape "LanguageCode" :location "header"
                         :location-name "x-amzn-transcribe-language-code")
                        (media-sample-rate-hertz :initarg
                         :media-sample-rate-hertz :initform common-lisp:nil
                         :type
                         (common-lisp:or media-sample-rate-hertz
                                         common-lisp:null)
                         :accessor
                         struct-shape-start-stream-transcription-response-media-sample-rate-hertz
                         :shape "MediaSampleRateHertz" :location "header"
                         :location-name "x-amzn-transcribe-sample-rate")
                        (media-encoding :initarg :media-encoding :initform
                         common-lisp:nil :type
                         (common-lisp:or media-encoding common-lisp:null)
                         :accessor
                         struct-shape-start-stream-transcription-response-media-encoding
                         :shape "MediaEncoding" :location "header"
                         :location-name "x-amzn-transcribe-media-encoding")
                        (vocabulary-name :initarg :vocabulary-name :initform
                         common-lisp:nil :type
                         (common-lisp:or vocabulary-name common-lisp:null)
                         :accessor
                         struct-shape-start-stream-transcription-response-vocabulary-name
                         :shape "VocabularyName" :location "header"
                         :location-name "x-amzn-transcribe-vocabulary-name")
                        (session-id :initarg :session-id :initform
                         common-lisp:nil :type
                         (common-lisp:or session-id common-lisp:null) :accessor
                         struct-shape-start-stream-transcription-response-session-id
                         :shape "SessionId" :location "header" :location-name
                         "x-amzn-transcribe-session-id")
                        (transcript-result-stream :initarg
                         :transcript-result-stream :initform common-lisp:nil
                         :type
                         (common-lisp:or transcript-result-stream
                                         common-lisp:null)
                         :accessor
                         struct-shape-start-stream-transcription-response-transcript-result-stream
                         :shape "TranscriptResultStream" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (vocabulary-filter-name :initarg
                         :vocabulary-filter-name :initform common-lisp:nil
                         :type
                         (common-lisp:or vocabulary-filter-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-start-stream-transcription-response-vocabulary-filter-name
                         :shape "VocabularyFilterName" :location "header"
                         :location-name
                         "x-amzn-transcribe-vocabulary-filter-name")
                        (vocabulary-filter-method :initarg
                         :vocabulary-filter-method :initform common-lisp:nil
                         :type
                         (common-lisp:or vocabulary-filter-method
                                         common-lisp:null)
                         :accessor
                         struct-shape-start-stream-transcription-response-vocabulary-filter-method
                         :shape "VocabularyFilterMethod" :location "header"
                         :location-name
                         "x-amzn-transcribe-vocabulary-filter-method")
                        (show-speaker-label :initarg :show-speaker-label
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-start-stream-transcription-response-show-speaker-label
                         :shape "Boolean" :location "header" :location-name
                         "x-amzn-transcribe-show-speaker-label")
                        (enable-channel-identification :initarg
                         :enable-channel-identification :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-start-stream-transcription-response-enable-channel-identification
                         :shape "Boolean" :location "header" :location-name
                         "x-amzn-transcribe-enable-channel-identification")
                        (number-of-channels :initarg :number-of-channels
                         :initform common-lisp:nil :type
                         (common-lisp:or number-of-channels common-lisp:null)
                         :accessor
                         struct-shape-start-stream-transcription-response-number-of-channels
                         :shape "NumberOfChannels" :location "header"
                         :location-name "x-amzn-transcribe-number-of-channels")
                        (enable-partial-results-stabilization :initarg
                         :enable-partial-results-stabilization :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-start-stream-transcription-response-enable-partial-results-stabilization
                         :shape "Boolean" :location "header" :location-name
                         "x-amzn-transcribe-enable-partial-results-stabilization")
                        (partial-results-stability :initarg
                         :partial-results-stability :initform common-lisp:nil
                         :type
                         (common-lisp:or partial-results-stability
                                         common-lisp:null)
                         :accessor
                         struct-shape-start-stream-transcription-response-partial-results-stability
                         :shape "PartialResultsStability" :location "header"
                         :location-name
                         "x-amzn-transcribe-partial-results-stability")
                        (content-identification-type :initarg
                         :content-identification-type :initform common-lisp:nil
                         :type
                         (common-lisp:or content-identification-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-start-stream-transcription-response-content-identification-type
                         :shape "ContentIdentificationType" :location "header"
                         :location-name
                         "x-amzn-transcribe-content-identification-type")
                        (content-redaction-type :initarg
                         :content-redaction-type :initform common-lisp:nil
                         :type
                         (common-lisp:or content-redaction-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-start-stream-transcription-response-content-redaction-type
                         :shape "ContentRedactionType" :location "header"
                         :location-name
                         "x-amzn-transcribe-content-redaction-type")
                        (pii-entity-types :initarg :pii-entity-types :initform
                         common-lisp:nil :type
                         (common-lisp:or pii-entity-types common-lisp:null)
                         :accessor
                         struct-shape-start-stream-transcription-response-pii-entity-types
                         :shape "PiiEntityTypes" :location "header"
                         :location-name "x-amzn-transcribe-pii-entity-types")
                        (language-model-name :initarg :language-model-name
                         :initform common-lisp:nil :type
                         (common-lisp:or model-name common-lisp:null) :accessor
                         struct-shape-start-stream-transcription-response-language-model-name
                         :shape "ModelName" :location "header" :location-name
                         "x-amzn-transcribe-language-model-name")
                        (identify-language :initarg :identify-language
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-start-stream-transcription-response-identify-language
                         :shape "Boolean" :location "header" :location-name
                         "x-amzn-transcribe-identify-language")
                        (language-options :initarg :language-options :initform
                         common-lisp:nil :type
                         (common-lisp:or language-options common-lisp:null)
                         :accessor
                         struct-shape-start-stream-transcription-response-language-options
                         :shape "LanguageOptions" :location "header"
                         :location-name "x-amzn-transcribe-language-options")
                        (preferred-language :initarg :preferred-language
                         :initform common-lisp:nil :type
                         (common-lisp:or language-code common-lisp:null)
                         :accessor
                         struct-shape-start-stream-transcription-response-preferred-language
                         :shape "LanguageCode" :location "header"
                         :location-name "x-amzn-transcribe-preferred-language")
                        (identify-multiple-languages :initarg
                         :identify-multiple-languages :initform common-lisp:nil
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         struct-shape-start-stream-transcription-response-identify-multiple-languages
                         :shape "Boolean" :location "header" :location-name
                         "x-amzn-transcribe-identify-multiple-languages")
                        (vocabulary-names :initarg :vocabulary-names :initform
                         common-lisp:nil :type
                         (common-lisp:or vocabulary-names common-lisp:null)
                         :accessor
                         struct-shape-start-stream-transcription-response-vocabulary-names
                         :shape "VocabularyNames" :location "header"
                         :location-name "x-amzn-transcribe-vocabulary-names")
                        (vocabulary-filter-names :initarg
                         :vocabulary-filter-names :initform common-lisp:nil
                         :type
                         (common-lisp:or vocabulary-filter-names
                                         common-lisp:null)
                         :accessor
                         struct-shape-start-stream-transcription-response-vocabulary-filter-names
                         :shape "VocabularyFilterNames" :location "header"
                         :location-name
                         "x-amzn-transcribe-vocabulary-filter-names"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-stream-transcription-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-stream-transcription-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-stream-transcription-response
                    'make-start-stream-transcription-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-stream-transcription-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:cons "x-amzn-request-id" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'language-code))
      (common-lisp:cons "x-amzn-transcribe-language-code"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'media-sample-rate-hertz))
      (common-lisp:cons "x-amzn-transcribe-sample-rate"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'media-encoding))
      (common-lisp:cons "x-amzn-transcribe-media-encoding"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vocabulary-name))
      (common-lisp:cons "x-amzn-transcribe-vocabulary-name"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session-id))
      (common-lisp:cons "x-amzn-transcribe-session-id"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vocabulary-filter-name))
      (common-lisp:cons "x-amzn-transcribe-vocabulary-filter-name"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vocabulary-filter-method))
      (common-lisp:cons "x-amzn-transcribe-vocabulary-filter-method"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'show-speaker-label))
      (common-lisp:cons "x-amzn-transcribe-show-speaker-label"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-channel-identification))
      (common-lisp:cons "x-amzn-transcribe-enable-channel-identification"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'number-of-channels))
      (common-lisp:cons "x-amzn-transcribe-number-of-channels"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-partial-results-stabilization))
      (common-lisp:cons
       "x-amzn-transcribe-enable-partial-results-stabilization"
       aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'partial-results-stability))
      (common-lisp:cons "x-amzn-transcribe-partial-results-stability"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'content-identification-type))
      (common-lisp:cons "x-amzn-transcribe-content-identification-type"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'content-redaction-type))
      (common-lisp:cons "x-amzn-transcribe-content-redaction-type"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pii-entity-types))
      (common-lisp:cons "x-amzn-transcribe-pii-entity-types"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'language-model-name))
      (common-lisp:cons "x-amzn-transcribe-language-model-name"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identify-language))
      (common-lisp:cons "x-amzn-transcribe-identify-language"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'language-options))
      (common-lisp:cons "x-amzn-transcribe-language-options"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'preferred-language))
      (common-lisp:cons "x-amzn-transcribe-preferred-language"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'identify-multiple-languages))
      (common-lisp:cons "x-amzn-transcribe-identify-multiple-languages"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vocabulary-names))
      (common-lisp:cons "x-amzn-transcribe-vocabulary-names"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vocabulary-filter-names))
      (common-lisp:cons "x-amzn-transcribe-vocabulary-filter-names"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-stream-transcription-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'transcript-result-stream))
      (common-lisp:list
       (common-lisp:cons "TranscriptResultStream"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-stream-transcription-response))
   (common-lisp:slot-value aws-sdk/generator/shape::input
                           'transcript-result-stream))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload-properties
                        (
                         (aws-sdk/generator/shape::input
                          start-stream-transcription-response))
   (common-lisp:declare (common-lisp:ignore aws-sdk/generator/shape::input))
   (common-lisp:list)))
(common-lisp:deftype string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype string-list () '(trivial-types:proper-list string))
 (common-lisp:defun make-string-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass timestamp-range common-lisp:nil
                       ((begin-offset-millis :initarg :begin-offset-millis
                         :initform common-lisp:nil :type
                         (common-lisp:or long common-lisp:null) :accessor
                         struct-shape-timestamp-range-begin-offset-millis
                         :shape "Long" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (end-offset-millis :initarg :end-offset-millis
                         :initform common-lisp:nil :type
                         (common-lisp:or long common-lisp:null) :accessor
                         struct-shape-timestamp-range-end-offset-millis :shape
                         "Long" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-timestamp-range
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'timestamp-range
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'timestamp-range 'make-timestamp-range))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input timestamp-range))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input timestamp-range))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'begin-offset-millis))
      (common-lisp:list
       (common-lisp:cons "BeginOffsetMillis"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-offset-millis))
      (common-lisp:list
       (common-lisp:cons "EndOffsetMillis"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input timestamp-range))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype timestamp-ranges ()
   '(trivial-types:proper-list timestamp-range))
 (common-lisp:defun make-timestamp-ranges
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list timestamp-range))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass transcript common-lisp:nil
                       ((results :initarg :results :initform common-lisp:nil
                         :type (common-lisp:or result-list common-lisp:null)
                         :accessor struct-shape-transcript-results :shape
                         "ResultList" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-transcript
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'transcript
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'transcript 'make-transcript))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input transcript))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input transcript))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'results))
      (common-lisp:list
       (common-lisp:cons "Results"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input transcript))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass transcript-event common-lisp:nil
                       ((transcript :initarg :transcript :initform
                         common-lisp:nil :type
                         (common-lisp:or transcript common-lisp:null) :accessor
                         struct-shape-transcript-event-transcript :shape
                         "Transcript" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-transcript-event
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'transcript-event
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'transcript-event 'make-transcript-event))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input transcript-event))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input transcript-event))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transcript))
      (common-lisp:list
       (common-lisp:cons "Transcript"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input transcript-event))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass transcript-result-stream common-lisp:nil
                       ((transcript-event :initarg :transcript-event :initform
                         common-lisp:nil :type
                         (common-lisp:or transcript-event common-lisp:null)
                         :accessor
                         struct-shape-transcript-result-stream-transcript-event
                         :shape "TranscriptEvent" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (bad-request-exception :initarg :bad-request-exception
                         :initform common-lisp:nil :type
                         (common-lisp:or bad-request-exception
                                         common-lisp:null)
                         :accessor
                         struct-shape-transcript-result-stream-bad-request-exception
                         :shape "BadRequestException" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (limit-exceeded-exception :initarg
                         :limit-exceeded-exception :initform common-lisp:nil
                         :type
                         (common-lisp:or limit-exceeded-exception
                                         common-lisp:null)
                         :accessor
                         struct-shape-transcript-result-stream-limit-exceeded-exception
                         :shape "LimitExceededException" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (internal-failure-exception :initarg
                         :internal-failure-exception :initform common-lisp:nil
                         :type
                         (common-lisp:or internal-failure-exception
                                         common-lisp:null)
                         :accessor
                         struct-shape-transcript-result-stream-internal-failure-exception
                         :shape "InternalFailureException" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (conflict-exception :initarg :conflict-exception
                         :initform common-lisp:nil :type
                         (common-lisp:or conflict-exception common-lisp:null)
                         :accessor
                         struct-shape-transcript-result-stream-conflict-exception
                         :shape "ConflictException" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (service-unavailable-exception :initarg
                         :service-unavailable-exception :initform
                         common-lisp:nil :type
                         (common-lisp:or service-unavailable-exception
                                         common-lisp:null)
                         :accessor
                         struct-shape-transcript-result-stream-service-unavailable-exception
                         :shape "ServiceUnavailableException" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-transcript-result-stream
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'transcript-result-stream
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'transcript-result-stream 'make-transcript-result-stream))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          transcript-result-stream))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          transcript-result-stream))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transcript-event))
      (common-lisp:list
       (common-lisp:cons "TranscriptEvent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'bad-request-exception))
      (common-lisp:list
       (common-lisp:cons "BadRequestException"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'limit-exceeded-exception))
      (common-lisp:list
       (common-lisp:cons "LimitExceededException"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'internal-failure-exception))
      (common-lisp:list
       (common-lisp:cons "InternalFailureException"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'conflict-exception))
      (common-lisp:list
       (common-lisp:cons "ConflictException"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'service-unavailable-exception))
      (common-lisp:list
       (common-lisp:cons "ServiceUnavailableException"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          transcript-result-stream))
   common-lisp:nil))
(common-lisp:deftype type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass utterance-event common-lisp:nil
                       ((utterance-id :initarg :utterance-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-utterance-event-utterance-id :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (is-partial :initarg :is-partial :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-utterance-event-is-partial :shape
                         "Boolean" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (participant-role :initarg :participant-role :initform
                         common-lisp:nil :type
                         (common-lisp:or participant-role common-lisp:null)
                         :accessor
                         struct-shape-utterance-event-participant-role :shape
                         "ParticipantRole" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (begin-offset-millis :initarg :begin-offset-millis
                         :initform common-lisp:nil :type
                         (common-lisp:or long common-lisp:null) :accessor
                         struct-shape-utterance-event-begin-offset-millis
                         :shape "Long" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (end-offset-millis :initarg :end-offset-millis
                         :initform common-lisp:nil :type
                         (common-lisp:or long common-lisp:null) :accessor
                         struct-shape-utterance-event-end-offset-millis :shape
                         "Long" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (transcript :initarg :transcript :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-utterance-event-transcript :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (items :initarg :items :initform common-lisp:nil :type
                         (common-lisp:or call-analytics-item-list
                                         common-lisp:null)
                         :accessor struct-shape-utterance-event-items :shape
                         "CallAnalyticsItemList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (entities :initarg :entities :initform common-lisp:nil
                         :type
                         (common-lisp:or call-analytics-entity-list
                                         common-lisp:null)
                         :accessor struct-shape-utterance-event-entities :shape
                         "CallAnalyticsEntityList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (sentiment :initarg :sentiment :initform
                         common-lisp:nil :type
                         (common-lisp:or sentiment common-lisp:null) :accessor
                         struct-shape-utterance-event-sentiment :shape
                         "Sentiment" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (issues-detected :initarg :issues-detected :initform
                         common-lisp:nil :type
                         (common-lisp:or issues-detected common-lisp:null)
                         :accessor struct-shape-utterance-event-issues-detected
                         :shape "IssuesDetected" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-utterance-event
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'utterance-event
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'utterance-event 'make-utterance-event))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input utterance-event))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input utterance-event))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'utterance-id))
      (common-lisp:list
       (common-lisp:cons "UtteranceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-partial))
      (common-lisp:list
       (common-lisp:cons "IsPartial"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'participant-role))
      (common-lisp:list
       (common-lisp:cons "ParticipantRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'begin-offset-millis))
      (common-lisp:list
       (common-lisp:cons "BeginOffsetMillis"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-offset-millis))
      (common-lisp:list
       (common-lisp:cons "EndOffsetMillis"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transcript))
      (common-lisp:list
       (common-lisp:cons "Transcript"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'items))
      (common-lisp:list
       (common-lisp:cons "Items"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entities))
      (common-lisp:list
       (common-lisp:cons "Entities"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sentiment))
      (common-lisp:list
       (common-lisp:cons "Sentiment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'issues-detected))
      (common-lisp:list
       (common-lisp:cons "IssuesDetected"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input utterance-event))
   common-lisp:nil))
(common-lisp:deftype vocabulary-filter-method () 'common-lisp:string)
(common-lisp:deftype vocabulary-filter-name () 'common-lisp:string)
(common-lisp:deftype vocabulary-filter-names () 'common-lisp:string)
(common-lisp:deftype vocabulary-name () 'common-lisp:string)
(common-lisp:deftype vocabulary-names () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defun start-call-analytics-stream-transcription
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key language-code media-sample-rate-hertz
                     media-encoding vocabulary-name session-id audio-stream
                     vocabulary-filter-name vocabulary-filter-method
                     language-model-name enable-partial-results-stabilization
                     partial-results-stability content-identification-type
                     content-redaction-type pii-entity-types)
   (common-lisp:declare
    (common-lisp:ignorable language-code media-sample-rate-hertz media-encoding
     vocabulary-name session-id audio-stream vocabulary-filter-name
     vocabulary-filter-method language-model-name
     enable-partial-results-stabilization partial-results-stability
     content-identification-type content-redaction-type pii-entity-types))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-start-call-analytics-stream-transcription-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'transcribe-streaming-request aws-sdk/generator/operation::input "POST"
        "/call-analytics-stream-transcription"
        "StartCallAnalyticsStreamTranscription"))
      "structure" common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'start-call-analytics-stream-transcription))
(common-lisp:progn
 (common-lisp:defun start-medical-stream-transcription
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key language-code media-sample-rate-hertz
                     media-encoding vocabulary-name specialty type
                     show-speaker-label session-id audio-stream
                     enable-channel-identification number-of-channels
                     content-identification-type)
   (common-lisp:declare
    (common-lisp:ignorable language-code media-sample-rate-hertz media-encoding
     vocabulary-name specialty type show-speaker-label session-id audio-stream
     enable-channel-identification number-of-channels
     content-identification-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-start-medical-stream-transcription-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'transcribe-streaming-request aws-sdk/generator/operation::input "POST"
        "/medical-stream-transcription" "StartMedicalStreamTranscription"))
      "structure" common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'start-medical-stream-transcription))
(common-lisp:progn
 (common-lisp:defun start-stream-transcription
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key language-code media-sample-rate-hertz
                     media-encoding vocabulary-name session-id audio-stream
                     vocabulary-filter-name vocabulary-filter-method
                     show-speaker-label enable-channel-identification
                     number-of-channels enable-partial-results-stabilization
                     partial-results-stability content-identification-type
                     content-redaction-type pii-entity-types
                     language-model-name identify-language language-options
                     preferred-language identify-multiple-languages
                     vocabulary-names vocabulary-filter-names)
   (common-lisp:declare
    (common-lisp:ignorable language-code media-sample-rate-hertz media-encoding
     vocabulary-name session-id audio-stream vocabulary-filter-name
     vocabulary-filter-method show-speaker-label enable-channel-identification
     number-of-channels enable-partial-results-stabilization
     partial-results-stability content-identification-type
     content-redaction-type pii-entity-types language-model-name
     identify-language language-options preferred-language
     identify-multiple-languages vocabulary-names vocabulary-filter-names))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-start-stream-transcription-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'transcribe-streaming-request aws-sdk/generator/operation::input "POST"
        "/stream-transcription" "StartStreamTranscription"))
      "structure" common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'start-stream-transcription))
