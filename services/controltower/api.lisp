;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/controltower/api
  (:use)
  (:nicknames #:aws/controltower)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/json-request)
  (:import-from #:aws-sdk/rest-json-request)
  (:import-from #:aws-sdk/rest-xml-request)
  (:import-from #:aws-sdk/query-request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/controltower/api)
(common-lisp:progn
 (common-lisp:define-condition controltower-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'controltower-error))
(common-lisp:progn
 (common-lisp:defclass controltower-request
                       (aws-sdk/generator/service::rest-json-request)
                       common-lisp:nil
                       (:default-initargs :service "controltower" :api-version
                        "2018-05-10" :host-prefix "controltower" :signing-name
                        "controltower" :global-host common-lisp:nil))
 (common-lisp:export 'controltower-request))
(common-lisp:defvar *error-map*
  '(("AccessDeniedException" . access-denied-exception)
    ("ConflictException" . conflict-exception)
    ("InternalServerException" . internal-server-exception)
    ("ResourceNotFoundException" . resource-not-found-exception)
    ("ServiceQuotaExceededException" . service-quota-exceeded-exception)
    ("ThrottlingException" . throttling-exception)
    ("ValidationException" . validation-exception)))
(common-lisp:progn
 (common-lisp:define-condition access-denied-exception
     (controltower-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       access-denied-exception-message)))
 (common-lisp:export
  (common-lisp:list 'access-denied-exception 'access-denied-exception-message)))
(common-lisp:deftype arn () 'common-lisp:string)
(common-lisp:deftype baseline-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass baseline-operation common-lisp:nil
                       ((end-time :initarg :end-time :initform common-lisp:nil
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor struct-shape-baseline-operation-end-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (operation-identifier :initarg :operation-identifier
                         :initform common-lisp:nil :type
                         (common-lisp:or operation-identifier common-lisp:null)
                         :accessor
                         struct-shape-baseline-operation-operation-identifier
                         :shape "OperationIdentifier" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (operation-type :initarg :operation-type :initform
                         common-lisp:nil :type
                         (common-lisp:or baseline-operation-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-baseline-operation-operation-type :shape
                         "BaselineOperationType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (start-time :initarg :start-time :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-baseline-operation-start-time :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or baseline-operation-status
                                         common-lisp:null)
                         :accessor struct-shape-baseline-operation-status
                         :shape "BaselineOperationStatus" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (status-message :initarg :status-message :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-baseline-operation-status-message :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-baseline-operation
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'baseline-operation
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'baseline-operation 'make-baseline-operation))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input baseline-operation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input baseline-operation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "endTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'operation-identifier))
      (common-lisp:list
       (common-lisp:cons "operationIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operation-type))
      (common-lisp:list
       (common-lisp:cons "operationType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "startTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-message))
      (common-lisp:list
       (common-lisp:cons "statusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input baseline-operation))
   common-lisp:nil))
(common-lisp:deftype baseline-operation-status () 'common-lisp:string)
(common-lisp:deftype baseline-operation-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass baseline-summary common-lisp:nil
                       ((arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-baseline-summary-arn :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-baseline-summary-description :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-baseline-summary-name :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-baseline-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'baseline-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'baseline-summary 'make-baseline-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input baseline-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input baseline-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input baseline-summary))
   common-lisp:nil))
(common-lisp:deftype baseline-version () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype baselines ()
   '(trivial-types:proper-list baseline-summary))
 (common-lisp:defun make-baselines
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list baseline-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition conflict-exception
     (controltower-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       conflict-exception-message)))
 (common-lisp:export
  (common-lisp:list 'conflict-exception 'conflict-exception-message)))
(common-lisp:deftype control-identifier () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass control-operation common-lisp:nil
                       ((end-time :initarg :end-time :initform common-lisp:nil
                         :type
                         (common-lisp:or synthetic-timestamp-date-time
                                         common-lisp:null)
                         :accessor struct-shape-control-operation-end-time
                         :shape "SyntheticTimestamp_date_time" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (operation-type :initarg :operation-type :initform
                         common-lisp:nil :type
                         (common-lisp:or control-operation-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-control-operation-operation-type :shape
                         "ControlOperationType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (start-time :initarg :start-time :initform
                         common-lisp:nil :type
                         (common-lisp:or synthetic-timestamp-date-time
                                         common-lisp:null)
                         :accessor struct-shape-control-operation-start-time
                         :shape "SyntheticTimestamp_date_time" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or control-operation-status
                                         common-lisp:null)
                         :accessor struct-shape-control-operation-status :shape
                         "ControlOperationStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status-message :initarg :status-message :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-control-operation-status-message :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-control-operation
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'control-operation
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'control-operation 'make-control-operation))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input control-operation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input control-operation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "endTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operation-type))
      (common-lisp:list
       (common-lisp:cons "operationType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "startTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-message))
      (common-lisp:list
       (common-lisp:cons "statusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input control-operation))
   common-lisp:nil))
(common-lisp:deftype control-operation-status () 'common-lisp:string)
(common-lisp:deftype control-operation-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass create-landing-zone-output common-lisp:nil
                       ((arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-create-landing-zone-output-arn :shape
                         "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (operation-identifier :initarg :operation-identifier
                         :initform
                         (common-lisp:error ":operationidentifier is required")
                         :type
                         (common-lisp:or operation-identifier common-lisp:null)
                         :accessor
                         struct-shape-create-landing-zone-output-operation-identifier
                         :shape "OperationIdentifier" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-landing-zone-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-landing-zone-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-landing-zone-output
                    'make-create-landing-zone-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-landing-zone-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-landing-zone-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'operation-identifier))
      (common-lisp:list
       (common-lisp:cons "operationIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-landing-zone-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-landing-zone-input common-lisp:nil
                       ((landing-zone-identifier :initarg
                         :landing-zone-identifier :initform
                         (common-lisp:error
                          ":landingzoneidentifier is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-delete-landing-zone-input-landing-zone-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-landing-zone-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-landing-zone-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-landing-zone-input
                    'make-delete-landing-zone-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-landing-zone-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-landing-zone-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'landing-zone-identifier))
      (common-lisp:list
       (common-lisp:cons "landingZoneIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-landing-zone-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-landing-zone-output common-lisp:nil
                       ((operation-identifier :initarg :operation-identifier
                         :initform
                         (common-lisp:error ":operationidentifier is required")
                         :type
                         (common-lisp:or operation-identifier common-lisp:null)
                         :accessor
                         struct-shape-delete-landing-zone-output-operation-identifier
                         :shape "OperationIdentifier" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-landing-zone-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-landing-zone-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-landing-zone-output
                    'make-delete-landing-zone-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-landing-zone-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-landing-zone-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'operation-identifier))
      (common-lisp:list
       (common-lisp:cons "operationIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-landing-zone-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass disable-baseline-input common-lisp:nil
                       ((enabled-baseline-identifier :initarg
                         :enabled-baseline-identifier :initform
                         (common-lisp:error
                          ":enabledbaselineidentifier is required")
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-disable-baseline-input-enabled-baseline-identifier
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-disable-baseline-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'disable-baseline-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'disable-baseline-input 'make-disable-baseline-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disable-baseline-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disable-baseline-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enabled-baseline-identifier))
      (common-lisp:list
       (common-lisp:cons "enabledBaselineIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disable-baseline-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass disable-baseline-output common-lisp:nil
                       ((operation-identifier :initarg :operation-identifier
                         :initform
                         (common-lisp:error ":operationidentifier is required")
                         :type
                         (common-lisp:or operation-identifier common-lisp:null)
                         :accessor
                         struct-shape-disable-baseline-output-operation-identifier
                         :shape "OperationIdentifier" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-disable-baseline-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'disable-baseline-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'disable-baseline-output 'make-disable-baseline-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disable-baseline-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disable-baseline-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'operation-identifier))
      (common-lisp:list
       (common-lisp:cons "operationIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disable-baseline-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass disable-control-input common-lisp:nil
                       ((control-identifier :initarg :control-identifier
                         :initform
                         (common-lisp:error ":controlidentifier is required")
                         :type
                         (common-lisp:or control-identifier common-lisp:null)
                         :accessor
                         struct-shape-disable-control-input-control-identifier
                         :shape "ControlIdentifier" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (target-identifier :initarg :target-identifier
                         :initform
                         (common-lisp:error ":targetidentifier is required")
                         :type
                         (common-lisp:or target-identifier common-lisp:null)
                         :accessor
                         struct-shape-disable-control-input-target-identifier
                         :shape "TargetIdentifier" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-disable-control-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'disable-control-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'disable-control-input 'make-disable-control-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disable-control-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disable-control-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'control-identifier))
      (common-lisp:list
       (common-lisp:cons "controlIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-identifier))
      (common-lisp:list
       (common-lisp:cons "targetIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disable-control-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass disable-control-output common-lisp:nil
                       ((operation-identifier :initarg :operation-identifier
                         :initform
                         (common-lisp:error ":operationidentifier is required")
                         :type
                         (common-lisp:or operation-identifier common-lisp:null)
                         :accessor
                         struct-shape-disable-control-output-operation-identifier
                         :shape "OperationIdentifier" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-disable-control-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'disable-control-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'disable-control-output 'make-disable-control-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disable-control-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disable-control-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'operation-identifier))
      (common-lisp:list
       (common-lisp:cons "operationIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disable-control-output))
   common-lisp:nil))
(common-lisp:deftype drift-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass drift-status-summary common-lisp:nil
                       ((drift-status :initarg :drift-status :initform
                         common-lisp:nil :type
                         (common-lisp:or drift-status common-lisp:null)
                         :accessor
                         struct-shape-drift-status-summary-drift-status :shape
                         "DriftStatus" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-drift-status-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'drift-status-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'drift-status-summary 'make-drift-status-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input drift-status-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input drift-status-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'drift-status))
      (common-lisp:list
       (common-lisp:cons "driftStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input drift-status-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass enable-baseline-input common-lisp:nil
                       ((baseline-identifier :initarg :baseline-identifier
                         :initform
                         (common-lisp:error ":baselineidentifier is required")
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-enable-baseline-input-baseline-identifier
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (baseline-version :initarg :baseline-version :initform
                         (common-lisp:error ":baselineversion is required")
                         :type
                         (common-lisp:or baseline-version common-lisp:null)
                         :accessor
                         struct-shape-enable-baseline-input-baseline-version
                         :shape "BaselineVersion" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         struct-shape-enable-baseline-input-tags :shape
                         "TagMap" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (target-identifier :initarg :target-identifier
                         :initform
                         (common-lisp:error ":targetidentifier is required")
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-enable-baseline-input-target-identifier
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-enable-baseline-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'enable-baseline-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'enable-baseline-input 'make-enable-baseline-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          enable-baseline-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          enable-baseline-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'baseline-identifier))
      (common-lisp:list
       (common-lisp:cons "baselineIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'baseline-version))
      (common-lisp:list
       (common-lisp:cons "baselineVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-identifier))
      (common-lisp:list
       (common-lisp:cons "targetIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          enable-baseline-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass enable-baseline-output common-lisp:nil
                       ((arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-enable-baseline-output-arn :shape "Arn"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (operation-identifier :initarg :operation-identifier
                         :initform
                         (common-lisp:error ":operationidentifier is required")
                         :type
                         (common-lisp:or operation-identifier common-lisp:null)
                         :accessor
                         struct-shape-enable-baseline-output-operation-identifier
                         :shape "OperationIdentifier" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-enable-baseline-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'enable-baseline-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'enable-baseline-output 'make-enable-baseline-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          enable-baseline-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          enable-baseline-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'operation-identifier))
      (common-lisp:list
       (common-lisp:cons "operationIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          enable-baseline-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass enable-control-input common-lisp:nil
                       ((control-identifier :initarg :control-identifier
                         :initform
                         (common-lisp:error ":controlidentifier is required")
                         :type
                         (common-lisp:or control-identifier common-lisp:null)
                         :accessor
                         struct-shape-enable-control-input-control-identifier
                         :shape "ControlIdentifier" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         struct-shape-enable-control-input-tags :shape "TagMap"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (target-identifier :initarg :target-identifier
                         :initform
                         (common-lisp:error ":targetidentifier is required")
                         :type
                         (common-lisp:or target-identifier common-lisp:null)
                         :accessor
                         struct-shape-enable-control-input-target-identifier
                         :shape "TargetIdentifier" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-enable-control-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'enable-control-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'enable-control-input 'make-enable-control-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input enable-control-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input enable-control-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'control-identifier))
      (common-lisp:list
       (common-lisp:cons "controlIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-identifier))
      (common-lisp:list
       (common-lisp:cons "targetIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input enable-control-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass enable-control-output common-lisp:nil
                       ((arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-enable-control-output-arn :shape "Arn"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (operation-identifier :initarg :operation-identifier
                         :initform
                         (common-lisp:error ":operationidentifier is required")
                         :type
                         (common-lisp:or operation-identifier common-lisp:null)
                         :accessor
                         struct-shape-enable-control-output-operation-identifier
                         :shape "OperationIdentifier" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-enable-control-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'enable-control-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'enable-control-output 'make-enable-control-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          enable-control-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          enable-control-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'operation-identifier))
      (common-lisp:list
       (common-lisp:cons "operationIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          enable-control-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype enabled-baseline-baseline-identifiers ()
   '(trivial-types:proper-list arn))
 (common-lisp:defun make-enabled-baseline-baseline-identifiers
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list arn))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass enabled-baseline-details common-lisp:nil
                       ((arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-enabled-baseline-details-arn :shape "Arn"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (baseline-identifier :initarg :baseline-identifier
                         :initform
                         (common-lisp:error ":baselineidentifier is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-enabled-baseline-details-baseline-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (baseline-version :initarg :baseline-version :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-enabled-baseline-details-baseline-version
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status-summary :initarg :status-summary :initform
                         (common-lisp:error ":statussummary is required") :type
                         (common-lisp:or enablement-status-summary
                                         common-lisp:null)
                         :accessor
                         struct-shape-enabled-baseline-details-status-summary
                         :shape "EnablementStatusSummary" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (target-identifier :initarg :target-identifier
                         :initform
                         (common-lisp:error ":targetidentifier is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-enabled-baseline-details-target-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-enabled-baseline-details
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'enabled-baseline-details
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'enabled-baseline-details 'make-enabled-baseline-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          enabled-baseline-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          enabled-baseline-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'baseline-identifier))
      (common-lisp:list
       (common-lisp:cons "baselineIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'baseline-version))
      (common-lisp:list
       (common-lisp:cons "baselineVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-summary))
      (common-lisp:list
       (common-lisp:cons "statusSummary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-identifier))
      (common-lisp:list
       (common-lisp:cons "targetIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          enabled-baseline-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass enabled-baseline-filter common-lisp:nil
                       ((baseline-identifiers :initarg :baseline-identifiers
                         :initform common-lisp:nil :type
                         (common-lisp:or enabled-baseline-baseline-identifiers
                                         common-lisp:null)
                         :accessor
                         struct-shape-enabled-baseline-filter-baseline-identifiers
                         :shape "EnabledBaselineBaselineIdentifiers" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (target-identifiers :initarg :target-identifiers
                         :initform common-lisp:nil :type
                         (common-lisp:or enabled-baseline-target-identifiers
                                         common-lisp:null)
                         :accessor
                         struct-shape-enabled-baseline-filter-target-identifiers
                         :shape "EnabledBaselineTargetIdentifiers" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-enabled-baseline-filter
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'enabled-baseline-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'enabled-baseline-filter 'make-enabled-baseline-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          enabled-baseline-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          enabled-baseline-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'baseline-identifiers))
      (common-lisp:list
       (common-lisp:cons "baselineIdentifiers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-identifiers))
      (common-lisp:list
       (common-lisp:cons "targetIdentifiers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          enabled-baseline-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass enabled-baseline-summary common-lisp:nil
                       ((arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-enabled-baseline-summary-arn :shape "Arn"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (baseline-identifier :initarg :baseline-identifier
                         :initform
                         (common-lisp:error ":baselineidentifier is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-enabled-baseline-summary-baseline-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (baseline-version :initarg :baseline-version :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-enabled-baseline-summary-baseline-version
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status-summary :initarg :status-summary :initform
                         (common-lisp:error ":statussummary is required") :type
                         (common-lisp:or enablement-status-summary
                                         common-lisp:null)
                         :accessor
                         struct-shape-enabled-baseline-summary-status-summary
                         :shape "EnablementStatusSummary" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (target-identifier :initarg :target-identifier
                         :initform
                         (common-lisp:error ":targetidentifier is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-enabled-baseline-summary-target-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-enabled-baseline-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'enabled-baseline-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'enabled-baseline-summary 'make-enabled-baseline-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          enabled-baseline-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          enabled-baseline-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'baseline-identifier))
      (common-lisp:list
       (common-lisp:cons "baselineIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'baseline-version))
      (common-lisp:list
       (common-lisp:cons "baselineVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-summary))
      (common-lisp:list
       (common-lisp:cons "statusSummary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-identifier))
      (common-lisp:list
       (common-lisp:cons "targetIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          enabled-baseline-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype enabled-baseline-target-identifiers ()
   '(trivial-types:proper-list arn))
 (common-lisp:defun make-enabled-baseline-target-identifiers
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list arn))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype enabled-baselines ()
   '(trivial-types:proper-list enabled-baseline-summary))
 (common-lisp:defun make-enabled-baselines
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            enabled-baseline-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass enabled-control-details common-lisp:nil
                       ((arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-enabled-control-details-arn :shape "Arn"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (control-identifier :initarg :control-identifier
                         :initform common-lisp:nil :type
                         (common-lisp:or control-identifier common-lisp:null)
                         :accessor
                         struct-shape-enabled-control-details-control-identifier
                         :shape "ControlIdentifier" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (drift-status-summary :initarg :drift-status-summary
                         :initform common-lisp:nil :type
                         (common-lisp:or drift-status-summary common-lisp:null)
                         :accessor
                         struct-shape-enabled-control-details-drift-status-summary
                         :shape "DriftStatusSummary" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status-summary :initarg :status-summary :initform
                         common-lisp:nil :type
                         (common-lisp:or enablement-status-summary
                                         common-lisp:null)
                         :accessor
                         struct-shape-enabled-control-details-status-summary
                         :shape "EnablementStatusSummary" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (target-identifier :initarg :target-identifier
                         :initform common-lisp:nil :type
                         (common-lisp:or target-identifier common-lisp:null)
                         :accessor
                         struct-shape-enabled-control-details-target-identifier
                         :shape "TargetIdentifier" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (target-regions :initarg :target-regions :initform
                         common-lisp:nil :type
                         (common-lisp:or target-regions common-lisp:null)
                         :accessor
                         struct-shape-enabled-control-details-target-regions
                         :shape "TargetRegions" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-enabled-control-details
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'enabled-control-details
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'enabled-control-details 'make-enabled-control-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          enabled-control-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          enabled-control-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'control-identifier))
      (common-lisp:list
       (common-lisp:cons "controlIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'drift-status-summary))
      (common-lisp:list
       (common-lisp:cons "driftStatusSummary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-summary))
      (common-lisp:list
       (common-lisp:cons "statusSummary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-identifier))
      (common-lisp:list
       (common-lisp:cons "targetIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-regions))
      (common-lisp:list
       (common-lisp:cons "targetRegions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          enabled-control-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass enabled-control-summary common-lisp:nil
                       ((arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-enabled-control-summary-arn :shape "Arn"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (control-identifier :initarg :control-identifier
                         :initform common-lisp:nil :type
                         (common-lisp:or control-identifier common-lisp:null)
                         :accessor
                         struct-shape-enabled-control-summary-control-identifier
                         :shape "ControlIdentifier" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (drift-status-summary :initarg :drift-status-summary
                         :initform common-lisp:nil :type
                         (common-lisp:or drift-status-summary common-lisp:null)
                         :accessor
                         struct-shape-enabled-control-summary-drift-status-summary
                         :shape "DriftStatusSummary" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status-summary :initarg :status-summary :initform
                         common-lisp:nil :type
                         (common-lisp:or enablement-status-summary
                                         common-lisp:null)
                         :accessor
                         struct-shape-enabled-control-summary-status-summary
                         :shape "EnablementStatusSummary" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (target-identifier :initarg :target-identifier
                         :initform common-lisp:nil :type
                         (common-lisp:or target-identifier common-lisp:null)
                         :accessor
                         struct-shape-enabled-control-summary-target-identifier
                         :shape "TargetIdentifier" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-enabled-control-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'enabled-control-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'enabled-control-summary 'make-enabled-control-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          enabled-control-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          enabled-control-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'control-identifier))
      (common-lisp:list
       (common-lisp:cons "controlIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'drift-status-summary))
      (common-lisp:list
       (common-lisp:cons "driftStatusSummary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-summary))
      (common-lisp:list
       (common-lisp:cons "statusSummary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-identifier))
      (common-lisp:list
       (common-lisp:cons "targetIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          enabled-control-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype enabled-controls ()
   '(trivial-types:proper-list enabled-control-summary))
 (common-lisp:defun make-enabled-controls
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list enabled-control-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype enablement-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass enablement-status-summary common-lisp:nil
                       ((last-operation-identifier :initarg
                         :last-operation-identifier :initform common-lisp:nil
                         :type
                         (common-lisp:or operation-identifier common-lisp:null)
                         :accessor
                         struct-shape-enablement-status-summary-last-operation-identifier
                         :shape "OperationIdentifier" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or enablement-status common-lisp:null)
                         :accessor
                         struct-shape-enablement-status-summary-status :shape
                         "EnablementStatus" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-enablement-status-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'enablement-status-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'enablement-status-summary
                    'make-enablement-status-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          enablement-status-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          enablement-status-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-operation-identifier))
      (common-lisp:list
       (common-lisp:cons "lastOperationIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          enablement-status-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-baseline-input common-lisp:nil
                       ((baseline-identifier :initarg :baseline-identifier
                         :initform
                         (common-lisp:error ":baselineidentifier is required")
                         :type (common-lisp:or baseline-arn common-lisp:null)
                         :accessor
                         struct-shape-get-baseline-input-baseline-identifier
                         :shape "BaselineArn" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-baseline-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-baseline-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-baseline-input 'make-get-baseline-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-baseline-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-baseline-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'baseline-identifier))
      (common-lisp:list
       (common-lisp:cons "baselineIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-baseline-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-baseline-operation-input common-lisp:nil
                       ((operation-identifier :initarg :operation-identifier
                         :initform
                         (common-lisp:error ":operationidentifier is required")
                         :type
                         (common-lisp:or operation-identifier common-lisp:null)
                         :accessor
                         struct-shape-get-baseline-operation-input-operation-identifier
                         :shape "OperationIdentifier" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-baseline-operation-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-baseline-operation-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-baseline-operation-input
                    'make-get-baseline-operation-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-baseline-operation-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-baseline-operation-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'operation-identifier))
      (common-lisp:list
       (common-lisp:cons "operationIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-baseline-operation-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-baseline-operation-output common-lisp:nil
                       ((baseline-operation :initarg :baseline-operation
                         :initform
                         (common-lisp:error ":baselineoperation is required")
                         :type
                         (common-lisp:or baseline-operation common-lisp:null)
                         :accessor
                         struct-shape-get-baseline-operation-output-baseline-operation
                         :shape "BaselineOperation" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-baseline-operation-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-baseline-operation-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-baseline-operation-output
                    'make-get-baseline-operation-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-baseline-operation-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-baseline-operation-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'baseline-operation))
      (common-lisp:list
       (common-lisp:cons "baselineOperation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-baseline-operation-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-baseline-output common-lisp:nil
                       ((arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or baseline-arn common-lisp:null)
                         :accessor struct-shape-get-baseline-output-arn :shape
                         "BaselineArn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-get-baseline-output-description :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-get-baseline-output-name :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-baseline-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-baseline-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-baseline-output 'make-get-baseline-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-baseline-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-baseline-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-baseline-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-control-operation-input common-lisp:nil
                       ((operation-identifier :initarg :operation-identifier
                         :initform
                         (common-lisp:error ":operationidentifier is required")
                         :type
                         (common-lisp:or operation-identifier common-lisp:null)
                         :accessor
                         struct-shape-get-control-operation-input-operation-identifier
                         :shape "OperationIdentifier" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-control-operation-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-control-operation-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-control-operation-input
                    'make-get-control-operation-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-control-operation-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-control-operation-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'operation-identifier))
      (common-lisp:list
       (common-lisp:cons "operationIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-control-operation-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-control-operation-output common-lisp:nil
                       ((control-operation :initarg :control-operation
                         :initform
                         (common-lisp:error ":controloperation is required")
                         :type
                         (common-lisp:or control-operation common-lisp:null)
                         :accessor
                         struct-shape-get-control-operation-output-control-operation
                         :shape "ControlOperation" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-control-operation-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-control-operation-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-control-operation-output
                    'make-get-control-operation-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-control-operation-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-control-operation-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'control-operation))
      (common-lisp:list
       (common-lisp:cons "controlOperation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-control-operation-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-enabled-baseline-input common-lisp:nil
                       ((enabled-baseline-identifier :initarg
                         :enabled-baseline-identifier :initform
                         (common-lisp:error
                          ":enabledbaselineidentifier is required")
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-get-enabled-baseline-input-enabled-baseline-identifier
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-enabled-baseline-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-enabled-baseline-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-enabled-baseline-input
                    'make-get-enabled-baseline-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-enabled-baseline-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-enabled-baseline-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enabled-baseline-identifier))
      (common-lisp:list
       (common-lisp:cons "enabledBaselineIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-enabled-baseline-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-enabled-baseline-output common-lisp:nil
                       ((enabled-baseline-details :initarg
                         :enabled-baseline-details :initform common-lisp:nil
                         :type
                         (common-lisp:or enabled-baseline-details
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-enabled-baseline-output-enabled-baseline-details
                         :shape "EnabledBaselineDetails" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-enabled-baseline-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-enabled-baseline-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-enabled-baseline-output
                    'make-get-enabled-baseline-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-enabled-baseline-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-enabled-baseline-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enabled-baseline-details))
      (common-lisp:list
       (common-lisp:cons "enabledBaselineDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-enabled-baseline-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-enabled-control-input common-lisp:nil
                       ((enabled-control-identifier :initarg
                         :enabled-control-identifier :initform
                         (common-lisp:error
                          ":enabledcontrolidentifier is required")
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-get-enabled-control-input-enabled-control-identifier
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-enabled-control-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-enabled-control-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-enabled-control-input
                    'make-get-enabled-control-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-enabled-control-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-enabled-control-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enabled-control-identifier))
      (common-lisp:list
       (common-lisp:cons "enabledControlIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-enabled-control-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-enabled-control-output common-lisp:nil
                       ((enabled-control-details :initarg
                         :enabled-control-details :initform
                         (common-lisp:error
                          ":enabledcontroldetails is required")
                         :type
                         (common-lisp:or enabled-control-details
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-enabled-control-output-enabled-control-details
                         :shape "EnabledControlDetails" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-enabled-control-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-enabled-control-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-enabled-control-output
                    'make-get-enabled-control-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-enabled-control-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-enabled-control-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enabled-control-details))
      (common-lisp:list
       (common-lisp:cons "enabledControlDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-enabled-control-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-landing-zone-input common-lisp:nil
                       ((landing-zone-identifier :initarg
                         :landing-zone-identifier :initform
                         (common-lisp:error
                          ":landingzoneidentifier is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-get-landing-zone-input-landing-zone-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-landing-zone-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-landing-zone-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-landing-zone-input 'make-get-landing-zone-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-landing-zone-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-landing-zone-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'landing-zone-identifier))
      (common-lisp:list
       (common-lisp:cons "landingZoneIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-landing-zone-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-landing-zone-operation-input common-lisp:nil
                       ((operation-identifier :initarg :operation-identifier
                         :initform
                         (common-lisp:error ":operationidentifier is required")
                         :type
                         (common-lisp:or operation-identifier common-lisp:null)
                         :accessor
                         struct-shape-get-landing-zone-operation-input-operation-identifier
                         :shape "OperationIdentifier" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-landing-zone-operation-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-landing-zone-operation-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-landing-zone-operation-input
                    'make-get-landing-zone-operation-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-landing-zone-operation-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-landing-zone-operation-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'operation-identifier))
      (common-lisp:list
       (common-lisp:cons "operationIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-landing-zone-operation-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-landing-zone-operation-output common-lisp:nil
                       ((operation-details :initarg :operation-details
                         :initform
                         (common-lisp:error ":operationdetails is required")
                         :type
                         (common-lisp:or landing-zone-operation-detail
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-landing-zone-operation-output-operation-details
                         :shape "LandingZoneOperationDetail" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-landing-zone-operation-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-landing-zone-operation-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-landing-zone-operation-output
                    'make-get-landing-zone-operation-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-landing-zone-operation-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-landing-zone-operation-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operation-details))
      (common-lisp:list
       (common-lisp:cons "operationDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-landing-zone-operation-output))
   common-lisp:nil))
(common-lisp:deftype integer () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition internal-server-exception
     (controltower-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       internal-server-exception-message)))
 (common-lisp:export
  (common-lisp:list 'internal-server-exception
                    'internal-server-exception-message)))
(common-lisp:deftype landing-zone-drift-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass landing-zone-drift-status-summary common-lisp:nil
                       ((status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or landing-zone-drift-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-landing-zone-drift-status-summary-status
                         :shape "LandingZoneDriftStatus" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-landing-zone-drift-status-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'landing-zone-drift-status-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'landing-zone-drift-status-summary
                    'make-landing-zone-drift-status-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          landing-zone-drift-status-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          landing-zone-drift-status-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          landing-zone-drift-status-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass landing-zone-operation-detail common-lisp:nil
                       ((end-time :initarg :end-time :initform common-lisp:nil
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         struct-shape-landing-zone-operation-detail-end-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (operation-type :initarg :operation-type :initform
                         common-lisp:nil :type
                         (common-lisp:or landing-zone-operation-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-landing-zone-operation-detail-operation-type
                         :shape "LandingZoneOperationType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (start-time :initarg :start-time :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-landing-zone-operation-detail-start-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or landing-zone-operation-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-landing-zone-operation-detail-status
                         :shape "LandingZoneOperationStatus" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (status-message :initarg :status-message :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-landing-zone-operation-detail-status-message
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-landing-zone-operation-detail
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'landing-zone-operation-detail
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'landing-zone-operation-detail
                    'make-landing-zone-operation-detail))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          landing-zone-operation-detail))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          landing-zone-operation-detail))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "endTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operation-type))
      (common-lisp:list
       (common-lisp:cons "operationType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "startTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-message))
      (common-lisp:list
       (common-lisp:cons "statusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          landing-zone-operation-detail))
   common-lisp:nil))
(common-lisp:deftype landing-zone-operation-status () 'common-lisp:string)
(common-lisp:deftype landing-zone-operation-type () 'common-lisp:string)
(common-lisp:deftype landing-zone-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass landing-zone-summary common-lisp:nil
                       ((arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-landing-zone-summary-arn :shape "Arn"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-landing-zone-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'landing-zone-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'landing-zone-summary 'make-landing-zone-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input landing-zone-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input landing-zone-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input landing-zone-summary))
   common-lisp:nil))
(common-lisp:deftype landing-zone-version () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass list-baselines-input common-lisp:nil
                       ((max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or list-baselines-max-results
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-baselines-input-max-results :shape
                         "ListBaselinesMaxResults" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-baselines-input-next-token :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-baselines-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-baselines-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-baselines-input 'make-list-baselines-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-baselines-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-baselines-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-baselines-input))
   common-lisp:nil))
(common-lisp:deftype list-baselines-max-results () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass list-baselines-output common-lisp:nil
                       ((baselines :initarg :baselines :initform
                         (common-lisp:error ":baselines is required") :type
                         (common-lisp:or baselines common-lisp:null) :accessor
                         struct-shape-list-baselines-output-baselines :shape
                         "Baselines" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-baselines-output-next-token :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-baselines-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-baselines-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-baselines-output 'make-list-baselines-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-baselines-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-baselines-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'baselines))
      (common-lisp:list
       (common-lisp:cons "baselines"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-baselines-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-enabled-baselines-input common-lisp:nil
                       ((filter :initarg :filter :initform common-lisp:nil
                         :type
                         (common-lisp:or enabled-baseline-filter
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-enabled-baselines-input-filter
                         :shape "EnabledBaselineFilter" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or list-enabled-baselines-max-results
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-enabled-baselines-input-max-results
                         :shape "ListEnabledBaselinesMaxResults" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or list-enabled-baselines-next-token
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-enabled-baselines-input-next-token
                         :shape "ListEnabledBaselinesNextToken" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-enabled-baselines-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-enabled-baselines-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-enabled-baselines-input
                    'make-list-enabled-baselines-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-enabled-baselines-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-enabled-baselines-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter))
      (common-lisp:list
       (common-lisp:cons "filter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-enabled-baselines-input))
   common-lisp:nil))
(common-lisp:deftype list-enabled-baselines-max-results () 'common-lisp:integer)
(common-lisp:deftype list-enabled-baselines-next-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass list-enabled-baselines-output common-lisp:nil
                       ((enabled-baselines :initarg :enabled-baselines
                         :initform
                         (common-lisp:error ":enabledbaselines is required")
                         :type
                         (common-lisp:or enabled-baselines common-lisp:null)
                         :accessor
                         struct-shape-list-enabled-baselines-output-enabled-baselines
                         :shape "EnabledBaselines" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or list-enabled-baselines-next-token
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-enabled-baselines-output-next-token
                         :shape "ListEnabledBaselinesNextToken" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-enabled-baselines-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-enabled-baselines-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-enabled-baselines-output
                    'make-list-enabled-baselines-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-enabled-baselines-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-enabled-baselines-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled-baselines))
      (common-lisp:list
       (common-lisp:cons "enabledBaselines"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-enabled-baselines-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-enabled-controls-input common-lisp:nil
                       ((max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-enabled-controls-input-max-results
                         :shape "MaxResults" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-enabled-controls-input-next-token
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (target-identifier :initarg :target-identifier
                         :initform
                         (common-lisp:error ":targetidentifier is required")
                         :type
                         (common-lisp:or target-identifier common-lisp:null)
                         :accessor
                         struct-shape-list-enabled-controls-input-target-identifier
                         :shape "TargetIdentifier" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-enabled-controls-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-enabled-controls-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-enabled-controls-input
                    'make-list-enabled-controls-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-enabled-controls-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-enabled-controls-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-identifier))
      (common-lisp:list
       (common-lisp:cons "targetIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-enabled-controls-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-enabled-controls-output common-lisp:nil
                       ((enabled-controls :initarg :enabled-controls :initform
                         (common-lisp:error ":enabledcontrols is required")
                         :type
                         (common-lisp:or enabled-controls common-lisp:null)
                         :accessor
                         struct-shape-list-enabled-controls-output-enabled-controls
                         :shape "EnabledControls" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-enabled-controls-output-next-token
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-enabled-controls-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-enabled-controls-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-enabled-controls-output
                    'make-list-enabled-controls-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-enabled-controls-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-enabled-controls-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled-controls))
      (common-lisp:list
       (common-lisp:cons "enabledControls"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-enabled-controls-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-landing-zones-input common-lisp:nil
                       ((max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or list-landing-zones-max-results
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-landing-zones-input-max-results
                         :shape "ListLandingZonesMaxResults" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-landing-zones-input-next-token
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-landing-zones-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-landing-zones-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-landing-zones-input 'make-list-landing-zones-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-landing-zones-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-landing-zones-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-landing-zones-input))
   common-lisp:nil))
(common-lisp:deftype list-landing-zones-max-results () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass list-landing-zones-output common-lisp:nil
                       ((landing-zones :initarg :landing-zones :initform
                         (common-lisp:error ":landingzones is required") :type
                         (common-lisp:or
                          list-landing-zones-output-landing-zones-list
                          common-lisp:null)
                         :accessor
                         struct-shape-list-landing-zones-output-landing-zones
                         :shape "ListLandingZonesOutputLandingZonesList"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-landing-zones-output-next-token
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-landing-zones-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-landing-zones-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-landing-zones-output
                    'make-list-landing-zones-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-landing-zones-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-landing-zones-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'landing-zones))
      (common-lisp:list
       (common-lisp:cons "landingZones"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-landing-zones-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype list-landing-zones-output-landing-zones-list ()
   '(trivial-types:proper-list landing-zone-summary))
 (common-lisp:defun make-list-landing-zones-output-landing-zones-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list landing-zone-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-input common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resourcearn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-list-tags-for-resource-input-resource-arn
                         :shape "Arn" :location "uri" :location-name
                         "resourceArn"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-tags-for-resource-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-tags-for-resource-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-input
                    'make-list-tags-for-resource-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-output common-lisp:nil
                       ((tags :initarg :tags :initform
                         (common-lisp:error ":tags is required") :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         struct-shape-list-tags-for-resource-output-tags :shape
                         "TagMap" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-tags-for-resource-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-output
                    'make-list-tags-for-resource-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-output))
   common-lisp:nil))
(common-lisp:deftype max-results () 'common-lisp:integer)
(common-lisp:deftype operation-identifier () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass region common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or region-name common-lisp:null)
                         :accessor struct-shape-region-name :shape "RegionName"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-region
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'region
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'region 'make-region))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input region))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input region))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input region))
   common-lisp:nil))
(common-lisp:deftype region-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass reset-enabled-baseline-input common-lisp:nil
                       ((enabled-baseline-identifier :initarg
                         :enabled-baseline-identifier :initform
                         (common-lisp:error
                          ":enabledbaselineidentifier is required")
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-reset-enabled-baseline-input-enabled-baseline-identifier
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-reset-enabled-baseline-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'reset-enabled-baseline-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'reset-enabled-baseline-input
                    'make-reset-enabled-baseline-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reset-enabled-baseline-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reset-enabled-baseline-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enabled-baseline-identifier))
      (common-lisp:list
       (common-lisp:cons "enabledBaselineIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reset-enabled-baseline-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass reset-enabled-baseline-output common-lisp:nil
                       ((operation-identifier :initarg :operation-identifier
                         :initform
                         (common-lisp:error ":operationidentifier is required")
                         :type
                         (common-lisp:or operation-identifier common-lisp:null)
                         :accessor
                         struct-shape-reset-enabled-baseline-output-operation-identifier
                         :shape "OperationIdentifier" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-reset-enabled-baseline-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'reset-enabled-baseline-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'reset-enabled-baseline-output
                    'make-reset-enabled-baseline-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reset-enabled-baseline-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reset-enabled-baseline-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'operation-identifier))
      (common-lisp:list
       (common-lisp:cons "operationIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reset-enabled-baseline-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass reset-landing-zone-input common-lisp:nil
                       ((landing-zone-identifier :initarg
                         :landing-zone-identifier :initform
                         (common-lisp:error
                          ":landingzoneidentifier is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-reset-landing-zone-input-landing-zone-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-reset-landing-zone-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'reset-landing-zone-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'reset-landing-zone-input 'make-reset-landing-zone-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reset-landing-zone-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reset-landing-zone-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'landing-zone-identifier))
      (common-lisp:list
       (common-lisp:cons "landingZoneIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reset-landing-zone-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass reset-landing-zone-output common-lisp:nil
                       ((operation-identifier :initarg :operation-identifier
                         :initform
                         (common-lisp:error ":operationidentifier is required")
                         :type
                         (common-lisp:or operation-identifier common-lisp:null)
                         :accessor
                         struct-shape-reset-landing-zone-output-operation-identifier
                         :shape "OperationIdentifier" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-reset-landing-zone-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'reset-landing-zone-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'reset-landing-zone-output
                    'make-reset-landing-zone-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reset-landing-zone-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reset-landing-zone-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'operation-identifier))
      (common-lisp:list
       (common-lisp:cons "operationIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reset-landing-zone-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-exception
     (controltower-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'resource-not-found-exception
                    'resource-not-found-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition service-quota-exceeded-exception
     (controltower-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       service-quota-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'service-quota-exceeded-exception
                    'service-quota-exceeded-exception-message)))
(common-lisp:deftype string () 'common-lisp:string)
(common-lisp:deftype synthetic-timestamp-date-time () 'common-lisp:string)
(common-lisp:deftype tag-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tag-keys () '(trivial-types:proper-list tag-key))
 (common-lisp:defun make-tag-keys
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype tag-map () 'common-lisp:hash-table)
 (common-lisp:defun make-tag-map (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defclass tag-resource-input common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resourcearn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-tag-resource-input-resource-arn :shape
                         "Arn" :location "uri" :location-name "resourceArn")
                        (tags :initarg :tags :initform
                         (common-lisp:error ":tags is required") :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         struct-shape-tag-resource-input-tags :shape "TagMap"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tag-resource-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'tag-resource-input 'make-tag-resource-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass tag-resource-output common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tag-resource-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'tag-resource-output 'make-tag-resource-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-output))
   common-lisp:nil))
(common-lisp:deftype tag-value () 'common-lisp:string)
(common-lisp:deftype target-identifier () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype target-regions () '(trivial-types:proper-list region))
 (common-lisp:defun make-target-regions
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list region))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition throttling-exception
     (controltower-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       throttling-exception-message)
      (quota-code :initarg :quota-code :initform common-lisp:nil :reader
       throttling-exception-quota-code)
      (retry-after-seconds :initarg :retry-after-seconds :initform
       common-lisp:nil :reader throttling-exception-retry-after-seconds)
      (service-code :initarg :service-code :initform common-lisp:nil :reader
       throttling-exception-service-code)))
 (common-lisp:export
  (common-lisp:list 'throttling-exception 'throttling-exception-message
                    'throttling-exception-quota-code
                    'throttling-exception-retry-after-seconds
                    'throttling-exception-service-code)))
(common-lisp:deftype timestamp () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass untag-resource-input common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resourcearn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-untag-resource-input-resource-arn :shape
                         "Arn" :location "uri" :location-name "resourceArn")
                        (tag-keys :initarg :tag-keys :initform
                         (common-lisp:error ":tagkeys is required") :type
                         (common-lisp:or tag-keys common-lisp:null) :accessor
                         struct-shape-untag-resource-input-tag-keys :shape
                         "TagKeys" :location "querystring" :location-name
                         "tagKeys"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-untag-resource-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'untag-resource-input 'make-untag-resource-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input untag-resource-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input untag-resource-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input untag-resource-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass untag-resource-output common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-untag-resource-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'untag-resource-output 'make-untag-resource-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-enabled-baseline-input common-lisp:nil
                       ((baseline-version :initarg :baseline-version :initform
                         (common-lisp:error ":baselineversion is required")
                         :type
                         (common-lisp:or baseline-version common-lisp:null)
                         :accessor
                         struct-shape-update-enabled-baseline-input-baseline-version
                         :shape "BaselineVersion" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (enabled-baseline-identifier :initarg
                         :enabled-baseline-identifier :initform
                         (common-lisp:error
                          ":enabledbaselineidentifier is required")
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-update-enabled-baseline-input-enabled-baseline-identifier
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-enabled-baseline-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-enabled-baseline-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-enabled-baseline-input
                    'make-update-enabled-baseline-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-enabled-baseline-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-enabled-baseline-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'baseline-version))
      (common-lisp:list
       (common-lisp:cons "baselineVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enabled-baseline-identifier))
      (common-lisp:list
       (common-lisp:cons "enabledBaselineIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-enabled-baseline-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-enabled-baseline-output common-lisp:nil
                       ((operation-identifier :initarg :operation-identifier
                         :initform
                         (common-lisp:error ":operationidentifier is required")
                         :type
                         (common-lisp:or operation-identifier common-lisp:null)
                         :accessor
                         struct-shape-update-enabled-baseline-output-operation-identifier
                         :shape "OperationIdentifier" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-enabled-baseline-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-enabled-baseline-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-enabled-baseline-output
                    'make-update-enabled-baseline-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-enabled-baseline-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-enabled-baseline-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'operation-identifier))
      (common-lisp:list
       (common-lisp:cons "operationIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-enabled-baseline-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-enabled-control-output common-lisp:nil
                       ((operation-identifier :initarg :operation-identifier
                         :initform
                         (common-lisp:error ":operationidentifier is required")
                         :type
                         (common-lisp:or operation-identifier common-lisp:null)
                         :accessor
                         struct-shape-update-enabled-control-output-operation-identifier
                         :shape "OperationIdentifier" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-enabled-control-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-enabled-control-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-enabled-control-output
                    'make-update-enabled-control-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-enabled-control-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-enabled-control-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'operation-identifier))
      (common-lisp:list
       (common-lisp:cons "operationIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-enabled-control-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-landing-zone-output common-lisp:nil
                       ((operation-identifier :initarg :operation-identifier
                         :initform
                         (common-lisp:error ":operationidentifier is required")
                         :type
                         (common-lisp:or operation-identifier common-lisp:null)
                         :accessor
                         struct-shape-update-landing-zone-output-operation-identifier
                         :shape "OperationIdentifier" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-landing-zone-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-landing-zone-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-landing-zone-output
                    'make-update-landing-zone-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-landing-zone-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-landing-zone-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'operation-identifier))
      (common-lisp:list
       (common-lisp:cons "operationIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-landing-zone-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition validation-exception
     (controltower-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       validation-exception-message)))
 (common-lisp:export
  (common-lisp:list 'validation-exception 'validation-exception-message)))
(common-lisp:progn
 (common-lisp:defun delete-landing-zone
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key landing-zone-identifier)
   (common-lisp:declare (common-lisp:ignorable landing-zone-identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-landing-zone-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'controltower-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/delete-landingzone"
                                                        "DeleteLandingZone"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-landing-zone))
(common-lisp:progn
 (common-lisp:defun disable-baseline
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key enabled-baseline-identifier)
   (common-lisp:declare (common-lisp:ignorable enabled-baseline-identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-disable-baseline-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'controltower-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/disable-baseline"
                                                        "DisableBaseline"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'disable-baseline))
(common-lisp:progn
 (common-lisp:defun disable-control
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key control-identifier target-identifier)
   (common-lisp:declare
    (common-lisp:ignorable control-identifier target-identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-disable-control-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'controltower-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/disable-control"
                                                        "DisableControl"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'disable-control))
(common-lisp:progn
 (common-lisp:defun enable-baseline
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key baseline-identifier baseline-version tags
                     target-identifier)
   (common-lisp:declare
    (common-lisp:ignorable baseline-identifier baseline-version tags
     target-identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-enable-baseline-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'controltower-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/enable-baseline"
                                                        "EnableBaseline"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'enable-baseline))
(common-lisp:progn
 (common-lisp:defun enable-control
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key control-identifier tags
                     target-identifier)
   (common-lisp:declare
    (common-lisp:ignorable control-identifier tags target-identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-enable-control-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'controltower-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/enable-control"
                                                        "EnableControl"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'enable-control))
(common-lisp:progn
 (common-lisp:defun get-baseline
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key baseline-identifier)
   (common-lisp:declare (common-lisp:ignorable baseline-identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-baseline-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'controltower-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/get-baseline"
                                                        "GetBaseline"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-baseline))
(common-lisp:progn
 (common-lisp:defun get-baseline-operation
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key operation-identifier)
   (common-lisp:declare (common-lisp:ignorable operation-identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-baseline-operation-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'controltower-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/get-baseline-operation"
                                                        "GetBaselineOperation"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-baseline-operation))
(common-lisp:progn
 (common-lisp:defun get-control-operation
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key operation-identifier)
   (common-lisp:declare (common-lisp:ignorable operation-identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-control-operation-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'controltower-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/get-control-operation"
                                                        "GetControlOperation"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-control-operation))
(common-lisp:progn
 (common-lisp:defun get-enabled-baseline
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key enabled-baseline-identifier)
   (common-lisp:declare (common-lisp:ignorable enabled-baseline-identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-enabled-baseline-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'controltower-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/get-enabled-baseline"
                                                        "GetEnabledBaseline"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-enabled-baseline))
(common-lisp:progn
 (common-lisp:defun get-enabled-control
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key enabled-control-identifier)
   (common-lisp:declare (common-lisp:ignorable enabled-control-identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-enabled-control-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'controltower-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/get-enabled-control"
                                                        "GetEnabledControl"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-enabled-control))
(common-lisp:progn
 (common-lisp:defun get-landing-zone-operation
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key operation-identifier)
   (common-lisp:declare (common-lisp:ignorable operation-identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-landing-zone-operation-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'controltower-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/get-landingzone-operation"
                                                        "GetLandingZoneOperation"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-landing-zone-operation))
(common-lisp:progn
 (common-lisp:defun list-baselines
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-baselines-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'controltower-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/list-baselines"
                                                        "ListBaselines"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-baselines))
(common-lisp:progn
 (common-lisp:defun list-enabled-baselines
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key filter max-results next-token)
   (common-lisp:declare (common-lisp:ignorable filter max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-enabled-baselines-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'controltower-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/list-enabled-baselines"
                                                        "ListEnabledBaselines"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-enabled-baselines))
(common-lisp:progn
 (common-lisp:defun list-enabled-controls
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token target-identifier)
   (common-lisp:declare
    (common-lisp:ignorable max-results next-token target-identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-enabled-controls-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'controltower-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/list-enabled-controls"
                                                        "ListEnabledControls"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-enabled-controls))
(common-lisp:progn
 (common-lisp:defun list-landing-zones
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-landing-zones-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'controltower-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/list-landingzones"
                                                        "ListLandingZones"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-landing-zones))
(common-lisp:progn
 (common-lisp:defun list-tags-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn)
   (common-lisp:declare (common-lisp:ignorable resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-for-resource-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'controltower-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "ListTagsForResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-tags-for-resource))
(common-lisp:progn
 (common-lisp:defun reset-enabled-baseline
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key enabled-baseline-identifier)
   (common-lisp:declare (common-lisp:ignorable enabled-baseline-identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-reset-enabled-baseline-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'controltower-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/reset-enabled-baseline"
                                                        "ResetEnabledBaseline"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'reset-enabled-baseline))
(common-lisp:progn
 (common-lisp:defun reset-landing-zone
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key landing-zone-identifier)
   (common-lisp:declare (common-lisp:ignorable landing-zone-identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-reset-landing-zone-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'controltower-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/reset-landingzone"
                                                        "ResetLandingZone"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'reset-landing-zone))
(common-lisp:progn
 (common-lisp:defun tag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tags)
   (common-lisp:declare (common-lisp:ignorable resource-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-resource-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'controltower-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "TagResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'tag-resource))
(common-lisp:progn
 (common-lisp:defun untag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tag-keys)
   (common-lisp:declare (common-lisp:ignorable resource-arn tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-resource-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'controltower-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "UntagResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'untag-resource))
(common-lisp:progn
 (common-lisp:defun update-enabled-baseline
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key baseline-version
                     enabled-baseline-identifier)
   (common-lisp:declare
    (common-lisp:ignorable baseline-version enabled-baseline-identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-enabled-baseline-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'controltower-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/update-enabled-baseline"
                                                        "UpdateEnabledBaseline"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-enabled-baseline))
