;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/marketplace-catalog/api
  (:use)
  (:nicknames #:aws/marketplace-catalog)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/json-request)
  (:import-from #:aws-sdk/rest-json-request)
  (:import-from #:aws-sdk/rest-xml-request)
  (:import-from #:aws-sdk/query-request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/marketplace-catalog/api)
(common-lisp:progn
 (common-lisp:define-condition marketplace-catalog-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'marketplace-catalog-error))
(common-lisp:progn
 (common-lisp:defclass marketplace-catalog-request
                       (aws-sdk/generator/service::rest-json-request)
                       common-lisp:nil
                       (:default-initargs :service "marketplace-catalog"
                        :api-version "2018-09-17" :host-prefix
                        "catalog.marketplace" :signing-name "aws-marketplace"
                        :global-host common-lisp:nil))
 (common-lisp:export 'marketplace-catalog-request))
(common-lisp:defvar *error-map*
  '(("AccessDeniedException" . access-denied-exception)
    ("InternalServiceException" . internal-service-exception)
    ("ResourceInUseException" . resource-in-use-exception)
    ("ResourceNotFoundException" . resource-not-found-exception)
    ("ResourceNotSupportedException" . resource-not-supported-exception)
    ("ServiceQuotaExceededException" . service-quota-exceeded-exception)
    ("ThrottlingException" . throttling-exception)
    ("ValidationException" . validation-exception)))
(common-lisp:deftype arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition access-denied-exception
     (marketplace-catalog-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       access-denied-exception-message)))
 (common-lisp:export
  (common-lisp:list 'access-denied-exception 'access-denied-exception-message)))
(common-lisp:progn
 (common-lisp:defclass ami-product-entity-id-filter common-lisp:nil
                       ((value-list :initarg :value-list :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          ami-product-entity-id-filter-value-list
                          common-lisp:null)
                         :accessor
                         struct-shape-ami-product-entity-id-filter-value-list
                         :shape "AmiProductEntityIdFilterValueList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-ami-product-entity-id-filter
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'ami-product-entity-id-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'ami-product-entity-id-filter
                    'make-ami-product-entity-id-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          ami-product-entity-id-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          ami-product-entity-id-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value-list))
      (common-lisp:list
       (common-lisp:cons "ValueList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          ami-product-entity-id-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype ami-product-entity-id-filter-value-list ()
   '(trivial-types:proper-list ami-product-entity-id-string))
 (common-lisp:defun make-ami-product-entity-id-filter-value-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            ami-product-entity-id-string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype ami-product-entity-id-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass ami-product-filters common-lisp:nil
                       ((entity-id :initarg :entity-id :initform
                         common-lisp:nil :type
                         (common-lisp:or ami-product-entity-id-filter
                                         common-lisp:null)
                         :accessor struct-shape-ami-product-filters-entity-id
                         :shape "AmiProductEntityIdFilter" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (last-modified-date :initarg :last-modified-date
                         :initform common-lisp:nil :type
                         (common-lisp:or ami-product-last-modified-date-filter
                                         common-lisp:null)
                         :accessor
                         struct-shape-ami-product-filters-last-modified-date
                         :shape "AmiProductLastModifiedDateFilter" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (product-title :initarg :product-title :initform
                         common-lisp:nil :type
                         (common-lisp:or ami-product-title-filter
                                         common-lisp:null)
                         :accessor
                         struct-shape-ami-product-filters-product-title :shape
                         "AmiProductTitleFilter" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (visibility :initarg :visibility :initform
                         common-lisp:nil :type
                         (common-lisp:or ami-product-visibility-filter
                                         common-lisp:null)
                         :accessor struct-shape-ami-product-filters-visibility
                         :shape "AmiProductVisibilityFilter" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-ami-product-filters
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'ami-product-filters
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'ami-product-filters 'make-ami-product-filters))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input ami-product-filters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input ami-product-filters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entity-id))
      (common-lisp:list
       (common-lisp:cons "EntityId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-date))
      (common-lisp:list
       (common-lisp:cons "LastModifiedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'product-title))
      (common-lisp:list
       (common-lisp:cons "ProductTitle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'visibility))
      (common-lisp:list
       (common-lisp:cons "Visibility"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input ami-product-filters))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass ami-product-last-modified-date-filter common-lisp:nil
                       ((date-range :initarg :date-range :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          ami-product-last-modified-date-filter-date-range
                          common-lisp:null)
                         :accessor
                         struct-shape-ami-product-last-modified-date-filter-date-range
                         :shape "AmiProductLastModifiedDateFilterDateRange"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-ami-product-last-modified-date-filter
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'ami-product-last-modified-date-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'ami-product-last-modified-date-filter
                    'make-ami-product-last-modified-date-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          ami-product-last-modified-date-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          ami-product-last-modified-date-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'date-range))
      (common-lisp:list
       (common-lisp:cons "DateRange"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          ami-product-last-modified-date-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass ami-product-last-modified-date-filter-date-range
                       common-lisp:nil
                       ((after-value :initarg :after-value :initform
                         common-lisp:nil :type
                         (common-lisp:or date-time-iso8601 common-lisp:null)
                         :accessor
                         struct-shape-ami-product-last-modified-date-filter-date-range-after-value
                         :shape "DateTimeISO8601" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (before-value :initarg :before-value :initform
                         common-lisp:nil :type
                         (common-lisp:or date-time-iso8601 common-lisp:null)
                         :accessor
                         struct-shape-ami-product-last-modified-date-filter-date-range-before-value
                         :shape "DateTimeISO8601" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-ami-product-last-modified-date-filter-date-range
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'ami-product-last-modified-date-filter-date-range
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'ami-product-last-modified-date-filter-date-range
                    'make-ami-product-last-modified-date-filter-date-range))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          ami-product-last-modified-date-filter-date-range))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          ami-product-last-modified-date-filter-date-range))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'after-value))
      (common-lisp:list
       (common-lisp:cons "AfterValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'before-value))
      (common-lisp:list
       (common-lisp:cons "BeforeValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          ami-product-last-modified-date-filter-date-range))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass ami-product-sort common-lisp:nil
                       ((sort-by :initarg :sort-by :initform common-lisp:nil
                         :type
                         (common-lisp:or ami-product-sort-by common-lisp:null)
                         :accessor struct-shape-ami-product-sort-sort-by :shape
                         "AmiProductSortBy" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (sort-order :initarg :sort-order :initform
                         common-lisp:nil :type
                         (common-lisp:or sort-order common-lisp:null) :accessor
                         struct-shape-ami-product-sort-sort-order :shape
                         "SortOrder" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-ami-product-sort
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'ami-product-sort
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'ami-product-sort 'make-ami-product-sort))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input ami-product-sort))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input ami-product-sort))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-by))
      (common-lisp:list
       (common-lisp:cons "SortBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-order))
      (common-lisp:list
       (common-lisp:cons "SortOrder"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input ami-product-sort))
   common-lisp:nil))
(common-lisp:deftype ami-product-sort-by () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass ami-product-summary common-lisp:nil
                       ((product-title :initarg :product-title :initform
                         common-lisp:nil :type
                         (common-lisp:or ami-product-title-string
                                         common-lisp:null)
                         :accessor
                         struct-shape-ami-product-summary-product-title :shape
                         "AmiProductTitleString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (visibility :initarg :visibility :initform
                         common-lisp:nil :type
                         (common-lisp:or ami-product-visibility-string
                                         common-lisp:null)
                         :accessor struct-shape-ami-product-summary-visibility
                         :shape "AmiProductVisibilityString" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-ami-product-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'ami-product-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'ami-product-summary 'make-ami-product-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input ami-product-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input ami-product-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'product-title))
      (common-lisp:list
       (common-lisp:cons "ProductTitle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'visibility))
      (common-lisp:list
       (common-lisp:cons "Visibility"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input ami-product-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass ami-product-title-filter common-lisp:nil
                       ((value-list :initarg :value-list :initform
                         common-lisp:nil :type
                         (common-lisp:or ami-product-title-filter-value-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-ami-product-title-filter-value-list
                         :shape "AmiProductTitleFilterValueList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (wild-card-value :initarg :wild-card-value :initform
                         common-lisp:nil :type
                         (common-lisp:or ami-product-title-string
                                         common-lisp:null)
                         :accessor
                         struct-shape-ami-product-title-filter-wild-card-value
                         :shape "AmiProductTitleString" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-ami-product-title-filter
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'ami-product-title-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'ami-product-title-filter 'make-ami-product-title-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          ami-product-title-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          ami-product-title-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value-list))
      (common-lisp:list
       (common-lisp:cons "ValueList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'wild-card-value))
      (common-lisp:list
       (common-lisp:cons "WildCardValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          ami-product-title-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype ami-product-title-filter-value-list ()
   '(trivial-types:proper-list ami-product-title-string))
 (common-lisp:defun make-ami-product-title-filter-value-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            ami-product-title-string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype ami-product-title-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass ami-product-visibility-filter common-lisp:nil
                       ((value-list :initarg :value-list :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          ami-product-visibility-filter-value-list
                          common-lisp:null)
                         :accessor
                         struct-shape-ami-product-visibility-filter-value-list
                         :shape "AmiProductVisibilityFilterValueList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-ami-product-visibility-filter
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'ami-product-visibility-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'ami-product-visibility-filter
                    'make-ami-product-visibility-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          ami-product-visibility-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          ami-product-visibility-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value-list))
      (common-lisp:list
       (common-lisp:cons "ValueList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          ami-product-visibility-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype ami-product-visibility-filter-value-list ()
   '(trivial-types:proper-list ami-product-visibility-string))
 (common-lisp:defun make-ami-product-visibility-filter-value-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            ami-product-visibility-string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype ami-product-visibility-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass batch-describe-entities-request common-lisp:nil
                       ((entity-request-list :initarg :entity-request-list
                         :initform
                         (common-lisp:error ":entity-request-list is required")
                         :type
                         (common-lisp:or entity-request-list common-lisp:null)
                         :accessor
                         struct-shape-batch-describe-entities-request-entity-request-list
                         :shape "EntityRequestList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-batch-describe-entities-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'batch-describe-entities-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'batch-describe-entities-request
                    'make-batch-describe-entities-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-describe-entities-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-describe-entities-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entity-request-list))
      (common-lisp:list
       (common-lisp:cons "EntityRequestList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-describe-entities-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass batch-describe-entities-response common-lisp:nil
                       ((entity-details :initarg :entity-details :initform
                         common-lisp:nil :type
                         (common-lisp:or entity-details common-lisp:null)
                         :accessor
                         struct-shape-batch-describe-entities-response-entity-details
                         :shape "EntityDetails" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (errors :initarg :errors :initform common-lisp:nil
                         :type (common-lisp:or errors common-lisp:null)
                         :accessor
                         struct-shape-batch-describe-entities-response-errors
                         :shape "Errors" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-batch-describe-entities-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'batch-describe-entities-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'batch-describe-entities-response
                    'make-batch-describe-entities-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-describe-entities-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-describe-entities-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entity-details))
      (common-lisp:list
       (common-lisp:cons "EntityDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'errors))
      (common-lisp:list
       (common-lisp:cons "Errors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-describe-entities-response))
   common-lisp:nil))
(common-lisp:deftype batch-describe-error-code-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass batch-describe-error-detail common-lisp:nil
                       ((error-code :initarg :error-code :initform
                         common-lisp:nil :type
                         (common-lisp:or batch-describe-error-code-string
                                         common-lisp:null)
                         :accessor
                         struct-shape-batch-describe-error-detail-error-code
                         :shape "BatchDescribeErrorCodeString" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (error-message :initarg :error-message :initform
                         common-lisp:nil :type
                         (common-lisp:or batch-describe-error-message-content
                                         common-lisp:null)
                         :accessor
                         struct-shape-batch-describe-error-detail-error-message
                         :shape "BatchDescribeErrorMessageContent" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-batch-describe-error-detail
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'batch-describe-error-detail
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'batch-describe-error-detail
                    'make-batch-describe-error-detail))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-describe-error-detail))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-describe-error-detail))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-code))
      (common-lisp:list
       (common-lisp:cons "ErrorCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-message))
      (common-lisp:list
       (common-lisp:cons "ErrorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-describe-error-detail))
   common-lisp:nil))
(common-lisp:deftype batch-describe-error-message-content ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass cancel-change-set-request common-lisp:nil
                       ((catalog :initarg :catalog :initform
                         (common-lisp:error ":catalog is required") :type
                         (common-lisp:or catalog common-lisp:null) :accessor
                         struct-shape-cancel-change-set-request-catalog :shape
                         "Catalog" :location "querystring" :location-name
                         "catalog")
                        (change-set-id :initarg :change-set-id :initform
                         (common-lisp:error ":change-set-id is required") :type
                         (common-lisp:or resource-id common-lisp:null)
                         :accessor
                         struct-shape-cancel-change-set-request-change-set-id
                         :shape "ResourceId" :location "querystring"
                         :location-name "changeSetId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-cancel-change-set-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'cancel-change-set-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'cancel-change-set-request
                    'make-cancel-change-set-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cancel-change-set-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cancel-change-set-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cancel-change-set-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass cancel-change-set-response common-lisp:nil
                       ((change-set-arn :initarg :change-set-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-cancel-change-set-response-change-set-arn
                         :shape "ARN" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (change-set-id :initarg :change-set-id :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-id common-lisp:null)
                         :accessor
                         struct-shape-cancel-change-set-response-change-set-id
                         :shape "ResourceId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-cancel-change-set-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'cancel-change-set-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'cancel-change-set-response
                    'make-cancel-change-set-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cancel-change-set-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cancel-change-set-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'change-set-arn))
      (common-lisp:list
       (common-lisp:cons "ChangeSetArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'change-set-id))
      (common-lisp:list
       (common-lisp:cons "ChangeSetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cancel-change-set-response))
   common-lisp:nil))
(common-lisp:deftype catalog () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass change common-lisp:nil
                       ((change-name :initarg :change-name :initform
                         common-lisp:nil :type
                         (common-lisp:or change-name common-lisp:null)
                         :accessor struct-shape-change-change-name :shape
                         "ChangeName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (change-type :initarg :change-type :initform
                         (common-lisp:error ":change-type is required") :type
                         (common-lisp:or change-type common-lisp:null)
                         :accessor struct-shape-change-change-type :shape
                         "ChangeType" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (details :initarg :details :initform common-lisp:nil
                         :type (common-lisp:or json common-lisp:null) :accessor
                         struct-shape-change-details :shape "Json" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (entity :initarg :entity :initform
                         (common-lisp:error ":entity is required") :type
                         (common-lisp:or entity common-lisp:null) :accessor
                         struct-shape-change-entity :shape "Entity" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (entity-tags :initarg :entity-tags :initform
                         common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-change-entity-tags :shape "TagList"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-change
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'change
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'change 'make-change))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input change))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input change))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'change-name))
      (common-lisp:list
       (common-lisp:cons "ChangeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'change-type))
      (common-lisp:list
       (common-lisp:cons "ChangeType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'details))
      (common-lisp:list
       (common-lisp:cons "Details"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entity))
      (common-lisp:list
       (common-lisp:cons "Entity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entity-tags))
      (common-lisp:list
       (common-lisp:cons "EntityTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input change))
   common-lisp:nil))
(common-lisp:deftype change-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype change-set-description ()
   '(trivial-types:proper-list change-summary))
 (common-lisp:defun make-change-set-description
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list change-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype change-set-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype change-set-summary-list ()
   '(trivial-types:proper-list change-set-summary-list-item))
 (common-lisp:defun make-change-set-summary-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            change-set-summary-list-item))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass change-set-summary-list-item common-lisp:nil
                       ((change-set-arn :initarg :change-set-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-change-set-summary-list-item-change-set-arn
                         :shape "ARN" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (change-set-id :initarg :change-set-id :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-id common-lisp:null)
                         :accessor
                         struct-shape-change-set-summary-list-item-change-set-id
                         :shape "ResourceId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (change-set-name :initarg :change-set-name :initform
                         common-lisp:nil :type
                         (common-lisp:or change-set-name common-lisp:null)
                         :accessor
                         struct-shape-change-set-summary-list-item-change-set-name
                         :shape "ChangeSetName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (end-time :initarg :end-time :initform common-lisp:nil
                         :type
                         (common-lisp:or date-time-iso8601 common-lisp:null)
                         :accessor
                         struct-shape-change-set-summary-list-item-end-time
                         :shape "DateTimeISO8601" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (entity-id-list :initarg :entity-id-list :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-id-list common-lisp:null)
                         :accessor
                         struct-shape-change-set-summary-list-item-entity-id-list
                         :shape "ResourceIdList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (failure-code :initarg :failure-code :initform
                         common-lisp:nil :type
                         (common-lisp:or failure-code common-lisp:null)
                         :accessor
                         struct-shape-change-set-summary-list-item-failure-code
                         :shape "FailureCode" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (start-time :initarg :start-time :initform
                         common-lisp:nil :type
                         (common-lisp:or date-time-iso8601 common-lisp:null)
                         :accessor
                         struct-shape-change-set-summary-list-item-start-time
                         :shape "DateTimeISO8601" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or change-status common-lisp:null)
                         :accessor
                         struct-shape-change-set-summary-list-item-status
                         :shape "ChangeStatus" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-change-set-summary-list-item
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'change-set-summary-list-item
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'change-set-summary-list-item
                    'make-change-set-summary-list-item))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          change-set-summary-list-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          change-set-summary-list-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'change-set-arn))
      (common-lisp:list
       (common-lisp:cons "ChangeSetArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'change-set-id))
      (common-lisp:list
       (common-lisp:cons "ChangeSetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'change-set-name))
      (common-lisp:list
       (common-lisp:cons "ChangeSetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "EndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entity-id-list))
      (common-lisp:list
       (common-lisp:cons "EntityIdList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-code))
      (common-lisp:list
       (common-lisp:cons "FailureCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "StartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          change-set-summary-list-item))
   common-lisp:nil))
(common-lisp:deftype change-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass change-summary common-lisp:nil
                       ((change-name :initarg :change-name :initform
                         common-lisp:nil :type
                         (common-lisp:or change-name common-lisp:null)
                         :accessor struct-shape-change-summary-change-name
                         :shape "ChangeName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (change-type :initarg :change-type :initform
                         common-lisp:nil :type
                         (common-lisp:or change-type common-lisp:null)
                         :accessor struct-shape-change-summary-change-type
                         :shape "ChangeType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (details :initarg :details :initform common-lisp:nil
                         :type (common-lisp:or json common-lisp:null) :accessor
                         struct-shape-change-summary-details :shape "Json"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (entity :initarg :entity :initform common-lisp:nil
                         :type (common-lisp:or entity common-lisp:null)
                         :accessor struct-shape-change-summary-entity :shape
                         "Entity" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (error-detail-list :initarg :error-detail-list
                         :initform common-lisp:nil :type
                         (common-lisp:or error-detail-list common-lisp:null)
                         :accessor
                         struct-shape-change-summary-error-detail-list :shape
                         "ErrorDetailList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-change-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'change-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'change-summary 'make-change-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input change-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input change-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'change-name))
      (common-lisp:list
       (common-lisp:cons "ChangeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'change-type))
      (common-lisp:list
       (common-lisp:cons "ChangeType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'details))
      (common-lisp:list
       (common-lisp:cons "Details"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entity))
      (common-lisp:list
       (common-lisp:cons "Entity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-detail-list))
      (common-lisp:list
       (common-lisp:cons "ErrorDetailList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input change-summary))
   common-lisp:nil))
(common-lisp:deftype change-type () 'common-lisp:string)
(common-lisp:deftype client-request-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass container-product-entity-id-filter common-lisp:nil
                       ((value-list :initarg :value-list :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          container-product-entity-id-filter-value-list
                          common-lisp:null)
                         :accessor
                         struct-shape-container-product-entity-id-filter-value-list
                         :shape "ContainerProductEntityIdFilterValueList"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-container-product-entity-id-filter
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'container-product-entity-id-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'container-product-entity-id-filter
                    'make-container-product-entity-id-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          container-product-entity-id-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          container-product-entity-id-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value-list))
      (common-lisp:list
       (common-lisp:cons "ValueList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          container-product-entity-id-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype container-product-entity-id-filter-value-list ()
   '(trivial-types:proper-list container-product-entity-id-string))
 (common-lisp:defun make-container-product-entity-id-filter-value-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            container-product-entity-id-string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype container-product-entity-id-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass container-product-filters common-lisp:nil
                       ((entity-id :initarg :entity-id :initform
                         common-lisp:nil :type
                         (common-lisp:or container-product-entity-id-filter
                                         common-lisp:null)
                         :accessor
                         struct-shape-container-product-filters-entity-id
                         :shape "ContainerProductEntityIdFilter" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (last-modified-date :initarg :last-modified-date
                         :initform common-lisp:nil :type
                         (common-lisp:or
                          container-product-last-modified-date-filter
                          common-lisp:null)
                         :accessor
                         struct-shape-container-product-filters-last-modified-date
                         :shape "ContainerProductLastModifiedDateFilter"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (product-title :initarg :product-title :initform
                         common-lisp:nil :type
                         (common-lisp:or container-product-title-filter
                                         common-lisp:null)
                         :accessor
                         struct-shape-container-product-filters-product-title
                         :shape "ContainerProductTitleFilter" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (visibility :initarg :visibility :initform
                         common-lisp:nil :type
                         (common-lisp:or container-product-visibility-filter
                                         common-lisp:null)
                         :accessor
                         struct-shape-container-product-filters-visibility
                         :shape "ContainerProductVisibilityFilter" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-container-product-filters
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'container-product-filters
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'container-product-filters
                    'make-container-product-filters))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          container-product-filters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          container-product-filters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entity-id))
      (common-lisp:list
       (common-lisp:cons "EntityId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-date))
      (common-lisp:list
       (common-lisp:cons "LastModifiedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'product-title))
      (common-lisp:list
       (common-lisp:cons "ProductTitle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'visibility))
      (common-lisp:list
       (common-lisp:cons "Visibility"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          container-product-filters))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass container-product-last-modified-date-filter
                       common-lisp:nil
                       ((date-range :initarg :date-range :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          container-product-last-modified-date-filter-date-range
                          common-lisp:null)
                         :accessor
                         struct-shape-container-product-last-modified-date-filter-date-range
                         :shape
                         "ContainerProductLastModifiedDateFilterDateRange"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-container-product-last-modified-date-filter
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'container-product-last-modified-date-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'container-product-last-modified-date-filter
                    'make-container-product-last-modified-date-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          container-product-last-modified-date-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          container-product-last-modified-date-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'date-range))
      (common-lisp:list
       (common-lisp:cons "DateRange"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          container-product-last-modified-date-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass container-product-last-modified-date-filter-date-range
                       common-lisp:nil
                       ((after-value :initarg :after-value :initform
                         common-lisp:nil :type
                         (common-lisp:or date-time-iso8601 common-lisp:null)
                         :accessor
                         struct-shape-container-product-last-modified-date-filter-date-range-after-value
                         :shape "DateTimeISO8601" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (before-value :initarg :before-value :initform
                         common-lisp:nil :type
                         (common-lisp:or date-time-iso8601 common-lisp:null)
                         :accessor
                         struct-shape-container-product-last-modified-date-filter-date-range-before-value
                         :shape "DateTimeISO8601" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-container-product-last-modified-date-filter-date-range
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'container-product-last-modified-date-filter-date-range
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'container-product-last-modified-date-filter-date-range
                    'make-container-product-last-modified-date-filter-date-range))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          container-product-last-modified-date-filter-date-range))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          container-product-last-modified-date-filter-date-range))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'after-value))
      (common-lisp:list
       (common-lisp:cons "AfterValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'before-value))
      (common-lisp:list
       (common-lisp:cons "BeforeValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          container-product-last-modified-date-filter-date-range))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass container-product-sort common-lisp:nil
                       ((sort-by :initarg :sort-by :initform common-lisp:nil
                         :type
                         (common-lisp:or container-product-sort-by
                                         common-lisp:null)
                         :accessor struct-shape-container-product-sort-sort-by
                         :shape "ContainerProductSortBy" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (sort-order :initarg :sort-order :initform
                         common-lisp:nil :type
                         (common-lisp:or sort-order common-lisp:null) :accessor
                         struct-shape-container-product-sort-sort-order :shape
                         "SortOrder" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-container-product-sort
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'container-product-sort
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'container-product-sort 'make-container-product-sort))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          container-product-sort))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          container-product-sort))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-by))
      (common-lisp:list
       (common-lisp:cons "SortBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-order))
      (common-lisp:list
       (common-lisp:cons "SortOrder"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          container-product-sort))
   common-lisp:nil))
(common-lisp:deftype container-product-sort-by () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass container-product-summary common-lisp:nil
                       ((product-title :initarg :product-title :initform
                         common-lisp:nil :type
                         (common-lisp:or container-product-title-string
                                         common-lisp:null)
                         :accessor
                         struct-shape-container-product-summary-product-title
                         :shape "ContainerProductTitleString" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (visibility :initarg :visibility :initform
                         common-lisp:nil :type
                         (common-lisp:or container-product-visibility-string
                                         common-lisp:null)
                         :accessor
                         struct-shape-container-product-summary-visibility
                         :shape "ContainerProductVisibilityString" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-container-product-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'container-product-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'container-product-summary
                    'make-container-product-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          container-product-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          container-product-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'product-title))
      (common-lisp:list
       (common-lisp:cons "ProductTitle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'visibility))
      (common-lisp:list
       (common-lisp:cons "Visibility"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          container-product-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass container-product-title-filter common-lisp:nil
                       ((value-list :initarg :value-list :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          container-product-title-filter-value-list
                          common-lisp:null)
                         :accessor
                         struct-shape-container-product-title-filter-value-list
                         :shape "ContainerProductTitleFilterValueList"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (wild-card-value :initarg :wild-card-value :initform
                         common-lisp:nil :type
                         (common-lisp:or container-product-title-string
                                         common-lisp:null)
                         :accessor
                         struct-shape-container-product-title-filter-wild-card-value
                         :shape "ContainerProductTitleString" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-container-product-title-filter
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'container-product-title-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'container-product-title-filter
                    'make-container-product-title-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          container-product-title-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          container-product-title-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value-list))
      (common-lisp:list
       (common-lisp:cons "ValueList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'wild-card-value))
      (common-lisp:list
       (common-lisp:cons "WildCardValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          container-product-title-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype container-product-title-filter-value-list ()
   '(trivial-types:proper-list container-product-title-string))
 (common-lisp:defun make-container-product-title-filter-value-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            container-product-title-string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype container-product-title-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass container-product-visibility-filter common-lisp:nil
                       ((value-list :initarg :value-list :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          container-product-visibility-filter-value-list
                          common-lisp:null)
                         :accessor
                         struct-shape-container-product-visibility-filter-value-list
                         :shape "ContainerProductVisibilityFilterValueList"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-container-product-visibility-filter
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'container-product-visibility-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'container-product-visibility-filter
                    'make-container-product-visibility-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          container-product-visibility-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          container-product-visibility-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value-list))
      (common-lisp:list
       (common-lisp:cons "ValueList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          container-product-visibility-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype container-product-visibility-filter-value-list ()
   '(trivial-types:proper-list container-product-visibility-string))
 (common-lisp:defun make-container-product-visibility-filter-value-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            container-product-visibility-string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype container-product-visibility-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass data-product-entity-id-filter common-lisp:nil
                       ((value-list :initarg :value-list :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          data-product-entity-id-filter-value-list
                          common-lisp:null)
                         :accessor
                         struct-shape-data-product-entity-id-filter-value-list
                         :shape "DataProductEntityIdFilterValueList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-data-product-entity-id-filter
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'data-product-entity-id-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'data-product-entity-id-filter
                    'make-data-product-entity-id-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          data-product-entity-id-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          data-product-entity-id-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value-list))
      (common-lisp:list
       (common-lisp:cons "ValueList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          data-product-entity-id-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype data-product-entity-id-filter-value-list ()
   '(trivial-types:proper-list data-product-entity-id-string))
 (common-lisp:defun make-data-product-entity-id-filter-value-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            data-product-entity-id-string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype data-product-entity-id-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass data-product-filters common-lisp:nil
                       ((entity-id :initarg :entity-id :initform
                         common-lisp:nil :type
                         (common-lisp:or data-product-entity-id-filter
                                         common-lisp:null)
                         :accessor struct-shape-data-product-filters-entity-id
                         :shape "DataProductEntityIdFilter" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (last-modified-date :initarg :last-modified-date
                         :initform common-lisp:nil :type
                         (common-lisp:or data-product-last-modified-date-filter
                                         common-lisp:null)
                         :accessor
                         struct-shape-data-product-filters-last-modified-date
                         :shape "DataProductLastModifiedDateFilter" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (product-title :initarg :product-title :initform
                         common-lisp:nil :type
                         (common-lisp:or data-product-title-filter
                                         common-lisp:null)
                         :accessor
                         struct-shape-data-product-filters-product-title :shape
                         "DataProductTitleFilter" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (visibility :initarg :visibility :initform
                         common-lisp:nil :type
                         (common-lisp:or data-product-visibility-filter
                                         common-lisp:null)
                         :accessor struct-shape-data-product-filters-visibility
                         :shape "DataProductVisibilityFilter" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-data-product-filters
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'data-product-filters
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'data-product-filters 'make-data-product-filters))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input data-product-filters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input data-product-filters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entity-id))
      (common-lisp:list
       (common-lisp:cons "EntityId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-date))
      (common-lisp:list
       (common-lisp:cons "LastModifiedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'product-title))
      (common-lisp:list
       (common-lisp:cons "ProductTitle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'visibility))
      (common-lisp:list
       (common-lisp:cons "Visibility"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input data-product-filters))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass data-product-last-modified-date-filter common-lisp:nil
                       ((date-range :initarg :date-range :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          data-product-last-modified-date-filter-date-range
                          common-lisp:null)
                         :accessor
                         struct-shape-data-product-last-modified-date-filter-date-range
                         :shape "DataProductLastModifiedDateFilterDateRange"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-data-product-last-modified-date-filter
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'data-product-last-modified-date-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'data-product-last-modified-date-filter
                    'make-data-product-last-modified-date-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          data-product-last-modified-date-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          data-product-last-modified-date-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'date-range))
      (common-lisp:list
       (common-lisp:cons "DateRange"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          data-product-last-modified-date-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass data-product-last-modified-date-filter-date-range
                       common-lisp:nil
                       ((after-value :initarg :after-value :initform
                         common-lisp:nil :type
                         (common-lisp:or date-time-iso8601 common-lisp:null)
                         :accessor
                         struct-shape-data-product-last-modified-date-filter-date-range-after-value
                         :shape "DateTimeISO8601" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (before-value :initarg :before-value :initform
                         common-lisp:nil :type
                         (common-lisp:or date-time-iso8601 common-lisp:null)
                         :accessor
                         struct-shape-data-product-last-modified-date-filter-date-range-before-value
                         :shape "DateTimeISO8601" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-data-product-last-modified-date-filter-date-range
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'data-product-last-modified-date-filter-date-range
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'data-product-last-modified-date-filter-date-range
                    'make-data-product-last-modified-date-filter-date-range))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          data-product-last-modified-date-filter-date-range))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          data-product-last-modified-date-filter-date-range))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'after-value))
      (common-lisp:list
       (common-lisp:cons "AfterValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'before-value))
      (common-lisp:list
       (common-lisp:cons "BeforeValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          data-product-last-modified-date-filter-date-range))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass data-product-sort common-lisp:nil
                       ((sort-by :initarg :sort-by :initform common-lisp:nil
                         :type
                         (common-lisp:or data-product-sort-by common-lisp:null)
                         :accessor struct-shape-data-product-sort-sort-by
                         :shape "DataProductSortBy" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (sort-order :initarg :sort-order :initform
                         common-lisp:nil :type
                         (common-lisp:or sort-order common-lisp:null) :accessor
                         struct-shape-data-product-sort-sort-order :shape
                         "SortOrder" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-data-product-sort
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'data-product-sort
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'data-product-sort 'make-data-product-sort))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input data-product-sort))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input data-product-sort))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-by))
      (common-lisp:list
       (common-lisp:cons "SortBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-order))
      (common-lisp:list
       (common-lisp:cons "SortOrder"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input data-product-sort))
   common-lisp:nil))
(common-lisp:deftype data-product-sort-by () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass data-product-summary common-lisp:nil
                       ((product-title :initarg :product-title :initform
                         common-lisp:nil :type
                         (common-lisp:or data-product-title-string
                                         common-lisp:null)
                         :accessor
                         struct-shape-data-product-summary-product-title :shape
                         "DataProductTitleString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (visibility :initarg :visibility :initform
                         common-lisp:nil :type
                         (common-lisp:or data-product-visibility-string
                                         common-lisp:null)
                         :accessor struct-shape-data-product-summary-visibility
                         :shape "DataProductVisibilityString" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-data-product-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'data-product-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'data-product-summary 'make-data-product-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input data-product-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input data-product-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'product-title))
      (common-lisp:list
       (common-lisp:cons "ProductTitle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'visibility))
      (common-lisp:list
       (common-lisp:cons "Visibility"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input data-product-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass data-product-title-filter common-lisp:nil
                       ((value-list :initarg :value-list :initform
                         common-lisp:nil :type
                         (common-lisp:or data-product-title-filter-value-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-data-product-title-filter-value-list
                         :shape "DataProductTitleFilterValueList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (wild-card-value :initarg :wild-card-value :initform
                         common-lisp:nil :type
                         (common-lisp:or data-product-title-string
                                         common-lisp:null)
                         :accessor
                         struct-shape-data-product-title-filter-wild-card-value
                         :shape "DataProductTitleString" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-data-product-title-filter
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'data-product-title-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'data-product-title-filter
                    'make-data-product-title-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          data-product-title-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          data-product-title-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value-list))
      (common-lisp:list
       (common-lisp:cons "ValueList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'wild-card-value))
      (common-lisp:list
       (common-lisp:cons "WildCardValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          data-product-title-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype data-product-title-filter-value-list ()
   '(trivial-types:proper-list data-product-title-string))
 (common-lisp:defun make-data-product-title-filter-value-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            data-product-title-string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype data-product-title-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass data-product-visibility-filter common-lisp:nil
                       ((value-list :initarg :value-list :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          data-product-visibility-filter-value-list
                          common-lisp:null)
                         :accessor
                         struct-shape-data-product-visibility-filter-value-list
                         :shape "DataProductVisibilityFilterValueList"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-data-product-visibility-filter
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'data-product-visibility-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'data-product-visibility-filter
                    'make-data-product-visibility-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          data-product-visibility-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          data-product-visibility-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value-list))
      (common-lisp:list
       (common-lisp:cons "ValueList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          data-product-visibility-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype data-product-visibility-filter-value-list ()
   '(trivial-types:proper-list data-product-visibility-string))
 (common-lisp:defun make-data-product-visibility-filter-value-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            data-product-visibility-string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype data-product-visibility-string () 'common-lisp:string)
(common-lisp:deftype date-time-iso8601 () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass delete-resource-policy-request common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resource-arn is required") :type
                         (common-lisp:or resource-arn common-lisp:null)
                         :accessor
                         struct-shape-delete-resource-policy-request-resource-arn
                         :shape "ResourceARN" :location "querystring"
                         :location-name "resourceArn"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-resource-policy-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-resource-policy-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-resource-policy-request
                    'make-delete-resource-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-resource-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-resource-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-resource-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-resource-policy-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-resource-policy-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-resource-policy-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-resource-policy-response
                    'make-delete-resource-policy-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-resource-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-resource-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-resource-policy-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-change-set-request common-lisp:nil
                       ((catalog :initarg :catalog :initform
                         (common-lisp:error ":catalog is required") :type
                         (common-lisp:or catalog common-lisp:null) :accessor
                         struct-shape-describe-change-set-request-catalog
                         :shape "Catalog" :location "querystring"
                         :location-name "catalog")
                        (change-set-id :initarg :change-set-id :initform
                         (common-lisp:error ":change-set-id is required") :type
                         (common-lisp:or resource-id common-lisp:null)
                         :accessor
                         struct-shape-describe-change-set-request-change-set-id
                         :shape "ResourceId" :location "querystring"
                         :location-name "changeSetId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-change-set-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-change-set-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-change-set-request
                    'make-describe-change-set-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-change-set-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-change-set-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-change-set-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-change-set-response common-lisp:nil
                       ((change-set :initarg :change-set :initform
                         common-lisp:nil :type
                         (common-lisp:or change-set-description
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-change-set-response-change-set
                         :shape "ChangeSetDescription" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (change-set-arn :initarg :change-set-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-describe-change-set-response-change-set-arn
                         :shape "ARN" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (change-set-id :initarg :change-set-id :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-id common-lisp:null)
                         :accessor
                         struct-shape-describe-change-set-response-change-set-id
                         :shape "ResourceId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (change-set-name :initarg :change-set-name :initform
                         common-lisp:nil :type
                         (common-lisp:or change-set-name common-lisp:null)
                         :accessor
                         struct-shape-describe-change-set-response-change-set-name
                         :shape "ChangeSetName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (end-time :initarg :end-time :initform common-lisp:nil
                         :type
                         (common-lisp:or date-time-iso8601 common-lisp:null)
                         :accessor
                         struct-shape-describe-change-set-response-end-time
                         :shape "DateTimeISO8601" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (failure-code :initarg :failure-code :initform
                         common-lisp:nil :type
                         (common-lisp:or failure-code common-lisp:null)
                         :accessor
                         struct-shape-describe-change-set-response-failure-code
                         :shape "FailureCode" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (failure-description :initarg :failure-description
                         :initform common-lisp:nil :type
                         (common-lisp:or exception-message-content
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-change-set-response-failure-description
                         :shape "ExceptionMessageContent" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (intent :initarg :intent :initform common-lisp:nil
                         :type (common-lisp:or intent common-lisp:null)
                         :accessor
                         struct-shape-describe-change-set-response-intent
                         :shape "Intent" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (start-time :initarg :start-time :initform
                         common-lisp:nil :type
                         (common-lisp:or date-time-iso8601 common-lisp:null)
                         :accessor
                         struct-shape-describe-change-set-response-start-time
                         :shape "DateTimeISO8601" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or change-status common-lisp:null)
                         :accessor
                         struct-shape-describe-change-set-response-status
                         :shape "ChangeStatus" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-change-set-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-change-set-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-change-set-response
                    'make-describe-change-set-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-change-set-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-change-set-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'change-set))
      (common-lisp:list
       (common-lisp:cons "ChangeSet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'change-set-arn))
      (common-lisp:list
       (common-lisp:cons "ChangeSetArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'change-set-id))
      (common-lisp:list
       (common-lisp:cons "ChangeSetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'change-set-name))
      (common-lisp:list
       (common-lisp:cons "ChangeSetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "EndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-code))
      (common-lisp:list
       (common-lisp:cons "FailureCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-description))
      (common-lisp:list
       (common-lisp:cons "FailureDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'intent))
      (common-lisp:list
       (common-lisp:cons "Intent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "StartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-change-set-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-entity-request common-lisp:nil
                       ((catalog :initarg :catalog :initform
                         (common-lisp:error ":catalog is required") :type
                         (common-lisp:or catalog common-lisp:null) :accessor
                         struct-shape-describe-entity-request-catalog :shape
                         "Catalog" :location "querystring" :location-name
                         "catalog")
                        (entity-id :initarg :entity-id :initform
                         (common-lisp:error ":entity-id is required") :type
                         (common-lisp:or resource-id common-lisp:null)
                         :accessor
                         struct-shape-describe-entity-request-entity-id :shape
                         "ResourceId" :location "querystring" :location-name
                         "entityId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-entity-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-entity-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-entity-request 'make-describe-entity-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-entity-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-entity-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-entity-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-entity-response common-lisp:nil
                       ((details :initarg :details :initform common-lisp:nil
                         :type (common-lisp:or json common-lisp:null) :accessor
                         struct-shape-describe-entity-response-details :shape
                         "Json" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (entity-arn :initarg :entity-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-describe-entity-response-entity-arn
                         :shape "ARN" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (entity-identifier :initarg :entity-identifier
                         :initform common-lisp:nil :type
                         (common-lisp:or identifier common-lisp:null) :accessor
                         struct-shape-describe-entity-response-entity-identifier
                         :shape "Identifier" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (entity-type :initarg :entity-type :initform
                         common-lisp:nil :type
                         (common-lisp:or entity-type common-lisp:null)
                         :accessor
                         struct-shape-describe-entity-response-entity-type
                         :shape "EntityType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-modified-date :initarg :last-modified-date
                         :initform common-lisp:nil :type
                         (common-lisp:or date-time-iso8601 common-lisp:null)
                         :accessor
                         struct-shape-describe-entity-response-last-modified-date
                         :shape "DateTimeISO8601" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-entity-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-entity-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-entity-response 'make-describe-entity-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-entity-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-entity-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'details))
      (common-lisp:list
       (common-lisp:cons "Details"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entity-arn))
      (common-lisp:list
       (common-lisp:cons "EntityArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entity-identifier))
      (common-lisp:list
       (common-lisp:cons "EntityIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entity-type))
      (common-lisp:list
       (common-lisp:cons "EntityType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-date))
      (common-lisp:list
       (common-lisp:cons "LastModifiedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-entity-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass entity common-lisp:nil
                       ((identifier :initarg :identifier :initform
                         common-lisp:nil :type
                         (common-lisp:or identifier common-lisp:null) :accessor
                         struct-shape-entity-identifier :shape "Identifier"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (type :initarg :type :initform
                         (common-lisp:error ":type is required") :type
                         (common-lisp:or entity-type common-lisp:null)
                         :accessor struct-shape-entity-type :shape "EntityType"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-entity
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'entity
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'entity 'make-entity))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input entity))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input entity))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identifier))
      (common-lisp:list
       (common-lisp:cons "Identifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input entity))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass entity-detail common-lisp:nil
                       ((entity-arn :initarg :entity-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-entity-detail-entity-arn :shape "ARN"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (entity-identifier :initarg :entity-identifier
                         :initform common-lisp:nil :type
                         (common-lisp:or identifier common-lisp:null) :accessor
                         struct-shape-entity-detail-entity-identifier :shape
                         "Identifier" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (entity-type :initarg :entity-type :initform
                         common-lisp:nil :type
                         (common-lisp:or entity-type common-lisp:null)
                         :accessor struct-shape-entity-detail-entity-type
                         :shape "EntityType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-modified-date :initarg :last-modified-date
                         :initform common-lisp:nil :type
                         (common-lisp:or date-time-iso8601 common-lisp:null)
                         :accessor
                         struct-shape-entity-detail-last-modified-date :shape
                         "DateTimeISO8601" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-entity-detail
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'entity-detail
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'entity-detail 'make-entity-detail))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input entity-detail))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input entity-detail))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entity-arn))
      (common-lisp:list
       (common-lisp:cons "EntityArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entity-identifier))
      (common-lisp:list
       (common-lisp:cons "EntityIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entity-type))
      (common-lisp:list
       (common-lisp:cons "EntityType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-date))
      (common-lisp:list
       (common-lisp:cons "LastModifiedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input entity-detail))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype entity-details () 'common-lisp:hash-table)
 (common-lisp:defun make-entity-details (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype entity-id () 'common-lisp:string)
(common-lisp:deftype entity-name-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass entity-request common-lisp:nil
                       ((catalog :initarg :catalog :initform
                         (common-lisp:error ":catalog is required") :type
                         (common-lisp:or catalog common-lisp:null) :accessor
                         struct-shape-entity-request-catalog :shape "Catalog"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (entity-id :initarg :entity-id :initform
                         (common-lisp:error ":entity-id is required") :type
                         (common-lisp:or entity-id common-lisp:null) :accessor
                         struct-shape-entity-request-entity-id :shape
                         "EntityId" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-entity-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'entity-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'entity-request 'make-entity-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input entity-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input entity-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog))
      (common-lisp:list
       (common-lisp:cons "Catalog"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entity-id))
      (common-lisp:list
       (common-lisp:cons "EntityId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input entity-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype entity-request-list ()
   '(trivial-types:proper-list entity-request))
 (common-lisp:defun make-entity-request-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list entity-request))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass entity-summary common-lisp:nil
                       ((ami-product-summary :initarg :ami-product-summary
                         :initform common-lisp:nil :type
                         (common-lisp:or ami-product-summary common-lisp:null)
                         :accessor
                         struct-shape-entity-summary-ami-product-summary :shape
                         "AmiProductSummary" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (container-product-summary :initarg
                         :container-product-summary :initform common-lisp:nil
                         :type
                         (common-lisp:or container-product-summary
                                         common-lisp:null)
                         :accessor
                         struct-shape-entity-summary-container-product-summary
                         :shape "ContainerProductSummary" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (data-product-summary :initarg :data-product-summary
                         :initform common-lisp:nil :type
                         (common-lisp:or data-product-summary common-lisp:null)
                         :accessor
                         struct-shape-entity-summary-data-product-summary
                         :shape "DataProductSummary" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (entity-arn :initarg :entity-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-entity-summary-entity-arn :shape "ARN"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (entity-id :initarg :entity-id :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-id common-lisp:null)
                         :accessor struct-shape-entity-summary-entity-id :shape
                         "ResourceId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (entity-type :initarg :entity-type :initform
                         common-lisp:nil :type
                         (common-lisp:or entity-type common-lisp:null)
                         :accessor struct-shape-entity-summary-entity-type
                         :shape "EntityType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-modified-date :initarg :last-modified-date
                         :initform common-lisp:nil :type
                         (common-lisp:or date-time-iso8601 common-lisp:null)
                         :accessor
                         struct-shape-entity-summary-last-modified-date :shape
                         "DateTimeISO8601" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or entity-name-string common-lisp:null)
                         :accessor struct-shape-entity-summary-name :shape
                         "EntityNameString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (offer-summary :initarg :offer-summary :initform
                         common-lisp:nil :type
                         (common-lisp:or offer-summary common-lisp:null)
                         :accessor struct-shape-entity-summary-offer-summary
                         :shape "OfferSummary" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (resale-authorization-summary :initarg
                         :resale-authorization-summary :initform
                         common-lisp:nil :type
                         (common-lisp:or resale-authorization-summary
                                         common-lisp:null)
                         :accessor
                         struct-shape-entity-summary-resale-authorization-summary
                         :shape "ResaleAuthorizationSummary" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (saa-sproduct-summary :initarg :saa-sproduct-summary
                         :initform common-lisp:nil :type
                         (common-lisp:or saa-sproduct-summary common-lisp:null)
                         :accessor
                         struct-shape-entity-summary-saa-sproduct-summary
                         :shape "SaaSProductSummary" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (visibility :initarg :visibility :initform
                         common-lisp:nil :type
                         (common-lisp:or visibility-value common-lisp:null)
                         :accessor struct-shape-entity-summary-visibility
                         :shape "VisibilityValue" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-entity-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'entity-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'entity-summary 'make-entity-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input entity-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input entity-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ami-product-summary))
      (common-lisp:list
       (common-lisp:cons "AmiProductSummary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'container-product-summary))
      (common-lisp:list
       (common-lisp:cons "ContainerProductSummary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-product-summary))
      (common-lisp:list
       (common-lisp:cons "DataProductSummary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entity-arn))
      (common-lisp:list
       (common-lisp:cons "EntityArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entity-id))
      (common-lisp:list
       (common-lisp:cons "EntityId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entity-type))
      (common-lisp:list
       (common-lisp:cons "EntityType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-date))
      (common-lisp:list
       (common-lisp:cons "LastModifiedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'offer-summary))
      (common-lisp:list
       (common-lisp:cons "OfferSummary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resale-authorization-summary))
      (common-lisp:list
       (common-lisp:cons "ResaleAuthorizationSummary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'saa-sproduct-summary))
      (common-lisp:list
       (common-lisp:cons "SaaSProductSummary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'visibility))
      (common-lisp:list
       (common-lisp:cons "Visibility"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input entity-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype entity-summary-list ()
   '(trivial-types:proper-list entity-summary))
 (common-lisp:defun make-entity-summary-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list entity-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype entity-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass entity-type-filters common-lisp:nil
                       ((ami-product-filters :initarg :ami-product-filters
                         :initform common-lisp:nil :type
                         (common-lisp:or ami-product-filters common-lisp:null)
                         :accessor
                         struct-shape-entity-type-filters-ami-product-filters
                         :shape "AmiProductFilters" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (container-product-filters :initarg
                         :container-product-filters :initform common-lisp:nil
                         :type
                         (common-lisp:or container-product-filters
                                         common-lisp:null)
                         :accessor
                         struct-shape-entity-type-filters-container-product-filters
                         :shape "ContainerProductFilters" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (data-product-filters :initarg :data-product-filters
                         :initform common-lisp:nil :type
                         (common-lisp:or data-product-filters common-lisp:null)
                         :accessor
                         struct-shape-entity-type-filters-data-product-filters
                         :shape "DataProductFilters" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (offer-filters :initarg :offer-filters :initform
                         common-lisp:nil :type
                         (common-lisp:or offer-filters common-lisp:null)
                         :accessor
                         struct-shape-entity-type-filters-offer-filters :shape
                         "OfferFilters" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (resale-authorization-filters :initarg
                         :resale-authorization-filters :initform
                         common-lisp:nil :type
                         (common-lisp:or resale-authorization-filters
                                         common-lisp:null)
                         :accessor
                         struct-shape-entity-type-filters-resale-authorization-filters
                         :shape "ResaleAuthorizationFilters" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (saa-sproduct-filters :initarg :saa-sproduct-filters
                         :initform common-lisp:nil :type
                         (common-lisp:or saa-sproduct-filters common-lisp:null)
                         :accessor
                         struct-shape-entity-type-filters-saa-sproduct-filters
                         :shape "SaaSProductFilters" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-entity-type-filters
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'entity-type-filters
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'entity-type-filters 'make-entity-type-filters))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input entity-type-filters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input entity-type-filters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ami-product-filters))
      (common-lisp:list
       (common-lisp:cons "AmiProductFilters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'container-product-filters))
      (common-lisp:list
       (common-lisp:cons "ContainerProductFilters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-product-filters))
      (common-lisp:list
       (common-lisp:cons "DataProductFilters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'offer-filters))
      (common-lisp:list
       (common-lisp:cons "OfferFilters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resale-authorization-filters))
      (common-lisp:list
       (common-lisp:cons "ResaleAuthorizationFilters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'saa-sproduct-filters))
      (common-lisp:list
       (common-lisp:cons "SaaSProductFilters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input entity-type-filters))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass entity-type-sort common-lisp:nil
                       ((ami-product-sort :initarg :ami-product-sort :initform
                         common-lisp:nil :type
                         (common-lisp:or ami-product-sort common-lisp:null)
                         :accessor
                         struct-shape-entity-type-sort-ami-product-sort :shape
                         "AmiProductSort" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (container-product-sort :initarg
                         :container-product-sort :initform common-lisp:nil
                         :type
                         (common-lisp:or container-product-sort
                                         common-lisp:null)
                         :accessor
                         struct-shape-entity-type-sort-container-product-sort
                         :shape "ContainerProductSort" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (data-product-sort :initarg :data-product-sort
                         :initform common-lisp:nil :type
                         (common-lisp:or data-product-sort common-lisp:null)
                         :accessor
                         struct-shape-entity-type-sort-data-product-sort :shape
                         "DataProductSort" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (offer-sort :initarg :offer-sort :initform
                         common-lisp:nil :type
                         (common-lisp:or offer-sort common-lisp:null) :accessor
                         struct-shape-entity-type-sort-offer-sort :shape
                         "OfferSort" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (resale-authorization-sort :initarg
                         :resale-authorization-sort :initform common-lisp:nil
                         :type
                         (common-lisp:or resale-authorization-sort
                                         common-lisp:null)
                         :accessor
                         struct-shape-entity-type-sort-resale-authorization-sort
                         :shape "ResaleAuthorizationSort" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (saa-sproduct-sort :initarg :saa-sproduct-sort
                         :initform common-lisp:nil :type
                         (common-lisp:or saa-sproduct-sort common-lisp:null)
                         :accessor
                         struct-shape-entity-type-sort-saa-sproduct-sort :shape
                         "SaaSProductSort" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-entity-type-sort
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'entity-type-sort
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'entity-type-sort 'make-entity-type-sort))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input entity-type-sort))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input entity-type-sort))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ami-product-sort))
      (common-lisp:list
       (common-lisp:cons "AmiProductSort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'container-product-sort))
      (common-lisp:list
       (common-lisp:cons "ContainerProductSort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-product-sort))
      (common-lisp:list
       (common-lisp:cons "DataProductSort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'offer-sort))
      (common-lisp:list
       (common-lisp:cons "OfferSort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resale-authorization-sort))
      (common-lisp:list
       (common-lisp:cons "ResaleAuthorizationSort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'saa-sproduct-sort))
      (common-lisp:list
       (common-lisp:cons "SaaSProductSort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input entity-type-sort))
   common-lisp:nil))
(common-lisp:deftype error-code-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass error-detail common-lisp:nil
                       ((error-code :initarg :error-code :initform
                         common-lisp:nil :type
                         (common-lisp:or error-code-string common-lisp:null)
                         :accessor struct-shape-error-detail-error-code :shape
                         "ErrorCodeString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (error-message :initarg :error-message :initform
                         common-lisp:nil :type
                         (common-lisp:or exception-message-content
                                         common-lisp:null)
                         :accessor struct-shape-error-detail-error-message
                         :shape "ExceptionMessageContent" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-error-detail
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'error-detail
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'error-detail 'make-error-detail))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input error-detail))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input error-detail))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-code))
      (common-lisp:list
       (common-lisp:cons "ErrorCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-message))
      (common-lisp:list
       (common-lisp:cons "ErrorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input error-detail))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype error-detail-list ()
   '(trivial-types:proper-list error-detail))
 (common-lisp:defun make-error-detail-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list error-detail))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype errors () 'common-lisp:hash-table)
 (common-lisp:defun make-errors (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype exception-message-content () 'common-lisp:string)
(common-lisp:deftype failure-code () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass filter common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or filter-name common-lisp:null)
                         :accessor struct-shape-filter-name :shape "FilterName"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (value-list :initarg :value-list :initform
                         common-lisp:nil :type
                         (common-lisp:or value-list common-lisp:null) :accessor
                         struct-shape-filter-value-list :shape "ValueList"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-filter
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'filter
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'filter 'make-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value-list))
      (common-lisp:list
       (common-lisp:cons "ValueList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype filter-list () '(trivial-types:proper-list filter))
 (common-lisp:defun make-filter-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list filter))
   aws-sdk/generator/shape::members))
(common-lisp:deftype filter-name () 'common-lisp:string)
(common-lisp:deftype filter-value-content () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass get-resource-policy-request common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resource-arn is required") :type
                         (common-lisp:or resource-arn common-lisp:null)
                         :accessor
                         struct-shape-get-resource-policy-request-resource-arn
                         :shape "ResourceARN" :location "querystring"
                         :location-name "resourceArn"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-resource-policy-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-resource-policy-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-resource-policy-request
                    'make-get-resource-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-resource-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-resource-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-resource-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-resource-policy-response common-lisp:nil
                       ((policy :initarg :policy :initform common-lisp:nil
                         :type
                         (common-lisp:or resource-policy-json common-lisp:null)
                         :accessor
                         struct-shape-get-resource-policy-response-policy
                         :shape "ResourcePolicyJson" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-resource-policy-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-resource-policy-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-resource-policy-response
                    'make-get-resource-policy-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-resource-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-resource-policy-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy))
      (common-lisp:list
       (common-lisp:cons "Policy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-resource-policy-response))
   common-lisp:nil))
(common-lisp:deftype identifier () 'common-lisp:string)
(common-lisp:deftype intent () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition internal-service-exception
     (marketplace-catalog-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       internal-service-exception-message)))
 (common-lisp:export
  (common-lisp:list 'internal-service-exception
                    'internal-service-exception-message)))
(common-lisp:deftype json () 'common-lisp:string)
(common-lisp:deftype list-change-sets-max-result-integer ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass list-change-sets-request common-lisp:nil
                       ((catalog :initarg :catalog :initform
                         (common-lisp:error ":catalog is required") :type
                         (common-lisp:or catalog common-lisp:null) :accessor
                         struct-shape-list-change-sets-request-catalog :shape
                         "Catalog" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (filter-list :initarg :filter-list :initform
                         common-lisp:nil :type
                         (common-lisp:or filter-list common-lisp:null)
                         :accessor
                         struct-shape-list-change-sets-request-filter-list
                         :shape "FilterList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or list-change-sets-max-result-integer
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-change-sets-request-max-results
                         :shape "ListChangeSetsMaxResultInteger" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-change-sets-request-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (sort :initarg :sort :initform common-lisp:nil :type
                         (common-lisp:or sort common-lisp:null) :accessor
                         struct-shape-list-change-sets-request-sort :shape
                         "Sort" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-change-sets-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-change-sets-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-change-sets-request 'make-list-change-sets-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-change-sets-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-change-sets-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog))
      (common-lisp:list
       (common-lisp:cons "Catalog"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter-list))
      (common-lisp:list
       (common-lisp:cons "FilterList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort))
      (common-lisp:list
       (common-lisp:cons "Sort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-change-sets-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-change-sets-response common-lisp:nil
                       ((change-set-summary-list :initarg
                         :change-set-summary-list :initform common-lisp:nil
                         :type
                         (common-lisp:or change-set-summary-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-change-sets-response-change-set-summary-list
                         :shape "ChangeSetSummaryList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-change-sets-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-change-sets-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-change-sets-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-change-sets-response
                    'make-list-change-sets-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-change-sets-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-change-sets-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'change-set-summary-list))
      (common-lisp:list
       (common-lisp:cons "ChangeSetSummaryList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-change-sets-response))
   common-lisp:nil))
(common-lisp:deftype list-entities-max-result-integer () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass list-entities-request common-lisp:nil
                       ((catalog :initarg :catalog :initform
                         (common-lisp:error ":catalog is required") :type
                         (common-lisp:or catalog common-lisp:null) :accessor
                         struct-shape-list-entities-request-catalog :shape
                         "Catalog" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (entity-type :initarg :entity-type :initform
                         (common-lisp:error ":entity-type is required") :type
                         (common-lisp:or entity-type common-lisp:null)
                         :accessor
                         struct-shape-list-entities-request-entity-type :shape
                         "EntityType" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (entity-type-filters :initarg :entity-type-filters
                         :initform common-lisp:nil :type
                         (common-lisp:or entity-type-filters common-lisp:null)
                         :accessor
                         struct-shape-list-entities-request-entity-type-filters
                         :shape "EntityTypeFilters" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (entity-type-sort :initarg :entity-type-sort :initform
                         common-lisp:nil :type
                         (common-lisp:or entity-type-sort common-lisp:null)
                         :accessor
                         struct-shape-list-entities-request-entity-type-sort
                         :shape "EntityTypeSort" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (filter-list :initarg :filter-list :initform
                         common-lisp:nil :type
                         (common-lisp:or filter-list common-lisp:null)
                         :accessor
                         struct-shape-list-entities-request-filter-list :shape
                         "FilterList" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or list-entities-max-result-integer
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-entities-request-max-results :shape
                         "ListEntitiesMaxResultInteger" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-entities-request-next-token :shape
                         "NextToken" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (ownership-type :initarg :ownership-type :initform
                         common-lisp:nil :type
                         (common-lisp:or ownership-type common-lisp:null)
                         :accessor
                         struct-shape-list-entities-request-ownership-type
                         :shape "OwnershipType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (sort :initarg :sort :initform common-lisp:nil :type
                         (common-lisp:or sort common-lisp:null) :accessor
                         struct-shape-list-entities-request-sort :shape "Sort"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-entities-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-entities-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-entities-request 'make-list-entities-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-entities-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-entities-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog))
      (common-lisp:list
       (common-lisp:cons "Catalog"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entity-type))
      (common-lisp:list
       (common-lisp:cons "EntityType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entity-type-filters))
      (common-lisp:list
       (common-lisp:cons "EntityTypeFilters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entity-type-sort))
      (common-lisp:list
       (common-lisp:cons "EntityTypeSort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter-list))
      (common-lisp:list
       (common-lisp:cons "FilterList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ownership-type))
      (common-lisp:list
       (common-lisp:cons "OwnershipType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort))
      (common-lisp:list
       (common-lisp:cons "Sort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-entities-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-entities-response common-lisp:nil
                       ((entity-summary-list :initarg :entity-summary-list
                         :initform common-lisp:nil :type
                         (common-lisp:or entity-summary-list common-lisp:null)
                         :accessor
                         struct-shape-list-entities-response-entity-summary-list
                         :shape "EntitySummaryList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-entities-response-next-token :shape
                         "NextToken" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-entities-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-entities-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-entities-response 'make-list-entities-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-entities-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-entities-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entity-summary-list))
      (common-lisp:list
       (common-lisp:cons "EntitySummaryList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-entities-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-request common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resource-arn is required") :type
                         (common-lisp:or resource-arn common-lisp:null)
                         :accessor
                         struct-shape-list-tags-for-resource-request-resource-arn
                         :shape "ResourceARN" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-tags-for-resource-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-request
                    'make-list-tags-for-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-response common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-arn common-lisp:null)
                         :accessor
                         struct-shape-list-tags-for-resource-response-resource-arn
                         :shape "ResourceARN" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-list-tags-for-resource-response-tags
                         :shape "TagList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-tags-for-resource-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-response
                    'make-list-tags-for-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   common-lisp:nil))
(common-lisp:deftype next-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass offer-availability-end-date-filter common-lisp:nil
                       ((date-range :initarg :date-range :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          offer-availability-end-date-filter-date-range
                          common-lisp:null)
                         :accessor
                         struct-shape-offer-availability-end-date-filter-date-range
                         :shape "OfferAvailabilityEndDateFilterDateRange"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-offer-availability-end-date-filter
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'offer-availability-end-date-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'offer-availability-end-date-filter
                    'make-offer-availability-end-date-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          offer-availability-end-date-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          offer-availability-end-date-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'date-range))
      (common-lisp:list
       (common-lisp:cons "DateRange"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          offer-availability-end-date-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass offer-availability-end-date-filter-date-range
                       common-lisp:nil
                       ((after-value :initarg :after-value :initform
                         common-lisp:nil :type
                         (common-lisp:or date-time-iso8601 common-lisp:null)
                         :accessor
                         struct-shape-offer-availability-end-date-filter-date-range-after-value
                         :shape "DateTimeISO8601" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (before-value :initarg :before-value :initform
                         common-lisp:nil :type
                         (common-lisp:or date-time-iso8601 common-lisp:null)
                         :accessor
                         struct-shape-offer-availability-end-date-filter-date-range-before-value
                         :shape "DateTimeISO8601" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-offer-availability-end-date-filter-date-range
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'offer-availability-end-date-filter-date-range
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'offer-availability-end-date-filter-date-range
                    'make-offer-availability-end-date-filter-date-range))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          offer-availability-end-date-filter-date-range))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          offer-availability-end-date-filter-date-range))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'after-value))
      (common-lisp:list
       (common-lisp:cons "AfterValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'before-value))
      (common-lisp:list
       (common-lisp:cons "BeforeValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          offer-availability-end-date-filter-date-range))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass offer-buyer-accounts-filter common-lisp:nil
                       ((wild-card-value :initarg :wild-card-value :initform
                         common-lisp:nil :type
                         (common-lisp:or offer-buyer-accounts-filter-wildcard
                                         common-lisp:null)
                         :accessor
                         struct-shape-offer-buyer-accounts-filter-wild-card-value
                         :shape "OfferBuyerAccountsFilterWildcard" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-offer-buyer-accounts-filter
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'offer-buyer-accounts-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'offer-buyer-accounts-filter
                    'make-offer-buyer-accounts-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          offer-buyer-accounts-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          offer-buyer-accounts-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'wild-card-value))
      (common-lisp:list
       (common-lisp:cons "WildCardValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          offer-buyer-accounts-filter))
   common-lisp:nil))
(common-lisp:deftype offer-buyer-accounts-filter-wildcard ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype offer-buyer-accounts-list ()
   '(trivial-types:proper-list offer-buyer-accounts-string))
 (common-lisp:defun make-offer-buyer-accounts-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            offer-buyer-accounts-string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype offer-buyer-accounts-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass offer-entity-id-filter common-lisp:nil
                       ((value-list :initarg :value-list :initform
                         common-lisp:nil :type
                         (common-lisp:or offer-entity-id-filter-value-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-offer-entity-id-filter-value-list :shape
                         "OfferEntityIdFilterValueList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-offer-entity-id-filter
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'offer-entity-id-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'offer-entity-id-filter 'make-offer-entity-id-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          offer-entity-id-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          offer-entity-id-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value-list))
      (common-lisp:list
       (common-lisp:cons "ValueList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          offer-entity-id-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype offer-entity-id-filter-value-list ()
   '(trivial-types:proper-list offer-entity-id-string))
 (common-lisp:defun make-offer-entity-id-filter-value-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list offer-entity-id-string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype offer-entity-id-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass offer-filters common-lisp:nil
                       ((availability-end-date :initarg :availability-end-date
                         :initform common-lisp:nil :type
                         (common-lisp:or offer-availability-end-date-filter
                                         common-lisp:null)
                         :accessor
                         struct-shape-offer-filters-availability-end-date
                         :shape "OfferAvailabilityEndDateFilter" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (buyer-accounts :initarg :buyer-accounts :initform
                         common-lisp:nil :type
                         (common-lisp:or offer-buyer-accounts-filter
                                         common-lisp:null)
                         :accessor struct-shape-offer-filters-buyer-accounts
                         :shape "OfferBuyerAccountsFilter" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (entity-id :initarg :entity-id :initform
                         common-lisp:nil :type
                         (common-lisp:or offer-entity-id-filter
                                         common-lisp:null)
                         :accessor struct-shape-offer-filters-entity-id :shape
                         "OfferEntityIdFilter" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-modified-date :initarg :last-modified-date
                         :initform common-lisp:nil :type
                         (common-lisp:or offer-last-modified-date-filter
                                         common-lisp:null)
                         :accessor
                         struct-shape-offer-filters-last-modified-date :shape
                         "OfferLastModifiedDateFilter" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or offer-name-filter common-lisp:null)
                         :accessor struct-shape-offer-filters-name :shape
                         "OfferNameFilter" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (product-id :initarg :product-id :initform
                         common-lisp:nil :type
                         (common-lisp:or offer-product-id-filter
                                         common-lisp:null)
                         :accessor struct-shape-offer-filters-product-id :shape
                         "OfferProductIdFilter" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (release-date :initarg :release-date :initform
                         common-lisp:nil :type
                         (common-lisp:or offer-release-date-filter
                                         common-lisp:null)
                         :accessor struct-shape-offer-filters-release-date
                         :shape "OfferReleaseDateFilter" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (state :initarg :state :initform common-lisp:nil :type
                         (common-lisp:or offer-state-filter common-lisp:null)
                         :accessor struct-shape-offer-filters-state :shape
                         "OfferStateFilter" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (targeting :initarg :targeting :initform
                         common-lisp:nil :type
                         (common-lisp:or offer-targeting-filter
                                         common-lisp:null)
                         :accessor struct-shape-offer-filters-targeting :shape
                         "OfferTargetingFilter" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-offer-filters
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'offer-filters
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'offer-filters 'make-offer-filters))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input offer-filters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input offer-filters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'availability-end-date))
      (common-lisp:list
       (common-lisp:cons "AvailabilityEndDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'buyer-accounts))
      (common-lisp:list
       (common-lisp:cons "BuyerAccounts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entity-id))
      (common-lisp:list
       (common-lisp:cons "EntityId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-date))
      (common-lisp:list
       (common-lisp:cons "LastModifiedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'product-id))
      (common-lisp:list
       (common-lisp:cons "ProductId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'release-date))
      (common-lisp:list
       (common-lisp:cons "ReleaseDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'targeting))
      (common-lisp:list
       (common-lisp:cons "Targeting"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input offer-filters))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass offer-last-modified-date-filter common-lisp:nil
                       ((date-range :initarg :date-range :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          offer-last-modified-date-filter-date-range
                          common-lisp:null)
                         :accessor
                         struct-shape-offer-last-modified-date-filter-date-range
                         :shape "OfferLastModifiedDateFilterDateRange"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-offer-last-modified-date-filter
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'offer-last-modified-date-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'offer-last-modified-date-filter
                    'make-offer-last-modified-date-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          offer-last-modified-date-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          offer-last-modified-date-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'date-range))
      (common-lisp:list
       (common-lisp:cons "DateRange"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          offer-last-modified-date-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass offer-last-modified-date-filter-date-range
                       common-lisp:nil
                       ((after-value :initarg :after-value :initform
                         common-lisp:nil :type
                         (common-lisp:or date-time-iso8601 common-lisp:null)
                         :accessor
                         struct-shape-offer-last-modified-date-filter-date-range-after-value
                         :shape "DateTimeISO8601" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (before-value :initarg :before-value :initform
                         common-lisp:nil :type
                         (common-lisp:or date-time-iso8601 common-lisp:null)
                         :accessor
                         struct-shape-offer-last-modified-date-filter-date-range-before-value
                         :shape "DateTimeISO8601" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-offer-last-modified-date-filter-date-range
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'offer-last-modified-date-filter-date-range
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'offer-last-modified-date-filter-date-range
                    'make-offer-last-modified-date-filter-date-range))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          offer-last-modified-date-filter-date-range))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          offer-last-modified-date-filter-date-range))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'after-value))
      (common-lisp:list
       (common-lisp:cons "AfterValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'before-value))
      (common-lisp:list
       (common-lisp:cons "BeforeValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          offer-last-modified-date-filter-date-range))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass offer-name-filter common-lisp:nil
                       ((value-list :initarg :value-list :initform
                         common-lisp:nil :type
                         (common-lisp:or offer-name-filter-value-list
                                         common-lisp:null)
                         :accessor struct-shape-offer-name-filter-value-list
                         :shape "OfferNameFilterValueList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (wild-card-value :initarg :wild-card-value :initform
                         common-lisp:nil :type
                         (common-lisp:or offer-name-string common-lisp:null)
                         :accessor
                         struct-shape-offer-name-filter-wild-card-value :shape
                         "OfferNameString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-offer-name-filter
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'offer-name-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'offer-name-filter 'make-offer-name-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input offer-name-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input offer-name-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value-list))
      (common-lisp:list
       (common-lisp:cons "ValueList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'wild-card-value))
      (common-lisp:list
       (common-lisp:cons "WildCardValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input offer-name-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype offer-name-filter-value-list ()
   '(trivial-types:proper-list offer-name-string))
 (common-lisp:defun make-offer-name-filter-value-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list offer-name-string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype offer-name-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass offer-product-id-filter common-lisp:nil
                       ((value-list :initarg :value-list :initform
                         common-lisp:nil :type
                         (common-lisp:or offer-product-id-filter-value-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-offer-product-id-filter-value-list :shape
                         "OfferProductIdFilterValueList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-offer-product-id-filter
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'offer-product-id-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'offer-product-id-filter 'make-offer-product-id-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          offer-product-id-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          offer-product-id-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value-list))
      (common-lisp:list
       (common-lisp:cons "ValueList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          offer-product-id-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype offer-product-id-filter-value-list ()
   '(trivial-types:proper-list offer-product-id-string))
 (common-lisp:defun make-offer-product-id-filter-value-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list offer-product-id-string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype offer-product-id-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass offer-release-date-filter common-lisp:nil
                       ((date-range :initarg :date-range :initform
                         common-lisp:nil :type
                         (common-lisp:or offer-release-date-filter-date-range
                                         common-lisp:null)
                         :accessor
                         struct-shape-offer-release-date-filter-date-range
                         :shape "OfferReleaseDateFilterDateRange" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-offer-release-date-filter
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'offer-release-date-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'offer-release-date-filter
                    'make-offer-release-date-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          offer-release-date-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          offer-release-date-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'date-range))
      (common-lisp:list
       (common-lisp:cons "DateRange"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          offer-release-date-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass offer-release-date-filter-date-range common-lisp:nil
                       ((after-value :initarg :after-value :initform
                         common-lisp:nil :type
                         (common-lisp:or date-time-iso8601 common-lisp:null)
                         :accessor
                         struct-shape-offer-release-date-filter-date-range-after-value
                         :shape "DateTimeISO8601" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (before-value :initarg :before-value :initform
                         common-lisp:nil :type
                         (common-lisp:or date-time-iso8601 common-lisp:null)
                         :accessor
                         struct-shape-offer-release-date-filter-date-range-before-value
                         :shape "DateTimeISO8601" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-offer-release-date-filter-date-range
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'offer-release-date-filter-date-range
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'offer-release-date-filter-date-range
                    'make-offer-release-date-filter-date-range))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          offer-release-date-filter-date-range))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          offer-release-date-filter-date-range))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'after-value))
      (common-lisp:list
       (common-lisp:cons "AfterValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'before-value))
      (common-lisp:list
       (common-lisp:cons "BeforeValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          offer-release-date-filter-date-range))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass offer-sort common-lisp:nil
                       ((sort-by :initarg :sort-by :initform common-lisp:nil
                         :type (common-lisp:or offer-sort-by common-lisp:null)
                         :accessor struct-shape-offer-sort-sort-by :shape
                         "OfferSortBy" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (sort-order :initarg :sort-order :initform
                         common-lisp:nil :type
                         (common-lisp:or sort-order common-lisp:null) :accessor
                         struct-shape-offer-sort-sort-order :shape "SortOrder"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-offer-sort
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'offer-sort
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'offer-sort 'make-offer-sort))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input offer-sort))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input offer-sort))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-by))
      (common-lisp:list
       (common-lisp:cons "SortBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-order))
      (common-lisp:list
       (common-lisp:cons "SortOrder"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input offer-sort))
   common-lisp:nil))
(common-lisp:deftype offer-sort-by () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass offer-state-filter common-lisp:nil
                       ((value-list :initarg :value-list :initform
                         common-lisp:nil :type
                         (common-lisp:or offer-state-filter-value-list
                                         common-lisp:null)
                         :accessor struct-shape-offer-state-filter-value-list
                         :shape "OfferStateFilterValueList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-offer-state-filter
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'offer-state-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'offer-state-filter 'make-offer-state-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input offer-state-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input offer-state-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value-list))
      (common-lisp:list
       (common-lisp:cons "ValueList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input offer-state-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype offer-state-filter-value-list ()
   '(trivial-types:proper-list offer-state-string))
 (common-lisp:defun make-offer-state-filter-value-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list offer-state-string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype offer-state-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass offer-summary common-lisp:nil
                       ((availability-end-date :initarg :availability-end-date
                         :initform common-lisp:nil :type
                         (common-lisp:or date-time-iso8601 common-lisp:null)
                         :accessor
                         struct-shape-offer-summary-availability-end-date
                         :shape "DateTimeISO8601" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (buyer-accounts :initarg :buyer-accounts :initform
                         common-lisp:nil :type
                         (common-lisp:or offer-buyer-accounts-list
                                         common-lisp:null)
                         :accessor struct-shape-offer-summary-buyer-accounts
                         :shape "OfferBuyerAccountsList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or offer-name-string common-lisp:null)
                         :accessor struct-shape-offer-summary-name :shape
                         "OfferNameString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (product-id :initarg :product-id :initform
                         common-lisp:nil :type
                         (common-lisp:or offer-product-id-string
                                         common-lisp:null)
                         :accessor struct-shape-offer-summary-product-id :shape
                         "OfferProductIdString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (release-date :initarg :release-date :initform
                         common-lisp:nil :type
                         (common-lisp:or date-time-iso8601 common-lisp:null)
                         :accessor struct-shape-offer-summary-release-date
                         :shape "DateTimeISO8601" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (state :initarg :state :initform common-lisp:nil :type
                         (common-lisp:or offer-state-string common-lisp:null)
                         :accessor struct-shape-offer-summary-state :shape
                         "OfferStateString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (targeting :initarg :targeting :initform
                         common-lisp:nil :type
                         (common-lisp:or offer-targeting-list common-lisp:null)
                         :accessor struct-shape-offer-summary-targeting :shape
                         "OfferTargetingList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-offer-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'offer-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'offer-summary 'make-offer-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input offer-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input offer-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'availability-end-date))
      (common-lisp:list
       (common-lisp:cons "AvailabilityEndDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'buyer-accounts))
      (common-lisp:list
       (common-lisp:cons "BuyerAccounts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'product-id))
      (common-lisp:list
       (common-lisp:cons "ProductId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'release-date))
      (common-lisp:list
       (common-lisp:cons "ReleaseDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'targeting))
      (common-lisp:list
       (common-lisp:cons "Targeting"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input offer-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass offer-targeting-filter common-lisp:nil
                       ((value-list :initarg :value-list :initform
                         common-lisp:nil :type
                         (common-lisp:or offer-targeting-filter-value-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-offer-targeting-filter-value-list :shape
                         "OfferTargetingFilterValueList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-offer-targeting-filter
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'offer-targeting-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'offer-targeting-filter 'make-offer-targeting-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          offer-targeting-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          offer-targeting-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value-list))
      (common-lisp:list
       (common-lisp:cons "ValueList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          offer-targeting-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype offer-targeting-filter-value-list ()
   '(trivial-types:proper-list offer-targeting-string))
 (common-lisp:defun make-offer-targeting-filter-value-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list offer-targeting-string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype offer-targeting-list ()
   '(trivial-types:proper-list offer-targeting-string))
 (common-lisp:defun make-offer-targeting-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list offer-targeting-string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype offer-targeting-string () 'common-lisp:string)
(common-lisp:deftype ownership-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass put-resource-policy-request common-lisp:nil
                       ((policy :initarg :policy :initform
                         (common-lisp:error ":policy is required") :type
                         (common-lisp:or resource-policy-json common-lisp:null)
                         :accessor
                         struct-shape-put-resource-policy-request-policy :shape
                         "ResourcePolicyJson" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resource-arn is required") :type
                         (common-lisp:or resource-arn common-lisp:null)
                         :accessor
                         struct-shape-put-resource-policy-request-resource-arn
                         :shape "ResourceARN" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-resource-policy-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'put-resource-policy-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-resource-policy-request
                    'make-put-resource-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-resource-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-resource-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy))
      (common-lisp:list
       (common-lisp:cons "Policy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-resource-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-resource-policy-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-resource-policy-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'put-resource-policy-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-resource-policy-response
                    'make-put-resource-policy-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-resource-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-resource-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-resource-policy-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype requested-change-list ()
   '(trivial-types:proper-list change))
 (common-lisp:defun make-requested-change-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list change))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass resale-authorization-availability-end-date-filter
                       common-lisp:nil
                       ((date-range :initarg :date-range :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          resale-authorization-availability-end-date-filter-date-range
                          common-lisp:null)
                         :accessor
                         struct-shape-resale-authorization-availability-end-date-filter-date-range
                         :shape
                         "ResaleAuthorizationAvailabilityEndDateFilterDateRange"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (value-list :initarg :value-list :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          resale-authorization-availability-end-date-filter-value-list
                          common-lisp:null)
                         :accessor
                         struct-shape-resale-authorization-availability-end-date-filter-value-list
                         :shape
                         "ResaleAuthorizationAvailabilityEndDateFilterValueList"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-resale-authorization-availability-end-date-filter
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'resale-authorization-availability-end-date-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'resale-authorization-availability-end-date-filter
                    'make-resale-authorization-availability-end-date-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          resale-authorization-availability-end-date-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          resale-authorization-availability-end-date-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'date-range))
      (common-lisp:list
       (common-lisp:cons "DateRange"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value-list))
      (common-lisp:list
       (common-lisp:cons "ValueList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          resale-authorization-availability-end-date-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass
  resale-authorization-availability-end-date-filter-date-range common-lisp:nil
  ((after-value :initarg :after-value :initform common-lisp:nil :type
    (common-lisp:or date-time-iso8601 common-lisp:null) :accessor
    struct-shape-resale-authorization-availability-end-date-filter-date-range-after-value
    :shape "DateTimeISO8601" :location common-lisp:nil :location-name
    common-lisp:nil)
   (before-value :initarg :before-value :initform common-lisp:nil :type
    (common-lisp:or date-time-iso8601 common-lisp:null) :accessor
    struct-shape-resale-authorization-availability-end-date-filter-date-range-before-value
    :shape "DateTimeISO8601" :location common-lisp:nil :location-name
    common-lisp:nil))
  (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-resale-authorization-availability-end-date-filter-date-range
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'resale-authorization-availability-end-date-filter-date-range
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list
   'resale-authorization-availability-end-date-filter-date-range
   'make-resale-authorization-availability-end-date-filter-date-range))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          resale-authorization-availability-end-date-filter-date-range))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          resale-authorization-availability-end-date-filter-date-range))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'after-value))
      (common-lisp:list
       (common-lisp:cons "AfterValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'before-value))
      (common-lisp:list
       (common-lisp:cons "BeforeValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          resale-authorization-availability-end-date-filter-date-range))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype resale-authorization-availability-end-date-filter-value-list
                      ()
   '(trivial-types:proper-list date-time-iso8601))
 (common-lisp:defun make-resale-authorization-availability-end-date-filter-value-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list date-time-iso8601))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass resale-authorization-created-date-filter common-lisp:nil
                       ((date-range :initarg :date-range :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          resale-authorization-created-date-filter-date-range
                          common-lisp:null)
                         :accessor
                         struct-shape-resale-authorization-created-date-filter-date-range
                         :shape "ResaleAuthorizationCreatedDateFilterDateRange"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (value-list :initarg :value-list :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          resale-authorization-created-date-filter-value-list
                          common-lisp:null)
                         :accessor
                         struct-shape-resale-authorization-created-date-filter-value-list
                         :shape "ResaleAuthorizationCreatedDateFilterValueList"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-resale-authorization-created-date-filter
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'resale-authorization-created-date-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'resale-authorization-created-date-filter
                    'make-resale-authorization-created-date-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          resale-authorization-created-date-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          resale-authorization-created-date-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'date-range))
      (common-lisp:list
       (common-lisp:cons "DateRange"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value-list))
      (common-lisp:list
       (common-lisp:cons "ValueList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          resale-authorization-created-date-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass resale-authorization-created-date-filter-date-range
                       common-lisp:nil
                       ((after-value :initarg :after-value :initform
                         common-lisp:nil :type
                         (common-lisp:or date-time-iso8601 common-lisp:null)
                         :accessor
                         struct-shape-resale-authorization-created-date-filter-date-range-after-value
                         :shape "DateTimeISO8601" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (before-value :initarg :before-value :initform
                         common-lisp:nil :type
                         (common-lisp:or date-time-iso8601 common-lisp:null)
                         :accessor
                         struct-shape-resale-authorization-created-date-filter-date-range-before-value
                         :shape "DateTimeISO8601" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-resale-authorization-created-date-filter-date-range
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'resale-authorization-created-date-filter-date-range
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'resale-authorization-created-date-filter-date-range
                    'make-resale-authorization-created-date-filter-date-range))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          resale-authorization-created-date-filter-date-range))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          resale-authorization-created-date-filter-date-range))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'after-value))
      (common-lisp:list
       (common-lisp:cons "AfterValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'before-value))
      (common-lisp:list
       (common-lisp:cons "BeforeValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          resale-authorization-created-date-filter-date-range))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype resale-authorization-created-date-filter-value-list ()
   '(trivial-types:proper-list date-time-iso8601))
 (common-lisp:defun make-resale-authorization-created-date-filter-value-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list date-time-iso8601))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass resale-authorization-entity-id-filter common-lisp:nil
                       ((value-list :initarg :value-list :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          resale-authorization-entity-id-filter-value-list
                          common-lisp:null)
                         :accessor
                         struct-shape-resale-authorization-entity-id-filter-value-list
                         :shape "ResaleAuthorizationEntityIdFilterValueList"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-resale-authorization-entity-id-filter
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'resale-authorization-entity-id-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'resale-authorization-entity-id-filter
                    'make-resale-authorization-entity-id-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          resale-authorization-entity-id-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          resale-authorization-entity-id-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value-list))
      (common-lisp:list
       (common-lisp:cons "ValueList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          resale-authorization-entity-id-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype resale-authorization-entity-id-filter-value-list ()
   '(trivial-types:proper-list resale-authorization-entity-id-string))
 (common-lisp:defun make-resale-authorization-entity-id-filter-value-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            resale-authorization-entity-id-string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype resale-authorization-entity-id-string ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass resale-authorization-filters common-lisp:nil
                       ((availability-end-date :initarg :availability-end-date
                         :initform common-lisp:nil :type
                         (common-lisp:or
                          resale-authorization-availability-end-date-filter
                          common-lisp:null)
                         :accessor
                         struct-shape-resale-authorization-filters-availability-end-date
                         :shape "ResaleAuthorizationAvailabilityEndDateFilter"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (created-date :initarg :created-date :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          resale-authorization-created-date-filter
                          common-lisp:null)
                         :accessor
                         struct-shape-resale-authorization-filters-created-date
                         :shape "ResaleAuthorizationCreatedDateFilter"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (entity-id :initarg :entity-id :initform
                         common-lisp:nil :type
                         (common-lisp:or resale-authorization-entity-id-filter
                                         common-lisp:null)
                         :accessor
                         struct-shape-resale-authorization-filters-entity-id
                         :shape "ResaleAuthorizationEntityIdFilter" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (last-modified-date :initarg :last-modified-date
                         :initform common-lisp:nil :type
                         (common-lisp:or
                          resale-authorization-last-modified-date-filter
                          common-lisp:null)
                         :accessor
                         struct-shape-resale-authorization-filters-last-modified-date
                         :shape "ResaleAuthorizationLastModifiedDateFilter"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (manufacturer-account-id :initarg
                         :manufacturer-account-id :initform common-lisp:nil
                         :type
                         (common-lisp:or
                          resale-authorization-manufacturer-account-id-filter
                          common-lisp:null)
                         :accessor
                         struct-shape-resale-authorization-filters-manufacturer-account-id
                         :shape
                         "ResaleAuthorizationManufacturerAccountIdFilter"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (manufacturer-legal-name :initarg
                         :manufacturer-legal-name :initform common-lisp:nil
                         :type
                         (common-lisp:or
                          resale-authorization-manufacturer-legal-name-filter
                          common-lisp:null)
                         :accessor
                         struct-shape-resale-authorization-filters-manufacturer-legal-name
                         :shape
                         "ResaleAuthorizationManufacturerLegalNameFilter"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or resale-authorization-name-filter
                                         common-lisp:null)
                         :accessor
                         struct-shape-resale-authorization-filters-name :shape
                         "ResaleAuthorizationNameFilter" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (offer-extended-status :initarg :offer-extended-status
                         :initform common-lisp:nil :type
                         (common-lisp:or
                          resale-authorization-offer-extended-status-filter
                          common-lisp:null)
                         :accessor
                         struct-shape-resale-authorization-filters-offer-extended-status
                         :shape "ResaleAuthorizationOfferExtendedStatusFilter"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (product-id :initarg :product-id :initform
                         common-lisp:nil :type
                         (common-lisp:or resale-authorization-product-id-filter
                                         common-lisp:null)
                         :accessor
                         struct-shape-resale-authorization-filters-product-id
                         :shape "ResaleAuthorizationProductIdFilter" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (product-name :initarg :product-name :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          resale-authorization-product-name-filter
                          common-lisp:null)
                         :accessor
                         struct-shape-resale-authorization-filters-product-name
                         :shape "ResaleAuthorizationProductNameFilter"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (reseller-account-id :initarg :reseller-account-id
                         :initform common-lisp:nil :type
                         (common-lisp:or
                          resale-authorization-reseller-account-idfilter
                          common-lisp:null)
                         :accessor
                         struct-shape-resale-authorization-filters-reseller-account-id
                         :shape "ResaleAuthorizationResellerAccountIDFilter"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (reseller-legal-name :initarg :reseller-legal-name
                         :initform common-lisp:nil :type
                         (common-lisp:or
                          resale-authorization-reseller-legal-name-filter
                          common-lisp:null)
                         :accessor
                         struct-shape-resale-authorization-filters-reseller-legal-name
                         :shape "ResaleAuthorizationResellerLegalNameFilter"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or resale-authorization-status-filter
                                         common-lisp:null)
                         :accessor
                         struct-shape-resale-authorization-filters-status
                         :shape "ResaleAuthorizationStatusFilter" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-resale-authorization-filters
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'resale-authorization-filters
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'resale-authorization-filters
                    'make-resale-authorization-filters))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          resale-authorization-filters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          resale-authorization-filters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'availability-end-date))
      (common-lisp:list
       (common-lisp:cons "AvailabilityEndDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-date))
      (common-lisp:list
       (common-lisp:cons "CreatedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entity-id))
      (common-lisp:list
       (common-lisp:cons "EntityId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-date))
      (common-lisp:list
       (common-lisp:cons "LastModifiedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'manufacturer-account-id))
      (common-lisp:list
       (common-lisp:cons "ManufacturerAccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'manufacturer-legal-name))
      (common-lisp:list
       (common-lisp:cons "ManufacturerLegalName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'offer-extended-status))
      (common-lisp:list
       (common-lisp:cons "OfferExtendedStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'product-id))
      (common-lisp:list
       (common-lisp:cons "ProductId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'product-name))
      (common-lisp:list
       (common-lisp:cons "ProductName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reseller-account-id))
      (common-lisp:list
       (common-lisp:cons "ResellerAccountID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reseller-legal-name))
      (common-lisp:list
       (common-lisp:cons "ResellerLegalName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          resale-authorization-filters))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass resale-authorization-last-modified-date-filter
                       common-lisp:nil
                       ((date-range :initarg :date-range :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          resale-authorization-last-modified-date-filter-date-range
                          common-lisp:null)
                         :accessor
                         struct-shape-resale-authorization-last-modified-date-filter-date-range
                         :shape
                         "ResaleAuthorizationLastModifiedDateFilterDateRange"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-resale-authorization-last-modified-date-filter
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'resale-authorization-last-modified-date-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'resale-authorization-last-modified-date-filter
                    'make-resale-authorization-last-modified-date-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          resale-authorization-last-modified-date-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          resale-authorization-last-modified-date-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'date-range))
      (common-lisp:list
       (common-lisp:cons "DateRange"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          resale-authorization-last-modified-date-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass
  resale-authorization-last-modified-date-filter-date-range common-lisp:nil
  ((after-value :initarg :after-value :initform common-lisp:nil :type
    (common-lisp:or date-time-iso8601 common-lisp:null) :accessor
    struct-shape-resale-authorization-last-modified-date-filter-date-range-after-value
    :shape "DateTimeISO8601" :location common-lisp:nil :location-name
    common-lisp:nil)
   (before-value :initarg :before-value :initform common-lisp:nil :type
    (common-lisp:or date-time-iso8601 common-lisp:null) :accessor
    struct-shape-resale-authorization-last-modified-date-filter-date-range-before-value
    :shape "DateTimeISO8601" :location common-lisp:nil :location-name
    common-lisp:nil))
  (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-resale-authorization-last-modified-date-filter-date-range
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'resale-authorization-last-modified-date-filter-date-range
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'resale-authorization-last-modified-date-filter-date-range
                    'make-resale-authorization-last-modified-date-filter-date-range))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          resale-authorization-last-modified-date-filter-date-range))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          resale-authorization-last-modified-date-filter-date-range))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'after-value))
      (common-lisp:list
       (common-lisp:cons "AfterValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'before-value))
      (common-lisp:list
       (common-lisp:cons "BeforeValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          resale-authorization-last-modified-date-filter-date-range))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass resale-authorization-manufacturer-account-id-filter
                       common-lisp:nil
                       ((value-list :initarg :value-list :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          resale-authorization-manufacturer-account-id-filter-value-list
                          common-lisp:null)
                         :accessor
                         struct-shape-resale-authorization-manufacturer-account-id-filter-value-list
                         :shape
                         "ResaleAuthorizationManufacturerAccountIdFilterValueList"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (wild-card-value :initarg :wild-card-value :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          resale-authorization-manufacturer-account-id-filter-wildcard
                          common-lisp:null)
                         :accessor
                         struct-shape-resale-authorization-manufacturer-account-id-filter-wild-card-value
                         :shape
                         "ResaleAuthorizationManufacturerAccountIdFilterWildcard"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-resale-authorization-manufacturer-account-id-filter
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'resale-authorization-manufacturer-account-id-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'resale-authorization-manufacturer-account-id-filter
                    'make-resale-authorization-manufacturer-account-id-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          resale-authorization-manufacturer-account-id-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          resale-authorization-manufacturer-account-id-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value-list))
      (common-lisp:list
       (common-lisp:cons "ValueList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'wild-card-value))
      (common-lisp:list
       (common-lisp:cons "WildCardValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          resale-authorization-manufacturer-account-id-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype resale-authorization-manufacturer-account-id-filter-value-list
                      ()
   '(trivial-types:proper-list
     resale-authorization-manufacturer-account-id-string))
 (common-lisp:defun make-resale-authorization-manufacturer-account-id-filter-value-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            resale-authorization-manufacturer-account-id-string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype resale-authorization-manufacturer-account-id-filter-wildcard
                     ()
  'common-lisp:string)
(common-lisp:deftype resale-authorization-manufacturer-account-id-string ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass resale-authorization-manufacturer-legal-name-filter
                       common-lisp:nil
                       ((value-list :initarg :value-list :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          resale-authorization-manufacturer-legal-name-filter-value-list
                          common-lisp:null)
                         :accessor
                         struct-shape-resale-authorization-manufacturer-legal-name-filter-value-list
                         :shape
                         "ResaleAuthorizationManufacturerLegalNameFilterValueList"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (wild-card-value :initarg :wild-card-value :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          resale-authorization-manufacturer-legal-name-filter-wildcard
                          common-lisp:null)
                         :accessor
                         struct-shape-resale-authorization-manufacturer-legal-name-filter-wild-card-value
                         :shape
                         "ResaleAuthorizationManufacturerLegalNameFilterWildcard"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-resale-authorization-manufacturer-legal-name-filter
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'resale-authorization-manufacturer-legal-name-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'resale-authorization-manufacturer-legal-name-filter
                    'make-resale-authorization-manufacturer-legal-name-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          resale-authorization-manufacturer-legal-name-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          resale-authorization-manufacturer-legal-name-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value-list))
      (common-lisp:list
       (common-lisp:cons "ValueList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'wild-card-value))
      (common-lisp:list
       (common-lisp:cons "WildCardValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          resale-authorization-manufacturer-legal-name-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype resale-authorization-manufacturer-legal-name-filter-value-list
                      ()
   '(trivial-types:proper-list
     resale-authorization-manufacturer-legal-name-string))
 (common-lisp:defun make-resale-authorization-manufacturer-legal-name-filter-value-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            resale-authorization-manufacturer-legal-name-string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype resale-authorization-manufacturer-legal-name-filter-wildcard
                     ()
  'common-lisp:string)
(common-lisp:deftype resale-authorization-manufacturer-legal-name-string ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass resale-authorization-name-filter common-lisp:nil
                       ((value-list :initarg :value-list :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          resale-authorization-name-filter-value-list
                          common-lisp:null)
                         :accessor
                         struct-shape-resale-authorization-name-filter-value-list
                         :shape "ResaleAuthorizationNameFilterValueList"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (wild-card-value :initarg :wild-card-value :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          resale-authorization-name-filter-wildcard
                          common-lisp:null)
                         :accessor
                         struct-shape-resale-authorization-name-filter-wild-card-value
                         :shape "ResaleAuthorizationNameFilterWildcard"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-resale-authorization-name-filter
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'resale-authorization-name-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'resale-authorization-name-filter
                    'make-resale-authorization-name-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          resale-authorization-name-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          resale-authorization-name-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value-list))
      (common-lisp:list
       (common-lisp:cons "ValueList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'wild-card-value))
      (common-lisp:list
       (common-lisp:cons "WildCardValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          resale-authorization-name-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype resale-authorization-name-filter-value-list ()
   '(trivial-types:proper-list resale-authorization-name-string))
 (common-lisp:defun make-resale-authorization-name-filter-value-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            resale-authorization-name-string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype resale-authorization-name-filter-wildcard ()
  'common-lisp:string)
(common-lisp:deftype resale-authorization-name-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass resale-authorization-offer-extended-status-filter
                       common-lisp:nil
                       ((value-list :initarg :value-list :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          resale-authorization-offer-extended-status-filter-value-list
                          common-lisp:null)
                         :accessor
                         struct-shape-resale-authorization-offer-extended-status-filter-value-list
                         :shape
                         "ResaleAuthorizationOfferExtendedStatusFilterValueList"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-resale-authorization-offer-extended-status-filter
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'resale-authorization-offer-extended-status-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'resale-authorization-offer-extended-status-filter
                    'make-resale-authorization-offer-extended-status-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          resale-authorization-offer-extended-status-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          resale-authorization-offer-extended-status-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value-list))
      (common-lisp:list
       (common-lisp:cons "ValueList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          resale-authorization-offer-extended-status-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype resale-authorization-offer-extended-status-filter-value-list
                      ()
   '(trivial-types:proper-list
     resale-authorization-offer-extended-status-string))
 (common-lisp:defun make-resale-authorization-offer-extended-status-filter-value-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            resale-authorization-offer-extended-status-string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype resale-authorization-offer-extended-status-string ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass resale-authorization-product-id-filter common-lisp:nil
                       ((value-list :initarg :value-list :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          resale-authorization-product-id-filter-value-list
                          common-lisp:null)
                         :accessor
                         struct-shape-resale-authorization-product-id-filter-value-list
                         :shape "ResaleAuthorizationProductIdFilterValueList"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (wild-card-value :initarg :wild-card-value :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          resale-authorization-product-id-filter-wildcard
                          common-lisp:null)
                         :accessor
                         struct-shape-resale-authorization-product-id-filter-wild-card-value
                         :shape "ResaleAuthorizationProductIdFilterWildcard"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-resale-authorization-product-id-filter
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'resale-authorization-product-id-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'resale-authorization-product-id-filter
                    'make-resale-authorization-product-id-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          resale-authorization-product-id-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          resale-authorization-product-id-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value-list))
      (common-lisp:list
       (common-lisp:cons "ValueList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'wild-card-value))
      (common-lisp:list
       (common-lisp:cons "WildCardValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          resale-authorization-product-id-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype resale-authorization-product-id-filter-value-list ()
   '(trivial-types:proper-list resale-authorization-product-id-string))
 (common-lisp:defun make-resale-authorization-product-id-filter-value-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            resale-authorization-product-id-string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype resale-authorization-product-id-filter-wildcard ()
  'common-lisp:string)
(common-lisp:deftype resale-authorization-product-id-string ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass resale-authorization-product-name-filter common-lisp:nil
                       ((value-list :initarg :value-list :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          resale-authorization-product-name-filter-value-list
                          common-lisp:null)
                         :accessor
                         struct-shape-resale-authorization-product-name-filter-value-list
                         :shape "ResaleAuthorizationProductNameFilterValueList"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (wild-card-value :initarg :wild-card-value :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          resale-authorization-product-name-filter-wildcard
                          common-lisp:null)
                         :accessor
                         struct-shape-resale-authorization-product-name-filter-wild-card-value
                         :shape "ResaleAuthorizationProductNameFilterWildcard"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-resale-authorization-product-name-filter
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'resale-authorization-product-name-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'resale-authorization-product-name-filter
                    'make-resale-authorization-product-name-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          resale-authorization-product-name-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          resale-authorization-product-name-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value-list))
      (common-lisp:list
       (common-lisp:cons "ValueList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'wild-card-value))
      (common-lisp:list
       (common-lisp:cons "WildCardValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          resale-authorization-product-name-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype resale-authorization-product-name-filter-value-list ()
   '(trivial-types:proper-list resale-authorization-product-name-string))
 (common-lisp:defun make-resale-authorization-product-name-filter-value-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            resale-authorization-product-name-string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype resale-authorization-product-name-filter-wildcard ()
  'common-lisp:string)
(common-lisp:deftype resale-authorization-product-name-string ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass resale-authorization-reseller-account-idfilter
                       common-lisp:nil
                       ((value-list :initarg :value-list :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          resale-authorization-reseller-account-idfilter-value-list
                          common-lisp:null)
                         :accessor
                         struct-shape-resale-authorization-reseller-account-idfilter-value-list
                         :shape
                         "ResaleAuthorizationResellerAccountIDFilterValueList"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (wild-card-value :initarg :wild-card-value :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          resale-authorization-reseller-account-idfilter-wildcard
                          common-lisp:null)
                         :accessor
                         struct-shape-resale-authorization-reseller-account-idfilter-wild-card-value
                         :shape
                         "ResaleAuthorizationResellerAccountIDFilterWildcard"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-resale-authorization-reseller-account-idfilter
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'resale-authorization-reseller-account-idfilter
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'resale-authorization-reseller-account-idfilter
                    'make-resale-authorization-reseller-account-idfilter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          resale-authorization-reseller-account-idfilter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          resale-authorization-reseller-account-idfilter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value-list))
      (common-lisp:list
       (common-lisp:cons "ValueList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'wild-card-value))
      (common-lisp:list
       (common-lisp:cons "WildCardValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          resale-authorization-reseller-account-idfilter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype resale-authorization-reseller-account-idfilter-value-list
                      ()
   '(trivial-types:proper-list resale-authorization-reseller-account-idstring))
 (common-lisp:defun make-resale-authorization-reseller-account-idfilter-value-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            resale-authorization-reseller-account-idstring))
   aws-sdk/generator/shape::members))
(common-lisp:deftype resale-authorization-reseller-account-idfilter-wildcard ()
  'common-lisp:string)
(common-lisp:deftype resale-authorization-reseller-account-idstring ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass resale-authorization-reseller-legal-name-filter
                       common-lisp:nil
                       ((value-list :initarg :value-list :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          resale-authorization-reseller-legal-name-filter-value-list
                          common-lisp:null)
                         :accessor
                         struct-shape-resale-authorization-reseller-legal-name-filter-value-list
                         :shape
                         "ResaleAuthorizationResellerLegalNameFilterValueList"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (wild-card-value :initarg :wild-card-value :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          resale-authorization-reseller-legal-name-filter-wildcard
                          common-lisp:null)
                         :accessor
                         struct-shape-resale-authorization-reseller-legal-name-filter-wild-card-value
                         :shape
                         "ResaleAuthorizationResellerLegalNameFilterWildcard"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-resale-authorization-reseller-legal-name-filter
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'resale-authorization-reseller-legal-name-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'resale-authorization-reseller-legal-name-filter
                    'make-resale-authorization-reseller-legal-name-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          resale-authorization-reseller-legal-name-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          resale-authorization-reseller-legal-name-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value-list))
      (common-lisp:list
       (common-lisp:cons "ValueList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'wild-card-value))
      (common-lisp:list
       (common-lisp:cons "WildCardValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          resale-authorization-reseller-legal-name-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype resale-authorization-reseller-legal-name-filter-value-list
                      ()
   '(trivial-types:proper-list
     resale-authorization-reseller-legal-name-string))
 (common-lisp:defun make-resale-authorization-reseller-legal-name-filter-value-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            resale-authorization-reseller-legal-name-string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype resale-authorization-reseller-legal-name-filter-wildcard
                     ()
  'common-lisp:string)
(common-lisp:deftype resale-authorization-reseller-legal-name-string ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass resale-authorization-sort common-lisp:nil
                       ((sort-by :initarg :sort-by :initform common-lisp:nil
                         :type
                         (common-lisp:or resale-authorization-sort-by
                                         common-lisp:null)
                         :accessor
                         struct-shape-resale-authorization-sort-sort-by :shape
                         "ResaleAuthorizationSortBy" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (sort-order :initarg :sort-order :initform
                         common-lisp:nil :type
                         (common-lisp:or sort-order common-lisp:null) :accessor
                         struct-shape-resale-authorization-sort-sort-order
                         :shape "SortOrder" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-resale-authorization-sort
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'resale-authorization-sort
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'resale-authorization-sort
                    'make-resale-authorization-sort))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          resale-authorization-sort))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          resale-authorization-sort))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-by))
      (common-lisp:list
       (common-lisp:cons "SortBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-order))
      (common-lisp:list
       (common-lisp:cons "SortOrder"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          resale-authorization-sort))
   common-lisp:nil))
(common-lisp:deftype resale-authorization-sort-by () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass resale-authorization-status-filter common-lisp:nil
                       ((value-list :initarg :value-list :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          resale-authorization-status-filter-value-list
                          common-lisp:null)
                         :accessor
                         struct-shape-resale-authorization-status-filter-value-list
                         :shape "ResaleAuthorizationStatusFilterValueList"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-resale-authorization-status-filter
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'resale-authorization-status-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'resale-authorization-status-filter
                    'make-resale-authorization-status-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          resale-authorization-status-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          resale-authorization-status-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value-list))
      (common-lisp:list
       (common-lisp:cons "ValueList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          resale-authorization-status-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype resale-authorization-status-filter-value-list ()
   '(trivial-types:proper-list resale-authorization-status-string))
 (common-lisp:defun make-resale-authorization-status-filter-value-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            resale-authorization-status-string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype resale-authorization-status-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass resale-authorization-summary common-lisp:nil
                       ((availability-end-date :initarg :availability-end-date
                         :initform common-lisp:nil :type
                         (common-lisp:or date-time-iso8601 common-lisp:null)
                         :accessor
                         struct-shape-resale-authorization-summary-availability-end-date
                         :shape "DateTimeISO8601" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (created-date :initarg :created-date :initform
                         common-lisp:nil :type
                         (common-lisp:or date-time-iso8601 common-lisp:null)
                         :accessor
                         struct-shape-resale-authorization-summary-created-date
                         :shape "DateTimeISO8601" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (manufacturer-account-id :initarg
                         :manufacturer-account-id :initform common-lisp:nil
                         :type
                         (common-lisp:or
                          resale-authorization-manufacturer-account-id-string
                          common-lisp:null)
                         :accessor
                         struct-shape-resale-authorization-summary-manufacturer-account-id
                         :shape
                         "ResaleAuthorizationManufacturerAccountIdString"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (manufacturer-legal-name :initarg
                         :manufacturer-legal-name :initform common-lisp:nil
                         :type
                         (common-lisp:or
                          resale-authorization-manufacturer-legal-name-string
                          common-lisp:null)
                         :accessor
                         struct-shape-resale-authorization-summary-manufacturer-legal-name
                         :shape
                         "ResaleAuthorizationManufacturerLegalNameString"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or resale-authorization-name-string
                                         common-lisp:null)
                         :accessor
                         struct-shape-resale-authorization-summary-name :shape
                         "ResaleAuthorizationNameString" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (offer-extended-status :initarg :offer-extended-status
                         :initform common-lisp:nil :type
                         (common-lisp:or
                          resale-authorization-offer-extended-status-string
                          common-lisp:null)
                         :accessor
                         struct-shape-resale-authorization-summary-offer-extended-status
                         :shape "ResaleAuthorizationOfferExtendedStatusString"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (product-id :initarg :product-id :initform
                         common-lisp:nil :type
                         (common-lisp:or resale-authorization-product-id-string
                                         common-lisp:null)
                         :accessor
                         struct-shape-resale-authorization-summary-product-id
                         :shape "ResaleAuthorizationProductIdString" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (product-name :initarg :product-name :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          resale-authorization-product-name-string
                          common-lisp:null)
                         :accessor
                         struct-shape-resale-authorization-summary-product-name
                         :shape "ResaleAuthorizationProductNameString"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (reseller-account-id :initarg :reseller-account-id
                         :initform common-lisp:nil :type
                         (common-lisp:or
                          resale-authorization-reseller-account-idstring
                          common-lisp:null)
                         :accessor
                         struct-shape-resale-authorization-summary-reseller-account-id
                         :shape "ResaleAuthorizationResellerAccountIDString"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (reseller-legal-name :initarg :reseller-legal-name
                         :initform common-lisp:nil :type
                         (common-lisp:or
                          resale-authorization-reseller-legal-name-string
                          common-lisp:null)
                         :accessor
                         struct-shape-resale-authorization-summary-reseller-legal-name
                         :shape "ResaleAuthorizationResellerLegalNameString"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or resale-authorization-status-string
                                         common-lisp:null)
                         :accessor
                         struct-shape-resale-authorization-summary-status
                         :shape "ResaleAuthorizationStatusString" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-resale-authorization-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'resale-authorization-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'resale-authorization-summary
                    'make-resale-authorization-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          resale-authorization-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          resale-authorization-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'availability-end-date))
      (common-lisp:list
       (common-lisp:cons "AvailabilityEndDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-date))
      (common-lisp:list
       (common-lisp:cons "CreatedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'manufacturer-account-id))
      (common-lisp:list
       (common-lisp:cons "ManufacturerAccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'manufacturer-legal-name))
      (common-lisp:list
       (common-lisp:cons "ManufacturerLegalName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'offer-extended-status))
      (common-lisp:list
       (common-lisp:cons "OfferExtendedStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'product-id))
      (common-lisp:list
       (common-lisp:cons "ProductId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'product-name))
      (common-lisp:list
       (common-lisp:cons "ProductName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reseller-account-id))
      (common-lisp:list
       (common-lisp:cons "ResellerAccountID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reseller-legal-name))
      (common-lisp:list
       (common-lisp:cons "ResellerLegalName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          resale-authorization-summary))
   common-lisp:nil))
(common-lisp:deftype resource-arn () 'common-lisp:string)
(common-lisp:deftype resource-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype resource-id-list ()
   '(trivial-types:proper-list resource-id))
 (common-lisp:defun make-resource-id-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list resource-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition resource-in-use-exception
     (marketplace-catalog-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-in-use-exception-message)))
 (common-lisp:export
  (common-lisp:list 'resource-in-use-exception
                    'resource-in-use-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-exception
     (marketplace-catalog-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'resource-not-found-exception
                    'resource-not-found-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition resource-not-supported-exception
     (marketplace-catalog-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-not-supported-exception-message)))
 (common-lisp:export
  (common-lisp:list 'resource-not-supported-exception
                    'resource-not-supported-exception-message)))
(common-lisp:deftype resource-policy-json () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass saa-sproduct-entity-id-filter common-lisp:nil
                       ((value-list :initarg :value-list :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          saa-sproduct-entity-id-filter-value-list
                          common-lisp:null)
                         :accessor
                         struct-shape-saa-sproduct-entity-id-filter-value-list
                         :shape "SaaSProductEntityIdFilterValueList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-saa-sproduct-entity-id-filter
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'saa-sproduct-entity-id-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'saa-sproduct-entity-id-filter
                    'make-saa-sproduct-entity-id-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          saa-sproduct-entity-id-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          saa-sproduct-entity-id-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value-list))
      (common-lisp:list
       (common-lisp:cons "ValueList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          saa-sproduct-entity-id-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype saa-sproduct-entity-id-filter-value-list ()
   '(trivial-types:proper-list saa-sproduct-entity-id-string))
 (common-lisp:defun make-saa-sproduct-entity-id-filter-value-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            saa-sproduct-entity-id-string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype saa-sproduct-entity-id-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass saa-sproduct-filters common-lisp:nil
                       ((entity-id :initarg :entity-id :initform
                         common-lisp:nil :type
                         (common-lisp:or saa-sproduct-entity-id-filter
                                         common-lisp:null)
                         :accessor struct-shape-saa-sproduct-filters-entity-id
                         :shape "SaaSProductEntityIdFilter" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (last-modified-date :initarg :last-modified-date
                         :initform common-lisp:nil :type
                         (common-lisp:or saa-sproduct-last-modified-date-filter
                                         common-lisp:null)
                         :accessor
                         struct-shape-saa-sproduct-filters-last-modified-date
                         :shape "SaaSProductLastModifiedDateFilter" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (product-title :initarg :product-title :initform
                         common-lisp:nil :type
                         (common-lisp:or saa-sproduct-title-filter
                                         common-lisp:null)
                         :accessor
                         struct-shape-saa-sproduct-filters-product-title :shape
                         "SaaSProductTitleFilter" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (visibility :initarg :visibility :initform
                         common-lisp:nil :type
                         (common-lisp:or saa-sproduct-visibility-filter
                                         common-lisp:null)
                         :accessor struct-shape-saa-sproduct-filters-visibility
                         :shape "SaaSProductVisibilityFilter" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-saa-sproduct-filters
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'saa-sproduct-filters
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'saa-sproduct-filters 'make-saa-sproduct-filters))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input saa-sproduct-filters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input saa-sproduct-filters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entity-id))
      (common-lisp:list
       (common-lisp:cons "EntityId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-date))
      (common-lisp:list
       (common-lisp:cons "LastModifiedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'product-title))
      (common-lisp:list
       (common-lisp:cons "ProductTitle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'visibility))
      (common-lisp:list
       (common-lisp:cons "Visibility"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input saa-sproduct-filters))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass saa-sproduct-last-modified-date-filter common-lisp:nil
                       ((date-range :initarg :date-range :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          saa-sproduct-last-modified-date-filter-date-range
                          common-lisp:null)
                         :accessor
                         struct-shape-saa-sproduct-last-modified-date-filter-date-range
                         :shape "SaaSProductLastModifiedDateFilterDateRange"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-saa-sproduct-last-modified-date-filter
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'saa-sproduct-last-modified-date-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'saa-sproduct-last-modified-date-filter
                    'make-saa-sproduct-last-modified-date-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          saa-sproduct-last-modified-date-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          saa-sproduct-last-modified-date-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'date-range))
      (common-lisp:list
       (common-lisp:cons "DateRange"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          saa-sproduct-last-modified-date-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass saa-sproduct-last-modified-date-filter-date-range
                       common-lisp:nil
                       ((after-value :initarg :after-value :initform
                         common-lisp:nil :type
                         (common-lisp:or date-time-iso8601 common-lisp:null)
                         :accessor
                         struct-shape-saa-sproduct-last-modified-date-filter-date-range-after-value
                         :shape "DateTimeISO8601" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (before-value :initarg :before-value :initform
                         common-lisp:nil :type
                         (common-lisp:or date-time-iso8601 common-lisp:null)
                         :accessor
                         struct-shape-saa-sproduct-last-modified-date-filter-date-range-before-value
                         :shape "DateTimeISO8601" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-saa-sproduct-last-modified-date-filter-date-range
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'saa-sproduct-last-modified-date-filter-date-range
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'saa-sproduct-last-modified-date-filter-date-range
                    'make-saa-sproduct-last-modified-date-filter-date-range))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          saa-sproduct-last-modified-date-filter-date-range))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          saa-sproduct-last-modified-date-filter-date-range))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'after-value))
      (common-lisp:list
       (common-lisp:cons "AfterValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'before-value))
      (common-lisp:list
       (common-lisp:cons "BeforeValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          saa-sproduct-last-modified-date-filter-date-range))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass saa-sproduct-sort common-lisp:nil
                       ((sort-by :initarg :sort-by :initform common-lisp:nil
                         :type
                         (common-lisp:or saa-sproduct-sort-by common-lisp:null)
                         :accessor struct-shape-saa-sproduct-sort-sort-by
                         :shape "SaaSProductSortBy" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (sort-order :initarg :sort-order :initform
                         common-lisp:nil :type
                         (common-lisp:or sort-order common-lisp:null) :accessor
                         struct-shape-saa-sproduct-sort-sort-order :shape
                         "SortOrder" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-saa-sproduct-sort
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'saa-sproduct-sort
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'saa-sproduct-sort 'make-saa-sproduct-sort))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input saa-sproduct-sort))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input saa-sproduct-sort))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-by))
      (common-lisp:list
       (common-lisp:cons "SortBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-order))
      (common-lisp:list
       (common-lisp:cons "SortOrder"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input saa-sproduct-sort))
   common-lisp:nil))
(common-lisp:deftype saa-sproduct-sort-by () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass saa-sproduct-summary common-lisp:nil
                       ((product-title :initarg :product-title :initform
                         common-lisp:nil :type
                         (common-lisp:or saa-sproduct-title-string
                                         common-lisp:null)
                         :accessor
                         struct-shape-saa-sproduct-summary-product-title :shape
                         "SaaSProductTitleString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (visibility :initarg :visibility :initform
                         common-lisp:nil :type
                         (common-lisp:or saa-sproduct-visibility-string
                                         common-lisp:null)
                         :accessor struct-shape-saa-sproduct-summary-visibility
                         :shape "SaaSProductVisibilityString" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-saa-sproduct-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'saa-sproduct-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'saa-sproduct-summary 'make-saa-sproduct-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input saa-sproduct-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input saa-sproduct-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'product-title))
      (common-lisp:list
       (common-lisp:cons "ProductTitle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'visibility))
      (common-lisp:list
       (common-lisp:cons "Visibility"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input saa-sproduct-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass saa-sproduct-title-filter common-lisp:nil
                       ((value-list :initarg :value-list :initform
                         common-lisp:nil :type
                         (common-lisp:or saa-sproduct-title-filter-value-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-saa-sproduct-title-filter-value-list
                         :shape "SaaSProductTitleFilterValueList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (wild-card-value :initarg :wild-card-value :initform
                         common-lisp:nil :type
                         (common-lisp:or saa-sproduct-title-string
                                         common-lisp:null)
                         :accessor
                         struct-shape-saa-sproduct-title-filter-wild-card-value
                         :shape "SaaSProductTitleString" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-saa-sproduct-title-filter
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'saa-sproduct-title-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'saa-sproduct-title-filter
                    'make-saa-sproduct-title-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          saa-sproduct-title-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          saa-sproduct-title-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value-list))
      (common-lisp:list
       (common-lisp:cons "ValueList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'wild-card-value))
      (common-lisp:list
       (common-lisp:cons "WildCardValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          saa-sproduct-title-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype saa-sproduct-title-filter-value-list ()
   '(trivial-types:proper-list saa-sproduct-title-string))
 (common-lisp:defun make-saa-sproduct-title-filter-value-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            saa-sproduct-title-string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype saa-sproduct-title-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass saa-sproduct-visibility-filter common-lisp:nil
                       ((value-list :initarg :value-list :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          saa-sproduct-visibility-filter-value-list
                          common-lisp:null)
                         :accessor
                         struct-shape-saa-sproduct-visibility-filter-value-list
                         :shape "SaaSProductVisibilityFilterValueList"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-saa-sproduct-visibility-filter
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'saa-sproduct-visibility-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'saa-sproduct-visibility-filter
                    'make-saa-sproduct-visibility-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          saa-sproduct-visibility-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          saa-sproduct-visibility-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value-list))
      (common-lisp:list
       (common-lisp:cons "ValueList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          saa-sproduct-visibility-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype saa-sproduct-visibility-filter-value-list ()
   '(trivial-types:proper-list saa-sproduct-visibility-string))
 (common-lisp:defun make-saa-sproduct-visibility-filter-value-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            saa-sproduct-visibility-string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype saa-sproduct-visibility-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition service-quota-exceeded-exception
     (marketplace-catalog-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       service-quota-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'service-quota-exceeded-exception
                    'service-quota-exceeded-exception-message)))
(common-lisp:progn
 (common-lisp:defclass sort common-lisp:nil
                       ((sort-by :initarg :sort-by :initform common-lisp:nil
                         :type (common-lisp:or sort-by common-lisp:null)
                         :accessor struct-shape-sort-sort-by :shape "SortBy"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (sort-order :initarg :sort-order :initform
                         common-lisp:nil :type
                         (common-lisp:or sort-order common-lisp:null) :accessor
                         struct-shape-sort-sort-order :shape "SortOrder"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-sort (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'sort
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'sort 'make-sort))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input sort))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input sort))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-by))
      (common-lisp:list
       (common-lisp:cons "SortBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-order))
      (common-lisp:list
       (common-lisp:cons "SortOrder"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input sort))
   common-lisp:nil))
(common-lisp:deftype sort-by () 'common-lisp:string)
(common-lisp:deftype sort-order () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass start-change-set-request common-lisp:nil
                       ((catalog :initarg :catalog :initform
                         (common-lisp:error ":catalog is required") :type
                         (common-lisp:or catalog common-lisp:null) :accessor
                         struct-shape-start-change-set-request-catalog :shape
                         "Catalog" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (change-set :initarg :change-set :initform
                         (common-lisp:error ":change-set is required") :type
                         (common-lisp:or requested-change-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-start-change-set-request-change-set
                         :shape "RequestedChangeList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (change-set-name :initarg :change-set-name :initform
                         common-lisp:nil :type
                         (common-lisp:or change-set-name common-lisp:null)
                         :accessor
                         struct-shape-start-change-set-request-change-set-name
                         :shape "ChangeSetName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (change-set-tags :initarg :change-set-tags :initform
                         common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-start-change-set-request-change-set-tags
                         :shape "TagList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (client-request-token :initarg :client-request-token
                         :initform common-lisp:nil :type
                         (common-lisp:or client-request-token common-lisp:null)
                         :accessor
                         struct-shape-start-change-set-request-client-request-token
                         :shape "ClientRequestToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (intent :initarg :intent :initform common-lisp:nil
                         :type (common-lisp:or intent common-lisp:null)
                         :accessor struct-shape-start-change-set-request-intent
                         :shape "Intent" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-change-set-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'start-change-set-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-change-set-request 'make-start-change-set-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-change-set-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-change-set-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog))
      (common-lisp:list
       (common-lisp:cons "Catalog"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'change-set))
      (common-lisp:list
       (common-lisp:cons "ChangeSet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'change-set-name))
      (common-lisp:list
       (common-lisp:cons "ChangeSetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'change-set-tags))
      (common-lisp:list
       (common-lisp:cons "ChangeSetTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "ClientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'intent))
      (common-lisp:list
       (common-lisp:cons "Intent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-change-set-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-change-set-response common-lisp:nil
                       ((change-set-arn :initarg :change-set-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-start-change-set-response-change-set-arn
                         :shape "ARN" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (change-set-id :initarg :change-set-id :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-id common-lisp:null)
                         :accessor
                         struct-shape-start-change-set-response-change-set-id
                         :shape "ResourceId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-change-set-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'start-change-set-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-change-set-response
                    'make-start-change-set-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-change-set-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-change-set-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'change-set-arn))
      (common-lisp:list
       (common-lisp:cons "ChangeSetArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'change-set-id))
      (common-lisp:list
       (common-lisp:cons "ChangeSetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-change-set-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass tag common-lisp:nil
                       ((key :initarg :key :initform
                         (common-lisp:error ":key is required") :type
                         (common-lisp:or tag-key common-lisp:null) :accessor
                         struct-shape-tag-key :shape "TagKey" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (value :initarg :value :initform
                         (common-lisp:error ":value is required") :type
                         (common-lisp:or tag-value common-lisp:null) :accessor
                         struct-shape-tag-value :shape "TagValue" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tag (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'tag
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'tag 'make-tag))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag))
   common-lisp:nil))
(common-lisp:deftype tag-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tag-key-list () '(trivial-types:proper-list tag-key))
 (common-lisp:defun make-tag-key-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype tag-list () '(trivial-types:proper-list tag))
 (common-lisp:defun make-tag-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass tag-resource-request common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resource-arn is required") :type
                         (common-lisp:or resource-arn common-lisp:null)
                         :accessor
                         struct-shape-tag-resource-request-resource-arn :shape
                         "ResourceARN" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (tags :initarg :tags :initform
                         (common-lisp:error ":tags is required") :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-tag-resource-request-tags :shape
                         "TagList" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tag-resource-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'tag-resource-request 'make-tag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass tag-resource-response common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tag-resource-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'tag-resource-response 'make-tag-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   common-lisp:nil))
(common-lisp:deftype tag-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition throttling-exception
     (marketplace-catalog-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       throttling-exception-message)))
 (common-lisp:export
  (common-lisp:list 'throttling-exception 'throttling-exception-message)))
(common-lisp:progn
 (common-lisp:defclass untag-resource-request common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resource-arn is required") :type
                         (common-lisp:or resource-arn common-lisp:null)
                         :accessor
                         struct-shape-untag-resource-request-resource-arn
                         :shape "ResourceARN" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tag-keys :initarg :tag-keys :initform
                         (common-lisp:error ":tag-keys is required") :type
                         (common-lisp:or tag-key-list common-lisp:null)
                         :accessor struct-shape-untag-resource-request-tag-keys
                         :shape "TagKeyList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-untag-resource-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'untag-resource-request 'make-untag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-keys))
      (common-lisp:list
       (common-lisp:cons "TagKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass untag-resource-response common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-untag-resource-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'untag-resource-response 'make-untag-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition validation-exception
     (marketplace-catalog-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       validation-exception-message)))
 (common-lisp:export
  (common-lisp:list 'validation-exception 'validation-exception-message)))
(common-lisp:progn
 (common-lisp:deftype value-list ()
   '(trivial-types:proper-list filter-value-content))
 (common-lisp:defun make-value-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list filter-value-content))
   aws-sdk/generator/shape::members))
(common-lisp:deftype visibility-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defun batch-describe-entities
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key entity-request-list)
   (common-lisp:declare (common-lisp:ignorable entity-request-list))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-batch-describe-entities-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'marketplace-catalog-request aws-sdk/generator/operation::input "POST"
        "/BatchDescribeEntities" "BatchDescribeEntities"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'batch-describe-entities))
(common-lisp:progn
 (common-lisp:defun cancel-change-set
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key catalog change-set-id)
   (common-lisp:declare (common-lisp:ignorable catalog change-set-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-cancel-change-set-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'marketplace-catalog-request aws-sdk/generator/operation::input "PATCH"
        "/CancelChangeSet" "CancelChangeSet"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'cancel-change-set))
(common-lisp:progn
 (common-lisp:defun delete-resource-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn)
   (common-lisp:declare (common-lisp:ignorable resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-resource-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'marketplace-catalog-request aws-sdk/generator/operation::input
        "DELETE" "/DeleteResourcePolicy" "DeleteResourcePolicy"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-resource-policy))
(common-lisp:progn
 (common-lisp:defun describe-change-set
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key catalog change-set-id)
   (common-lisp:declare (common-lisp:ignorable catalog change-set-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-change-set-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'marketplace-catalog-request aws-sdk/generator/operation::input "GET"
        "/DescribeChangeSet" "DescribeChangeSet"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-change-set))
(common-lisp:progn
 (common-lisp:defun describe-entity
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key catalog entity-id)
   (common-lisp:declare (common-lisp:ignorable catalog entity-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-entity-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'marketplace-catalog-request aws-sdk/generator/operation::input "GET"
        "/DescribeEntity" "DescribeEntity"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-entity))
(common-lisp:progn
 (common-lisp:defun get-resource-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn)
   (common-lisp:declare (common-lisp:ignorable resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-resource-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'marketplace-catalog-request aws-sdk/generator/operation::input "GET"
        "/GetResourcePolicy" "GetResourcePolicy"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-resource-policy))
(common-lisp:progn
 (common-lisp:defun list-change-sets
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key catalog filter-list max-results
                     next-token sort)
   (common-lisp:declare
    (common-lisp:ignorable catalog filter-list max-results next-token sort))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-change-sets-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'marketplace-catalog-request aws-sdk/generator/operation::input "POST"
        "/ListChangeSets" "ListChangeSets"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-change-sets))
(common-lisp:progn
 (common-lisp:defun list-entities
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key catalog entity-type entity-type-filters
                     entity-type-sort filter-list max-results next-token
                     ownership-type sort)
   (common-lisp:declare
    (common-lisp:ignorable catalog entity-type entity-type-filters
     entity-type-sort filter-list max-results next-token ownership-type sort))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-entities-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'marketplace-catalog-request aws-sdk/generator/operation::input "POST"
        "/ListEntities" "ListEntities"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-entities))
(common-lisp:progn
 (common-lisp:defun list-tags-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn)
   (common-lisp:declare (common-lisp:ignorable resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-for-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'marketplace-catalog-request aws-sdk/generator/operation::input "POST"
        "/ListTagsForResource" "ListTagsForResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-tags-for-resource))
(common-lisp:progn
 (common-lisp:defun put-resource-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key policy resource-arn)
   (common-lisp:declare (common-lisp:ignorable policy resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-resource-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'marketplace-catalog-request aws-sdk/generator/operation::input "POST"
        "/PutResourcePolicy" "PutResourcePolicy"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'put-resource-policy))
(common-lisp:progn
 (common-lisp:defun start-change-set
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key catalog change-set change-set-name
                     change-set-tags client-request-token intent)
   (common-lisp:declare
    (common-lisp:ignorable catalog change-set change-set-name change-set-tags
     client-request-token intent))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-start-change-set-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'marketplace-catalog-request aws-sdk/generator/operation::input "POST"
        "/StartChangeSet" "StartChangeSet"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'start-change-set))
(common-lisp:progn
 (common-lisp:defun tag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tags)
   (common-lisp:declare (common-lisp:ignorable resource-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'marketplace-catalog-request aws-sdk/generator/operation::input "POST"
        "/TagResource" "TagResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'tag-resource))
(common-lisp:progn
 (common-lisp:defun untag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tag-keys)
   (common-lisp:declare (common-lisp:ignorable resource-arn tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'marketplace-catalog-request aws-sdk/generator/operation::input "POST"
        "/UntagResource" "UntagResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'untag-resource))
