;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/rekognition/api
  (:use)
  (:nicknames #:aws/rekognition)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/json-request)
  (:import-from #:aws-sdk/rest-json-request)
  (:import-from #:aws-sdk/rest-xml-request)
  (:import-from #:aws-sdk/query-request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/rekognition/api)
(common-lisp:progn
 (common-lisp:define-condition rekognition-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'rekognition-error))
(common-lisp:progn
 (common-lisp:defclass rekognition-request (aws-sdk/json-request:json-request)
                       common-lisp:nil
                       (:default-initargs :service "rekognition" :api-version
                        "2016-06-27" :host-prefix "rekognition" :signing-name
                        common-lisp:nil :global-host common-lisp:nil
                        :target-prefix "RekognitionService" :json-version
                        "1.1"))
 (common-lisp:export 'rekognition-request))
(common-lisp:defvar *error-map*
  '(("AccessDeniedException" . access-denied-exception)
    ("ConflictException" . conflict-exception)
    ("HumanLoopQuotaExceededException" . human-loop-quota-exceeded-exception)
    ("IdempotentParameterMismatchException"
     . idempotent-parameter-mismatch-exception)
    ("ImageTooLargeException" . image-too-large-exception)
    ("InternalServerError" . internal-server-error)
    ("InvalidImageFormatException" . invalid-image-format-exception)
    ("InvalidManifestException" . invalid-manifest-exception)
    ("InvalidPaginationTokenException" . invalid-pagination-token-exception)
    ("InvalidParameterException" . invalid-parameter-exception)
    ("InvalidPolicyRevisionIdException" . invalid-policy-revision-id-exception)
    ("InvalidS3ObjectException" . invalid-s3object-exception)
    ("LimitExceededException" . limit-exceeded-exception)
    ("MalformedPolicyDocumentException" . malformed-policy-document-exception)
    ("ProvisionedThroughputExceededException"
     . provisioned-throughput-exceeded-exception)
    ("ResourceAlreadyExistsException" . resource-already-exists-exception)
    ("ResourceInUseException" . resource-in-use-exception)
    ("ResourceNotFoundException" . resource-not-found-exception)
    ("ResourceNotReadyException" . resource-not-ready-exception)
    ("ServiceQuotaExceededException" . service-quota-exceeded-exception)
    ("SessionNotFoundException" . session-not-found-exception)
    ("ThrottlingException" . throttling-exception)
    ("VideoTooLargeException" . video-too-large-exception)))
(common-lisp:progn
 (common-lisp:define-condition access-denied-exception
     (rekognition-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'access-denied-exception)))
(common-lisp:progn
 (common-lisp:defclass age-range common-lisp:nil
                       ((low :initarg :low :initform common-lisp:nil :type
                         (common-lisp:or uinteger common-lisp:null) :accessor
                         struct-shape-age-range-low :shape "UInteger" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (high :initarg :high :initform common-lisp:nil :type
                         (common-lisp:or uinteger common-lisp:null) :accessor
                         struct-shape-age-range-high :shape "UInteger"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-age-range
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'age-range
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'age-range 'make-age-range))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input age-range))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input age-range))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'low))
      (common-lisp:list
       (common-lisp:cons "Low"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'high))
      (common-lisp:list
       (common-lisp:cons "High"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input age-range))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass asset common-lisp:nil
                       ((ground-truth-manifest :initarg :ground-truth-manifest
                         :initform common-lisp:nil :type
                         (common-lisp:or ground-truth-manifest
                                         common-lisp:null)
                         :accessor struct-shape-asset-ground-truth-manifest
                         :shape "GroundTruthManifest" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-asset
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'asset
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'asset 'make-asset))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input asset))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input asset))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ground-truth-manifest))
      (common-lisp:list
       (common-lisp:cons "GroundTruthManifest"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input asset))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype assets () '(trivial-types:proper-list asset))
 (common-lisp:defun make-assets
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list asset))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass associate-faces-request common-lisp:nil
                       ((collection-id :initarg :collection-id :initform
                         (common-lisp:error ":collection-id is required") :type
                         (common-lisp:or collection-id common-lisp:null)
                         :accessor
                         struct-shape-associate-faces-request-collection-id
                         :shape "CollectionId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (user-id :initarg :user-id :initform
                         (common-lisp:error ":user-id is required") :type
                         (common-lisp:or user-id common-lisp:null) :accessor
                         struct-shape-associate-faces-request-user-id :shape
                         "UserId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (face-ids :initarg :face-ids :initform
                         (common-lisp:error ":face-ids is required") :type
                         (common-lisp:or user-face-id-list common-lisp:null)
                         :accessor
                         struct-shape-associate-faces-request-face-ids :shape
                         "UserFaceIdList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (user-match-threshold :initarg :user-match-threshold
                         :initform common-lisp:nil :type
                         (common-lisp:or percent common-lisp:null) :accessor
                         struct-shape-associate-faces-request-user-match-threshold
                         :shape "Percent" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (client-request-token :initarg :client-request-token
                         :initform common-lisp:nil :type
                         (common-lisp:or client-request-token common-lisp:null)
                         :accessor
                         struct-shape-associate-faces-request-client-request-token
                         :shape "ClientRequestToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-associate-faces-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'associate-faces-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'associate-faces-request 'make-associate-faces-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-faces-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-faces-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'collection-id))
      (common-lisp:list
       (common-lisp:cons "CollectionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-id))
      (common-lisp:list
       (common-lisp:cons "UserId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'face-ids))
      (common-lisp:list
       (common-lisp:cons "FaceIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'user-match-threshold))
      (common-lisp:list
       (common-lisp:cons "UserMatchThreshold"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "ClientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-faces-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass associate-faces-response common-lisp:nil
                       ((associated-faces :initarg :associated-faces :initform
                         common-lisp:nil :type
                         (common-lisp:or associated-faces-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-associate-faces-response-associated-faces
                         :shape "AssociatedFacesList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (unsuccessful-face-associations :initarg
                         :unsuccessful-face-associations :initform
                         common-lisp:nil :type
                         (common-lisp:or unsuccessful-face-association-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-associate-faces-response-unsuccessful-face-associations
                         :shape "UnsuccessfulFaceAssociationList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (user-status :initarg :user-status :initform
                         common-lisp:nil :type
                         (common-lisp:or user-status common-lisp:null)
                         :accessor
                         struct-shape-associate-faces-response-user-status
                         :shape "UserStatus" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-associate-faces-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'associate-faces-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'associate-faces-response 'make-associate-faces-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-faces-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-faces-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'associated-faces))
      (common-lisp:list
       (common-lisp:cons "AssociatedFaces"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'unsuccessful-face-associations))
      (common-lisp:list
       (common-lisp:cons "UnsuccessfulFaceAssociations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-status))
      (common-lisp:list
       (common-lisp:cons "UserStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-faces-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass associated-face common-lisp:nil
                       ((face-id :initarg :face-id :initform common-lisp:nil
                         :type (common-lisp:or face-id common-lisp:null)
                         :accessor struct-shape-associated-face-face-id :shape
                         "FaceId" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-associated-face
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'associated-face
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'associated-face 'make-associated-face))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input associated-face))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input associated-face))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'face-id))
      (common-lisp:list
       (common-lisp:cons "FaceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input associated-face))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype associated-faces-list ()
   '(trivial-types:proper-list associated-face))
 (common-lisp:defun make-associated-faces-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list associated-face))
   aws-sdk/generator/shape::members))
(common-lisp:deftype attribute () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype attributes () '(trivial-types:proper-list attribute))
 (common-lisp:defun make-attributes
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list attribute))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass audio-metadata common-lisp:nil
                       ((codec :initarg :codec :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-audio-metadata-codec :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (duration-millis :initarg :duration-millis :initform
                         common-lisp:nil :type
                         (common-lisp:or ulong common-lisp:null) :accessor
                         struct-shape-audio-metadata-duration-millis :shape
                         "ULong" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (sample-rate :initarg :sample-rate :initform
                         common-lisp:nil :type
                         (common-lisp:or ulong common-lisp:null) :accessor
                         struct-shape-audio-metadata-sample-rate :shape "ULong"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (number-of-channels :initarg :number-of-channels
                         :initform common-lisp:nil :type
                         (common-lisp:or ulong common-lisp:null) :accessor
                         struct-shape-audio-metadata-number-of-channels :shape
                         "ULong" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-audio-metadata
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'audio-metadata
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'audio-metadata 'make-audio-metadata))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input audio-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input audio-metadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'codec))
      (common-lisp:list
       (common-lisp:cons "Codec"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'duration-millis))
      (common-lisp:list
       (common-lisp:cons "DurationMillis"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sample-rate))
      (common-lisp:list
       (common-lisp:cons "SampleRate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'number-of-channels))
      (common-lisp:list
       (common-lisp:cons "NumberOfChannels"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input audio-metadata))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype audio-metadata-list ()
   '(trivial-types:proper-list audio-metadata))
 (common-lisp:defun make-audio-metadata-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list audio-metadata))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass audit-image common-lisp:nil
                       ((bytes :initarg :bytes :initform common-lisp:nil :type
                         (common-lisp:or liveness-image-blob common-lisp:null)
                         :accessor struct-shape-audit-image-bytes :shape
                         "LivenessImageBlob" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (s3object :initarg :s3object :initform common-lisp:nil
                         :type (common-lisp:or s3object common-lisp:null)
                         :accessor struct-shape-audit-image-s3object :shape
                         "S3Object" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (bounding-box :initarg :bounding-box :initform
                         common-lisp:nil :type
                         (common-lisp:or bounding-box common-lisp:null)
                         :accessor struct-shape-audit-image-bounding-box :shape
                         "BoundingBox" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-audit-image
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'audit-image
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'audit-image 'make-audit-image))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input audit-image))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input audit-image))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bytes))
      (common-lisp:list
       (common-lisp:cons "Bytes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3object))
      (common-lisp:list
       (common-lisp:cons "S3Object"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bounding-box))
      (common-lisp:list
       (common-lisp:cons "BoundingBox"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input audit-image))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype audit-images () '(trivial-types:proper-list audit-image))
 (common-lisp:defun make-audit-images
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list audit-image))
   aws-sdk/generator/shape::members))
(common-lisp:deftype audit-images-limit () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass beard common-lisp:nil
                       ((value :initarg :value :initform common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-beard-value :shape "Boolean" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (confidence :initarg :confidence :initform
                         common-lisp:nil :type
                         (common-lisp:or percent common-lisp:null) :accessor
                         struct-shape-beard-confidence :shape "Percent"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-beard
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'beard
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'beard 'make-beard))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input beard))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input beard))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'confidence))
      (common-lisp:list
       (common-lisp:cons "Confidence"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input beard))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass black-frame common-lisp:nil
                       ((max-pixel-threshold :initarg :max-pixel-threshold
                         :initform common-lisp:nil :type
                         (common-lisp:or max-pixel-threshold common-lisp:null)
                         :accessor struct-shape-black-frame-max-pixel-threshold
                         :shape "MaxPixelThreshold" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (min-coverage-percentage :initarg
                         :min-coverage-percentage :initform common-lisp:nil
                         :type
                         (common-lisp:or min-coverage-percentage
                                         common-lisp:null)
                         :accessor
                         struct-shape-black-frame-min-coverage-percentage
                         :shape "MinCoveragePercentage" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-black-frame
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'black-frame
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'black-frame 'make-black-frame))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input black-frame))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input black-frame))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-pixel-threshold))
      (common-lisp:list
       (common-lisp:cons "MaxPixelThreshold"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'min-coverage-percentage))
      (common-lisp:list
       (common-lisp:cons "MinCoveragePercentage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input black-frame))
   common-lisp:nil))
(common-lisp:deftype body-part () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype body-parts ()
   '(trivial-types:proper-list protective-equipment-body-part))
 (common-lisp:defun make-body-parts
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            protective-equipment-body-part))
   aws-sdk/generator/shape::members))
(common-lisp:deftype boolean () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defclass bounding-box common-lisp:nil
                       ((width :initarg :width :initform common-lisp:nil :type
                         (common-lisp:or float common-lisp:null) :accessor
                         struct-shape-bounding-box-width :shape "Float"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (height :initarg :height :initform common-lisp:nil
                         :type (common-lisp:or float common-lisp:null)
                         :accessor struct-shape-bounding-box-height :shape
                         "Float" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (left :initarg :left :initform common-lisp:nil :type
                         (common-lisp:or float common-lisp:null) :accessor
                         struct-shape-bounding-box-left :shape "Float"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (top :initarg :top :initform common-lisp:nil :type
                         (common-lisp:or float common-lisp:null) :accessor
                         struct-shape-bounding-box-top :shape "Float" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-bounding-box
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'bounding-box
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'bounding-box 'make-bounding-box))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input bounding-box))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input bounding-box))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'width))
      (common-lisp:list
       (common-lisp:cons "Width"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'height))
      (common-lisp:list
       (common-lisp:cons "Height"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'left))
      (common-lisp:list
       (common-lisp:cons "Left"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'top))
      (common-lisp:list
       (common-lisp:cons "Top"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input bounding-box))
   common-lisp:nil))
(common-lisp:deftype bounding-box-height () 'common-lisp:single-float)
(common-lisp:deftype bounding-box-width () 'common-lisp:single-float)
(common-lisp:progn
 (common-lisp:defclass celebrity common-lisp:nil
                       ((urls :initarg :urls :initform common-lisp:nil :type
                         (common-lisp:or urls common-lisp:null) :accessor
                         struct-shape-celebrity-urls :shape "Urls" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-celebrity-name :shape "String" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (id :initarg :id :initform common-lisp:nil :type
                         (common-lisp:or rekognition-unique-id
                                         common-lisp:null)
                         :accessor struct-shape-celebrity-id :shape
                         "RekognitionUniqueId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (face :initarg :face :initform common-lisp:nil :type
                         (common-lisp:or compared-face common-lisp:null)
                         :accessor struct-shape-celebrity-face :shape
                         "ComparedFace" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (match-confidence :initarg :match-confidence :initform
                         common-lisp:nil :type
                         (common-lisp:or percent common-lisp:null) :accessor
                         struct-shape-celebrity-match-confidence :shape
                         "Percent" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (known-gender :initarg :known-gender :initform
                         common-lisp:nil :type
                         (common-lisp:or known-gender common-lisp:null)
                         :accessor struct-shape-celebrity-known-gender :shape
                         "KnownGender" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-celebrity
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'celebrity
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'celebrity 'make-celebrity))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input celebrity))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input celebrity))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'urls))
      (common-lisp:list
       (common-lisp:cons "Urls"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'face))
      (common-lisp:list
       (common-lisp:cons "Face"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'match-confidence))
      (common-lisp:list
       (common-lisp:cons "MatchConfidence"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'known-gender))
      (common-lisp:list
       (common-lisp:cons "KnownGender"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input celebrity))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass celebrity-detail common-lisp:nil
                       ((urls :initarg :urls :initform common-lisp:nil :type
                         (common-lisp:or urls common-lisp:null) :accessor
                         struct-shape-celebrity-detail-urls :shape "Urls"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-celebrity-detail-name :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (id :initarg :id :initform common-lisp:nil :type
                         (common-lisp:or rekognition-unique-id
                                         common-lisp:null)
                         :accessor struct-shape-celebrity-detail-id :shape
                         "RekognitionUniqueId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (confidence :initarg :confidence :initform
                         common-lisp:nil :type
                         (common-lisp:or percent common-lisp:null) :accessor
                         struct-shape-celebrity-detail-confidence :shape
                         "Percent" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (bounding-box :initarg :bounding-box :initform
                         common-lisp:nil :type
                         (common-lisp:or bounding-box common-lisp:null)
                         :accessor struct-shape-celebrity-detail-bounding-box
                         :shape "BoundingBox" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (face :initarg :face :initform common-lisp:nil :type
                         (common-lisp:or face-detail common-lisp:null)
                         :accessor struct-shape-celebrity-detail-face :shape
                         "FaceDetail" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (known-gender :initarg :known-gender :initform
                         common-lisp:nil :type
                         (common-lisp:or known-gender common-lisp:null)
                         :accessor struct-shape-celebrity-detail-known-gender
                         :shape "KnownGender" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-celebrity-detail
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'celebrity-detail
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'celebrity-detail 'make-celebrity-detail))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input celebrity-detail))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input celebrity-detail))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'urls))
      (common-lisp:list
       (common-lisp:cons "Urls"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'confidence))
      (common-lisp:list
       (common-lisp:cons "Confidence"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bounding-box))
      (common-lisp:list
       (common-lisp:cons "BoundingBox"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'face))
      (common-lisp:list
       (common-lisp:cons "Face"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'known-gender))
      (common-lisp:list
       (common-lisp:cons "KnownGender"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input celebrity-detail))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype celebrity-list () '(trivial-types:proper-list celebrity))
 (common-lisp:defun make-celebrity-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list celebrity))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass celebrity-recognition common-lisp:nil
                       ((timestamp :initarg :timestamp :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-celebrity-recognition-timestamp :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (celebrity :initarg :celebrity :initform
                         common-lisp:nil :type
                         (common-lisp:or celebrity-detail common-lisp:null)
                         :accessor struct-shape-celebrity-recognition-celebrity
                         :shape "CelebrityDetail" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-celebrity-recognition
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'celebrity-recognition
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'celebrity-recognition 'make-celebrity-recognition))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          celebrity-recognition))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          celebrity-recognition))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timestamp))
      (common-lisp:list
       (common-lisp:cons "Timestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'celebrity))
      (common-lisp:list
       (common-lisp:cons "Celebrity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          celebrity-recognition))
   common-lisp:nil))
(common-lisp:deftype celebrity-recognition-sort-by () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype celebrity-recognitions ()
   '(trivial-types:proper-list celebrity-recognition))
 (common-lisp:defun make-celebrity-recognitions
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list celebrity-recognition))
   aws-sdk/generator/shape::members))
(common-lisp:deftype client-request-token () 'common-lisp:string)
(common-lisp:deftype collection-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype collection-id-list ()
   '(trivial-types:proper-list collection-id))
 (common-lisp:defun make-collection-id-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list collection-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass compare-faces-match common-lisp:nil
                       ((similarity :initarg :similarity :initform
                         common-lisp:nil :type
                         (common-lisp:or percent common-lisp:null) :accessor
                         struct-shape-compare-faces-match-similarity :shape
                         "Percent" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (face :initarg :face :initform common-lisp:nil :type
                         (common-lisp:or compared-face common-lisp:null)
                         :accessor struct-shape-compare-faces-match-face :shape
                         "ComparedFace" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-compare-faces-match
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'compare-faces-match
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'compare-faces-match 'make-compare-faces-match))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input compare-faces-match))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input compare-faces-match))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'similarity))
      (common-lisp:list
       (common-lisp:cons "Similarity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'face))
      (common-lisp:list
       (common-lisp:cons "Face"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input compare-faces-match))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype compare-faces-match-list ()
   '(trivial-types:proper-list compare-faces-match))
 (common-lisp:defun make-compare-faces-match-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list compare-faces-match))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass compare-faces-request common-lisp:nil
                       ((source-image :initarg :source-image :initform
                         (common-lisp:error ":source-image is required") :type
                         (common-lisp:or image common-lisp:null) :accessor
                         struct-shape-compare-faces-request-source-image :shape
                         "Image" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (target-image :initarg :target-image :initform
                         (common-lisp:error ":target-image is required") :type
                         (common-lisp:or image common-lisp:null) :accessor
                         struct-shape-compare-faces-request-target-image :shape
                         "Image" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (similarity-threshold :initarg :similarity-threshold
                         :initform common-lisp:nil :type
                         (common-lisp:or percent common-lisp:null) :accessor
                         struct-shape-compare-faces-request-similarity-threshold
                         :shape "Percent" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (quality-filter :initarg :quality-filter :initform
                         common-lisp:nil :type
                         (common-lisp:or quality-filter common-lisp:null)
                         :accessor
                         struct-shape-compare-faces-request-quality-filter
                         :shape "QualityFilter" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-compare-faces-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'compare-faces-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'compare-faces-request 'make-compare-faces-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          compare-faces-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          compare-faces-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-image))
      (common-lisp:list
       (common-lisp:cons "SourceImage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-image))
      (common-lisp:list
       (common-lisp:cons "TargetImage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'similarity-threshold))
      (common-lisp:list
       (common-lisp:cons "SimilarityThreshold"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'quality-filter))
      (common-lisp:list
       (common-lisp:cons "QualityFilter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          compare-faces-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass compare-faces-response common-lisp:nil
                       ((source-image-face :initarg :source-image-face
                         :initform common-lisp:nil :type
                         (common-lisp:or compared-source-image-face
                                         common-lisp:null)
                         :accessor
                         struct-shape-compare-faces-response-source-image-face
                         :shape "ComparedSourceImageFace" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (face-matches :initarg :face-matches :initform
                         common-lisp:nil :type
                         (common-lisp:or compare-faces-match-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-compare-faces-response-face-matches
                         :shape "CompareFacesMatchList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (unmatched-faces :initarg :unmatched-faces :initform
                         common-lisp:nil :type
                         (common-lisp:or compare-faces-unmatch-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-compare-faces-response-unmatched-faces
                         :shape "CompareFacesUnmatchList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (source-image-orientation-correction :initarg
                         :source-image-orientation-correction :initform
                         common-lisp:nil :type
                         (common-lisp:or orientation-correction
                                         common-lisp:null)
                         :accessor
                         struct-shape-compare-faces-response-source-image-orientation-correction
                         :shape "OrientationCorrection" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (target-image-orientation-correction :initarg
                         :target-image-orientation-correction :initform
                         common-lisp:nil :type
                         (common-lisp:or orientation-correction
                                         common-lisp:null)
                         :accessor
                         struct-shape-compare-faces-response-target-image-orientation-correction
                         :shape "OrientationCorrection" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-compare-faces-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'compare-faces-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'compare-faces-response 'make-compare-faces-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          compare-faces-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          compare-faces-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-image-face))
      (common-lisp:list
       (common-lisp:cons "SourceImageFace"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'face-matches))
      (common-lisp:list
       (common-lisp:cons "FaceMatches"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'unmatched-faces))
      (common-lisp:list
       (common-lisp:cons "UnmatchedFaces"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-image-orientation-correction))
      (common-lisp:list
       (common-lisp:cons "SourceImageOrientationCorrection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'target-image-orientation-correction))
      (common-lisp:list
       (common-lisp:cons "TargetImageOrientationCorrection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          compare-faces-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype compare-faces-unmatch-list ()
   '(trivial-types:proper-list compared-face))
 (common-lisp:defun make-compare-faces-unmatch-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list compared-face))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass compared-face common-lisp:nil
                       ((bounding-box :initarg :bounding-box :initform
                         common-lisp:nil :type
                         (common-lisp:or bounding-box common-lisp:null)
                         :accessor struct-shape-compared-face-bounding-box
                         :shape "BoundingBox" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (confidence :initarg :confidence :initform
                         common-lisp:nil :type
                         (common-lisp:or percent common-lisp:null) :accessor
                         struct-shape-compared-face-confidence :shape "Percent"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (landmarks :initarg :landmarks :initform
                         common-lisp:nil :type
                         (common-lisp:or landmarks common-lisp:null) :accessor
                         struct-shape-compared-face-landmarks :shape
                         "Landmarks" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (pose :initarg :pose :initform common-lisp:nil :type
                         (common-lisp:or pose common-lisp:null) :accessor
                         struct-shape-compared-face-pose :shape "Pose"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (quality :initarg :quality :initform common-lisp:nil
                         :type (common-lisp:or image-quality common-lisp:null)
                         :accessor struct-shape-compared-face-quality :shape
                         "ImageQuality" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (emotions :initarg :emotions :initform common-lisp:nil
                         :type (common-lisp:or emotions common-lisp:null)
                         :accessor struct-shape-compared-face-emotions :shape
                         "Emotions" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (smile :initarg :smile :initform common-lisp:nil :type
                         (common-lisp:or smile common-lisp:null) :accessor
                         struct-shape-compared-face-smile :shape "Smile"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-compared-face
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'compared-face
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'compared-face 'make-compared-face))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input compared-face))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input compared-face))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bounding-box))
      (common-lisp:list
       (common-lisp:cons "BoundingBox"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'confidence))
      (common-lisp:list
       (common-lisp:cons "Confidence"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'landmarks))
      (common-lisp:list
       (common-lisp:cons "Landmarks"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pose))
      (common-lisp:list
       (common-lisp:cons "Pose"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'quality))
      (common-lisp:list
       (common-lisp:cons "Quality"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'emotions))
      (common-lisp:list
       (common-lisp:cons "Emotions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'smile))
      (common-lisp:list
       (common-lisp:cons "Smile"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input compared-face))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype compared-face-list ()
   '(trivial-types:proper-list compared-face))
 (common-lisp:defun make-compared-face-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list compared-face))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass compared-source-image-face common-lisp:nil
                       ((bounding-box :initarg :bounding-box :initform
                         common-lisp:nil :type
                         (common-lisp:or bounding-box common-lisp:null)
                         :accessor
                         struct-shape-compared-source-image-face-bounding-box
                         :shape "BoundingBox" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (confidence :initarg :confidence :initform
                         common-lisp:nil :type
                         (common-lisp:or percent common-lisp:null) :accessor
                         struct-shape-compared-source-image-face-confidence
                         :shape "Percent" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-compared-source-image-face
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'compared-source-image-face
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'compared-source-image-face
                    'make-compared-source-image-face))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          compared-source-image-face))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          compared-source-image-face))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bounding-box))
      (common-lisp:list
       (common-lisp:cons "BoundingBox"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'confidence))
      (common-lisp:list
       (common-lisp:cons "Confidence"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          compared-source-image-face))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition conflict-exception
     (rekognition-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'conflict-exception)))
(common-lisp:deftype connected-home-label () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype connected-home-labels ()
   '(trivial-types:proper-list connected-home-label))
 (common-lisp:defun make-connected-home-labels
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list connected-home-label))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass connected-home-settings common-lisp:nil
                       ((labels :initarg :labels :initform
                         (common-lisp:error ":labels is required") :type
                         (common-lisp:or connected-home-labels
                                         common-lisp:null)
                         :accessor struct-shape-connected-home-settings-labels
                         :shape "ConnectedHomeLabels" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (min-confidence :initarg :min-confidence :initform
                         common-lisp:nil :type
                         (common-lisp:or percent common-lisp:null) :accessor
                         struct-shape-connected-home-settings-min-confidence
                         :shape "Percent" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-connected-home-settings
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'connected-home-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'connected-home-settings 'make-connected-home-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          connected-home-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          connected-home-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'labels))
      (common-lisp:list
       (common-lisp:cons "Labels"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'min-confidence))
      (common-lisp:list
       (common-lisp:cons "MinConfidence"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          connected-home-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass connected-home-settings-for-update common-lisp:nil
                       ((labels :initarg :labels :initform common-lisp:nil
                         :type
                         (common-lisp:or connected-home-labels
                                         common-lisp:null)
                         :accessor
                         struct-shape-connected-home-settings-for-update-labels
                         :shape "ConnectedHomeLabels" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (min-confidence :initarg :min-confidence :initform
                         common-lisp:nil :type
                         (common-lisp:or percent common-lisp:null) :accessor
                         struct-shape-connected-home-settings-for-update-min-confidence
                         :shape "Percent" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-connected-home-settings-for-update
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'connected-home-settings-for-update
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'connected-home-settings-for-update
                    'make-connected-home-settings-for-update))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          connected-home-settings-for-update))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          connected-home-settings-for-update))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'labels))
      (common-lisp:list
       (common-lisp:cons "Labels"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'min-confidence))
      (common-lisp:list
       (common-lisp:cons "MinConfidence"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          connected-home-settings-for-update))
   common-lisp:nil))
(common-lisp:deftype content-classifier () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype content-classifiers ()
   '(trivial-types:proper-list content-classifier))
 (common-lisp:defun make-content-classifiers
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list content-classifier))
   aws-sdk/generator/shape::members))
(common-lisp:deftype content-moderation-aggregate-by () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass content-moderation-detection common-lisp:nil
                       ((timestamp :initarg :timestamp :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-content-moderation-detection-timestamp
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (moderation-label :initarg :moderation-label :initform
                         common-lisp:nil :type
                         (common-lisp:or moderation-label common-lisp:null)
                         :accessor
                         struct-shape-content-moderation-detection-moderation-label
                         :shape "ModerationLabel" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (start-timestamp-millis :initarg
                         :start-timestamp-millis :initform common-lisp:nil
                         :type (common-lisp:or ulong common-lisp:null)
                         :accessor
                         struct-shape-content-moderation-detection-start-timestamp-millis
                         :shape "ULong" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (end-timestamp-millis :initarg :end-timestamp-millis
                         :initform common-lisp:nil :type
                         (common-lisp:or ulong common-lisp:null) :accessor
                         struct-shape-content-moderation-detection-end-timestamp-millis
                         :shape "ULong" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (duration-millis :initarg :duration-millis :initform
                         common-lisp:nil :type
                         (common-lisp:or ulong common-lisp:null) :accessor
                         struct-shape-content-moderation-detection-duration-millis
                         :shape "ULong" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-content-moderation-detection
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'content-moderation-detection
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'content-moderation-detection
                    'make-content-moderation-detection))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          content-moderation-detection))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          content-moderation-detection))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timestamp))
      (common-lisp:list
       (common-lisp:cons "Timestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'moderation-label))
      (common-lisp:list
       (common-lisp:cons "ModerationLabel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'start-timestamp-millis))
      (common-lisp:list
       (common-lisp:cons "StartTimestampMillis"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'end-timestamp-millis))
      (common-lisp:list
       (common-lisp:cons "EndTimestampMillis"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'duration-millis))
      (common-lisp:list
       (common-lisp:cons "DurationMillis"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          content-moderation-detection))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype content-moderation-detections ()
   '(trivial-types:proper-list content-moderation-detection))
 (common-lisp:defun make-content-moderation-detections
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            content-moderation-detection))
   aws-sdk/generator/shape::members))
(common-lisp:deftype content-moderation-sort-by () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass content-type common-lisp:nil
                       ((confidence :initarg :confidence :initform
                         common-lisp:nil :type
                         (common-lisp:or percent common-lisp:null) :accessor
                         struct-shape-content-type-confidence :shape "Percent"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-content-type-name :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-content-type
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'content-type
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'content-type 'make-content-type))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input content-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input content-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'confidence))
      (common-lisp:list
       (common-lisp:cons "Confidence"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input content-type))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype content-types ()
   '(trivial-types:proper-list content-type))
 (common-lisp:defun make-content-types
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list content-type))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass copy-project-version-request common-lisp:nil
                       ((source-project-arn :initarg :source-project-arn
                         :initform
                         (common-lisp:error ":source-project-arn is required")
                         :type (common-lisp:or project-arn common-lisp:null)
                         :accessor
                         struct-shape-copy-project-version-request-source-project-arn
                         :shape "ProjectArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (source-project-version-arn :initarg
                         :source-project-version-arn :initform
                         (common-lisp:error
                          ":source-project-version-arn is required")
                         :type
                         (common-lisp:or project-version-arn common-lisp:null)
                         :accessor
                         struct-shape-copy-project-version-request-source-project-version-arn
                         :shape "ProjectVersionArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (destination-project-arn :initarg
                         :destination-project-arn :initform
                         (common-lisp:error
                          ":destination-project-arn is required")
                         :type (common-lisp:or project-arn common-lisp:null)
                         :accessor
                         struct-shape-copy-project-version-request-destination-project-arn
                         :shape "ProjectArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (version-name :initarg :version-name :initform
                         (common-lisp:error ":version-name is required") :type
                         (common-lisp:or version-name common-lisp:null)
                         :accessor
                         struct-shape-copy-project-version-request-version-name
                         :shape "VersionName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (output-config :initarg :output-config :initform
                         (common-lisp:error ":output-config is required") :type
                         (common-lisp:or output-config common-lisp:null)
                         :accessor
                         struct-shape-copy-project-version-request-output-config
                         :shape "OutputConfig" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         struct-shape-copy-project-version-request-tags :shape
                         "TagMap" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (kms-key-id :initarg :kms-key-id :initform
                         common-lisp:nil :type
                         (common-lisp:or kms-key-id common-lisp:null) :accessor
                         struct-shape-copy-project-version-request-kms-key-id
                         :shape "KmsKeyId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-copy-project-version-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'copy-project-version-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'copy-project-version-request
                    'make-copy-project-version-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          copy-project-version-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          copy-project-version-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-project-arn))
      (common-lisp:list
       (common-lisp:cons "SourceProjectArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-project-version-arn))
      (common-lisp:list
       (common-lisp:cons "SourceProjectVersionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'destination-project-arn))
      (common-lisp:list
       (common-lisp:cons "DestinationProjectArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-name))
      (common-lisp:list
       (common-lisp:cons "VersionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-config))
      (common-lisp:list
       (common-lisp:cons "OutputConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "KmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          copy-project-version-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass copy-project-version-response common-lisp:nil
                       ((project-version-arn :initarg :project-version-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or project-version-arn common-lisp:null)
                         :accessor
                         struct-shape-copy-project-version-response-project-version-arn
                         :shape "ProjectVersionArn" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-copy-project-version-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'copy-project-version-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'copy-project-version-response
                    'make-copy-project-version-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          copy-project-version-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          copy-project-version-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'project-version-arn))
      (common-lisp:list
       (common-lisp:cons "ProjectVersionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          copy-project-version-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass covers-body-part common-lisp:nil
                       ((confidence :initarg :confidence :initform
                         common-lisp:nil :type
                         (common-lisp:or percent common-lisp:null) :accessor
                         struct-shape-covers-body-part-confidence :shape
                         "Percent" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (value :initarg :value :initform common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-covers-body-part-value :shape "Boolean"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-covers-body-part
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'covers-body-part
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'covers-body-part 'make-covers-body-part))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input covers-body-part))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input covers-body-part))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'confidence))
      (common-lisp:list
       (common-lisp:cons "Confidence"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input covers-body-part))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-collection-request common-lisp:nil
                       ((collection-id :initarg :collection-id :initform
                         (common-lisp:error ":collection-id is required") :type
                         (common-lisp:or collection-id common-lisp:null)
                         :accessor
                         struct-shape-create-collection-request-collection-id
                         :shape "CollectionId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         struct-shape-create-collection-request-tags :shape
                         "TagMap" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-collection-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-collection-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-collection-request
                    'make-create-collection-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-collection-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-collection-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'collection-id))
      (common-lisp:list
       (common-lisp:cons "CollectionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-collection-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-collection-response common-lisp:nil
                       ((status-code :initarg :status-code :initform
                         common-lisp:nil :type
                         (common-lisp:or uinteger common-lisp:null) :accessor
                         struct-shape-create-collection-response-status-code
                         :shape "UInteger" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (collection-arn :initarg :collection-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-collection-response-collection-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (face-model-version :initarg :face-model-version
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-collection-response-face-model-version
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-collection-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-collection-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-collection-response
                    'make-create-collection-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-collection-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-collection-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-code))
      (common-lisp:list
       (common-lisp:cons "StatusCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'collection-arn))
      (common-lisp:list
       (common-lisp:cons "CollectionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'face-model-version))
      (common-lisp:list
       (common-lisp:cons "FaceModelVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-collection-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-dataset-request common-lisp:nil
                       ((dataset-source :initarg :dataset-source :initform
                         common-lisp:nil :type
                         (common-lisp:or dataset-source common-lisp:null)
                         :accessor
                         struct-shape-create-dataset-request-dataset-source
                         :shape "DatasetSource" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dataset-type :initarg :dataset-type :initform
                         (common-lisp:error ":dataset-type is required") :type
                         (common-lisp:or dataset-type common-lisp:null)
                         :accessor
                         struct-shape-create-dataset-request-dataset-type
                         :shape "DatasetType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (project-arn :initarg :project-arn :initform
                         (common-lisp:error ":project-arn is required") :type
                         (common-lisp:or project-arn common-lisp:null)
                         :accessor
                         struct-shape-create-dataset-request-project-arn :shape
                         "ProjectArn" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-dataset-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-dataset-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-dataset-request 'make-create-dataset-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-dataset-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-dataset-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dataset-source))
      (common-lisp:list
       (common-lisp:cons "DatasetSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dataset-type))
      (common-lisp:list
       (common-lisp:cons "DatasetType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'project-arn))
      (common-lisp:list
       (common-lisp:cons "ProjectArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-dataset-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-dataset-response common-lisp:nil
                       ((dataset-arn :initarg :dataset-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or dataset-arn common-lisp:null)
                         :accessor
                         struct-shape-create-dataset-response-dataset-arn
                         :shape "DatasetArn" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-dataset-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-dataset-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-dataset-response 'make-create-dataset-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-dataset-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-dataset-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dataset-arn))
      (common-lisp:list
       (common-lisp:cons "DatasetArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-dataset-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-face-liveness-session-request common-lisp:nil
                       ((kms-key-id :initarg :kms-key-id :initform
                         common-lisp:nil :type
                         (common-lisp:or kms-key-id common-lisp:null) :accessor
                         struct-shape-create-face-liveness-session-request-kms-key-id
                         :shape "KmsKeyId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (settings :initarg :settings :initform common-lisp:nil
                         :type
                         (common-lisp:or
                          create-face-liveness-session-request-settings
                          common-lisp:null)
                         :accessor
                         struct-shape-create-face-liveness-session-request-settings
                         :shape "CreateFaceLivenessSessionRequestSettings"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (client-request-token :initarg :client-request-token
                         :initform common-lisp:nil :type
                         (common-lisp:or client-request-token common-lisp:null)
                         :accessor
                         struct-shape-create-face-liveness-session-request-client-request-token
                         :shape "ClientRequestToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-face-liveness-session-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-face-liveness-session-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-face-liveness-session-request
                    'make-create-face-liveness-session-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-face-liveness-session-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-face-liveness-session-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "KmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'settings))
      (common-lisp:list
       (common-lisp:cons "Settings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "ClientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-face-liveness-session-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-face-liveness-session-request-settings
                       common-lisp:nil
                       ((output-config :initarg :output-config :initform
                         common-lisp:nil :type
                         (common-lisp:or liveness-output-config
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-face-liveness-session-request-settings-output-config
                         :shape "LivenessOutputConfig" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (audit-images-limit :initarg :audit-images-limit
                         :initform common-lisp:nil :type
                         (common-lisp:or audit-images-limit common-lisp:null)
                         :accessor
                         struct-shape-create-face-liveness-session-request-settings-audit-images-limit
                         :shape "AuditImagesLimit" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-face-liveness-session-request-settings
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-face-liveness-session-request-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-face-liveness-session-request-settings
                    'make-create-face-liveness-session-request-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-face-liveness-session-request-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-face-liveness-session-request-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-config))
      (common-lisp:list
       (common-lisp:cons "OutputConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'audit-images-limit))
      (common-lisp:list
       (common-lisp:cons "AuditImagesLimit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-face-liveness-session-request-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-face-liveness-session-response common-lisp:nil
                       ((session-id :initarg :session-id :initform
                         (common-lisp:error ":session-id is required") :type
                         (common-lisp:or liveness-session-id common-lisp:null)
                         :accessor
                         struct-shape-create-face-liveness-session-response-session-id
                         :shape "LivenessSessionId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-face-liveness-session-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-face-liveness-session-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-face-liveness-session-response
                    'make-create-face-liveness-session-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-face-liveness-session-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-face-liveness-session-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session-id))
      (common-lisp:list
       (common-lisp:cons "SessionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-face-liveness-session-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-project-request common-lisp:nil
                       ((project-name :initarg :project-name :initform
                         (common-lisp:error ":project-name is required") :type
                         (common-lisp:or project-name common-lisp:null)
                         :accessor
                         struct-shape-create-project-request-project-name
                         :shape "ProjectName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (feature :initarg :feature :initform common-lisp:nil
                         :type
                         (common-lisp:or customization-feature
                                         common-lisp:null)
                         :accessor struct-shape-create-project-request-feature
                         :shape "CustomizationFeature" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (auto-update :initarg :auto-update :initform
                         common-lisp:nil :type
                         (common-lisp:or project-auto-update common-lisp:null)
                         :accessor
                         struct-shape-create-project-request-auto-update :shape
                         "ProjectAutoUpdate" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-project-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-project-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-project-request 'make-create-project-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-project-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-project-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'project-name))
      (common-lisp:list
       (common-lisp:cons "ProjectName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'feature))
      (common-lisp:list
       (common-lisp:cons "Feature"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auto-update))
      (common-lisp:list
       (common-lisp:cons "AutoUpdate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-project-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-project-response common-lisp:nil
                       ((project-arn :initarg :project-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or project-arn common-lisp:null)
                         :accessor
                         struct-shape-create-project-response-project-arn
                         :shape "ProjectArn" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-project-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-project-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-project-response 'make-create-project-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-project-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-project-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'project-arn))
      (common-lisp:list
       (common-lisp:cons "ProjectArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-project-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-project-version-request common-lisp:nil
                       ((project-arn :initarg :project-arn :initform
                         (common-lisp:error ":project-arn is required") :type
                         (common-lisp:or project-arn common-lisp:null)
                         :accessor
                         struct-shape-create-project-version-request-project-arn
                         :shape "ProjectArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (version-name :initarg :version-name :initform
                         (common-lisp:error ":version-name is required") :type
                         (common-lisp:or version-name common-lisp:null)
                         :accessor
                         struct-shape-create-project-version-request-version-name
                         :shape "VersionName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (output-config :initarg :output-config :initform
                         (common-lisp:error ":output-config is required") :type
                         (common-lisp:or output-config common-lisp:null)
                         :accessor
                         struct-shape-create-project-version-request-output-config
                         :shape "OutputConfig" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (training-data :initarg :training-data :initform
                         common-lisp:nil :type
                         (common-lisp:or training-data common-lisp:null)
                         :accessor
                         struct-shape-create-project-version-request-training-data
                         :shape "TrainingData" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (testing-data :initarg :testing-data :initform
                         common-lisp:nil :type
                         (common-lisp:or testing-data common-lisp:null)
                         :accessor
                         struct-shape-create-project-version-request-testing-data
                         :shape "TestingData" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         struct-shape-create-project-version-request-tags
                         :shape "TagMap" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (kms-key-id :initarg :kms-key-id :initform
                         common-lisp:nil :type
                         (common-lisp:or kms-key-id common-lisp:null) :accessor
                         struct-shape-create-project-version-request-kms-key-id
                         :shape "KmsKeyId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (version-description :initarg :version-description
                         :initform common-lisp:nil :type
                         (common-lisp:or version-description common-lisp:null)
                         :accessor
                         struct-shape-create-project-version-request-version-description
                         :shape "VersionDescription" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (feature-config :initarg :feature-config :initform
                         common-lisp:nil :type
                         (common-lisp:or customization-feature-config
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-project-version-request-feature-config
                         :shape "CustomizationFeatureConfig" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-project-version-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-project-version-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-project-version-request
                    'make-create-project-version-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-project-version-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-project-version-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'project-arn))
      (common-lisp:list
       (common-lisp:cons "ProjectArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-name))
      (common-lisp:list
       (common-lisp:cons "VersionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-config))
      (common-lisp:list
       (common-lisp:cons "OutputConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'training-data))
      (common-lisp:list
       (common-lisp:cons "TrainingData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'testing-data))
      (common-lisp:list
       (common-lisp:cons "TestingData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "KmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-description))
      (common-lisp:list
       (common-lisp:cons "VersionDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'feature-config))
      (common-lisp:list
       (common-lisp:cons "FeatureConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-project-version-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-project-version-response common-lisp:nil
                       ((project-version-arn :initarg :project-version-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or project-version-arn common-lisp:null)
                         :accessor
                         struct-shape-create-project-version-response-project-version-arn
                         :shape "ProjectVersionArn" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-project-version-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-project-version-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-project-version-response
                    'make-create-project-version-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-project-version-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-project-version-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'project-version-arn))
      (common-lisp:list
       (common-lisp:cons "ProjectVersionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-project-version-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-stream-processor-request common-lisp:nil
                       ((input :initarg :input :initform
                         (common-lisp:error ":input is required") :type
                         (common-lisp:or stream-processor-input
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-stream-processor-request-input
                         :shape "StreamProcessorInput" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (output :initarg :output :initform
                         (common-lisp:error ":output is required") :type
                         (common-lisp:or stream-processor-output
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-stream-processor-request-output
                         :shape "StreamProcessorOutput" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or stream-processor-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-stream-processor-request-name
                         :shape "StreamProcessorName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (settings :initarg :settings :initform
                         (common-lisp:error ":settings is required") :type
                         (common-lisp:or stream-processor-settings
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-stream-processor-request-settings
                         :shape "StreamProcessorSettings" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (role-arn :initarg :role-arn :initform
                         (common-lisp:error ":role-arn is required") :type
                         (common-lisp:or role-arn common-lisp:null) :accessor
                         struct-shape-create-stream-processor-request-role-arn
                         :shape "RoleArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         struct-shape-create-stream-processor-request-tags
                         :shape "TagMap" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (notification-channel :initarg :notification-channel
                         :initform common-lisp:nil :type
                         (common-lisp:or stream-processor-notification-channel
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-stream-processor-request-notification-channel
                         :shape "StreamProcessorNotificationChannel" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (kms-key-id :initarg :kms-key-id :initform
                         common-lisp:nil :type
                         (common-lisp:or kms-key-id common-lisp:null) :accessor
                         struct-shape-create-stream-processor-request-kms-key-id
                         :shape "KmsKeyId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (regions-of-interest :initarg :regions-of-interest
                         :initform common-lisp:nil :type
                         (common-lisp:or regions-of-interest common-lisp:null)
                         :accessor
                         struct-shape-create-stream-processor-request-regions-of-interest
                         :shape "RegionsOfInterest" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (data-sharing-preference :initarg
                         :data-sharing-preference :initform common-lisp:nil
                         :type
                         (common-lisp:or
                          stream-processor-data-sharing-preference
                          common-lisp:null)
                         :accessor
                         struct-shape-create-stream-processor-request-data-sharing-preference
                         :shape "StreamProcessorDataSharingPreference"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-stream-processor-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-stream-processor-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-stream-processor-request
                    'make-create-stream-processor-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-stream-processor-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-stream-processor-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input))
      (common-lisp:list
       (common-lisp:cons "Input"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output))
      (common-lisp:list
       (common-lisp:cons "Output"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'settings))
      (common-lisp:list
       (common-lisp:cons "Settings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'notification-channel))
      (common-lisp:list
       (common-lisp:cons "NotificationChannel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "KmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'regions-of-interest))
      (common-lisp:list
       (common-lisp:cons "RegionsOfInterest"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-sharing-preference))
      (common-lisp:list
       (common-lisp:cons "DataSharingPreference"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-stream-processor-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-stream-processor-response common-lisp:nil
                       ((stream-processor-arn :initarg :stream-processor-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or stream-processor-arn common-lisp:null)
                         :accessor
                         struct-shape-create-stream-processor-response-stream-processor-arn
                         :shape "StreamProcessorArn" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-stream-processor-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-stream-processor-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-stream-processor-response
                    'make-create-stream-processor-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-stream-processor-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-stream-processor-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'stream-processor-arn))
      (common-lisp:list
       (common-lisp:cons "StreamProcessorArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-stream-processor-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-user-request common-lisp:nil
                       ((collection-id :initarg :collection-id :initform
                         (common-lisp:error ":collection-id is required") :type
                         (common-lisp:or collection-id common-lisp:null)
                         :accessor
                         struct-shape-create-user-request-collection-id :shape
                         "CollectionId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (user-id :initarg :user-id :initform
                         (common-lisp:error ":user-id is required") :type
                         (common-lisp:or user-id common-lisp:null) :accessor
                         struct-shape-create-user-request-user-id :shape
                         "UserId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (client-request-token :initarg :client-request-token
                         :initform common-lisp:nil :type
                         (common-lisp:or client-request-token common-lisp:null)
                         :accessor
                         struct-shape-create-user-request-client-request-token
                         :shape "ClientRequestToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-user-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-user-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-user-request 'make-create-user-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-user-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-user-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'collection-id))
      (common-lisp:list
       (common-lisp:cons "CollectionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-id))
      (common-lisp:list
       (common-lisp:cons "UserId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "ClientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-user-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-user-response common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-user-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-user-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-user-response 'make-create-user-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-user-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-user-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-user-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass custom-label common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-custom-label-name :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (confidence :initarg :confidence :initform
                         common-lisp:nil :type
                         (common-lisp:or percent common-lisp:null) :accessor
                         struct-shape-custom-label-confidence :shape "Percent"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (geometry :initarg :geometry :initform common-lisp:nil
                         :type (common-lisp:or geometry common-lisp:null)
                         :accessor struct-shape-custom-label-geometry :shape
                         "Geometry" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-custom-label
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'custom-label
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'custom-label 'make-custom-label))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input custom-label))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input custom-label))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'confidence))
      (common-lisp:list
       (common-lisp:cons "Confidence"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'geometry))
      (common-lisp:list
       (common-lisp:cons "Geometry"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input custom-label))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype custom-labels ()
   '(trivial-types:proper-list custom-label))
 (common-lisp:defun make-custom-labels
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list custom-label))
   aws-sdk/generator/shape::members))
(common-lisp:deftype customization-feature () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass customization-feature-config common-lisp:nil
                       ((content-moderation :initarg :content-moderation
                         :initform common-lisp:nil :type
                         (common-lisp:or
                          customization-feature-content-moderation-config
                          common-lisp:null)
                         :accessor
                         struct-shape-customization-feature-config-content-moderation
                         :shape "CustomizationFeatureContentModerationConfig"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-customization-feature-config
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'customization-feature-config
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'customization-feature-config
                    'make-customization-feature-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          customization-feature-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          customization-feature-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-moderation))
      (common-lisp:list
       (common-lisp:cons "ContentModeration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          customization-feature-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass customization-feature-content-moderation-config
                       common-lisp:nil
                       ((confidence-threshold :initarg :confidence-threshold
                         :initform common-lisp:nil :type
                         (common-lisp:or percent common-lisp:null) :accessor
                         struct-shape-customization-feature-content-moderation-config-confidence-threshold
                         :shape "Percent" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-customization-feature-content-moderation-config
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'customization-feature-content-moderation-config
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'customization-feature-content-moderation-config
                    'make-customization-feature-content-moderation-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          customization-feature-content-moderation-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          customization-feature-content-moderation-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'confidence-threshold))
      (common-lisp:list
       (common-lisp:cons "ConfidenceThreshold"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          customization-feature-content-moderation-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype customization-features ()
   '(trivial-types:proper-list customization-feature))
 (common-lisp:defun make-customization-features
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list customization-feature))
   aws-sdk/generator/shape::members))
(common-lisp:deftype dataset-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass dataset-changes common-lisp:nil
                       ((ground-truth :initarg :ground-truth :initform
                         (common-lisp:error ":ground-truth is required") :type
                         (common-lisp:or ground-truth-blob common-lisp:null)
                         :accessor struct-shape-dataset-changes-ground-truth
                         :shape "GroundTruthBlob" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-dataset-changes
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'dataset-changes
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'dataset-changes 'make-dataset-changes))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input dataset-changes))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input dataset-changes))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ground-truth))
      (common-lisp:list
       (common-lisp:cons "GroundTruth"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input dataset-changes))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass dataset-description common-lisp:nil
                       ((creation-timestamp :initarg :creation-timestamp
                         :initform common-lisp:nil :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         struct-shape-dataset-description-creation-timestamp
                         :shape "DateTime" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-updated-timestamp :initarg
                         :last-updated-timestamp :initform common-lisp:nil
                         :type (common-lisp:or date-time common-lisp:null)
                         :accessor
                         struct-shape-dataset-description-last-updated-timestamp
                         :shape "DateTime" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or dataset-status common-lisp:null)
                         :accessor struct-shape-dataset-description-status
                         :shape "DatasetStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status-message :initarg :status-message :initform
                         common-lisp:nil :type
                         (common-lisp:or status-message common-lisp:null)
                         :accessor
                         struct-shape-dataset-description-status-message :shape
                         "StatusMessage" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status-message-code :initarg :status-message-code
                         :initform common-lisp:nil :type
                         (common-lisp:or dataset-status-message-code
                                         common-lisp:null)
                         :accessor
                         struct-shape-dataset-description-status-message-code
                         :shape "DatasetStatusMessageCode" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (dataset-stats :initarg :dataset-stats :initform
                         common-lisp:nil :type
                         (common-lisp:or dataset-stats common-lisp:null)
                         :accessor
                         struct-shape-dataset-description-dataset-stats :shape
                         "DatasetStats" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-dataset-description
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'dataset-description
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'dataset-description 'make-dataset-description))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input dataset-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input dataset-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-timestamp))
      (common-lisp:list
       (common-lisp:cons "CreationTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-updated-timestamp))
      (common-lisp:list
       (common-lisp:cons "LastUpdatedTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-message))
      (common-lisp:list
       (common-lisp:cons "StatusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-message-code))
      (common-lisp:list
       (common-lisp:cons "StatusMessageCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dataset-stats))
      (common-lisp:list
       (common-lisp:cons "DatasetStats"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input dataset-description))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype dataset-entries ()
   '(trivial-types:proper-list dataset-entry))
 (common-lisp:defun make-dataset-entries
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list dataset-entry))
   aws-sdk/generator/shape::members))
(common-lisp:deftype dataset-entry () 'common-lisp:string)
(common-lisp:deftype dataset-label () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass dataset-label-description common-lisp:nil
                       ((label-name :initarg :label-name :initform
                         common-lisp:nil :type
                         (common-lisp:or dataset-label common-lisp:null)
                         :accessor
                         struct-shape-dataset-label-description-label-name
                         :shape "DatasetLabel" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (label-stats :initarg :label-stats :initform
                         common-lisp:nil :type
                         (common-lisp:or dataset-label-stats common-lisp:null)
                         :accessor
                         struct-shape-dataset-label-description-label-stats
                         :shape "DatasetLabelStats" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-dataset-label-description
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'dataset-label-description
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'dataset-label-description
                    'make-dataset-label-description))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          dataset-label-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          dataset-label-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'label-name))
      (common-lisp:list
       (common-lisp:cons "LabelName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'label-stats))
      (common-lisp:list
       (common-lisp:cons "LabelStats"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          dataset-label-description))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype dataset-label-descriptions ()
   '(trivial-types:proper-list dataset-label-description))
 (common-lisp:defun make-dataset-label-descriptions
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            dataset-label-description))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass dataset-label-stats common-lisp:nil
                       ((entry-count :initarg :entry-count :initform
                         common-lisp:nil :type
                         (common-lisp:or uinteger common-lisp:null) :accessor
                         struct-shape-dataset-label-stats-entry-count :shape
                         "UInteger" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (bounding-box-count :initarg :bounding-box-count
                         :initform common-lisp:nil :type
                         (common-lisp:or uinteger common-lisp:null) :accessor
                         struct-shape-dataset-label-stats-bounding-box-count
                         :shape "UInteger" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-dataset-label-stats
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'dataset-label-stats
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'dataset-label-stats 'make-dataset-label-stats))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input dataset-label-stats))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input dataset-label-stats))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entry-count))
      (common-lisp:list
       (common-lisp:cons "EntryCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bounding-box-count))
      (common-lisp:list
       (common-lisp:cons "BoundingBoxCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input dataset-label-stats))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype dataset-labels ()
   '(trivial-types:proper-list dataset-label))
 (common-lisp:defun make-dataset-labels
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list dataset-label))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass dataset-metadata common-lisp:nil
                       ((creation-timestamp :initarg :creation-timestamp
                         :initform common-lisp:nil :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         struct-shape-dataset-metadata-creation-timestamp
                         :shape "DateTime" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dataset-type :initarg :dataset-type :initform
                         common-lisp:nil :type
                         (common-lisp:or dataset-type common-lisp:null)
                         :accessor struct-shape-dataset-metadata-dataset-type
                         :shape "DatasetType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dataset-arn :initarg :dataset-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or dataset-arn common-lisp:null)
                         :accessor struct-shape-dataset-metadata-dataset-arn
                         :shape "DatasetArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or dataset-status common-lisp:null)
                         :accessor struct-shape-dataset-metadata-status :shape
                         "DatasetStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status-message :initarg :status-message :initform
                         common-lisp:nil :type
                         (common-lisp:or status-message common-lisp:null)
                         :accessor struct-shape-dataset-metadata-status-message
                         :shape "StatusMessage" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status-message-code :initarg :status-message-code
                         :initform common-lisp:nil :type
                         (common-lisp:or dataset-status-message-code
                                         common-lisp:null)
                         :accessor
                         struct-shape-dataset-metadata-status-message-code
                         :shape "DatasetStatusMessageCode" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-dataset-metadata
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'dataset-metadata
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'dataset-metadata 'make-dataset-metadata))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input dataset-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input dataset-metadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-timestamp))
      (common-lisp:list
       (common-lisp:cons "CreationTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dataset-type))
      (common-lisp:list
       (common-lisp:cons "DatasetType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dataset-arn))
      (common-lisp:list
       (common-lisp:cons "DatasetArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-message))
      (common-lisp:list
       (common-lisp:cons "StatusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-message-code))
      (common-lisp:list
       (common-lisp:cons "StatusMessageCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input dataset-metadata))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype dataset-metadata-list ()
   '(trivial-types:proper-list dataset-metadata))
 (common-lisp:defun make-dataset-metadata-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list dataset-metadata))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass dataset-source common-lisp:nil
                       ((ground-truth-manifest :initarg :ground-truth-manifest
                         :initform common-lisp:nil :type
                         (common-lisp:or ground-truth-manifest
                                         common-lisp:null)
                         :accessor
                         struct-shape-dataset-source-ground-truth-manifest
                         :shape "GroundTruthManifest" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dataset-arn :initarg :dataset-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or dataset-arn common-lisp:null)
                         :accessor struct-shape-dataset-source-dataset-arn
                         :shape "DatasetArn" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-dataset-source
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'dataset-source
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'dataset-source 'make-dataset-source))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input dataset-source))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input dataset-source))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ground-truth-manifest))
      (common-lisp:list
       (common-lisp:cons "GroundTruthManifest"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dataset-arn))
      (common-lisp:list
       (common-lisp:cons "DatasetArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input dataset-source))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass dataset-stats common-lisp:nil
                       ((labeled-entries :initarg :labeled-entries :initform
                         common-lisp:nil :type
                         (common-lisp:or uinteger common-lisp:null) :accessor
                         struct-shape-dataset-stats-labeled-entries :shape
                         "UInteger" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (total-entries :initarg :total-entries :initform
                         common-lisp:nil :type
                         (common-lisp:or uinteger common-lisp:null) :accessor
                         struct-shape-dataset-stats-total-entries :shape
                         "UInteger" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (total-labels :initarg :total-labels :initform
                         common-lisp:nil :type
                         (common-lisp:or uinteger common-lisp:null) :accessor
                         struct-shape-dataset-stats-total-labels :shape
                         "UInteger" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (error-entries :initarg :error-entries :initform
                         common-lisp:nil :type
                         (common-lisp:or uinteger common-lisp:null) :accessor
                         struct-shape-dataset-stats-error-entries :shape
                         "UInteger" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-dataset-stats
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'dataset-stats
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'dataset-stats 'make-dataset-stats))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input dataset-stats))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input dataset-stats))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'labeled-entries))
      (common-lisp:list
       (common-lisp:cons "LabeledEntries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total-entries))
      (common-lisp:list
       (common-lisp:cons "TotalEntries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total-labels))
      (common-lisp:list
       (common-lisp:cons "TotalLabels"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-entries))
      (common-lisp:list
       (common-lisp:cons "ErrorEntries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input dataset-stats))
   common-lisp:nil))
(common-lisp:deftype dataset-status () 'common-lisp:string)
(common-lisp:deftype dataset-status-message-code () 'common-lisp:string)
(common-lisp:deftype dataset-type () 'common-lisp:string)
(common-lisp:deftype date-time () 'common-lisp:string)
(common-lisp:deftype degree () 'common-lisp:single-float)
(common-lisp:progn
 (common-lisp:defclass delete-collection-request common-lisp:nil
                       ((collection-id :initarg :collection-id :initform
                         (common-lisp:error ":collection-id is required") :type
                         (common-lisp:or collection-id common-lisp:null)
                         :accessor
                         struct-shape-delete-collection-request-collection-id
                         :shape "CollectionId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-collection-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-collection-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-collection-request
                    'make-delete-collection-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-collection-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-collection-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'collection-id))
      (common-lisp:list
       (common-lisp:cons "CollectionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-collection-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-collection-response common-lisp:nil
                       ((status-code :initarg :status-code :initform
                         common-lisp:nil :type
                         (common-lisp:or uinteger common-lisp:null) :accessor
                         struct-shape-delete-collection-response-status-code
                         :shape "UInteger" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-collection-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-collection-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-collection-response
                    'make-delete-collection-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-collection-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-collection-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-code))
      (common-lisp:list
       (common-lisp:cons "StatusCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-collection-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-dataset-request common-lisp:nil
                       ((dataset-arn :initarg :dataset-arn :initform
                         (common-lisp:error ":dataset-arn is required") :type
                         (common-lisp:or dataset-arn common-lisp:null)
                         :accessor
                         struct-shape-delete-dataset-request-dataset-arn :shape
                         "DatasetArn" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-dataset-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-dataset-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-dataset-request 'make-delete-dataset-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-dataset-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-dataset-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dataset-arn))
      (common-lisp:list
       (common-lisp:cons "DatasetArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-dataset-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-dataset-response common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-dataset-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-dataset-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-dataset-response 'make-delete-dataset-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-dataset-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-dataset-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-dataset-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-faces-request common-lisp:nil
                       ((collection-id :initarg :collection-id :initform
                         (common-lisp:error ":collection-id is required") :type
                         (common-lisp:or collection-id common-lisp:null)
                         :accessor
                         struct-shape-delete-faces-request-collection-id :shape
                         "CollectionId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (face-ids :initarg :face-ids :initform
                         (common-lisp:error ":face-ids is required") :type
                         (common-lisp:or face-id-list common-lisp:null)
                         :accessor struct-shape-delete-faces-request-face-ids
                         :shape "FaceIdList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-faces-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-faces-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-faces-request 'make-delete-faces-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-faces-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-faces-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'collection-id))
      (common-lisp:list
       (common-lisp:cons "CollectionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'face-ids))
      (common-lisp:list
       (common-lisp:cons "FaceIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-faces-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-faces-response common-lisp:nil
                       ((deleted-faces :initarg :deleted-faces :initform
                         common-lisp:nil :type
                         (common-lisp:or face-id-list common-lisp:null)
                         :accessor
                         struct-shape-delete-faces-response-deleted-faces
                         :shape "FaceIdList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (unsuccessful-face-deletions :initarg
                         :unsuccessful-face-deletions :initform common-lisp:nil
                         :type
                         (common-lisp:or unsuccessful-face-deletions-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-delete-faces-response-unsuccessful-face-deletions
                         :shape "UnsuccessfulFaceDeletionsList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-faces-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-faces-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-faces-response 'make-delete-faces-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-faces-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-faces-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deleted-faces))
      (common-lisp:list
       (common-lisp:cons "DeletedFaces"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'unsuccessful-face-deletions))
      (common-lisp:list
       (common-lisp:cons "UnsuccessfulFaceDeletions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-faces-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-project-policy-request common-lisp:nil
                       ((project-arn :initarg :project-arn :initform
                         (common-lisp:error ":project-arn is required") :type
                         (common-lisp:or project-arn common-lisp:null)
                         :accessor
                         struct-shape-delete-project-policy-request-project-arn
                         :shape "ProjectArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (policy-name :initarg :policy-name :initform
                         (common-lisp:error ":policy-name is required") :type
                         (common-lisp:or project-policy-name common-lisp:null)
                         :accessor
                         struct-shape-delete-project-policy-request-policy-name
                         :shape "ProjectPolicyName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (policy-revision-id :initarg :policy-revision-id
                         :initform common-lisp:nil :type
                         (common-lisp:or project-policy-revision-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-delete-project-policy-request-policy-revision-id
                         :shape "ProjectPolicyRevisionId" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-project-policy-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-project-policy-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-project-policy-request
                    'make-delete-project-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-project-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-project-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'project-arn))
      (common-lisp:list
       (common-lisp:cons "ProjectArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-name))
      (common-lisp:list
       (common-lisp:cons "PolicyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-revision-id))
      (common-lisp:list
       (common-lisp:cons "PolicyRevisionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-project-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-project-policy-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-project-policy-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-project-policy-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-project-policy-response
                    'make-delete-project-policy-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-project-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-project-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-project-policy-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-project-request common-lisp:nil
                       ((project-arn :initarg :project-arn :initform
                         (common-lisp:error ":project-arn is required") :type
                         (common-lisp:or project-arn common-lisp:null)
                         :accessor
                         struct-shape-delete-project-request-project-arn :shape
                         "ProjectArn" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-project-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-project-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-project-request 'make-delete-project-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-project-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-project-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'project-arn))
      (common-lisp:list
       (common-lisp:cons "ProjectArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-project-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-project-response common-lisp:nil
                       ((status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or project-status common-lisp:null)
                         :accessor struct-shape-delete-project-response-status
                         :shape "ProjectStatus" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-project-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-project-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-project-response 'make-delete-project-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-project-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-project-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-project-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-project-version-request common-lisp:nil
                       ((project-version-arn :initarg :project-version-arn
                         :initform
                         (common-lisp:error ":project-version-arn is required")
                         :type
                         (common-lisp:or project-version-arn common-lisp:null)
                         :accessor
                         struct-shape-delete-project-version-request-project-version-arn
                         :shape "ProjectVersionArn" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-project-version-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-project-version-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-project-version-request
                    'make-delete-project-version-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-project-version-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-project-version-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'project-version-arn))
      (common-lisp:list
       (common-lisp:cons "ProjectVersionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-project-version-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-project-version-response common-lisp:nil
                       ((status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or project-version-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-delete-project-version-response-status
                         :shape "ProjectVersionStatus" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-project-version-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-project-version-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-project-version-response
                    'make-delete-project-version-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-project-version-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-project-version-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-project-version-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-stream-processor-request common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or stream-processor-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-delete-stream-processor-request-name
                         :shape "StreamProcessorName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-stream-processor-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-stream-processor-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-stream-processor-request
                    'make-delete-stream-processor-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-stream-processor-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-stream-processor-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-stream-processor-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-stream-processor-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-stream-processor-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-stream-processor-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-stream-processor-response
                    'make-delete-stream-processor-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-stream-processor-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-stream-processor-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-stream-processor-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-user-request common-lisp:nil
                       ((collection-id :initarg :collection-id :initform
                         (common-lisp:error ":collection-id is required") :type
                         (common-lisp:or collection-id common-lisp:null)
                         :accessor
                         struct-shape-delete-user-request-collection-id :shape
                         "CollectionId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (user-id :initarg :user-id :initform
                         (common-lisp:error ":user-id is required") :type
                         (common-lisp:or user-id common-lisp:null) :accessor
                         struct-shape-delete-user-request-user-id :shape
                         "UserId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (client-request-token :initarg :client-request-token
                         :initform common-lisp:nil :type
                         (common-lisp:or client-request-token common-lisp:null)
                         :accessor
                         struct-shape-delete-user-request-client-request-token
                         :shape "ClientRequestToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-user-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-user-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-user-request 'make-delete-user-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-user-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-user-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'collection-id))
      (common-lisp:list
       (common-lisp:cons "CollectionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-id))
      (common-lisp:list
       (common-lisp:cons "UserId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "ClientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-user-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-user-response common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-user-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-user-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-user-response 'make-delete-user-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-user-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-user-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-user-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-collection-request common-lisp:nil
                       ((collection-id :initarg :collection-id :initform
                         (common-lisp:error ":collection-id is required") :type
                         (common-lisp:or collection-id common-lisp:null)
                         :accessor
                         struct-shape-describe-collection-request-collection-id
                         :shape "CollectionId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-collection-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-collection-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-collection-request
                    'make-describe-collection-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-collection-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-collection-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'collection-id))
      (common-lisp:list
       (common-lisp:cons "CollectionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-collection-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-collection-response common-lisp:nil
                       ((face-count :initarg :face-count :initform
                         common-lisp:nil :type
                         (common-lisp:or ulong common-lisp:null) :accessor
                         struct-shape-describe-collection-response-face-count
                         :shape "ULong" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (face-model-version :initarg :face-model-version
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-describe-collection-response-face-model-version
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (collection-arn :initarg :collection-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-describe-collection-response-collection-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (creation-timestamp :initarg :creation-timestamp
                         :initform common-lisp:nil :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         struct-shape-describe-collection-response-creation-timestamp
                         :shape "DateTime" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (user-count :initarg :user-count :initform
                         common-lisp:nil :type
                         (common-lisp:or ulong common-lisp:null) :accessor
                         struct-shape-describe-collection-response-user-count
                         :shape "ULong" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-collection-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-collection-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-collection-response
                    'make-describe-collection-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-collection-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-collection-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'face-count))
      (common-lisp:list
       (common-lisp:cons "FaceCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'face-model-version))
      (common-lisp:list
       (common-lisp:cons "FaceModelVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'collection-arn))
      (common-lisp:list
       (common-lisp:cons "CollectionARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-timestamp))
      (common-lisp:list
       (common-lisp:cons "CreationTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-count))
      (common-lisp:list
       (common-lisp:cons "UserCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-collection-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-dataset-request common-lisp:nil
                       ((dataset-arn :initarg :dataset-arn :initform
                         (common-lisp:error ":dataset-arn is required") :type
                         (common-lisp:or dataset-arn common-lisp:null)
                         :accessor
                         struct-shape-describe-dataset-request-dataset-arn
                         :shape "DatasetArn" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-dataset-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-dataset-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-dataset-request 'make-describe-dataset-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-dataset-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-dataset-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dataset-arn))
      (common-lisp:list
       (common-lisp:cons "DatasetArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-dataset-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-dataset-response common-lisp:nil
                       ((dataset-description :initarg :dataset-description
                         :initform common-lisp:nil :type
                         (common-lisp:or dataset-description common-lisp:null)
                         :accessor
                         struct-shape-describe-dataset-response-dataset-description
                         :shape "DatasetDescription" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-dataset-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-dataset-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-dataset-response
                    'make-describe-dataset-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-dataset-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-dataset-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dataset-description))
      (common-lisp:list
       (common-lisp:cons "DatasetDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-dataset-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-project-versions-request common-lisp:nil
                       ((project-arn :initarg :project-arn :initform
                         (common-lisp:error ":project-arn is required") :type
                         (common-lisp:or project-arn common-lisp:null)
                         :accessor
                         struct-shape-describe-project-versions-request-project-arn
                         :shape "ProjectArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (version-names :initarg :version-names :initform
                         common-lisp:nil :type
                         (common-lisp:or version-names common-lisp:null)
                         :accessor
                         struct-shape-describe-project-versions-request-version-names
                         :shape "VersionNames" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or extended-pagination-token
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-project-versions-request-next-token
                         :shape "ExtendedPaginationToken" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or project-versions-page-size
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-project-versions-request-max-results
                         :shape "ProjectVersionsPageSize" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-project-versions-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-project-versions-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-project-versions-request
                    'make-describe-project-versions-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-project-versions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-project-versions-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'project-arn))
      (common-lisp:list
       (common-lisp:cons "ProjectArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-names))
      (common-lisp:list
       (common-lisp:cons "VersionNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-project-versions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-project-versions-response common-lisp:nil
                       ((project-version-descriptions :initarg
                         :project-version-descriptions :initform
                         common-lisp:nil :type
                         (common-lisp:or project-version-descriptions
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-project-versions-response-project-version-descriptions
                         :shape "ProjectVersionDescriptions" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or extended-pagination-token
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-project-versions-response-next-token
                         :shape "ExtendedPaginationToken" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-project-versions-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-project-versions-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-project-versions-response
                    'make-describe-project-versions-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-project-versions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-project-versions-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'project-version-descriptions))
      (common-lisp:list
       (common-lisp:cons "ProjectVersionDescriptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-project-versions-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-projects-request common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or extended-pagination-token
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-projects-request-next-token
                         :shape "ExtendedPaginationToken" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or projects-page-size common-lisp:null)
                         :accessor
                         struct-shape-describe-projects-request-max-results
                         :shape "ProjectsPageSize" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (project-names :initarg :project-names :initform
                         common-lisp:nil :type
                         (common-lisp:or project-names common-lisp:null)
                         :accessor
                         struct-shape-describe-projects-request-project-names
                         :shape "ProjectNames" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (features :initarg :features :initform common-lisp:nil
                         :type
                         (common-lisp:or customization-features
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-projects-request-features :shape
                         "CustomizationFeatures" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-projects-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-projects-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-projects-request
                    'make-describe-projects-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-projects-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-projects-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'project-names))
      (common-lisp:list
       (common-lisp:cons "ProjectNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'features))
      (common-lisp:list
       (common-lisp:cons "Features"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-projects-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-projects-response common-lisp:nil
                       ((project-descriptions :initarg :project-descriptions
                         :initform common-lisp:nil :type
                         (common-lisp:or project-descriptions common-lisp:null)
                         :accessor
                         struct-shape-describe-projects-response-project-descriptions
                         :shape "ProjectDescriptions" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or extended-pagination-token
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-projects-response-next-token
                         :shape "ExtendedPaginationToken" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-projects-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-projects-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-projects-response
                    'make-describe-projects-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-projects-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-projects-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'project-descriptions))
      (common-lisp:list
       (common-lisp:cons "ProjectDescriptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-projects-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-stream-processor-request common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or stream-processor-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-stream-processor-request-name
                         :shape "StreamProcessorName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-stream-processor-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-stream-processor-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-stream-processor-request
                    'make-describe-stream-processor-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-stream-processor-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-stream-processor-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-stream-processor-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-stream-processor-response common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or stream-processor-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-stream-processor-response-name
                         :shape "StreamProcessorName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (stream-processor-arn :initarg :stream-processor-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or stream-processor-arn common-lisp:null)
                         :accessor
                         struct-shape-describe-stream-processor-response-stream-processor-arn
                         :shape "StreamProcessorArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or stream-processor-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-stream-processor-response-status
                         :shape "StreamProcessorStatus" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (status-message :initarg :status-message :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-describe-stream-processor-response-status-message
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (creation-timestamp :initarg :creation-timestamp
                         :initform common-lisp:nil :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         struct-shape-describe-stream-processor-response-creation-timestamp
                         :shape "DateTime" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-update-timestamp :initarg :last-update-timestamp
                         :initform common-lisp:nil :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         struct-shape-describe-stream-processor-response-last-update-timestamp
                         :shape "DateTime" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (input :initarg :input :initform common-lisp:nil :type
                         (common-lisp:or stream-processor-input
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-stream-processor-response-input
                         :shape "StreamProcessorInput" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (output :initarg :output :initform common-lisp:nil
                         :type
                         (common-lisp:or stream-processor-output
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-stream-processor-response-output
                         :shape "StreamProcessorOutput" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (role-arn :initarg :role-arn :initform common-lisp:nil
                         :type (common-lisp:or role-arn common-lisp:null)
                         :accessor
                         struct-shape-describe-stream-processor-response-role-arn
                         :shape "RoleArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (settings :initarg :settings :initform common-lisp:nil
                         :type
                         (common-lisp:or stream-processor-settings
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-stream-processor-response-settings
                         :shape "StreamProcessorSettings" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (notification-channel :initarg :notification-channel
                         :initform common-lisp:nil :type
                         (common-lisp:or stream-processor-notification-channel
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-stream-processor-response-notification-channel
                         :shape "StreamProcessorNotificationChannel" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (kms-key-id :initarg :kms-key-id :initform
                         common-lisp:nil :type
                         (common-lisp:or kms-key-id common-lisp:null) :accessor
                         struct-shape-describe-stream-processor-response-kms-key-id
                         :shape "KmsKeyId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (regions-of-interest :initarg :regions-of-interest
                         :initform common-lisp:nil :type
                         (common-lisp:or regions-of-interest common-lisp:null)
                         :accessor
                         struct-shape-describe-stream-processor-response-regions-of-interest
                         :shape "RegionsOfInterest" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (data-sharing-preference :initarg
                         :data-sharing-preference :initform common-lisp:nil
                         :type
                         (common-lisp:or
                          stream-processor-data-sharing-preference
                          common-lisp:null)
                         :accessor
                         struct-shape-describe-stream-processor-response-data-sharing-preference
                         :shape "StreamProcessorDataSharingPreference"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-stream-processor-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-stream-processor-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-stream-processor-response
                    'make-describe-stream-processor-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-stream-processor-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-stream-processor-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'stream-processor-arn))
      (common-lisp:list
       (common-lisp:cons "StreamProcessorArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-message))
      (common-lisp:list
       (common-lisp:cons "StatusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-timestamp))
      (common-lisp:list
       (common-lisp:cons "CreationTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-update-timestamp))
      (common-lisp:list
       (common-lisp:cons "LastUpdateTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input))
      (common-lisp:list
       (common-lisp:cons "Input"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output))
      (common-lisp:list
       (common-lisp:cons "Output"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'settings))
      (common-lisp:list
       (common-lisp:cons "Settings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'notification-channel))
      (common-lisp:list
       (common-lisp:cons "NotificationChannel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "KmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'regions-of-interest))
      (common-lisp:list
       (common-lisp:cons "RegionsOfInterest"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-sharing-preference))
      (common-lisp:list
       (common-lisp:cons "DataSharingPreference"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-stream-processor-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass detect-custom-labels-request common-lisp:nil
                       ((project-version-arn :initarg :project-version-arn
                         :initform
                         (common-lisp:error ":project-version-arn is required")
                         :type
                         (common-lisp:or project-version-arn common-lisp:null)
                         :accessor
                         struct-shape-detect-custom-labels-request-project-version-arn
                         :shape "ProjectVersionArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (image :initarg :image :initform
                         (common-lisp:error ":image is required") :type
                         (common-lisp:or image common-lisp:null) :accessor
                         struct-shape-detect-custom-labels-request-image :shape
                         "Image" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or uinteger common-lisp:null) :accessor
                         struct-shape-detect-custom-labels-request-max-results
                         :shape "UInteger" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (min-confidence :initarg :min-confidence :initform
                         common-lisp:nil :type
                         (common-lisp:or percent common-lisp:null) :accessor
                         struct-shape-detect-custom-labels-request-min-confidence
                         :shape "Percent" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-detect-custom-labels-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'detect-custom-labels-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'detect-custom-labels-request
                    'make-detect-custom-labels-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          detect-custom-labels-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          detect-custom-labels-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'project-version-arn))
      (common-lisp:list
       (common-lisp:cons "ProjectVersionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image))
      (common-lisp:list
       (common-lisp:cons "Image"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'min-confidence))
      (common-lisp:list
       (common-lisp:cons "MinConfidence"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          detect-custom-labels-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass detect-custom-labels-response common-lisp:nil
                       ((custom-labels :initarg :custom-labels :initform
                         common-lisp:nil :type
                         (common-lisp:or custom-labels common-lisp:null)
                         :accessor
                         struct-shape-detect-custom-labels-response-custom-labels
                         :shape "CustomLabels" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-detect-custom-labels-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'detect-custom-labels-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'detect-custom-labels-response
                    'make-detect-custom-labels-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          detect-custom-labels-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          detect-custom-labels-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'custom-labels))
      (common-lisp:list
       (common-lisp:cons "CustomLabels"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          detect-custom-labels-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass detect-faces-request common-lisp:nil
                       ((image :initarg :image :initform
                         (common-lisp:error ":image is required") :type
                         (common-lisp:or image common-lisp:null) :accessor
                         struct-shape-detect-faces-request-image :shape "Image"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (attributes :initarg :attributes :initform
                         common-lisp:nil :type
                         (common-lisp:or attributes common-lisp:null) :accessor
                         struct-shape-detect-faces-request-attributes :shape
                         "Attributes" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-detect-faces-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'detect-faces-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'detect-faces-request 'make-detect-faces-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input detect-faces-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input detect-faces-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image))
      (common-lisp:list
       (common-lisp:cons "Image"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attributes))
      (common-lisp:list
       (common-lisp:cons "Attributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input detect-faces-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass detect-faces-response common-lisp:nil
                       ((face-details :initarg :face-details :initform
                         common-lisp:nil :type
                         (common-lisp:or face-detail-list common-lisp:null)
                         :accessor
                         struct-shape-detect-faces-response-face-details :shape
                         "FaceDetailList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (orientation-correction :initarg
                         :orientation-correction :initform common-lisp:nil
                         :type
                         (common-lisp:or orientation-correction
                                         common-lisp:null)
                         :accessor
                         struct-shape-detect-faces-response-orientation-correction
                         :shape "OrientationCorrection" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-detect-faces-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'detect-faces-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'detect-faces-response 'make-detect-faces-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          detect-faces-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          detect-faces-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'face-details))
      (common-lisp:list
       (common-lisp:cons "FaceDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'orientation-correction))
      (common-lisp:list
       (common-lisp:cons "OrientationCorrection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          detect-faces-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype detect-labels-feature-list ()
   '(trivial-types:proper-list detect-labels-feature-name))
 (common-lisp:defun make-detect-labels-feature-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            detect-labels-feature-name))
   aws-sdk/generator/shape::members))
(common-lisp:deftype detect-labels-feature-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass detect-labels-image-background common-lisp:nil
                       ((quality :initarg :quality :initform common-lisp:nil
                         :type
                         (common-lisp:or detect-labels-image-quality
                                         common-lisp:null)
                         :accessor
                         struct-shape-detect-labels-image-background-quality
                         :shape "DetectLabelsImageQuality" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (dominant-colors :initarg :dominant-colors :initform
                         common-lisp:nil :type
                         (common-lisp:or dominant-colors common-lisp:null)
                         :accessor
                         struct-shape-detect-labels-image-background-dominant-colors
                         :shape "DominantColors" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-detect-labels-image-background
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'detect-labels-image-background
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'detect-labels-image-background
                    'make-detect-labels-image-background))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          detect-labels-image-background))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          detect-labels-image-background))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'quality))
      (common-lisp:list
       (common-lisp:cons "Quality"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dominant-colors))
      (common-lisp:list
       (common-lisp:cons "DominantColors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          detect-labels-image-background))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass detect-labels-image-foreground common-lisp:nil
                       ((quality :initarg :quality :initform common-lisp:nil
                         :type
                         (common-lisp:or detect-labels-image-quality
                                         common-lisp:null)
                         :accessor
                         struct-shape-detect-labels-image-foreground-quality
                         :shape "DetectLabelsImageQuality" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (dominant-colors :initarg :dominant-colors :initform
                         common-lisp:nil :type
                         (common-lisp:or dominant-colors common-lisp:null)
                         :accessor
                         struct-shape-detect-labels-image-foreground-dominant-colors
                         :shape "DominantColors" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-detect-labels-image-foreground
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'detect-labels-image-foreground
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'detect-labels-image-foreground
                    'make-detect-labels-image-foreground))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          detect-labels-image-foreground))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          detect-labels-image-foreground))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'quality))
      (common-lisp:list
       (common-lisp:cons "Quality"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dominant-colors))
      (common-lisp:list
       (common-lisp:cons "DominantColors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          detect-labels-image-foreground))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass detect-labels-image-properties common-lisp:nil
                       ((quality :initarg :quality :initform common-lisp:nil
                         :type
                         (common-lisp:or detect-labels-image-quality
                                         common-lisp:null)
                         :accessor
                         struct-shape-detect-labels-image-properties-quality
                         :shape "DetectLabelsImageQuality" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (dominant-colors :initarg :dominant-colors :initform
                         common-lisp:nil :type
                         (common-lisp:or dominant-colors common-lisp:null)
                         :accessor
                         struct-shape-detect-labels-image-properties-dominant-colors
                         :shape "DominantColors" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (foreground :initarg :foreground :initform
                         common-lisp:nil :type
                         (common-lisp:or detect-labels-image-foreground
                                         common-lisp:null)
                         :accessor
                         struct-shape-detect-labels-image-properties-foreground
                         :shape "DetectLabelsImageForeground" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (background :initarg :background :initform
                         common-lisp:nil :type
                         (common-lisp:or detect-labels-image-background
                                         common-lisp:null)
                         :accessor
                         struct-shape-detect-labels-image-properties-background
                         :shape "DetectLabelsImageBackground" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-detect-labels-image-properties
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'detect-labels-image-properties
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'detect-labels-image-properties
                    'make-detect-labels-image-properties))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          detect-labels-image-properties))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          detect-labels-image-properties))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'quality))
      (common-lisp:list
       (common-lisp:cons "Quality"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dominant-colors))
      (common-lisp:list
       (common-lisp:cons "DominantColors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'foreground))
      (common-lisp:list
       (common-lisp:cons "Foreground"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'background))
      (common-lisp:list
       (common-lisp:cons "Background"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          detect-labels-image-properties))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass detect-labels-image-properties-settings common-lisp:nil
                       ((max-dominant-colors :initarg :max-dominant-colors
                         :initform common-lisp:nil :type
                         (common-lisp:or detect-labels-max-dominant-colors
                                         common-lisp:null)
                         :accessor
                         struct-shape-detect-labels-image-properties-settings-max-dominant-colors
                         :shape "DetectLabelsMaxDominantColors" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-detect-labels-image-properties-settings
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'detect-labels-image-properties-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'detect-labels-image-properties-settings
                    'make-detect-labels-image-properties-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          detect-labels-image-properties-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          detect-labels-image-properties-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-dominant-colors))
      (common-lisp:list
       (common-lisp:cons "MaxDominantColors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          detect-labels-image-properties-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass detect-labels-image-quality common-lisp:nil
                       ((brightness :initarg :brightness :initform
                         common-lisp:nil :type
                         (common-lisp:or float common-lisp:null) :accessor
                         struct-shape-detect-labels-image-quality-brightness
                         :shape "Float" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (sharpness :initarg :sharpness :initform
                         common-lisp:nil :type
                         (common-lisp:or float common-lisp:null) :accessor
                         struct-shape-detect-labels-image-quality-sharpness
                         :shape "Float" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (contrast :initarg :contrast :initform common-lisp:nil
                         :type (common-lisp:or float common-lisp:null)
                         :accessor
                         struct-shape-detect-labels-image-quality-contrast
                         :shape "Float" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-detect-labels-image-quality
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'detect-labels-image-quality
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'detect-labels-image-quality
                    'make-detect-labels-image-quality))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          detect-labels-image-quality))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          detect-labels-image-quality))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'brightness))
      (common-lisp:list
       (common-lisp:cons "Brightness"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sharpness))
      (common-lisp:list
       (common-lisp:cons "Sharpness"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'contrast))
      (common-lisp:list
       (common-lisp:cons "Contrast"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          detect-labels-image-quality))
   common-lisp:nil))
(common-lisp:deftype detect-labels-max-dominant-colors () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass detect-labels-request common-lisp:nil
                       ((image :initarg :image :initform
                         (common-lisp:error ":image is required") :type
                         (common-lisp:or image common-lisp:null) :accessor
                         struct-shape-detect-labels-request-image :shape
                         "Image" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (max-labels :initarg :max-labels :initform
                         common-lisp:nil :type
                         (common-lisp:or uinteger common-lisp:null) :accessor
                         struct-shape-detect-labels-request-max-labels :shape
                         "UInteger" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (min-confidence :initarg :min-confidence :initform
                         common-lisp:nil :type
                         (common-lisp:or percent common-lisp:null) :accessor
                         struct-shape-detect-labels-request-min-confidence
                         :shape "Percent" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (features :initarg :features :initform common-lisp:nil
                         :type
                         (common-lisp:or detect-labels-feature-list
                                         common-lisp:null)
                         :accessor struct-shape-detect-labels-request-features
                         :shape "DetectLabelsFeatureList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (settings :initarg :settings :initform common-lisp:nil
                         :type
                         (common-lisp:or detect-labels-settings
                                         common-lisp:null)
                         :accessor struct-shape-detect-labels-request-settings
                         :shape "DetectLabelsSettings" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-detect-labels-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'detect-labels-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'detect-labels-request 'make-detect-labels-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          detect-labels-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          detect-labels-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image))
      (common-lisp:list
       (common-lisp:cons "Image"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-labels))
      (common-lisp:list
       (common-lisp:cons "MaxLabels"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'min-confidence))
      (common-lisp:list
       (common-lisp:cons "MinConfidence"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'features))
      (common-lisp:list
       (common-lisp:cons "Features"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'settings))
      (common-lisp:list
       (common-lisp:cons "Settings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          detect-labels-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass detect-labels-response common-lisp:nil
                       ((labels :initarg :labels :initform common-lisp:nil
                         :type (common-lisp:or labels common-lisp:null)
                         :accessor struct-shape-detect-labels-response-labels
                         :shape "Labels" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (orientation-correction :initarg
                         :orientation-correction :initform common-lisp:nil
                         :type
                         (common-lisp:or orientation-correction
                                         common-lisp:null)
                         :accessor
                         struct-shape-detect-labels-response-orientation-correction
                         :shape "OrientationCorrection" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (label-model-version :initarg :label-model-version
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-detect-labels-response-label-model-version
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (image-properties :initarg :image-properties :initform
                         common-lisp:nil :type
                         (common-lisp:or detect-labels-image-properties
                                         common-lisp:null)
                         :accessor
                         struct-shape-detect-labels-response-image-properties
                         :shape "DetectLabelsImageProperties" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-detect-labels-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'detect-labels-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'detect-labels-response 'make-detect-labels-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          detect-labels-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          detect-labels-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'labels))
      (common-lisp:list
       (common-lisp:cons "Labels"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'orientation-correction))
      (common-lisp:list
       (common-lisp:cons "OrientationCorrection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'label-model-version))
      (common-lisp:list
       (common-lisp:cons "LabelModelVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-properties))
      (common-lisp:list
       (common-lisp:cons "ImageProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          detect-labels-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass detect-labels-settings common-lisp:nil
                       ((general-labels :initarg :general-labels :initform
                         common-lisp:nil :type
                         (common-lisp:or general-labels-settings
                                         common-lisp:null)
                         :accessor
                         struct-shape-detect-labels-settings-general-labels
                         :shape "GeneralLabelsSettings" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (image-properties :initarg :image-properties :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          detect-labels-image-properties-settings
                          common-lisp:null)
                         :accessor
                         struct-shape-detect-labels-settings-image-properties
                         :shape "DetectLabelsImagePropertiesSettings" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-detect-labels-settings
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'detect-labels-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'detect-labels-settings 'make-detect-labels-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          detect-labels-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          detect-labels-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'general-labels))
      (common-lisp:list
       (common-lisp:cons "GeneralLabels"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-properties))
      (common-lisp:list
       (common-lisp:cons "ImageProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          detect-labels-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass detect-moderation-labels-request common-lisp:nil
                       ((image :initarg :image :initform
                         (common-lisp:error ":image is required") :type
                         (common-lisp:or image common-lisp:null) :accessor
                         struct-shape-detect-moderation-labels-request-image
                         :shape "Image" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (min-confidence :initarg :min-confidence :initform
                         common-lisp:nil :type
                         (common-lisp:or percent common-lisp:null) :accessor
                         struct-shape-detect-moderation-labels-request-min-confidence
                         :shape "Percent" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (human-loop-config :initarg :human-loop-config
                         :initform common-lisp:nil :type
                         (common-lisp:or human-loop-config common-lisp:null)
                         :accessor
                         struct-shape-detect-moderation-labels-request-human-loop-config
                         :shape "HumanLoopConfig" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (project-version :initarg :project-version :initform
                         common-lisp:nil :type
                         (common-lisp:or project-version-id common-lisp:null)
                         :accessor
                         struct-shape-detect-moderation-labels-request-project-version
                         :shape "ProjectVersionId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-detect-moderation-labels-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'detect-moderation-labels-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'detect-moderation-labels-request
                    'make-detect-moderation-labels-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          detect-moderation-labels-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          detect-moderation-labels-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image))
      (common-lisp:list
       (common-lisp:cons "Image"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'min-confidence))
      (common-lisp:list
       (common-lisp:cons "MinConfidence"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'human-loop-config))
      (common-lisp:list
       (common-lisp:cons "HumanLoopConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'project-version))
      (common-lisp:list
       (common-lisp:cons "ProjectVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          detect-moderation-labels-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass detect-moderation-labels-response common-lisp:nil
                       ((moderation-labels :initarg :moderation-labels
                         :initform common-lisp:nil :type
                         (common-lisp:or moderation-labels common-lisp:null)
                         :accessor
                         struct-shape-detect-moderation-labels-response-moderation-labels
                         :shape "ModerationLabels" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (moderation-model-version :initarg
                         :moderation-model-version :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-detect-moderation-labels-response-moderation-model-version
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (human-loop-activation-output :initarg
                         :human-loop-activation-output :initform
                         common-lisp:nil :type
                         (common-lisp:or human-loop-activation-output
                                         common-lisp:null)
                         :accessor
                         struct-shape-detect-moderation-labels-response-human-loop-activation-output
                         :shape "HumanLoopActivationOutput" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (project-version :initarg :project-version :initform
                         common-lisp:nil :type
                         (common-lisp:or project-version-id common-lisp:null)
                         :accessor
                         struct-shape-detect-moderation-labels-response-project-version
                         :shape "ProjectVersionId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (content-types :initarg :content-types :initform
                         common-lisp:nil :type
                         (common-lisp:or content-types common-lisp:null)
                         :accessor
                         struct-shape-detect-moderation-labels-response-content-types
                         :shape "ContentTypes" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-detect-moderation-labels-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'detect-moderation-labels-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'detect-moderation-labels-response
                    'make-detect-moderation-labels-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          detect-moderation-labels-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          detect-moderation-labels-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'moderation-labels))
      (common-lisp:list
       (common-lisp:cons "ModerationLabels"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'moderation-model-version))
      (common-lisp:list
       (common-lisp:cons "ModerationModelVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'human-loop-activation-output))
      (common-lisp:list
       (common-lisp:cons "HumanLoopActivationOutput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'project-version))
      (common-lisp:list
       (common-lisp:cons "ProjectVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-types))
      (common-lisp:list
       (common-lisp:cons "ContentTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          detect-moderation-labels-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass detect-protective-equipment-request common-lisp:nil
                       ((image :initarg :image :initform
                         (common-lisp:error ":image is required") :type
                         (common-lisp:or image common-lisp:null) :accessor
                         struct-shape-detect-protective-equipment-request-image
                         :shape "Image" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (summarization-attributes :initarg
                         :summarization-attributes :initform common-lisp:nil
                         :type
                         (common-lisp:or
                          protective-equipment-summarization-attributes
                          common-lisp:null)
                         :accessor
                         struct-shape-detect-protective-equipment-request-summarization-attributes
                         :shape "ProtectiveEquipmentSummarizationAttributes"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-detect-protective-equipment-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'detect-protective-equipment-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'detect-protective-equipment-request
                    'make-detect-protective-equipment-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          detect-protective-equipment-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          detect-protective-equipment-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image))
      (common-lisp:list
       (common-lisp:cons "Image"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'summarization-attributes))
      (common-lisp:list
       (common-lisp:cons "SummarizationAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          detect-protective-equipment-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass detect-protective-equipment-response common-lisp:nil
                       ((protective-equipment-model-version :initarg
                         :protective-equipment-model-version :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-detect-protective-equipment-response-protective-equipment-model-version
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (persons :initarg :persons :initform common-lisp:nil
                         :type
                         (common-lisp:or protective-equipment-persons
                                         common-lisp:null)
                         :accessor
                         struct-shape-detect-protective-equipment-response-persons
                         :shape "ProtectiveEquipmentPersons" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (summary :initarg :summary :initform common-lisp:nil
                         :type
                         (common-lisp:or protective-equipment-summary
                                         common-lisp:null)
                         :accessor
                         struct-shape-detect-protective-equipment-response-summary
                         :shape "ProtectiveEquipmentSummary" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-detect-protective-equipment-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'detect-protective-equipment-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'detect-protective-equipment-response
                    'make-detect-protective-equipment-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          detect-protective-equipment-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          detect-protective-equipment-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'protective-equipment-model-version))
      (common-lisp:list
       (common-lisp:cons "ProtectiveEquipmentModelVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'persons))
      (common-lisp:list
       (common-lisp:cons "Persons"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'summary))
      (common-lisp:list
       (common-lisp:cons "Summary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          detect-protective-equipment-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass detect-text-filters common-lisp:nil
                       ((word-filter :initarg :word-filter :initform
                         common-lisp:nil :type
                         (common-lisp:or detection-filter common-lisp:null)
                         :accessor struct-shape-detect-text-filters-word-filter
                         :shape "DetectionFilter" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (regions-of-interest :initarg :regions-of-interest
                         :initform common-lisp:nil :type
                         (common-lisp:or regions-of-interest common-lisp:null)
                         :accessor
                         struct-shape-detect-text-filters-regions-of-interest
                         :shape "RegionsOfInterest" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-detect-text-filters
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'detect-text-filters
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'detect-text-filters 'make-detect-text-filters))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input detect-text-filters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input detect-text-filters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'word-filter))
      (common-lisp:list
       (common-lisp:cons "WordFilter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'regions-of-interest))
      (common-lisp:list
       (common-lisp:cons "RegionsOfInterest"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input detect-text-filters))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass detect-text-request common-lisp:nil
                       ((image :initarg :image :initform
                         (common-lisp:error ":image is required") :type
                         (common-lisp:or image common-lisp:null) :accessor
                         struct-shape-detect-text-request-image :shape "Image"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (filters :initarg :filters :initform common-lisp:nil
                         :type
                         (common-lisp:or detect-text-filters common-lisp:null)
                         :accessor struct-shape-detect-text-request-filters
                         :shape "DetectTextFilters" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-detect-text-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'detect-text-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'detect-text-request 'make-detect-text-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input detect-text-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input detect-text-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image))
      (common-lisp:list
       (common-lisp:cons "Image"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input detect-text-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass detect-text-response common-lisp:nil
                       ((text-detections :initarg :text-detections :initform
                         common-lisp:nil :type
                         (common-lisp:or text-detection-list common-lisp:null)
                         :accessor
                         struct-shape-detect-text-response-text-detections
                         :shape "TextDetectionList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (text-model-version :initarg :text-model-version
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-detect-text-response-text-model-version
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-detect-text-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'detect-text-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'detect-text-response 'make-detect-text-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input detect-text-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input detect-text-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'text-detections))
      (common-lisp:list
       (common-lisp:cons "TextDetections"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'text-model-version))
      (common-lisp:list
       (common-lisp:cons "TextModelVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input detect-text-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass detection-filter common-lisp:nil
                       ((min-confidence :initarg :min-confidence :initform
                         common-lisp:nil :type
                         (common-lisp:or percent common-lisp:null) :accessor
                         struct-shape-detection-filter-min-confidence :shape
                         "Percent" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (min-bounding-box-height :initarg
                         :min-bounding-box-height :initform common-lisp:nil
                         :type
                         (common-lisp:or bounding-box-height common-lisp:null)
                         :accessor
                         struct-shape-detection-filter-min-bounding-box-height
                         :shape "BoundingBoxHeight" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (min-bounding-box-width :initarg
                         :min-bounding-box-width :initform common-lisp:nil
                         :type
                         (common-lisp:or bounding-box-width common-lisp:null)
                         :accessor
                         struct-shape-detection-filter-min-bounding-box-width
                         :shape "BoundingBoxWidth" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-detection-filter
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'detection-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'detection-filter 'make-detection-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input detection-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input detection-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'min-confidence))
      (common-lisp:list
       (common-lisp:cons "MinConfidence"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'min-bounding-box-height))
      (common-lisp:list
       (common-lisp:cons "MinBoundingBoxHeight"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'min-bounding-box-width))
      (common-lisp:list
       (common-lisp:cons "MinBoundingBoxWidth"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input detection-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass disassociate-faces-request common-lisp:nil
                       ((collection-id :initarg :collection-id :initform
                         (common-lisp:error ":collection-id is required") :type
                         (common-lisp:or collection-id common-lisp:null)
                         :accessor
                         struct-shape-disassociate-faces-request-collection-id
                         :shape "CollectionId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (user-id :initarg :user-id :initform
                         (common-lisp:error ":user-id is required") :type
                         (common-lisp:or user-id common-lisp:null) :accessor
                         struct-shape-disassociate-faces-request-user-id :shape
                         "UserId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (client-request-token :initarg :client-request-token
                         :initform common-lisp:nil :type
                         (common-lisp:or client-request-token common-lisp:null)
                         :accessor
                         struct-shape-disassociate-faces-request-client-request-token
                         :shape "ClientRequestToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (face-ids :initarg :face-ids :initform
                         (common-lisp:error ":face-ids is required") :type
                         (common-lisp:or user-face-id-list common-lisp:null)
                         :accessor
                         struct-shape-disassociate-faces-request-face-ids
                         :shape "UserFaceIdList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-disassociate-faces-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'disassociate-faces-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'disassociate-faces-request
                    'make-disassociate-faces-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-faces-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-faces-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'collection-id))
      (common-lisp:list
       (common-lisp:cons "CollectionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-id))
      (common-lisp:list
       (common-lisp:cons "UserId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "ClientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'face-ids))
      (common-lisp:list
       (common-lisp:cons "FaceIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-faces-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass disassociate-faces-response common-lisp:nil
                       ((disassociated-faces :initarg :disassociated-faces
                         :initform common-lisp:nil :type
                         (common-lisp:or disassociated-faces-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-disassociate-faces-response-disassociated-faces
                         :shape "DisassociatedFacesList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (unsuccessful-face-disassociations :initarg
                         :unsuccessful-face-disassociations :initform
                         common-lisp:nil :type
                         (common-lisp:or unsuccessful-face-disassociation-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-disassociate-faces-response-unsuccessful-face-disassociations
                         :shape "UnsuccessfulFaceDisassociationList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (user-status :initarg :user-status :initform
                         common-lisp:nil :type
                         (common-lisp:or user-status common-lisp:null)
                         :accessor
                         struct-shape-disassociate-faces-response-user-status
                         :shape "UserStatus" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-disassociate-faces-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'disassociate-faces-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'disassociate-faces-response
                    'make-disassociate-faces-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-faces-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-faces-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'disassociated-faces))
      (common-lisp:list
       (common-lisp:cons "DisassociatedFaces"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'unsuccessful-face-disassociations))
      (common-lisp:list
       (common-lisp:cons "UnsuccessfulFaceDisassociations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-status))
      (common-lisp:list
       (common-lisp:cons "UserStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-faces-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass disassociated-face common-lisp:nil
                       ((face-id :initarg :face-id :initform common-lisp:nil
                         :type (common-lisp:or face-id common-lisp:null)
                         :accessor struct-shape-disassociated-face-face-id
                         :shape "FaceId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-disassociated-face
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'disassociated-face
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'disassociated-face 'make-disassociated-face))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input disassociated-face))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input disassociated-face))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'face-id))
      (common-lisp:list
       (common-lisp:cons "FaceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input disassociated-face))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype disassociated-faces-list ()
   '(trivial-types:proper-list disassociated-face))
 (common-lisp:defun make-disassociated-faces-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list disassociated-face))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass distribute-dataset common-lisp:nil
                       ((arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or dataset-arn common-lisp:null)
                         :accessor struct-shape-distribute-dataset-arn :shape
                         "DatasetArn" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-distribute-dataset
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'distribute-dataset
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'distribute-dataset 'make-distribute-dataset))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input distribute-dataset))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input distribute-dataset))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input distribute-dataset))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass distribute-dataset-entries-request common-lisp:nil
                       ((datasets :initarg :datasets :initform
                         (common-lisp:error ":datasets is required") :type
                         (common-lisp:or distribute-dataset-metadata-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-distribute-dataset-entries-request-datasets
                         :shape "DistributeDatasetMetadataList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-distribute-dataset-entries-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'distribute-dataset-entries-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'distribute-dataset-entries-request
                    'make-distribute-dataset-entries-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          distribute-dataset-entries-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          distribute-dataset-entries-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'datasets))
      (common-lisp:list
       (common-lisp:cons "Datasets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          distribute-dataset-entries-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass distribute-dataset-entries-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-distribute-dataset-entries-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'distribute-dataset-entries-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'distribute-dataset-entries-response
                    'make-distribute-dataset-entries-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          distribute-dataset-entries-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          distribute-dataset-entries-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          distribute-dataset-entries-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype distribute-dataset-metadata-list ()
   '(trivial-types:proper-list distribute-dataset))
 (common-lisp:defun make-distribute-dataset-metadata-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list distribute-dataset))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass dominant-color common-lisp:nil
                       ((red :initarg :red :initform common-lisp:nil :type
                         (common-lisp:or uinteger common-lisp:null) :accessor
                         struct-shape-dominant-color-red :shape "UInteger"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (blue :initarg :blue :initform common-lisp:nil :type
                         (common-lisp:or uinteger common-lisp:null) :accessor
                         struct-shape-dominant-color-blue :shape "UInteger"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (green :initarg :green :initform common-lisp:nil :type
                         (common-lisp:or uinteger common-lisp:null) :accessor
                         struct-shape-dominant-color-green :shape "UInteger"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (hex-code :initarg :hex-code :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-dominant-color-hex-code :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (csscolor :initarg :csscolor :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-dominant-color-csscolor :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (simplified-color :initarg :simplified-color :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-dominant-color-simplified-color :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (pixel-percent :initarg :pixel-percent :initform
                         common-lisp:nil :type
                         (common-lisp:or percent common-lisp:null) :accessor
                         struct-shape-dominant-color-pixel-percent :shape
                         "Percent" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-dominant-color
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'dominant-color
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'dominant-color 'make-dominant-color))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input dominant-color))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input dominant-color))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'red))
      (common-lisp:list
       (common-lisp:cons "Red"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'blue))
      (common-lisp:list
       (common-lisp:cons "Blue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'green))
      (common-lisp:list
       (common-lisp:cons "Green"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hex-code))
      (common-lisp:list
       (common-lisp:cons "HexCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'csscolor))
      (common-lisp:list
       (common-lisp:cons "CSSColor"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'simplified-color))
      (common-lisp:list
       (common-lisp:cons "SimplifiedColor"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pixel-percent))
      (common-lisp:list
       (common-lisp:cons "PixelPercent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input dominant-color))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype dominant-colors ()
   '(trivial-types:proper-list dominant-color))
 (common-lisp:defun make-dominant-colors
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list dominant-color))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass emotion common-lisp:nil
                       ((type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or emotion-name common-lisp:null)
                         :accessor struct-shape-emotion-type :shape
                         "EmotionName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (confidence :initarg :confidence :initform
                         common-lisp:nil :type
                         (common-lisp:or percent common-lisp:null) :accessor
                         struct-shape-emotion-confidence :shape "Percent"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-emotion
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'emotion
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'emotion 'make-emotion))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input emotion))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input emotion))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'confidence))
      (common-lisp:list
       (common-lisp:cons "Confidence"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input emotion))
   common-lisp:nil))
(common-lisp:deftype emotion-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype emotions () '(trivial-types:proper-list emotion))
 (common-lisp:defun make-emotions
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list emotion))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass equipment-detection common-lisp:nil
                       ((bounding-box :initarg :bounding-box :initform
                         common-lisp:nil :type
                         (common-lisp:or bounding-box common-lisp:null)
                         :accessor
                         struct-shape-equipment-detection-bounding-box :shape
                         "BoundingBox" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (confidence :initarg :confidence :initform
                         common-lisp:nil :type
                         (common-lisp:or percent common-lisp:null) :accessor
                         struct-shape-equipment-detection-confidence :shape
                         "Percent" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or protective-equipment-type
                                         common-lisp:null)
                         :accessor struct-shape-equipment-detection-type :shape
                         "ProtectiveEquipmentType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (covers-body-part :initarg :covers-body-part :initform
                         common-lisp:nil :type
                         (common-lisp:or covers-body-part common-lisp:null)
                         :accessor
                         struct-shape-equipment-detection-covers-body-part
                         :shape "CoversBodyPart" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-equipment-detection
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'equipment-detection
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'equipment-detection 'make-equipment-detection))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input equipment-detection))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input equipment-detection))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bounding-box))
      (common-lisp:list
       (common-lisp:cons "BoundingBox"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'confidence))
      (common-lisp:list
       (common-lisp:cons "Confidence"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'covers-body-part))
      (common-lisp:list
       (common-lisp:cons "CoversBodyPart"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input equipment-detection))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype equipment-detections ()
   '(trivial-types:proper-list equipment-detection))
 (common-lisp:defun make-equipment-detections
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list equipment-detection))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass evaluation-result common-lisp:nil
                       ((f1score :initarg :f1score :initform common-lisp:nil
                         :type (common-lisp:or float common-lisp:null)
                         :accessor struct-shape-evaluation-result-f1score
                         :shape "Float" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (summary :initarg :summary :initform common-lisp:nil
                         :type (common-lisp:or summary common-lisp:null)
                         :accessor struct-shape-evaluation-result-summary
                         :shape "Summary" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-evaluation-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'evaluation-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'evaluation-result 'make-evaluation-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input evaluation-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input evaluation-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'f1score))
      (common-lisp:list
       (common-lisp:cons "F1Score"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'summary))
      (common-lisp:list
       (common-lisp:cons "Summary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input evaluation-result))
   common-lisp:nil))
(common-lisp:deftype extended-pagination-token () 'common-lisp:string)
(common-lisp:deftype external-image-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass eye-direction common-lisp:nil
                       ((yaw :initarg :yaw :initform common-lisp:nil :type
                         (common-lisp:or degree common-lisp:null) :accessor
                         struct-shape-eye-direction-yaw :shape "Degree"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (pitch :initarg :pitch :initform common-lisp:nil :type
                         (common-lisp:or degree common-lisp:null) :accessor
                         struct-shape-eye-direction-pitch :shape "Degree"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (confidence :initarg :confidence :initform
                         common-lisp:nil :type
                         (common-lisp:or percent common-lisp:null) :accessor
                         struct-shape-eye-direction-confidence :shape "Percent"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-eye-direction
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'eye-direction
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'eye-direction 'make-eye-direction))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input eye-direction))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input eye-direction))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'yaw))
      (common-lisp:list
       (common-lisp:cons "Yaw"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pitch))
      (common-lisp:list
       (common-lisp:cons "Pitch"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'confidence))
      (common-lisp:list
       (common-lisp:cons "Confidence"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input eye-direction))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass eye-open common-lisp:nil
                       ((value :initarg :value :initform common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-eye-open-value :shape "Boolean" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (confidence :initarg :confidence :initform
                         common-lisp:nil :type
                         (common-lisp:or percent common-lisp:null) :accessor
                         struct-shape-eye-open-confidence :shape "Percent"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-eye-open
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'eye-open
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'eye-open 'make-eye-open))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input eye-open))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input eye-open))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'confidence))
      (common-lisp:list
       (common-lisp:cons "Confidence"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input eye-open))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass eyeglasses common-lisp:nil
                       ((value :initarg :value :initform common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-eyeglasses-value :shape "Boolean"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (confidence :initarg :confidence :initform
                         common-lisp:nil :type
                         (common-lisp:or percent common-lisp:null) :accessor
                         struct-shape-eyeglasses-confidence :shape "Percent"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-eyeglasses
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'eyeglasses
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'eyeglasses 'make-eyeglasses))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input eyeglasses))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input eyeglasses))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'confidence))
      (common-lisp:list
       (common-lisp:cons "Confidence"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input eyeglasses))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass face common-lisp:nil
                       ((face-id :initarg :face-id :initform common-lisp:nil
                         :type (common-lisp:or face-id common-lisp:null)
                         :accessor struct-shape-face-face-id :shape "FaceId"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (bounding-box :initarg :bounding-box :initform
                         common-lisp:nil :type
                         (common-lisp:or bounding-box common-lisp:null)
                         :accessor struct-shape-face-bounding-box :shape
                         "BoundingBox" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (image-id :initarg :image-id :initform common-lisp:nil
                         :type (common-lisp:or image-id common-lisp:null)
                         :accessor struct-shape-face-image-id :shape "ImageId"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (external-image-id :initarg :external-image-id
                         :initform common-lisp:nil :type
                         (common-lisp:or external-image-id common-lisp:null)
                         :accessor struct-shape-face-external-image-id :shape
                         "ExternalImageId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (confidence :initarg :confidence :initform
                         common-lisp:nil :type
                         (common-lisp:or percent common-lisp:null) :accessor
                         struct-shape-face-confidence :shape "Percent"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (index-faces-model-version :initarg
                         :index-faces-model-version :initform common-lisp:nil
                         :type
                         (common-lisp:or index-faces-model-version
                                         common-lisp:null)
                         :accessor struct-shape-face-index-faces-model-version
                         :shape "IndexFacesModelVersion" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (user-id :initarg :user-id :initform common-lisp:nil
                         :type (common-lisp:or user-id common-lisp:null)
                         :accessor struct-shape-face-user-id :shape "UserId"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-face (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'face
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'face 'make-face))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input face))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input face))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'face-id))
      (common-lisp:list
       (common-lisp:cons "FaceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bounding-box))
      (common-lisp:list
       (common-lisp:cons "BoundingBox"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-id))
      (common-lisp:list
       (common-lisp:cons "ImageId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'external-image-id))
      (common-lisp:list
       (common-lisp:cons "ExternalImageId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'confidence))
      (common-lisp:list
       (common-lisp:cons "Confidence"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'index-faces-model-version))
      (common-lisp:list
       (common-lisp:cons "IndexFacesModelVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-id))
      (common-lisp:list
       (common-lisp:cons "UserId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input face))
   common-lisp:nil))
(common-lisp:deftype face-attributes () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass face-detail common-lisp:nil
                       ((bounding-box :initarg :bounding-box :initform
                         common-lisp:nil :type
                         (common-lisp:or bounding-box common-lisp:null)
                         :accessor struct-shape-face-detail-bounding-box :shape
                         "BoundingBox" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (age-range :initarg :age-range :initform
                         common-lisp:nil :type
                         (common-lisp:or age-range common-lisp:null) :accessor
                         struct-shape-face-detail-age-range :shape "AgeRange"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (smile :initarg :smile :initform common-lisp:nil :type
                         (common-lisp:or smile common-lisp:null) :accessor
                         struct-shape-face-detail-smile :shape "Smile"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (eyeglasses :initarg :eyeglasses :initform
                         common-lisp:nil :type
                         (common-lisp:or eyeglasses common-lisp:null) :accessor
                         struct-shape-face-detail-eyeglasses :shape
                         "Eyeglasses" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (sunglasses :initarg :sunglasses :initform
                         common-lisp:nil :type
                         (common-lisp:or sunglasses common-lisp:null) :accessor
                         struct-shape-face-detail-sunglasses :shape
                         "Sunglasses" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (gender :initarg :gender :initform common-lisp:nil
                         :type (common-lisp:or gender common-lisp:null)
                         :accessor struct-shape-face-detail-gender :shape
                         "Gender" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (beard :initarg :beard :initform common-lisp:nil :type
                         (common-lisp:or beard common-lisp:null) :accessor
                         struct-shape-face-detail-beard :shape "Beard"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (mustache :initarg :mustache :initform common-lisp:nil
                         :type (common-lisp:or mustache common-lisp:null)
                         :accessor struct-shape-face-detail-mustache :shape
                         "Mustache" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (eyes-open :initarg :eyes-open :initform
                         common-lisp:nil :type
                         (common-lisp:or eye-open common-lisp:null) :accessor
                         struct-shape-face-detail-eyes-open :shape "EyeOpen"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (mouth-open :initarg :mouth-open :initform
                         common-lisp:nil :type
                         (common-lisp:or mouth-open common-lisp:null) :accessor
                         struct-shape-face-detail-mouth-open :shape "MouthOpen"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (emotions :initarg :emotions :initform common-lisp:nil
                         :type (common-lisp:or emotions common-lisp:null)
                         :accessor struct-shape-face-detail-emotions :shape
                         "Emotions" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (landmarks :initarg :landmarks :initform
                         common-lisp:nil :type
                         (common-lisp:or landmarks common-lisp:null) :accessor
                         struct-shape-face-detail-landmarks :shape "Landmarks"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (pose :initarg :pose :initform common-lisp:nil :type
                         (common-lisp:or pose common-lisp:null) :accessor
                         struct-shape-face-detail-pose :shape "Pose" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (quality :initarg :quality :initform common-lisp:nil
                         :type (common-lisp:or image-quality common-lisp:null)
                         :accessor struct-shape-face-detail-quality :shape
                         "ImageQuality" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (confidence :initarg :confidence :initform
                         common-lisp:nil :type
                         (common-lisp:or percent common-lisp:null) :accessor
                         struct-shape-face-detail-confidence :shape "Percent"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (face-occluded :initarg :face-occluded :initform
                         common-lisp:nil :type
                         (common-lisp:or face-occluded common-lisp:null)
                         :accessor struct-shape-face-detail-face-occluded
                         :shape "FaceOccluded" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (eye-direction :initarg :eye-direction :initform
                         common-lisp:nil :type
                         (common-lisp:or eye-direction common-lisp:null)
                         :accessor struct-shape-face-detail-eye-direction
                         :shape "EyeDirection" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-face-detail
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'face-detail
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'face-detail 'make-face-detail))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input face-detail))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input face-detail))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bounding-box))
      (common-lisp:list
       (common-lisp:cons "BoundingBox"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'age-range))
      (common-lisp:list
       (common-lisp:cons "AgeRange"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'smile))
      (common-lisp:list
       (common-lisp:cons "Smile"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'eyeglasses))
      (common-lisp:list
       (common-lisp:cons "Eyeglasses"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sunglasses))
      (common-lisp:list
       (common-lisp:cons "Sunglasses"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gender))
      (common-lisp:list
       (common-lisp:cons "Gender"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'beard))
      (common-lisp:list
       (common-lisp:cons "Beard"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mustache))
      (common-lisp:list
       (common-lisp:cons "Mustache"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'eyes-open))
      (common-lisp:list
       (common-lisp:cons "EyesOpen"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mouth-open))
      (common-lisp:list
       (common-lisp:cons "MouthOpen"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'emotions))
      (common-lisp:list
       (common-lisp:cons "Emotions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'landmarks))
      (common-lisp:list
       (common-lisp:cons "Landmarks"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pose))
      (common-lisp:list
       (common-lisp:cons "Pose"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'quality))
      (common-lisp:list
       (common-lisp:cons "Quality"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'confidence))
      (common-lisp:list
       (common-lisp:cons "Confidence"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'face-occluded))
      (common-lisp:list
       (common-lisp:cons "FaceOccluded"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'eye-direction))
      (common-lisp:list
       (common-lisp:cons "EyeDirection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input face-detail))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype face-detail-list ()
   '(trivial-types:proper-list face-detail))
 (common-lisp:defun make-face-detail-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list face-detail))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass face-detection common-lisp:nil
                       ((timestamp :initarg :timestamp :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-face-detection-timestamp :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (face :initarg :face :initform common-lisp:nil :type
                         (common-lisp:or face-detail common-lisp:null)
                         :accessor struct-shape-face-detection-face :shape
                         "FaceDetail" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-face-detection
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'face-detection
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'face-detection 'make-face-detection))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input face-detection))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input face-detection))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timestamp))
      (common-lisp:list
       (common-lisp:cons "Timestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'face))
      (common-lisp:list
       (common-lisp:cons "Face"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input face-detection))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype face-detections ()
   '(trivial-types:proper-list face-detection))
 (common-lisp:defun make-face-detections
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list face-detection))
   aws-sdk/generator/shape::members))
(common-lisp:deftype face-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype face-id-list () '(trivial-types:proper-list face-id))
 (common-lisp:defun make-face-id-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list face-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype face-list () '(trivial-types:proper-list face))
 (common-lisp:defun make-face-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list face))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass face-match common-lisp:nil
                       ((similarity :initarg :similarity :initform
                         common-lisp:nil :type
                         (common-lisp:or percent common-lisp:null) :accessor
                         struct-shape-face-match-similarity :shape "Percent"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (face :initarg :face :initform common-lisp:nil :type
                         (common-lisp:or face common-lisp:null) :accessor
                         struct-shape-face-match-face :shape "Face" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-face-match
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'face-match
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'face-match 'make-face-match))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input face-match))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input face-match))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'similarity))
      (common-lisp:list
       (common-lisp:cons "Similarity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'face))
      (common-lisp:list
       (common-lisp:cons "Face"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input face-match))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype face-match-list ()
   '(trivial-types:proper-list face-match))
 (common-lisp:defun make-face-match-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list face-match))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype face-model-version-list ()
   '(trivial-types:proper-list string))
 (common-lisp:defun make-face-model-version-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass face-occluded common-lisp:nil
                       ((value :initarg :value :initform common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-face-occluded-value :shape "Boolean"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (confidence :initarg :confidence :initform
                         common-lisp:nil :type
                         (common-lisp:or percent common-lisp:null) :accessor
                         struct-shape-face-occluded-confidence :shape "Percent"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-face-occluded
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'face-occluded
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'face-occluded 'make-face-occluded))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input face-occluded))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input face-occluded))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'confidence))
      (common-lisp:list
       (common-lisp:cons "Confidence"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input face-occluded))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass face-record common-lisp:nil
                       ((face :initarg :face :initform common-lisp:nil :type
                         (common-lisp:or face common-lisp:null) :accessor
                         struct-shape-face-record-face :shape "Face" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (face-detail :initarg :face-detail :initform
                         common-lisp:nil :type
                         (common-lisp:or face-detail common-lisp:null)
                         :accessor struct-shape-face-record-face-detail :shape
                         "FaceDetail" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-face-record
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'face-record
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'face-record 'make-face-record))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input face-record))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input face-record))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'face))
      (common-lisp:list
       (common-lisp:cons "Face"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'face-detail))
      (common-lisp:list
       (common-lisp:cons "FaceDetail"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input face-record))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype face-record-list ()
   '(trivial-types:proper-list face-record))
 (common-lisp:defun make-face-record-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list face-record))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass face-search-settings common-lisp:nil
                       ((collection-id :initarg :collection-id :initform
                         common-lisp:nil :type
                         (common-lisp:or collection-id common-lisp:null)
                         :accessor
                         struct-shape-face-search-settings-collection-id :shape
                         "CollectionId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (face-match-threshold :initarg :face-match-threshold
                         :initform common-lisp:nil :type
                         (common-lisp:or percent common-lisp:null) :accessor
                         struct-shape-face-search-settings-face-match-threshold
                         :shape "Percent" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-face-search-settings
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'face-search-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'face-search-settings 'make-face-search-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input face-search-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input face-search-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'collection-id))
      (common-lisp:list
       (common-lisp:cons "CollectionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'face-match-threshold))
      (common-lisp:list
       (common-lisp:cons "FaceMatchThreshold"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input face-search-settings))
   common-lisp:nil))
(common-lisp:deftype face-search-sort-by () 'common-lisp:string)
(common-lisp:deftype float () 'common-lisp:single-float)
(common-lisp:deftype flow-definition-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass gender common-lisp:nil
                       ((value :initarg :value :initform common-lisp:nil :type
                         (common-lisp:or gender-type common-lisp:null)
                         :accessor struct-shape-gender-value :shape
                         "GenderType" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (confidence :initarg :confidence :initform
                         common-lisp:nil :type
                         (common-lisp:or percent common-lisp:null) :accessor
                         struct-shape-gender-confidence :shape "Percent"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-gender
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'gender
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'gender 'make-gender))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input gender))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input gender))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'confidence))
      (common-lisp:list
       (common-lisp:cons "Confidence"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input gender))
   common-lisp:nil))
(common-lisp:deftype gender-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype general-labels-filter-list ()
   '(trivial-types:proper-list general-labels-filter-value))
 (common-lisp:defun make-general-labels-filter-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            general-labels-filter-value))
   aws-sdk/generator/shape::members))
(common-lisp:deftype general-labels-filter-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass general-labels-settings common-lisp:nil
                       ((label-inclusion-filters :initarg
                         :label-inclusion-filters :initform common-lisp:nil
                         :type
                         (common-lisp:or general-labels-filter-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-general-labels-settings-label-inclusion-filters
                         :shape "GeneralLabelsFilterList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (label-exclusion-filters :initarg
                         :label-exclusion-filters :initform common-lisp:nil
                         :type
                         (common-lisp:or general-labels-filter-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-general-labels-settings-label-exclusion-filters
                         :shape "GeneralLabelsFilterList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (label-category-inclusion-filters :initarg
                         :label-category-inclusion-filters :initform
                         common-lisp:nil :type
                         (common-lisp:or general-labels-filter-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-general-labels-settings-label-category-inclusion-filters
                         :shape "GeneralLabelsFilterList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (label-category-exclusion-filters :initarg
                         :label-category-exclusion-filters :initform
                         common-lisp:nil :type
                         (common-lisp:or general-labels-filter-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-general-labels-settings-label-category-exclusion-filters
                         :shape "GeneralLabelsFilterList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-general-labels-settings
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'general-labels-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'general-labels-settings 'make-general-labels-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          general-labels-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          general-labels-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'label-inclusion-filters))
      (common-lisp:list
       (common-lisp:cons "LabelInclusionFilters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'label-exclusion-filters))
      (common-lisp:list
       (common-lisp:cons "LabelExclusionFilters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'label-category-inclusion-filters))
      (common-lisp:list
       (common-lisp:cons "LabelCategoryInclusionFilters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'label-category-exclusion-filters))
      (common-lisp:list
       (common-lisp:cons "LabelCategoryExclusionFilters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          general-labels-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass geometry common-lisp:nil
                       ((bounding-box :initarg :bounding-box :initform
                         common-lisp:nil :type
                         (common-lisp:or bounding-box common-lisp:null)
                         :accessor struct-shape-geometry-bounding-box :shape
                         "BoundingBox" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (polygon :initarg :polygon :initform common-lisp:nil
                         :type (common-lisp:or polygon common-lisp:null)
                         :accessor struct-shape-geometry-polygon :shape
                         "Polygon" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-geometry
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'geometry
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'geometry 'make-geometry))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input geometry))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input geometry))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bounding-box))
      (common-lisp:list
       (common-lisp:cons "BoundingBox"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'polygon))
      (common-lisp:list
       (common-lisp:cons "Polygon"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input geometry))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-celebrity-info-request common-lisp:nil
                       ((id :initarg :id :initform
                         (common-lisp:error ":id is required") :type
                         (common-lisp:or rekognition-unique-id
                                         common-lisp:null)
                         :accessor struct-shape-get-celebrity-info-request-id
                         :shape "RekognitionUniqueId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-celebrity-info-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-celebrity-info-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-celebrity-info-request
                    'make-get-celebrity-info-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-celebrity-info-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-celebrity-info-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-celebrity-info-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-celebrity-info-response common-lisp:nil
                       ((urls :initarg :urls :initform common-lisp:nil :type
                         (common-lisp:or urls common-lisp:null) :accessor
                         struct-shape-get-celebrity-info-response-urls :shape
                         "Urls" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-get-celebrity-info-response-name :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (known-gender :initarg :known-gender :initform
                         common-lisp:nil :type
                         (common-lisp:or known-gender common-lisp:null)
                         :accessor
                         struct-shape-get-celebrity-info-response-known-gender
                         :shape "KnownGender" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-celebrity-info-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-celebrity-info-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-celebrity-info-response
                    'make-get-celebrity-info-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-celebrity-info-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-celebrity-info-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'urls))
      (common-lisp:list
       (common-lisp:cons "Urls"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'known-gender))
      (common-lisp:list
       (common-lisp:cons "KnownGender"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-celebrity-info-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-celebrity-recognition-request common-lisp:nil
                       ((job-id :initarg :job-id :initform
                         (common-lisp:error ":job-id is required") :type
                         (common-lisp:or job-id common-lisp:null) :accessor
                         struct-shape-get-celebrity-recognition-request-job-id
                         :shape "JobId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-get-celebrity-recognition-request-max-results
                         :shape "MaxResults" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-get-celebrity-recognition-request-next-token
                         :shape "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (sort-by :initarg :sort-by :initform common-lisp:nil
                         :type
                         (common-lisp:or celebrity-recognition-sort-by
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-celebrity-recognition-request-sort-by
                         :shape "CelebrityRecognitionSortBy" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-celebrity-recognition-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-celebrity-recognition-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-celebrity-recognition-request
                    'make-get-celebrity-recognition-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-celebrity-recognition-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-celebrity-recognition-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "JobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-by))
      (common-lisp:list
       (common-lisp:cons "SortBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-celebrity-recognition-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-celebrity-recognition-response common-lisp:nil
                       ((job-status :initarg :job-status :initform
                         common-lisp:nil :type
                         (common-lisp:or video-job-status common-lisp:null)
                         :accessor
                         struct-shape-get-celebrity-recognition-response-job-status
                         :shape "VideoJobStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status-message :initarg :status-message :initform
                         common-lisp:nil :type
                         (common-lisp:or status-message common-lisp:null)
                         :accessor
                         struct-shape-get-celebrity-recognition-response-status-message
                         :shape "StatusMessage" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (video-metadata :initarg :video-metadata :initform
                         common-lisp:nil :type
                         (common-lisp:or video-metadata common-lisp:null)
                         :accessor
                         struct-shape-get-celebrity-recognition-response-video-metadata
                         :shape "VideoMetadata" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-get-celebrity-recognition-response-next-token
                         :shape "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (celebrities :initarg :celebrities :initform
                         common-lisp:nil :type
                         (common-lisp:or celebrity-recognitions
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-celebrity-recognition-response-celebrities
                         :shape "CelebrityRecognitions" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (job-id :initarg :job-id :initform common-lisp:nil
                         :type (common-lisp:or job-id common-lisp:null)
                         :accessor
                         struct-shape-get-celebrity-recognition-response-job-id
                         :shape "JobId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (video :initarg :video :initform common-lisp:nil :type
                         (common-lisp:or video common-lisp:null) :accessor
                         struct-shape-get-celebrity-recognition-response-video
                         :shape "Video" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (job-tag :initarg :job-tag :initform common-lisp:nil
                         :type (common-lisp:or job-tag common-lisp:null)
                         :accessor
                         struct-shape-get-celebrity-recognition-response-job-tag
                         :shape "JobTag" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-celebrity-recognition-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-celebrity-recognition-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-celebrity-recognition-response
                    'make-get-celebrity-recognition-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-celebrity-recognition-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-celebrity-recognition-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-status))
      (common-lisp:list
       (common-lisp:cons "JobStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-message))
      (common-lisp:list
       (common-lisp:cons "StatusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'video-metadata))
      (common-lisp:list
       (common-lisp:cons "VideoMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'celebrities))
      (common-lisp:list
       (common-lisp:cons "Celebrities"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "JobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'video))
      (common-lisp:list
       (common-lisp:cons "Video"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-tag))
      (common-lisp:list
       (common-lisp:cons "JobTag"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-celebrity-recognition-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-content-moderation-request common-lisp:nil
                       ((job-id :initarg :job-id :initform
                         (common-lisp:error ":job-id is required") :type
                         (common-lisp:or job-id common-lisp:null) :accessor
                         struct-shape-get-content-moderation-request-job-id
                         :shape "JobId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-get-content-moderation-request-max-results
                         :shape "MaxResults" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-get-content-moderation-request-next-token
                         :shape "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (sort-by :initarg :sort-by :initform common-lisp:nil
                         :type
                         (common-lisp:or content-moderation-sort-by
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-content-moderation-request-sort-by
                         :shape "ContentModerationSortBy" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (aggregate-by :initarg :aggregate-by :initform
                         common-lisp:nil :type
                         (common-lisp:or content-moderation-aggregate-by
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-content-moderation-request-aggregate-by
                         :shape "ContentModerationAggregateBy" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-content-moderation-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-content-moderation-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-content-moderation-request
                    'make-get-content-moderation-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-content-moderation-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-content-moderation-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "JobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-by))
      (common-lisp:list
       (common-lisp:cons "SortBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aggregate-by))
      (common-lisp:list
       (common-lisp:cons "AggregateBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-content-moderation-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-content-moderation-request-metadata common-lisp:nil
                       ((sort-by :initarg :sort-by :initform common-lisp:nil
                         :type
                         (common-lisp:or content-moderation-sort-by
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-content-moderation-request-metadata-sort-by
                         :shape "ContentModerationSortBy" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (aggregate-by :initarg :aggregate-by :initform
                         common-lisp:nil :type
                         (common-lisp:or content-moderation-aggregate-by
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-content-moderation-request-metadata-aggregate-by
                         :shape "ContentModerationAggregateBy" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-content-moderation-request-metadata
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-content-moderation-request-metadata
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-content-moderation-request-metadata
                    'make-get-content-moderation-request-metadata))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-content-moderation-request-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-content-moderation-request-metadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-by))
      (common-lisp:list
       (common-lisp:cons "SortBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aggregate-by))
      (common-lisp:list
       (common-lisp:cons "AggregateBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-content-moderation-request-metadata))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-content-moderation-response common-lisp:nil
                       ((job-status :initarg :job-status :initform
                         common-lisp:nil :type
                         (common-lisp:or video-job-status common-lisp:null)
                         :accessor
                         struct-shape-get-content-moderation-response-job-status
                         :shape "VideoJobStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status-message :initarg :status-message :initform
                         common-lisp:nil :type
                         (common-lisp:or status-message common-lisp:null)
                         :accessor
                         struct-shape-get-content-moderation-response-status-message
                         :shape "StatusMessage" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (video-metadata :initarg :video-metadata :initform
                         common-lisp:nil :type
                         (common-lisp:or video-metadata common-lisp:null)
                         :accessor
                         struct-shape-get-content-moderation-response-video-metadata
                         :shape "VideoMetadata" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (moderation-labels :initarg :moderation-labels
                         :initform common-lisp:nil :type
                         (common-lisp:or content-moderation-detections
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-content-moderation-response-moderation-labels
                         :shape "ContentModerationDetections" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-get-content-moderation-response-next-token
                         :shape "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (moderation-model-version :initarg
                         :moderation-model-version :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-get-content-moderation-response-moderation-model-version
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (job-id :initarg :job-id :initform common-lisp:nil
                         :type (common-lisp:or job-id common-lisp:null)
                         :accessor
                         struct-shape-get-content-moderation-response-job-id
                         :shape "JobId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (video :initarg :video :initform common-lisp:nil :type
                         (common-lisp:or video common-lisp:null) :accessor
                         struct-shape-get-content-moderation-response-video
                         :shape "Video" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (job-tag :initarg :job-tag :initform common-lisp:nil
                         :type (common-lisp:or job-tag common-lisp:null)
                         :accessor
                         struct-shape-get-content-moderation-response-job-tag
                         :shape "JobTag" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (get-request-metadata :initarg :get-request-metadata
                         :initform common-lisp:nil :type
                         (common-lisp:or
                          get-content-moderation-request-metadata
                          common-lisp:null)
                         :accessor
                         struct-shape-get-content-moderation-response-get-request-metadata
                         :shape "GetContentModerationRequestMetadata" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-content-moderation-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-content-moderation-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-content-moderation-response
                    'make-get-content-moderation-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-content-moderation-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-content-moderation-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-status))
      (common-lisp:list
       (common-lisp:cons "JobStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-message))
      (common-lisp:list
       (common-lisp:cons "StatusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'video-metadata))
      (common-lisp:list
       (common-lisp:cons "VideoMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'moderation-labels))
      (common-lisp:list
       (common-lisp:cons "ModerationLabels"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'moderation-model-version))
      (common-lisp:list
       (common-lisp:cons "ModerationModelVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "JobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'video))
      (common-lisp:list
       (common-lisp:cons "Video"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-tag))
      (common-lisp:list
       (common-lisp:cons "JobTag"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'get-request-metadata))
      (common-lisp:list
       (common-lisp:cons "GetRequestMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-content-moderation-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-face-detection-request common-lisp:nil
                       ((job-id :initarg :job-id :initform
                         (common-lisp:error ":job-id is required") :type
                         (common-lisp:or job-id common-lisp:null) :accessor
                         struct-shape-get-face-detection-request-job-id :shape
                         "JobId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-get-face-detection-request-max-results
                         :shape "MaxResults" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-get-face-detection-request-next-token
                         :shape "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-face-detection-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-face-detection-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-face-detection-request
                    'make-get-face-detection-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-face-detection-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-face-detection-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "JobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-face-detection-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-face-detection-response common-lisp:nil
                       ((job-status :initarg :job-status :initform
                         common-lisp:nil :type
                         (common-lisp:or video-job-status common-lisp:null)
                         :accessor
                         struct-shape-get-face-detection-response-job-status
                         :shape "VideoJobStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status-message :initarg :status-message :initform
                         common-lisp:nil :type
                         (common-lisp:or status-message common-lisp:null)
                         :accessor
                         struct-shape-get-face-detection-response-status-message
                         :shape "StatusMessage" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (video-metadata :initarg :video-metadata :initform
                         common-lisp:nil :type
                         (common-lisp:or video-metadata common-lisp:null)
                         :accessor
                         struct-shape-get-face-detection-response-video-metadata
                         :shape "VideoMetadata" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-get-face-detection-response-next-token
                         :shape "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (faces :initarg :faces :initform common-lisp:nil :type
                         (common-lisp:or face-detections common-lisp:null)
                         :accessor
                         struct-shape-get-face-detection-response-faces :shape
                         "FaceDetections" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (job-id :initarg :job-id :initform common-lisp:nil
                         :type (common-lisp:or job-id common-lisp:null)
                         :accessor
                         struct-shape-get-face-detection-response-job-id :shape
                         "JobId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (video :initarg :video :initform common-lisp:nil :type
                         (common-lisp:or video common-lisp:null) :accessor
                         struct-shape-get-face-detection-response-video :shape
                         "Video" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (job-tag :initarg :job-tag :initform common-lisp:nil
                         :type (common-lisp:or job-tag common-lisp:null)
                         :accessor
                         struct-shape-get-face-detection-response-job-tag
                         :shape "JobTag" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-face-detection-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-face-detection-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-face-detection-response
                    'make-get-face-detection-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-face-detection-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-face-detection-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-status))
      (common-lisp:list
       (common-lisp:cons "JobStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-message))
      (common-lisp:list
       (common-lisp:cons "StatusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'video-metadata))
      (common-lisp:list
       (common-lisp:cons "VideoMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'faces))
      (common-lisp:list
       (common-lisp:cons "Faces"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "JobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'video))
      (common-lisp:list
       (common-lisp:cons "Video"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-tag))
      (common-lisp:list
       (common-lisp:cons "JobTag"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-face-detection-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-face-liveness-session-results-request
                       common-lisp:nil
                       ((session-id :initarg :session-id :initform
                         (common-lisp:error ":session-id is required") :type
                         (common-lisp:or liveness-session-id common-lisp:null)
                         :accessor
                         struct-shape-get-face-liveness-session-results-request-session-id
                         :shape "LivenessSessionId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-face-liveness-session-results-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-face-liveness-session-results-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-face-liveness-session-results-request
                    'make-get-face-liveness-session-results-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-face-liveness-session-results-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-face-liveness-session-results-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session-id))
      (common-lisp:list
       (common-lisp:cons "SessionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-face-liveness-session-results-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-face-liveness-session-results-response
                       common-lisp:nil
                       ((session-id :initarg :session-id :initform
                         (common-lisp:error ":session-id is required") :type
                         (common-lisp:or liveness-session-id common-lisp:null)
                         :accessor
                         struct-shape-get-face-liveness-session-results-response-session-id
                         :shape "LivenessSessionId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform
                         (common-lisp:error ":status is required") :type
                         (common-lisp:or liveness-session-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-face-liveness-session-results-response-status
                         :shape "LivenessSessionStatus" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (confidence :initarg :confidence :initform
                         common-lisp:nil :type
                         (common-lisp:or percent common-lisp:null) :accessor
                         struct-shape-get-face-liveness-session-results-response-confidence
                         :shape "Percent" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (reference-image :initarg :reference-image :initform
                         common-lisp:nil :type
                         (common-lisp:or audit-image common-lisp:null)
                         :accessor
                         struct-shape-get-face-liveness-session-results-response-reference-image
                         :shape "AuditImage" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (audit-images :initarg :audit-images :initform
                         common-lisp:nil :type
                         (common-lisp:or audit-images common-lisp:null)
                         :accessor
                         struct-shape-get-face-liveness-session-results-response-audit-images
                         :shape "AuditImages" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-face-liveness-session-results-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-face-liveness-session-results-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-face-liveness-session-results-response
                    'make-get-face-liveness-session-results-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-face-liveness-session-results-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-face-liveness-session-results-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session-id))
      (common-lisp:list
       (common-lisp:cons "SessionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'confidence))
      (common-lisp:list
       (common-lisp:cons "Confidence"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reference-image))
      (common-lisp:list
       (common-lisp:cons "ReferenceImage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'audit-images))
      (common-lisp:list
       (common-lisp:cons "AuditImages"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-face-liveness-session-results-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-face-search-request common-lisp:nil
                       ((job-id :initarg :job-id :initform
                         (common-lisp:error ":job-id is required") :type
                         (common-lisp:or job-id common-lisp:null) :accessor
                         struct-shape-get-face-search-request-job-id :shape
                         "JobId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-get-face-search-request-max-results
                         :shape "MaxResults" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-get-face-search-request-next-token :shape
                         "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (sort-by :initarg :sort-by :initform common-lisp:nil
                         :type
                         (common-lisp:or face-search-sort-by common-lisp:null)
                         :accessor struct-shape-get-face-search-request-sort-by
                         :shape "FaceSearchSortBy" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-face-search-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-face-search-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-face-search-request 'make-get-face-search-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-face-search-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-face-search-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "JobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-by))
      (common-lisp:list
       (common-lisp:cons "SortBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-face-search-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-face-search-response common-lisp:nil
                       ((job-status :initarg :job-status :initform
                         common-lisp:nil :type
                         (common-lisp:or video-job-status common-lisp:null)
                         :accessor
                         struct-shape-get-face-search-response-job-status
                         :shape "VideoJobStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status-message :initarg :status-message :initform
                         common-lisp:nil :type
                         (common-lisp:or status-message common-lisp:null)
                         :accessor
                         struct-shape-get-face-search-response-status-message
                         :shape "StatusMessage" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-get-face-search-response-next-token
                         :shape "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (video-metadata :initarg :video-metadata :initform
                         common-lisp:nil :type
                         (common-lisp:or video-metadata common-lisp:null)
                         :accessor
                         struct-shape-get-face-search-response-video-metadata
                         :shape "VideoMetadata" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (persons :initarg :persons :initform common-lisp:nil
                         :type (common-lisp:or person-matches common-lisp:null)
                         :accessor
                         struct-shape-get-face-search-response-persons :shape
                         "PersonMatches" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (job-id :initarg :job-id :initform common-lisp:nil
                         :type (common-lisp:or job-id common-lisp:null)
                         :accessor struct-shape-get-face-search-response-job-id
                         :shape "JobId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (video :initarg :video :initform common-lisp:nil :type
                         (common-lisp:or video common-lisp:null) :accessor
                         struct-shape-get-face-search-response-video :shape
                         "Video" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (job-tag :initarg :job-tag :initform common-lisp:nil
                         :type (common-lisp:or job-tag common-lisp:null)
                         :accessor
                         struct-shape-get-face-search-response-job-tag :shape
                         "JobTag" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-face-search-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-face-search-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-face-search-response 'make-get-face-search-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-face-search-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-face-search-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-status))
      (common-lisp:list
       (common-lisp:cons "JobStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-message))
      (common-lisp:list
       (common-lisp:cons "StatusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'video-metadata))
      (common-lisp:list
       (common-lisp:cons "VideoMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'persons))
      (common-lisp:list
       (common-lisp:cons "Persons"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "JobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'video))
      (common-lisp:list
       (common-lisp:cons "Video"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-tag))
      (common-lisp:list
       (common-lisp:cons "JobTag"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-face-search-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-label-detection-request common-lisp:nil
                       ((job-id :initarg :job-id :initform
                         (common-lisp:error ":job-id is required") :type
                         (common-lisp:or job-id common-lisp:null) :accessor
                         struct-shape-get-label-detection-request-job-id :shape
                         "JobId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-get-label-detection-request-max-results
                         :shape "MaxResults" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-get-label-detection-request-next-token
                         :shape "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (sort-by :initarg :sort-by :initform common-lisp:nil
                         :type
                         (common-lisp:or label-detection-sort-by
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-label-detection-request-sort-by
                         :shape "LabelDetectionSortBy" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (aggregate-by :initarg :aggregate-by :initform
                         common-lisp:nil :type
                         (common-lisp:or label-detection-aggregate-by
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-label-detection-request-aggregate-by
                         :shape "LabelDetectionAggregateBy" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-label-detection-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-label-detection-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-label-detection-request
                    'make-get-label-detection-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-label-detection-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-label-detection-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "JobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-by))
      (common-lisp:list
       (common-lisp:cons "SortBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aggregate-by))
      (common-lisp:list
       (common-lisp:cons "AggregateBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-label-detection-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-label-detection-request-metadata common-lisp:nil
                       ((sort-by :initarg :sort-by :initform common-lisp:nil
                         :type
                         (common-lisp:or label-detection-sort-by
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-label-detection-request-metadata-sort-by
                         :shape "LabelDetectionSortBy" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (aggregate-by :initarg :aggregate-by :initform
                         common-lisp:nil :type
                         (common-lisp:or label-detection-aggregate-by
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-label-detection-request-metadata-aggregate-by
                         :shape "LabelDetectionAggregateBy" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-label-detection-request-metadata
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-label-detection-request-metadata
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-label-detection-request-metadata
                    'make-get-label-detection-request-metadata))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-label-detection-request-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-label-detection-request-metadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-by))
      (common-lisp:list
       (common-lisp:cons "SortBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aggregate-by))
      (common-lisp:list
       (common-lisp:cons "AggregateBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-label-detection-request-metadata))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-label-detection-response common-lisp:nil
                       ((job-status :initarg :job-status :initform
                         common-lisp:nil :type
                         (common-lisp:or video-job-status common-lisp:null)
                         :accessor
                         struct-shape-get-label-detection-response-job-status
                         :shape "VideoJobStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status-message :initarg :status-message :initform
                         common-lisp:nil :type
                         (common-lisp:or status-message common-lisp:null)
                         :accessor
                         struct-shape-get-label-detection-response-status-message
                         :shape "StatusMessage" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (video-metadata :initarg :video-metadata :initform
                         common-lisp:nil :type
                         (common-lisp:or video-metadata common-lisp:null)
                         :accessor
                         struct-shape-get-label-detection-response-video-metadata
                         :shape "VideoMetadata" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-get-label-detection-response-next-token
                         :shape "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (labels :initarg :labels :initform common-lisp:nil
                         :type
                         (common-lisp:or label-detections common-lisp:null)
                         :accessor
                         struct-shape-get-label-detection-response-labels
                         :shape "LabelDetections" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (label-model-version :initarg :label-model-version
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-get-label-detection-response-label-model-version
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (job-id :initarg :job-id :initform common-lisp:nil
                         :type (common-lisp:or job-id common-lisp:null)
                         :accessor
                         struct-shape-get-label-detection-response-job-id
                         :shape "JobId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (video :initarg :video :initform common-lisp:nil :type
                         (common-lisp:or video common-lisp:null) :accessor
                         struct-shape-get-label-detection-response-video :shape
                         "Video" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (job-tag :initarg :job-tag :initform common-lisp:nil
                         :type (common-lisp:or job-tag common-lisp:null)
                         :accessor
                         struct-shape-get-label-detection-response-job-tag
                         :shape "JobTag" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (get-request-metadata :initarg :get-request-metadata
                         :initform common-lisp:nil :type
                         (common-lisp:or get-label-detection-request-metadata
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-label-detection-response-get-request-metadata
                         :shape "GetLabelDetectionRequestMetadata" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-label-detection-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-label-detection-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-label-detection-response
                    'make-get-label-detection-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-label-detection-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-label-detection-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-status))
      (common-lisp:list
       (common-lisp:cons "JobStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-message))
      (common-lisp:list
       (common-lisp:cons "StatusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'video-metadata))
      (common-lisp:list
       (common-lisp:cons "VideoMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'labels))
      (common-lisp:list
       (common-lisp:cons "Labels"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'label-model-version))
      (common-lisp:list
       (common-lisp:cons "LabelModelVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "JobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'video))
      (common-lisp:list
       (common-lisp:cons "Video"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-tag))
      (common-lisp:list
       (common-lisp:cons "JobTag"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'get-request-metadata))
      (common-lisp:list
       (common-lisp:cons "GetRequestMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-label-detection-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-media-analysis-job-request common-lisp:nil
                       ((job-id :initarg :job-id :initform
                         (common-lisp:error ":job-id is required") :type
                         (common-lisp:or media-analysis-job-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-media-analysis-job-request-job-id
                         :shape "MediaAnalysisJobId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-media-analysis-job-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-media-analysis-job-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-media-analysis-job-request
                    'make-get-media-analysis-job-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-media-analysis-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-media-analysis-job-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "JobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-media-analysis-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-media-analysis-job-response common-lisp:nil
                       ((job-id :initarg :job-id :initform
                         (common-lisp:error ":job-id is required") :type
                         (common-lisp:or media-analysis-job-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-media-analysis-job-response-job-id
                         :shape "MediaAnalysisJobId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (job-name :initarg :job-name :initform common-lisp:nil
                         :type
                         (common-lisp:or media-analysis-job-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-media-analysis-job-response-job-name
                         :shape "MediaAnalysisJobName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (operations-config :initarg :operations-config
                         :initform
                         (common-lisp:error ":operations-config is required")
                         :type
                         (common-lisp:or media-analysis-operations-config
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-media-analysis-job-response-operations-config
                         :shape "MediaAnalysisOperationsConfig" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (status :initarg :status :initform
                         (common-lisp:error ":status is required") :type
                         (common-lisp:or media-analysis-job-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-media-analysis-job-response-status
                         :shape "MediaAnalysisJobStatus" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (failure-details :initarg :failure-details :initform
                         common-lisp:nil :type
                         (common-lisp:or media-analysis-job-failure-details
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-media-analysis-job-response-failure-details
                         :shape "MediaAnalysisJobFailureDetails" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (creation-timestamp :initarg :creation-timestamp
                         :initform
                         (common-lisp:error ":creation-timestamp is required")
                         :type (common-lisp:or date-time common-lisp:null)
                         :accessor
                         struct-shape-get-media-analysis-job-response-creation-timestamp
                         :shape "DateTime" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (completion-timestamp :initarg :completion-timestamp
                         :initform common-lisp:nil :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         struct-shape-get-media-analysis-job-response-completion-timestamp
                         :shape "DateTime" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (input :initarg :input :initform
                         (common-lisp:error ":input is required") :type
                         (common-lisp:or media-analysis-input common-lisp:null)
                         :accessor
                         struct-shape-get-media-analysis-job-response-input
                         :shape "MediaAnalysisInput" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (output-config :initarg :output-config :initform
                         (common-lisp:error ":output-config is required") :type
                         (common-lisp:or media-analysis-output-config
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-media-analysis-job-response-output-config
                         :shape "MediaAnalysisOutputConfig" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (kms-key-id :initarg :kms-key-id :initform
                         common-lisp:nil :type
                         (common-lisp:or kms-key-id common-lisp:null) :accessor
                         struct-shape-get-media-analysis-job-response-kms-key-id
                         :shape "KmsKeyId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (results :initarg :results :initform common-lisp:nil
                         :type
                         (common-lisp:or media-analysis-results
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-media-analysis-job-response-results
                         :shape "MediaAnalysisResults" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (manifest-summary :initarg :manifest-summary :initform
                         common-lisp:nil :type
                         (common-lisp:or media-analysis-manifest-summary
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-media-analysis-job-response-manifest-summary
                         :shape "MediaAnalysisManifestSummary" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-media-analysis-job-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-media-analysis-job-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-media-analysis-job-response
                    'make-get-media-analysis-job-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-media-analysis-job-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-media-analysis-job-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "JobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-name))
      (common-lisp:list
       (common-lisp:cons "JobName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operations-config))
      (common-lisp:list
       (common-lisp:cons "OperationsConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-details))
      (common-lisp:list
       (common-lisp:cons "FailureDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-timestamp))
      (common-lisp:list
       (common-lisp:cons "CreationTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'completion-timestamp))
      (common-lisp:list
       (common-lisp:cons "CompletionTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input))
      (common-lisp:list
       (common-lisp:cons "Input"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-config))
      (common-lisp:list
       (common-lisp:cons "OutputConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "KmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'results))
      (common-lisp:list
       (common-lisp:cons "Results"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'manifest-summary))
      (common-lisp:list
       (common-lisp:cons "ManifestSummary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-media-analysis-job-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-person-tracking-request common-lisp:nil
                       ((job-id :initarg :job-id :initform
                         (common-lisp:error ":job-id is required") :type
                         (common-lisp:or job-id common-lisp:null) :accessor
                         struct-shape-get-person-tracking-request-job-id :shape
                         "JobId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-get-person-tracking-request-max-results
                         :shape "MaxResults" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-get-person-tracking-request-next-token
                         :shape "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (sort-by :initarg :sort-by :initform common-lisp:nil
                         :type
                         (common-lisp:or person-tracking-sort-by
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-person-tracking-request-sort-by
                         :shape "PersonTrackingSortBy" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-person-tracking-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-person-tracking-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-person-tracking-request
                    'make-get-person-tracking-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-person-tracking-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-person-tracking-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "JobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-by))
      (common-lisp:list
       (common-lisp:cons "SortBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-person-tracking-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-person-tracking-response common-lisp:nil
                       ((job-status :initarg :job-status :initform
                         common-lisp:nil :type
                         (common-lisp:or video-job-status common-lisp:null)
                         :accessor
                         struct-shape-get-person-tracking-response-job-status
                         :shape "VideoJobStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status-message :initarg :status-message :initform
                         common-lisp:nil :type
                         (common-lisp:or status-message common-lisp:null)
                         :accessor
                         struct-shape-get-person-tracking-response-status-message
                         :shape "StatusMessage" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (video-metadata :initarg :video-metadata :initform
                         common-lisp:nil :type
                         (common-lisp:or video-metadata common-lisp:null)
                         :accessor
                         struct-shape-get-person-tracking-response-video-metadata
                         :shape "VideoMetadata" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-get-person-tracking-response-next-token
                         :shape "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (persons :initarg :persons :initform common-lisp:nil
                         :type
                         (common-lisp:or person-detections common-lisp:null)
                         :accessor
                         struct-shape-get-person-tracking-response-persons
                         :shape "PersonDetections" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (job-id :initarg :job-id :initform common-lisp:nil
                         :type (common-lisp:or job-id common-lisp:null)
                         :accessor
                         struct-shape-get-person-tracking-response-job-id
                         :shape "JobId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (video :initarg :video :initform common-lisp:nil :type
                         (common-lisp:or video common-lisp:null) :accessor
                         struct-shape-get-person-tracking-response-video :shape
                         "Video" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (job-tag :initarg :job-tag :initform common-lisp:nil
                         :type (common-lisp:or job-tag common-lisp:null)
                         :accessor
                         struct-shape-get-person-tracking-response-job-tag
                         :shape "JobTag" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-person-tracking-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-person-tracking-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-person-tracking-response
                    'make-get-person-tracking-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-person-tracking-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-person-tracking-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-status))
      (common-lisp:list
       (common-lisp:cons "JobStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-message))
      (common-lisp:list
       (common-lisp:cons "StatusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'video-metadata))
      (common-lisp:list
       (common-lisp:cons "VideoMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'persons))
      (common-lisp:list
       (common-lisp:cons "Persons"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "JobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'video))
      (common-lisp:list
       (common-lisp:cons "Video"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-tag))
      (common-lisp:list
       (common-lisp:cons "JobTag"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-person-tracking-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-segment-detection-request common-lisp:nil
                       ((job-id :initarg :job-id :initform
                         (common-lisp:error ":job-id is required") :type
                         (common-lisp:or job-id common-lisp:null) :accessor
                         struct-shape-get-segment-detection-request-job-id
                         :shape "JobId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-get-segment-detection-request-max-results
                         :shape "MaxResults" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-get-segment-detection-request-next-token
                         :shape "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-segment-detection-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-segment-detection-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-segment-detection-request
                    'make-get-segment-detection-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-segment-detection-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-segment-detection-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "JobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-segment-detection-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-segment-detection-response common-lisp:nil
                       ((job-status :initarg :job-status :initform
                         common-lisp:nil :type
                         (common-lisp:or video-job-status common-lisp:null)
                         :accessor
                         struct-shape-get-segment-detection-response-job-status
                         :shape "VideoJobStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status-message :initarg :status-message :initform
                         common-lisp:nil :type
                         (common-lisp:or status-message common-lisp:null)
                         :accessor
                         struct-shape-get-segment-detection-response-status-message
                         :shape "StatusMessage" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (video-metadata :initarg :video-metadata :initform
                         common-lisp:nil :type
                         (common-lisp:or video-metadata-list common-lisp:null)
                         :accessor
                         struct-shape-get-segment-detection-response-video-metadata
                         :shape "VideoMetadataList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (audio-metadata :initarg :audio-metadata :initform
                         common-lisp:nil :type
                         (common-lisp:or audio-metadata-list common-lisp:null)
                         :accessor
                         struct-shape-get-segment-detection-response-audio-metadata
                         :shape "AudioMetadataList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-get-segment-detection-response-next-token
                         :shape "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (segments :initarg :segments :initform common-lisp:nil
                         :type
                         (common-lisp:or segment-detections common-lisp:null)
                         :accessor
                         struct-shape-get-segment-detection-response-segments
                         :shape "SegmentDetections" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (selected-segment-types :initarg
                         :selected-segment-types :initform common-lisp:nil
                         :type
                         (common-lisp:or segment-types-info common-lisp:null)
                         :accessor
                         struct-shape-get-segment-detection-response-selected-segment-types
                         :shape "SegmentTypesInfo" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (job-id :initarg :job-id :initform common-lisp:nil
                         :type (common-lisp:or job-id common-lisp:null)
                         :accessor
                         struct-shape-get-segment-detection-response-job-id
                         :shape "JobId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (video :initarg :video :initform common-lisp:nil :type
                         (common-lisp:or video common-lisp:null) :accessor
                         struct-shape-get-segment-detection-response-video
                         :shape "Video" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (job-tag :initarg :job-tag :initform common-lisp:nil
                         :type (common-lisp:or job-tag common-lisp:null)
                         :accessor
                         struct-shape-get-segment-detection-response-job-tag
                         :shape "JobTag" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-segment-detection-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-segment-detection-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-segment-detection-response
                    'make-get-segment-detection-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-segment-detection-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-segment-detection-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-status))
      (common-lisp:list
       (common-lisp:cons "JobStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-message))
      (common-lisp:list
       (common-lisp:cons "StatusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'video-metadata))
      (common-lisp:list
       (common-lisp:cons "VideoMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'audio-metadata))
      (common-lisp:list
       (common-lisp:cons "AudioMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'segments))
      (common-lisp:list
       (common-lisp:cons "Segments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'selected-segment-types))
      (common-lisp:list
       (common-lisp:cons "SelectedSegmentTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "JobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'video))
      (common-lisp:list
       (common-lisp:cons "Video"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-tag))
      (common-lisp:list
       (common-lisp:cons "JobTag"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-segment-detection-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-text-detection-request common-lisp:nil
                       ((job-id :initarg :job-id :initform
                         (common-lisp:error ":job-id is required") :type
                         (common-lisp:or job-id common-lisp:null) :accessor
                         struct-shape-get-text-detection-request-job-id :shape
                         "JobId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-get-text-detection-request-max-results
                         :shape "MaxResults" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-get-text-detection-request-next-token
                         :shape "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-text-detection-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-text-detection-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-text-detection-request
                    'make-get-text-detection-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-text-detection-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-text-detection-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "JobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-text-detection-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-text-detection-response common-lisp:nil
                       ((job-status :initarg :job-status :initform
                         common-lisp:nil :type
                         (common-lisp:or video-job-status common-lisp:null)
                         :accessor
                         struct-shape-get-text-detection-response-job-status
                         :shape "VideoJobStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status-message :initarg :status-message :initform
                         common-lisp:nil :type
                         (common-lisp:or status-message common-lisp:null)
                         :accessor
                         struct-shape-get-text-detection-response-status-message
                         :shape "StatusMessage" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (video-metadata :initarg :video-metadata :initform
                         common-lisp:nil :type
                         (common-lisp:or video-metadata common-lisp:null)
                         :accessor
                         struct-shape-get-text-detection-response-video-metadata
                         :shape "VideoMetadata" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (text-detections :initarg :text-detections :initform
                         common-lisp:nil :type
                         (common-lisp:or text-detection-results
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-text-detection-response-text-detections
                         :shape "TextDetectionResults" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-get-text-detection-response-next-token
                         :shape "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (text-model-version :initarg :text-model-version
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-get-text-detection-response-text-model-version
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (job-id :initarg :job-id :initform common-lisp:nil
                         :type (common-lisp:or job-id common-lisp:null)
                         :accessor
                         struct-shape-get-text-detection-response-job-id :shape
                         "JobId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (video :initarg :video :initform common-lisp:nil :type
                         (common-lisp:or video common-lisp:null) :accessor
                         struct-shape-get-text-detection-response-video :shape
                         "Video" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (job-tag :initarg :job-tag :initform common-lisp:nil
                         :type (common-lisp:or job-tag common-lisp:null)
                         :accessor
                         struct-shape-get-text-detection-response-job-tag
                         :shape "JobTag" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-text-detection-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-text-detection-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-text-detection-response
                    'make-get-text-detection-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-text-detection-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-text-detection-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-status))
      (common-lisp:list
       (common-lisp:cons "JobStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-message))
      (common-lisp:list
       (common-lisp:cons "StatusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'video-metadata))
      (common-lisp:list
       (common-lisp:cons "VideoMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'text-detections))
      (common-lisp:list
       (common-lisp:cons "TextDetections"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'text-model-version))
      (common-lisp:list
       (common-lisp:cons "TextModelVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "JobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'video))
      (common-lisp:list
       (common-lisp:cons "Video"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-tag))
      (common-lisp:list
       (common-lisp:cons "JobTag"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-text-detection-response))
   common-lisp:nil))
(common-lisp:deftype ground-truth-blob ()
  '(common-lisp:simple-array (common-lisp:unsigned-byte 8) (common-lisp:*)))
(common-lisp:progn
 (common-lisp:defclass ground-truth-manifest common-lisp:nil
                       ((s3object :initarg :s3object :initform common-lisp:nil
                         :type (common-lisp:or s3object common-lisp:null)
                         :accessor struct-shape-ground-truth-manifest-s3object
                         :shape "S3Object" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-ground-truth-manifest
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'ground-truth-manifest
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'ground-truth-manifest 'make-ground-truth-manifest))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          ground-truth-manifest))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          ground-truth-manifest))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3object))
      (common-lisp:list
       (common-lisp:cons "S3Object"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          ground-truth-manifest))
   common-lisp:nil))
(common-lisp:deftype has-errors () 'common-lisp:boolean)
(common-lisp:deftype human-loop-activation-conditions-evaluation-results ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass human-loop-activation-output common-lisp:nil
                       ((human-loop-arn :initarg :human-loop-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or human-loop-arn common-lisp:null)
                         :accessor
                         struct-shape-human-loop-activation-output-human-loop-arn
                         :shape "HumanLoopArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (human-loop-activation-reasons :initarg
                         :human-loop-activation-reasons :initform
                         common-lisp:nil :type
                         (common-lisp:or human-loop-activation-reasons
                                         common-lisp:null)
                         :accessor
                         struct-shape-human-loop-activation-output-human-loop-activation-reasons
                         :shape "HumanLoopActivationReasons" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (human-loop-activation-conditions-evaluation-results
                         :initarg
                         :human-loop-activation-conditions-evaluation-results
                         :initform common-lisp:nil :type
                         (common-lisp:or
                          human-loop-activation-conditions-evaluation-results
                          common-lisp:null)
                         :accessor
                         struct-shape-human-loop-activation-output-human-loop-activation-conditions-evaluation-results
                         :shape
                         "HumanLoopActivationConditionsEvaluationResults"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-human-loop-activation-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'human-loop-activation-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'human-loop-activation-output
                    'make-human-loop-activation-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          human-loop-activation-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          human-loop-activation-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'human-loop-arn))
      (common-lisp:list
       (common-lisp:cons "HumanLoopArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'human-loop-activation-reasons))
      (common-lisp:list
       (common-lisp:cons "HumanLoopActivationReasons"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'human-loop-activation-conditions-evaluation-results))
      (common-lisp:list
       (common-lisp:cons "HumanLoopActivationConditionsEvaluationResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          human-loop-activation-output))
   common-lisp:nil))
(common-lisp:deftype human-loop-activation-reason () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype human-loop-activation-reasons ()
   '(trivial-types:proper-list human-loop-activation-reason))
 (common-lisp:defun make-human-loop-activation-reasons
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            human-loop-activation-reason))
   aws-sdk/generator/shape::members))
(common-lisp:deftype human-loop-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass human-loop-config common-lisp:nil
                       ((human-loop-name :initarg :human-loop-name :initform
                         (common-lisp:error ":human-loop-name is required")
                         :type
                         (common-lisp:or human-loop-name common-lisp:null)
                         :accessor
                         struct-shape-human-loop-config-human-loop-name :shape
                         "HumanLoopName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (flow-definition-arn :initarg :flow-definition-arn
                         :initform
                         (common-lisp:error ":flow-definition-arn is required")
                         :type
                         (common-lisp:or flow-definition-arn common-lisp:null)
                         :accessor
                         struct-shape-human-loop-config-flow-definition-arn
                         :shape "FlowDefinitionArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (data-attributes :initarg :data-attributes :initform
                         common-lisp:nil :type
                         (common-lisp:or human-loop-data-attributes
                                         common-lisp:null)
                         :accessor
                         struct-shape-human-loop-config-data-attributes :shape
                         "HumanLoopDataAttributes" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-human-loop-config
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'human-loop-config
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'human-loop-config 'make-human-loop-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input human-loop-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input human-loop-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'human-loop-name))
      (common-lisp:list
       (common-lisp:cons "HumanLoopName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'flow-definition-arn))
      (common-lisp:list
       (common-lisp:cons "FlowDefinitionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-attributes))
      (common-lisp:list
       (common-lisp:cons "DataAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input human-loop-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass human-loop-data-attributes common-lisp:nil
                       ((content-classifiers :initarg :content-classifiers
                         :initform common-lisp:nil :type
                         (common-lisp:or content-classifiers common-lisp:null)
                         :accessor
                         struct-shape-human-loop-data-attributes-content-classifiers
                         :shape "ContentClassifiers" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-human-loop-data-attributes
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'human-loop-data-attributes
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'human-loop-data-attributes
                    'make-human-loop-data-attributes))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          human-loop-data-attributes))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          human-loop-data-attributes))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-classifiers))
      (common-lisp:list
       (common-lisp:cons "ContentClassifiers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          human-loop-data-attributes))
   common-lisp:nil))
(common-lisp:deftype human-loop-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition human-loop-quota-exceeded-exception
     (rekognition-error)
     ((resource-type :initarg :resource-type :initform common-lisp:nil :reader
       human-loop-quota-exceeded-exception-resource-type)
      (quota-code :initarg :quota-code :initform common-lisp:nil :reader
       human-loop-quota-exceeded-exception-quota-code)
      (service-code :initarg :service-code :initform common-lisp:nil :reader
       human-loop-quota-exceeded-exception-service-code)))
 (common-lisp:export
  (common-lisp:list 'human-loop-quota-exceeded-exception
                    'human-loop-quota-exceeded-exception-resource-type
                    'human-loop-quota-exceeded-exception-quota-code
                    'human-loop-quota-exceeded-exception-service-code)))
(common-lisp:progn
 (common-lisp:define-condition idempotent-parameter-mismatch-exception
     (rekognition-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'idempotent-parameter-mismatch-exception)))
(common-lisp:progn
 (common-lisp:defclass image common-lisp:nil
                       ((bytes :initarg :bytes :initform common-lisp:nil :type
                         (common-lisp:or image-blob common-lisp:null) :accessor
                         struct-shape-image-bytes :shape "ImageBlob" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (s3object :initarg :s3object :initform common-lisp:nil
                         :type (common-lisp:or s3object common-lisp:null)
                         :accessor struct-shape-image-s3object :shape
                         "S3Object" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-image
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'image
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'image 'make-image))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input image))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input image))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bytes))
      (common-lisp:list
       (common-lisp:cons "Bytes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3object))
      (common-lisp:list
       (common-lisp:cons "S3Object"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input image))
   common-lisp:nil))
(common-lisp:deftype image-blob ()
  '(common-lisp:simple-array (common-lisp:unsigned-byte 8) (common-lisp:*)))
(common-lisp:deftype image-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass image-quality common-lisp:nil
                       ((brightness :initarg :brightness :initform
                         common-lisp:nil :type
                         (common-lisp:or float common-lisp:null) :accessor
                         struct-shape-image-quality-brightness :shape "Float"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (sharpness :initarg :sharpness :initform
                         common-lisp:nil :type
                         (common-lisp:or float common-lisp:null) :accessor
                         struct-shape-image-quality-sharpness :shape "Float"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-image-quality
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'image-quality
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'image-quality 'make-image-quality))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input image-quality))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input image-quality))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'brightness))
      (common-lisp:list
       (common-lisp:cons "Brightness"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sharpness))
      (common-lisp:list
       (common-lisp:cons "Sharpness"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input image-quality))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition image-too-large-exception
     (rekognition-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'image-too-large-exception)))
(common-lisp:deftype index-faces-model-version () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass index-faces-request common-lisp:nil
                       ((collection-id :initarg :collection-id :initform
                         (common-lisp:error ":collection-id is required") :type
                         (common-lisp:or collection-id common-lisp:null)
                         :accessor
                         struct-shape-index-faces-request-collection-id :shape
                         "CollectionId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (image :initarg :image :initform
                         (common-lisp:error ":image is required") :type
                         (common-lisp:or image common-lisp:null) :accessor
                         struct-shape-index-faces-request-image :shape "Image"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (external-image-id :initarg :external-image-id
                         :initform common-lisp:nil :type
                         (common-lisp:or external-image-id common-lisp:null)
                         :accessor
                         struct-shape-index-faces-request-external-image-id
                         :shape "ExternalImageId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (detection-attributes :initarg :detection-attributes
                         :initform common-lisp:nil :type
                         (common-lisp:or attributes common-lisp:null) :accessor
                         struct-shape-index-faces-request-detection-attributes
                         :shape "Attributes" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-faces :initarg :max-faces :initform
                         common-lisp:nil :type
                         (common-lisp:or max-faces-to-index common-lisp:null)
                         :accessor struct-shape-index-faces-request-max-faces
                         :shape "MaxFacesToIndex" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (quality-filter :initarg :quality-filter :initform
                         common-lisp:nil :type
                         (common-lisp:or quality-filter common-lisp:null)
                         :accessor
                         struct-shape-index-faces-request-quality-filter :shape
                         "QualityFilter" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-index-faces-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'index-faces-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'index-faces-request 'make-index-faces-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input index-faces-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input index-faces-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'collection-id))
      (common-lisp:list
       (common-lisp:cons "CollectionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image))
      (common-lisp:list
       (common-lisp:cons "Image"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'external-image-id))
      (common-lisp:list
       (common-lisp:cons "ExternalImageId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'detection-attributes))
      (common-lisp:list
       (common-lisp:cons "DetectionAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-faces))
      (common-lisp:list
       (common-lisp:cons "MaxFaces"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'quality-filter))
      (common-lisp:list
       (common-lisp:cons "QualityFilter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input index-faces-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass index-faces-response common-lisp:nil
                       ((face-records :initarg :face-records :initform
                         common-lisp:nil :type
                         (common-lisp:or face-record-list common-lisp:null)
                         :accessor
                         struct-shape-index-faces-response-face-records :shape
                         "FaceRecordList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (orientation-correction :initarg
                         :orientation-correction :initform common-lisp:nil
                         :type
                         (common-lisp:or orientation-correction
                                         common-lisp:null)
                         :accessor
                         struct-shape-index-faces-response-orientation-correction
                         :shape "OrientationCorrection" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (face-model-version :initarg :face-model-version
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-index-faces-response-face-model-version
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (unindexed-faces :initarg :unindexed-faces :initform
                         common-lisp:nil :type
                         (common-lisp:or unindexed-faces common-lisp:null)
                         :accessor
                         struct-shape-index-faces-response-unindexed-faces
                         :shape "UnindexedFaces" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-index-faces-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'index-faces-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'index-faces-response 'make-index-faces-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input index-faces-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input index-faces-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'face-records))
      (common-lisp:list
       (common-lisp:cons "FaceRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'orientation-correction))
      (common-lisp:list
       (common-lisp:cons "OrientationCorrection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'face-model-version))
      (common-lisp:list
       (common-lisp:cons "FaceModelVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'unindexed-faces))
      (common-lisp:list
       (common-lisp:cons "UnindexedFaces"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input index-faces-response))
   common-lisp:nil))
(common-lisp:deftype inference-units () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass instance common-lisp:nil
                       ((bounding-box :initarg :bounding-box :initform
                         common-lisp:nil :type
                         (common-lisp:or bounding-box common-lisp:null)
                         :accessor struct-shape-instance-bounding-box :shape
                         "BoundingBox" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (confidence :initarg :confidence :initform
                         common-lisp:nil :type
                         (common-lisp:or percent common-lisp:null) :accessor
                         struct-shape-instance-confidence :shape "Percent"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (dominant-colors :initarg :dominant-colors :initform
                         common-lisp:nil :type
                         (common-lisp:or dominant-colors common-lisp:null)
                         :accessor struct-shape-instance-dominant-colors :shape
                         "DominantColors" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-instance
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'instance
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'instance 'make-instance))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input instance))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input instance))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bounding-box))
      (common-lisp:list
       (common-lisp:cons "BoundingBox"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'confidence))
      (common-lisp:list
       (common-lisp:cons "Confidence"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dominant-colors))
      (common-lisp:list
       (common-lisp:cons "DominantColors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input instance))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype instances () '(trivial-types:proper-list instance))
 (common-lisp:defun make-instances
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list instance))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition internal-server-error
     (rekognition-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'internal-server-error)))
(common-lisp:progn
 (common-lisp:define-condition invalid-image-format-exception
     (rekognition-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-image-format-exception)))
(common-lisp:progn
 (common-lisp:define-condition invalid-manifest-exception
     (rekognition-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-manifest-exception)))
(common-lisp:progn
 (common-lisp:define-condition invalid-pagination-token-exception
     (rekognition-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-pagination-token-exception)))
(common-lisp:progn
 (common-lisp:define-condition invalid-parameter-exception
     (rekognition-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-parameter-exception)))
(common-lisp:progn
 (common-lisp:define-condition invalid-policy-revision-id-exception
     (rekognition-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-policy-revision-id-exception)))
(common-lisp:progn
 (common-lisp:define-condition invalid-s3object-exception
     (rekognition-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-s3object-exception)))
(common-lisp:deftype is-labeled () 'common-lisp:boolean)
(common-lisp:deftype job-id () 'common-lisp:string)
(common-lisp:deftype job-tag () 'common-lisp:string)
(common-lisp:deftype kinesis-data-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass kinesis-data-stream common-lisp:nil
                       ((arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or kinesis-data-arn common-lisp:null)
                         :accessor struct-shape-kinesis-data-stream-arn :shape
                         "KinesisDataArn" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-kinesis-data-stream
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'kinesis-data-stream
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'kinesis-data-stream 'make-kinesis-data-stream))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input kinesis-data-stream))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input kinesis-data-stream))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input kinesis-data-stream))
   common-lisp:nil))
(common-lisp:deftype kinesis-video-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass kinesis-video-stream common-lisp:nil
                       ((arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or kinesis-video-arn common-lisp:null)
                         :accessor struct-shape-kinesis-video-stream-arn :shape
                         "KinesisVideoArn" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-kinesis-video-stream
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'kinesis-video-stream
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'kinesis-video-stream 'make-kinesis-video-stream))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input kinesis-video-stream))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input kinesis-video-stream))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input kinesis-video-stream))
   common-lisp:nil))
(common-lisp:deftype kinesis-video-stream-fragment-number ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass kinesis-video-stream-start-selector common-lisp:nil
                       ((producer-timestamp :initarg :producer-timestamp
                         :initform common-lisp:nil :type
                         (common-lisp:or ulong common-lisp:null) :accessor
                         struct-shape-kinesis-video-stream-start-selector-producer-timestamp
                         :shape "ULong" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (fragment-number :initarg :fragment-number :initform
                         common-lisp:nil :type
                         (common-lisp:or kinesis-video-stream-fragment-number
                                         common-lisp:null)
                         :accessor
                         struct-shape-kinesis-video-stream-start-selector-fragment-number
                         :shape "KinesisVideoStreamFragmentNumber" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-kinesis-video-stream-start-selector
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'kinesis-video-stream-start-selector
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'kinesis-video-stream-start-selector
                    'make-kinesis-video-stream-start-selector))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          kinesis-video-stream-start-selector))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          kinesis-video-stream-start-selector))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'producer-timestamp))
      (common-lisp:list
       (common-lisp:cons "ProducerTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fragment-number))
      (common-lisp:list
       (common-lisp:cons "FragmentNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          kinesis-video-stream-start-selector))
   common-lisp:nil))
(common-lisp:deftype kms-key-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass known-gender common-lisp:nil
                       ((type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or known-gender-type common-lisp:null)
                         :accessor struct-shape-known-gender-type :shape
                         "KnownGenderType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-known-gender
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'known-gender
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'known-gender 'make-known-gender))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input known-gender))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input known-gender))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input known-gender))
   common-lisp:nil))
(common-lisp:deftype known-gender-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass label common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-label-name :shape "String" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (confidence :initarg :confidence :initform
                         common-lisp:nil :type
                         (common-lisp:or percent common-lisp:null) :accessor
                         struct-shape-label-confidence :shape "Percent"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (instances :initarg :instances :initform
                         common-lisp:nil :type
                         (common-lisp:or instances common-lisp:null) :accessor
                         struct-shape-label-instances :shape "Instances"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (parents :initarg :parents :initform common-lisp:nil
                         :type (common-lisp:or parents common-lisp:null)
                         :accessor struct-shape-label-parents :shape "Parents"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (aliases :initarg :aliases :initform common-lisp:nil
                         :type (common-lisp:or label-aliases common-lisp:null)
                         :accessor struct-shape-label-aliases :shape
                         "LabelAliases" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (categories :initarg :categories :initform
                         common-lisp:nil :type
                         (common-lisp:or label-categories common-lisp:null)
                         :accessor struct-shape-label-categories :shape
                         "LabelCategories" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-label
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'label
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'label 'make-label))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input label))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input label))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'confidence))
      (common-lisp:list
       (common-lisp:cons "Confidence"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instances))
      (common-lisp:list
       (common-lisp:cons "Instances"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parents))
      (common-lisp:list
       (common-lisp:cons "Parents"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aliases))
      (common-lisp:list
       (common-lisp:cons "Aliases"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'categories))
      (common-lisp:list
       (common-lisp:cons "Categories"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input label))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass label-alias common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-label-alias-name :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-label-alias
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'label-alias
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'label-alias 'make-label-alias))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input label-alias))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input label-alias))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input label-alias))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype label-aliases ()
   '(trivial-types:proper-list label-alias))
 (common-lisp:defun make-label-aliases
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list label-alias))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype label-categories ()
   '(trivial-types:proper-list label-category))
 (common-lisp:defun make-label-categories
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list label-category))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass label-category common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-label-category-name :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-label-category
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'label-category
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'label-category 'make-label-category))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input label-category))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input label-category))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input label-category))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass label-detection common-lisp:nil
                       ((timestamp :initarg :timestamp :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-label-detection-timestamp :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (label :initarg :label :initform common-lisp:nil :type
                         (common-lisp:or label common-lisp:null) :accessor
                         struct-shape-label-detection-label :shape "Label"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (start-timestamp-millis :initarg
                         :start-timestamp-millis :initform common-lisp:nil
                         :type (common-lisp:or ulong common-lisp:null)
                         :accessor
                         struct-shape-label-detection-start-timestamp-millis
                         :shape "ULong" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (end-timestamp-millis :initarg :end-timestamp-millis
                         :initform common-lisp:nil :type
                         (common-lisp:or ulong common-lisp:null) :accessor
                         struct-shape-label-detection-end-timestamp-millis
                         :shape "ULong" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (duration-millis :initarg :duration-millis :initform
                         common-lisp:nil :type
                         (common-lisp:or ulong common-lisp:null) :accessor
                         struct-shape-label-detection-duration-millis :shape
                         "ULong" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-label-detection
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'label-detection
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'label-detection 'make-label-detection))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input label-detection))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input label-detection))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timestamp))
      (common-lisp:list
       (common-lisp:cons "Timestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'label))
      (common-lisp:list
       (common-lisp:cons "Label"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'start-timestamp-millis))
      (common-lisp:list
       (common-lisp:cons "StartTimestampMillis"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'end-timestamp-millis))
      (common-lisp:list
       (common-lisp:cons "EndTimestampMillis"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'duration-millis))
      (common-lisp:list
       (common-lisp:cons "DurationMillis"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input label-detection))
   common-lisp:nil))
(common-lisp:deftype label-detection-aggregate-by () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype label-detection-feature-list ()
   '(trivial-types:proper-list label-detection-feature-name))
 (common-lisp:defun make-label-detection-feature-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            label-detection-feature-name))
   aws-sdk/generator/shape::members))
(common-lisp:deftype label-detection-feature-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass label-detection-settings common-lisp:nil
                       ((general-labels :initarg :general-labels :initform
                         common-lisp:nil :type
                         (common-lisp:or general-labels-settings
                                         common-lisp:null)
                         :accessor
                         struct-shape-label-detection-settings-general-labels
                         :shape "GeneralLabelsSettings" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-label-detection-settings
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'label-detection-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'label-detection-settings 'make-label-detection-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          label-detection-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          label-detection-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'general-labels))
      (common-lisp:list
       (common-lisp:cons "GeneralLabels"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          label-detection-settings))
   common-lisp:nil))
(common-lisp:deftype label-detection-sort-by () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype label-detections ()
   '(trivial-types:proper-list label-detection))
 (common-lisp:defun make-label-detections
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list label-detection))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype labels () '(trivial-types:proper-list label))
 (common-lisp:defun make-labels
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list label))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass landmark common-lisp:nil
                       ((type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or landmark-type common-lisp:null)
                         :accessor struct-shape-landmark-type :shape
                         "LandmarkType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (x :initarg :x :initform common-lisp:nil :type
                         (common-lisp:or float common-lisp:null) :accessor
                         struct-shape-landmark-x :shape "Float" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (y :initarg :y :initform common-lisp:nil :type
                         (common-lisp:or float common-lisp:null) :accessor
                         struct-shape-landmark-y :shape "Float" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-landmark
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'landmark
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'landmark 'make-landmark))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input landmark))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input landmark))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'x))
      (common-lisp:list
       (common-lisp:cons "X"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'y))
      (common-lisp:list
       (common-lisp:cons "Y"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input landmark))
   common-lisp:nil))
(common-lisp:deftype landmark-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype landmarks () '(trivial-types:proper-list landmark))
 (common-lisp:defun make-landmarks
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list landmark))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition limit-exceeded-exception
     (rekognition-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'limit-exceeded-exception)))
(common-lisp:progn
 (common-lisp:defclass list-collections-request common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-collections-request-next-token
                         :shape "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or page-size common-lisp:null) :accessor
                         struct-shape-list-collections-request-max-results
                         :shape "PageSize" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-collections-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-collections-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-collections-request 'make-list-collections-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-collections-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-collections-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-collections-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-collections-response common-lisp:nil
                       ((collection-ids :initarg :collection-ids :initform
                         common-lisp:nil :type
                         (common-lisp:or collection-id-list common-lisp:null)
                         :accessor
                         struct-shape-list-collections-response-collection-ids
                         :shape "CollectionIdList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-collections-response-next-token
                         :shape "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (face-model-versions :initarg :face-model-versions
                         :initform common-lisp:nil :type
                         (common-lisp:or face-model-version-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-collections-response-face-model-versions
                         :shape "FaceModelVersionList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-collections-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-collections-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-collections-response
                    'make-list-collections-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-collections-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-collections-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'collection-ids))
      (common-lisp:list
       (common-lisp:cons "CollectionIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'face-model-versions))
      (common-lisp:list
       (common-lisp:cons "FaceModelVersions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-collections-response))
   common-lisp:nil))
(common-lisp:deftype list-dataset-entries-page-size () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass list-dataset-entries-request common-lisp:nil
                       ((dataset-arn :initarg :dataset-arn :initform
                         (common-lisp:error ":dataset-arn is required") :type
                         (common-lisp:or dataset-arn common-lisp:null)
                         :accessor
                         struct-shape-list-dataset-entries-request-dataset-arn
                         :shape "DatasetArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (contains-labels :initarg :contains-labels :initform
                         common-lisp:nil :type
                         (common-lisp:or dataset-labels common-lisp:null)
                         :accessor
                         struct-shape-list-dataset-entries-request-contains-labels
                         :shape "DatasetLabels" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (labeled :initarg :labeled :initform common-lisp:nil
                         :type (common-lisp:or is-labeled common-lisp:null)
                         :accessor
                         struct-shape-list-dataset-entries-request-labeled
                         :shape "IsLabeled" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (source-ref-contains :initarg :source-ref-contains
                         :initform common-lisp:nil :type
                         (common-lisp:or query-string common-lisp:null)
                         :accessor
                         struct-shape-list-dataset-entries-request-source-ref-contains
                         :shape "QueryString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (has-errors :initarg :has-errors :initform
                         common-lisp:nil :type
                         (common-lisp:or has-errors common-lisp:null) :accessor
                         struct-shape-list-dataset-entries-request-has-errors
                         :shape "HasErrors" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or extended-pagination-token
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-dataset-entries-request-next-token
                         :shape "ExtendedPaginationToken" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or list-dataset-entries-page-size
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-dataset-entries-request-max-results
                         :shape "ListDatasetEntriesPageSize" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-dataset-entries-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-dataset-entries-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-dataset-entries-request
                    'make-list-dataset-entries-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-dataset-entries-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-dataset-entries-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dataset-arn))
      (common-lisp:list
       (common-lisp:cons "DatasetArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'contains-labels))
      (common-lisp:list
       (common-lisp:cons "ContainsLabels"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'labeled))
      (common-lisp:list
       (common-lisp:cons "Labeled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-ref-contains))
      (common-lisp:list
       (common-lisp:cons "SourceRefContains"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'has-errors))
      (common-lisp:list
       (common-lisp:cons "HasErrors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-dataset-entries-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-dataset-entries-response common-lisp:nil
                       ((dataset-entries :initarg :dataset-entries :initform
                         common-lisp:nil :type
                         (common-lisp:or dataset-entries common-lisp:null)
                         :accessor
                         struct-shape-list-dataset-entries-response-dataset-entries
                         :shape "DatasetEntries" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or extended-pagination-token
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-dataset-entries-response-next-token
                         :shape "ExtendedPaginationToken" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-dataset-entries-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-dataset-entries-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-dataset-entries-response
                    'make-list-dataset-entries-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-dataset-entries-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-dataset-entries-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dataset-entries))
      (common-lisp:list
       (common-lisp:cons "DatasetEntries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-dataset-entries-response))
   common-lisp:nil))
(common-lisp:deftype list-dataset-labels-page-size () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass list-dataset-labels-request common-lisp:nil
                       ((dataset-arn :initarg :dataset-arn :initform
                         (common-lisp:error ":dataset-arn is required") :type
                         (common-lisp:or dataset-arn common-lisp:null)
                         :accessor
                         struct-shape-list-dataset-labels-request-dataset-arn
                         :shape "DatasetArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or extended-pagination-token
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-dataset-labels-request-next-token
                         :shape "ExtendedPaginationToken" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or list-dataset-labels-page-size
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-dataset-labels-request-max-results
                         :shape "ListDatasetLabelsPageSize" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-dataset-labels-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-dataset-labels-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-dataset-labels-request
                    'make-list-dataset-labels-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-dataset-labels-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-dataset-labels-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dataset-arn))
      (common-lisp:list
       (common-lisp:cons "DatasetArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-dataset-labels-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-dataset-labels-response common-lisp:nil
                       ((dataset-label-descriptions :initarg
                         :dataset-label-descriptions :initform common-lisp:nil
                         :type
                         (common-lisp:or dataset-label-descriptions
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-dataset-labels-response-dataset-label-descriptions
                         :shape "DatasetLabelDescriptions" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or extended-pagination-token
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-dataset-labels-response-next-token
                         :shape "ExtendedPaginationToken" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-dataset-labels-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-dataset-labels-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-dataset-labels-response
                    'make-list-dataset-labels-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-dataset-labels-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-dataset-labels-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dataset-label-descriptions))
      (common-lisp:list
       (common-lisp:cons "DatasetLabelDescriptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-dataset-labels-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-faces-request common-lisp:nil
                       ((collection-id :initarg :collection-id :initform
                         (common-lisp:error ":collection-id is required") :type
                         (common-lisp:or collection-id common-lisp:null)
                         :accessor
                         struct-shape-list-faces-request-collection-id :shape
                         "CollectionId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor struct-shape-list-faces-request-next-token
                         :shape "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or page-size common-lisp:null) :accessor
                         struct-shape-list-faces-request-max-results :shape
                         "PageSize" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (user-id :initarg :user-id :initform common-lisp:nil
                         :type (common-lisp:or user-id common-lisp:null)
                         :accessor struct-shape-list-faces-request-user-id
                         :shape "UserId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (face-ids :initarg :face-ids :initform common-lisp:nil
                         :type (common-lisp:or face-id-list common-lisp:null)
                         :accessor struct-shape-list-faces-request-face-ids
                         :shape "FaceIdList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-faces-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-faces-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-faces-request 'make-list-faces-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-faces-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-faces-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'collection-id))
      (common-lisp:list
       (common-lisp:cons "CollectionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-id))
      (common-lisp:list
       (common-lisp:cons "UserId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'face-ids))
      (common-lisp:list
       (common-lisp:cons "FaceIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-faces-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-faces-response common-lisp:nil
                       ((faces :initarg :faces :initform common-lisp:nil :type
                         (common-lisp:or face-list common-lisp:null) :accessor
                         struct-shape-list-faces-response-faces :shape
                         "FaceList" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-faces-response-next-token :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (face-model-version :initarg :face-model-version
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-faces-response-face-model-version
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-faces-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-faces-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-faces-response 'make-list-faces-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-faces-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-faces-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'faces))
      (common-lisp:list
       (common-lisp:cons "Faces"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'face-model-version))
      (common-lisp:list
       (common-lisp:cons "FaceModelVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-faces-response))
   common-lisp:nil))
(common-lisp:deftype list-media-analysis-jobs-page-size () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass list-media-analysis-jobs-request common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or extended-pagination-token
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-media-analysis-jobs-request-next-token
                         :shape "ExtendedPaginationToken" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or list-media-analysis-jobs-page-size
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-media-analysis-jobs-request-max-results
                         :shape "ListMediaAnalysisJobsPageSize" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-media-analysis-jobs-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-media-analysis-jobs-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-media-analysis-jobs-request
                    'make-list-media-analysis-jobs-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-media-analysis-jobs-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-media-analysis-jobs-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-media-analysis-jobs-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-media-analysis-jobs-response common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or extended-pagination-token
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-media-analysis-jobs-response-next-token
                         :shape "ExtendedPaginationToken" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (media-analysis-jobs :initarg :media-analysis-jobs
                         :initform
                         (common-lisp:error ":media-analysis-jobs is required")
                         :type
                         (common-lisp:or media-analysis-job-descriptions
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-media-analysis-jobs-response-media-analysis-jobs
                         :shape "MediaAnalysisJobDescriptions" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-media-analysis-jobs-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-media-analysis-jobs-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-media-analysis-jobs-response
                    'make-list-media-analysis-jobs-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-media-analysis-jobs-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-media-analysis-jobs-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'media-analysis-jobs))
      (common-lisp:list
       (common-lisp:cons "MediaAnalysisJobs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-media-analysis-jobs-response))
   common-lisp:nil))
(common-lisp:deftype list-project-policies-page-size () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass list-project-policies-request common-lisp:nil
                       ((project-arn :initarg :project-arn :initform
                         (common-lisp:error ":project-arn is required") :type
                         (common-lisp:or project-arn common-lisp:null)
                         :accessor
                         struct-shape-list-project-policies-request-project-arn
                         :shape "ProjectArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or extended-pagination-token
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-project-policies-request-next-token
                         :shape "ExtendedPaginationToken" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or list-project-policies-page-size
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-project-policies-request-max-results
                         :shape "ListProjectPoliciesPageSize" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-project-policies-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-project-policies-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-project-policies-request
                    'make-list-project-policies-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-project-policies-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-project-policies-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'project-arn))
      (common-lisp:list
       (common-lisp:cons "ProjectArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-project-policies-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-project-policies-response common-lisp:nil
                       ((project-policies :initarg :project-policies :initform
                         common-lisp:nil :type
                         (common-lisp:or project-policies common-lisp:null)
                         :accessor
                         struct-shape-list-project-policies-response-project-policies
                         :shape "ProjectPolicies" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or extended-pagination-token
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-project-policies-response-next-token
                         :shape "ExtendedPaginationToken" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-project-policies-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-project-policies-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-project-policies-response
                    'make-list-project-policies-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-project-policies-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-project-policies-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'project-policies))
      (common-lisp:list
       (common-lisp:cons "ProjectPolicies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-project-policies-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-stream-processors-request common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-stream-processors-request-next-token
                         :shape "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-stream-processors-request-max-results
                         :shape "MaxResults" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-stream-processors-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-stream-processors-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-stream-processors-request
                    'make-list-stream-processors-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-stream-processors-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-stream-processors-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-stream-processors-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-stream-processors-response common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-stream-processors-response-next-token
                         :shape "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (stream-processors :initarg :stream-processors
                         :initform common-lisp:nil :type
                         (common-lisp:or stream-processor-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-stream-processors-response-stream-processors
                         :shape "StreamProcessorList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-stream-processors-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-stream-processors-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-stream-processors-response
                    'make-list-stream-processors-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-stream-processors-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-stream-processors-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stream-processors))
      (common-lisp:list
       (common-lisp:cons "StreamProcessors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-stream-processors-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-request common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resource-arn is required") :type
                         (common-lisp:or resource-arn common-lisp:null)
                         :accessor
                         struct-shape-list-tags-for-resource-request-resource-arn
                         :shape "ResourceArn" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-tags-for-resource-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-request
                    'make-list-tags-for-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-response common-lisp:nil
                       ((tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         struct-shape-list-tags-for-resource-response-tags
                         :shape "TagMap" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-tags-for-resource-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-response
                    'make-list-tags-for-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-users-request common-lisp:nil
                       ((collection-id :initarg :collection-id :initform
                         (common-lisp:error ":collection-id is required") :type
                         (common-lisp:or collection-id common-lisp:null)
                         :accessor
                         struct-shape-list-users-request-collection-id :shape
                         "CollectionId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-user-results common-lisp:null)
                         :accessor struct-shape-list-users-request-max-results
                         :shape "MaxUserResults" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor struct-shape-list-users-request-next-token
                         :shape "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-users-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-users-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-users-request 'make-list-users-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-users-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-users-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'collection-id))
      (common-lisp:list
       (common-lisp:cons "CollectionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-users-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-users-response common-lisp:nil
                       ((users :initarg :users :initform common-lisp:nil :type
                         (common-lisp:or user-list common-lisp:null) :accessor
                         struct-shape-list-users-response-users :shape
                         "UserList" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor struct-shape-list-users-response-next-token
                         :shape "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-users-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-users-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-users-response 'make-list-users-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-users-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-users-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'users))
      (common-lisp:list
       (common-lisp:cons "Users"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-users-response))
   common-lisp:nil))
(common-lisp:deftype liveness-image-blob ()
  '(common-lisp:simple-array (common-lisp:unsigned-byte 8) (common-lisp:*)))
(common-lisp:progn
 (common-lisp:defclass liveness-output-config common-lisp:nil
                       ((s3bucket :initarg :s3bucket :initform
                         (common-lisp:error ":s3bucket is required") :type
                         (common-lisp:or s3bucket common-lisp:null) :accessor
                         struct-shape-liveness-output-config-s3bucket :shape
                         "S3Bucket" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (s3key-prefix :initarg :s3key-prefix :initform
                         common-lisp:nil :type
                         (common-lisp:or liveness-s3key-prefix
                                         common-lisp:null)
                         :accessor
                         struct-shape-liveness-output-config-s3key-prefix
                         :shape "LivenessS3KeyPrefix" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-liveness-output-config
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'liveness-output-config
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'liveness-output-config 'make-liveness-output-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          liveness-output-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          liveness-output-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3bucket))
      (common-lisp:list
       (common-lisp:cons "S3Bucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3key-prefix))
      (common-lisp:list
       (common-lisp:cons "S3KeyPrefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          liveness-output-config))
   common-lisp:nil))
(common-lisp:deftype liveness-s3key-prefix () 'common-lisp:string)
(common-lisp:deftype liveness-session-id () 'common-lisp:string)
(common-lisp:deftype liveness-session-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition malformed-policy-document-exception
     (rekognition-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'malformed-policy-document-exception)))
(common-lisp:progn
 (common-lisp:defclass matched-user common-lisp:nil
                       ((user-id :initarg :user-id :initform common-lisp:nil
                         :type (common-lisp:or user-id common-lisp:null)
                         :accessor struct-shape-matched-user-user-id :shape
                         "UserId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (user-status :initarg :user-status :initform
                         common-lisp:nil :type
                         (common-lisp:or user-status common-lisp:null)
                         :accessor struct-shape-matched-user-user-status :shape
                         "UserStatus" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-matched-user
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'matched-user
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'matched-user 'make-matched-user))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input matched-user))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input matched-user))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-id))
      (common-lisp:list
       (common-lisp:cons "UserId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-status))
      (common-lisp:list
       (common-lisp:cons "UserStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input matched-user))
   common-lisp:nil))
(common-lisp:deftype max-duration-in-seconds-ulong () 'common-lisp:integer)
(common-lisp:deftype max-faces () 'common-lisp:integer)
(common-lisp:deftype max-faces-to-index () 'common-lisp:integer)
(common-lisp:deftype max-pixel-threshold () 'common-lisp:single-float)
(common-lisp:deftype max-results () 'common-lisp:integer)
(common-lisp:deftype max-user-results () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass media-analysis-detect-moderation-labels-config
                       common-lisp:nil
                       ((min-confidence :initarg :min-confidence :initform
                         common-lisp:nil :type
                         (common-lisp:or percent common-lisp:null) :accessor
                         struct-shape-media-analysis-detect-moderation-labels-config-min-confidence
                         :shape "Percent" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (project-version :initarg :project-version :initform
                         common-lisp:nil :type
                         (common-lisp:or project-version-id common-lisp:null)
                         :accessor
                         struct-shape-media-analysis-detect-moderation-labels-config-project-version
                         :shape "ProjectVersionId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-media-analysis-detect-moderation-labels-config
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'media-analysis-detect-moderation-labels-config
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'media-analysis-detect-moderation-labels-config
                    'make-media-analysis-detect-moderation-labels-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          media-analysis-detect-moderation-labels-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          media-analysis-detect-moderation-labels-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'min-confidence))
      (common-lisp:list
       (common-lisp:cons "MinConfidence"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'project-version))
      (common-lisp:list
       (common-lisp:cons "ProjectVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          media-analysis-detect-moderation-labels-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass media-analysis-input common-lisp:nil
                       ((s3object :initarg :s3object :initform
                         (common-lisp:error ":s3object is required") :type
                         (common-lisp:or s3object common-lisp:null) :accessor
                         struct-shape-media-analysis-input-s3object :shape
                         "S3Object" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-media-analysis-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'media-analysis-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'media-analysis-input 'make-media-analysis-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input media-analysis-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input media-analysis-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3object))
      (common-lisp:list
       (common-lisp:cons "S3Object"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input media-analysis-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass media-analysis-job-description common-lisp:nil
                       ((job-id :initarg :job-id :initform
                         (common-lisp:error ":job-id is required") :type
                         (common-lisp:or media-analysis-job-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-media-analysis-job-description-job-id
                         :shape "MediaAnalysisJobId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (job-name :initarg :job-name :initform common-lisp:nil
                         :type
                         (common-lisp:or media-analysis-job-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-media-analysis-job-description-job-name
                         :shape "MediaAnalysisJobName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (operations-config :initarg :operations-config
                         :initform
                         (common-lisp:error ":operations-config is required")
                         :type
                         (common-lisp:or media-analysis-operations-config
                                         common-lisp:null)
                         :accessor
                         struct-shape-media-analysis-job-description-operations-config
                         :shape "MediaAnalysisOperationsConfig" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (status :initarg :status :initform
                         (common-lisp:error ":status is required") :type
                         (common-lisp:or media-analysis-job-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-media-analysis-job-description-status
                         :shape "MediaAnalysisJobStatus" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (failure-details :initarg :failure-details :initform
                         common-lisp:nil :type
                         (common-lisp:or media-analysis-job-failure-details
                                         common-lisp:null)
                         :accessor
                         struct-shape-media-analysis-job-description-failure-details
                         :shape "MediaAnalysisJobFailureDetails" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (creation-timestamp :initarg :creation-timestamp
                         :initform
                         (common-lisp:error ":creation-timestamp is required")
                         :type (common-lisp:or date-time common-lisp:null)
                         :accessor
                         struct-shape-media-analysis-job-description-creation-timestamp
                         :shape "DateTime" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (completion-timestamp :initarg :completion-timestamp
                         :initform common-lisp:nil :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         struct-shape-media-analysis-job-description-completion-timestamp
                         :shape "DateTime" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (input :initarg :input :initform
                         (common-lisp:error ":input is required") :type
                         (common-lisp:or media-analysis-input common-lisp:null)
                         :accessor
                         struct-shape-media-analysis-job-description-input
                         :shape "MediaAnalysisInput" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (output-config :initarg :output-config :initform
                         (common-lisp:error ":output-config is required") :type
                         (common-lisp:or media-analysis-output-config
                                         common-lisp:null)
                         :accessor
                         struct-shape-media-analysis-job-description-output-config
                         :shape "MediaAnalysisOutputConfig" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (kms-key-id :initarg :kms-key-id :initform
                         common-lisp:nil :type
                         (common-lisp:or kms-key-id common-lisp:null) :accessor
                         struct-shape-media-analysis-job-description-kms-key-id
                         :shape "KmsKeyId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (results :initarg :results :initform common-lisp:nil
                         :type
                         (common-lisp:or media-analysis-results
                                         common-lisp:null)
                         :accessor
                         struct-shape-media-analysis-job-description-results
                         :shape "MediaAnalysisResults" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (manifest-summary :initarg :manifest-summary :initform
                         common-lisp:nil :type
                         (common-lisp:or media-analysis-manifest-summary
                                         common-lisp:null)
                         :accessor
                         struct-shape-media-analysis-job-description-manifest-summary
                         :shape "MediaAnalysisManifestSummary" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-media-analysis-job-description
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'media-analysis-job-description
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'media-analysis-job-description
                    'make-media-analysis-job-description))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          media-analysis-job-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          media-analysis-job-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "JobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-name))
      (common-lisp:list
       (common-lisp:cons "JobName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operations-config))
      (common-lisp:list
       (common-lisp:cons "OperationsConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-details))
      (common-lisp:list
       (common-lisp:cons "FailureDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-timestamp))
      (common-lisp:list
       (common-lisp:cons "CreationTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'completion-timestamp))
      (common-lisp:list
       (common-lisp:cons "CompletionTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input))
      (common-lisp:list
       (common-lisp:cons "Input"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-config))
      (common-lisp:list
       (common-lisp:cons "OutputConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "KmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'results))
      (common-lisp:list
       (common-lisp:cons "Results"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'manifest-summary))
      (common-lisp:list
       (common-lisp:cons "ManifestSummary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          media-analysis-job-description))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype media-analysis-job-descriptions ()
   '(trivial-types:proper-list media-analysis-job-description))
 (common-lisp:defun make-media-analysis-job-descriptions
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            media-analysis-job-description))
   aws-sdk/generator/shape::members))
(common-lisp:deftype media-analysis-job-failure-code () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass media-analysis-job-failure-details common-lisp:nil
                       ((code :initarg :code :initform common-lisp:nil :type
                         (common-lisp:or media-analysis-job-failure-code
                                         common-lisp:null)
                         :accessor
                         struct-shape-media-analysis-job-failure-details-code
                         :shape "MediaAnalysisJobFailureCode" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (message :initarg :message :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-media-analysis-job-failure-details-message
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-media-analysis-job-failure-details
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'media-analysis-job-failure-details
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'media-analysis-job-failure-details
                    'make-media-analysis-job-failure-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          media-analysis-job-failure-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          media-analysis-job-failure-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code))
      (common-lisp:list
       (common-lisp:cons "Code"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          media-analysis-job-failure-details))
   common-lisp:nil))
(common-lisp:deftype media-analysis-job-id () 'common-lisp:string)
(common-lisp:deftype media-analysis-job-name () 'common-lisp:string)
(common-lisp:deftype media-analysis-job-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass media-analysis-manifest-summary common-lisp:nil
                       ((s3object :initarg :s3object :initform common-lisp:nil
                         :type (common-lisp:or s3object common-lisp:null)
                         :accessor
                         struct-shape-media-analysis-manifest-summary-s3object
                         :shape "S3Object" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-media-analysis-manifest-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'media-analysis-manifest-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'media-analysis-manifest-summary
                    'make-media-analysis-manifest-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          media-analysis-manifest-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          media-analysis-manifest-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3object))
      (common-lisp:list
       (common-lisp:cons "S3Object"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          media-analysis-manifest-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass media-analysis-model-versions common-lisp:nil
                       ((moderation :initarg :moderation :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-media-analysis-model-versions-moderation
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-media-analysis-model-versions
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'media-analysis-model-versions
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'media-analysis-model-versions
                    'make-media-analysis-model-versions))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          media-analysis-model-versions))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          media-analysis-model-versions))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'moderation))
      (common-lisp:list
       (common-lisp:cons "Moderation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          media-analysis-model-versions))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass media-analysis-operations-config common-lisp:nil
                       ((detect-moderation-labels :initarg
                         :detect-moderation-labels :initform common-lisp:nil
                         :type
                         (common-lisp:or
                          media-analysis-detect-moderation-labels-config
                          common-lisp:null)
                         :accessor
                         struct-shape-media-analysis-operations-config-detect-moderation-labels
                         :shape "MediaAnalysisDetectModerationLabelsConfig"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-media-analysis-operations-config
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'media-analysis-operations-config
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'media-analysis-operations-config
                    'make-media-analysis-operations-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          media-analysis-operations-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          media-analysis-operations-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'detect-moderation-labels))
      (common-lisp:list
       (common-lisp:cons "DetectModerationLabels"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          media-analysis-operations-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass media-analysis-output-config common-lisp:nil
                       ((s3bucket :initarg :s3bucket :initform
                         (common-lisp:error ":s3bucket is required") :type
                         (common-lisp:or s3bucket common-lisp:null) :accessor
                         struct-shape-media-analysis-output-config-s3bucket
                         :shape "S3Bucket" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (s3key-prefix :initarg :s3key-prefix :initform
                         common-lisp:nil :type
                         (common-lisp:or media-analysis-s3key-prefix
                                         common-lisp:null)
                         :accessor
                         struct-shape-media-analysis-output-config-s3key-prefix
                         :shape "MediaAnalysisS3KeyPrefix" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-media-analysis-output-config
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'media-analysis-output-config
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'media-analysis-output-config
                    'make-media-analysis-output-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          media-analysis-output-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          media-analysis-output-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3bucket))
      (common-lisp:list
       (common-lisp:cons "S3Bucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3key-prefix))
      (common-lisp:list
       (common-lisp:cons "S3KeyPrefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          media-analysis-output-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass media-analysis-results common-lisp:nil
                       ((s3object :initarg :s3object :initform common-lisp:nil
                         :type (common-lisp:or s3object common-lisp:null)
                         :accessor struct-shape-media-analysis-results-s3object
                         :shape "S3Object" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (model-versions :initarg :model-versions :initform
                         common-lisp:nil :type
                         (common-lisp:or media-analysis-model-versions
                                         common-lisp:null)
                         :accessor
                         struct-shape-media-analysis-results-model-versions
                         :shape "MediaAnalysisModelVersions" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-media-analysis-results
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'media-analysis-results
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'media-analysis-results 'make-media-analysis-results))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          media-analysis-results))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          media-analysis-results))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3object))
      (common-lisp:list
       (common-lisp:cons "S3Object"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-versions))
      (common-lisp:list
       (common-lisp:cons "ModelVersions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          media-analysis-results))
   common-lisp:nil))
(common-lisp:deftype media-analysis-s3key-prefix () 'common-lisp:string)
(common-lisp:deftype min-coverage-percentage () 'common-lisp:single-float)
(common-lisp:progn
 (common-lisp:defclass moderation-label common-lisp:nil
                       ((confidence :initarg :confidence :initform
                         common-lisp:nil :type
                         (common-lisp:or percent common-lisp:null) :accessor
                         struct-shape-moderation-label-confidence :shape
                         "Percent" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-moderation-label-name :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (parent-name :initarg :parent-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-moderation-label-parent-name :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (taxonomy-level :initarg :taxonomy-level :initform
                         common-lisp:nil :type
                         (common-lisp:or uinteger common-lisp:null) :accessor
                         struct-shape-moderation-label-taxonomy-level :shape
                         "UInteger" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-moderation-label
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'moderation-label
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'moderation-label 'make-moderation-label))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input moderation-label))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input moderation-label))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'confidence))
      (common-lisp:list
       (common-lisp:cons "Confidence"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parent-name))
      (common-lisp:list
       (common-lisp:cons "ParentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'taxonomy-level))
      (common-lisp:list
       (common-lisp:cons "TaxonomyLevel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input moderation-label))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype moderation-labels ()
   '(trivial-types:proper-list moderation-label))
 (common-lisp:defun make-moderation-labels
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list moderation-label))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass mouth-open common-lisp:nil
                       ((value :initarg :value :initform common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-mouth-open-value :shape "Boolean"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (confidence :initarg :confidence :initform
                         common-lisp:nil :type
                         (common-lisp:or percent common-lisp:null) :accessor
                         struct-shape-mouth-open-confidence :shape "Percent"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-mouth-open
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'mouth-open
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'mouth-open 'make-mouth-open))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input mouth-open))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input mouth-open))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'confidence))
      (common-lisp:list
       (common-lisp:cons "Confidence"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input mouth-open))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass mustache common-lisp:nil
                       ((value :initarg :value :initform common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-mustache-value :shape "Boolean" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (confidence :initarg :confidence :initform
                         common-lisp:nil :type
                         (common-lisp:or percent common-lisp:null) :accessor
                         struct-shape-mustache-confidence :shape "Percent"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-mustache
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'mustache
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'mustache 'make-mustache))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input mustache))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input mustache))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'confidence))
      (common-lisp:list
       (common-lisp:cons "Confidence"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input mustache))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass notification-channel common-lisp:nil
                       ((snstopic-arn :initarg :snstopic-arn :initform
                         (common-lisp:error ":snstopic-arn is required") :type
                         (common-lisp:or snstopic-arn common-lisp:null)
                         :accessor
                         struct-shape-notification-channel-snstopic-arn :shape
                         "SNSTopicArn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (role-arn :initarg :role-arn :initform
                         (common-lisp:error ":role-arn is required") :type
                         (common-lisp:or role-arn common-lisp:null) :accessor
                         struct-shape-notification-channel-role-arn :shape
                         "RoleArn" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-notification-channel
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'notification-channel
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'notification-channel 'make-notification-channel))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input notification-channel))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input notification-channel))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snstopic-arn))
      (common-lisp:list
       (common-lisp:cons "SNSTopicArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input notification-channel))
   common-lisp:nil))
(common-lisp:deftype orientation-correction () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass output-config common-lisp:nil
                       ((s3bucket :initarg :s3bucket :initform common-lisp:nil
                         :type (common-lisp:or s3bucket common-lisp:null)
                         :accessor struct-shape-output-config-s3bucket :shape
                         "S3Bucket" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (s3key-prefix :initarg :s3key-prefix :initform
                         common-lisp:nil :type
                         (common-lisp:or s3key-prefix common-lisp:null)
                         :accessor struct-shape-output-config-s3key-prefix
                         :shape "S3KeyPrefix" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-output-config
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'output-config
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'output-config 'make-output-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input output-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input output-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3bucket))
      (common-lisp:list
       (common-lisp:cons "S3Bucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3key-prefix))
      (common-lisp:list
       (common-lisp:cons "S3KeyPrefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input output-config))
   common-lisp:nil))
(common-lisp:deftype page-size () 'common-lisp:integer)
(common-lisp:deftype pagination-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass parent common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-parent-name :shape "String" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-parent
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'parent
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'parent 'make-parent))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input parent))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input parent))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input parent))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype parents () '(trivial-types:proper-list parent))
 (common-lisp:defun make-parents
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list parent))
   aws-sdk/generator/shape::members))
(common-lisp:deftype percent () 'common-lisp:single-float)
(common-lisp:progn
 (common-lisp:defclass person-detail common-lisp:nil
                       ((index :initarg :index :initform common-lisp:nil :type
                         (common-lisp:or person-index common-lisp:null)
                         :accessor struct-shape-person-detail-index :shape
                         "PersonIndex" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (bounding-box :initarg :bounding-box :initform
                         common-lisp:nil :type
                         (common-lisp:or bounding-box common-lisp:null)
                         :accessor struct-shape-person-detail-bounding-box
                         :shape "BoundingBox" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (face :initarg :face :initform common-lisp:nil :type
                         (common-lisp:or face-detail common-lisp:null)
                         :accessor struct-shape-person-detail-face :shape
                         "FaceDetail" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-person-detail
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'person-detail
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'person-detail 'make-person-detail))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input person-detail))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input person-detail))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'index))
      (common-lisp:list
       (common-lisp:cons "Index"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bounding-box))
      (common-lisp:list
       (common-lisp:cons "BoundingBox"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'face))
      (common-lisp:list
       (common-lisp:cons "Face"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input person-detail))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass person-detection common-lisp:nil
                       ((timestamp :initarg :timestamp :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-person-detection-timestamp :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (person :initarg :person :initform common-lisp:nil
                         :type (common-lisp:or person-detail common-lisp:null)
                         :accessor struct-shape-person-detection-person :shape
                         "PersonDetail" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-person-detection
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'person-detection
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'person-detection 'make-person-detection))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input person-detection))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input person-detection))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timestamp))
      (common-lisp:list
       (common-lisp:cons "Timestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'person))
      (common-lisp:list
       (common-lisp:cons "Person"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input person-detection))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype person-detections ()
   '(trivial-types:proper-list person-detection))
 (common-lisp:defun make-person-detections
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list person-detection))
   aws-sdk/generator/shape::members))
(common-lisp:deftype person-index () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass person-match common-lisp:nil
                       ((timestamp :initarg :timestamp :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-person-match-timestamp :shape "Timestamp"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (person :initarg :person :initform common-lisp:nil
                         :type (common-lisp:or person-detail common-lisp:null)
                         :accessor struct-shape-person-match-person :shape
                         "PersonDetail" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (face-matches :initarg :face-matches :initform
                         common-lisp:nil :type
                         (common-lisp:or face-match-list common-lisp:null)
                         :accessor struct-shape-person-match-face-matches
                         :shape "FaceMatchList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-person-match
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'person-match
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'person-match 'make-person-match))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input person-match))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input person-match))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timestamp))
      (common-lisp:list
       (common-lisp:cons "Timestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'person))
      (common-lisp:list
       (common-lisp:cons "Person"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'face-matches))
      (common-lisp:list
       (common-lisp:cons "FaceMatches"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input person-match))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype person-matches ()
   '(trivial-types:proper-list person-match))
 (common-lisp:defun make-person-matches
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list person-match))
   aws-sdk/generator/shape::members))
(common-lisp:deftype person-tracking-sort-by () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass point common-lisp:nil
                       ((x :initarg :x :initform common-lisp:nil :type
                         (common-lisp:or float common-lisp:null) :accessor
                         struct-shape-point-x :shape "Float" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (y :initarg :y :initform common-lisp:nil :type
                         (common-lisp:or float common-lisp:null) :accessor
                         struct-shape-point-y :shape "Float" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-point
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'point
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'point 'make-point))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input point))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input point))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'x))
      (common-lisp:list
       (common-lisp:cons "X"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'y))
      (common-lisp:list
       (common-lisp:cons "Y"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input point))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype polygon () '(trivial-types:proper-list point))
 (common-lisp:defun make-polygon
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list point))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass pose common-lisp:nil
                       ((roll :initarg :roll :initform common-lisp:nil :type
                         (common-lisp:or degree common-lisp:null) :accessor
                         struct-shape-pose-roll :shape "Degree" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (yaw :initarg :yaw :initform common-lisp:nil :type
                         (common-lisp:or degree common-lisp:null) :accessor
                         struct-shape-pose-yaw :shape "Degree" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (pitch :initarg :pitch :initform common-lisp:nil :type
                         (common-lisp:or degree common-lisp:null) :accessor
                         struct-shape-pose-pitch :shape "Degree" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-pose (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'pose
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'pose 'make-pose))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input pose))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input pose))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'roll))
      (common-lisp:list
       (common-lisp:cons "Roll"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'yaw))
      (common-lisp:list
       (common-lisp:cons "Yaw"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pitch))
      (common-lisp:list
       (common-lisp:cons "Pitch"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input pose))
   common-lisp:nil))
(common-lisp:deftype project-arn () 'common-lisp:string)
(common-lisp:deftype project-auto-update () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass project-description common-lisp:nil
                       ((project-arn :initarg :project-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or project-arn common-lisp:null)
                         :accessor struct-shape-project-description-project-arn
                         :shape "ProjectArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (creation-timestamp :initarg :creation-timestamp
                         :initform common-lisp:nil :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         struct-shape-project-description-creation-timestamp
                         :shape "DateTime" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or project-status common-lisp:null)
                         :accessor struct-shape-project-description-status
                         :shape "ProjectStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (datasets :initarg :datasets :initform common-lisp:nil
                         :type
                         (common-lisp:or dataset-metadata-list
                                         common-lisp:null)
                         :accessor struct-shape-project-description-datasets
                         :shape "DatasetMetadataList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (feature :initarg :feature :initform common-lisp:nil
                         :type
                         (common-lisp:or customization-feature
                                         common-lisp:null)
                         :accessor struct-shape-project-description-feature
                         :shape "CustomizationFeature" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (auto-update :initarg :auto-update :initform
                         common-lisp:nil :type
                         (common-lisp:or project-auto-update common-lisp:null)
                         :accessor struct-shape-project-description-auto-update
                         :shape "ProjectAutoUpdate" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-project-description
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'project-description
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'project-description 'make-project-description))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input project-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input project-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'project-arn))
      (common-lisp:list
       (common-lisp:cons "ProjectArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-timestamp))
      (common-lisp:list
       (common-lisp:cons "CreationTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'datasets))
      (common-lisp:list
       (common-lisp:cons "Datasets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'feature))
      (common-lisp:list
       (common-lisp:cons "Feature"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auto-update))
      (common-lisp:list
       (common-lisp:cons "AutoUpdate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input project-description))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype project-descriptions ()
   '(trivial-types:proper-list project-description))
 (common-lisp:defun make-project-descriptions
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list project-description))
   aws-sdk/generator/shape::members))
(common-lisp:deftype project-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype project-names ()
   '(trivial-types:proper-list project-name))
 (common-lisp:defun make-project-names
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list project-name))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype project-policies ()
   '(trivial-types:proper-list project-policy))
 (common-lisp:defun make-project-policies
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list project-policy))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass project-policy common-lisp:nil
                       ((project-arn :initarg :project-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or project-arn common-lisp:null)
                         :accessor struct-shape-project-policy-project-arn
                         :shape "ProjectArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (policy-name :initarg :policy-name :initform
                         common-lisp:nil :type
                         (common-lisp:or project-policy-name common-lisp:null)
                         :accessor struct-shape-project-policy-policy-name
                         :shape "ProjectPolicyName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (policy-revision-id :initarg :policy-revision-id
                         :initform common-lisp:nil :type
                         (common-lisp:or project-policy-revision-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-project-policy-policy-revision-id :shape
                         "ProjectPolicyRevisionId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (policy-document :initarg :policy-document :initform
                         common-lisp:nil :type
                         (common-lisp:or project-policy-document
                                         common-lisp:null)
                         :accessor struct-shape-project-policy-policy-document
                         :shape "ProjectPolicyDocument" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (creation-timestamp :initarg :creation-timestamp
                         :initform common-lisp:nil :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         struct-shape-project-policy-creation-timestamp :shape
                         "DateTime" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (last-updated-timestamp :initarg
                         :last-updated-timestamp :initform common-lisp:nil
                         :type (common-lisp:or date-time common-lisp:null)
                         :accessor
                         struct-shape-project-policy-last-updated-timestamp
                         :shape "DateTime" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-project-policy
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'project-policy
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'project-policy 'make-project-policy))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input project-policy))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input project-policy))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'project-arn))
      (common-lisp:list
       (common-lisp:cons "ProjectArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-name))
      (common-lisp:list
       (common-lisp:cons "PolicyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-revision-id))
      (common-lisp:list
       (common-lisp:cons "PolicyRevisionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-document))
      (common-lisp:list
       (common-lisp:cons "PolicyDocument"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-timestamp))
      (common-lisp:list
       (common-lisp:cons "CreationTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-updated-timestamp))
      (common-lisp:list
       (common-lisp:cons "LastUpdatedTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input project-policy))
   common-lisp:nil))
(common-lisp:deftype project-policy-document () 'common-lisp:string)
(common-lisp:deftype project-policy-name () 'common-lisp:string)
(common-lisp:deftype project-policy-revision-id () 'common-lisp:string)
(common-lisp:deftype project-status () 'common-lisp:string)
(common-lisp:deftype project-version-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass project-version-description common-lisp:nil
                       ((project-version-arn :initarg :project-version-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or project-version-arn common-lisp:null)
                         :accessor
                         struct-shape-project-version-description-project-version-arn
                         :shape "ProjectVersionArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (creation-timestamp :initarg :creation-timestamp
                         :initform common-lisp:nil :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         struct-shape-project-version-description-creation-timestamp
                         :shape "DateTime" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (min-inference-units :initarg :min-inference-units
                         :initform common-lisp:nil :type
                         (common-lisp:or inference-units common-lisp:null)
                         :accessor
                         struct-shape-project-version-description-min-inference-units
                         :shape "InferenceUnits" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or project-version-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-project-version-description-status :shape
                         "ProjectVersionStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status-message :initarg :status-message :initform
                         common-lisp:nil :type
                         (common-lisp:or status-message common-lisp:null)
                         :accessor
                         struct-shape-project-version-description-status-message
                         :shape "StatusMessage" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (billable-training-time-in-seconds :initarg
                         :billable-training-time-in-seconds :initform
                         common-lisp:nil :type
                         (common-lisp:or ulong common-lisp:null) :accessor
                         struct-shape-project-version-description-billable-training-time-in-seconds
                         :shape "ULong" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (training-end-timestamp :initarg
                         :training-end-timestamp :initform common-lisp:nil
                         :type (common-lisp:or date-time common-lisp:null)
                         :accessor
                         struct-shape-project-version-description-training-end-timestamp
                         :shape "DateTime" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (output-config :initarg :output-config :initform
                         common-lisp:nil :type
                         (common-lisp:or output-config common-lisp:null)
                         :accessor
                         struct-shape-project-version-description-output-config
                         :shape "OutputConfig" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (training-data-result :initarg :training-data-result
                         :initform common-lisp:nil :type
                         (common-lisp:or training-data-result common-lisp:null)
                         :accessor
                         struct-shape-project-version-description-training-data-result
                         :shape "TrainingDataResult" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (testing-data-result :initarg :testing-data-result
                         :initform common-lisp:nil :type
                         (common-lisp:or testing-data-result common-lisp:null)
                         :accessor
                         struct-shape-project-version-description-testing-data-result
                         :shape "TestingDataResult" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (evaluation-result :initarg :evaluation-result
                         :initform common-lisp:nil :type
                         (common-lisp:or evaluation-result common-lisp:null)
                         :accessor
                         struct-shape-project-version-description-evaluation-result
                         :shape "EvaluationResult" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (manifest-summary :initarg :manifest-summary :initform
                         common-lisp:nil :type
                         (common-lisp:or ground-truth-manifest
                                         common-lisp:null)
                         :accessor
                         struct-shape-project-version-description-manifest-summary
                         :shape "GroundTruthManifest" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (kms-key-id :initarg :kms-key-id :initform
                         common-lisp:nil :type
                         (common-lisp:or kms-key-id common-lisp:null) :accessor
                         struct-shape-project-version-description-kms-key-id
                         :shape "KmsKeyId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-inference-units :initarg :max-inference-units
                         :initform common-lisp:nil :type
                         (common-lisp:or inference-units common-lisp:null)
                         :accessor
                         struct-shape-project-version-description-max-inference-units
                         :shape "InferenceUnits" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (source-project-version-arn :initarg
                         :source-project-version-arn :initform common-lisp:nil
                         :type
                         (common-lisp:or project-version-arn common-lisp:null)
                         :accessor
                         struct-shape-project-version-description-source-project-version-arn
                         :shape "ProjectVersionArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (version-description :initarg :version-description
                         :initform common-lisp:nil :type
                         (common-lisp:or version-description common-lisp:null)
                         :accessor
                         struct-shape-project-version-description-version-description
                         :shape "VersionDescription" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (feature :initarg :feature :initform common-lisp:nil
                         :type
                         (common-lisp:or customization-feature
                                         common-lisp:null)
                         :accessor
                         struct-shape-project-version-description-feature
                         :shape "CustomizationFeature" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (base-model-version :initarg :base-model-version
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-project-version-description-base-model-version
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (feature-config :initarg :feature-config :initform
                         common-lisp:nil :type
                         (common-lisp:or customization-feature-config
                                         common-lisp:null)
                         :accessor
                         struct-shape-project-version-description-feature-config
                         :shape "CustomizationFeatureConfig" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-project-version-description
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'project-version-description
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'project-version-description
                    'make-project-version-description))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          project-version-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          project-version-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'project-version-arn))
      (common-lisp:list
       (common-lisp:cons "ProjectVersionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-timestamp))
      (common-lisp:list
       (common-lisp:cons "CreationTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'min-inference-units))
      (common-lisp:list
       (common-lisp:cons "MinInferenceUnits"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-message))
      (common-lisp:list
       (common-lisp:cons "StatusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'billable-training-time-in-seconds))
      (common-lisp:list
       (common-lisp:cons "BillableTrainingTimeInSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'training-end-timestamp))
      (common-lisp:list
       (common-lisp:cons "TrainingEndTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-config))
      (common-lisp:list
       (common-lisp:cons "OutputConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'training-data-result))
      (common-lisp:list
       (common-lisp:cons "TrainingDataResult"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'testing-data-result))
      (common-lisp:list
       (common-lisp:cons "TestingDataResult"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'evaluation-result))
      (common-lisp:list
       (common-lisp:cons "EvaluationResult"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'manifest-summary))
      (common-lisp:list
       (common-lisp:cons "ManifestSummary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "KmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-inference-units))
      (common-lisp:list
       (common-lisp:cons "MaxInferenceUnits"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-project-version-arn))
      (common-lisp:list
       (common-lisp:cons "SourceProjectVersionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-description))
      (common-lisp:list
       (common-lisp:cons "VersionDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'feature))
      (common-lisp:list
       (common-lisp:cons "Feature"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'base-model-version))
      (common-lisp:list
       (common-lisp:cons "BaseModelVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'feature-config))
      (common-lisp:list
       (common-lisp:cons "FeatureConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          project-version-description))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype project-version-descriptions ()
   '(trivial-types:proper-list project-version-description))
 (common-lisp:defun make-project-version-descriptions
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            project-version-description))
   aws-sdk/generator/shape::members))
(common-lisp:deftype project-version-id () 'common-lisp:string)
(common-lisp:deftype project-version-status () 'common-lisp:string)
(common-lisp:deftype project-versions-page-size () 'common-lisp:integer)
(common-lisp:deftype projects-page-size () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass protective-equipment-body-part common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or body-part common-lisp:null) :accessor
                         struct-shape-protective-equipment-body-part-name
                         :shape "BodyPart" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (confidence :initarg :confidence :initform
                         common-lisp:nil :type
                         (common-lisp:or percent common-lisp:null) :accessor
                         struct-shape-protective-equipment-body-part-confidence
                         :shape "Percent" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (equipment-detections :initarg :equipment-detections
                         :initform common-lisp:nil :type
                         (common-lisp:or equipment-detections common-lisp:null)
                         :accessor
                         struct-shape-protective-equipment-body-part-equipment-detections
                         :shape "EquipmentDetections" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-protective-equipment-body-part
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'protective-equipment-body-part
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'protective-equipment-body-part
                    'make-protective-equipment-body-part))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          protective-equipment-body-part))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          protective-equipment-body-part))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'confidence))
      (common-lisp:list
       (common-lisp:cons "Confidence"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'equipment-detections))
      (common-lisp:list
       (common-lisp:cons "EquipmentDetections"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          protective-equipment-body-part))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass protective-equipment-person common-lisp:nil
                       ((body-parts :initarg :body-parts :initform
                         common-lisp:nil :type
                         (common-lisp:or body-parts common-lisp:null) :accessor
                         struct-shape-protective-equipment-person-body-parts
                         :shape "BodyParts" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (bounding-box :initarg :bounding-box :initform
                         common-lisp:nil :type
                         (common-lisp:or bounding-box common-lisp:null)
                         :accessor
                         struct-shape-protective-equipment-person-bounding-box
                         :shape "BoundingBox" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (confidence :initarg :confidence :initform
                         common-lisp:nil :type
                         (common-lisp:or percent common-lisp:null) :accessor
                         struct-shape-protective-equipment-person-confidence
                         :shape "Percent" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (id :initarg :id :initform common-lisp:nil :type
                         (common-lisp:or uinteger common-lisp:null) :accessor
                         struct-shape-protective-equipment-person-id :shape
                         "UInteger" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-protective-equipment-person
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'protective-equipment-person
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'protective-equipment-person
                    'make-protective-equipment-person))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          protective-equipment-person))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          protective-equipment-person))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'body-parts))
      (common-lisp:list
       (common-lisp:cons "BodyParts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bounding-box))
      (common-lisp:list
       (common-lisp:cons "BoundingBox"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'confidence))
      (common-lisp:list
       (common-lisp:cons "Confidence"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          protective-equipment-person))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype protective-equipment-person-ids ()
   '(trivial-types:proper-list uinteger))
 (common-lisp:defun make-protective-equipment-person-ids
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list uinteger))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype protective-equipment-persons ()
   '(trivial-types:proper-list protective-equipment-person))
 (common-lisp:defun make-protective-equipment-persons
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            protective-equipment-person))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass protective-equipment-summarization-attributes
                       common-lisp:nil
                       ((min-confidence :initarg :min-confidence :initform
                         (common-lisp:error ":min-confidence is required")
                         :type (common-lisp:or percent common-lisp:null)
                         :accessor
                         struct-shape-protective-equipment-summarization-attributes-min-confidence
                         :shape "Percent" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (required-equipment-types :initarg
                         :required-equipment-types :initform
                         (common-lisp:error
                          ":required-equipment-types is required")
                         :type
                         (common-lisp:or protective-equipment-types
                                         common-lisp:null)
                         :accessor
                         struct-shape-protective-equipment-summarization-attributes-required-equipment-types
                         :shape "ProtectiveEquipmentTypes" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-protective-equipment-summarization-attributes
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'protective-equipment-summarization-attributes
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'protective-equipment-summarization-attributes
                    'make-protective-equipment-summarization-attributes))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          protective-equipment-summarization-attributes))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          protective-equipment-summarization-attributes))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'min-confidence))
      (common-lisp:list
       (common-lisp:cons "MinConfidence"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'required-equipment-types))
      (common-lisp:list
       (common-lisp:cons "RequiredEquipmentTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          protective-equipment-summarization-attributes))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass protective-equipment-summary common-lisp:nil
                       ((persons-with-required-equipment :initarg
                         :persons-with-required-equipment :initform
                         common-lisp:nil :type
                         (common-lisp:or protective-equipment-person-ids
                                         common-lisp:null)
                         :accessor
                         struct-shape-protective-equipment-summary-persons-with-required-equipment
                         :shape "ProtectiveEquipmentPersonIds" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (persons-without-required-equipment :initarg
                         :persons-without-required-equipment :initform
                         common-lisp:nil :type
                         (common-lisp:or protective-equipment-person-ids
                                         common-lisp:null)
                         :accessor
                         struct-shape-protective-equipment-summary-persons-without-required-equipment
                         :shape "ProtectiveEquipmentPersonIds" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (persons-indeterminate :initarg :persons-indeterminate
                         :initform common-lisp:nil :type
                         (common-lisp:or protective-equipment-person-ids
                                         common-lisp:null)
                         :accessor
                         struct-shape-protective-equipment-summary-persons-indeterminate
                         :shape "ProtectiveEquipmentPersonIds" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-protective-equipment-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'protective-equipment-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'protective-equipment-summary
                    'make-protective-equipment-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          protective-equipment-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          protective-equipment-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'persons-with-required-equipment))
      (common-lisp:list
       (common-lisp:cons "PersonsWithRequiredEquipment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'persons-without-required-equipment))
      (common-lisp:list
       (common-lisp:cons "PersonsWithoutRequiredEquipment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'persons-indeterminate))
      (common-lisp:list
       (common-lisp:cons "PersonsIndeterminate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          protective-equipment-summary))
   common-lisp:nil))
(common-lisp:deftype protective-equipment-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype protective-equipment-types ()
   '(trivial-types:proper-list protective-equipment-type))
 (common-lisp:defun make-protective-equipment-types
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            protective-equipment-type))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition provisioned-throughput-exceeded-exception
     (rekognition-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'provisioned-throughput-exceeded-exception)))
(common-lisp:progn
 (common-lisp:defclass put-project-policy-request common-lisp:nil
                       ((project-arn :initarg :project-arn :initform
                         (common-lisp:error ":project-arn is required") :type
                         (common-lisp:or project-arn common-lisp:null)
                         :accessor
                         struct-shape-put-project-policy-request-project-arn
                         :shape "ProjectArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (policy-name :initarg :policy-name :initform
                         (common-lisp:error ":policy-name is required") :type
                         (common-lisp:or project-policy-name common-lisp:null)
                         :accessor
                         struct-shape-put-project-policy-request-policy-name
                         :shape "ProjectPolicyName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (policy-revision-id :initarg :policy-revision-id
                         :initform common-lisp:nil :type
                         (common-lisp:or project-policy-revision-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-put-project-policy-request-policy-revision-id
                         :shape "ProjectPolicyRevisionId" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (policy-document :initarg :policy-document :initform
                         (common-lisp:error ":policy-document is required")
                         :type
                         (common-lisp:or project-policy-document
                                         common-lisp:null)
                         :accessor
                         struct-shape-put-project-policy-request-policy-document
                         :shape "ProjectPolicyDocument" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-project-policy-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'put-project-policy-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-project-policy-request
                    'make-put-project-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-project-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-project-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'project-arn))
      (common-lisp:list
       (common-lisp:cons "ProjectArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-name))
      (common-lisp:list
       (common-lisp:cons "PolicyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-revision-id))
      (common-lisp:list
       (common-lisp:cons "PolicyRevisionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-document))
      (common-lisp:list
       (common-lisp:cons "PolicyDocument"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-project-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-project-policy-response common-lisp:nil
                       ((policy-revision-id :initarg :policy-revision-id
                         :initform common-lisp:nil :type
                         (common-lisp:or project-policy-revision-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-put-project-policy-response-policy-revision-id
                         :shape "ProjectPolicyRevisionId" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-project-policy-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'put-project-policy-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-project-policy-response
                    'make-put-project-policy-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-project-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-project-policy-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-revision-id))
      (common-lisp:list
       (common-lisp:cons "PolicyRevisionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-project-policy-response))
   common-lisp:nil))
(common-lisp:deftype quality-filter () 'common-lisp:string)
(common-lisp:deftype query-string () 'common-lisp:string)
(common-lisp:deftype reason () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype reasons () '(trivial-types:proper-list reason))
 (common-lisp:defun make-reasons
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list reason))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass recognize-celebrities-request common-lisp:nil
                       ((image :initarg :image :initform
                         (common-lisp:error ":image is required") :type
                         (common-lisp:or image common-lisp:null) :accessor
                         struct-shape-recognize-celebrities-request-image
                         :shape "Image" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-recognize-celebrities-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'recognize-celebrities-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'recognize-celebrities-request
                    'make-recognize-celebrities-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          recognize-celebrities-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          recognize-celebrities-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image))
      (common-lisp:list
       (common-lisp:cons "Image"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          recognize-celebrities-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass recognize-celebrities-response common-lisp:nil
                       ((celebrity-faces :initarg :celebrity-faces :initform
                         common-lisp:nil :type
                         (common-lisp:or celebrity-list common-lisp:null)
                         :accessor
                         struct-shape-recognize-celebrities-response-celebrity-faces
                         :shape "CelebrityList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (unrecognized-faces :initarg :unrecognized-faces
                         :initform common-lisp:nil :type
                         (common-lisp:or compared-face-list common-lisp:null)
                         :accessor
                         struct-shape-recognize-celebrities-response-unrecognized-faces
                         :shape "ComparedFaceList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (orientation-correction :initarg
                         :orientation-correction :initform common-lisp:nil
                         :type
                         (common-lisp:or orientation-correction
                                         common-lisp:null)
                         :accessor
                         struct-shape-recognize-celebrities-response-orientation-correction
                         :shape "OrientationCorrection" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-recognize-celebrities-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'recognize-celebrities-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'recognize-celebrities-response
                    'make-recognize-celebrities-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          recognize-celebrities-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          recognize-celebrities-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'celebrity-faces))
      (common-lisp:list
       (common-lisp:cons "CelebrityFaces"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'unrecognized-faces))
      (common-lisp:list
       (common-lisp:cons "UnrecognizedFaces"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'orientation-correction))
      (common-lisp:list
       (common-lisp:cons "OrientationCorrection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          recognize-celebrities-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass region-of-interest common-lisp:nil
                       ((bounding-box :initarg :bounding-box :initform
                         common-lisp:nil :type
                         (common-lisp:or bounding-box common-lisp:null)
                         :accessor struct-shape-region-of-interest-bounding-box
                         :shape "BoundingBox" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (polygon :initarg :polygon :initform common-lisp:nil
                         :type (common-lisp:or polygon common-lisp:null)
                         :accessor struct-shape-region-of-interest-polygon
                         :shape "Polygon" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-region-of-interest
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'region-of-interest
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'region-of-interest 'make-region-of-interest))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input region-of-interest))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input region-of-interest))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bounding-box))
      (common-lisp:list
       (common-lisp:cons "BoundingBox"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'polygon))
      (common-lisp:list
       (common-lisp:cons "Polygon"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input region-of-interest))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype regions-of-interest ()
   '(trivial-types:proper-list region-of-interest))
 (common-lisp:defun make-regions-of-interest
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list region-of-interest))
   aws-sdk/generator/shape::members))
(common-lisp:deftype rekognition-unique-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition resource-already-exists-exception
     (rekognition-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'resource-already-exists-exception)))
(common-lisp:deftype resource-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition resource-in-use-exception
     (rekognition-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'resource-in-use-exception)))
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-exception
     (rekognition-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'resource-not-found-exception)))
(common-lisp:progn
 (common-lisp:define-condition resource-not-ready-exception
     (rekognition-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'resource-not-ready-exception)))
(common-lisp:deftype role-arn () 'common-lisp:string)
(common-lisp:deftype s3bucket () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass s3destination common-lisp:nil
                       ((bucket :initarg :bucket :initform common-lisp:nil
                         :type (common-lisp:or s3bucket common-lisp:null)
                         :accessor struct-shape-s3destination-bucket :shape
                         "S3Bucket" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (key-prefix :initarg :key-prefix :initform
                         common-lisp:nil :type
                         (common-lisp:or s3key-prefix common-lisp:null)
                         :accessor struct-shape-s3destination-key-prefix :shape
                         "S3KeyPrefix" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-s3destination
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 's3destination
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 's3destination 'make-s3destination))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input s3destination))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input s3destination))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket))
      (common-lisp:list
       (common-lisp:cons "Bucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-prefix))
      (common-lisp:list
       (common-lisp:cons "KeyPrefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input s3destination))
   common-lisp:nil))
(common-lisp:deftype s3key-prefix () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass s3object common-lisp:nil
                       ((bucket :initarg :bucket :initform common-lisp:nil
                         :type (common-lisp:or s3bucket common-lisp:null)
                         :accessor struct-shape-s3object-bucket :shape
                         "S3Bucket" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or s3object-name common-lisp:null)
                         :accessor struct-shape-s3object-name :shape
                         "S3ObjectName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (version :initarg :version :initform common-lisp:nil
                         :type
                         (common-lisp:or s3object-version common-lisp:null)
                         :accessor struct-shape-s3object-version :shape
                         "S3ObjectVersion" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-s3object
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 's3object
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 's3object 'make-s3object))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input s3object))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input s3object))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket))
      (common-lisp:list
       (common-lisp:cons "Bucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "Version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input s3object))
   common-lisp:nil))
(common-lisp:deftype s3object-name () 'common-lisp:string)
(common-lisp:deftype s3object-version () 'common-lisp:string)
(common-lisp:deftype snstopic-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass search-faces-by-image-request common-lisp:nil
                       ((collection-id :initarg :collection-id :initform
                         (common-lisp:error ":collection-id is required") :type
                         (common-lisp:or collection-id common-lisp:null)
                         :accessor
                         struct-shape-search-faces-by-image-request-collection-id
                         :shape "CollectionId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (image :initarg :image :initform
                         (common-lisp:error ":image is required") :type
                         (common-lisp:or image common-lisp:null) :accessor
                         struct-shape-search-faces-by-image-request-image
                         :shape "Image" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-faces :initarg :max-faces :initform
                         common-lisp:nil :type
                         (common-lisp:or max-faces common-lisp:null) :accessor
                         struct-shape-search-faces-by-image-request-max-faces
                         :shape "MaxFaces" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (face-match-threshold :initarg :face-match-threshold
                         :initform common-lisp:nil :type
                         (common-lisp:or percent common-lisp:null) :accessor
                         struct-shape-search-faces-by-image-request-face-match-threshold
                         :shape "Percent" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (quality-filter :initarg :quality-filter :initform
                         common-lisp:nil :type
                         (common-lisp:or quality-filter common-lisp:null)
                         :accessor
                         struct-shape-search-faces-by-image-request-quality-filter
                         :shape "QualityFilter" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-search-faces-by-image-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'search-faces-by-image-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'search-faces-by-image-request
                    'make-search-faces-by-image-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          search-faces-by-image-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          search-faces-by-image-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'collection-id))
      (common-lisp:list
       (common-lisp:cons "CollectionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image))
      (common-lisp:list
       (common-lisp:cons "Image"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-faces))
      (common-lisp:list
       (common-lisp:cons "MaxFaces"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'face-match-threshold))
      (common-lisp:list
       (common-lisp:cons "FaceMatchThreshold"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'quality-filter))
      (common-lisp:list
       (common-lisp:cons "QualityFilter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          search-faces-by-image-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass search-faces-by-image-response common-lisp:nil
                       ((searched-face-bounding-box :initarg
                         :searched-face-bounding-box :initform common-lisp:nil
                         :type (common-lisp:or bounding-box common-lisp:null)
                         :accessor
                         struct-shape-search-faces-by-image-response-searched-face-bounding-box
                         :shape "BoundingBox" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (searched-face-confidence :initarg
                         :searched-face-confidence :initform common-lisp:nil
                         :type (common-lisp:or percent common-lisp:null)
                         :accessor
                         struct-shape-search-faces-by-image-response-searched-face-confidence
                         :shape "Percent" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (face-matches :initarg :face-matches :initform
                         common-lisp:nil :type
                         (common-lisp:or face-match-list common-lisp:null)
                         :accessor
                         struct-shape-search-faces-by-image-response-face-matches
                         :shape "FaceMatchList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (face-model-version :initarg :face-model-version
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-search-faces-by-image-response-face-model-version
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-search-faces-by-image-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'search-faces-by-image-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'search-faces-by-image-response
                    'make-search-faces-by-image-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          search-faces-by-image-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          search-faces-by-image-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'searched-face-bounding-box))
      (common-lisp:list
       (common-lisp:cons "SearchedFaceBoundingBox"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'searched-face-confidence))
      (common-lisp:list
       (common-lisp:cons "SearchedFaceConfidence"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'face-matches))
      (common-lisp:list
       (common-lisp:cons "FaceMatches"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'face-model-version))
      (common-lisp:list
       (common-lisp:cons "FaceModelVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          search-faces-by-image-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass search-faces-request common-lisp:nil
                       ((collection-id :initarg :collection-id :initform
                         (common-lisp:error ":collection-id is required") :type
                         (common-lisp:or collection-id common-lisp:null)
                         :accessor
                         struct-shape-search-faces-request-collection-id :shape
                         "CollectionId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (face-id :initarg :face-id :initform
                         (common-lisp:error ":face-id is required") :type
                         (common-lisp:or face-id common-lisp:null) :accessor
                         struct-shape-search-faces-request-face-id :shape
                         "FaceId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (max-faces :initarg :max-faces :initform
                         common-lisp:nil :type
                         (common-lisp:or max-faces common-lisp:null) :accessor
                         struct-shape-search-faces-request-max-faces :shape
                         "MaxFaces" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (face-match-threshold :initarg :face-match-threshold
                         :initform common-lisp:nil :type
                         (common-lisp:or percent common-lisp:null) :accessor
                         struct-shape-search-faces-request-face-match-threshold
                         :shape "Percent" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-search-faces-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'search-faces-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'search-faces-request 'make-search-faces-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input search-faces-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input search-faces-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'collection-id))
      (common-lisp:list
       (common-lisp:cons "CollectionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'face-id))
      (common-lisp:list
       (common-lisp:cons "FaceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-faces))
      (common-lisp:list
       (common-lisp:cons "MaxFaces"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'face-match-threshold))
      (common-lisp:list
       (common-lisp:cons "FaceMatchThreshold"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input search-faces-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass search-faces-response common-lisp:nil
                       ((searched-face-id :initarg :searched-face-id :initform
                         common-lisp:nil :type
                         (common-lisp:or face-id common-lisp:null) :accessor
                         struct-shape-search-faces-response-searched-face-id
                         :shape "FaceId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (face-matches :initarg :face-matches :initform
                         common-lisp:nil :type
                         (common-lisp:or face-match-list common-lisp:null)
                         :accessor
                         struct-shape-search-faces-response-face-matches :shape
                         "FaceMatchList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (face-model-version :initarg :face-model-version
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-search-faces-response-face-model-version
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-search-faces-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'search-faces-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'search-faces-response 'make-search-faces-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          search-faces-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          search-faces-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'searched-face-id))
      (common-lisp:list
       (common-lisp:cons "SearchedFaceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'face-matches))
      (common-lisp:list
       (common-lisp:cons "FaceMatches"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'face-model-version))
      (common-lisp:list
       (common-lisp:cons "FaceModelVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          search-faces-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass search-users-by-image-request common-lisp:nil
                       ((collection-id :initarg :collection-id :initform
                         (common-lisp:error ":collection-id is required") :type
                         (common-lisp:or collection-id common-lisp:null)
                         :accessor
                         struct-shape-search-users-by-image-request-collection-id
                         :shape "CollectionId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (image :initarg :image :initform
                         (common-lisp:error ":image is required") :type
                         (common-lisp:or image common-lisp:null) :accessor
                         struct-shape-search-users-by-image-request-image
                         :shape "Image" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (user-match-threshold :initarg :user-match-threshold
                         :initform common-lisp:nil :type
                         (common-lisp:or percent common-lisp:null) :accessor
                         struct-shape-search-users-by-image-request-user-match-threshold
                         :shape "Percent" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-users :initarg :max-users :initform
                         common-lisp:nil :type
                         (common-lisp:or max-user-results common-lisp:null)
                         :accessor
                         struct-shape-search-users-by-image-request-max-users
                         :shape "MaxUserResults" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (quality-filter :initarg :quality-filter :initform
                         common-lisp:nil :type
                         (common-lisp:or quality-filter common-lisp:null)
                         :accessor
                         struct-shape-search-users-by-image-request-quality-filter
                         :shape "QualityFilter" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-search-users-by-image-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'search-users-by-image-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'search-users-by-image-request
                    'make-search-users-by-image-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          search-users-by-image-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          search-users-by-image-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'collection-id))
      (common-lisp:list
       (common-lisp:cons "CollectionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image))
      (common-lisp:list
       (common-lisp:cons "Image"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'user-match-threshold))
      (common-lisp:list
       (common-lisp:cons "UserMatchThreshold"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-users))
      (common-lisp:list
       (common-lisp:cons "MaxUsers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'quality-filter))
      (common-lisp:list
       (common-lisp:cons "QualityFilter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          search-users-by-image-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass search-users-by-image-response common-lisp:nil
                       ((user-matches :initarg :user-matches :initform
                         common-lisp:nil :type
                         (common-lisp:or user-match-list common-lisp:null)
                         :accessor
                         struct-shape-search-users-by-image-response-user-matches
                         :shape "UserMatchList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (face-model-version :initarg :face-model-version
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-search-users-by-image-response-face-model-version
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (searched-face :initarg :searched-face :initform
                         common-lisp:nil :type
                         (common-lisp:or searched-face-details
                                         common-lisp:null)
                         :accessor
                         struct-shape-search-users-by-image-response-searched-face
                         :shape "SearchedFaceDetails" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (unsearched-faces :initarg :unsearched-faces :initform
                         common-lisp:nil :type
                         (common-lisp:or unsearched-faces-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-search-users-by-image-response-unsearched-faces
                         :shape "UnsearchedFacesList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-search-users-by-image-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'search-users-by-image-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'search-users-by-image-response
                    'make-search-users-by-image-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          search-users-by-image-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          search-users-by-image-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-matches))
      (common-lisp:list
       (common-lisp:cons "UserMatches"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'face-model-version))
      (common-lisp:list
       (common-lisp:cons "FaceModelVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'searched-face))
      (common-lisp:list
       (common-lisp:cons "SearchedFace"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'unsearched-faces))
      (common-lisp:list
       (common-lisp:cons "UnsearchedFaces"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          search-users-by-image-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass search-users-request common-lisp:nil
                       ((collection-id :initarg :collection-id :initform
                         (common-lisp:error ":collection-id is required") :type
                         (common-lisp:or collection-id common-lisp:null)
                         :accessor
                         struct-shape-search-users-request-collection-id :shape
                         "CollectionId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (user-id :initarg :user-id :initform common-lisp:nil
                         :type (common-lisp:or user-id common-lisp:null)
                         :accessor struct-shape-search-users-request-user-id
                         :shape "UserId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (face-id :initarg :face-id :initform common-lisp:nil
                         :type (common-lisp:or face-id common-lisp:null)
                         :accessor struct-shape-search-users-request-face-id
                         :shape "FaceId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (user-match-threshold :initarg :user-match-threshold
                         :initform common-lisp:nil :type
                         (common-lisp:or percent common-lisp:null) :accessor
                         struct-shape-search-users-request-user-match-threshold
                         :shape "Percent" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-users :initarg :max-users :initform
                         common-lisp:nil :type
                         (common-lisp:or max-user-results common-lisp:null)
                         :accessor struct-shape-search-users-request-max-users
                         :shape "MaxUserResults" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-search-users-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'search-users-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'search-users-request 'make-search-users-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input search-users-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input search-users-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'collection-id))
      (common-lisp:list
       (common-lisp:cons "CollectionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-id))
      (common-lisp:list
       (common-lisp:cons "UserId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'face-id))
      (common-lisp:list
       (common-lisp:cons "FaceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'user-match-threshold))
      (common-lisp:list
       (common-lisp:cons "UserMatchThreshold"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-users))
      (common-lisp:list
       (common-lisp:cons "MaxUsers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input search-users-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass search-users-response common-lisp:nil
                       ((user-matches :initarg :user-matches :initform
                         common-lisp:nil :type
                         (common-lisp:or user-match-list common-lisp:null)
                         :accessor
                         struct-shape-search-users-response-user-matches :shape
                         "UserMatchList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (face-model-version :initarg :face-model-version
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-search-users-response-face-model-version
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (searched-face :initarg :searched-face :initform
                         common-lisp:nil :type
                         (common-lisp:or searched-face common-lisp:null)
                         :accessor
                         struct-shape-search-users-response-searched-face
                         :shape "SearchedFace" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (searched-user :initarg :searched-user :initform
                         common-lisp:nil :type
                         (common-lisp:or searched-user common-lisp:null)
                         :accessor
                         struct-shape-search-users-response-searched-user
                         :shape "SearchedUser" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-search-users-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'search-users-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'search-users-response 'make-search-users-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          search-users-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          search-users-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-matches))
      (common-lisp:list
       (common-lisp:cons "UserMatches"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'face-model-version))
      (common-lisp:list
       (common-lisp:cons "FaceModelVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'searched-face))
      (common-lisp:list
       (common-lisp:cons "SearchedFace"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'searched-user))
      (common-lisp:list
       (common-lisp:cons "SearchedUser"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          search-users-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass searched-face common-lisp:nil
                       ((face-id :initarg :face-id :initform common-lisp:nil
                         :type (common-lisp:or face-id common-lisp:null)
                         :accessor struct-shape-searched-face-face-id :shape
                         "FaceId" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-searched-face
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'searched-face
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'searched-face 'make-searched-face))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input searched-face))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input searched-face))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'face-id))
      (common-lisp:list
       (common-lisp:cons "FaceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input searched-face))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass searched-face-details common-lisp:nil
                       ((face-detail :initarg :face-detail :initform
                         common-lisp:nil :type
                         (common-lisp:or face-detail common-lisp:null)
                         :accessor
                         struct-shape-searched-face-details-face-detail :shape
                         "FaceDetail" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-searched-face-details
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'searched-face-details
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'searched-face-details 'make-searched-face-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          searched-face-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          searched-face-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'face-detail))
      (common-lisp:list
       (common-lisp:cons "FaceDetail"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          searched-face-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass searched-user common-lisp:nil
                       ((user-id :initarg :user-id :initform common-lisp:nil
                         :type (common-lisp:or user-id common-lisp:null)
                         :accessor struct-shape-searched-user-user-id :shape
                         "UserId" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-searched-user
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'searched-user
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'searched-user 'make-searched-user))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input searched-user))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input searched-user))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-id))
      (common-lisp:list
       (common-lisp:cons "UserId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input searched-user))
   common-lisp:nil))
(common-lisp:deftype segment-confidence () 'common-lisp:single-float)
(common-lisp:progn
 (common-lisp:defclass segment-detection common-lisp:nil
                       ((type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or segment-type common-lisp:null)
                         :accessor struct-shape-segment-detection-type :shape
                         "SegmentType" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (start-timestamp-millis :initarg
                         :start-timestamp-millis :initform common-lisp:nil
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         struct-shape-segment-detection-start-timestamp-millis
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (end-timestamp-millis :initarg :end-timestamp-millis
                         :initform common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-segment-detection-end-timestamp-millis
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (duration-millis :initarg :duration-millis :initform
                         common-lisp:nil :type
                         (common-lisp:or ulong common-lisp:null) :accessor
                         struct-shape-segment-detection-duration-millis :shape
                         "ULong" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (start-timecode-smpte :initarg :start-timecode-smpte
                         :initform common-lisp:nil :type
                         (common-lisp:or timecode common-lisp:null) :accessor
                         struct-shape-segment-detection-start-timecode-smpte
                         :shape "Timecode" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (end-timecode-smpte :initarg :end-timecode-smpte
                         :initform common-lisp:nil :type
                         (common-lisp:or timecode common-lisp:null) :accessor
                         struct-shape-segment-detection-end-timecode-smpte
                         :shape "Timecode" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (duration-smpte :initarg :duration-smpte :initform
                         common-lisp:nil :type
                         (common-lisp:or timecode common-lisp:null) :accessor
                         struct-shape-segment-detection-duration-smpte :shape
                         "Timecode" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (technical-cue-segment :initarg :technical-cue-segment
                         :initform common-lisp:nil :type
                         (common-lisp:or technical-cue-segment
                                         common-lisp:null)
                         :accessor
                         struct-shape-segment-detection-technical-cue-segment
                         :shape "TechnicalCueSegment" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (shot-segment :initarg :shot-segment :initform
                         common-lisp:nil :type
                         (common-lisp:or shot-segment common-lisp:null)
                         :accessor struct-shape-segment-detection-shot-segment
                         :shape "ShotSegment" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (start-frame-number :initarg :start-frame-number
                         :initform common-lisp:nil :type
                         (common-lisp:or ulong common-lisp:null) :accessor
                         struct-shape-segment-detection-start-frame-number
                         :shape "ULong" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (end-frame-number :initarg :end-frame-number :initform
                         common-lisp:nil :type
                         (common-lisp:or ulong common-lisp:null) :accessor
                         struct-shape-segment-detection-end-frame-number :shape
                         "ULong" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (duration-frames :initarg :duration-frames :initform
                         common-lisp:nil :type
                         (common-lisp:or ulong common-lisp:null) :accessor
                         struct-shape-segment-detection-duration-frames :shape
                         "ULong" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-segment-detection
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'segment-detection
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'segment-detection 'make-segment-detection))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input segment-detection))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input segment-detection))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'start-timestamp-millis))
      (common-lisp:list
       (common-lisp:cons "StartTimestampMillis"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'end-timestamp-millis))
      (common-lisp:list
       (common-lisp:cons "EndTimestampMillis"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'duration-millis))
      (common-lisp:list
       (common-lisp:cons "DurationMillis"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'start-timecode-smpte))
      (common-lisp:list
       (common-lisp:cons "StartTimecodeSMPTE"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-timecode-smpte))
      (common-lisp:list
       (common-lisp:cons "EndTimecodeSMPTE"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'duration-smpte))
      (common-lisp:list
       (common-lisp:cons "DurationSMPTE"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'technical-cue-segment))
      (common-lisp:list
       (common-lisp:cons "TechnicalCueSegment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'shot-segment))
      (common-lisp:list
       (common-lisp:cons "ShotSegment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-frame-number))
      (common-lisp:list
       (common-lisp:cons "StartFrameNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-frame-number))
      (common-lisp:list
       (common-lisp:cons "EndFrameNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'duration-frames))
      (common-lisp:list
       (common-lisp:cons "DurationFrames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input segment-detection))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype segment-detections ()
   '(trivial-types:proper-list segment-detection))
 (common-lisp:defun make-segment-detections
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list segment-detection))
   aws-sdk/generator/shape::members))
(common-lisp:deftype segment-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass segment-type-info common-lisp:nil
                       ((type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or segment-type common-lisp:null)
                         :accessor struct-shape-segment-type-info-type :shape
                         "SegmentType" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (model-version :initarg :model-version :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-segment-type-info-model-version :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-segment-type-info
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'segment-type-info
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'segment-type-info 'make-segment-type-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input segment-type-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input segment-type-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-version))
      (common-lisp:list
       (common-lisp:cons "ModelVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input segment-type-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype segment-types ()
   '(trivial-types:proper-list segment-type))
 (common-lisp:defun make-segment-types
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list segment-type))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype segment-types-info ()
   '(trivial-types:proper-list segment-type-info))
 (common-lisp:defun make-segment-types-info
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list segment-type-info))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition service-quota-exceeded-exception
     (rekognition-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'service-quota-exceeded-exception)))
(common-lisp:progn
 (common-lisp:define-condition session-not-found-exception
     (rekognition-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'session-not-found-exception)))
(common-lisp:progn
 (common-lisp:defclass shot-segment common-lisp:nil
                       ((index :initarg :index :initform common-lisp:nil :type
                         (common-lisp:or ulong common-lisp:null) :accessor
                         struct-shape-shot-segment-index :shape "ULong"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (confidence :initarg :confidence :initform
                         common-lisp:nil :type
                         (common-lisp:or segment-confidence common-lisp:null)
                         :accessor struct-shape-shot-segment-confidence :shape
                         "SegmentConfidence" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-shot-segment
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'shot-segment
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'shot-segment 'make-shot-segment))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input shot-segment))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input shot-segment))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'index))
      (common-lisp:list
       (common-lisp:cons "Index"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'confidence))
      (common-lisp:list
       (common-lisp:cons "Confidence"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input shot-segment))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass smile common-lisp:nil
                       ((value :initarg :value :initform common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-smile-value :shape "Boolean" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (confidence :initarg :confidence :initform
                         common-lisp:nil :type
                         (common-lisp:or percent common-lisp:null) :accessor
                         struct-shape-smile-confidence :shape "Percent"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-smile
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'smile
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'smile 'make-smile))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input smile))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input smile))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'confidence))
      (common-lisp:list
       (common-lisp:cons "Confidence"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input smile))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-celebrity-recognition-request common-lisp:nil
                       ((video :initarg :video :initform
                         (common-lisp:error ":video is required") :type
                         (common-lisp:or video common-lisp:null) :accessor
                         struct-shape-start-celebrity-recognition-request-video
                         :shape "Video" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (client-request-token :initarg :client-request-token
                         :initform common-lisp:nil :type
                         (common-lisp:or client-request-token common-lisp:null)
                         :accessor
                         struct-shape-start-celebrity-recognition-request-client-request-token
                         :shape "ClientRequestToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (notification-channel :initarg :notification-channel
                         :initform common-lisp:nil :type
                         (common-lisp:or notification-channel common-lisp:null)
                         :accessor
                         struct-shape-start-celebrity-recognition-request-notification-channel
                         :shape "NotificationChannel" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (job-tag :initarg :job-tag :initform common-lisp:nil
                         :type (common-lisp:or job-tag common-lisp:null)
                         :accessor
                         struct-shape-start-celebrity-recognition-request-job-tag
                         :shape "JobTag" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-celebrity-recognition-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-celebrity-recognition-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-celebrity-recognition-request
                    'make-start-celebrity-recognition-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-celebrity-recognition-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-celebrity-recognition-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'video))
      (common-lisp:list
       (common-lisp:cons "Video"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "ClientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'notification-channel))
      (common-lisp:list
       (common-lisp:cons "NotificationChannel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-tag))
      (common-lisp:list
       (common-lisp:cons "JobTag"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-celebrity-recognition-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-celebrity-recognition-response common-lisp:nil
                       ((job-id :initarg :job-id :initform common-lisp:nil
                         :type (common-lisp:or job-id common-lisp:null)
                         :accessor
                         struct-shape-start-celebrity-recognition-response-job-id
                         :shape "JobId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-celebrity-recognition-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-celebrity-recognition-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-celebrity-recognition-response
                    'make-start-celebrity-recognition-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-celebrity-recognition-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-celebrity-recognition-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "JobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-celebrity-recognition-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-content-moderation-request common-lisp:nil
                       ((video :initarg :video :initform
                         (common-lisp:error ":video is required") :type
                         (common-lisp:or video common-lisp:null) :accessor
                         struct-shape-start-content-moderation-request-video
                         :shape "Video" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (min-confidence :initarg :min-confidence :initform
                         common-lisp:nil :type
                         (common-lisp:or percent common-lisp:null) :accessor
                         struct-shape-start-content-moderation-request-min-confidence
                         :shape "Percent" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (client-request-token :initarg :client-request-token
                         :initform common-lisp:nil :type
                         (common-lisp:or client-request-token common-lisp:null)
                         :accessor
                         struct-shape-start-content-moderation-request-client-request-token
                         :shape "ClientRequestToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (notification-channel :initarg :notification-channel
                         :initform common-lisp:nil :type
                         (common-lisp:or notification-channel common-lisp:null)
                         :accessor
                         struct-shape-start-content-moderation-request-notification-channel
                         :shape "NotificationChannel" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (job-tag :initarg :job-tag :initform common-lisp:nil
                         :type (common-lisp:or job-tag common-lisp:null)
                         :accessor
                         struct-shape-start-content-moderation-request-job-tag
                         :shape "JobTag" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-content-moderation-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-content-moderation-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-content-moderation-request
                    'make-start-content-moderation-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-content-moderation-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-content-moderation-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'video))
      (common-lisp:list
       (common-lisp:cons "Video"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'min-confidence))
      (common-lisp:list
       (common-lisp:cons "MinConfidence"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "ClientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'notification-channel))
      (common-lisp:list
       (common-lisp:cons "NotificationChannel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-tag))
      (common-lisp:list
       (common-lisp:cons "JobTag"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-content-moderation-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-content-moderation-response common-lisp:nil
                       ((job-id :initarg :job-id :initform common-lisp:nil
                         :type (common-lisp:or job-id common-lisp:null)
                         :accessor
                         struct-shape-start-content-moderation-response-job-id
                         :shape "JobId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-content-moderation-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-content-moderation-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-content-moderation-response
                    'make-start-content-moderation-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-content-moderation-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-content-moderation-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "JobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-content-moderation-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-face-detection-request common-lisp:nil
                       ((video :initarg :video :initform
                         (common-lisp:error ":video is required") :type
                         (common-lisp:or video common-lisp:null) :accessor
                         struct-shape-start-face-detection-request-video :shape
                         "Video" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (client-request-token :initarg :client-request-token
                         :initform common-lisp:nil :type
                         (common-lisp:or client-request-token common-lisp:null)
                         :accessor
                         struct-shape-start-face-detection-request-client-request-token
                         :shape "ClientRequestToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (notification-channel :initarg :notification-channel
                         :initform common-lisp:nil :type
                         (common-lisp:or notification-channel common-lisp:null)
                         :accessor
                         struct-shape-start-face-detection-request-notification-channel
                         :shape "NotificationChannel" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (face-attributes :initarg :face-attributes :initform
                         common-lisp:nil :type
                         (common-lisp:or face-attributes common-lisp:null)
                         :accessor
                         struct-shape-start-face-detection-request-face-attributes
                         :shape "FaceAttributes" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (job-tag :initarg :job-tag :initform common-lisp:nil
                         :type (common-lisp:or job-tag common-lisp:null)
                         :accessor
                         struct-shape-start-face-detection-request-job-tag
                         :shape "JobTag" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-face-detection-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'start-face-detection-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-face-detection-request
                    'make-start-face-detection-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-face-detection-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-face-detection-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'video))
      (common-lisp:list
       (common-lisp:cons "Video"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "ClientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'notification-channel))
      (common-lisp:list
       (common-lisp:cons "NotificationChannel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'face-attributes))
      (common-lisp:list
       (common-lisp:cons "FaceAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-tag))
      (common-lisp:list
       (common-lisp:cons "JobTag"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-face-detection-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-face-detection-response common-lisp:nil
                       ((job-id :initarg :job-id :initform common-lisp:nil
                         :type (common-lisp:or job-id common-lisp:null)
                         :accessor
                         struct-shape-start-face-detection-response-job-id
                         :shape "JobId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-face-detection-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-face-detection-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-face-detection-response
                    'make-start-face-detection-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-face-detection-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-face-detection-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "JobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-face-detection-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-face-search-request common-lisp:nil
                       ((video :initarg :video :initform
                         (common-lisp:error ":video is required") :type
                         (common-lisp:or video common-lisp:null) :accessor
                         struct-shape-start-face-search-request-video :shape
                         "Video" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (client-request-token :initarg :client-request-token
                         :initform common-lisp:nil :type
                         (common-lisp:or client-request-token common-lisp:null)
                         :accessor
                         struct-shape-start-face-search-request-client-request-token
                         :shape "ClientRequestToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (face-match-threshold :initarg :face-match-threshold
                         :initform common-lisp:nil :type
                         (common-lisp:or percent common-lisp:null) :accessor
                         struct-shape-start-face-search-request-face-match-threshold
                         :shape "Percent" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (collection-id :initarg :collection-id :initform
                         (common-lisp:error ":collection-id is required") :type
                         (common-lisp:or collection-id common-lisp:null)
                         :accessor
                         struct-shape-start-face-search-request-collection-id
                         :shape "CollectionId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (notification-channel :initarg :notification-channel
                         :initform common-lisp:nil :type
                         (common-lisp:or notification-channel common-lisp:null)
                         :accessor
                         struct-shape-start-face-search-request-notification-channel
                         :shape "NotificationChannel" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (job-tag :initarg :job-tag :initform common-lisp:nil
                         :type (common-lisp:or job-tag common-lisp:null)
                         :accessor
                         struct-shape-start-face-search-request-job-tag :shape
                         "JobTag" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-face-search-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'start-face-search-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-face-search-request
                    'make-start-face-search-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-face-search-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-face-search-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'video))
      (common-lisp:list
       (common-lisp:cons "Video"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "ClientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'face-match-threshold))
      (common-lisp:list
       (common-lisp:cons "FaceMatchThreshold"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'collection-id))
      (common-lisp:list
       (common-lisp:cons "CollectionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'notification-channel))
      (common-lisp:list
       (common-lisp:cons "NotificationChannel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-tag))
      (common-lisp:list
       (common-lisp:cons "JobTag"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-face-search-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-face-search-response common-lisp:nil
                       ((job-id :initarg :job-id :initform common-lisp:nil
                         :type (common-lisp:or job-id common-lisp:null)
                         :accessor
                         struct-shape-start-face-search-response-job-id :shape
                         "JobId" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-face-search-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'start-face-search-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-face-search-response
                    'make-start-face-search-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-face-search-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-face-search-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "JobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-face-search-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-label-detection-request common-lisp:nil
                       ((video :initarg :video :initform
                         (common-lisp:error ":video is required") :type
                         (common-lisp:or video common-lisp:null) :accessor
                         struct-shape-start-label-detection-request-video
                         :shape "Video" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (client-request-token :initarg :client-request-token
                         :initform common-lisp:nil :type
                         (common-lisp:or client-request-token common-lisp:null)
                         :accessor
                         struct-shape-start-label-detection-request-client-request-token
                         :shape "ClientRequestToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (min-confidence :initarg :min-confidence :initform
                         common-lisp:nil :type
                         (common-lisp:or percent common-lisp:null) :accessor
                         struct-shape-start-label-detection-request-min-confidence
                         :shape "Percent" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (notification-channel :initarg :notification-channel
                         :initform common-lisp:nil :type
                         (common-lisp:or notification-channel common-lisp:null)
                         :accessor
                         struct-shape-start-label-detection-request-notification-channel
                         :shape "NotificationChannel" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (job-tag :initarg :job-tag :initform common-lisp:nil
                         :type (common-lisp:or job-tag common-lisp:null)
                         :accessor
                         struct-shape-start-label-detection-request-job-tag
                         :shape "JobTag" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (features :initarg :features :initform common-lisp:nil
                         :type
                         (common-lisp:or label-detection-feature-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-start-label-detection-request-features
                         :shape "LabelDetectionFeatureList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (settings :initarg :settings :initform common-lisp:nil
                         :type
                         (common-lisp:or label-detection-settings
                                         common-lisp:null)
                         :accessor
                         struct-shape-start-label-detection-request-settings
                         :shape "LabelDetectionSettings" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-label-detection-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-label-detection-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-label-detection-request
                    'make-start-label-detection-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-label-detection-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-label-detection-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'video))
      (common-lisp:list
       (common-lisp:cons "Video"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "ClientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'min-confidence))
      (common-lisp:list
       (common-lisp:cons "MinConfidence"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'notification-channel))
      (common-lisp:list
       (common-lisp:cons "NotificationChannel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-tag))
      (common-lisp:list
       (common-lisp:cons "JobTag"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'features))
      (common-lisp:list
       (common-lisp:cons "Features"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'settings))
      (common-lisp:list
       (common-lisp:cons "Settings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-label-detection-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-label-detection-response common-lisp:nil
                       ((job-id :initarg :job-id :initform common-lisp:nil
                         :type (common-lisp:or job-id common-lisp:null)
                         :accessor
                         struct-shape-start-label-detection-response-job-id
                         :shape "JobId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-label-detection-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-label-detection-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-label-detection-response
                    'make-start-label-detection-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-label-detection-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-label-detection-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "JobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-label-detection-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-media-analysis-job-request common-lisp:nil
                       ((client-request-token :initarg :client-request-token
                         :initform common-lisp:nil :type
                         (common-lisp:or client-request-token common-lisp:null)
                         :accessor
                         struct-shape-start-media-analysis-job-request-client-request-token
                         :shape "ClientRequestToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (job-name :initarg :job-name :initform common-lisp:nil
                         :type
                         (common-lisp:or media-analysis-job-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-start-media-analysis-job-request-job-name
                         :shape "MediaAnalysisJobName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (operations-config :initarg :operations-config
                         :initform
                         (common-lisp:error ":operations-config is required")
                         :type
                         (common-lisp:or media-analysis-operations-config
                                         common-lisp:null)
                         :accessor
                         struct-shape-start-media-analysis-job-request-operations-config
                         :shape "MediaAnalysisOperationsConfig" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (input :initarg :input :initform
                         (common-lisp:error ":input is required") :type
                         (common-lisp:or media-analysis-input common-lisp:null)
                         :accessor
                         struct-shape-start-media-analysis-job-request-input
                         :shape "MediaAnalysisInput" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (output-config :initarg :output-config :initform
                         (common-lisp:error ":output-config is required") :type
                         (common-lisp:or media-analysis-output-config
                                         common-lisp:null)
                         :accessor
                         struct-shape-start-media-analysis-job-request-output-config
                         :shape "MediaAnalysisOutputConfig" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (kms-key-id :initarg :kms-key-id :initform
                         common-lisp:nil :type
                         (common-lisp:or kms-key-id common-lisp:null) :accessor
                         struct-shape-start-media-analysis-job-request-kms-key-id
                         :shape "KmsKeyId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-media-analysis-job-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-media-analysis-job-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-media-analysis-job-request
                    'make-start-media-analysis-job-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-media-analysis-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-media-analysis-job-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "ClientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-name))
      (common-lisp:list
       (common-lisp:cons "JobName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operations-config))
      (common-lisp:list
       (common-lisp:cons "OperationsConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input))
      (common-lisp:list
       (common-lisp:cons "Input"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-config))
      (common-lisp:list
       (common-lisp:cons "OutputConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "KmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-media-analysis-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-media-analysis-job-response common-lisp:nil
                       ((job-id :initarg :job-id :initform
                         (common-lisp:error ":job-id is required") :type
                         (common-lisp:or media-analysis-job-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-start-media-analysis-job-response-job-id
                         :shape "MediaAnalysisJobId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-media-analysis-job-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-media-analysis-job-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-media-analysis-job-response
                    'make-start-media-analysis-job-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-media-analysis-job-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-media-analysis-job-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "JobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-media-analysis-job-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-person-tracking-request common-lisp:nil
                       ((video :initarg :video :initform
                         (common-lisp:error ":video is required") :type
                         (common-lisp:or video common-lisp:null) :accessor
                         struct-shape-start-person-tracking-request-video
                         :shape "Video" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (client-request-token :initarg :client-request-token
                         :initform common-lisp:nil :type
                         (common-lisp:or client-request-token common-lisp:null)
                         :accessor
                         struct-shape-start-person-tracking-request-client-request-token
                         :shape "ClientRequestToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (notification-channel :initarg :notification-channel
                         :initform common-lisp:nil :type
                         (common-lisp:or notification-channel common-lisp:null)
                         :accessor
                         struct-shape-start-person-tracking-request-notification-channel
                         :shape "NotificationChannel" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (job-tag :initarg :job-tag :initform common-lisp:nil
                         :type (common-lisp:or job-tag common-lisp:null)
                         :accessor
                         struct-shape-start-person-tracking-request-job-tag
                         :shape "JobTag" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-person-tracking-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-person-tracking-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-person-tracking-request
                    'make-start-person-tracking-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-person-tracking-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-person-tracking-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'video))
      (common-lisp:list
       (common-lisp:cons "Video"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "ClientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'notification-channel))
      (common-lisp:list
       (common-lisp:cons "NotificationChannel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-tag))
      (common-lisp:list
       (common-lisp:cons "JobTag"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-person-tracking-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-person-tracking-response common-lisp:nil
                       ((job-id :initarg :job-id :initform common-lisp:nil
                         :type (common-lisp:or job-id common-lisp:null)
                         :accessor
                         struct-shape-start-person-tracking-response-job-id
                         :shape "JobId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-person-tracking-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-person-tracking-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-person-tracking-response
                    'make-start-person-tracking-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-person-tracking-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-person-tracking-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "JobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-person-tracking-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-project-version-request common-lisp:nil
                       ((project-version-arn :initarg :project-version-arn
                         :initform
                         (common-lisp:error ":project-version-arn is required")
                         :type
                         (common-lisp:or project-version-arn common-lisp:null)
                         :accessor
                         struct-shape-start-project-version-request-project-version-arn
                         :shape "ProjectVersionArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (min-inference-units :initarg :min-inference-units
                         :initform
                         (common-lisp:error ":min-inference-units is required")
                         :type
                         (common-lisp:or inference-units common-lisp:null)
                         :accessor
                         struct-shape-start-project-version-request-min-inference-units
                         :shape "InferenceUnits" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-inference-units :initarg :max-inference-units
                         :initform common-lisp:nil :type
                         (common-lisp:or inference-units common-lisp:null)
                         :accessor
                         struct-shape-start-project-version-request-max-inference-units
                         :shape "InferenceUnits" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-project-version-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-project-version-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-project-version-request
                    'make-start-project-version-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-project-version-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-project-version-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'project-version-arn))
      (common-lisp:list
       (common-lisp:cons "ProjectVersionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'min-inference-units))
      (common-lisp:list
       (common-lisp:cons "MinInferenceUnits"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-inference-units))
      (common-lisp:list
       (common-lisp:cons "MaxInferenceUnits"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-project-version-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-project-version-response common-lisp:nil
                       ((status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or project-version-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-start-project-version-response-status
                         :shape "ProjectVersionStatus" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-project-version-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-project-version-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-project-version-response
                    'make-start-project-version-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-project-version-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-project-version-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-project-version-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-segment-detection-filters common-lisp:nil
                       ((technical-cue-filter :initarg :technical-cue-filter
                         :initform common-lisp:nil :type
                         (common-lisp:or start-technical-cue-detection-filter
                                         common-lisp:null)
                         :accessor
                         struct-shape-start-segment-detection-filters-technical-cue-filter
                         :shape "StartTechnicalCueDetectionFilter" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (shot-filter :initarg :shot-filter :initform
                         common-lisp:nil :type
                         (common-lisp:or start-shot-detection-filter
                                         common-lisp:null)
                         :accessor
                         struct-shape-start-segment-detection-filters-shot-filter
                         :shape "StartShotDetectionFilter" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-segment-detection-filters
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-segment-detection-filters
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-segment-detection-filters
                    'make-start-segment-detection-filters))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-segment-detection-filters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-segment-detection-filters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'technical-cue-filter))
      (common-lisp:list
       (common-lisp:cons "TechnicalCueFilter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'shot-filter))
      (common-lisp:list
       (common-lisp:cons "ShotFilter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-segment-detection-filters))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-segment-detection-request common-lisp:nil
                       ((video :initarg :video :initform
                         (common-lisp:error ":video is required") :type
                         (common-lisp:or video common-lisp:null) :accessor
                         struct-shape-start-segment-detection-request-video
                         :shape "Video" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (client-request-token :initarg :client-request-token
                         :initform common-lisp:nil :type
                         (common-lisp:or client-request-token common-lisp:null)
                         :accessor
                         struct-shape-start-segment-detection-request-client-request-token
                         :shape "ClientRequestToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (notification-channel :initarg :notification-channel
                         :initform common-lisp:nil :type
                         (common-lisp:or notification-channel common-lisp:null)
                         :accessor
                         struct-shape-start-segment-detection-request-notification-channel
                         :shape "NotificationChannel" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (job-tag :initarg :job-tag :initform common-lisp:nil
                         :type (common-lisp:or job-tag common-lisp:null)
                         :accessor
                         struct-shape-start-segment-detection-request-job-tag
                         :shape "JobTag" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (filters :initarg :filters :initform common-lisp:nil
                         :type
                         (common-lisp:or start-segment-detection-filters
                                         common-lisp:null)
                         :accessor
                         struct-shape-start-segment-detection-request-filters
                         :shape "StartSegmentDetectionFilters" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (segment-types :initarg :segment-types :initform
                         (common-lisp:error ":segment-types is required") :type
                         (common-lisp:or segment-types common-lisp:null)
                         :accessor
                         struct-shape-start-segment-detection-request-segment-types
                         :shape "SegmentTypes" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-segment-detection-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-segment-detection-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-segment-detection-request
                    'make-start-segment-detection-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-segment-detection-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-segment-detection-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'video))
      (common-lisp:list
       (common-lisp:cons "Video"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "ClientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'notification-channel))
      (common-lisp:list
       (common-lisp:cons "NotificationChannel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-tag))
      (common-lisp:list
       (common-lisp:cons "JobTag"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'segment-types))
      (common-lisp:list
       (common-lisp:cons "SegmentTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-segment-detection-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-segment-detection-response common-lisp:nil
                       ((job-id :initarg :job-id :initform common-lisp:nil
                         :type (common-lisp:or job-id common-lisp:null)
                         :accessor
                         struct-shape-start-segment-detection-response-job-id
                         :shape "JobId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-segment-detection-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-segment-detection-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-segment-detection-response
                    'make-start-segment-detection-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-segment-detection-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-segment-detection-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "JobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-segment-detection-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-shot-detection-filter common-lisp:nil
                       ((min-segment-confidence :initarg
                         :min-segment-confidence :initform common-lisp:nil
                         :type
                         (common-lisp:or segment-confidence common-lisp:null)
                         :accessor
                         struct-shape-start-shot-detection-filter-min-segment-confidence
                         :shape "SegmentConfidence" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-shot-detection-filter
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'start-shot-detection-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-shot-detection-filter
                    'make-start-shot-detection-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-shot-detection-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-shot-detection-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'min-segment-confidence))
      (common-lisp:list
       (common-lisp:cons "MinSegmentConfidence"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-shot-detection-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-stream-processor-request common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or stream-processor-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-start-stream-processor-request-name
                         :shape "StreamProcessorName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (start-selector :initarg :start-selector :initform
                         common-lisp:nil :type
                         (common-lisp:or stream-processing-start-selector
                                         common-lisp:null)
                         :accessor
                         struct-shape-start-stream-processor-request-start-selector
                         :shape "StreamProcessingStartSelector" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (stop-selector :initarg :stop-selector :initform
                         common-lisp:nil :type
                         (common-lisp:or stream-processing-stop-selector
                                         common-lisp:null)
                         :accessor
                         struct-shape-start-stream-processor-request-stop-selector
                         :shape "StreamProcessingStopSelector" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-stream-processor-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-stream-processor-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-stream-processor-request
                    'make-start-stream-processor-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-stream-processor-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-stream-processor-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-selector))
      (common-lisp:list
       (common-lisp:cons "StartSelector"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stop-selector))
      (common-lisp:list
       (common-lisp:cons "StopSelector"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-stream-processor-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-stream-processor-response common-lisp:nil
                       ((session-id :initarg :session-id :initform
                         common-lisp:nil :type
                         (common-lisp:or start-stream-processor-session-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-start-stream-processor-response-session-id
                         :shape "StartStreamProcessorSessionId" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-stream-processor-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-stream-processor-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-stream-processor-response
                    'make-start-stream-processor-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-stream-processor-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-stream-processor-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session-id))
      (common-lisp:list
       (common-lisp:cons "SessionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-stream-processor-response))
   common-lisp:nil))
(common-lisp:deftype start-stream-processor-session-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass start-technical-cue-detection-filter common-lisp:nil
                       ((min-segment-confidence :initarg
                         :min-segment-confidence :initform common-lisp:nil
                         :type
                         (common-lisp:or segment-confidence common-lisp:null)
                         :accessor
                         struct-shape-start-technical-cue-detection-filter-min-segment-confidence
                         :shape "SegmentConfidence" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (black-frame :initarg :black-frame :initform
                         common-lisp:nil :type
                         (common-lisp:or black-frame common-lisp:null)
                         :accessor
                         struct-shape-start-technical-cue-detection-filter-black-frame
                         :shape "BlackFrame" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-technical-cue-detection-filter
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-technical-cue-detection-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-technical-cue-detection-filter
                    'make-start-technical-cue-detection-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-technical-cue-detection-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-technical-cue-detection-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'min-segment-confidence))
      (common-lisp:list
       (common-lisp:cons "MinSegmentConfidence"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'black-frame))
      (common-lisp:list
       (common-lisp:cons "BlackFrame"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-technical-cue-detection-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-text-detection-filters common-lisp:nil
                       ((word-filter :initarg :word-filter :initform
                         common-lisp:nil :type
                         (common-lisp:or detection-filter common-lisp:null)
                         :accessor
                         struct-shape-start-text-detection-filters-word-filter
                         :shape "DetectionFilter" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (regions-of-interest :initarg :regions-of-interest
                         :initform common-lisp:nil :type
                         (common-lisp:or regions-of-interest common-lisp:null)
                         :accessor
                         struct-shape-start-text-detection-filters-regions-of-interest
                         :shape "RegionsOfInterest" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-text-detection-filters
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'start-text-detection-filters
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-text-detection-filters
                    'make-start-text-detection-filters))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-text-detection-filters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-text-detection-filters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'word-filter))
      (common-lisp:list
       (common-lisp:cons "WordFilter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'regions-of-interest))
      (common-lisp:list
       (common-lisp:cons "RegionsOfInterest"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-text-detection-filters))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-text-detection-request common-lisp:nil
                       ((video :initarg :video :initform
                         (common-lisp:error ":video is required") :type
                         (common-lisp:or video common-lisp:null) :accessor
                         struct-shape-start-text-detection-request-video :shape
                         "Video" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (client-request-token :initarg :client-request-token
                         :initform common-lisp:nil :type
                         (common-lisp:or client-request-token common-lisp:null)
                         :accessor
                         struct-shape-start-text-detection-request-client-request-token
                         :shape "ClientRequestToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (notification-channel :initarg :notification-channel
                         :initform common-lisp:nil :type
                         (common-lisp:or notification-channel common-lisp:null)
                         :accessor
                         struct-shape-start-text-detection-request-notification-channel
                         :shape "NotificationChannel" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (job-tag :initarg :job-tag :initform common-lisp:nil
                         :type (common-lisp:or job-tag common-lisp:null)
                         :accessor
                         struct-shape-start-text-detection-request-job-tag
                         :shape "JobTag" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (filters :initarg :filters :initform common-lisp:nil
                         :type
                         (common-lisp:or start-text-detection-filters
                                         common-lisp:null)
                         :accessor
                         struct-shape-start-text-detection-request-filters
                         :shape "StartTextDetectionFilters" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-text-detection-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'start-text-detection-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-text-detection-request
                    'make-start-text-detection-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-text-detection-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-text-detection-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'video))
      (common-lisp:list
       (common-lisp:cons "Video"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "ClientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'notification-channel))
      (common-lisp:list
       (common-lisp:cons "NotificationChannel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-tag))
      (common-lisp:list
       (common-lisp:cons "JobTag"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-text-detection-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-text-detection-response common-lisp:nil
                       ((job-id :initarg :job-id :initform common-lisp:nil
                         :type (common-lisp:or job-id common-lisp:null)
                         :accessor
                         struct-shape-start-text-detection-response-job-id
                         :shape "JobId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-text-detection-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-text-detection-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-text-detection-response
                    'make-start-text-detection-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-text-detection-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-text-detection-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "JobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-text-detection-response))
   common-lisp:nil))
(common-lisp:deftype status-message () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass stop-project-version-request common-lisp:nil
                       ((project-version-arn :initarg :project-version-arn
                         :initform
                         (common-lisp:error ":project-version-arn is required")
                         :type
                         (common-lisp:or project-version-arn common-lisp:null)
                         :accessor
                         struct-shape-stop-project-version-request-project-version-arn
                         :shape "ProjectVersionArn" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-stop-project-version-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'stop-project-version-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'stop-project-version-request
                    'make-stop-project-version-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-project-version-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-project-version-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'project-version-arn))
      (common-lisp:list
       (common-lisp:cons "ProjectVersionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-project-version-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass stop-project-version-response common-lisp:nil
                       ((status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or project-version-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-stop-project-version-response-status
                         :shape "ProjectVersionStatus" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-stop-project-version-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'stop-project-version-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'stop-project-version-response
                    'make-stop-project-version-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-project-version-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-project-version-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-project-version-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass stop-stream-processor-request common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or stream-processor-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-stop-stream-processor-request-name :shape
                         "StreamProcessorName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-stop-stream-processor-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'stop-stream-processor-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'stop-stream-processor-request
                    'make-stop-stream-processor-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-stream-processor-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-stream-processor-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-stream-processor-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass stop-stream-processor-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-stop-stream-processor-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'stop-stream-processor-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'stop-stream-processor-response
                    'make-stop-stream-processor-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-stream-processor-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-stream-processor-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-stream-processor-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass stream-processing-start-selector common-lisp:nil
                       ((kvsstream-start-selector :initarg
                         :kvsstream-start-selector :initform common-lisp:nil
                         :type
                         (common-lisp:or kinesis-video-stream-start-selector
                                         common-lisp:null)
                         :accessor
                         struct-shape-stream-processing-start-selector-kvsstream-start-selector
                         :shape "KinesisVideoStreamStartSelector" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-stream-processing-start-selector
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'stream-processing-start-selector
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'stream-processing-start-selector
                    'make-stream-processing-start-selector))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stream-processing-start-selector))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stream-processing-start-selector))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'kvsstream-start-selector))
      (common-lisp:list
       (common-lisp:cons "KVSStreamStartSelector"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stream-processing-start-selector))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass stream-processing-stop-selector common-lisp:nil
                       ((max-duration-in-seconds :initarg
                         :max-duration-in-seconds :initform common-lisp:nil
                         :type
                         (common-lisp:or max-duration-in-seconds-ulong
                                         common-lisp:null)
                         :accessor
                         struct-shape-stream-processing-stop-selector-max-duration-in-seconds
                         :shape "MaxDurationInSecondsULong" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-stream-processing-stop-selector
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'stream-processing-stop-selector
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'stream-processing-stop-selector
                    'make-stream-processing-stop-selector))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stream-processing-stop-selector))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stream-processing-stop-selector))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'max-duration-in-seconds))
      (common-lisp:list
       (common-lisp:cons "MaxDurationInSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stream-processing-stop-selector))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass stream-processor common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or stream-processor-name
                                         common-lisp:null)
                         :accessor struct-shape-stream-processor-name :shape
                         "StreamProcessorName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or stream-processor-status
                                         common-lisp:null)
                         :accessor struct-shape-stream-processor-status :shape
                         "StreamProcessorStatus" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-stream-processor
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'stream-processor
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'stream-processor 'make-stream-processor))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input stream-processor))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input stream-processor))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input stream-processor))
   common-lisp:nil))
(common-lisp:deftype stream-processor-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass stream-processor-data-sharing-preference common-lisp:nil
                       ((opt-in :initarg :opt-in :initform
                         (common-lisp:error ":opt-in is required") :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-stream-processor-data-sharing-preference-opt-in
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-stream-processor-data-sharing-preference
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'stream-processor-data-sharing-preference
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'stream-processor-data-sharing-preference
                    'make-stream-processor-data-sharing-preference))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stream-processor-data-sharing-preference))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stream-processor-data-sharing-preference))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'opt-in))
      (common-lisp:list
       (common-lisp:cons "OptIn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stream-processor-data-sharing-preference))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass stream-processor-input common-lisp:nil
                       ((kinesis-video-stream :initarg :kinesis-video-stream
                         :initform common-lisp:nil :type
                         (common-lisp:or kinesis-video-stream common-lisp:null)
                         :accessor
                         struct-shape-stream-processor-input-kinesis-video-stream
                         :shape "KinesisVideoStream" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-stream-processor-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'stream-processor-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'stream-processor-input 'make-stream-processor-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stream-processor-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stream-processor-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'kinesis-video-stream))
      (common-lisp:list
       (common-lisp:cons "KinesisVideoStream"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stream-processor-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype stream-processor-list ()
   '(trivial-types:proper-list stream-processor))
 (common-lisp:defun make-stream-processor-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list stream-processor))
   aws-sdk/generator/shape::members))
(common-lisp:deftype stream-processor-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass stream-processor-notification-channel common-lisp:nil
                       ((snstopic-arn :initarg :snstopic-arn :initform
                         (common-lisp:error ":snstopic-arn is required") :type
                         (common-lisp:or snstopic-arn common-lisp:null)
                         :accessor
                         struct-shape-stream-processor-notification-channel-snstopic-arn
                         :shape "SNSTopicArn" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-stream-processor-notification-channel
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'stream-processor-notification-channel
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'stream-processor-notification-channel
                    'make-stream-processor-notification-channel))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stream-processor-notification-channel))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stream-processor-notification-channel))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snstopic-arn))
      (common-lisp:list
       (common-lisp:cons "SNSTopicArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stream-processor-notification-channel))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass stream-processor-output common-lisp:nil
                       ((kinesis-data-stream :initarg :kinesis-data-stream
                         :initform common-lisp:nil :type
                         (common-lisp:or kinesis-data-stream common-lisp:null)
                         :accessor
                         struct-shape-stream-processor-output-kinesis-data-stream
                         :shape "KinesisDataStream" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (s3destination :initarg :s3destination :initform
                         common-lisp:nil :type
                         (common-lisp:or s3destination common-lisp:null)
                         :accessor
                         struct-shape-stream-processor-output-s3destination
                         :shape "S3Destination" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-stream-processor-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'stream-processor-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'stream-processor-output 'make-stream-processor-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stream-processor-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stream-processor-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kinesis-data-stream))
      (common-lisp:list
       (common-lisp:cons "KinesisDataStream"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3destination))
      (common-lisp:list
       (common-lisp:cons "S3Destination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stream-processor-output))
   common-lisp:nil))
(common-lisp:deftype stream-processor-parameter-to-delete ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype stream-processor-parameters-to-delete ()
   '(trivial-types:proper-list stream-processor-parameter-to-delete))
 (common-lisp:defun make-stream-processor-parameters-to-delete
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            stream-processor-parameter-to-delete))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass stream-processor-settings common-lisp:nil
                       ((face-search :initarg :face-search :initform
                         common-lisp:nil :type
                         (common-lisp:or face-search-settings common-lisp:null)
                         :accessor
                         struct-shape-stream-processor-settings-face-search
                         :shape "FaceSearchSettings" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (connected-home :initarg :connected-home :initform
                         common-lisp:nil :type
                         (common-lisp:or connected-home-settings
                                         common-lisp:null)
                         :accessor
                         struct-shape-stream-processor-settings-connected-home
                         :shape "ConnectedHomeSettings" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-stream-processor-settings
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'stream-processor-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'stream-processor-settings
                    'make-stream-processor-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stream-processor-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stream-processor-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'face-search))
      (common-lisp:list
       (common-lisp:cons "FaceSearch"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connected-home))
      (common-lisp:list
       (common-lisp:cons "ConnectedHome"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stream-processor-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass stream-processor-settings-for-update common-lisp:nil
                       ((connected-home-for-update :initarg
                         :connected-home-for-update :initform common-lisp:nil
                         :type
                         (common-lisp:or connected-home-settings-for-update
                                         common-lisp:null)
                         :accessor
                         struct-shape-stream-processor-settings-for-update-connected-home-for-update
                         :shape "ConnectedHomeSettingsForUpdate" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-stream-processor-settings-for-update
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'stream-processor-settings-for-update
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'stream-processor-settings-for-update
                    'make-stream-processor-settings-for-update))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stream-processor-settings-for-update))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stream-processor-settings-for-update))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'connected-home-for-update))
      (common-lisp:list
       (common-lisp:cons "ConnectedHomeForUpdate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stream-processor-settings-for-update))
   common-lisp:nil))
(common-lisp:deftype stream-processor-status () 'common-lisp:string)
(common-lisp:deftype string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass summary common-lisp:nil
                       ((s3object :initarg :s3object :initform common-lisp:nil
                         :type (common-lisp:or s3object common-lisp:null)
                         :accessor struct-shape-summary-s3object :shape
                         "S3Object" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'summary 'make-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3object))
      (common-lisp:list
       (common-lisp:cons "S3Object"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass sunglasses common-lisp:nil
                       ((value :initarg :value :initform common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-sunglasses-value :shape "Boolean"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (confidence :initarg :confidence :initform
                         common-lisp:nil :type
                         (common-lisp:or percent common-lisp:null) :accessor
                         struct-shape-sunglasses-confidence :shape "Percent"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-sunglasses
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'sunglasses
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'sunglasses 'make-sunglasses))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input sunglasses))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input sunglasses))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'confidence))
      (common-lisp:list
       (common-lisp:cons "Confidence"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input sunglasses))
   common-lisp:nil))
(common-lisp:deftype tag-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tag-key-list () '(trivial-types:proper-list tag-key))
 (common-lisp:defun make-tag-key-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype tag-map () 'common-lisp:hash-table)
 (common-lisp:defun make-tag-map (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defclass tag-resource-request common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resource-arn is required") :type
                         (common-lisp:or resource-arn common-lisp:null)
                         :accessor
                         struct-shape-tag-resource-request-resource-arn :shape
                         "ResourceArn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (tags :initarg :tags :initform
                         (common-lisp:error ":tags is required") :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         struct-shape-tag-resource-request-tags :shape "TagMap"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tag-resource-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'tag-resource-request 'make-tag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass tag-resource-response common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tag-resource-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'tag-resource-response 'make-tag-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   common-lisp:nil))
(common-lisp:deftype tag-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass technical-cue-segment common-lisp:nil
                       ((type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or technical-cue-type common-lisp:null)
                         :accessor struct-shape-technical-cue-segment-type
                         :shape "TechnicalCueType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (confidence :initarg :confidence :initform
                         common-lisp:nil :type
                         (common-lisp:or segment-confidence common-lisp:null)
                         :accessor
                         struct-shape-technical-cue-segment-confidence :shape
                         "SegmentConfidence" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-technical-cue-segment
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'technical-cue-segment
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'technical-cue-segment 'make-technical-cue-segment))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          technical-cue-segment))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          technical-cue-segment))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'confidence))
      (common-lisp:list
       (common-lisp:cons "Confidence"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          technical-cue-segment))
   common-lisp:nil))
(common-lisp:deftype technical-cue-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass testing-data common-lisp:nil
                       ((assets :initarg :assets :initform common-lisp:nil
                         :type (common-lisp:or assets common-lisp:null)
                         :accessor struct-shape-testing-data-assets :shape
                         "Assets" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (auto-create :initarg :auto-create :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-testing-data-auto-create :shape "Boolean"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-testing-data
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'testing-data
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'testing-data 'make-testing-data))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input testing-data))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input testing-data))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'assets))
      (common-lisp:list
       (common-lisp:cons "Assets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auto-create))
      (common-lisp:list
       (common-lisp:cons "AutoCreate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input testing-data))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass testing-data-result common-lisp:nil
                       ((input :initarg :input :initform common-lisp:nil :type
                         (common-lisp:or testing-data common-lisp:null)
                         :accessor struct-shape-testing-data-result-input
                         :shape "TestingData" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (output :initarg :output :initform common-lisp:nil
                         :type (common-lisp:or testing-data common-lisp:null)
                         :accessor struct-shape-testing-data-result-output
                         :shape "TestingData" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (validation :initarg :validation :initform
                         common-lisp:nil :type
                         (common-lisp:or validation-data common-lisp:null)
                         :accessor struct-shape-testing-data-result-validation
                         :shape "ValidationData" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-testing-data-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'testing-data-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'testing-data-result 'make-testing-data-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input testing-data-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input testing-data-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input))
      (common-lisp:list
       (common-lisp:cons "Input"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output))
      (common-lisp:list
       (common-lisp:cons "Output"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'validation))
      (common-lisp:list
       (common-lisp:cons "Validation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input testing-data-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass text-detection common-lisp:nil
                       ((detected-text :initarg :detected-text :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-text-detection-detected-text :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or text-types common-lisp:null) :accessor
                         struct-shape-text-detection-type :shape "TextTypes"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (id :initarg :id :initform common-lisp:nil :type
                         (common-lisp:or uinteger common-lisp:null) :accessor
                         struct-shape-text-detection-id :shape "UInteger"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (parent-id :initarg :parent-id :initform
                         common-lisp:nil :type
                         (common-lisp:or uinteger common-lisp:null) :accessor
                         struct-shape-text-detection-parent-id :shape
                         "UInteger" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (confidence :initarg :confidence :initform
                         common-lisp:nil :type
                         (common-lisp:or percent common-lisp:null) :accessor
                         struct-shape-text-detection-confidence :shape
                         "Percent" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (geometry :initarg :geometry :initform common-lisp:nil
                         :type (common-lisp:or geometry common-lisp:null)
                         :accessor struct-shape-text-detection-geometry :shape
                         "Geometry" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-text-detection
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'text-detection
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'text-detection 'make-text-detection))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input text-detection))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input text-detection))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'detected-text))
      (common-lisp:list
       (common-lisp:cons "DetectedText"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parent-id))
      (common-lisp:list
       (common-lisp:cons "ParentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'confidence))
      (common-lisp:list
       (common-lisp:cons "Confidence"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'geometry))
      (common-lisp:list
       (common-lisp:cons "Geometry"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input text-detection))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype text-detection-list ()
   '(trivial-types:proper-list text-detection))
 (common-lisp:defun make-text-detection-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list text-detection))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass text-detection-result common-lisp:nil
                       ((timestamp :initarg :timestamp :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-text-detection-result-timestamp :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (text-detection :initarg :text-detection :initform
                         common-lisp:nil :type
                         (common-lisp:or text-detection common-lisp:null)
                         :accessor
                         struct-shape-text-detection-result-text-detection
                         :shape "TextDetection" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-text-detection-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'text-detection-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'text-detection-result 'make-text-detection-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          text-detection-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          text-detection-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timestamp))
      (common-lisp:list
       (common-lisp:cons "Timestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'text-detection))
      (common-lisp:list
       (common-lisp:cons "TextDetection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          text-detection-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype text-detection-results ()
   '(trivial-types:proper-list text-detection-result))
 (common-lisp:defun make-text-detection-results
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list text-detection-result))
   aws-sdk/generator/shape::members))
(common-lisp:deftype text-types () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition throttling-exception
     (rekognition-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'throttling-exception)))
(common-lisp:deftype timecode () 'common-lisp:string)
(common-lisp:deftype timestamp () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass training-data common-lisp:nil
                       ((assets :initarg :assets :initform common-lisp:nil
                         :type (common-lisp:or assets common-lisp:null)
                         :accessor struct-shape-training-data-assets :shape
                         "Assets" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-training-data
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'training-data
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'training-data 'make-training-data))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input training-data))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input training-data))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'assets))
      (common-lisp:list
       (common-lisp:cons "Assets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input training-data))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass training-data-result common-lisp:nil
                       ((input :initarg :input :initform common-lisp:nil :type
                         (common-lisp:or training-data common-lisp:null)
                         :accessor struct-shape-training-data-result-input
                         :shape "TrainingData" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (output :initarg :output :initform common-lisp:nil
                         :type (common-lisp:or training-data common-lisp:null)
                         :accessor struct-shape-training-data-result-output
                         :shape "TrainingData" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (validation :initarg :validation :initform
                         common-lisp:nil :type
                         (common-lisp:or validation-data common-lisp:null)
                         :accessor struct-shape-training-data-result-validation
                         :shape "ValidationData" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-training-data-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'training-data-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'training-data-result 'make-training-data-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input training-data-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input training-data-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input))
      (common-lisp:list
       (common-lisp:cons "Input"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output))
      (common-lisp:list
       (common-lisp:cons "Output"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'validation))
      (common-lisp:list
       (common-lisp:cons "Validation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input training-data-result))
   common-lisp:nil))
(common-lisp:deftype uinteger () 'common-lisp:integer)
(common-lisp:deftype ulong () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass unindexed-face common-lisp:nil
                       ((reasons :initarg :reasons :initform common-lisp:nil
                         :type (common-lisp:or reasons common-lisp:null)
                         :accessor struct-shape-unindexed-face-reasons :shape
                         "Reasons" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (face-detail :initarg :face-detail :initform
                         common-lisp:nil :type
                         (common-lisp:or face-detail common-lisp:null)
                         :accessor struct-shape-unindexed-face-face-detail
                         :shape "FaceDetail" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-unindexed-face
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'unindexed-face
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'unindexed-face 'make-unindexed-face))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input unindexed-face))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input unindexed-face))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reasons))
      (common-lisp:list
       (common-lisp:cons "Reasons"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'face-detail))
      (common-lisp:list
       (common-lisp:cons "FaceDetail"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input unindexed-face))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype unindexed-faces ()
   '(trivial-types:proper-list unindexed-face))
 (common-lisp:defun make-unindexed-faces
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list unindexed-face))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass unsearched-face common-lisp:nil
                       ((face-details :initarg :face-details :initform
                         common-lisp:nil :type
                         (common-lisp:or face-detail common-lisp:null)
                         :accessor struct-shape-unsearched-face-face-details
                         :shape "FaceDetail" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (reasons :initarg :reasons :initform common-lisp:nil
                         :type
                         (common-lisp:or unsearched-face-reasons
                                         common-lisp:null)
                         :accessor struct-shape-unsearched-face-reasons :shape
                         "UnsearchedFaceReasons" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-unsearched-face
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'unsearched-face
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'unsearched-face 'make-unsearched-face))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input unsearched-face))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input unsearched-face))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'face-details))
      (common-lisp:list
       (common-lisp:cons "FaceDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reasons))
      (common-lisp:list
       (common-lisp:cons "Reasons"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input unsearched-face))
   common-lisp:nil))
(common-lisp:deftype unsearched-face-reason () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype unsearched-face-reasons ()
   '(trivial-types:proper-list unsearched-face-reason))
 (common-lisp:defun make-unsearched-face-reasons
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list unsearched-face-reason))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype unsearched-faces-list ()
   '(trivial-types:proper-list unsearched-face))
 (common-lisp:defun make-unsearched-faces-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list unsearched-face))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass unsuccessful-face-association common-lisp:nil
                       ((face-id :initarg :face-id :initform common-lisp:nil
                         :type (common-lisp:or face-id common-lisp:null)
                         :accessor
                         struct-shape-unsuccessful-face-association-face-id
                         :shape "FaceId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (user-id :initarg :user-id :initform common-lisp:nil
                         :type (common-lisp:or user-id common-lisp:null)
                         :accessor
                         struct-shape-unsuccessful-face-association-user-id
                         :shape "UserId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (confidence :initarg :confidence :initform
                         common-lisp:nil :type
                         (common-lisp:or percent common-lisp:null) :accessor
                         struct-shape-unsuccessful-face-association-confidence
                         :shape "Percent" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (reasons :initarg :reasons :initform common-lisp:nil
                         :type
                         (common-lisp:or unsuccessful-face-association-reasons
                                         common-lisp:null)
                         :accessor
                         struct-shape-unsuccessful-face-association-reasons
                         :shape "UnsuccessfulFaceAssociationReasons" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-unsuccessful-face-association
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'unsuccessful-face-association
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'unsuccessful-face-association
                    'make-unsuccessful-face-association))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          unsuccessful-face-association))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          unsuccessful-face-association))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'face-id))
      (common-lisp:list
       (common-lisp:cons "FaceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-id))
      (common-lisp:list
       (common-lisp:cons "UserId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'confidence))
      (common-lisp:list
       (common-lisp:cons "Confidence"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reasons))
      (common-lisp:list
       (common-lisp:cons "Reasons"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          unsuccessful-face-association))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype unsuccessful-face-association-list ()
   '(trivial-types:proper-list unsuccessful-face-association))
 (common-lisp:defun make-unsuccessful-face-association-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            unsuccessful-face-association))
   aws-sdk/generator/shape::members))
(common-lisp:deftype unsuccessful-face-association-reason ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype unsuccessful-face-association-reasons ()
   '(trivial-types:proper-list unsuccessful-face-association-reason))
 (common-lisp:defun make-unsuccessful-face-association-reasons
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            unsuccessful-face-association-reason))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass unsuccessful-face-deletion common-lisp:nil
                       ((face-id :initarg :face-id :initform common-lisp:nil
                         :type (common-lisp:or face-id common-lisp:null)
                         :accessor
                         struct-shape-unsuccessful-face-deletion-face-id :shape
                         "FaceId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (user-id :initarg :user-id :initform common-lisp:nil
                         :type (common-lisp:or user-id common-lisp:null)
                         :accessor
                         struct-shape-unsuccessful-face-deletion-user-id :shape
                         "UserId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (reasons :initarg :reasons :initform common-lisp:nil
                         :type
                         (common-lisp:or unsuccessful-face-deletion-reasons
                                         common-lisp:null)
                         :accessor
                         struct-shape-unsuccessful-face-deletion-reasons :shape
                         "UnsuccessfulFaceDeletionReasons" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-unsuccessful-face-deletion
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'unsuccessful-face-deletion
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'unsuccessful-face-deletion
                    'make-unsuccessful-face-deletion))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          unsuccessful-face-deletion))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          unsuccessful-face-deletion))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'face-id))
      (common-lisp:list
       (common-lisp:cons "FaceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-id))
      (common-lisp:list
       (common-lisp:cons "UserId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reasons))
      (common-lisp:list
       (common-lisp:cons "Reasons"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          unsuccessful-face-deletion))
   common-lisp:nil))
(common-lisp:deftype unsuccessful-face-deletion-reason () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype unsuccessful-face-deletion-reasons ()
   '(trivial-types:proper-list unsuccessful-face-deletion-reason))
 (common-lisp:defun make-unsuccessful-face-deletion-reasons
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            unsuccessful-face-deletion-reason))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype unsuccessful-face-deletions-list ()
   '(trivial-types:proper-list unsuccessful-face-deletion))
 (common-lisp:defun make-unsuccessful-face-deletions-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            unsuccessful-face-deletion))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass unsuccessful-face-disassociation common-lisp:nil
                       ((face-id :initarg :face-id :initform common-lisp:nil
                         :type (common-lisp:or face-id common-lisp:null)
                         :accessor
                         struct-shape-unsuccessful-face-disassociation-face-id
                         :shape "FaceId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (user-id :initarg :user-id :initform common-lisp:nil
                         :type (common-lisp:or user-id common-lisp:null)
                         :accessor
                         struct-shape-unsuccessful-face-disassociation-user-id
                         :shape "UserId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (reasons :initarg :reasons :initform common-lisp:nil
                         :type
                         (common-lisp:or
                          unsuccessful-face-disassociation-reasons
                          common-lisp:null)
                         :accessor
                         struct-shape-unsuccessful-face-disassociation-reasons
                         :shape "UnsuccessfulFaceDisassociationReasons"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-unsuccessful-face-disassociation
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'unsuccessful-face-disassociation
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'unsuccessful-face-disassociation
                    'make-unsuccessful-face-disassociation))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          unsuccessful-face-disassociation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          unsuccessful-face-disassociation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'face-id))
      (common-lisp:list
       (common-lisp:cons "FaceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-id))
      (common-lisp:list
       (common-lisp:cons "UserId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reasons))
      (common-lisp:list
       (common-lisp:cons "Reasons"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          unsuccessful-face-disassociation))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype unsuccessful-face-disassociation-list ()
   '(trivial-types:proper-list unsuccessful-face-disassociation))
 (common-lisp:defun make-unsuccessful-face-disassociation-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            unsuccessful-face-disassociation))
   aws-sdk/generator/shape::members))
(common-lisp:deftype unsuccessful-face-disassociation-reason ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype unsuccessful-face-disassociation-reasons ()
   '(trivial-types:proper-list unsuccessful-face-disassociation-reason))
 (common-lisp:defun make-unsuccessful-face-disassociation-reasons
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            unsuccessful-face-disassociation-reason))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass untag-resource-request common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resource-arn is required") :type
                         (common-lisp:or resource-arn common-lisp:null)
                         :accessor
                         struct-shape-untag-resource-request-resource-arn
                         :shape "ResourceArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tag-keys :initarg :tag-keys :initform
                         (common-lisp:error ":tag-keys is required") :type
                         (common-lisp:or tag-key-list common-lisp:null)
                         :accessor struct-shape-untag-resource-request-tag-keys
                         :shape "TagKeyList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-untag-resource-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'untag-resource-request 'make-untag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-keys))
      (common-lisp:list
       (common-lisp:cons "TagKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass untag-resource-response common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-untag-resource-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'untag-resource-response 'make-untag-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-dataset-entries-request common-lisp:nil
                       ((dataset-arn :initarg :dataset-arn :initform
                         (common-lisp:error ":dataset-arn is required") :type
                         (common-lisp:or dataset-arn common-lisp:null)
                         :accessor
                         struct-shape-update-dataset-entries-request-dataset-arn
                         :shape "DatasetArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (changes :initarg :changes :initform
                         (common-lisp:error ":changes is required") :type
                         (common-lisp:or dataset-changes common-lisp:null)
                         :accessor
                         struct-shape-update-dataset-entries-request-changes
                         :shape "DatasetChanges" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-dataset-entries-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-dataset-entries-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-dataset-entries-request
                    'make-update-dataset-entries-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-dataset-entries-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-dataset-entries-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dataset-arn))
      (common-lisp:list
       (common-lisp:cons "DatasetArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'changes))
      (common-lisp:list
       (common-lisp:cons "Changes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-dataset-entries-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-dataset-entries-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-dataset-entries-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-dataset-entries-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-dataset-entries-response
                    'make-update-dataset-entries-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-dataset-entries-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-dataset-entries-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-dataset-entries-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-stream-processor-request common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or stream-processor-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-stream-processor-request-name
                         :shape "StreamProcessorName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (settings-for-update :initarg :settings-for-update
                         :initform common-lisp:nil :type
                         (common-lisp:or stream-processor-settings-for-update
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-stream-processor-request-settings-for-update
                         :shape "StreamProcessorSettingsForUpdate" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (regions-of-interest-for-update :initarg
                         :regions-of-interest-for-update :initform
                         common-lisp:nil :type
                         (common-lisp:or regions-of-interest common-lisp:null)
                         :accessor
                         struct-shape-update-stream-processor-request-regions-of-interest-for-update
                         :shape "RegionsOfInterest" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (data-sharing-preference-for-update :initarg
                         :data-sharing-preference-for-update :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          stream-processor-data-sharing-preference
                          common-lisp:null)
                         :accessor
                         struct-shape-update-stream-processor-request-data-sharing-preference-for-update
                         :shape "StreamProcessorDataSharingPreference"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (parameters-to-delete :initarg :parameters-to-delete
                         :initform common-lisp:nil :type
                         (common-lisp:or stream-processor-parameters-to-delete
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-stream-processor-request-parameters-to-delete
                         :shape "StreamProcessorParametersToDelete" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-stream-processor-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-stream-processor-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-stream-processor-request
                    'make-update-stream-processor-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-stream-processor-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-stream-processor-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'settings-for-update))
      (common-lisp:list
       (common-lisp:cons "SettingsForUpdate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'regions-of-interest-for-update))
      (common-lisp:list
       (common-lisp:cons "RegionsOfInterestForUpdate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-sharing-preference-for-update))
      (common-lisp:list
       (common-lisp:cons "DataSharingPreferenceForUpdate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'parameters-to-delete))
      (common-lisp:list
       (common-lisp:cons "ParametersToDelete"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-stream-processor-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-stream-processor-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-stream-processor-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-stream-processor-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-stream-processor-response
                    'make-update-stream-processor-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-stream-processor-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-stream-processor-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-stream-processor-response))
   common-lisp:nil))
(common-lisp:deftype url () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype urls () '(trivial-types:proper-list url))
 (common-lisp:defun make-urls
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list url))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass user common-lisp:nil
                       ((user-id :initarg :user-id :initform common-lisp:nil
                         :type (common-lisp:or user-id common-lisp:null)
                         :accessor struct-shape-user-user-id :shape "UserId"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (user-status :initarg :user-status :initform
                         common-lisp:nil :type
                         (common-lisp:or user-status common-lisp:null)
                         :accessor struct-shape-user-user-status :shape
                         "UserStatus" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-user (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'user
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'user 'make-user))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input user))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input user))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-id))
      (common-lisp:list
       (common-lisp:cons "UserId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-status))
      (common-lisp:list
       (common-lisp:cons "UserStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input user))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype user-face-id-list ()
   '(trivial-types:proper-list face-id))
 (common-lisp:defun make-user-face-id-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list face-id))
   aws-sdk/generator/shape::members))
(common-lisp:deftype user-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype user-list () '(trivial-types:proper-list user))
 (common-lisp:defun make-user-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list user))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass user-match common-lisp:nil
                       ((similarity :initarg :similarity :initform
                         common-lisp:nil :type
                         (common-lisp:or percent common-lisp:null) :accessor
                         struct-shape-user-match-similarity :shape "Percent"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (user :initarg :user :initform common-lisp:nil :type
                         (common-lisp:or matched-user common-lisp:null)
                         :accessor struct-shape-user-match-user :shape
                         "MatchedUser" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-user-match
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'user-match
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'user-match 'make-user-match))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input user-match))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input user-match))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'similarity))
      (common-lisp:list
       (common-lisp:cons "Similarity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user))
      (common-lisp:list
       (common-lisp:cons "User"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input user-match))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype user-match-list ()
   '(trivial-types:proper-list user-match))
 (common-lisp:defun make-user-match-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list user-match))
   aws-sdk/generator/shape::members))
(common-lisp:deftype user-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass validation-data common-lisp:nil
                       ((assets :initarg :assets :initform common-lisp:nil
                         :type (common-lisp:or assets common-lisp:null)
                         :accessor struct-shape-validation-data-assets :shape
                         "Assets" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-validation-data
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'validation-data
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'validation-data 'make-validation-data))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input validation-data))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input validation-data))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'assets))
      (common-lisp:list
       (common-lisp:cons "Assets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input validation-data))
   common-lisp:nil))
(common-lisp:deftype version-description () 'common-lisp:string)
(common-lisp:deftype version-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype version-names ()
   '(trivial-types:proper-list version-name))
 (common-lisp:defun make-version-names
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list version-name))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass video common-lisp:nil
                       ((s3object :initarg :s3object :initform common-lisp:nil
                         :type (common-lisp:or s3object common-lisp:null)
                         :accessor struct-shape-video-s3object :shape
                         "S3Object" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-video
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'video
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'video 'make-video))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input video))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input video))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3object))
      (common-lisp:list
       (common-lisp:cons "S3Object"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input video))
   common-lisp:nil))
(common-lisp:deftype video-color-range () 'common-lisp:string)
(common-lisp:deftype video-job-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass video-metadata common-lisp:nil
                       ((codec :initarg :codec :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-video-metadata-codec :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (duration-millis :initarg :duration-millis :initform
                         common-lisp:nil :type
                         (common-lisp:or ulong common-lisp:null) :accessor
                         struct-shape-video-metadata-duration-millis :shape
                         "ULong" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (format :initarg :format :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-video-metadata-format :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (frame-rate :initarg :frame-rate :initform
                         common-lisp:nil :type
                         (common-lisp:or float common-lisp:null) :accessor
                         struct-shape-video-metadata-frame-rate :shape "Float"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (frame-height :initarg :frame-height :initform
                         common-lisp:nil :type
                         (common-lisp:or ulong common-lisp:null) :accessor
                         struct-shape-video-metadata-frame-height :shape
                         "ULong" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (frame-width :initarg :frame-width :initform
                         common-lisp:nil :type
                         (common-lisp:or ulong common-lisp:null) :accessor
                         struct-shape-video-metadata-frame-width :shape "ULong"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (color-range :initarg :color-range :initform
                         common-lisp:nil :type
                         (common-lisp:or video-color-range common-lisp:null)
                         :accessor struct-shape-video-metadata-color-range
                         :shape "VideoColorRange" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-video-metadata
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'video-metadata
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'video-metadata 'make-video-metadata))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input video-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input video-metadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'codec))
      (common-lisp:list
       (common-lisp:cons "Codec"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'duration-millis))
      (common-lisp:list
       (common-lisp:cons "DurationMillis"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'format))
      (common-lisp:list
       (common-lisp:cons "Format"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'frame-rate))
      (common-lisp:list
       (common-lisp:cons "FrameRate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'frame-height))
      (common-lisp:list
       (common-lisp:cons "FrameHeight"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'frame-width))
      (common-lisp:list
       (common-lisp:cons "FrameWidth"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'color-range))
      (common-lisp:list
       (common-lisp:cons "ColorRange"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input video-metadata))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype video-metadata-list ()
   '(trivial-types:proper-list video-metadata))
 (common-lisp:defun make-video-metadata-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list video-metadata))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition video-too-large-exception
     (rekognition-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'video-too-large-exception)))
(common-lisp:progn
 (common-lisp:defun associate-faces
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key collection-id user-id face-ids
                     user-match-threshold client-request-token)
   (common-lisp:declare
    (common-lisp:ignorable collection-id user-id face-ids user-match-threshold
     client-request-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-associate-faces-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rekognition-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "AssociateFaces"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'associate-faces))
(common-lisp:progn
 (common-lisp:defun compare-faces
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key source-image target-image
                     similarity-threshold quality-filter)
   (common-lisp:declare
    (common-lisp:ignorable source-image target-image similarity-threshold
     quality-filter))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-compare-faces-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rekognition-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CompareFaces"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'compare-faces))
(common-lisp:progn
 (common-lisp:defun copy-project-version
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key source-project-arn
                     source-project-version-arn destination-project-arn
                     version-name output-config tags kms-key-id)
   (common-lisp:declare
    (common-lisp:ignorable source-project-arn source-project-version-arn
     destination-project-arn version-name output-config tags kms-key-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-copy-project-version-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rekognition-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CopyProjectVersion"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'copy-project-version))
(common-lisp:progn
 (common-lisp:defun create-collection
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key collection-id tags)
   (common-lisp:declare (common-lisp:ignorable collection-id tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-collection-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rekognition-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateCollection"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-collection))
(common-lisp:progn
 (common-lisp:defun create-dataset
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dataset-source dataset-type project-arn)
   (common-lisp:declare
    (common-lisp:ignorable dataset-source dataset-type project-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-dataset-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rekognition-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateDataset"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-dataset))
(common-lisp:progn
 (common-lisp:defun create-face-liveness-session
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key kms-key-id settings client-request-token)
   (common-lisp:declare
    (common-lisp:ignorable kms-key-id settings client-request-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-face-liveness-session-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rekognition-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateFaceLivenessSession"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-face-liveness-session))
(common-lisp:progn
 (common-lisp:defun create-project
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key project-name feature auto-update)
   (common-lisp:declare
    (common-lisp:ignorable project-name feature auto-update))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-project-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rekognition-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateProject"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-project))
(common-lisp:progn
 (common-lisp:defun create-project-version
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key project-arn version-name output-config
                     training-data testing-data tags kms-key-id
                     version-description feature-config)
   (common-lisp:declare
    (common-lisp:ignorable project-arn version-name output-config training-data
     testing-data tags kms-key-id version-description feature-config))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-project-version-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rekognition-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateProjectVersion"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-project-version))
(common-lisp:progn
 (common-lisp:defun create-stream-processor
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key input output name settings role-arn tags
                     notification-channel kms-key-id regions-of-interest
                     data-sharing-preference)
   (common-lisp:declare
    (common-lisp:ignorable input output name settings role-arn tags
     notification-channel kms-key-id regions-of-interest
     data-sharing-preference))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-stream-processor-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rekognition-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateStreamProcessor"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-stream-processor))
(common-lisp:progn
 (common-lisp:defun create-user
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key collection-id user-id
                     client-request-token)
   (common-lisp:declare
    (common-lisp:ignorable collection-id user-id client-request-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-user-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rekognition-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateUser"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-user))
(common-lisp:progn
 (common-lisp:defun delete-collection
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key collection-id)
   (common-lisp:declare (common-lisp:ignorable collection-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-collection-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rekognition-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteCollection"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-collection))
(common-lisp:progn
 (common-lisp:defun delete-dataset
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dataset-arn)
   (common-lisp:declare (common-lisp:ignorable dataset-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-dataset-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rekognition-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteDataset"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-dataset))
(common-lisp:progn
 (common-lisp:defun delete-faces
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key collection-id face-ids)
   (common-lisp:declare (common-lisp:ignorable collection-id face-ids))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-faces-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rekognition-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteFaces"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-faces))
(common-lisp:progn
 (common-lisp:defun delete-project
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key project-arn)
   (common-lisp:declare (common-lisp:ignorable project-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-project-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rekognition-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteProject"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-project))
(common-lisp:progn
 (common-lisp:defun delete-project-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key project-arn policy-name
                     policy-revision-id)
   (common-lisp:declare
    (common-lisp:ignorable project-arn policy-name policy-revision-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-project-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rekognition-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteProjectPolicy"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-project-policy))
(common-lisp:progn
 (common-lisp:defun delete-project-version
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key project-version-arn)
   (common-lisp:declare (common-lisp:ignorable project-version-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-project-version-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rekognition-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteProjectVersion"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-project-version))
(common-lisp:progn
 (common-lisp:defun delete-stream-processor
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name)
   (common-lisp:declare (common-lisp:ignorable name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-stream-processor-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rekognition-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteStreamProcessor"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-stream-processor))
(common-lisp:progn
 (common-lisp:defun delete-user
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key collection-id user-id
                     client-request-token)
   (common-lisp:declare
    (common-lisp:ignorable collection-id user-id client-request-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-user-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rekognition-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteUser"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-user))
(common-lisp:progn
 (common-lisp:defun describe-collection
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key collection-id)
   (common-lisp:declare (common-lisp:ignorable collection-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-collection-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rekognition-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeCollection"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-collection))
(common-lisp:progn
 (common-lisp:defun describe-dataset
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dataset-arn)
   (common-lisp:declare (common-lisp:ignorable dataset-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-dataset-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rekognition-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeDataset"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-dataset))
(common-lisp:progn
 (common-lisp:defun describe-project-versions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key project-arn version-names next-token
                     max-results)
   (common-lisp:declare
    (common-lisp:ignorable project-arn version-names next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-project-versions-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rekognition-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeProjectVersions"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-project-versions))
(common-lisp:progn
 (common-lisp:defun describe-projects
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results project-names
                     features)
   (common-lisp:declare
    (common-lisp:ignorable next-token max-results project-names features))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-projects-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rekognition-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeProjects"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-projects))
(common-lisp:progn
 (common-lisp:defun describe-stream-processor
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name)
   (common-lisp:declare (common-lisp:ignorable name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-stream-processor-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rekognition-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeStreamProcessor"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-stream-processor))
(common-lisp:progn
 (common-lisp:defun detect-custom-labels
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key project-version-arn image max-results
                     min-confidence)
   (common-lisp:declare
    (common-lisp:ignorable project-version-arn image max-results
     min-confidence))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-detect-custom-labels-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rekognition-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DetectCustomLabels"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'detect-custom-labels))
(common-lisp:progn
 (common-lisp:defun detect-faces
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key image attributes)
   (common-lisp:declare (common-lisp:ignorable image attributes))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-detect-faces-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rekognition-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DetectFaces"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'detect-faces))
(common-lisp:progn
 (common-lisp:defun detect-labels
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key image max-labels min-confidence features
                     settings)
   (common-lisp:declare
    (common-lisp:ignorable image max-labels min-confidence features settings))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-detect-labels-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rekognition-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DetectLabels"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'detect-labels))
(common-lisp:progn
 (common-lisp:defun detect-moderation-labels
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key image min-confidence human-loop-config
                     project-version)
   (common-lisp:declare
    (common-lisp:ignorable image min-confidence human-loop-config
     project-version))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-detect-moderation-labels-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rekognition-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DetectModerationLabels"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'detect-moderation-labels))
(common-lisp:progn
 (common-lisp:defun detect-protective-equipment
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key image summarization-attributes)
   (common-lisp:declare (common-lisp:ignorable image summarization-attributes))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-detect-protective-equipment-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rekognition-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DetectProtectiveEquipment"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'detect-protective-equipment))
(common-lisp:progn
 (common-lisp:defun detect-text
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key image filters)
   (common-lisp:declare (common-lisp:ignorable image filters))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-detect-text-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rekognition-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DetectText"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'detect-text))
(common-lisp:progn
 (common-lisp:defun disassociate-faces
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key collection-id user-id
                     client-request-token face-ids)
   (common-lisp:declare
    (common-lisp:ignorable collection-id user-id client-request-token
     face-ids))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-disassociate-faces-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rekognition-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DisassociateFaces"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'disassociate-faces))
(common-lisp:progn
 (common-lisp:defun distribute-dataset-entries
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key datasets)
   (common-lisp:declare (common-lisp:ignorable datasets))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-distribute-dataset-entries-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rekognition-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DistributeDatasetEntries"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'distribute-dataset-entries))
(common-lisp:progn
 (common-lisp:defun get-celebrity-info
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id)
   (common-lisp:declare (common-lisp:ignorable id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-celebrity-info-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rekognition-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetCelebrityInfo"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-celebrity-info))
(common-lisp:progn
 (common-lisp:defun get-celebrity-recognition
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job-id max-results next-token sort-by)
   (common-lisp:declare
    (common-lisp:ignorable job-id max-results next-token sort-by))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-celebrity-recognition-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rekognition-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetCelebrityRecognition"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-celebrity-recognition))
(common-lisp:progn
 (common-lisp:defun get-content-moderation
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job-id max-results next-token sort-by
                     aggregate-by)
   (common-lisp:declare
    (common-lisp:ignorable job-id max-results next-token sort-by aggregate-by))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-content-moderation-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rekognition-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetContentModeration"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-content-moderation))
(common-lisp:progn
 (common-lisp:defun get-face-detection
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job-id max-results next-token)
   (common-lisp:declare (common-lisp:ignorable job-id max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-face-detection-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rekognition-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetFaceDetection"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-face-detection))
(common-lisp:progn
 (common-lisp:defun get-face-liveness-session-results
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key session-id)
   (common-lisp:declare (common-lisp:ignorable session-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-face-liveness-session-results-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rekognition-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetFaceLivenessSessionResults"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-face-liveness-session-results))
(common-lisp:progn
 (common-lisp:defun get-face-search
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job-id max-results next-token sort-by)
   (common-lisp:declare
    (common-lisp:ignorable job-id max-results next-token sort-by))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-face-search-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rekognition-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetFaceSearch"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-face-search))
(common-lisp:progn
 (common-lisp:defun get-label-detection
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job-id max-results next-token sort-by
                     aggregate-by)
   (common-lisp:declare
    (common-lisp:ignorable job-id max-results next-token sort-by aggregate-by))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-label-detection-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rekognition-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetLabelDetection"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-label-detection))
(common-lisp:progn
 (common-lisp:defun get-media-analysis-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job-id)
   (common-lisp:declare (common-lisp:ignorable job-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-media-analysis-job-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rekognition-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetMediaAnalysisJob"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-media-analysis-job))
(common-lisp:progn
 (common-lisp:defun get-person-tracking
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job-id max-results next-token sort-by)
   (common-lisp:declare
    (common-lisp:ignorable job-id max-results next-token sort-by))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-person-tracking-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rekognition-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetPersonTracking"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-person-tracking))
(common-lisp:progn
 (common-lisp:defun get-segment-detection
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job-id max-results next-token)
   (common-lisp:declare (common-lisp:ignorable job-id max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-segment-detection-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rekognition-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetSegmentDetection"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-segment-detection))
(common-lisp:progn
 (common-lisp:defun get-text-detection
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job-id max-results next-token)
   (common-lisp:declare (common-lisp:ignorable job-id max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-text-detection-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rekognition-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetTextDetection"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-text-detection))
(common-lisp:progn
 (common-lisp:defun index-faces
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key collection-id image external-image-id
                     detection-attributes max-faces quality-filter)
   (common-lisp:declare
    (common-lisp:ignorable collection-id image external-image-id
     detection-attributes max-faces quality-filter))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-index-faces-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rekognition-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "IndexFaces"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'index-faces))
(common-lisp:progn
 (common-lisp:defun list-collections
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results)
   (common-lisp:declare (common-lisp:ignorable next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-collections-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rekognition-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListCollections"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-collections))
(common-lisp:progn
 (common-lisp:defun list-dataset-entries
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dataset-arn contains-labels labeled
                     source-ref-contains has-errors next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable dataset-arn contains-labels labeled
     source-ref-contains has-errors next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-dataset-entries-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rekognition-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListDatasetEntries"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-dataset-entries))
(common-lisp:progn
 (common-lisp:defun list-dataset-labels
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dataset-arn next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable dataset-arn next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-dataset-labels-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rekognition-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListDatasetLabels"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-dataset-labels))
(common-lisp:progn
 (common-lisp:defun list-faces
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key collection-id next-token max-results
                     user-id face-ids)
   (common-lisp:declare
    (common-lisp:ignorable collection-id next-token max-results user-id
     face-ids))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-faces-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rekognition-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListFaces"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-faces))
(common-lisp:progn
 (common-lisp:defun list-media-analysis-jobs
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results)
   (common-lisp:declare (common-lisp:ignorable next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-media-analysis-jobs-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rekognition-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListMediaAnalysisJobs"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-media-analysis-jobs))
(common-lisp:progn
 (common-lisp:defun list-project-policies
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key project-arn next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable project-arn next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-project-policies-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rekognition-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListProjectPolicies"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-project-policies))
(common-lisp:progn
 (common-lisp:defun list-stream-processors
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results)
   (common-lisp:declare (common-lisp:ignorable next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-stream-processors-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rekognition-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListStreamProcessors"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-stream-processors))
(common-lisp:progn
 (common-lisp:defun list-tags-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn)
   (common-lisp:declare (common-lisp:ignorable resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-for-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rekognition-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListTagsForResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-tags-for-resource))
(common-lisp:progn
 (common-lisp:defun list-users
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key collection-id max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable collection-id max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-users-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rekognition-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListUsers"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-users))
(common-lisp:progn
 (common-lisp:defun put-project-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key project-arn policy-name
                     policy-revision-id policy-document)
   (common-lisp:declare
    (common-lisp:ignorable project-arn policy-name policy-revision-id
     policy-document))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-project-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rekognition-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "PutProjectPolicy"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'put-project-policy))
(common-lisp:progn
 (common-lisp:defun recognize-celebrities
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key image)
   (common-lisp:declare (common-lisp:ignorable image))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-recognize-celebrities-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rekognition-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "RecognizeCelebrities"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'recognize-celebrities))
(common-lisp:progn
 (common-lisp:defun search-faces
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key collection-id face-id max-faces
                     face-match-threshold)
   (common-lisp:declare
    (common-lisp:ignorable collection-id face-id max-faces
     face-match-threshold))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-search-faces-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rekognition-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "SearchFaces"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'search-faces))
(common-lisp:progn
 (common-lisp:defun search-faces-by-image
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key collection-id image max-faces
                     face-match-threshold quality-filter)
   (common-lisp:declare
    (common-lisp:ignorable collection-id image max-faces face-match-threshold
     quality-filter))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-search-faces-by-image-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rekognition-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "SearchFacesByImage"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'search-faces-by-image))
(common-lisp:progn
 (common-lisp:defun search-users
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key collection-id user-id face-id
                     user-match-threshold max-users)
   (common-lisp:declare
    (common-lisp:ignorable collection-id user-id face-id user-match-threshold
     max-users))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-search-users-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rekognition-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "SearchUsers"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'search-users))
(common-lisp:progn
 (common-lisp:defun search-users-by-image
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key collection-id image user-match-threshold
                     max-users quality-filter)
   (common-lisp:declare
    (common-lisp:ignorable collection-id image user-match-threshold max-users
     quality-filter))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-search-users-by-image-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rekognition-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "SearchUsersByImage"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'search-users-by-image))
(common-lisp:progn
 (common-lisp:defun start-celebrity-recognition
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key video client-request-token
                     notification-channel job-tag)
   (common-lisp:declare
    (common-lisp:ignorable video client-request-token notification-channel
     job-tag))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-start-celebrity-recognition-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rekognition-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "StartCelebrityRecognition"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'start-celebrity-recognition))
(common-lisp:progn
 (common-lisp:defun start-content-moderation
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key video min-confidence client-request-token
                     notification-channel job-tag)
   (common-lisp:declare
    (common-lisp:ignorable video min-confidence client-request-token
     notification-channel job-tag))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-start-content-moderation-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rekognition-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "StartContentModeration"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'start-content-moderation))
(common-lisp:progn
 (common-lisp:defun start-face-detection
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key video client-request-token
                     notification-channel face-attributes job-tag)
   (common-lisp:declare
    (common-lisp:ignorable video client-request-token notification-channel
     face-attributes job-tag))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-start-face-detection-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rekognition-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "StartFaceDetection"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'start-face-detection))
(common-lisp:progn
 (common-lisp:defun start-face-search
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key video client-request-token
                     face-match-threshold collection-id notification-channel
                     job-tag)
   (common-lisp:declare
    (common-lisp:ignorable video client-request-token face-match-threshold
     collection-id notification-channel job-tag))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-start-face-search-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rekognition-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "StartFaceSearch"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'start-face-search))
(common-lisp:progn
 (common-lisp:defun start-label-detection
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key video client-request-token min-confidence
                     notification-channel job-tag features settings)
   (common-lisp:declare
    (common-lisp:ignorable video client-request-token min-confidence
     notification-channel job-tag features settings))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-start-label-detection-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rekognition-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "StartLabelDetection"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'start-label-detection))
(common-lisp:progn
 (common-lisp:defun start-media-analysis-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-request-token job-name
                     operations-config input output-config kms-key-id)
   (common-lisp:declare
    (common-lisp:ignorable client-request-token job-name operations-config
     input output-config kms-key-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-start-media-analysis-job-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rekognition-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "StartMediaAnalysisJob"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'start-media-analysis-job))
(common-lisp:progn
 (common-lisp:defun start-person-tracking
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key video client-request-token
                     notification-channel job-tag)
   (common-lisp:declare
    (common-lisp:ignorable video client-request-token notification-channel
     job-tag))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-start-person-tracking-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rekognition-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "StartPersonTracking"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'start-person-tracking))
(common-lisp:progn
 (common-lisp:defun start-project-version
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key project-version-arn min-inference-units
                     max-inference-units)
   (common-lisp:declare
    (common-lisp:ignorable project-version-arn min-inference-units
     max-inference-units))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-start-project-version-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rekognition-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "StartProjectVersion"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'start-project-version))
(common-lisp:progn
 (common-lisp:defun start-segment-detection
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key video client-request-token
                     notification-channel job-tag filters segment-types)
   (common-lisp:declare
    (common-lisp:ignorable video client-request-token notification-channel
     job-tag filters segment-types))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-start-segment-detection-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rekognition-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "StartSegmentDetection"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'start-segment-detection))
(common-lisp:progn
 (common-lisp:defun start-stream-processor
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name start-selector stop-selector)
   (common-lisp:declare
    (common-lisp:ignorable name start-selector stop-selector))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-start-stream-processor-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rekognition-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "StartStreamProcessor"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'start-stream-processor))
(common-lisp:progn
 (common-lisp:defun start-text-detection
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key video client-request-token
                     notification-channel job-tag filters)
   (common-lisp:declare
    (common-lisp:ignorable video client-request-token notification-channel
     job-tag filters))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-start-text-detection-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rekognition-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "StartTextDetection"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'start-text-detection))
(common-lisp:progn
 (common-lisp:defun stop-project-version
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key project-version-arn)
   (common-lisp:declare (common-lisp:ignorable project-version-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-stop-project-version-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rekognition-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "StopProjectVersion"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'stop-project-version))
(common-lisp:progn
 (common-lisp:defun stop-stream-processor
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name)
   (common-lisp:declare (common-lisp:ignorable name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-stop-stream-processor-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rekognition-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "StopStreamProcessor"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'stop-stream-processor))
(common-lisp:progn
 (common-lisp:defun tag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tags)
   (common-lisp:declare (common-lisp:ignorable resource-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rekognition-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "TagResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'tag-resource))
(common-lisp:progn
 (common-lisp:defun untag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tag-keys)
   (common-lisp:declare (common-lisp:ignorable resource-arn tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rekognition-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UntagResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'untag-resource))
(common-lisp:progn
 (common-lisp:defun update-dataset-entries
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dataset-arn changes)
   (common-lisp:declare (common-lisp:ignorable dataset-arn changes))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-dataset-entries-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rekognition-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateDatasetEntries"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-dataset-entries))
(common-lisp:progn
 (common-lisp:defun update-stream-processor
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name settings-for-update
                     regions-of-interest-for-update
                     data-sharing-preference-for-update parameters-to-delete)
   (common-lisp:declare
    (common-lisp:ignorable name settings-for-update
     regions-of-interest-for-update data-sharing-preference-for-update
     parameters-to-delete))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-stream-processor-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rekognition-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateStreamProcessor"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-stream-processor))
