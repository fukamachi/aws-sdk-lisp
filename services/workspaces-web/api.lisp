;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(uiop/package:define-package #:aws-sdk/services/workspaces-web/api (:use)
                             (:nicknames #:aws/workspaces-web)
                             (:import-from #:aws-sdk/generator/shape)
                             (:import-from #:aws-sdk/generator/operation)
                             (:import-from #:aws-sdk/api)
                             (:import-from #:aws-sdk/request)
                             (:import-from #:aws-sdk/json-request)
                             (:import-from #:aws-sdk/rest-json-request)
                             (:import-from #:aws-sdk/rest-xml-request)
                             (:import-from #:aws-sdk/query-request)
                             (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/workspaces-web/api)
(common-lisp:progn
 (common-lisp:define-condition workspaces-web-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'workspaces-web-error))
(common-lisp:progn
 (common-lisp:defclass workspaces-web-request
                       (aws-sdk/generator/service::rest-json-request)
                       common-lisp:nil
                       (:default-initargs :service "workspaces-web"
                        :api-version "2020-07-08" :host-prefix "workspaces-web"
                        :signing-name "workspaces-web" :global-host
                        common-lisp:nil))
 (common-lisp:export 'workspaces-web-request))
(common-lisp:defvar *error-map*
  '(("AccessDeniedException" . access-denied-exception)
    ("ConflictException" . conflict-exception)
    ("InternalServerException" . internal-server-exception)
    ("ResourceNotFoundException" . resource-not-found-exception)
    ("ServiceQuotaExceededException" . service-quota-exceeded-exception)
    ("ThrottlingException" . throttling-exception)
    ("TooManyTagsException" . too-many-tags-exception)
    ("ValidationException" . validation-exception)))
(common-lisp:deftype arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition access-denied-exception
     (workspaces-web-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       access-denied-exception-message)))
 (common-lisp:export
  (common-lisp:list 'access-denied-exception 'access-denied-exception-message)))
(common-lisp:progn
 (common-lisp:deftype arn-list () '(trivial-types:proper-list arn))
 (common-lisp:defun make-arn-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list arn))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass associate-browser-settings-request common-lisp:nil
                       ((browser-settings-arn :initarg :browser-settings-arn
                         :initform
                         (common-lisp:error ":browsersettingsarn is required")
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-associate-browser-settings-request-browser-settings-arn
                         :shape "ARN" :location "querystring" :location-name
                         "browserSettingsArn")
                        (portal-arn :initarg :portal-arn :initform
                         (common-lisp:error ":portalarn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-associate-browser-settings-request-portal-arn
                         :shape "ARN" :location "uri" :location-name
                         "portalArn"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-associate-browser-settings-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'associate-browser-settings-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'associate-browser-settings-request
                    'make-associate-browser-settings-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-browser-settings-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-browser-settings-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-browser-settings-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass associate-browser-settings-response common-lisp:nil
                       ((browser-settings-arn :initarg :browser-settings-arn
                         :initform
                         (common-lisp:error ":browsersettingsarn is required")
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-associate-browser-settings-response-browser-settings-arn
                         :shape "ARN" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (portal-arn :initarg :portal-arn :initform
                         (common-lisp:error ":portalarn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-associate-browser-settings-response-portal-arn
                         :shape "ARN" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-associate-browser-settings-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'associate-browser-settings-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'associate-browser-settings-response
                    'make-associate-browser-settings-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-browser-settings-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-browser-settings-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'browser-settings-arn))
      (common-lisp:list
       (common-lisp:cons "browserSettingsArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'portal-arn))
      (common-lisp:list
       (common-lisp:cons "portalArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-browser-settings-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass associate-ip-access-settings-request common-lisp:nil
                       ((ip-access-settings-arn :initarg
                         :ip-access-settings-arn :initform
                         (common-lisp:error ":ipaccesssettingsarn is required")
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-associate-ip-access-settings-request-ip-access-settings-arn
                         :shape "ARN" :location "querystring" :location-name
                         "ipAccessSettingsArn")
                        (portal-arn :initarg :portal-arn :initform
                         (common-lisp:error ":portalarn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-associate-ip-access-settings-request-portal-arn
                         :shape "ARN" :location "uri" :location-name
                         "portalArn"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-associate-ip-access-settings-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'associate-ip-access-settings-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'associate-ip-access-settings-request
                    'make-associate-ip-access-settings-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-ip-access-settings-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-ip-access-settings-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-ip-access-settings-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass associate-ip-access-settings-response common-lisp:nil
                       ((ip-access-settings-arn :initarg
                         :ip-access-settings-arn :initform
                         (common-lisp:error ":ipaccesssettingsarn is required")
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-associate-ip-access-settings-response-ip-access-settings-arn
                         :shape "ARN" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (portal-arn :initarg :portal-arn :initform
                         (common-lisp:error ":portalarn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-associate-ip-access-settings-response-portal-arn
                         :shape "ARN" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-associate-ip-access-settings-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'associate-ip-access-settings-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'associate-ip-access-settings-response
                    'make-associate-ip-access-settings-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-ip-access-settings-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-ip-access-settings-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ip-access-settings-arn))
      (common-lisp:list
       (common-lisp:cons "ipAccessSettingsArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'portal-arn))
      (common-lisp:list
       (common-lisp:cons "portalArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-ip-access-settings-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass associate-network-settings-request common-lisp:nil
                       ((network-settings-arn :initarg :network-settings-arn
                         :initform
                         (common-lisp:error ":networksettingsarn is required")
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-associate-network-settings-request-network-settings-arn
                         :shape "ARN" :location "querystring" :location-name
                         "networkSettingsArn")
                        (portal-arn :initarg :portal-arn :initform
                         (common-lisp:error ":portalarn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-associate-network-settings-request-portal-arn
                         :shape "ARN" :location "uri" :location-name
                         "portalArn"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-associate-network-settings-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'associate-network-settings-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'associate-network-settings-request
                    'make-associate-network-settings-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-network-settings-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-network-settings-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-network-settings-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass associate-network-settings-response common-lisp:nil
                       ((network-settings-arn :initarg :network-settings-arn
                         :initform
                         (common-lisp:error ":networksettingsarn is required")
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-associate-network-settings-response-network-settings-arn
                         :shape "ARN" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (portal-arn :initarg :portal-arn :initform
                         (common-lisp:error ":portalarn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-associate-network-settings-response-portal-arn
                         :shape "ARN" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-associate-network-settings-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'associate-network-settings-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'associate-network-settings-response
                    'make-associate-network-settings-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-network-settings-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-network-settings-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'network-settings-arn))
      (common-lisp:list
       (common-lisp:cons "networkSettingsArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'portal-arn))
      (common-lisp:list
       (common-lisp:cons "portalArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-network-settings-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass associate-trust-store-request common-lisp:nil
                       ((portal-arn :initarg :portal-arn :initform
                         (common-lisp:error ":portalarn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-associate-trust-store-request-portal-arn
                         :shape "ARN" :location "uri" :location-name
                         "portalArn")
                        (trust-store-arn :initarg :trust-store-arn :initform
                         (common-lisp:error ":truststorearn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-associate-trust-store-request-trust-store-arn
                         :shape "ARN" :location "querystring" :location-name
                         "trustStoreArn"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-associate-trust-store-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'associate-trust-store-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'associate-trust-store-request
                    'make-associate-trust-store-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-trust-store-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-trust-store-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-trust-store-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass associate-trust-store-response common-lisp:nil
                       ((portal-arn :initarg :portal-arn :initform
                         (common-lisp:error ":portalarn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-associate-trust-store-response-portal-arn
                         :shape "ARN" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (trust-store-arn :initarg :trust-store-arn :initform
                         (common-lisp:error ":truststorearn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-associate-trust-store-response-trust-store-arn
                         :shape "ARN" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-associate-trust-store-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'associate-trust-store-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'associate-trust-store-response
                    'make-associate-trust-store-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-trust-store-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-trust-store-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'portal-arn))
      (common-lisp:list
       (common-lisp:cons "portalArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trust-store-arn))
      (common-lisp:list
       (common-lisp:cons "trustStoreArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-trust-store-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass associate-user-access-logging-settings-request
                       common-lisp:nil
                       ((portal-arn :initarg :portal-arn :initform
                         (common-lisp:error ":portalarn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-associate-user-access-logging-settings-request-portal-arn
                         :shape "ARN" :location "uri" :location-name
                         "portalArn")
                        (user-access-logging-settings-arn :initarg
                         :user-access-logging-settings-arn :initform
                         (common-lisp:error
                          ":useraccessloggingsettingsarn is required")
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-associate-user-access-logging-settings-request-user-access-logging-settings-arn
                         :shape "ARN" :location "querystring" :location-name
                         "userAccessLoggingSettingsArn"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-associate-user-access-logging-settings-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'associate-user-access-logging-settings-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'associate-user-access-logging-settings-request
                    'make-associate-user-access-logging-settings-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-user-access-logging-settings-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-user-access-logging-settings-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-user-access-logging-settings-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass associate-user-access-logging-settings-response
                       common-lisp:nil
                       ((portal-arn :initarg :portal-arn :initform
                         (common-lisp:error ":portalarn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-associate-user-access-logging-settings-response-portal-arn
                         :shape "ARN" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (user-access-logging-settings-arn :initarg
                         :user-access-logging-settings-arn :initform
                         (common-lisp:error
                          ":useraccessloggingsettingsarn is required")
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-associate-user-access-logging-settings-response-user-access-logging-settings-arn
                         :shape "ARN" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-associate-user-access-logging-settings-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'associate-user-access-logging-settings-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'associate-user-access-logging-settings-response
                    'make-associate-user-access-logging-settings-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-user-access-logging-settings-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-user-access-logging-settings-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'portal-arn))
      (common-lisp:list
       (common-lisp:cons "portalArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'user-access-logging-settings-arn))
      (common-lisp:list
       (common-lisp:cons "userAccessLoggingSettingsArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-user-access-logging-settings-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass associate-user-settings-request common-lisp:nil
                       ((portal-arn :initarg :portal-arn :initform
                         (common-lisp:error ":portalarn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-associate-user-settings-request-portal-arn
                         :shape "ARN" :location "uri" :location-name
                         "portalArn")
                        (user-settings-arn :initarg :user-settings-arn
                         :initform
                         (common-lisp:error ":usersettingsarn is required")
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-associate-user-settings-request-user-settings-arn
                         :shape "ARN" :location "querystring" :location-name
                         "userSettingsArn"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-associate-user-settings-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'associate-user-settings-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'associate-user-settings-request
                    'make-associate-user-settings-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-user-settings-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-user-settings-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-user-settings-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass associate-user-settings-response common-lisp:nil
                       ((portal-arn :initarg :portal-arn :initform
                         (common-lisp:error ":portalarn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-associate-user-settings-response-portal-arn
                         :shape "ARN" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (user-settings-arn :initarg :user-settings-arn
                         :initform
                         (common-lisp:error ":usersettingsarn is required")
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-associate-user-settings-response-user-settings-arn
                         :shape "ARN" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-associate-user-settings-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'associate-user-settings-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'associate-user-settings-response
                    'make-associate-user-settings-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-user-settings-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-user-settings-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'portal-arn))
      (common-lisp:list
       (common-lisp:cons "portalArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-settings-arn))
      (common-lisp:list
       (common-lisp:cons "userSettingsArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-user-settings-response))
   common-lisp:nil))
(common-lisp:deftype authentication-type () 'common-lisp:string)
(common-lisp:deftype browser-policy () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass browser-settings common-lisp:nil
                       ((associated-portal-arns :initarg
                         :associated-portal-arns :initform common-lisp:nil
                         :type (common-lisp:or arn-list common-lisp:null)
                         :accessor
                         struct-shape-browser-settings-associated-portal-arns
                         :shape "ArnList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (browser-policy :initarg :browser-policy :initform
                         common-lisp:nil :type
                         (common-lisp:or browser-policy common-lisp:null)
                         :accessor struct-shape-browser-settings-browser-policy
                         :shape "BrowserPolicy" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (browser-settings-arn :initarg :browser-settings-arn
                         :initform
                         (common-lisp:error ":browsersettingsarn is required")
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-browser-settings-browser-settings-arn
                         :shape "ARN" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-browser-settings
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'browser-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'browser-settings 'make-browser-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input browser-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input browser-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'associated-portal-arns))
      (common-lisp:list
       (common-lisp:cons "associatedPortalArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'browser-policy))
      (common-lisp:list
       (common-lisp:cons "browserPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'browser-settings-arn))
      (common-lisp:list
       (common-lisp:cons "browserSettingsArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input browser-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype browser-settings-list ()
   '(trivial-types:proper-list browser-settings-summary))
 (common-lisp:defun make-browser-settings-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            browser-settings-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass browser-settings-summary common-lisp:nil
                       ((browser-settings-arn :initarg :browser-settings-arn
                         :initform
                         (common-lisp:error ":browsersettingsarn is required")
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-browser-settings-summary-browser-settings-arn
                         :shape "ARN" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-browser-settings-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'browser-settings-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'browser-settings-summary 'make-browser-settings-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          browser-settings-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          browser-settings-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'browser-settings-arn))
      (common-lisp:list
       (common-lisp:cons "browserSettingsArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          browser-settings-summary))
   common-lisp:nil))
(common-lisp:deftype browser-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass certificate common-lisp:nil
                       ((body :initarg :body :initform common-lisp:nil :type
                         (common-lisp:or certificate-authority-body
                                         common-lisp:null)
                         :accessor struct-shape-certificate-body :shape
                         "CertificateAuthorityBody" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (issuer :initarg :issuer :initform common-lisp:nil
                         :type
                         (common-lisp:or certificate-principal
                                         common-lisp:null)
                         :accessor struct-shape-certificate-issuer :shape
                         "CertificatePrincipal" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (not-valid-after :initarg :not-valid-after :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-certificate-not-valid-after :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (not-valid-before :initarg :not-valid-before :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-certificate-not-valid-before :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (subject :initarg :subject :initform common-lisp:nil
                         :type
                         (common-lisp:or certificate-principal
                                         common-lisp:null)
                         :accessor struct-shape-certificate-subject :shape
                         "CertificatePrincipal" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (thumbprint :initarg :thumbprint :initform
                         common-lisp:nil :type
                         (common-lisp:or certificate-thumbprint
                                         common-lisp:null)
                         :accessor struct-shape-certificate-thumbprint :shape
                         "CertificateThumbprint" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-certificate
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'certificate
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'certificate 'make-certificate))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input certificate))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input certificate))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'body))
      (common-lisp:list
       (common-lisp:cons "body"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'issuer))
      (common-lisp:list
       (common-lisp:cons "issuer"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'not-valid-after))
      (common-lisp:list
       (common-lisp:cons "notValidAfter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'not-valid-before))
      (common-lisp:list
       (common-lisp:cons "notValidBefore"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subject))
      (common-lisp:list
       (common-lisp:cons "subject"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'thumbprint))
      (common-lisp:list
       (common-lisp:cons "thumbprint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input certificate))
   common-lisp:nil))
(common-lisp:deftype certificate-authority-body ()
  '(common-lisp:simple-array (common-lisp:unsigned-byte 8) (common-lisp:*)))
(common-lisp:progn
 (common-lisp:deftype certificate-list ()
   '(trivial-types:proper-list certificate-authority-body))
 (common-lisp:defun make-certificate-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            certificate-authority-body))
   aws-sdk/generator/shape::members))
(common-lisp:deftype certificate-principal () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass certificate-summary common-lisp:nil
                       ((issuer :initarg :issuer :initform common-lisp:nil
                         :type
                         (common-lisp:or certificate-principal
                                         common-lisp:null)
                         :accessor struct-shape-certificate-summary-issuer
                         :shape "CertificatePrincipal" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (not-valid-after :initarg :not-valid-after :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-certificate-summary-not-valid-after
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (not-valid-before :initarg :not-valid-before :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-certificate-summary-not-valid-before
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (subject :initarg :subject :initform common-lisp:nil
                         :type
                         (common-lisp:or certificate-principal
                                         common-lisp:null)
                         :accessor struct-shape-certificate-summary-subject
                         :shape "CertificatePrincipal" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (thumbprint :initarg :thumbprint :initform
                         common-lisp:nil :type
                         (common-lisp:or certificate-thumbprint
                                         common-lisp:null)
                         :accessor struct-shape-certificate-summary-thumbprint
                         :shape "CertificateThumbprint" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-certificate-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'certificate-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'certificate-summary 'make-certificate-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input certificate-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input certificate-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'issuer))
      (common-lisp:list
       (common-lisp:cons "issuer"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'not-valid-after))
      (common-lisp:list
       (common-lisp:cons "notValidAfter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'not-valid-before))
      (common-lisp:list
       (common-lisp:cons "notValidBefore"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subject))
      (common-lisp:list
       (common-lisp:cons "subject"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'thumbprint))
      (common-lisp:list
       (common-lisp:cons "thumbprint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input certificate-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype certificate-summary-list ()
   '(trivial-types:proper-list certificate-summary))
 (common-lisp:defun make-certificate-summary-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list certificate-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype certificate-thumbprint () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype certificate-thumbprint-list ()
   '(trivial-types:proper-list certificate-thumbprint))
 (common-lisp:defun make-certificate-thumbprint-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list certificate-thumbprint))
   aws-sdk/generator/shape::members))
(common-lisp:deftype client-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition conflict-exception
     (workspaces-web-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       conflict-exception-message)
      (resource-id :initarg :resource-id :initform common-lisp:nil :reader
       conflict-exception-resource-id)
      (resource-type :initarg :resource-type :initform common-lisp:nil :reader
       conflict-exception-resource-type)))
 (common-lisp:export
  (common-lisp:list 'conflict-exception 'conflict-exception-message
                    'conflict-exception-resource-id
                    'conflict-exception-resource-type)))
(common-lisp:deftype cookie-domain () 'common-lisp:string)
(common-lisp:deftype cookie-name () 'common-lisp:string)
(common-lisp:deftype cookie-path () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass cookie-specification common-lisp:nil
                       ((domain :initarg :domain :initform
                         (common-lisp:error ":domain is required") :type
                         (common-lisp:or cookie-domain common-lisp:null)
                         :accessor struct-shape-cookie-specification-domain
                         :shape "CookieDomain" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or cookie-name common-lisp:null)
                         :accessor struct-shape-cookie-specification-name
                         :shape "CookieName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (path :initarg :path :initform common-lisp:nil :type
                         (common-lisp:or cookie-path common-lisp:null)
                         :accessor struct-shape-cookie-specification-path
                         :shape "CookiePath" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-cookie-specification
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'cookie-specification
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'cookie-specification 'make-cookie-specification))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input cookie-specification))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input cookie-specification))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain))
      (common-lisp:list
       (common-lisp:cons "domain"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'path))
      (common-lisp:list
       (common-lisp:cons "path"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input cookie-specification))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype cookie-specifications ()
   '(trivial-types:proper-list cookie-specification))
 (common-lisp:defun make-cookie-specifications
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list cookie-specification))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass cookie-synchronization-configuration common-lisp:nil
                       ((allowlist :initarg :allowlist :initform
                         (common-lisp:error ":allowlist is required") :type
                         (common-lisp:or cookie-specifications
                                         common-lisp:null)
                         :accessor
                         struct-shape-cookie-synchronization-configuration-allowlist
                         :shape "CookieSpecifications" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (blocklist :initarg :blocklist :initform
                         common-lisp:nil :type
                         (common-lisp:or cookie-specifications
                                         common-lisp:null)
                         :accessor
                         struct-shape-cookie-synchronization-configuration-blocklist
                         :shape "CookieSpecifications" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-cookie-synchronization-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'cookie-synchronization-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'cookie-synchronization-configuration
                    'make-cookie-synchronization-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cookie-synchronization-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cookie-synchronization-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allowlist))
      (common-lisp:list
       (common-lisp:cons "allowlist"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'blocklist))
      (common-lisp:list
       (common-lisp:cons "blocklist"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cookie-synchronization-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-browser-settings-request common-lisp:nil
                       ((additional-encryption-context :initarg
                         :additional-encryption-context :initform
                         common-lisp:nil :type
                         (common-lisp:or encryption-context-map
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-browser-settings-request-additional-encryption-context
                         :shape "EncryptionContextMap" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (browser-policy :initarg :browser-policy :initform
                         (common-lisp:error ":browserpolicy is required") :type
                         (common-lisp:or browser-policy common-lisp:null)
                         :accessor
                         struct-shape-create-browser-settings-request-browser-policy
                         :shape "BrowserPolicy" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor
                         struct-shape-create-browser-settings-request-client-token
                         :shape "ClientToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (customer-managed-key :initarg :customer-managed-key
                         :initform common-lisp:nil :type
                         (common-lisp:or |keyArn| common-lisp:null) :accessor
                         struct-shape-create-browser-settings-request-customer-managed-key
                         :shape "keyArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-create-browser-settings-request-tags
                         :shape "TagList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-browser-settings-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-browser-settings-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-browser-settings-request
                    'make-create-browser-settings-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-browser-settings-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-browser-settings-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'additional-encryption-context))
      (common-lisp:list
       (common-lisp:cons "additionalEncryptionContext"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'browser-policy))
      (common-lisp:list
       (common-lisp:cons "browserPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'customer-managed-key))
      (common-lisp:list
       (common-lisp:cons "customerManagedKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-browser-settings-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-browser-settings-response common-lisp:nil
                       ((browser-settings-arn :initarg :browser-settings-arn
                         :initform
                         (common-lisp:error ":browsersettingsarn is required")
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-create-browser-settings-response-browser-settings-arn
                         :shape "ARN" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-browser-settings-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-browser-settings-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-browser-settings-response
                    'make-create-browser-settings-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-browser-settings-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-browser-settings-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'browser-settings-arn))
      (common-lisp:list
       (common-lisp:cons "browserSettingsArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-browser-settings-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-identity-provider-request common-lisp:nil
                       ((client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor
                         struct-shape-create-identity-provider-request-client-token
                         :shape "ClientToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (identity-provider-details :initarg
                         :identity-provider-details :initform
                         (common-lisp:error
                          ":identityproviderdetails is required")
                         :type
                         (common-lisp:or identity-provider-details
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-identity-provider-request-identity-provider-details
                         :shape "IdentityProviderDetails" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (identity-provider-name :initarg
                         :identity-provider-name :initform
                         (common-lisp:error
                          ":identityprovidername is required")
                         :type
                         (common-lisp:or identity-provider-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-identity-provider-request-identity-provider-name
                         :shape "IdentityProviderName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (identity-provider-type :initarg
                         :identity-provider-type :initform
                         (common-lisp:error
                          ":identityprovidertype is required")
                         :type
                         (common-lisp:or identity-provider-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-identity-provider-request-identity-provider-type
                         :shape "IdentityProviderType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (portal-arn :initarg :portal-arn :initform
                         (common-lisp:error ":portalarn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-create-identity-provider-request-portal-arn
                         :shape "ARN" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-identity-provider-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-identity-provider-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-identity-provider-request
                    'make-create-identity-provider-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-identity-provider-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-identity-provider-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'identity-provider-details))
      (common-lisp:list
       (common-lisp:cons "identityProviderDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'identity-provider-name))
      (common-lisp:list
       (common-lisp:cons "identityProviderName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'identity-provider-type))
      (common-lisp:list
       (common-lisp:cons "identityProviderType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'portal-arn))
      (common-lisp:list
       (common-lisp:cons "portalArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-identity-provider-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-identity-provider-response common-lisp:nil
                       ((identity-provider-arn :initarg :identity-provider-arn
                         :initform
                         (common-lisp:error ":identityproviderarn is required")
                         :type
                         (common-lisp:or subresource-arn common-lisp:null)
                         :accessor
                         struct-shape-create-identity-provider-response-identity-provider-arn
                         :shape "SubresourceARN" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-identity-provider-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-identity-provider-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-identity-provider-response
                    'make-create-identity-provider-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-identity-provider-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-identity-provider-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'identity-provider-arn))
      (common-lisp:list
       (common-lisp:cons "identityProviderArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-identity-provider-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-ip-access-settings-request common-lisp:nil
                       ((additional-encryption-context :initarg
                         :additional-encryption-context :initform
                         common-lisp:nil :type
                         (common-lisp:or encryption-context-map
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-ip-access-settings-request-additional-encryption-context
                         :shape "EncryptionContextMap" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor
                         struct-shape-create-ip-access-settings-request-client-token
                         :shape "ClientToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (customer-managed-key :initarg :customer-managed-key
                         :initform common-lisp:nil :type
                         (common-lisp:or |keyArn| common-lisp:null) :accessor
                         struct-shape-create-ip-access-settings-request-customer-managed-key
                         :shape "keyArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor
                         struct-shape-create-ip-access-settings-request-description
                         :shape "Description" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (display-name :initarg :display-name :initform
                         common-lisp:nil :type
                         (common-lisp:or display-name common-lisp:null)
                         :accessor
                         struct-shape-create-ip-access-settings-request-display-name
                         :shape "DisplayName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (ip-rules :initarg :ip-rules :initform
                         (common-lisp:error ":iprules is required") :type
                         (common-lisp:or ip-rule-list common-lisp:null)
                         :accessor
                         struct-shape-create-ip-access-settings-request-ip-rules
                         :shape "IpRuleList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-create-ip-access-settings-request-tags
                         :shape "TagList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-ip-access-settings-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-ip-access-settings-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-ip-access-settings-request
                    'make-create-ip-access-settings-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-ip-access-settings-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-ip-access-settings-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'additional-encryption-context))
      (common-lisp:list
       (common-lisp:cons "additionalEncryptionContext"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'customer-managed-key))
      (common-lisp:list
       (common-lisp:cons "customerManagedKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-name))
      (common-lisp:list
       (common-lisp:cons "displayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-rules))
      (common-lisp:list
       (common-lisp:cons "ipRules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-ip-access-settings-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-ip-access-settings-response common-lisp:nil
                       ((ip-access-settings-arn :initarg
                         :ip-access-settings-arn :initform
                         (common-lisp:error ":ipaccesssettingsarn is required")
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-create-ip-access-settings-response-ip-access-settings-arn
                         :shape "ARN" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-ip-access-settings-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-ip-access-settings-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-ip-access-settings-response
                    'make-create-ip-access-settings-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-ip-access-settings-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-ip-access-settings-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ip-access-settings-arn))
      (common-lisp:list
       (common-lisp:cons "ipAccessSettingsArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-ip-access-settings-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-network-settings-request common-lisp:nil
                       ((client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor
                         struct-shape-create-network-settings-request-client-token
                         :shape "ClientToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (security-group-ids :initarg :security-group-ids
                         :initform
                         (common-lisp:error ":securitygroupids is required")
                         :type
                         (common-lisp:or security-group-id-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-network-settings-request-security-group-ids
                         :shape "SecurityGroupIdList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (subnet-ids :initarg :subnet-ids :initform
                         (common-lisp:error ":subnetids is required") :type
                         (common-lisp:or subnet-id-list common-lisp:null)
                         :accessor
                         struct-shape-create-network-settings-request-subnet-ids
                         :shape "SubnetIdList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-create-network-settings-request-tags
                         :shape "TagList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (vpc-id :initarg :vpc-id :initform
                         (common-lisp:error ":vpcid is required") :type
                         (common-lisp:or vpc-id common-lisp:null) :accessor
                         struct-shape-create-network-settings-request-vpc-id
                         :shape "VpcId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-network-settings-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-network-settings-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-network-settings-request
                    'make-create-network-settings-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-network-settings-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-network-settings-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-group-ids))
      (common-lisp:list
       (common-lisp:cons "securityGroupIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-ids))
      (common-lisp:list
       (common-lisp:cons "subnetIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-id))
      (common-lisp:list
       (common-lisp:cons "vpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-network-settings-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-network-settings-response common-lisp:nil
                       ((network-settings-arn :initarg :network-settings-arn
                         :initform
                         (common-lisp:error ":networksettingsarn is required")
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-create-network-settings-response-network-settings-arn
                         :shape "ARN" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-network-settings-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-network-settings-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-network-settings-response
                    'make-create-network-settings-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-network-settings-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-network-settings-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'network-settings-arn))
      (common-lisp:list
       (common-lisp:cons "networkSettingsArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-network-settings-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-portal-request common-lisp:nil
                       ((additional-encryption-context :initarg
                         :additional-encryption-context :initform
                         common-lisp:nil :type
                         (common-lisp:or encryption-context-map
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-portal-request-additional-encryption-context
                         :shape "EncryptionContextMap" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (authentication-type :initarg :authentication-type
                         :initform common-lisp:nil :type
                         (common-lisp:or authentication-type common-lisp:null)
                         :accessor
                         struct-shape-create-portal-request-authentication-type
                         :shape "AuthenticationType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor
                         struct-shape-create-portal-request-client-token :shape
                         "ClientToken" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (customer-managed-key :initarg :customer-managed-key
                         :initform common-lisp:nil :type
                         (common-lisp:or |keyArn| common-lisp:null) :accessor
                         struct-shape-create-portal-request-customer-managed-key
                         :shape "keyArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (display-name :initarg :display-name :initform
                         common-lisp:nil :type
                         (common-lisp:or display-name common-lisp:null)
                         :accessor
                         struct-shape-create-portal-request-display-name :shape
                         "DisplayName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-create-portal-request-tags :shape
                         "TagList" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-portal-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-portal-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-portal-request 'make-create-portal-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-portal-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-portal-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'additional-encryption-context))
      (common-lisp:list
       (common-lisp:cons "additionalEncryptionContext"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'authentication-type))
      (common-lisp:list
       (common-lisp:cons "authenticationType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'customer-managed-key))
      (common-lisp:list
       (common-lisp:cons "customerManagedKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-name))
      (common-lisp:list
       (common-lisp:cons "displayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-portal-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-portal-response common-lisp:nil
                       ((portal-arn :initarg :portal-arn :initform
                         (common-lisp:error ":portalarn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-create-portal-response-portal-arn :shape
                         "ARN" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (portal-endpoint :initarg :portal-endpoint :initform
                         (common-lisp:error ":portalendpoint is required")
                         :type
                         (common-lisp:or portal-endpoint common-lisp:null)
                         :accessor
                         struct-shape-create-portal-response-portal-endpoint
                         :shape "PortalEndpoint" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-portal-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-portal-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-portal-response 'make-create-portal-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-portal-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-portal-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'portal-arn))
      (common-lisp:list
       (common-lisp:cons "portalArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'portal-endpoint))
      (common-lisp:list
       (common-lisp:cons "portalEndpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-portal-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-trust-store-request common-lisp:nil
                       ((certificate-list :initarg :certificate-list :initform
                         (common-lisp:error ":certificatelist is required")
                         :type
                         (common-lisp:or certificate-list common-lisp:null)
                         :accessor
                         struct-shape-create-trust-store-request-certificate-list
                         :shape "CertificateList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor
                         struct-shape-create-trust-store-request-client-token
                         :shape "ClientToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-create-trust-store-request-tags :shape
                         "TagList" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-trust-store-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-trust-store-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-trust-store-request
                    'make-create-trust-store-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-trust-store-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-trust-store-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-list))
      (common-lisp:list
       (common-lisp:cons "certificateList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-trust-store-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-trust-store-response common-lisp:nil
                       ((trust-store-arn :initarg :trust-store-arn :initform
                         (common-lisp:error ":truststorearn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-create-trust-store-response-trust-store-arn
                         :shape "ARN" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-trust-store-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-trust-store-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-trust-store-response
                    'make-create-trust-store-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-trust-store-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-trust-store-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trust-store-arn))
      (common-lisp:list
       (common-lisp:cons "trustStoreArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-trust-store-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-user-access-logging-settings-request
                       common-lisp:nil
                       ((client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor
                         struct-shape-create-user-access-logging-settings-request-client-token
                         :shape "ClientToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (kinesis-stream-arn :initarg :kinesis-stream-arn
                         :initform
                         (common-lisp:error ":kinesisstreamarn is required")
                         :type
                         (common-lisp:or kinesis-stream-arn common-lisp:null)
                         :accessor
                         struct-shape-create-user-access-logging-settings-request-kinesis-stream-arn
                         :shape "KinesisStreamArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-create-user-access-logging-settings-request-tags
                         :shape "TagList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-user-access-logging-settings-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-user-access-logging-settings-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-user-access-logging-settings-request
                    'make-create-user-access-logging-settings-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-user-access-logging-settings-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-user-access-logging-settings-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kinesis-stream-arn))
      (common-lisp:list
       (common-lisp:cons "kinesisStreamArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-user-access-logging-settings-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-user-access-logging-settings-response
                       common-lisp:nil
                       ((user-access-logging-settings-arn :initarg
                         :user-access-logging-settings-arn :initform
                         (common-lisp:error
                          ":useraccessloggingsettingsarn is required")
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-create-user-access-logging-settings-response-user-access-logging-settings-arn
                         :shape "ARN" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-user-access-logging-settings-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-user-access-logging-settings-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-user-access-logging-settings-response
                    'make-create-user-access-logging-settings-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-user-access-logging-settings-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-user-access-logging-settings-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'user-access-logging-settings-arn))
      (common-lisp:list
       (common-lisp:cons "userAccessLoggingSettingsArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-user-access-logging-settings-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-user-settings-request common-lisp:nil
                       ((additional-encryption-context :initarg
                         :additional-encryption-context :initform
                         common-lisp:nil :type
                         (common-lisp:or encryption-context-map
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-user-settings-request-additional-encryption-context
                         :shape "EncryptionContextMap" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor
                         struct-shape-create-user-settings-request-client-token
                         :shape "ClientToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cookie-synchronization-configuration :initarg
                         :cookie-synchronization-configuration :initform
                         common-lisp:nil :type
                         (common-lisp:or cookie-synchronization-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-user-settings-request-cookie-synchronization-configuration
                         :shape "CookieSynchronizationConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (copy-allowed :initarg :copy-allowed :initform
                         (common-lisp:error ":copyallowed is required") :type
                         (common-lisp:or enabled-type common-lisp:null)
                         :accessor
                         struct-shape-create-user-settings-request-copy-allowed
                         :shape "EnabledType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (customer-managed-key :initarg :customer-managed-key
                         :initform common-lisp:nil :type
                         (common-lisp:or |keyArn| common-lisp:null) :accessor
                         struct-shape-create-user-settings-request-customer-managed-key
                         :shape "keyArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (disconnect-timeout-in-minutes :initarg
                         :disconnect-timeout-in-minutes :initform
                         common-lisp:nil :type
                         (common-lisp:or disconnect-timeout-in-minutes
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-user-settings-request-disconnect-timeout-in-minutes
                         :shape "DisconnectTimeoutInMinutes" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (download-allowed :initarg :download-allowed :initform
                         (common-lisp:error ":downloadallowed is required")
                         :type (common-lisp:or enabled-type common-lisp:null)
                         :accessor
                         struct-shape-create-user-settings-request-download-allowed
                         :shape "EnabledType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (idle-disconnect-timeout-in-minutes :initarg
                         :idle-disconnect-timeout-in-minutes :initform
                         common-lisp:nil :type
                         (common-lisp:or idle-disconnect-timeout-in-minutes
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-user-settings-request-idle-disconnect-timeout-in-minutes
                         :shape "IdleDisconnectTimeoutInMinutes" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (paste-allowed :initarg :paste-allowed :initform
                         (common-lisp:error ":pasteallowed is required") :type
                         (common-lisp:or enabled-type common-lisp:null)
                         :accessor
                         struct-shape-create-user-settings-request-paste-allowed
                         :shape "EnabledType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (print-allowed :initarg :print-allowed :initform
                         (common-lisp:error ":printallowed is required") :type
                         (common-lisp:or enabled-type common-lisp:null)
                         :accessor
                         struct-shape-create-user-settings-request-print-allowed
                         :shape "EnabledType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-create-user-settings-request-tags :shape
                         "TagList" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (upload-allowed :initarg :upload-allowed :initform
                         (common-lisp:error ":uploadallowed is required") :type
                         (common-lisp:or enabled-type common-lisp:null)
                         :accessor
                         struct-shape-create-user-settings-request-upload-allowed
                         :shape "EnabledType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-user-settings-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-user-settings-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-user-settings-request
                    'make-create-user-settings-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-user-settings-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-user-settings-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'additional-encryption-context))
      (common-lisp:list
       (common-lisp:cons "additionalEncryptionContext"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cookie-synchronization-configuration))
      (common-lisp:list
       (common-lisp:cons "cookieSynchronizationConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'copy-allowed))
      (common-lisp:list
       (common-lisp:cons "copyAllowed"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'customer-managed-key))
      (common-lisp:list
       (common-lisp:cons "customerManagedKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'disconnect-timeout-in-minutes))
      (common-lisp:list
       (common-lisp:cons "disconnectTimeoutInMinutes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'download-allowed))
      (common-lisp:list
       (common-lisp:cons "downloadAllowed"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'idle-disconnect-timeout-in-minutes))
      (common-lisp:list
       (common-lisp:cons "idleDisconnectTimeoutInMinutes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'paste-allowed))
      (common-lisp:list
       (common-lisp:cons "pasteAllowed"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'print-allowed))
      (common-lisp:list
       (common-lisp:cons "printAllowed"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'upload-allowed))
      (common-lisp:list
       (common-lisp:cons "uploadAllowed"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-user-settings-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-user-settings-response common-lisp:nil
                       ((user-settings-arn :initarg :user-settings-arn
                         :initform
                         (common-lisp:error ":usersettingsarn is required")
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-create-user-settings-response-user-settings-arn
                         :shape "ARN" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-user-settings-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-user-settings-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-user-settings-response
                    'make-create-user-settings-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-user-settings-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-user-settings-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-settings-arn))
      (common-lisp:list
       (common-lisp:cons "userSettingsArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-user-settings-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-browser-settings-request common-lisp:nil
                       ((browser-settings-arn :initarg :browser-settings-arn
                         :initform
                         (common-lisp:error ":browsersettingsarn is required")
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-delete-browser-settings-request-browser-settings-arn
                         :shape "ARN" :location "uri" :location-name
                         "browserSettingsArn"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-browser-settings-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-browser-settings-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-browser-settings-request
                    'make-delete-browser-settings-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-browser-settings-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-browser-settings-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-browser-settings-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-browser-settings-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-browser-settings-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-browser-settings-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-browser-settings-response
                    'make-delete-browser-settings-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-browser-settings-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-browser-settings-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-browser-settings-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-identity-provider-request common-lisp:nil
                       ((identity-provider-arn :initarg :identity-provider-arn
                         :initform
                         (common-lisp:error ":identityproviderarn is required")
                         :type
                         (common-lisp:or subresource-arn common-lisp:null)
                         :accessor
                         struct-shape-delete-identity-provider-request-identity-provider-arn
                         :shape "SubresourceARN" :location "uri" :location-name
                         "identityProviderArn"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-identity-provider-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-identity-provider-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-identity-provider-request
                    'make-delete-identity-provider-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-identity-provider-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-identity-provider-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-identity-provider-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-identity-provider-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-identity-provider-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-identity-provider-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-identity-provider-response
                    'make-delete-identity-provider-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-identity-provider-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-identity-provider-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-identity-provider-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-ip-access-settings-request common-lisp:nil
                       ((ip-access-settings-arn :initarg
                         :ip-access-settings-arn :initform
                         (common-lisp:error ":ipaccesssettingsarn is required")
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-delete-ip-access-settings-request-ip-access-settings-arn
                         :shape "ARN" :location "uri" :location-name
                         "ipAccessSettingsArn"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-ip-access-settings-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-ip-access-settings-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-ip-access-settings-request
                    'make-delete-ip-access-settings-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-ip-access-settings-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-ip-access-settings-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-ip-access-settings-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-ip-access-settings-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-ip-access-settings-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-ip-access-settings-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-ip-access-settings-response
                    'make-delete-ip-access-settings-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-ip-access-settings-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-ip-access-settings-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-ip-access-settings-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-network-settings-request common-lisp:nil
                       ((network-settings-arn :initarg :network-settings-arn
                         :initform
                         (common-lisp:error ":networksettingsarn is required")
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-delete-network-settings-request-network-settings-arn
                         :shape "ARN" :location "uri" :location-name
                         "networkSettingsArn"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-network-settings-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-network-settings-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-network-settings-request
                    'make-delete-network-settings-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-network-settings-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-network-settings-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-network-settings-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-network-settings-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-network-settings-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-network-settings-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-network-settings-response
                    'make-delete-network-settings-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-network-settings-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-network-settings-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-network-settings-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-portal-request common-lisp:nil
                       ((portal-arn :initarg :portal-arn :initform
                         (common-lisp:error ":portalarn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-delete-portal-request-portal-arn :shape
                         "ARN" :location "uri" :location-name "portalArn"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-portal-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-portal-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-portal-request 'make-delete-portal-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-portal-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-portal-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-portal-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-portal-response common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-portal-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-portal-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-portal-response 'make-delete-portal-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-portal-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-portal-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-portal-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-trust-store-request common-lisp:nil
                       ((trust-store-arn :initarg :trust-store-arn :initform
                         (common-lisp:error ":truststorearn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-delete-trust-store-request-trust-store-arn
                         :shape "ARN" :location "uri" :location-name
                         "trustStoreArn"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-trust-store-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-trust-store-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-trust-store-request
                    'make-delete-trust-store-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-trust-store-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-trust-store-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-trust-store-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-trust-store-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-trust-store-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-trust-store-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-trust-store-response
                    'make-delete-trust-store-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-trust-store-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-trust-store-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-trust-store-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-user-access-logging-settings-request
                       common-lisp:nil
                       ((user-access-logging-settings-arn :initarg
                         :user-access-logging-settings-arn :initform
                         (common-lisp:error
                          ":useraccessloggingsettingsarn is required")
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-delete-user-access-logging-settings-request-user-access-logging-settings-arn
                         :shape "ARN" :location "uri" :location-name
                         "userAccessLoggingSettingsArn"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-user-access-logging-settings-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-user-access-logging-settings-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-user-access-logging-settings-request
                    'make-delete-user-access-logging-settings-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-user-access-logging-settings-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-user-access-logging-settings-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-user-access-logging-settings-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-user-access-logging-settings-response
                       common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-user-access-logging-settings-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-user-access-logging-settings-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-user-access-logging-settings-response
                    'make-delete-user-access-logging-settings-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-user-access-logging-settings-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-user-access-logging-settings-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-user-access-logging-settings-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-user-settings-request common-lisp:nil
                       ((user-settings-arn :initarg :user-settings-arn
                         :initform
                         (common-lisp:error ":usersettingsarn is required")
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-delete-user-settings-request-user-settings-arn
                         :shape "ARN" :location "uri" :location-name
                         "userSettingsArn"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-user-settings-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-user-settings-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-user-settings-request
                    'make-delete-user-settings-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-user-settings-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-user-settings-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-user-settings-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-user-settings-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-user-settings-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-user-settings-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-user-settings-response
                    'make-delete-user-settings-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-user-settings-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-user-settings-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-user-settings-response))
   common-lisp:nil))
(common-lisp:deftype description () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass disassociate-browser-settings-request common-lisp:nil
                       ((portal-arn :initarg :portal-arn :initform
                         (common-lisp:error ":portalarn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-disassociate-browser-settings-request-portal-arn
                         :shape "ARN" :location "uri" :location-name
                         "portalArn"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-disassociate-browser-settings-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'disassociate-browser-settings-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'disassociate-browser-settings-request
                    'make-disassociate-browser-settings-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-browser-settings-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-browser-settings-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-browser-settings-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass disassociate-browser-settings-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-disassociate-browser-settings-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'disassociate-browser-settings-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'disassociate-browser-settings-response
                    'make-disassociate-browser-settings-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-browser-settings-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-browser-settings-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-browser-settings-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass disassociate-ip-access-settings-request common-lisp:nil
                       ((portal-arn :initarg :portal-arn :initform
                         (common-lisp:error ":portalarn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-disassociate-ip-access-settings-request-portal-arn
                         :shape "ARN" :location "uri" :location-name
                         "portalArn"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-disassociate-ip-access-settings-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'disassociate-ip-access-settings-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'disassociate-ip-access-settings-request
                    'make-disassociate-ip-access-settings-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-ip-access-settings-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-ip-access-settings-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-ip-access-settings-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass disassociate-ip-access-settings-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-disassociate-ip-access-settings-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'disassociate-ip-access-settings-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'disassociate-ip-access-settings-response
                    'make-disassociate-ip-access-settings-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-ip-access-settings-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-ip-access-settings-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-ip-access-settings-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass disassociate-network-settings-request common-lisp:nil
                       ((portal-arn :initarg :portal-arn :initform
                         (common-lisp:error ":portalarn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-disassociate-network-settings-request-portal-arn
                         :shape "ARN" :location "uri" :location-name
                         "portalArn"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-disassociate-network-settings-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'disassociate-network-settings-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'disassociate-network-settings-request
                    'make-disassociate-network-settings-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-network-settings-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-network-settings-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-network-settings-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass disassociate-network-settings-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-disassociate-network-settings-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'disassociate-network-settings-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'disassociate-network-settings-response
                    'make-disassociate-network-settings-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-network-settings-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-network-settings-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-network-settings-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass disassociate-trust-store-request common-lisp:nil
                       ((portal-arn :initarg :portal-arn :initform
                         (common-lisp:error ":portalarn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-disassociate-trust-store-request-portal-arn
                         :shape "ARN" :location "uri" :location-name
                         "portalArn"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-disassociate-trust-store-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'disassociate-trust-store-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'disassociate-trust-store-request
                    'make-disassociate-trust-store-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-trust-store-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-trust-store-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-trust-store-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass disassociate-trust-store-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-disassociate-trust-store-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'disassociate-trust-store-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'disassociate-trust-store-response
                    'make-disassociate-trust-store-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-trust-store-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-trust-store-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-trust-store-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass disassociate-user-access-logging-settings-request
                       common-lisp:nil
                       ((portal-arn :initarg :portal-arn :initform
                         (common-lisp:error ":portalarn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-disassociate-user-access-logging-settings-request-portal-arn
                         :shape "ARN" :location "uri" :location-name
                         "portalArn"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-disassociate-user-access-logging-settings-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'disassociate-user-access-logging-settings-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'disassociate-user-access-logging-settings-request
                    'make-disassociate-user-access-logging-settings-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-user-access-logging-settings-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-user-access-logging-settings-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-user-access-logging-settings-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass disassociate-user-access-logging-settings-response
                       common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-disassociate-user-access-logging-settings-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'disassociate-user-access-logging-settings-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'disassociate-user-access-logging-settings-response
                    'make-disassociate-user-access-logging-settings-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-user-access-logging-settings-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-user-access-logging-settings-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-user-access-logging-settings-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass disassociate-user-settings-request common-lisp:nil
                       ((portal-arn :initarg :portal-arn :initform
                         (common-lisp:error ":portalarn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-disassociate-user-settings-request-portal-arn
                         :shape "ARN" :location "uri" :location-name
                         "portalArn"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-disassociate-user-settings-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'disassociate-user-settings-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'disassociate-user-settings-request
                    'make-disassociate-user-settings-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-user-settings-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-user-settings-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-user-settings-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass disassociate-user-settings-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-disassociate-user-settings-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'disassociate-user-settings-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'disassociate-user-settings-response
                    'make-disassociate-user-settings-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-user-settings-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-user-settings-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-user-settings-response))
   common-lisp:nil))
(common-lisp:deftype disconnect-timeout-in-minutes () 'common-lisp:integer)
(common-lisp:deftype display-name () 'common-lisp:string)
(common-lisp:deftype enabled-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype encryption-context-map () 'common-lisp:hash-table)
 (common-lisp:defun make-encryption-context-map
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype exception-message () 'common-lisp:string)
(common-lisp:deftype field-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass get-browser-settings-request common-lisp:nil
                       ((browser-settings-arn :initarg :browser-settings-arn
                         :initform
                         (common-lisp:error ":browsersettingsarn is required")
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-get-browser-settings-request-browser-settings-arn
                         :shape "ARN" :location "uri" :location-name
                         "browserSettingsArn"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-browser-settings-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-browser-settings-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-browser-settings-request
                    'make-get-browser-settings-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-browser-settings-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-browser-settings-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-browser-settings-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-browser-settings-response common-lisp:nil
                       ((browser-settings :initarg :browser-settings :initform
                         common-lisp:nil :type
                         (common-lisp:or browser-settings common-lisp:null)
                         :accessor
                         struct-shape-get-browser-settings-response-browser-settings
                         :shape "BrowserSettings" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-browser-settings-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-browser-settings-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-browser-settings-response
                    'make-get-browser-settings-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-browser-settings-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-browser-settings-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'browser-settings))
      (common-lisp:list
       (common-lisp:cons "browserSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-browser-settings-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-identity-provider-request common-lisp:nil
                       ((identity-provider-arn :initarg :identity-provider-arn
                         :initform
                         (common-lisp:error ":identityproviderarn is required")
                         :type
                         (common-lisp:or subresource-arn common-lisp:null)
                         :accessor
                         struct-shape-get-identity-provider-request-identity-provider-arn
                         :shape "SubresourceARN" :location "uri" :location-name
                         "identityProviderArn"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-identity-provider-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-identity-provider-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-identity-provider-request
                    'make-get-identity-provider-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-identity-provider-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-identity-provider-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-identity-provider-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-identity-provider-response common-lisp:nil
                       ((identity-provider :initarg :identity-provider
                         :initform common-lisp:nil :type
                         (common-lisp:or identity-provider common-lisp:null)
                         :accessor
                         struct-shape-get-identity-provider-response-identity-provider
                         :shape "IdentityProvider" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-identity-provider-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-identity-provider-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-identity-provider-response
                    'make-get-identity-provider-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-identity-provider-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-identity-provider-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identity-provider))
      (common-lisp:list
       (common-lisp:cons "identityProvider"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-identity-provider-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-ip-access-settings-request common-lisp:nil
                       ((ip-access-settings-arn :initarg
                         :ip-access-settings-arn :initform
                         (common-lisp:error ":ipaccesssettingsarn is required")
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-get-ip-access-settings-request-ip-access-settings-arn
                         :shape "ARN" :location "uri" :location-name
                         "ipAccessSettingsArn"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-ip-access-settings-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-ip-access-settings-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-ip-access-settings-request
                    'make-get-ip-access-settings-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-ip-access-settings-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-ip-access-settings-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-ip-access-settings-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-ip-access-settings-response common-lisp:nil
                       ((ip-access-settings :initarg :ip-access-settings
                         :initform common-lisp:nil :type
                         (common-lisp:or ip-access-settings common-lisp:null)
                         :accessor
                         struct-shape-get-ip-access-settings-response-ip-access-settings
                         :shape "IpAccessSettings" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-ip-access-settings-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-ip-access-settings-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-ip-access-settings-response
                    'make-get-ip-access-settings-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-ip-access-settings-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-ip-access-settings-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-access-settings))
      (common-lisp:list
       (common-lisp:cons "ipAccessSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-ip-access-settings-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-network-settings-request common-lisp:nil
                       ((network-settings-arn :initarg :network-settings-arn
                         :initform
                         (common-lisp:error ":networksettingsarn is required")
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-get-network-settings-request-network-settings-arn
                         :shape "ARN" :location "uri" :location-name
                         "networkSettingsArn"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-network-settings-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-network-settings-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-network-settings-request
                    'make-get-network-settings-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-network-settings-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-network-settings-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-network-settings-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-network-settings-response common-lisp:nil
                       ((network-settings :initarg :network-settings :initform
                         common-lisp:nil :type
                         (common-lisp:or network-settings common-lisp:null)
                         :accessor
                         struct-shape-get-network-settings-response-network-settings
                         :shape "NetworkSettings" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-network-settings-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-network-settings-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-network-settings-response
                    'make-get-network-settings-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-network-settings-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-network-settings-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-settings))
      (common-lisp:list
       (common-lisp:cons "networkSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-network-settings-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-portal-request common-lisp:nil
                       ((portal-arn :initarg :portal-arn :initform
                         (common-lisp:error ":portalarn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-get-portal-request-portal-arn :shape
                         "ARN" :location "uri" :location-name "portalArn"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-portal-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-portal-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-portal-request 'make-get-portal-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-portal-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-portal-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-portal-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-portal-response common-lisp:nil
                       ((portal :initarg :portal :initform common-lisp:nil
                         :type (common-lisp:or portal common-lisp:null)
                         :accessor struct-shape-get-portal-response-portal
                         :shape "Portal" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-portal-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-portal-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-portal-response 'make-get-portal-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-portal-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-portal-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'portal))
      (common-lisp:list
       (common-lisp:cons "portal"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-portal-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-portal-service-provider-metadata-request
                       common-lisp:nil
                       ((portal-arn :initarg :portal-arn :initform
                         (common-lisp:error ":portalarn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-get-portal-service-provider-metadata-request-portal-arn
                         :shape "ARN" :location "uri" :location-name
                         "portalArn"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-portal-service-provider-metadata-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-portal-service-provider-metadata-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-portal-service-provider-metadata-request
                    'make-get-portal-service-provider-metadata-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-portal-service-provider-metadata-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-portal-service-provider-metadata-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-portal-service-provider-metadata-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-portal-service-provider-metadata-response
                       common-lisp:nil
                       ((portal-arn :initarg :portal-arn :initform
                         (common-lisp:error ":portalarn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-get-portal-service-provider-metadata-response-portal-arn
                         :shape "ARN" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (service-provider-saml-metadata :initarg
                         :service-provider-saml-metadata :initform
                         common-lisp:nil :type
                         (common-lisp:or saml-metadata common-lisp:null)
                         :accessor
                         struct-shape-get-portal-service-provider-metadata-response-service-provider-saml-metadata
                         :shape "SamlMetadata" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-portal-service-provider-metadata-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-portal-service-provider-metadata-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-portal-service-provider-metadata-response
                    'make-get-portal-service-provider-metadata-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-portal-service-provider-metadata-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-portal-service-provider-metadata-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'portal-arn))
      (common-lisp:list
       (common-lisp:cons "portalArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'service-provider-saml-metadata))
      (common-lisp:list
       (common-lisp:cons "serviceProviderSamlMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-portal-service-provider-metadata-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-trust-store-certificate-request common-lisp:nil
                       ((thumbprint :initarg :thumbprint :initform
                         (common-lisp:error ":thumbprint is required") :type
                         (common-lisp:or certificate-thumbprint
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-trust-store-certificate-request-thumbprint
                         :shape "CertificateThumbprint" :location "querystring"
                         :location-name "thumbprint")
                        (trust-store-arn :initarg :trust-store-arn :initform
                         (common-lisp:error ":truststorearn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-get-trust-store-certificate-request-trust-store-arn
                         :shape "ARN" :location "uri" :location-name
                         "trustStoreArn"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-trust-store-certificate-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-trust-store-certificate-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-trust-store-certificate-request
                    'make-get-trust-store-certificate-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-trust-store-certificate-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-trust-store-certificate-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-trust-store-certificate-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-trust-store-certificate-response common-lisp:nil
                       ((certificate :initarg :certificate :initform
                         common-lisp:nil :type
                         (common-lisp:or certificate common-lisp:null)
                         :accessor
                         struct-shape-get-trust-store-certificate-response-certificate
                         :shape "Certificate" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (trust-store-arn :initarg :trust-store-arn :initform
                         (common-lisp:error ":truststorearn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-get-trust-store-certificate-response-trust-store-arn
                         :shape "ARN" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-trust-store-certificate-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-trust-store-certificate-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-trust-store-certificate-response
                    'make-get-trust-store-certificate-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-trust-store-certificate-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-trust-store-certificate-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate))
      (common-lisp:list
       (common-lisp:cons "certificate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trust-store-arn))
      (common-lisp:list
       (common-lisp:cons "trustStoreArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-trust-store-certificate-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-trust-store-request common-lisp:nil
                       ((trust-store-arn :initarg :trust-store-arn :initform
                         (common-lisp:error ":truststorearn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-get-trust-store-request-trust-store-arn
                         :shape "ARN" :location "uri" :location-name
                         "trustStoreArn"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-trust-store-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-trust-store-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-trust-store-request 'make-get-trust-store-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-trust-store-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-trust-store-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-trust-store-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-trust-store-response common-lisp:nil
                       ((trust-store :initarg :trust-store :initform
                         common-lisp:nil :type
                         (common-lisp:or trust-store common-lisp:null)
                         :accessor
                         struct-shape-get-trust-store-response-trust-store
                         :shape "TrustStore" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-trust-store-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-trust-store-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-trust-store-response 'make-get-trust-store-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-trust-store-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-trust-store-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trust-store))
      (common-lisp:list
       (common-lisp:cons "trustStore"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-trust-store-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-user-access-logging-settings-request common-lisp:nil
                       ((user-access-logging-settings-arn :initarg
                         :user-access-logging-settings-arn :initform
                         (common-lisp:error
                          ":useraccessloggingsettingsarn is required")
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-get-user-access-logging-settings-request-user-access-logging-settings-arn
                         :shape "ARN" :location "uri" :location-name
                         "userAccessLoggingSettingsArn"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-user-access-logging-settings-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-user-access-logging-settings-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-user-access-logging-settings-request
                    'make-get-user-access-logging-settings-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-user-access-logging-settings-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-user-access-logging-settings-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-user-access-logging-settings-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-user-access-logging-settings-response
                       common-lisp:nil
                       ((user-access-logging-settings :initarg
                         :user-access-logging-settings :initform
                         common-lisp:nil :type
                         (common-lisp:or user-access-logging-settings
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-user-access-logging-settings-response-user-access-logging-settings
                         :shape "UserAccessLoggingSettings" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-user-access-logging-settings-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-user-access-logging-settings-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-user-access-logging-settings-response
                    'make-get-user-access-logging-settings-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-user-access-logging-settings-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-user-access-logging-settings-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'user-access-logging-settings))
      (common-lisp:list
       (common-lisp:cons "userAccessLoggingSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-user-access-logging-settings-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-user-settings-request common-lisp:nil
                       ((user-settings-arn :initarg :user-settings-arn
                         :initform
                         (common-lisp:error ":usersettingsarn is required")
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-get-user-settings-request-user-settings-arn
                         :shape "ARN" :location "uri" :location-name
                         "userSettingsArn"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-user-settings-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-user-settings-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-user-settings-request
                    'make-get-user-settings-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-user-settings-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-user-settings-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-user-settings-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-user-settings-response common-lisp:nil
                       ((user-settings :initarg :user-settings :initform
                         common-lisp:nil :type
                         (common-lisp:or user-settings common-lisp:null)
                         :accessor
                         struct-shape-get-user-settings-response-user-settings
                         :shape "UserSettings" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-user-settings-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-user-settings-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-user-settings-response
                    'make-get-user-settings-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-user-settings-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-user-settings-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-settings))
      (common-lisp:list
       (common-lisp:cons "userSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-user-settings-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass identity-provider common-lisp:nil
                       ((identity-provider-arn :initarg :identity-provider-arn
                         :initform
                         (common-lisp:error ":identityproviderarn is required")
                         :type
                         (common-lisp:or subresource-arn common-lisp:null)
                         :accessor
                         struct-shape-identity-provider-identity-provider-arn
                         :shape "SubresourceARN" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (identity-provider-details :initarg
                         :identity-provider-details :initform common-lisp:nil
                         :type
                         (common-lisp:or identity-provider-details
                                         common-lisp:null)
                         :accessor
                         struct-shape-identity-provider-identity-provider-details
                         :shape "IdentityProviderDetails" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (identity-provider-name :initarg
                         :identity-provider-name :initform common-lisp:nil
                         :type
                         (common-lisp:or identity-provider-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-identity-provider-identity-provider-name
                         :shape "IdentityProviderName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (identity-provider-type :initarg
                         :identity-provider-type :initform common-lisp:nil
                         :type
                         (common-lisp:or identity-provider-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-identity-provider-identity-provider-type
                         :shape "IdentityProviderType" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-identity-provider
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'identity-provider
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'identity-provider 'make-identity-provider))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input identity-provider))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input identity-provider))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'identity-provider-arn))
      (common-lisp:list
       (common-lisp:cons "identityProviderArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'identity-provider-details))
      (common-lisp:list
       (common-lisp:cons "identityProviderDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'identity-provider-name))
      (common-lisp:list
       (common-lisp:cons "identityProviderName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'identity-provider-type))
      (common-lisp:list
       (common-lisp:cons "identityProviderType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input identity-provider))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype identity-provider-details () 'common-lisp:hash-table)
 (common-lisp:defun make-identity-provider-details
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:deftype identity-provider-list ()
   '(trivial-types:proper-list identity-provider-summary))
 (common-lisp:defun make-identity-provider-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            identity-provider-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype identity-provider-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass identity-provider-summary common-lisp:nil
                       ((identity-provider-arn :initarg :identity-provider-arn
                         :initform
                         (common-lisp:error ":identityproviderarn is required")
                         :type
                         (common-lisp:or subresource-arn common-lisp:null)
                         :accessor
                         struct-shape-identity-provider-summary-identity-provider-arn
                         :shape "SubresourceARN" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (identity-provider-name :initarg
                         :identity-provider-name :initform common-lisp:nil
                         :type
                         (common-lisp:or identity-provider-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-identity-provider-summary-identity-provider-name
                         :shape "IdentityProviderName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (identity-provider-type :initarg
                         :identity-provider-type :initform common-lisp:nil
                         :type
                         (common-lisp:or identity-provider-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-identity-provider-summary-identity-provider-type
                         :shape "IdentityProviderType" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-identity-provider-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'identity-provider-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'identity-provider-summary
                    'make-identity-provider-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          identity-provider-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          identity-provider-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'identity-provider-arn))
      (common-lisp:list
       (common-lisp:cons "identityProviderArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'identity-provider-name))
      (common-lisp:list
       (common-lisp:cons "identityProviderName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'identity-provider-type))
      (common-lisp:list
       (common-lisp:cons "identityProviderType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          identity-provider-summary))
   common-lisp:nil))
(common-lisp:deftype identity-provider-type () 'common-lisp:string)
(common-lisp:deftype idle-disconnect-timeout-in-minutes () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition internal-server-exception
     (workspaces-web-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       internal-server-exception-message)
      (retry-after-seconds :initarg :retry-after-seconds :initform
       common-lisp:nil :reader internal-server-exception-retry-after-seconds)))
 (common-lisp:export
  (common-lisp:list 'internal-server-exception
                    'internal-server-exception-message
                    'internal-server-exception-retry-after-seconds)))
(common-lisp:progn
 (common-lisp:defclass ip-access-settings common-lisp:nil
                       ((associated-portal-arns :initarg
                         :associated-portal-arns :initform common-lisp:nil
                         :type (common-lisp:or arn-list common-lisp:null)
                         :accessor
                         struct-shape-ip-access-settings-associated-portal-arns
                         :shape "ArnList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (creation-date :initarg :creation-date :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-ip-access-settings-creation-date :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor struct-shape-ip-access-settings-description
                         :shape "Description" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (display-name :initarg :display-name :initform
                         common-lisp:nil :type
                         (common-lisp:or display-name common-lisp:null)
                         :accessor struct-shape-ip-access-settings-display-name
                         :shape "DisplayName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (ip-access-settings-arn :initarg
                         :ip-access-settings-arn :initform
                         (common-lisp:error ":ipaccesssettingsarn is required")
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-ip-access-settings-ip-access-settings-arn
                         :shape "ARN" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (ip-rules :initarg :ip-rules :initform common-lisp:nil
                         :type (common-lisp:or ip-rule-list common-lisp:null)
                         :accessor struct-shape-ip-access-settings-ip-rules
                         :shape "IpRuleList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-ip-access-settings
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'ip-access-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'ip-access-settings 'make-ip-access-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input ip-access-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input ip-access-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'associated-portal-arns))
      (common-lisp:list
       (common-lisp:cons "associatedPortalArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "creationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-name))
      (common-lisp:list
       (common-lisp:cons "displayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ip-access-settings-arn))
      (common-lisp:list
       (common-lisp:cons "ipAccessSettingsArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-rules))
      (common-lisp:list
       (common-lisp:cons "ipRules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input ip-access-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype ip-access-settings-list ()
   '(trivial-types:proper-list ip-access-settings-summary))
 (common-lisp:defun make-ip-access-settings-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            ip-access-settings-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass ip-access-settings-summary common-lisp:nil
                       ((creation-date :initarg :creation-date :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-ip-access-settings-summary-creation-date
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor
                         struct-shape-ip-access-settings-summary-description
                         :shape "Description" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (display-name :initarg :display-name :initform
                         common-lisp:nil :type
                         (common-lisp:or display-name common-lisp:null)
                         :accessor
                         struct-shape-ip-access-settings-summary-display-name
                         :shape "DisplayName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (ip-access-settings-arn :initarg
                         :ip-access-settings-arn :initform
                         (common-lisp:error ":ipaccesssettingsarn is required")
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-ip-access-settings-summary-ip-access-settings-arn
                         :shape "ARN" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-ip-access-settings-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'ip-access-settings-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'ip-access-settings-summary
                    'make-ip-access-settings-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          ip-access-settings-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          ip-access-settings-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "creationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-name))
      (common-lisp:list
       (common-lisp:cons "displayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ip-access-settings-arn))
      (common-lisp:list
       (common-lisp:cons "ipAccessSettingsArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          ip-access-settings-summary))
   common-lisp:nil))
(common-lisp:deftype ip-range () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass ip-rule common-lisp:nil
                       ((description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor struct-shape-ip-rule-description :shape
                         "Description" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (ip-range :initarg :ip-range :initform
                         (common-lisp:error ":iprange is required") :type
                         (common-lisp:or ip-range common-lisp:null) :accessor
                         struct-shape-ip-rule-ip-range :shape "IpRange"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-ip-rule
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'ip-rule
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'ip-rule 'make-ip-rule))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input ip-rule))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input ip-rule))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-range))
      (common-lisp:list
       (common-lisp:cons "ipRange"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input ip-rule))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype ip-rule-list () '(trivial-types:proper-list ip-rule))
 (common-lisp:defun make-ip-rule-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list ip-rule))
   aws-sdk/generator/shape::members))
(common-lisp:deftype kinesis-stream-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass list-browser-settings-request common-lisp:nil
                       ((max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-browser-settings-request-max-results
                         :shape "MaxResults" :location "querystring"
                         :location-name "maxResults")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-browser-settings-request-next-token
                         :shape "PaginationToken" :location "querystring"
                         :location-name "nextToken"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-browser-settings-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-browser-settings-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-browser-settings-request
                    'make-list-browser-settings-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-browser-settings-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-browser-settings-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-browser-settings-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-browser-settings-response common-lisp:nil
                       ((browser-settings :initarg :browser-settings :initform
                         common-lisp:nil :type
                         (common-lisp:or browser-settings-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-browser-settings-response-browser-settings
                         :shape "BrowserSettingsList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-browser-settings-response-next-token
                         :shape "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-browser-settings-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-browser-settings-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-browser-settings-response
                    'make-list-browser-settings-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-browser-settings-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-browser-settings-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'browser-settings))
      (common-lisp:list
       (common-lisp:cons "browserSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-browser-settings-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-identity-providers-request common-lisp:nil
                       ((max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-identity-providers-request-max-results
                         :shape "MaxResults" :location "querystring"
                         :location-name "maxResults")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-identity-providers-request-next-token
                         :shape "PaginationToken" :location "querystring"
                         :location-name "nextToken")
                        (portal-arn :initarg :portal-arn :initform
                         (common-lisp:error ":portalarn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-list-identity-providers-request-portal-arn
                         :shape "ARN" :location "uri" :location-name
                         "portalArn"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-identity-providers-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-identity-providers-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-identity-providers-request
                    'make-list-identity-providers-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-identity-providers-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-identity-providers-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-identity-providers-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-identity-providers-response common-lisp:nil
                       ((identity-providers :initarg :identity-providers
                         :initform common-lisp:nil :type
                         (common-lisp:or identity-provider-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-identity-providers-response-identity-providers
                         :shape "IdentityProviderList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-identity-providers-response-next-token
                         :shape "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-identity-providers-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-identity-providers-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-identity-providers-response
                    'make-list-identity-providers-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-identity-providers-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-identity-providers-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identity-providers))
      (common-lisp:list
       (common-lisp:cons "identityProviders"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-identity-providers-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-ip-access-settings-request common-lisp:nil
                       ((max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-ip-access-settings-request-max-results
                         :shape "MaxResults" :location "querystring"
                         :location-name "maxResults")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-ip-access-settings-request-next-token
                         :shape "PaginationToken" :location "querystring"
                         :location-name "nextToken"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-ip-access-settings-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-ip-access-settings-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-ip-access-settings-request
                    'make-list-ip-access-settings-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-ip-access-settings-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-ip-access-settings-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-ip-access-settings-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-ip-access-settings-response common-lisp:nil
                       ((ip-access-settings :initarg :ip-access-settings
                         :initform common-lisp:nil :type
                         (common-lisp:or ip-access-settings-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-ip-access-settings-response-ip-access-settings
                         :shape "IpAccessSettingsList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-ip-access-settings-response-next-token
                         :shape "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-ip-access-settings-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-ip-access-settings-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-ip-access-settings-response
                    'make-list-ip-access-settings-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-ip-access-settings-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-ip-access-settings-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-access-settings))
      (common-lisp:list
       (common-lisp:cons "ipAccessSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-ip-access-settings-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-network-settings-request common-lisp:nil
                       ((max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-network-settings-request-max-results
                         :shape "MaxResults" :location "querystring"
                         :location-name "maxResults")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-network-settings-request-next-token
                         :shape "PaginationToken" :location "querystring"
                         :location-name "nextToken"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-network-settings-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-network-settings-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-network-settings-request
                    'make-list-network-settings-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-network-settings-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-network-settings-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-network-settings-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-network-settings-response common-lisp:nil
                       ((network-settings :initarg :network-settings :initform
                         common-lisp:nil :type
                         (common-lisp:or network-settings-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-network-settings-response-network-settings
                         :shape "NetworkSettingsList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-network-settings-response-next-token
                         :shape "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-network-settings-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-network-settings-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-network-settings-response
                    'make-list-network-settings-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-network-settings-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-network-settings-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-settings))
      (common-lisp:list
       (common-lisp:cons "networkSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-network-settings-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-portals-request common-lisp:nil
                       ((max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-portals-request-max-results :shape
                         "MaxResults" :location "querystring" :location-name
                         "maxResults")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor struct-shape-list-portals-request-next-token
                         :shape "PaginationToken" :location "querystring"
                         :location-name "nextToken"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-portals-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-portals-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-portals-request 'make-list-portals-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-portals-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-portals-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-portals-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-portals-response common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-portals-response-next-token :shape
                         "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (portals :initarg :portals :initform common-lisp:nil
                         :type (common-lisp:or portal-list common-lisp:null)
                         :accessor struct-shape-list-portals-response-portals
                         :shape "PortalList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-portals-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-portals-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-portals-response 'make-list-portals-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-portals-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-portals-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'portals))
      (common-lisp:list
       (common-lisp:cons "portals"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-portals-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-request common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resourcearn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-list-tags-for-resource-request-resource-arn
                         :shape "ARN" :location "uri" :location-name
                         "resourceArn"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-tags-for-resource-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-request
                    'make-list-tags-for-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-response common-lisp:nil
                       ((tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-list-tags-for-resource-response-tags
                         :shape "TagList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-tags-for-resource-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-response
                    'make-list-tags-for-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-trust-store-certificates-request common-lisp:nil
                       ((max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-trust-store-certificates-request-max-results
                         :shape "MaxResults" :location "querystring"
                         :location-name "maxResults")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-trust-store-certificates-request-next-token
                         :shape "PaginationToken" :location "querystring"
                         :location-name "nextToken")
                        (trust-store-arn :initarg :trust-store-arn :initform
                         (common-lisp:error ":truststorearn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-list-trust-store-certificates-request-trust-store-arn
                         :shape "ARN" :location "uri" :location-name
                         "trustStoreArn"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-trust-store-certificates-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-trust-store-certificates-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-trust-store-certificates-request
                    'make-list-trust-store-certificates-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-trust-store-certificates-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-trust-store-certificates-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-trust-store-certificates-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-trust-store-certificates-response common-lisp:nil
                       ((certificate-list :initarg :certificate-list :initform
                         common-lisp:nil :type
                         (common-lisp:or certificate-summary-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-trust-store-certificates-response-certificate-list
                         :shape "CertificateSummaryList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-trust-store-certificates-response-next-token
                         :shape "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (trust-store-arn :initarg :trust-store-arn :initform
                         (common-lisp:error ":truststorearn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-list-trust-store-certificates-response-trust-store-arn
                         :shape "ARN" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-trust-store-certificates-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-trust-store-certificates-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-trust-store-certificates-response
                    'make-list-trust-store-certificates-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-trust-store-certificates-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-trust-store-certificates-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-list))
      (common-lisp:list
       (common-lisp:cons "certificateList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trust-store-arn))
      (common-lisp:list
       (common-lisp:cons "trustStoreArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-trust-store-certificates-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-trust-stores-request common-lisp:nil
                       ((max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-trust-stores-request-max-results
                         :shape "MaxResults" :location "querystring"
                         :location-name "maxResults")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-trust-stores-request-next-token
                         :shape "PaginationToken" :location "querystring"
                         :location-name "nextToken"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-trust-stores-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-trust-stores-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-trust-stores-request
                    'make-list-trust-stores-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-trust-stores-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-trust-stores-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-trust-stores-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-trust-stores-response common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-trust-stores-response-next-token
                         :shape "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (trust-stores :initarg :trust-stores :initform
                         common-lisp:nil :type
                         (common-lisp:or trust-store-summary-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-trust-stores-response-trust-stores
                         :shape "TrustStoreSummaryList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-trust-stores-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-trust-stores-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-trust-stores-response
                    'make-list-trust-stores-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-trust-stores-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-trust-stores-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trust-stores))
      (common-lisp:list
       (common-lisp:cons "trustStores"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-trust-stores-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-user-access-logging-settings-request
                       common-lisp:nil
                       ((max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-user-access-logging-settings-request-max-results
                         :shape "MaxResults" :location "querystring"
                         :location-name "maxResults")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-user-access-logging-settings-request-next-token
                         :shape "PaginationToken" :location "querystring"
                         :location-name "nextToken"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-user-access-logging-settings-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-user-access-logging-settings-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-user-access-logging-settings-request
                    'make-list-user-access-logging-settings-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-user-access-logging-settings-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-user-access-logging-settings-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-user-access-logging-settings-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-user-access-logging-settings-response
                       common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-user-access-logging-settings-response-next-token
                         :shape "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (user-access-logging-settings :initarg
                         :user-access-logging-settings :initform
                         common-lisp:nil :type
                         (common-lisp:or user-access-logging-settings-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-user-access-logging-settings-response-user-access-logging-settings
                         :shape "UserAccessLoggingSettingsList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-user-access-logging-settings-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-user-access-logging-settings-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-user-access-logging-settings-response
                    'make-list-user-access-logging-settings-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-user-access-logging-settings-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-user-access-logging-settings-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'user-access-logging-settings))
      (common-lisp:list
       (common-lisp:cons "userAccessLoggingSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-user-access-logging-settings-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-user-settings-request common-lisp:nil
                       ((max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-user-settings-request-max-results
                         :shape "MaxResults" :location "querystring"
                         :location-name "maxResults")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-user-settings-request-next-token
                         :shape "PaginationToken" :location "querystring"
                         :location-name "nextToken"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-user-settings-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-user-settings-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-user-settings-request
                    'make-list-user-settings-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-user-settings-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-user-settings-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-user-settings-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-user-settings-response common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-user-settings-response-next-token
                         :shape "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (user-settings :initarg :user-settings :initform
                         common-lisp:nil :type
                         (common-lisp:or user-settings-list common-lisp:null)
                         :accessor
                         struct-shape-list-user-settings-response-user-settings
                         :shape "UserSettingsList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-user-settings-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-user-settings-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-user-settings-response
                    'make-list-user-settings-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-user-settings-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-user-settings-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-settings))
      (common-lisp:list
       (common-lisp:cons "userSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-user-settings-response))
   common-lisp:nil))
(common-lisp:deftype max-results () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass network-settings common-lisp:nil
                       ((associated-portal-arns :initarg
                         :associated-portal-arns :initform common-lisp:nil
                         :type (common-lisp:or arn-list common-lisp:null)
                         :accessor
                         struct-shape-network-settings-associated-portal-arns
                         :shape "ArnList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (network-settings-arn :initarg :network-settings-arn
                         :initform
                         (common-lisp:error ":networksettingsarn is required")
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-network-settings-network-settings-arn
                         :shape "ARN" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (security-group-ids :initarg :security-group-ids
                         :initform common-lisp:nil :type
                         (common-lisp:or security-group-id-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-network-settings-security-group-ids
                         :shape "SecurityGroupIdList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (subnet-ids :initarg :subnet-ids :initform
                         common-lisp:nil :type
                         (common-lisp:or subnet-id-list common-lisp:null)
                         :accessor struct-shape-network-settings-subnet-ids
                         :shape "SubnetIdList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (vpc-id :initarg :vpc-id :initform common-lisp:nil
                         :type (common-lisp:or vpc-id common-lisp:null)
                         :accessor struct-shape-network-settings-vpc-id :shape
                         "VpcId" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-network-settings
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'network-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'network-settings 'make-network-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input network-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input network-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'associated-portal-arns))
      (common-lisp:list
       (common-lisp:cons "associatedPortalArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'network-settings-arn))
      (common-lisp:list
       (common-lisp:cons "networkSettingsArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-group-ids))
      (common-lisp:list
       (common-lisp:cons "securityGroupIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-ids))
      (common-lisp:list
       (common-lisp:cons "subnetIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-id))
      (common-lisp:list
       (common-lisp:cons "vpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input network-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype network-settings-list ()
   '(trivial-types:proper-list network-settings-summary))
 (common-lisp:defun make-network-settings-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            network-settings-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass network-settings-summary common-lisp:nil
                       ((network-settings-arn :initarg :network-settings-arn
                         :initform
                         (common-lisp:error ":networksettingsarn is required")
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-network-settings-summary-network-settings-arn
                         :shape "ARN" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (vpc-id :initarg :vpc-id :initform common-lisp:nil
                         :type (common-lisp:or vpc-id common-lisp:null)
                         :accessor struct-shape-network-settings-summary-vpc-id
                         :shape "VpcId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-network-settings-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'network-settings-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'network-settings-summary 'make-network-settings-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          network-settings-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          network-settings-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'network-settings-arn))
      (common-lisp:list
       (common-lisp:cons "networkSettingsArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-id))
      (common-lisp:list
       (common-lisp:cons "vpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          network-settings-summary))
   common-lisp:nil))
(common-lisp:deftype pagination-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass portal common-lisp:nil
                       ((authentication-type :initarg :authentication-type
                         :initform common-lisp:nil :type
                         (common-lisp:or authentication-type common-lisp:null)
                         :accessor struct-shape-portal-authentication-type
                         :shape "AuthenticationType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (browser-settings-arn :initarg :browser-settings-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-portal-browser-settings-arn :shape "ARN"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (browser-type :initarg :browser-type :initform
                         common-lisp:nil :type
                         (common-lisp:or browser-type common-lisp:null)
                         :accessor struct-shape-portal-browser-type :shape
                         "BrowserType" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (creation-date :initarg :creation-date :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-portal-creation-date :shape "Timestamp"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (display-name :initarg :display-name :initform
                         common-lisp:nil :type
                         (common-lisp:or display-name common-lisp:null)
                         :accessor struct-shape-portal-display-name :shape
                         "DisplayName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (ip-access-settings-arn :initarg
                         :ip-access-settings-arn :initform common-lisp:nil
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-portal-ip-access-settings-arn :shape
                         "ARN" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (network-settings-arn :initarg :network-settings-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-portal-network-settings-arn :shape "ARN"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (portal-arn :initarg :portal-arn :initform
                         (common-lisp:error ":portalarn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-portal-portal-arn :shape "ARN" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (portal-endpoint :initarg :portal-endpoint :initform
                         common-lisp:nil :type
                         (common-lisp:or portal-endpoint common-lisp:null)
                         :accessor struct-shape-portal-portal-endpoint :shape
                         "PortalEndpoint" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (portal-status :initarg :portal-status :initform
                         common-lisp:nil :type
                         (common-lisp:or portal-status common-lisp:null)
                         :accessor struct-shape-portal-portal-status :shape
                         "PortalStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (renderer-type :initarg :renderer-type :initform
                         common-lisp:nil :type
                         (common-lisp:or renderer-type common-lisp:null)
                         :accessor struct-shape-portal-renderer-type :shape
                         "RendererType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status-reason :initarg :status-reason :initform
                         common-lisp:nil :type
                         (common-lisp:or status-reason common-lisp:null)
                         :accessor struct-shape-portal-status-reason :shape
                         "StatusReason" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (trust-store-arn :initarg :trust-store-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-portal-trust-store-arn :shape "ARN"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (user-access-logging-settings-arn :initarg
                         :user-access-logging-settings-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-portal-user-access-logging-settings-arn
                         :shape "ARN" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (user-settings-arn :initarg :user-settings-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-portal-user-settings-arn :shape "ARN"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-portal
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'portal
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'portal 'make-portal))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input portal))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input portal))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'authentication-type))
      (common-lisp:list
       (common-lisp:cons "authenticationType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'browser-settings-arn))
      (common-lisp:list
       (common-lisp:cons "browserSettingsArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'browser-type))
      (common-lisp:list
       (common-lisp:cons "browserType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "creationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-name))
      (common-lisp:list
       (common-lisp:cons "displayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ip-access-settings-arn))
      (common-lisp:list
       (common-lisp:cons "ipAccessSettingsArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'network-settings-arn))
      (common-lisp:list
       (common-lisp:cons "networkSettingsArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'portal-arn))
      (common-lisp:list
       (common-lisp:cons "portalArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'portal-endpoint))
      (common-lisp:list
       (common-lisp:cons "portalEndpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'portal-status))
      (common-lisp:list
       (common-lisp:cons "portalStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'renderer-type))
      (common-lisp:list
       (common-lisp:cons "rendererType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-reason))
      (common-lisp:list
       (common-lisp:cons "statusReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trust-store-arn))
      (common-lisp:list
       (common-lisp:cons "trustStoreArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'user-access-logging-settings-arn))
      (common-lisp:list
       (common-lisp:cons "userAccessLoggingSettingsArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-settings-arn))
      (common-lisp:list
       (common-lisp:cons "userSettingsArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input portal))
   common-lisp:nil))
(common-lisp:deftype portal-endpoint () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype portal-list ()
   '(trivial-types:proper-list portal-summary))
 (common-lisp:defun make-portal-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list portal-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype portal-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass portal-summary common-lisp:nil
                       ((authentication-type :initarg :authentication-type
                         :initform common-lisp:nil :type
                         (common-lisp:or authentication-type common-lisp:null)
                         :accessor
                         struct-shape-portal-summary-authentication-type :shape
                         "AuthenticationType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (browser-settings-arn :initarg :browser-settings-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-portal-summary-browser-settings-arn
                         :shape "ARN" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (browser-type :initarg :browser-type :initform
                         common-lisp:nil :type
                         (common-lisp:or browser-type common-lisp:null)
                         :accessor struct-shape-portal-summary-browser-type
                         :shape "BrowserType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (creation-date :initarg :creation-date :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-portal-summary-creation-date :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (display-name :initarg :display-name :initform
                         common-lisp:nil :type
                         (common-lisp:or display-name common-lisp:null)
                         :accessor struct-shape-portal-summary-display-name
                         :shape "DisplayName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (ip-access-settings-arn :initarg
                         :ip-access-settings-arn :initform common-lisp:nil
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-portal-summary-ip-access-settings-arn
                         :shape "ARN" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (network-settings-arn :initarg :network-settings-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-portal-summary-network-settings-arn
                         :shape "ARN" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (portal-arn :initarg :portal-arn :initform
                         (common-lisp:error ":portalarn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-portal-summary-portal-arn :shape "ARN"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (portal-endpoint :initarg :portal-endpoint :initform
                         common-lisp:nil :type
                         (common-lisp:or portal-endpoint common-lisp:null)
                         :accessor struct-shape-portal-summary-portal-endpoint
                         :shape "PortalEndpoint" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (portal-status :initarg :portal-status :initform
                         common-lisp:nil :type
                         (common-lisp:or portal-status common-lisp:null)
                         :accessor struct-shape-portal-summary-portal-status
                         :shape "PortalStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (renderer-type :initarg :renderer-type :initform
                         common-lisp:nil :type
                         (common-lisp:or renderer-type common-lisp:null)
                         :accessor struct-shape-portal-summary-renderer-type
                         :shape "RendererType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (trust-store-arn :initarg :trust-store-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-portal-summary-trust-store-arn :shape
                         "ARN" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (user-access-logging-settings-arn :initarg
                         :user-access-logging-settings-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-portal-summary-user-access-logging-settings-arn
                         :shape "ARN" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (user-settings-arn :initarg :user-settings-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-portal-summary-user-settings-arn :shape
                         "ARN" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-portal-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'portal-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'portal-summary 'make-portal-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input portal-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input portal-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'authentication-type))
      (common-lisp:list
       (common-lisp:cons "authenticationType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'browser-settings-arn))
      (common-lisp:list
       (common-lisp:cons "browserSettingsArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'browser-type))
      (common-lisp:list
       (common-lisp:cons "browserType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "creationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-name))
      (common-lisp:list
       (common-lisp:cons "displayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ip-access-settings-arn))
      (common-lisp:list
       (common-lisp:cons "ipAccessSettingsArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'network-settings-arn))
      (common-lisp:list
       (common-lisp:cons "networkSettingsArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'portal-arn))
      (common-lisp:list
       (common-lisp:cons "portalArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'portal-endpoint))
      (common-lisp:list
       (common-lisp:cons "portalEndpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'portal-status))
      (common-lisp:list
       (common-lisp:cons "portalStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'renderer-type))
      (common-lisp:list
       (common-lisp:cons "rendererType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trust-store-arn))
      (common-lisp:list
       (common-lisp:cons "trustStoreArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'user-access-logging-settings-arn))
      (common-lisp:list
       (common-lisp:cons "userAccessLoggingSettingsArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-settings-arn))
      (common-lisp:list
       (common-lisp:cons "userSettingsArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input portal-summary))
   common-lisp:nil))
(common-lisp:deftype quota-code () 'common-lisp:string)
(common-lisp:deftype renderer-type () 'common-lisp:string)
(common-lisp:deftype resource-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-exception
     (workspaces-web-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-not-found-exception-message)
      (resource-id :initarg :resource-id :initform common-lisp:nil :reader
       resource-not-found-exception-resource-id)
      (resource-type :initarg :resource-type :initform common-lisp:nil :reader
       resource-not-found-exception-resource-type)))
 (common-lisp:export
  (common-lisp:list 'resource-not-found-exception
                    'resource-not-found-exception-message
                    'resource-not-found-exception-resource-id
                    'resource-not-found-exception-resource-type)))
(common-lisp:deftype resource-type () 'common-lisp:string)
(common-lisp:deftype retry-after-seconds () 'common-lisp:integer)
(common-lisp:deftype saml-metadata () 'common-lisp:string)
(common-lisp:deftype security-group-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype security-group-id-list ()
   '(trivial-types:proper-list security-group-id))
 (common-lisp:defun make-security-group-id-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list security-group-id))
   aws-sdk/generator/shape::members))
(common-lisp:deftype service-code () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition service-quota-exceeded-exception
     (workspaces-web-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       service-quota-exceeded-exception-message)
      (quota-code :initarg :quota-code :initform common-lisp:nil :reader
       service-quota-exceeded-exception-quota-code)
      (resource-id :initarg :resource-id :initform common-lisp:nil :reader
       service-quota-exceeded-exception-resource-id)
      (resource-type :initarg :resource-type :initform common-lisp:nil :reader
       service-quota-exceeded-exception-resource-type)
      (service-code :initarg :service-code :initform common-lisp:nil :reader
       service-quota-exceeded-exception-service-code)))
 (common-lisp:export
  (common-lisp:list 'service-quota-exceeded-exception
                    'service-quota-exceeded-exception-message
                    'service-quota-exceeded-exception-quota-code
                    'service-quota-exceeded-exception-resource-id
                    'service-quota-exceeded-exception-resource-type
                    'service-quota-exceeded-exception-service-code)))
(common-lisp:deftype status-reason () 'common-lisp:string)
(common-lisp:deftype string-type () 'common-lisp:string)
(common-lisp:deftype subnet-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype subnet-id-list () '(trivial-types:proper-list subnet-id))
 (common-lisp:defun make-subnet-id-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list subnet-id))
   aws-sdk/generator/shape::members))
(common-lisp:deftype subresource-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass tag common-lisp:nil
                       ((key :initarg :key :initform
                         (common-lisp:error ":key is required") :type
                         (common-lisp:or tag-key common-lisp:null) :accessor
                         struct-shape-tag-key :shape "TagKey" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (value :initarg :value :initform
                         (common-lisp:error ":value is required") :type
                         (common-lisp:or tag-value common-lisp:null) :accessor
                         struct-shape-tag-value :shape "TagValue" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tag (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'tag
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'tag 'make-tag))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag))
   common-lisp:nil))
(common-lisp:deftype tag-exception-message () 'common-lisp:string)
(common-lisp:deftype tag-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tag-key-list () '(trivial-types:proper-list tag-key))
 (common-lisp:defun make-tag-key-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype tag-list () '(trivial-types:proper-list tag))
 (common-lisp:defun make-tag-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass tag-resource-request common-lisp:nil
                       ((client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor
                         struct-shape-tag-resource-request-client-token :shape
                         "ClientToken" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resourcearn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-tag-resource-request-resource-arn :shape
                         "ARN" :location "uri" :location-name "resourceArn")
                        (tags :initarg :tags :initform
                         (common-lisp:error ":tags is required") :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-tag-resource-request-tags :shape
                         "TagList" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tag-resource-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'tag-resource-request 'make-tag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass tag-resource-response common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tag-resource-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'tag-resource-response 'make-tag-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   common-lisp:nil))
(common-lisp:deftype tag-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition throttling-exception
     (workspaces-web-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       throttling-exception-message)
      (quota-code :initarg :quota-code :initform common-lisp:nil :reader
       throttling-exception-quota-code)
      (retry-after-seconds :initarg :retry-after-seconds :initform
       common-lisp:nil :reader throttling-exception-retry-after-seconds)
      (service-code :initarg :service-code :initform common-lisp:nil :reader
       throttling-exception-service-code)))
 (common-lisp:export
  (common-lisp:list 'throttling-exception 'throttling-exception-message
                    'throttling-exception-quota-code
                    'throttling-exception-retry-after-seconds
                    'throttling-exception-service-code)))
(common-lisp:deftype timestamp () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition too-many-tags-exception
     (workspaces-web-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       too-many-tags-exception-message)
      (resource-name :initarg :resource-name :initform common-lisp:nil :reader
       too-many-tags-exception-resource-name)))
 (common-lisp:export
  (common-lisp:list 'too-many-tags-exception 'too-many-tags-exception-message
                    'too-many-tags-exception-resource-name)))
(common-lisp:progn
 (common-lisp:defclass trust-store common-lisp:nil
                       ((associated-portal-arns :initarg
                         :associated-portal-arns :initform common-lisp:nil
                         :type (common-lisp:or arn-list common-lisp:null)
                         :accessor
                         struct-shape-trust-store-associated-portal-arns :shape
                         "ArnList" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (trust-store-arn :initarg :trust-store-arn :initform
                         (common-lisp:error ":truststorearn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-trust-store-trust-store-arn :shape "ARN"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-trust-store
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'trust-store
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'trust-store 'make-trust-store))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input trust-store))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input trust-store))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'associated-portal-arns))
      (common-lisp:list
       (common-lisp:cons "associatedPortalArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trust-store-arn))
      (common-lisp:list
       (common-lisp:cons "trustStoreArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input trust-store))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass trust-store-summary common-lisp:nil
                       ((trust-store-arn :initarg :trust-store-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-trust-store-summary-trust-store-arn
                         :shape "ARN" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-trust-store-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'trust-store-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'trust-store-summary 'make-trust-store-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input trust-store-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input trust-store-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trust-store-arn))
      (common-lisp:list
       (common-lisp:cons "trustStoreArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input trust-store-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype trust-store-summary-list ()
   '(trivial-types:proper-list trust-store-summary))
 (common-lisp:defun make-trust-store-summary-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list trust-store-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass untag-resource-request common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resourcearn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-untag-resource-request-resource-arn
                         :shape "ARN" :location "uri" :location-name
                         "resourceArn")
                        (tag-keys :initarg :tag-keys :initform
                         (common-lisp:error ":tagkeys is required") :type
                         (common-lisp:or tag-key-list common-lisp:null)
                         :accessor struct-shape-untag-resource-request-tag-keys
                         :shape "TagKeyList" :location "querystring"
                         :location-name "tagKeys"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-untag-resource-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'untag-resource-request 'make-untag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass untag-resource-response common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-untag-resource-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'untag-resource-response 'make-untag-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-browser-settings-request common-lisp:nil
                       ((browser-policy :initarg :browser-policy :initform
                         common-lisp:nil :type
                         (common-lisp:or browser-policy common-lisp:null)
                         :accessor
                         struct-shape-update-browser-settings-request-browser-policy
                         :shape "BrowserPolicy" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (browser-settings-arn :initarg :browser-settings-arn
                         :initform
                         (common-lisp:error ":browsersettingsarn is required")
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-update-browser-settings-request-browser-settings-arn
                         :shape "ARN" :location "uri" :location-name
                         "browserSettingsArn")
                        (client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor
                         struct-shape-update-browser-settings-request-client-token
                         :shape "ClientToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-browser-settings-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-browser-settings-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-browser-settings-request
                    'make-update-browser-settings-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-browser-settings-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-browser-settings-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'browser-policy))
      (common-lisp:list
       (common-lisp:cons "browserPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-browser-settings-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-browser-settings-response common-lisp:nil
                       ((browser-settings :initarg :browser-settings :initform
                         (common-lisp:error ":browsersettings is required")
                         :type
                         (common-lisp:or browser-settings common-lisp:null)
                         :accessor
                         struct-shape-update-browser-settings-response-browser-settings
                         :shape "BrowserSettings" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-browser-settings-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-browser-settings-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-browser-settings-response
                    'make-update-browser-settings-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-browser-settings-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-browser-settings-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'browser-settings))
      (common-lisp:list
       (common-lisp:cons "browserSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-browser-settings-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-identity-provider-request common-lisp:nil
                       ((client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor
                         struct-shape-update-identity-provider-request-client-token
                         :shape "ClientToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (identity-provider-arn :initarg :identity-provider-arn
                         :initform
                         (common-lisp:error ":identityproviderarn is required")
                         :type
                         (common-lisp:or subresource-arn common-lisp:null)
                         :accessor
                         struct-shape-update-identity-provider-request-identity-provider-arn
                         :shape "SubresourceARN" :location "uri" :location-name
                         "identityProviderArn")
                        (identity-provider-details :initarg
                         :identity-provider-details :initform common-lisp:nil
                         :type
                         (common-lisp:or identity-provider-details
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-identity-provider-request-identity-provider-details
                         :shape "IdentityProviderDetails" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (identity-provider-name :initarg
                         :identity-provider-name :initform common-lisp:nil
                         :type
                         (common-lisp:or identity-provider-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-identity-provider-request-identity-provider-name
                         :shape "IdentityProviderName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (identity-provider-type :initarg
                         :identity-provider-type :initform common-lisp:nil
                         :type
                         (common-lisp:or identity-provider-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-identity-provider-request-identity-provider-type
                         :shape "IdentityProviderType" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-identity-provider-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-identity-provider-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-identity-provider-request
                    'make-update-identity-provider-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-identity-provider-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-identity-provider-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'identity-provider-details))
      (common-lisp:list
       (common-lisp:cons "identityProviderDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'identity-provider-name))
      (common-lisp:list
       (common-lisp:cons "identityProviderName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'identity-provider-type))
      (common-lisp:list
       (common-lisp:cons "identityProviderType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-identity-provider-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-identity-provider-response common-lisp:nil
                       ((identity-provider :initarg :identity-provider
                         :initform
                         (common-lisp:error ":identityprovider is required")
                         :type
                         (common-lisp:or identity-provider common-lisp:null)
                         :accessor
                         struct-shape-update-identity-provider-response-identity-provider
                         :shape "IdentityProvider" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-identity-provider-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-identity-provider-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-identity-provider-response
                    'make-update-identity-provider-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-identity-provider-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-identity-provider-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identity-provider))
      (common-lisp:list
       (common-lisp:cons "identityProvider"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-identity-provider-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-ip-access-settings-request common-lisp:nil
                       ((client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor
                         struct-shape-update-ip-access-settings-request-client-token
                         :shape "ClientToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor
                         struct-shape-update-ip-access-settings-request-description
                         :shape "Description" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (display-name :initarg :display-name :initform
                         common-lisp:nil :type
                         (common-lisp:or display-name common-lisp:null)
                         :accessor
                         struct-shape-update-ip-access-settings-request-display-name
                         :shape "DisplayName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (ip-access-settings-arn :initarg
                         :ip-access-settings-arn :initform
                         (common-lisp:error ":ipaccesssettingsarn is required")
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-update-ip-access-settings-request-ip-access-settings-arn
                         :shape "ARN" :location "uri" :location-name
                         "ipAccessSettingsArn")
                        (ip-rules :initarg :ip-rules :initform common-lisp:nil
                         :type (common-lisp:or ip-rule-list common-lisp:null)
                         :accessor
                         struct-shape-update-ip-access-settings-request-ip-rules
                         :shape "IpRuleList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-ip-access-settings-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-ip-access-settings-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-ip-access-settings-request
                    'make-update-ip-access-settings-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-ip-access-settings-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-ip-access-settings-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-name))
      (common-lisp:list
       (common-lisp:cons "displayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-rules))
      (common-lisp:list
       (common-lisp:cons "ipRules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-ip-access-settings-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-ip-access-settings-response common-lisp:nil
                       ((ip-access-settings :initarg :ip-access-settings
                         :initform
                         (common-lisp:error ":ipaccesssettings is required")
                         :type
                         (common-lisp:or ip-access-settings common-lisp:null)
                         :accessor
                         struct-shape-update-ip-access-settings-response-ip-access-settings
                         :shape "IpAccessSettings" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-ip-access-settings-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-ip-access-settings-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-ip-access-settings-response
                    'make-update-ip-access-settings-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-ip-access-settings-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-ip-access-settings-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-access-settings))
      (common-lisp:list
       (common-lisp:cons "ipAccessSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-ip-access-settings-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-network-settings-request common-lisp:nil
                       ((client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor
                         struct-shape-update-network-settings-request-client-token
                         :shape "ClientToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (network-settings-arn :initarg :network-settings-arn
                         :initform
                         (common-lisp:error ":networksettingsarn is required")
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-update-network-settings-request-network-settings-arn
                         :shape "ARN" :location "uri" :location-name
                         "networkSettingsArn")
                        (security-group-ids :initarg :security-group-ids
                         :initform common-lisp:nil :type
                         (common-lisp:or security-group-id-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-network-settings-request-security-group-ids
                         :shape "SecurityGroupIdList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (subnet-ids :initarg :subnet-ids :initform
                         common-lisp:nil :type
                         (common-lisp:or subnet-id-list common-lisp:null)
                         :accessor
                         struct-shape-update-network-settings-request-subnet-ids
                         :shape "SubnetIdList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (vpc-id :initarg :vpc-id :initform common-lisp:nil
                         :type (common-lisp:or vpc-id common-lisp:null)
                         :accessor
                         struct-shape-update-network-settings-request-vpc-id
                         :shape "VpcId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-network-settings-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-network-settings-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-network-settings-request
                    'make-update-network-settings-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-network-settings-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-network-settings-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-group-ids))
      (common-lisp:list
       (common-lisp:cons "securityGroupIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-ids))
      (common-lisp:list
       (common-lisp:cons "subnetIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-id))
      (common-lisp:list
       (common-lisp:cons "vpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-network-settings-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-network-settings-response common-lisp:nil
                       ((network-settings :initarg :network-settings :initform
                         (common-lisp:error ":networksettings is required")
                         :type
                         (common-lisp:or network-settings common-lisp:null)
                         :accessor
                         struct-shape-update-network-settings-response-network-settings
                         :shape "NetworkSettings" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-network-settings-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-network-settings-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-network-settings-response
                    'make-update-network-settings-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-network-settings-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-network-settings-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-settings))
      (common-lisp:list
       (common-lisp:cons "networkSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-network-settings-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-portal-request common-lisp:nil
                       ((authentication-type :initarg :authentication-type
                         :initform common-lisp:nil :type
                         (common-lisp:or authentication-type common-lisp:null)
                         :accessor
                         struct-shape-update-portal-request-authentication-type
                         :shape "AuthenticationType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (display-name :initarg :display-name :initform
                         common-lisp:nil :type
                         (common-lisp:or display-name common-lisp:null)
                         :accessor
                         struct-shape-update-portal-request-display-name :shape
                         "DisplayName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (portal-arn :initarg :portal-arn :initform
                         (common-lisp:error ":portalarn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-update-portal-request-portal-arn :shape
                         "ARN" :location "uri" :location-name "portalArn"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-portal-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-portal-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-portal-request 'make-update-portal-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-portal-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-portal-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'authentication-type))
      (common-lisp:list
       (common-lisp:cons "authenticationType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-name))
      (common-lisp:list
       (common-lisp:cons "displayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-portal-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-portal-response common-lisp:nil
                       ((portal :initarg :portal :initform common-lisp:nil
                         :type (common-lisp:or portal common-lisp:null)
                         :accessor struct-shape-update-portal-response-portal
                         :shape "Portal" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-portal-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-portal-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-portal-response 'make-update-portal-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-portal-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-portal-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'portal))
      (common-lisp:list
       (common-lisp:cons "portal"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-portal-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-trust-store-request common-lisp:nil
                       ((certificates-to-add :initarg :certificates-to-add
                         :initform common-lisp:nil :type
                         (common-lisp:or certificate-list common-lisp:null)
                         :accessor
                         struct-shape-update-trust-store-request-certificates-to-add
                         :shape "CertificateList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (certificates-to-delete :initarg
                         :certificates-to-delete :initform common-lisp:nil
                         :type
                         (common-lisp:or certificate-thumbprint-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-trust-store-request-certificates-to-delete
                         :shape "CertificateThumbprintList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor
                         struct-shape-update-trust-store-request-client-token
                         :shape "ClientToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (trust-store-arn :initarg :trust-store-arn :initform
                         (common-lisp:error ":truststorearn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-update-trust-store-request-trust-store-arn
                         :shape "ARN" :location "uri" :location-name
                         "trustStoreArn"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-trust-store-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-trust-store-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-trust-store-request
                    'make-update-trust-store-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-trust-store-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-trust-store-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificates-to-add))
      (common-lisp:list
       (common-lisp:cons "certificatesToAdd"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'certificates-to-delete))
      (common-lisp:list
       (common-lisp:cons "certificatesToDelete"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-trust-store-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-trust-store-response common-lisp:nil
                       ((trust-store-arn :initarg :trust-store-arn :initform
                         (common-lisp:error ":truststorearn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-update-trust-store-response-trust-store-arn
                         :shape "ARN" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-trust-store-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-trust-store-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-trust-store-response
                    'make-update-trust-store-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-trust-store-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-trust-store-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trust-store-arn))
      (common-lisp:list
       (common-lisp:cons "trustStoreArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-trust-store-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-user-access-logging-settings-request
                       common-lisp:nil
                       ((client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor
                         struct-shape-update-user-access-logging-settings-request-client-token
                         :shape "ClientToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (kinesis-stream-arn :initarg :kinesis-stream-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or kinesis-stream-arn common-lisp:null)
                         :accessor
                         struct-shape-update-user-access-logging-settings-request-kinesis-stream-arn
                         :shape "KinesisStreamArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (user-access-logging-settings-arn :initarg
                         :user-access-logging-settings-arn :initform
                         (common-lisp:error
                          ":useraccessloggingsettingsarn is required")
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-update-user-access-logging-settings-request-user-access-logging-settings-arn
                         :shape "ARN" :location "uri" :location-name
                         "userAccessLoggingSettingsArn"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-user-access-logging-settings-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-user-access-logging-settings-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-user-access-logging-settings-request
                    'make-update-user-access-logging-settings-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-user-access-logging-settings-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-user-access-logging-settings-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kinesis-stream-arn))
      (common-lisp:list
       (common-lisp:cons "kinesisStreamArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-user-access-logging-settings-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-user-access-logging-settings-response
                       common-lisp:nil
                       ((user-access-logging-settings :initarg
                         :user-access-logging-settings :initform
                         (common-lisp:error
                          ":useraccessloggingsettings is required")
                         :type
                         (common-lisp:or user-access-logging-settings
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-user-access-logging-settings-response-user-access-logging-settings
                         :shape "UserAccessLoggingSettings" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-user-access-logging-settings-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-user-access-logging-settings-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-user-access-logging-settings-response
                    'make-update-user-access-logging-settings-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-user-access-logging-settings-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-user-access-logging-settings-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'user-access-logging-settings))
      (common-lisp:list
       (common-lisp:cons "userAccessLoggingSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-user-access-logging-settings-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-user-settings-request common-lisp:nil
                       ((client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor
                         struct-shape-update-user-settings-request-client-token
                         :shape "ClientToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cookie-synchronization-configuration :initarg
                         :cookie-synchronization-configuration :initform
                         common-lisp:nil :type
                         (common-lisp:or cookie-synchronization-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-user-settings-request-cookie-synchronization-configuration
                         :shape "CookieSynchronizationConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (copy-allowed :initarg :copy-allowed :initform
                         common-lisp:nil :type
                         (common-lisp:or enabled-type common-lisp:null)
                         :accessor
                         struct-shape-update-user-settings-request-copy-allowed
                         :shape "EnabledType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (disconnect-timeout-in-minutes :initarg
                         :disconnect-timeout-in-minutes :initform
                         common-lisp:nil :type
                         (common-lisp:or disconnect-timeout-in-minutes
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-user-settings-request-disconnect-timeout-in-minutes
                         :shape "DisconnectTimeoutInMinutes" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (download-allowed :initarg :download-allowed :initform
                         common-lisp:nil :type
                         (common-lisp:or enabled-type common-lisp:null)
                         :accessor
                         struct-shape-update-user-settings-request-download-allowed
                         :shape "EnabledType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (idle-disconnect-timeout-in-minutes :initarg
                         :idle-disconnect-timeout-in-minutes :initform
                         common-lisp:nil :type
                         (common-lisp:or idle-disconnect-timeout-in-minutes
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-user-settings-request-idle-disconnect-timeout-in-minutes
                         :shape "IdleDisconnectTimeoutInMinutes" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (paste-allowed :initarg :paste-allowed :initform
                         common-lisp:nil :type
                         (common-lisp:or enabled-type common-lisp:null)
                         :accessor
                         struct-shape-update-user-settings-request-paste-allowed
                         :shape "EnabledType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (print-allowed :initarg :print-allowed :initform
                         common-lisp:nil :type
                         (common-lisp:or enabled-type common-lisp:null)
                         :accessor
                         struct-shape-update-user-settings-request-print-allowed
                         :shape "EnabledType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (upload-allowed :initarg :upload-allowed :initform
                         common-lisp:nil :type
                         (common-lisp:or enabled-type common-lisp:null)
                         :accessor
                         struct-shape-update-user-settings-request-upload-allowed
                         :shape "EnabledType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (user-settings-arn :initarg :user-settings-arn
                         :initform
                         (common-lisp:error ":usersettingsarn is required")
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-update-user-settings-request-user-settings-arn
                         :shape "ARN" :location "uri" :location-name
                         "userSettingsArn"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-user-settings-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-user-settings-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-user-settings-request
                    'make-update-user-settings-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-user-settings-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-user-settings-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cookie-synchronization-configuration))
      (common-lisp:list
       (common-lisp:cons "cookieSynchronizationConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'copy-allowed))
      (common-lisp:list
       (common-lisp:cons "copyAllowed"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'disconnect-timeout-in-minutes))
      (common-lisp:list
       (common-lisp:cons "disconnectTimeoutInMinutes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'download-allowed))
      (common-lisp:list
       (common-lisp:cons "downloadAllowed"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'idle-disconnect-timeout-in-minutes))
      (common-lisp:list
       (common-lisp:cons "idleDisconnectTimeoutInMinutes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'paste-allowed))
      (common-lisp:list
       (common-lisp:cons "pasteAllowed"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'print-allowed))
      (common-lisp:list
       (common-lisp:cons "printAllowed"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'upload-allowed))
      (common-lisp:list
       (common-lisp:cons "uploadAllowed"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-user-settings-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-user-settings-response common-lisp:nil
                       ((user-settings :initarg :user-settings :initform
                         (common-lisp:error ":usersettings is required") :type
                         (common-lisp:or user-settings common-lisp:null)
                         :accessor
                         struct-shape-update-user-settings-response-user-settings
                         :shape "UserSettings" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-user-settings-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-user-settings-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-user-settings-response
                    'make-update-user-settings-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-user-settings-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-user-settings-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-settings))
      (common-lisp:list
       (common-lisp:cons "userSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-user-settings-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass user-access-logging-settings common-lisp:nil
                       ((associated-portal-arns :initarg
                         :associated-portal-arns :initform common-lisp:nil
                         :type (common-lisp:or arn-list common-lisp:null)
                         :accessor
                         struct-shape-user-access-logging-settings-associated-portal-arns
                         :shape "ArnList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (kinesis-stream-arn :initarg :kinesis-stream-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or kinesis-stream-arn common-lisp:null)
                         :accessor
                         struct-shape-user-access-logging-settings-kinesis-stream-arn
                         :shape "KinesisStreamArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (user-access-logging-settings-arn :initarg
                         :user-access-logging-settings-arn :initform
                         (common-lisp:error
                          ":useraccessloggingsettingsarn is required")
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-user-access-logging-settings-user-access-logging-settings-arn
                         :shape "ARN" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-user-access-logging-settings
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'user-access-logging-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'user-access-logging-settings
                    'make-user-access-logging-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          user-access-logging-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          user-access-logging-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'associated-portal-arns))
      (common-lisp:list
       (common-lisp:cons "associatedPortalArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kinesis-stream-arn))
      (common-lisp:list
       (common-lisp:cons "kinesisStreamArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'user-access-logging-settings-arn))
      (common-lisp:list
       (common-lisp:cons "userAccessLoggingSettingsArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          user-access-logging-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype user-access-logging-settings-list ()
   '(trivial-types:proper-list user-access-logging-settings-summary))
 (common-lisp:defun make-user-access-logging-settings-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            user-access-logging-settings-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass user-access-logging-settings-summary common-lisp:nil
                       ((kinesis-stream-arn :initarg :kinesis-stream-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or kinesis-stream-arn common-lisp:null)
                         :accessor
                         struct-shape-user-access-logging-settings-summary-kinesis-stream-arn
                         :shape "KinesisStreamArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (user-access-logging-settings-arn :initarg
                         :user-access-logging-settings-arn :initform
                         (common-lisp:error
                          ":useraccessloggingsettingsarn is required")
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-user-access-logging-settings-summary-user-access-logging-settings-arn
                         :shape "ARN" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-user-access-logging-settings-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'user-access-logging-settings-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'user-access-logging-settings-summary
                    'make-user-access-logging-settings-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          user-access-logging-settings-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          user-access-logging-settings-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kinesis-stream-arn))
      (common-lisp:list
       (common-lisp:cons "kinesisStreamArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'user-access-logging-settings-arn))
      (common-lisp:list
       (common-lisp:cons "userAccessLoggingSettingsArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          user-access-logging-settings-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass user-settings common-lisp:nil
                       ((associated-portal-arns :initarg
                         :associated-portal-arns :initform common-lisp:nil
                         :type (common-lisp:or arn-list common-lisp:null)
                         :accessor
                         struct-shape-user-settings-associated-portal-arns
                         :shape "ArnList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cookie-synchronization-configuration :initarg
                         :cookie-synchronization-configuration :initform
                         common-lisp:nil :type
                         (common-lisp:or cookie-synchronization-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-user-settings-cookie-synchronization-configuration
                         :shape "CookieSynchronizationConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (copy-allowed :initarg :copy-allowed :initform
                         common-lisp:nil :type
                         (common-lisp:or enabled-type common-lisp:null)
                         :accessor struct-shape-user-settings-copy-allowed
                         :shape "EnabledType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (disconnect-timeout-in-minutes :initarg
                         :disconnect-timeout-in-minutes :initform
                         common-lisp:nil :type
                         (common-lisp:or disconnect-timeout-in-minutes
                                         common-lisp:null)
                         :accessor
                         struct-shape-user-settings-disconnect-timeout-in-minutes
                         :shape "DisconnectTimeoutInMinutes" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (download-allowed :initarg :download-allowed :initform
                         common-lisp:nil :type
                         (common-lisp:or enabled-type common-lisp:null)
                         :accessor struct-shape-user-settings-download-allowed
                         :shape "EnabledType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (idle-disconnect-timeout-in-minutes :initarg
                         :idle-disconnect-timeout-in-minutes :initform
                         common-lisp:nil :type
                         (common-lisp:or idle-disconnect-timeout-in-minutes
                                         common-lisp:null)
                         :accessor
                         struct-shape-user-settings-idle-disconnect-timeout-in-minutes
                         :shape "IdleDisconnectTimeoutInMinutes" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (paste-allowed :initarg :paste-allowed :initform
                         common-lisp:nil :type
                         (common-lisp:or enabled-type common-lisp:null)
                         :accessor struct-shape-user-settings-paste-allowed
                         :shape "EnabledType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (print-allowed :initarg :print-allowed :initform
                         common-lisp:nil :type
                         (common-lisp:or enabled-type common-lisp:null)
                         :accessor struct-shape-user-settings-print-allowed
                         :shape "EnabledType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (upload-allowed :initarg :upload-allowed :initform
                         common-lisp:nil :type
                         (common-lisp:or enabled-type common-lisp:null)
                         :accessor struct-shape-user-settings-upload-allowed
                         :shape "EnabledType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (user-settings-arn :initarg :user-settings-arn
                         :initform
                         (common-lisp:error ":usersettingsarn is required")
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-user-settings-user-settings-arn :shape
                         "ARN" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-user-settings
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'user-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'user-settings 'make-user-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input user-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input user-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'associated-portal-arns))
      (common-lisp:list
       (common-lisp:cons "associatedPortalArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cookie-synchronization-configuration))
      (common-lisp:list
       (common-lisp:cons "cookieSynchronizationConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'copy-allowed))
      (common-lisp:list
       (common-lisp:cons "copyAllowed"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'disconnect-timeout-in-minutes))
      (common-lisp:list
       (common-lisp:cons "disconnectTimeoutInMinutes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'download-allowed))
      (common-lisp:list
       (common-lisp:cons "downloadAllowed"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'idle-disconnect-timeout-in-minutes))
      (common-lisp:list
       (common-lisp:cons "idleDisconnectTimeoutInMinutes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'paste-allowed))
      (common-lisp:list
       (common-lisp:cons "pasteAllowed"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'print-allowed))
      (common-lisp:list
       (common-lisp:cons "printAllowed"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'upload-allowed))
      (common-lisp:list
       (common-lisp:cons "uploadAllowed"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-settings-arn))
      (common-lisp:list
       (common-lisp:cons "userSettingsArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input user-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype user-settings-list ()
   '(trivial-types:proper-list user-settings-summary))
 (common-lisp:defun make-user-settings-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list user-settings-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass user-settings-summary common-lisp:nil
                       ((cookie-synchronization-configuration :initarg
                         :cookie-synchronization-configuration :initform
                         common-lisp:nil :type
                         (common-lisp:or cookie-synchronization-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-user-settings-summary-cookie-synchronization-configuration
                         :shape "CookieSynchronizationConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (copy-allowed :initarg :copy-allowed :initform
                         common-lisp:nil :type
                         (common-lisp:or enabled-type common-lisp:null)
                         :accessor
                         struct-shape-user-settings-summary-copy-allowed :shape
                         "EnabledType" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (disconnect-timeout-in-minutes :initarg
                         :disconnect-timeout-in-minutes :initform
                         common-lisp:nil :type
                         (common-lisp:or disconnect-timeout-in-minutes
                                         common-lisp:null)
                         :accessor
                         struct-shape-user-settings-summary-disconnect-timeout-in-minutes
                         :shape "DisconnectTimeoutInMinutes" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (download-allowed :initarg :download-allowed :initform
                         common-lisp:nil :type
                         (common-lisp:or enabled-type common-lisp:null)
                         :accessor
                         struct-shape-user-settings-summary-download-allowed
                         :shape "EnabledType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (idle-disconnect-timeout-in-minutes :initarg
                         :idle-disconnect-timeout-in-minutes :initform
                         common-lisp:nil :type
                         (common-lisp:or idle-disconnect-timeout-in-minutes
                                         common-lisp:null)
                         :accessor
                         struct-shape-user-settings-summary-idle-disconnect-timeout-in-minutes
                         :shape "IdleDisconnectTimeoutInMinutes" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (paste-allowed :initarg :paste-allowed :initform
                         common-lisp:nil :type
                         (common-lisp:or enabled-type common-lisp:null)
                         :accessor
                         struct-shape-user-settings-summary-paste-allowed
                         :shape "EnabledType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (print-allowed :initarg :print-allowed :initform
                         common-lisp:nil :type
                         (common-lisp:or enabled-type common-lisp:null)
                         :accessor
                         struct-shape-user-settings-summary-print-allowed
                         :shape "EnabledType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (upload-allowed :initarg :upload-allowed :initform
                         common-lisp:nil :type
                         (common-lisp:or enabled-type common-lisp:null)
                         :accessor
                         struct-shape-user-settings-summary-upload-allowed
                         :shape "EnabledType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (user-settings-arn :initarg :user-settings-arn
                         :initform
                         (common-lisp:error ":usersettingsarn is required")
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-user-settings-summary-user-settings-arn
                         :shape "ARN" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-user-settings-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'user-settings-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'user-settings-summary 'make-user-settings-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          user-settings-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          user-settings-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cookie-synchronization-configuration))
      (common-lisp:list
       (common-lisp:cons "cookieSynchronizationConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'copy-allowed))
      (common-lisp:list
       (common-lisp:cons "copyAllowed"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'disconnect-timeout-in-minutes))
      (common-lisp:list
       (common-lisp:cons "disconnectTimeoutInMinutes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'download-allowed))
      (common-lisp:list
       (common-lisp:cons "downloadAllowed"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'idle-disconnect-timeout-in-minutes))
      (common-lisp:list
       (common-lisp:cons "idleDisconnectTimeoutInMinutes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'paste-allowed))
      (common-lisp:list
       (common-lisp:cons "pasteAllowed"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'print-allowed))
      (common-lisp:list
       (common-lisp:cons "printAllowed"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'upload-allowed))
      (common-lisp:list
       (common-lisp:cons "uploadAllowed"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-settings-arn))
      (common-lisp:list
       (common-lisp:cons "userSettingsArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          user-settings-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition validation-exception
     (workspaces-web-error)
     ((field-list :initarg :field-list :initform common-lisp:nil :reader
       validation-exception-field-list)
      (message :initarg :message :initform common-lisp:nil :reader
       validation-exception-message)
      (reason :initarg :reason :initform common-lisp:nil :reader
       validation-exception-reason)))
 (common-lisp:export
  (common-lisp:list 'validation-exception 'validation-exception-field-list
                    'validation-exception-message
                    'validation-exception-reason)))
(common-lisp:progn
 (common-lisp:defclass validation-exception-field common-lisp:nil
                       ((message :initarg :message :initform
                         (common-lisp:error ":message is required") :type
                         (common-lisp:or exception-message common-lisp:null)
                         :accessor
                         struct-shape-validation-exception-field-message :shape
                         "ExceptionMessage" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or field-name common-lisp:null) :accessor
                         struct-shape-validation-exception-field-name :shape
                         "FieldName" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-validation-exception-field
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'validation-exception-field
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'validation-exception-field
                    'make-validation-exception-field))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          validation-exception-field))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          validation-exception-field))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          validation-exception-field))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype validation-exception-field-list ()
   '(trivial-types:proper-list validation-exception-field))
 (common-lisp:defun make-validation-exception-field-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            validation-exception-field))
   aws-sdk/generator/shape::members))
(common-lisp:deftype validation-exception-reason () 'common-lisp:string)
(common-lisp:deftype vpc-id () 'common-lisp:string)
(common-lisp:deftype |keyArn| () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defun associate-browser-settings
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key browser-settings-arn portal-arn)
   (common-lisp:declare
    (common-lisp:ignorable browser-settings-arn portal-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-associate-browser-settings-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workspaces-web-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/portals/~A/browserSettings"
                                                           (common-lisp:slot-value
                                                            aws-sdk/generator/operation::input
                                                            'portal-arn)))
                                                        "AssociateBrowserSettings"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'associate-browser-settings))
(common-lisp:progn
 (common-lisp:defun associate-ip-access-settings
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key ip-access-settings-arn portal-arn)
   (common-lisp:declare
    (common-lisp:ignorable ip-access-settings-arn portal-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-associate-ip-access-settings-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workspaces-web-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/portals/~A/ipAccessSettings"
                                                           (common-lisp:slot-value
                                                            aws-sdk/generator/operation::input
                                                            'portal-arn)))
                                                        "AssociateIpAccessSettings"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'associate-ip-access-settings))
(common-lisp:progn
 (common-lisp:defun associate-network-settings
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key network-settings-arn portal-arn)
   (common-lisp:declare
    (common-lisp:ignorable network-settings-arn portal-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-associate-network-settings-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workspaces-web-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/portals/~A/networkSettings"
                                                           (common-lisp:slot-value
                                                            aws-sdk/generator/operation::input
                                                            'portal-arn)))
                                                        "AssociateNetworkSettings"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'associate-network-settings))
(common-lisp:progn
 (common-lisp:defun associate-trust-store
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key portal-arn trust-store-arn)
   (common-lisp:declare (common-lisp:ignorable portal-arn trust-store-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-associate-trust-store-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workspaces-web-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/portals/~A/trustStores"
                                                           (common-lisp:slot-value
                                                            aws-sdk/generator/operation::input
                                                            'portal-arn)))
                                                        "AssociateTrustStore"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'associate-trust-store))
(common-lisp:progn
 (common-lisp:defun associate-user-access-logging-settings
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key portal-arn
                     user-access-logging-settings-arn)
   (common-lisp:declare
    (common-lisp:ignorable portal-arn user-access-logging-settings-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-associate-user-access-logging-settings-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workspaces-web-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/portals/~A/userAccessLoggingSettings"
                                                           (common-lisp:slot-value
                                                            aws-sdk/generator/operation::input
                                                            'portal-arn)))
                                                        "AssociateUserAccessLoggingSettings"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'associate-user-access-logging-settings))
(common-lisp:progn
 (common-lisp:defun associate-user-settings
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key portal-arn user-settings-arn)
   (common-lisp:declare (common-lisp:ignorable portal-arn user-settings-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-associate-user-settings-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workspaces-web-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/portals/~A/userSettings"
                                                           (common-lisp:slot-value
                                                            aws-sdk/generator/operation::input
                                                            'portal-arn)))
                                                        "AssociateUserSettings"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'associate-user-settings))
(common-lisp:progn
 (common-lisp:defun create-browser-settings
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key additional-encryption-context
                     browser-policy client-token customer-managed-key tags)
   (common-lisp:declare
    (common-lisp:ignorable additional-encryption-context browser-policy
     client-token customer-managed-key tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-browser-settings-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workspaces-web-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/browserSettings"
                                                        "CreateBrowserSettings"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-browser-settings))
(common-lisp:progn
 (common-lisp:defun create-identity-provider
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token identity-provider-details
                     identity-provider-name identity-provider-type portal-arn)
   (common-lisp:declare
    (common-lisp:ignorable client-token identity-provider-details
     identity-provider-name identity-provider-type portal-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-identity-provider-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workspaces-web-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/identityProviders"
                                                        "CreateIdentityProvider"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-identity-provider))
(common-lisp:progn
 (common-lisp:defun create-ip-access-settings
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key additional-encryption-context
                     client-token customer-managed-key description display-name
                     ip-rules tags)
   (common-lisp:declare
    (common-lisp:ignorable additional-encryption-context client-token
     customer-managed-key description display-name ip-rules tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-ip-access-settings-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workspaces-web-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/ipAccessSettings"
                                                        "CreateIpAccessSettings"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-ip-access-settings))
(common-lisp:progn
 (common-lisp:defun create-network-settings
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token security-group-ids
                     subnet-ids tags vpc-id)
   (common-lisp:declare
    (common-lisp:ignorable client-token security-group-ids subnet-ids tags
     vpc-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-network-settings-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workspaces-web-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/networkSettings"
                                                        "CreateNetworkSettings"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-network-settings))
(common-lisp:progn
 (common-lisp:defun create-portal
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key additional-encryption-context
                     authentication-type client-token customer-managed-key
                     display-name tags)
   (common-lisp:declare
    (common-lisp:ignorable additional-encryption-context authentication-type
     client-token customer-managed-key display-name tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-portal-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workspaces-web-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/portals"
                                                        "CreatePortal"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-portal))
(common-lisp:progn
 (common-lisp:defun create-trust-store
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key certificate-list client-token tags)
   (common-lisp:declare
    (common-lisp:ignorable certificate-list client-token tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-trust-store-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workspaces-web-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/trustStores"
                                                        "CreateTrustStore"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-trust-store))
(common-lisp:progn
 (common-lisp:defun create-user-access-logging-settings
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token kinesis-stream-arn tags)
   (common-lisp:declare
    (common-lisp:ignorable client-token kinesis-stream-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-user-access-logging-settings-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workspaces-web-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/userAccessLoggingSettings"
                                                        "CreateUserAccessLoggingSettings"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-user-access-logging-settings))
(common-lisp:progn
 (common-lisp:defun create-user-settings
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key additional-encryption-context
                     client-token cookie-synchronization-configuration
                     copy-allowed customer-managed-key
                     disconnect-timeout-in-minutes download-allowed
                     idle-disconnect-timeout-in-minutes paste-allowed
                     print-allowed tags upload-allowed)
   (common-lisp:declare
    (common-lisp:ignorable additional-encryption-context client-token
     cookie-synchronization-configuration copy-allowed customer-managed-key
     disconnect-timeout-in-minutes download-allowed
     idle-disconnect-timeout-in-minutes paste-allowed print-allowed tags
     upload-allowed))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-user-settings-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workspaces-web-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/userSettings"
                                                        "CreateUserSettings"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-user-settings))
(common-lisp:progn
 (common-lisp:defun delete-browser-settings
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key browser-settings-arn)
   (common-lisp:declare (common-lisp:ignorable browser-settings-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-browser-settings-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workspaces-web-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/browserSettings/~A"
                                                           (common-lisp:slot-value
                                                            aws-sdk/generator/operation::input
                                                            'browser-settings-arn)))
                                                        "DeleteBrowserSettings"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-browser-settings))
(common-lisp:progn
 (common-lisp:defun delete-identity-provider
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key identity-provider-arn)
   (common-lisp:declare (common-lisp:ignorable identity-provider-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-identity-provider-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workspaces-web-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/identityProviders/~A"
                                                           (common-lisp:slot-value
                                                            aws-sdk/generator/operation::input
                                                            'identity-provider-arn)))
                                                        "DeleteIdentityProvider"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-identity-provider))
(common-lisp:progn
 (common-lisp:defun delete-ip-access-settings
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key ip-access-settings-arn)
   (common-lisp:declare (common-lisp:ignorable ip-access-settings-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-ip-access-settings-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workspaces-web-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/ipAccessSettings/~A"
                                                           (common-lisp:slot-value
                                                            aws-sdk/generator/operation::input
                                                            'ip-access-settings-arn)))
                                                        "DeleteIpAccessSettings"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-ip-access-settings))
(common-lisp:progn
 (common-lisp:defun delete-network-settings
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key network-settings-arn)
   (common-lisp:declare (common-lisp:ignorable network-settings-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-network-settings-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workspaces-web-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/networkSettings/~A"
                                                           (common-lisp:slot-value
                                                            aws-sdk/generator/operation::input
                                                            'network-settings-arn)))
                                                        "DeleteNetworkSettings"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-network-settings))
(common-lisp:progn
 (common-lisp:defun delete-portal
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key portal-arn)
   (common-lisp:declare (common-lisp:ignorable portal-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-portal-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workspaces-web-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/portals/~A"
                                                           (common-lisp:slot-value
                                                            aws-sdk/generator/operation::input
                                                            'portal-arn)))
                                                        "DeletePortal"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-portal))
(common-lisp:progn
 (common-lisp:defun delete-trust-store
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key trust-store-arn)
   (common-lisp:declare (common-lisp:ignorable trust-store-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-trust-store-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workspaces-web-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/trustStores/~A"
                                                           (common-lisp:slot-value
                                                            aws-sdk/generator/operation::input
                                                            'trust-store-arn)))
                                                        "DeleteTrustStore"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-trust-store))
(common-lisp:progn
 (common-lisp:defun delete-user-access-logging-settings
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-access-logging-settings-arn)
   (common-lisp:declare
    (common-lisp:ignorable user-access-logging-settings-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-user-access-logging-settings-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workspaces-web-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/userAccessLoggingSettings/~A"
                                                           (common-lisp:slot-value
                                                            aws-sdk/generator/operation::input
                                                            'user-access-logging-settings-arn)))
                                                        "DeleteUserAccessLoggingSettings"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-user-access-logging-settings))
(common-lisp:progn
 (common-lisp:defun delete-user-settings
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-settings-arn)
   (common-lisp:declare (common-lisp:ignorable user-settings-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-user-settings-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workspaces-web-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/userSettings/~A"
                                                           (common-lisp:slot-value
                                                            aws-sdk/generator/operation::input
                                                            'user-settings-arn)))
                                                        "DeleteUserSettings"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-user-settings))
(common-lisp:progn
 (common-lisp:defun disassociate-browser-settings
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key portal-arn)
   (common-lisp:declare (common-lisp:ignorable portal-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-disassociate-browser-settings-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workspaces-web-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/portals/~A/browserSettings"
                                                           (common-lisp:slot-value
                                                            aws-sdk/generator/operation::input
                                                            'portal-arn)))
                                                        "DisassociateBrowserSettings"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'disassociate-browser-settings))
(common-lisp:progn
 (common-lisp:defun disassociate-ip-access-settings
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key portal-arn)
   (common-lisp:declare (common-lisp:ignorable portal-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-disassociate-ip-access-settings-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workspaces-web-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/portals/~A/ipAccessSettings"
                                                           (common-lisp:slot-value
                                                            aws-sdk/generator/operation::input
                                                            'portal-arn)))
                                                        "DisassociateIpAccessSettings"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'disassociate-ip-access-settings))
(common-lisp:progn
 (common-lisp:defun disassociate-network-settings
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key portal-arn)
   (common-lisp:declare (common-lisp:ignorable portal-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-disassociate-network-settings-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workspaces-web-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/portals/~A/networkSettings"
                                                           (common-lisp:slot-value
                                                            aws-sdk/generator/operation::input
                                                            'portal-arn)))
                                                        "DisassociateNetworkSettings"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'disassociate-network-settings))
(common-lisp:progn
 (common-lisp:defun disassociate-trust-store
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key portal-arn)
   (common-lisp:declare (common-lisp:ignorable portal-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-disassociate-trust-store-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workspaces-web-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/portals/~A/trustStores"
                                                           (common-lisp:slot-value
                                                            aws-sdk/generator/operation::input
                                                            'portal-arn)))
                                                        "DisassociateTrustStore"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'disassociate-trust-store))
(common-lisp:progn
 (common-lisp:defun disassociate-user-access-logging-settings
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key portal-arn)
   (common-lisp:declare (common-lisp:ignorable portal-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-disassociate-user-access-logging-settings-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workspaces-web-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/portals/~A/userAccessLoggingSettings"
                                                           (common-lisp:slot-value
                                                            aws-sdk/generator/operation::input
                                                            'portal-arn)))
                                                        "DisassociateUserAccessLoggingSettings"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'disassociate-user-access-logging-settings))
(common-lisp:progn
 (common-lisp:defun disassociate-user-settings
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key portal-arn)
   (common-lisp:declare (common-lisp:ignorable portal-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-disassociate-user-settings-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workspaces-web-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/portals/~A/userSettings"
                                                           (common-lisp:slot-value
                                                            aws-sdk/generator/operation::input
                                                            'portal-arn)))
                                                        "DisassociateUserSettings"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'disassociate-user-settings))
(common-lisp:progn
 (common-lisp:defun get-browser-settings
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key browser-settings-arn)
   (common-lisp:declare (common-lisp:ignorable browser-settings-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-browser-settings-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workspaces-web-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/browserSettings/~A"
                                                           (common-lisp:slot-value
                                                            aws-sdk/generator/operation::input
                                                            'browser-settings-arn)))
                                                        "GetBrowserSettings"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-browser-settings))
(common-lisp:progn
 (common-lisp:defun get-identity-provider
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key identity-provider-arn)
   (common-lisp:declare (common-lisp:ignorable identity-provider-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-identity-provider-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workspaces-web-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/identityProviders/~A"
                                                           (common-lisp:slot-value
                                                            aws-sdk/generator/operation::input
                                                            'identity-provider-arn)))
                                                        "GetIdentityProvider"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-identity-provider))
(common-lisp:progn
 (common-lisp:defun get-ip-access-settings
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key ip-access-settings-arn)
   (common-lisp:declare (common-lisp:ignorable ip-access-settings-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-ip-access-settings-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workspaces-web-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/ipAccessSettings/~A"
                                                           (common-lisp:slot-value
                                                            aws-sdk/generator/operation::input
                                                            'ip-access-settings-arn)))
                                                        "GetIpAccessSettings"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-ip-access-settings))
(common-lisp:progn
 (common-lisp:defun get-network-settings
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key network-settings-arn)
   (common-lisp:declare (common-lisp:ignorable network-settings-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-network-settings-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workspaces-web-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/networkSettings/~A"
                                                           (common-lisp:slot-value
                                                            aws-sdk/generator/operation::input
                                                            'network-settings-arn)))
                                                        "GetNetworkSettings"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-network-settings))
(common-lisp:progn
 (common-lisp:defun get-portal
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key portal-arn)
   (common-lisp:declare (common-lisp:ignorable portal-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-portal-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workspaces-web-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/portals/~A"
                                                           (common-lisp:slot-value
                                                            aws-sdk/generator/operation::input
                                                            'portal-arn)))
                                                        "GetPortal"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-portal))
(common-lisp:progn
 (common-lisp:defun get-portal-service-provider-metadata
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key portal-arn)
   (common-lisp:declare (common-lisp:ignorable portal-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-portal-service-provider-metadata-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workspaces-web-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/portalIdp/~A"
                                                           (common-lisp:slot-value
                                                            aws-sdk/generator/operation::input
                                                            'portal-arn)))
                                                        "GetPortalServiceProviderMetadata"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-portal-service-provider-metadata))
(common-lisp:progn
 (common-lisp:defun get-trust-store
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key trust-store-arn)
   (common-lisp:declare (common-lisp:ignorable trust-store-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-trust-store-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workspaces-web-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/trustStores/~A"
                                                           (common-lisp:slot-value
                                                            aws-sdk/generator/operation::input
                                                            'trust-store-arn)))
                                                        "GetTrustStore"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-trust-store))
(common-lisp:progn
 (common-lisp:defun get-trust-store-certificate
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key thumbprint trust-store-arn)
   (common-lisp:declare (common-lisp:ignorable thumbprint trust-store-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-trust-store-certificate-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workspaces-web-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/trustStores/~A/certificate"
                                                           (common-lisp:slot-value
                                                            aws-sdk/generator/operation::input
                                                            'trust-store-arn)))
                                                        "GetTrustStoreCertificate"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-trust-store-certificate))
(common-lisp:progn
 (common-lisp:defun get-user-access-logging-settings
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-access-logging-settings-arn)
   (common-lisp:declare
    (common-lisp:ignorable user-access-logging-settings-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-user-access-logging-settings-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workspaces-web-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/userAccessLoggingSettings/~A"
                                                           (common-lisp:slot-value
                                                            aws-sdk/generator/operation::input
                                                            'user-access-logging-settings-arn)))
                                                        "GetUserAccessLoggingSettings"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-user-access-logging-settings))
(common-lisp:progn
 (common-lisp:defun get-user-settings
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-settings-arn)
   (common-lisp:declare (common-lisp:ignorable user-settings-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-user-settings-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workspaces-web-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/userSettings/~A"
                                                           (common-lisp:slot-value
                                                            aws-sdk/generator/operation::input
                                                            'user-settings-arn)))
                                                        "GetUserSettings"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-user-settings))
(common-lisp:progn
 (common-lisp:defun list-browser-settings
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-browser-settings-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workspaces-web-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        "/browserSettings"
                                                        "ListBrowserSettings"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-browser-settings))
(common-lisp:progn
 (common-lisp:defun list-identity-providers
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token portal-arn)
   (common-lisp:declare
    (common-lisp:ignorable max-results next-token portal-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-identity-providers-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workspaces-web-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/portals/~A/identityProviders"
                                                           (common-lisp:slot-value
                                                            aws-sdk/generator/operation::input
                                                            'portal-arn)))
                                                        "ListIdentityProviders"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-identity-providers))
(common-lisp:progn
 (common-lisp:defun list-ip-access-settings
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-ip-access-settings-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workspaces-web-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        "/ipAccessSettings"
                                                        "ListIpAccessSettings"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-ip-access-settings))
(common-lisp:progn
 (common-lisp:defun list-network-settings
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-network-settings-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workspaces-web-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        "/networkSettings"
                                                        "ListNetworkSettings"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-network-settings))
(common-lisp:progn
 (common-lisp:defun list-portals
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-portals-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workspaces-web-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" "/portals"
                                                        "ListPortals"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-portals))
(common-lisp:progn
 (common-lisp:defun list-tags-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn)
   (common-lisp:declare (common-lisp:ignorable resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-for-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workspaces-web-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tags/~A"
                                                           (common-lisp:slot-value
                                                            aws-sdk/generator/operation::input
                                                            'resource-arn)))
                                                        "ListTagsForResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-tags-for-resource))
(common-lisp:progn
 (common-lisp:defun list-trust-store-certificates
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token trust-store-arn)
   (common-lisp:declare
    (common-lisp:ignorable max-results next-token trust-store-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-trust-store-certificates-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workspaces-web-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/trustStores/~A/certificates"
                                                           (common-lisp:slot-value
                                                            aws-sdk/generator/operation::input
                                                            'trust-store-arn)))
                                                        "ListTrustStoreCertificates"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-trust-store-certificates))
(common-lisp:progn
 (common-lisp:defun list-trust-stores
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-trust-stores-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workspaces-web-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" "/trustStores"
                                                        "ListTrustStores"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-trust-stores))
(common-lisp:progn
 (common-lisp:defun list-user-access-logging-settings
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-user-access-logging-settings-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workspaces-web-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        "/userAccessLoggingSettings"
                                                        "ListUserAccessLoggingSettings"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-user-access-logging-settings))
(common-lisp:progn
 (common-lisp:defun list-user-settings
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-user-settings-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workspaces-web-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" "/userSettings"
                                                        "ListUserSettings"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-user-settings))
(common-lisp:progn
 (common-lisp:defun tag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token resource-arn tags)
   (common-lisp:declare (common-lisp:ignorable client-token resource-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workspaces-web-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tags/~A"
                                                           (common-lisp:slot-value
                                                            aws-sdk/generator/operation::input
                                                            'resource-arn)))
                                                        "TagResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'tag-resource))
(common-lisp:progn
 (common-lisp:defun untag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tag-keys)
   (common-lisp:declare (common-lisp:ignorable resource-arn tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workspaces-web-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tags/~A"
                                                           (common-lisp:slot-value
                                                            aws-sdk/generator/operation::input
                                                            'resource-arn)))
                                                        "UntagResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'untag-resource))
(common-lisp:progn
 (common-lisp:defun update-browser-settings
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key browser-policy browser-settings-arn
                     client-token)
   (common-lisp:declare
    (common-lisp:ignorable browser-policy browser-settings-arn client-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-browser-settings-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workspaces-web-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/browserSettings/~A"
                                                           (common-lisp:slot-value
                                                            aws-sdk/generator/operation::input
                                                            'browser-settings-arn)))
                                                        "UpdateBrowserSettings"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-browser-settings))
(common-lisp:progn
 (common-lisp:defun update-identity-provider
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token identity-provider-arn
                     identity-provider-details identity-provider-name
                     identity-provider-type)
   (common-lisp:declare
    (common-lisp:ignorable client-token identity-provider-arn
     identity-provider-details identity-provider-name identity-provider-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-identity-provider-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workspaces-web-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/identityProviders/~A"
                                                           (common-lisp:slot-value
                                                            aws-sdk/generator/operation::input
                                                            'identity-provider-arn)))
                                                        "UpdateIdentityProvider"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-identity-provider))
(common-lisp:progn
 (common-lisp:defun update-ip-access-settings
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token description display-name
                     ip-access-settings-arn ip-rules)
   (common-lisp:declare
    (common-lisp:ignorable client-token description display-name
     ip-access-settings-arn ip-rules))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-ip-access-settings-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workspaces-web-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/ipAccessSettings/~A"
                                                           (common-lisp:slot-value
                                                            aws-sdk/generator/operation::input
                                                            'ip-access-settings-arn)))
                                                        "UpdateIpAccessSettings"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-ip-access-settings))
(common-lisp:progn
 (common-lisp:defun update-network-settings
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token network-settings-arn
                     security-group-ids subnet-ids vpc-id)
   (common-lisp:declare
    (common-lisp:ignorable client-token network-settings-arn security-group-ids
     subnet-ids vpc-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-network-settings-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workspaces-web-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/networkSettings/~A"
                                                           (common-lisp:slot-value
                                                            aws-sdk/generator/operation::input
                                                            'network-settings-arn)))
                                                        "UpdateNetworkSettings"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-network-settings))
(common-lisp:progn
 (common-lisp:defun update-portal
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key authentication-type display-name
                     portal-arn)
   (common-lisp:declare
    (common-lisp:ignorable authentication-type display-name portal-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-portal-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workspaces-web-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/portals/~A"
                                                           (common-lisp:slot-value
                                                            aws-sdk/generator/operation::input
                                                            'portal-arn)))
                                                        "UpdatePortal"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-portal))
(common-lisp:progn
 (common-lisp:defun update-trust-store
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key certificates-to-add
                     certificates-to-delete client-token trust-store-arn)
   (common-lisp:declare
    (common-lisp:ignorable certificates-to-add certificates-to-delete
     client-token trust-store-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-trust-store-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workspaces-web-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/trustStores/~A"
                                                           (common-lisp:slot-value
                                                            aws-sdk/generator/operation::input
                                                            'trust-store-arn)))
                                                        "UpdateTrustStore"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-trust-store))
(common-lisp:progn
 (common-lisp:defun update-user-access-logging-settings
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token kinesis-stream-arn
                     user-access-logging-settings-arn)
   (common-lisp:declare
    (common-lisp:ignorable client-token kinesis-stream-arn
     user-access-logging-settings-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-user-access-logging-settings-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workspaces-web-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/userAccessLoggingSettings/~A"
                                                           (common-lisp:slot-value
                                                            aws-sdk/generator/operation::input
                                                            'user-access-logging-settings-arn)))
                                                        "UpdateUserAccessLoggingSettings"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-user-access-logging-settings))
(common-lisp:progn
 (common-lisp:defun update-user-settings
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token
                     cookie-synchronization-configuration copy-allowed
                     disconnect-timeout-in-minutes download-allowed
                     idle-disconnect-timeout-in-minutes paste-allowed
                     print-allowed upload-allowed user-settings-arn)
   (common-lisp:declare
    (common-lisp:ignorable client-token cookie-synchronization-configuration
     copy-allowed disconnect-timeout-in-minutes download-allowed
     idle-disconnect-timeout-in-minutes paste-allowed print-allowed
     upload-allowed user-settings-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-user-settings-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workspaces-web-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/userSettings/~A"
                                                           (common-lisp:slot-value
                                                            aws-sdk/generator/operation::input
                                                            'user-settings-arn)))
                                                        "UpdateUserSettings"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-user-settings))
