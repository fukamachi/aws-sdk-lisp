;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/keyspaces/api
  (:use)
  (:nicknames #:aws/keyspaces)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/json-request)
  (:import-from #:aws-sdk/rest-json-request)
  (:import-from #:aws-sdk/rest-xml-request)
  (:import-from #:aws-sdk/query-request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/keyspaces/api)
(common-lisp:progn
 (common-lisp:define-condition keyspaces-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'keyspaces-error))
(common-lisp:progn
 (common-lisp:defclass keyspaces-request (aws-sdk/json-request:json-request)
                       common-lisp:nil
                       (:default-initargs :service "keyspaces" :api-version
                        "2022-02-10" :host-prefix "cassandra" :signing-name
                        "cassandra" :global-host common-lisp:nil :target-prefix
                        "KeyspacesService" :json-version "1.0"))
 (common-lisp:export 'keyspaces-request))
(common-lisp:defvar *error-map*
  '(("AccessDeniedException" . access-denied-exception)
    ("ConflictException" . conflict-exception)
    ("InternalServerException" . internal-server-exception)
    ("ResourceNotFoundException" . resource-not-found-exception)
    ("ServiceQuotaExceededException" . service-quota-exceeded-exception)
    ("ValidationException" . validation-exception)))
(common-lisp:deftype arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition access-denied-exception
     (keyspaces-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       access-denied-exception-message)))
 (common-lisp:export
  (common-lisp:list 'access-denied-exception 'access-denied-exception-message)))
(common-lisp:progn
 (common-lisp:defclass auto-scaling-policy common-lisp:nil
                       ((target-tracking-scaling-policy-configuration :initarg
                         :target-tracking-scaling-policy-configuration
                         :initform common-lisp:nil :type
                         (common-lisp:or
                          target-tracking-scaling-policy-configuration
                          common-lisp:null)
                         :accessor
                         struct-shape-auto-scaling-policy-target-tracking-scaling-policy-configuration
                         :shape "TargetTrackingScalingPolicyConfiguration"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-auto-scaling-policy
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'auto-scaling-policy
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'auto-scaling-policy 'make-auto-scaling-policy))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input auto-scaling-policy))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input auto-scaling-policy))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'target-tracking-scaling-policy-configuration))
      (common-lisp:list
       (common-lisp:cons "targetTrackingScalingPolicyConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input auto-scaling-policy))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass auto-scaling-settings common-lisp:nil
                       ((auto-scaling-disabled :initarg :auto-scaling-disabled
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean-object common-lisp:null)
                         :accessor
                         struct-shape-auto-scaling-settings-auto-scaling-disabled
                         :shape "BooleanObject" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (minimum-units :initarg :minimum-units :initform
                         common-lisp:nil :type
                         (common-lisp:or capacity-units common-lisp:null)
                         :accessor
                         struct-shape-auto-scaling-settings-minimum-units
                         :shape "CapacityUnits" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (maximum-units :initarg :maximum-units :initform
                         common-lisp:nil :type
                         (common-lisp:or capacity-units common-lisp:null)
                         :accessor
                         struct-shape-auto-scaling-settings-maximum-units
                         :shape "CapacityUnits" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (scaling-policy :initarg :scaling-policy :initform
                         common-lisp:nil :type
                         (common-lisp:or auto-scaling-policy common-lisp:null)
                         :accessor
                         struct-shape-auto-scaling-settings-scaling-policy
                         :shape "AutoScalingPolicy" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-auto-scaling-settings
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'auto-scaling-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'auto-scaling-settings 'make-auto-scaling-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          auto-scaling-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          auto-scaling-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-scaling-disabled))
      (common-lisp:list
       (common-lisp:cons "autoScalingDisabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'minimum-units))
      (common-lisp:list
       (common-lisp:cons "minimumUnits"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'maximum-units))
      (common-lisp:list
       (common-lisp:cons "maximumUnits"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scaling-policy))
      (common-lisp:list
       (common-lisp:cons "scalingPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          auto-scaling-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass auto-scaling-specification common-lisp:nil
                       ((write-capacity-auto-scaling :initarg
                         :write-capacity-auto-scaling :initform common-lisp:nil
                         :type
                         (common-lisp:or auto-scaling-settings
                                         common-lisp:null)
                         :accessor
                         struct-shape-auto-scaling-specification-write-capacity-auto-scaling
                         :shape "AutoScalingSettings" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (read-capacity-auto-scaling :initarg
                         :read-capacity-auto-scaling :initform common-lisp:nil
                         :type
                         (common-lisp:or auto-scaling-settings
                                         common-lisp:null)
                         :accessor
                         struct-shape-auto-scaling-specification-read-capacity-auto-scaling
                         :shape "AutoScalingSettings" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-auto-scaling-specification
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'auto-scaling-specification
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'auto-scaling-specification
                    'make-auto-scaling-specification))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          auto-scaling-specification))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          auto-scaling-specification))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'write-capacity-auto-scaling))
      (common-lisp:list
       (common-lisp:cons "writeCapacityAutoScaling"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'read-capacity-auto-scaling))
      (common-lisp:list
       (common-lisp:cons "readCapacityAutoScaling"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          auto-scaling-specification))
   common-lisp:nil))
(common-lisp:deftype boolean-object () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defclass capacity-specification common-lisp:nil
                       ((throughput-mode :initarg :throughput-mode :initform
                         (common-lisp:error ":throughputmode is required")
                         :type
                         (common-lisp:or throughput-mode common-lisp:null)
                         :accessor
                         struct-shape-capacity-specification-throughput-mode
                         :shape "ThroughputMode" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (read-capacity-units :initarg :read-capacity-units
                         :initform common-lisp:nil :type
                         (common-lisp:or capacity-units common-lisp:null)
                         :accessor
                         struct-shape-capacity-specification-read-capacity-units
                         :shape "CapacityUnits" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (write-capacity-units :initarg :write-capacity-units
                         :initform common-lisp:nil :type
                         (common-lisp:or capacity-units common-lisp:null)
                         :accessor
                         struct-shape-capacity-specification-write-capacity-units
                         :shape "CapacityUnits" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-capacity-specification
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'capacity-specification
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'capacity-specification 'make-capacity-specification))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          capacity-specification))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          capacity-specification))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'throughput-mode))
      (common-lisp:list
       (common-lisp:cons "throughputMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'read-capacity-units))
      (common-lisp:list
       (common-lisp:cons "readCapacityUnits"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'write-capacity-units))
      (common-lisp:list
       (common-lisp:cons "writeCapacityUnits"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          capacity-specification))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass capacity-specification-summary common-lisp:nil
                       ((throughput-mode :initarg :throughput-mode :initform
                         (common-lisp:error ":throughputmode is required")
                         :type
                         (common-lisp:or throughput-mode common-lisp:null)
                         :accessor
                         struct-shape-capacity-specification-summary-throughput-mode
                         :shape "ThroughputMode" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (read-capacity-units :initarg :read-capacity-units
                         :initform common-lisp:nil :type
                         (common-lisp:or capacity-units common-lisp:null)
                         :accessor
                         struct-shape-capacity-specification-summary-read-capacity-units
                         :shape "CapacityUnits" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (write-capacity-units :initarg :write-capacity-units
                         :initform common-lisp:nil :type
                         (common-lisp:or capacity-units common-lisp:null)
                         :accessor
                         struct-shape-capacity-specification-summary-write-capacity-units
                         :shape "CapacityUnits" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-update-to-pay-per-request-timestamp :initarg
                         :last-update-to-pay-per-request-timestamp :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-capacity-specification-summary-last-update-to-pay-per-request-timestamp
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-capacity-specification-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'capacity-specification-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'capacity-specification-summary
                    'make-capacity-specification-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          capacity-specification-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          capacity-specification-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'throughput-mode))
      (common-lisp:list
       (common-lisp:cons "throughputMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'read-capacity-units))
      (common-lisp:list
       (common-lisp:cons "readCapacityUnits"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'write-capacity-units))
      (common-lisp:list
       (common-lisp:cons "writeCapacityUnits"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-update-to-pay-per-request-timestamp))
      (common-lisp:list
       (common-lisp:cons "lastUpdateToPayPerRequestTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          capacity-specification-summary))
   common-lisp:nil))
(common-lisp:deftype capacity-units () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass client-side-timestamps common-lisp:nil
                       ((status :initarg :status :initform
                         (common-lisp:error ":status is required") :type
                         (common-lisp:or client-side-timestamps-status
                                         common-lisp:null)
                         :accessor struct-shape-client-side-timestamps-status
                         :shape "ClientSideTimestampsStatus" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-client-side-timestamps
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'client-side-timestamps
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'client-side-timestamps 'make-client-side-timestamps))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          client-side-timestamps))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          client-side-timestamps))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          client-side-timestamps))
   common-lisp:nil))
(common-lisp:deftype client-side-timestamps-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass clustering-key common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor struct-shape-clustering-key-name :shape
                         "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (order-by :initarg :order-by :initform
                         (common-lisp:error ":orderby is required") :type
                         (common-lisp:or sort-order common-lisp:null) :accessor
                         struct-shape-clustering-key-order-by :shape
                         "SortOrder" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-clustering-key
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'clustering-key
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'clustering-key 'make-clustering-key))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input clustering-key))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input clustering-key))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'order-by))
      (common-lisp:list
       (common-lisp:cons "orderBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input clustering-key))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype clustering-key-list ()
   '(trivial-types:proper-list clustering-key))
 (common-lisp:defun make-clustering-key-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list clustering-key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass column-definition common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor struct-shape-column-definition-name :shape
                         "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (type :initarg :type :initform
                         (common-lisp:error ":type is required") :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor struct-shape-column-definition-type :shape
                         "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-column-definition
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'column-definition
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'column-definition 'make-column-definition))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input column-definition))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input column-definition))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input column-definition))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype column-definition-list ()
   '(trivial-types:proper-list column-definition))
 (common-lisp:defun make-column-definition-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list column-definition))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass comment common-lisp:nil
                       ((message :initarg :message :initform
                         (common-lisp:error ":message is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-comment-message :shape "String" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-comment
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'comment
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'comment 'make-comment))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input comment))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input comment))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input comment))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition conflict-exception
     (keyspaces-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       conflict-exception-message)))
 (common-lisp:export
  (common-lisp:list 'conflict-exception 'conflict-exception-message)))
(common-lisp:progn
 (common-lisp:defclass create-keyspace-request common-lisp:nil
                       ((keyspace-name :initarg :keyspace-name :initform
                         (common-lisp:error ":keyspacename is required") :type
                         (common-lisp:or keyspace-name common-lisp:null)
                         :accessor
                         struct-shape-create-keyspace-request-keyspace-name
                         :shape "KeyspaceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-create-keyspace-request-tags :shape
                         "TagList" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (replication-specification :initarg
                         :replication-specification :initform common-lisp:nil
                         :type
                         (common-lisp:or replication-specification
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-keyspace-request-replication-specification
                         :shape "ReplicationSpecification" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-keyspace-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-keyspace-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-keyspace-request 'make-create-keyspace-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-keyspace-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-keyspace-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'keyspace-name))
      (common-lisp:list
       (common-lisp:cons "keyspaceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-specification))
      (common-lisp:list
       (common-lisp:cons "replicationSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-keyspace-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-keyspace-response common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resourcearn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-create-keyspace-response-resource-arn
                         :shape "ARN" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-keyspace-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-keyspace-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-keyspace-response 'make-create-keyspace-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-keyspace-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-keyspace-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "resourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-keyspace-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-table-request common-lisp:nil
                       ((keyspace-name :initarg :keyspace-name :initform
                         (common-lisp:error ":keyspacename is required") :type
                         (common-lisp:or keyspace-name common-lisp:null)
                         :accessor
                         struct-shape-create-table-request-keyspace-name :shape
                         "KeyspaceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (table-name :initarg :table-name :initform
                         (common-lisp:error ":tablename is required") :type
                         (common-lisp:or table-name common-lisp:null) :accessor
                         struct-shape-create-table-request-table-name :shape
                         "TableName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (schema-definition :initarg :schema-definition
                         :initform
                         (common-lisp:error ":schemadefinition is required")
                         :type
                         (common-lisp:or schema-definition common-lisp:null)
                         :accessor
                         struct-shape-create-table-request-schema-definition
                         :shape "SchemaDefinition" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (comment :initarg :comment :initform common-lisp:nil
                         :type (common-lisp:or comment common-lisp:null)
                         :accessor struct-shape-create-table-request-comment
                         :shape "Comment" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (capacity-specification :initarg
                         :capacity-specification :initform common-lisp:nil
                         :type
                         (common-lisp:or capacity-specification
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-table-request-capacity-specification
                         :shape "CapacitySpecification" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (encryption-specification :initarg
                         :encryption-specification :initform common-lisp:nil
                         :type
                         (common-lisp:or encryption-specification
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-table-request-encryption-specification
                         :shape "EncryptionSpecification" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (point-in-time-recovery :initarg
                         :point-in-time-recovery :initform common-lisp:nil
                         :type
                         (common-lisp:or point-in-time-recovery
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-table-request-point-in-time-recovery
                         :shape "PointInTimeRecovery" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (ttl :initarg :ttl :initform common-lisp:nil :type
                         (common-lisp:or time-to-live common-lisp:null)
                         :accessor struct-shape-create-table-request-ttl :shape
                         "TimeToLive" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (default-time-to-live :initarg :default-time-to-live
                         :initform common-lisp:nil :type
                         (common-lisp:or default-time-to-live common-lisp:null)
                         :accessor
                         struct-shape-create-table-request-default-time-to-live
                         :shape "DefaultTimeToLive" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-create-table-request-tags :shape
                         "TagList" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (client-side-timestamps :initarg
                         :client-side-timestamps :initform common-lisp:nil
                         :type
                         (common-lisp:or client-side-timestamps
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-table-request-client-side-timestamps
                         :shape "ClientSideTimestamps" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (auto-scaling-specification :initarg
                         :auto-scaling-specification :initform common-lisp:nil
                         :type
                         (common-lisp:or auto-scaling-specification
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-table-request-auto-scaling-specification
                         :shape "AutoScalingSpecification" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (replica-specifications :initarg
                         :replica-specifications :initform common-lisp:nil
                         :type
                         (common-lisp:or replica-specification-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-table-request-replica-specifications
                         :shape "ReplicaSpecificationList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-table-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-table-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-table-request 'make-create-table-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-table-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-table-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'keyspace-name))
      (common-lisp:list
       (common-lisp:cons "keyspaceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-name))
      (common-lisp:list
       (common-lisp:cons "tableName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema-definition))
      (common-lisp:list
       (common-lisp:cons "schemaDefinition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'comment))
      (common-lisp:list
       (common-lisp:cons "comment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'capacity-specification))
      (common-lisp:list
       (common-lisp:cons "capacitySpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'encryption-specification))
      (common-lisp:list
       (common-lisp:cons "encryptionSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'point-in-time-recovery))
      (common-lisp:list
       (common-lisp:cons "pointInTimeRecovery"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ttl))
      (common-lisp:list
       (common-lisp:cons "ttl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-time-to-live))
      (common-lisp:list
       (common-lisp:cons "defaultTimeToLive"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-side-timestamps))
      (common-lisp:list
       (common-lisp:cons "clientSideTimestamps"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-scaling-specification))
      (common-lisp:list
       (common-lisp:cons "autoScalingSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replica-specifications))
      (common-lisp:list
       (common-lisp:cons "replicaSpecifications"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-table-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-table-response common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resourcearn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-create-table-response-resource-arn :shape
                         "ARN" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-table-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-table-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-table-response 'make-create-table-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-table-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-table-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "resourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-table-response))
   common-lisp:nil))
(common-lisp:deftype default-time-to-live () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass delete-keyspace-request common-lisp:nil
                       ((keyspace-name :initarg :keyspace-name :initform
                         (common-lisp:error ":keyspacename is required") :type
                         (common-lisp:or keyspace-name common-lisp:null)
                         :accessor
                         struct-shape-delete-keyspace-request-keyspace-name
                         :shape "KeyspaceName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-keyspace-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-keyspace-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-keyspace-request 'make-delete-keyspace-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-keyspace-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-keyspace-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'keyspace-name))
      (common-lisp:list
       (common-lisp:cons "keyspaceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-keyspace-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-keyspace-response common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-keyspace-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-keyspace-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-keyspace-response 'make-delete-keyspace-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-keyspace-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-keyspace-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-keyspace-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-table-request common-lisp:nil
                       ((keyspace-name :initarg :keyspace-name :initform
                         (common-lisp:error ":keyspacename is required") :type
                         (common-lisp:or keyspace-name common-lisp:null)
                         :accessor
                         struct-shape-delete-table-request-keyspace-name :shape
                         "KeyspaceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (table-name :initarg :table-name :initform
                         (common-lisp:error ":tablename is required") :type
                         (common-lisp:or table-name common-lisp:null) :accessor
                         struct-shape-delete-table-request-table-name :shape
                         "TableName" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-table-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-table-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-table-request 'make-delete-table-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-table-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-table-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'keyspace-name))
      (common-lisp:list
       (common-lisp:cons "keyspaceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-name))
      (common-lisp:list
       (common-lisp:cons "tableName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-table-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-table-response common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-table-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-table-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-table-response 'make-delete-table-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-table-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-table-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-table-response))
   common-lisp:nil))
(common-lisp:deftype double-object () 'common-lisp:double-float)
(common-lisp:progn
 (common-lisp:defclass encryption-specification common-lisp:nil
                       ((type :initarg :type :initform
                         (common-lisp:error ":type is required") :type
                         (common-lisp:or encryption-type common-lisp:null)
                         :accessor struct-shape-encryption-specification-type
                         :shape "EncryptionType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (kms-key-identifier :initarg :kms-key-identifier
                         :initform common-lisp:nil :type
                         (common-lisp:or |kmsKeyARN| common-lisp:null)
                         :accessor
                         struct-shape-encryption-specification-kms-key-identifier
                         :shape "kmsKeyARN" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-encryption-specification
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'encryption-specification
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'encryption-specification 'make-encryption-specification))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          encryption-specification))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          encryption-specification))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-identifier))
      (common-lisp:list
       (common-lisp:cons "kmsKeyIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          encryption-specification))
   common-lisp:nil))
(common-lisp:deftype encryption-type () 'common-lisp:string)
(common-lisp:deftype generic-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass get-keyspace-request common-lisp:nil
                       ((keyspace-name :initarg :keyspace-name :initform
                         (common-lisp:error ":keyspacename is required") :type
                         (common-lisp:or keyspace-name common-lisp:null)
                         :accessor
                         struct-shape-get-keyspace-request-keyspace-name :shape
                         "KeyspaceName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-keyspace-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-keyspace-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-keyspace-request 'make-get-keyspace-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-keyspace-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-keyspace-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'keyspace-name))
      (common-lisp:list
       (common-lisp:cons "keyspaceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-keyspace-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-keyspace-response common-lisp:nil
                       ((keyspace-name :initarg :keyspace-name :initform
                         (common-lisp:error ":keyspacename is required") :type
                         (common-lisp:or keyspace-name common-lisp:null)
                         :accessor
                         struct-shape-get-keyspace-response-keyspace-name
                         :shape "KeyspaceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resourcearn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-get-keyspace-response-resource-arn :shape
                         "ARN" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (replication-strategy :initarg :replication-strategy
                         :initform
                         (common-lisp:error ":replicationstrategy is required")
                         :type (common-lisp:or |rs| common-lisp:null) :accessor
                         struct-shape-get-keyspace-response-replication-strategy
                         :shape "rs" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (replication-regions :initarg :replication-regions
                         :initform common-lisp:nil :type
                         (common-lisp:or region-list common-lisp:null)
                         :accessor
                         struct-shape-get-keyspace-response-replication-regions
                         :shape "RegionList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-keyspace-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-keyspace-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-keyspace-response 'make-get-keyspace-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-keyspace-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-keyspace-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'keyspace-name))
      (common-lisp:list
       (common-lisp:cons "keyspaceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "resourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-strategy))
      (common-lisp:list
       (common-lisp:cons "replicationStrategy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'replication-regions))
      (common-lisp:list
       (common-lisp:cons "replicationRegions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-keyspace-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-table-auto-scaling-settings-request common-lisp:nil
                       ((keyspace-name :initarg :keyspace-name :initform
                         (common-lisp:error ":keyspacename is required") :type
                         (common-lisp:or keyspace-name common-lisp:null)
                         :accessor
                         struct-shape-get-table-auto-scaling-settings-request-keyspace-name
                         :shape "KeyspaceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (table-name :initarg :table-name :initform
                         (common-lisp:error ":tablename is required") :type
                         (common-lisp:or table-name common-lisp:null) :accessor
                         struct-shape-get-table-auto-scaling-settings-request-table-name
                         :shape "TableName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-table-auto-scaling-settings-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-table-auto-scaling-settings-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-table-auto-scaling-settings-request
                    'make-get-table-auto-scaling-settings-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-table-auto-scaling-settings-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-table-auto-scaling-settings-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'keyspace-name))
      (common-lisp:list
       (common-lisp:cons "keyspaceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-name))
      (common-lisp:list
       (common-lisp:cons "tableName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-table-auto-scaling-settings-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-table-auto-scaling-settings-response common-lisp:nil
                       ((keyspace-name :initarg :keyspace-name :initform
                         (common-lisp:error ":keyspacename is required") :type
                         (common-lisp:or keyspace-name common-lisp:null)
                         :accessor
                         struct-shape-get-table-auto-scaling-settings-response-keyspace-name
                         :shape "KeyspaceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (table-name :initarg :table-name :initform
                         (common-lisp:error ":tablename is required") :type
                         (common-lisp:or table-name common-lisp:null) :accessor
                         struct-shape-get-table-auto-scaling-settings-response-table-name
                         :shape "TableName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resourcearn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-get-table-auto-scaling-settings-response-resource-arn
                         :shape "ARN" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (auto-scaling-specification :initarg
                         :auto-scaling-specification :initform common-lisp:nil
                         :type
                         (common-lisp:or auto-scaling-specification
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-table-auto-scaling-settings-response-auto-scaling-specification
                         :shape "AutoScalingSpecification" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (replica-specifications :initarg
                         :replica-specifications :initform common-lisp:nil
                         :type
                         (common-lisp:or
                          replica-auto-scaling-specification-list
                          common-lisp:null)
                         :accessor
                         struct-shape-get-table-auto-scaling-settings-response-replica-specifications
                         :shape "ReplicaAutoScalingSpecificationList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-table-auto-scaling-settings-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-table-auto-scaling-settings-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-table-auto-scaling-settings-response
                    'make-get-table-auto-scaling-settings-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-table-auto-scaling-settings-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-table-auto-scaling-settings-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'keyspace-name))
      (common-lisp:list
       (common-lisp:cons "keyspaceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-name))
      (common-lisp:list
       (common-lisp:cons "tableName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "resourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-scaling-specification))
      (common-lisp:list
       (common-lisp:cons "autoScalingSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replica-specifications))
      (common-lisp:list
       (common-lisp:cons "replicaSpecifications"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-table-auto-scaling-settings-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-table-request common-lisp:nil
                       ((keyspace-name :initarg :keyspace-name :initform
                         (common-lisp:error ":keyspacename is required") :type
                         (common-lisp:or keyspace-name common-lisp:null)
                         :accessor struct-shape-get-table-request-keyspace-name
                         :shape "KeyspaceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (table-name :initarg :table-name :initform
                         (common-lisp:error ":tablename is required") :type
                         (common-lisp:or table-name common-lisp:null) :accessor
                         struct-shape-get-table-request-table-name :shape
                         "TableName" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-table-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-table-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-table-request 'make-get-table-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-table-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-table-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'keyspace-name))
      (common-lisp:list
       (common-lisp:cons "keyspaceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-name))
      (common-lisp:list
       (common-lisp:cons "tableName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-table-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-table-response common-lisp:nil
                       ((keyspace-name :initarg :keyspace-name :initform
                         (common-lisp:error ":keyspacename is required") :type
                         (common-lisp:or keyspace-name common-lisp:null)
                         :accessor
                         struct-shape-get-table-response-keyspace-name :shape
                         "KeyspaceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (table-name :initarg :table-name :initform
                         (common-lisp:error ":tablename is required") :type
                         (common-lisp:or table-name common-lisp:null) :accessor
                         struct-shape-get-table-response-table-name :shape
                         "TableName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resourcearn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-get-table-response-resource-arn :shape
                         "ARN" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (creation-timestamp :initarg :creation-timestamp
                         :initform common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-get-table-response-creation-timestamp
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or table-status common-lisp:null)
                         :accessor struct-shape-get-table-response-status
                         :shape "TableStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (schema-definition :initarg :schema-definition
                         :initform common-lisp:nil :type
                         (common-lisp:or schema-definition common-lisp:null)
                         :accessor
                         struct-shape-get-table-response-schema-definition
                         :shape "SchemaDefinition" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (capacity-specification :initarg
                         :capacity-specification :initform common-lisp:nil
                         :type
                         (common-lisp:or capacity-specification-summary
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-table-response-capacity-specification
                         :shape "CapacitySpecificationSummary" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (encryption-specification :initarg
                         :encryption-specification :initform common-lisp:nil
                         :type
                         (common-lisp:or encryption-specification
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-table-response-encryption-specification
                         :shape "EncryptionSpecification" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (point-in-time-recovery :initarg
                         :point-in-time-recovery :initform common-lisp:nil
                         :type
                         (common-lisp:or point-in-time-recovery-summary
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-table-response-point-in-time-recovery
                         :shape "PointInTimeRecoverySummary" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (ttl :initarg :ttl :initform common-lisp:nil :type
                         (common-lisp:or time-to-live common-lisp:null)
                         :accessor struct-shape-get-table-response-ttl :shape
                         "TimeToLive" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (default-time-to-live :initarg :default-time-to-live
                         :initform common-lisp:nil :type
                         (common-lisp:or default-time-to-live common-lisp:null)
                         :accessor
                         struct-shape-get-table-response-default-time-to-live
                         :shape "DefaultTimeToLive" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (comment :initarg :comment :initform common-lisp:nil
                         :type (common-lisp:or comment common-lisp:null)
                         :accessor struct-shape-get-table-response-comment
                         :shape "Comment" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (client-side-timestamps :initarg
                         :client-side-timestamps :initform common-lisp:nil
                         :type
                         (common-lisp:or client-side-timestamps
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-table-response-client-side-timestamps
                         :shape "ClientSideTimestamps" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (replica-specifications :initarg
                         :replica-specifications :initform common-lisp:nil
                         :type
                         (common-lisp:or replica-specification-summary-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-table-response-replica-specifications
                         :shape "ReplicaSpecificationSummaryList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-table-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-table-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-table-response 'make-get-table-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-table-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-table-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'keyspace-name))
      (common-lisp:list
       (common-lisp:cons "keyspaceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-name))
      (common-lisp:list
       (common-lisp:cons "tableName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "resourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-timestamp))
      (common-lisp:list
       (common-lisp:cons "creationTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema-definition))
      (common-lisp:list
       (common-lisp:cons "schemaDefinition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'capacity-specification))
      (common-lisp:list
       (common-lisp:cons "capacitySpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'encryption-specification))
      (common-lisp:list
       (common-lisp:cons "encryptionSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'point-in-time-recovery))
      (common-lisp:list
       (common-lisp:cons "pointInTimeRecovery"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ttl))
      (common-lisp:list
       (common-lisp:cons "ttl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-time-to-live))
      (common-lisp:list
       (common-lisp:cons "defaultTimeToLive"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'comment))
      (common-lisp:list
       (common-lisp:cons "comment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-side-timestamps))
      (common-lisp:list
       (common-lisp:cons "clientSideTimestamps"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replica-specifications))
      (common-lisp:list
       (common-lisp:cons "replicaSpecifications"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-table-response))
   common-lisp:nil))
(common-lisp:deftype integer-object () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition internal-server-exception
     (keyspaces-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       internal-server-exception-message)))
 (common-lisp:export
  (common-lisp:list 'internal-server-exception
                    'internal-server-exception-message)))
(common-lisp:deftype keyspace-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass keyspace-summary common-lisp:nil
                       ((keyspace-name :initarg :keyspace-name :initform
                         (common-lisp:error ":keyspacename is required") :type
                         (common-lisp:or keyspace-name common-lisp:null)
                         :accessor struct-shape-keyspace-summary-keyspace-name
                         :shape "KeyspaceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resourcearn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-keyspace-summary-resource-arn :shape
                         "ARN" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (replication-strategy :initarg :replication-strategy
                         :initform
                         (common-lisp:error ":replicationstrategy is required")
                         :type (common-lisp:or |rs| common-lisp:null) :accessor
                         struct-shape-keyspace-summary-replication-strategy
                         :shape "rs" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (replication-regions :initarg :replication-regions
                         :initform common-lisp:nil :type
                         (common-lisp:or region-list common-lisp:null)
                         :accessor
                         struct-shape-keyspace-summary-replication-regions
                         :shape "RegionList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-keyspace-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'keyspace-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'keyspace-summary 'make-keyspace-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input keyspace-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input keyspace-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'keyspace-name))
      (common-lisp:list
       (common-lisp:cons "keyspaceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "resourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-strategy))
      (common-lisp:list
       (common-lisp:cons "replicationStrategy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'replication-regions))
      (common-lisp:list
       (common-lisp:cons "replicationRegions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input keyspace-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype keyspace-summary-list ()
   '(trivial-types:proper-list keyspace-summary))
 (common-lisp:defun make-keyspace-summary-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list keyspace-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass list-keyspaces-request common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-keyspaces-request-next-token :shape
                         "NextToken" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-keyspaces-request-max-results :shape
                         "MaxResults" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-keyspaces-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-keyspaces-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-keyspaces-request 'make-list-keyspaces-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-keyspaces-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-keyspaces-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-keyspaces-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-keyspaces-response common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-keyspaces-response-next-token :shape
                         "NextToken" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (keyspaces :initarg :keyspaces :initform
                         (common-lisp:error ":keyspaces is required") :type
                         (common-lisp:or keyspace-summary-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-keyspaces-response-keyspaces :shape
                         "KeyspaceSummaryList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-keyspaces-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-keyspaces-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-keyspaces-response 'make-list-keyspaces-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-keyspaces-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-keyspaces-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'keyspaces))
      (common-lisp:list
       (common-lisp:cons "keyspaces"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-keyspaces-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tables-request common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-tables-request-next-token :shape
                         "NextToken" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor struct-shape-list-tables-request-max-results
                         :shape "MaxResults" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (keyspace-name :initarg :keyspace-name :initform
                         (common-lisp:error ":keyspacename is required") :type
                         (common-lisp:or keyspace-name common-lisp:null)
                         :accessor
                         struct-shape-list-tables-request-keyspace-name :shape
                         "KeyspaceName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-tables-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-tables-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-tables-request 'make-list-tables-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-tables-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-tables-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'keyspace-name))
      (common-lisp:list
       (common-lisp:cons "keyspaceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-tables-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tables-response common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-tables-response-next-token :shape
                         "NextToken" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (tables :initarg :tables :initform common-lisp:nil
                         :type
                         (common-lisp:or table-summary-list common-lisp:null)
                         :accessor struct-shape-list-tables-response-tables
                         :shape "TableSummaryList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-tables-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-tables-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-tables-response 'make-list-tables-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-tables-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-tables-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tables))
      (common-lisp:list
       (common-lisp:cons "tables"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-tables-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-request common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resourcearn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-list-tags-for-resource-request-resource-arn
                         :shape "ARN" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-tags-for-resource-request-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-tags-for-resource-request-max-results
                         :shape "MaxResults" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-tags-for-resource-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-request
                    'make-list-tags-for-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "resourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-response common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-tags-for-resource-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-list-tags-for-resource-response-tags
                         :shape "TagList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-tags-for-resource-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-response
                    'make-list-tags-for-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   common-lisp:nil))
(common-lisp:deftype max-results () 'common-lisp:integer)
(common-lisp:deftype next-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass partition-key common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor struct-shape-partition-key-name :shape
                         "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-partition-key
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'partition-key
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'partition-key 'make-partition-key))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input partition-key))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input partition-key))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input partition-key))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype partition-key-list ()
   '(trivial-types:proper-list partition-key))
 (common-lisp:defun make-partition-key-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list partition-key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass point-in-time-recovery common-lisp:nil
                       ((status :initarg :status :initform
                         (common-lisp:error ":status is required") :type
                         (common-lisp:or point-in-time-recovery-status
                                         common-lisp:null)
                         :accessor struct-shape-point-in-time-recovery-status
                         :shape "PointInTimeRecoveryStatus" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-point-in-time-recovery
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'point-in-time-recovery
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'point-in-time-recovery 'make-point-in-time-recovery))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          point-in-time-recovery))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          point-in-time-recovery))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          point-in-time-recovery))
   common-lisp:nil))
(common-lisp:deftype point-in-time-recovery-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass point-in-time-recovery-summary common-lisp:nil
                       ((status :initarg :status :initform
                         (common-lisp:error ":status is required") :type
                         (common-lisp:or point-in-time-recovery-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-point-in-time-recovery-summary-status
                         :shape "PointInTimeRecoveryStatus" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (earliest-restorable-timestamp :initarg
                         :earliest-restorable-timestamp :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-point-in-time-recovery-summary-earliest-restorable-timestamp
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-point-in-time-recovery-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'point-in-time-recovery-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'point-in-time-recovery-summary
                    'make-point-in-time-recovery-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          point-in-time-recovery-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          point-in-time-recovery-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'earliest-restorable-timestamp))
      (common-lisp:list
       (common-lisp:cons "earliestRestorableTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          point-in-time-recovery-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype region-list () '(trivial-types:proper-list |region|))
 (common-lisp:defun make-region-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list |region|))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass replica-auto-scaling-specification common-lisp:nil
                       ((region :initarg :region :initform common-lisp:nil
                         :type (common-lisp:or |region| common-lisp:null)
                         :accessor
                         struct-shape-replica-auto-scaling-specification-region
                         :shape "region" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (auto-scaling-specification :initarg
                         :auto-scaling-specification :initform common-lisp:nil
                         :type
                         (common-lisp:or auto-scaling-specification
                                         common-lisp:null)
                         :accessor
                         struct-shape-replica-auto-scaling-specification-auto-scaling-specification
                         :shape "AutoScalingSpecification" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-replica-auto-scaling-specification
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'replica-auto-scaling-specification
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'replica-auto-scaling-specification
                    'make-replica-auto-scaling-specification))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          replica-auto-scaling-specification))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          replica-auto-scaling-specification))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'region))
      (common-lisp:list
       (common-lisp:cons "region"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-scaling-specification))
      (common-lisp:list
       (common-lisp:cons "autoScalingSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          replica-auto-scaling-specification))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype replica-auto-scaling-specification-list ()
   '(trivial-types:proper-list replica-auto-scaling-specification))
 (common-lisp:defun make-replica-auto-scaling-specification-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            replica-auto-scaling-specification))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass replica-specification common-lisp:nil
                       ((region :initarg :region :initform
                         (common-lisp:error ":region is required") :type
                         (common-lisp:or |region| common-lisp:null) :accessor
                         struct-shape-replica-specification-region :shape
                         "region" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (read-capacity-units :initarg :read-capacity-units
                         :initform common-lisp:nil :type
                         (common-lisp:or capacity-units common-lisp:null)
                         :accessor
                         struct-shape-replica-specification-read-capacity-units
                         :shape "CapacityUnits" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (read-capacity-auto-scaling :initarg
                         :read-capacity-auto-scaling :initform common-lisp:nil
                         :type
                         (common-lisp:or auto-scaling-settings
                                         common-lisp:null)
                         :accessor
                         struct-shape-replica-specification-read-capacity-auto-scaling
                         :shape "AutoScalingSettings" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-replica-specification
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'replica-specification
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'replica-specification 'make-replica-specification))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          replica-specification))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          replica-specification))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'region))
      (common-lisp:list
       (common-lisp:cons "region"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'read-capacity-units))
      (common-lisp:list
       (common-lisp:cons "readCapacityUnits"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'read-capacity-auto-scaling))
      (common-lisp:list
       (common-lisp:cons "readCapacityAutoScaling"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          replica-specification))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype replica-specification-list ()
   '(trivial-types:proper-list replica-specification))
 (common-lisp:defun make-replica-specification-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list replica-specification))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass replica-specification-summary common-lisp:nil
                       ((region :initarg :region :initform common-lisp:nil
                         :type (common-lisp:or |region| common-lisp:null)
                         :accessor
                         struct-shape-replica-specification-summary-region
                         :shape "region" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or table-status common-lisp:null)
                         :accessor
                         struct-shape-replica-specification-summary-status
                         :shape "TableStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (capacity-specification :initarg
                         :capacity-specification :initform common-lisp:nil
                         :type
                         (common-lisp:or capacity-specification-summary
                                         common-lisp:null)
                         :accessor
                         struct-shape-replica-specification-summary-capacity-specification
                         :shape "CapacitySpecificationSummary" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-replica-specification-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'replica-specification-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'replica-specification-summary
                    'make-replica-specification-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          replica-specification-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          replica-specification-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'region))
      (common-lisp:list
       (common-lisp:cons "region"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'capacity-specification))
      (common-lisp:list
       (common-lisp:cons "capacitySpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          replica-specification-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype replica-specification-summary-list ()
   '(trivial-types:proper-list replica-specification-summary))
 (common-lisp:defun make-replica-specification-summary-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            replica-specification-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass replication-specification common-lisp:nil
                       ((replication-strategy :initarg :replication-strategy
                         :initform
                         (common-lisp:error ":replicationstrategy is required")
                         :type (common-lisp:or |rs| common-lisp:null) :accessor
                         struct-shape-replication-specification-replication-strategy
                         :shape "rs" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (region-list :initarg :region-list :initform
                         common-lisp:nil :type
                         (common-lisp:or region-list common-lisp:null)
                         :accessor
                         struct-shape-replication-specification-region-list
                         :shape "RegionList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-replication-specification
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'replication-specification
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'replication-specification
                    'make-replication-specification))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          replication-specification))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          replication-specification))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-strategy))
      (common-lisp:list
       (common-lisp:cons "replicationStrategy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'region-list))
      (common-lisp:list
       (common-lisp:cons "regionList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          replication-specification))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-exception
     (keyspaces-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-not-found-exception-message)
      (resource-arn :initarg :resource-arn :initform common-lisp:nil :reader
       resource-not-found-exception-resource-arn)))
 (common-lisp:export
  (common-lisp:list 'resource-not-found-exception
                    'resource-not-found-exception-message
                    'resource-not-found-exception-resource-arn)))
(common-lisp:progn
 (common-lisp:defclass restore-table-request common-lisp:nil
                       ((source-keyspace-name :initarg :source-keyspace-name
                         :initform
                         (common-lisp:error ":sourcekeyspacename is required")
                         :type (common-lisp:or keyspace-name common-lisp:null)
                         :accessor
                         struct-shape-restore-table-request-source-keyspace-name
                         :shape "KeyspaceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (source-table-name :initarg :source-table-name
                         :initform
                         (common-lisp:error ":sourcetablename is required")
                         :type (common-lisp:or table-name common-lisp:null)
                         :accessor
                         struct-shape-restore-table-request-source-table-name
                         :shape "TableName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (target-keyspace-name :initarg :target-keyspace-name
                         :initform
                         (common-lisp:error ":targetkeyspacename is required")
                         :type (common-lisp:or keyspace-name common-lisp:null)
                         :accessor
                         struct-shape-restore-table-request-target-keyspace-name
                         :shape "KeyspaceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (target-table-name :initarg :target-table-name
                         :initform
                         (common-lisp:error ":targettablename is required")
                         :type (common-lisp:or table-name common-lisp:null)
                         :accessor
                         struct-shape-restore-table-request-target-table-name
                         :shape "TableName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (restore-timestamp :initarg :restore-timestamp
                         :initform common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-restore-table-request-restore-timestamp
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (capacity-specification-override :initarg
                         :capacity-specification-override :initform
                         common-lisp:nil :type
                         (common-lisp:or capacity-specification
                                         common-lisp:null)
                         :accessor
                         struct-shape-restore-table-request-capacity-specification-override
                         :shape "CapacitySpecification" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (encryption-specification-override :initarg
                         :encryption-specification-override :initform
                         common-lisp:nil :type
                         (common-lisp:or encryption-specification
                                         common-lisp:null)
                         :accessor
                         struct-shape-restore-table-request-encryption-specification-override
                         :shape "EncryptionSpecification" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (point-in-time-recovery-override :initarg
                         :point-in-time-recovery-override :initform
                         common-lisp:nil :type
                         (common-lisp:or point-in-time-recovery
                                         common-lisp:null)
                         :accessor
                         struct-shape-restore-table-request-point-in-time-recovery-override
                         :shape "PointInTimeRecovery" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags-override :initarg :tags-override :initform
                         common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-restore-table-request-tags-override
                         :shape "TagList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (auto-scaling-specification :initarg
                         :auto-scaling-specification :initform common-lisp:nil
                         :type
                         (common-lisp:or auto-scaling-specification
                                         common-lisp:null)
                         :accessor
                         struct-shape-restore-table-request-auto-scaling-specification
                         :shape "AutoScalingSpecification" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (replica-specifications :initarg
                         :replica-specifications :initform common-lisp:nil
                         :type
                         (common-lisp:or replica-specification-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-restore-table-request-replica-specifications
                         :shape "ReplicaSpecificationList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-restore-table-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'restore-table-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'restore-table-request 'make-restore-table-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          restore-table-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          restore-table-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-keyspace-name))
      (common-lisp:list
       (common-lisp:cons "sourceKeyspaceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-table-name))
      (common-lisp:list
       (common-lisp:cons "sourceTableName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'target-keyspace-name))
      (common-lisp:list
       (common-lisp:cons "targetKeyspaceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-table-name))
      (common-lisp:list
       (common-lisp:cons "targetTableName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'restore-timestamp))
      (common-lisp:list
       (common-lisp:cons "restoreTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'capacity-specification-override))
      (common-lisp:list
       (common-lisp:cons "capacitySpecificationOverride"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'encryption-specification-override))
      (common-lisp:list
       (common-lisp:cons "encryptionSpecificationOverride"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'point-in-time-recovery-override))
      (common-lisp:list
       (common-lisp:cons "pointInTimeRecoveryOverride"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags-override))
      (common-lisp:list
       (common-lisp:cons "tagsOverride"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-scaling-specification))
      (common-lisp:list
       (common-lisp:cons "autoScalingSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replica-specifications))
      (common-lisp:list
       (common-lisp:cons "replicaSpecifications"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          restore-table-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass restore-table-response common-lisp:nil
                       ((restored-table-arn :initarg :restored-table-arn
                         :initform
                         (common-lisp:error ":restoredtablearn is required")
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-restore-table-response-restored-table-arn
                         :shape "ARN" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-restore-table-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'restore-table-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'restore-table-response 'make-restore-table-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          restore-table-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          restore-table-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'restored-table-arn))
      (common-lisp:list
       (common-lisp:cons "restoredTableARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          restore-table-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass schema-definition common-lisp:nil
                       ((all-columns :initarg :all-columns :initform
                         (common-lisp:error ":allcolumns is required") :type
                         (common-lisp:or column-definition-list
                                         common-lisp:null)
                         :accessor struct-shape-schema-definition-all-columns
                         :shape "ColumnDefinitionList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (partition-keys :initarg :partition-keys :initform
                         (common-lisp:error ":partitionkeys is required") :type
                         (common-lisp:or partition-key-list common-lisp:null)
                         :accessor
                         struct-shape-schema-definition-partition-keys :shape
                         "PartitionKeyList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (clustering-keys :initarg :clustering-keys :initform
                         common-lisp:nil :type
                         (common-lisp:or clustering-key-list common-lisp:null)
                         :accessor
                         struct-shape-schema-definition-clustering-keys :shape
                         "ClusteringKeyList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (static-columns :initarg :static-columns :initform
                         common-lisp:nil :type
                         (common-lisp:or static-column-list common-lisp:null)
                         :accessor
                         struct-shape-schema-definition-static-columns :shape
                         "StaticColumnList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-schema-definition
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'schema-definition
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'schema-definition 'make-schema-definition))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input schema-definition))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input schema-definition))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'all-columns))
      (common-lisp:list
       (common-lisp:cons "allColumns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'partition-keys))
      (common-lisp:list
       (common-lisp:cons "partitionKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'clustering-keys))
      (common-lisp:list
       (common-lisp:cons "clusteringKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'static-columns))
      (common-lisp:list
       (common-lisp:cons "staticColumns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input schema-definition))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition service-quota-exceeded-exception
     (keyspaces-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       service-quota-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'service-quota-exceeded-exception
                    'service-quota-exceeded-exception-message)))
(common-lisp:deftype sort-order () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass static-column common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor struct-shape-static-column-name :shape
                         "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-static-column
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'static-column
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'static-column 'make-static-column))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input static-column))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input static-column))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input static-column))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype static-column-list ()
   '(trivial-types:proper-list static-column))
 (common-lisp:defun make-static-column-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list static-column))
   aws-sdk/generator/shape::members))
(common-lisp:deftype string () 'common-lisp:string)
(common-lisp:deftype table-name () 'common-lisp:string)
(common-lisp:deftype table-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass table-summary common-lisp:nil
                       ((keyspace-name :initarg :keyspace-name :initform
                         (common-lisp:error ":keyspacename is required") :type
                         (common-lisp:or keyspace-name common-lisp:null)
                         :accessor struct-shape-table-summary-keyspace-name
                         :shape "KeyspaceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (table-name :initarg :table-name :initform
                         (common-lisp:error ":tablename is required") :type
                         (common-lisp:or table-name common-lisp:null) :accessor
                         struct-shape-table-summary-table-name :shape
                         "TableName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resourcearn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-table-summary-resource-arn :shape "ARN"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-table-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'table-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'table-summary 'make-table-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input table-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input table-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'keyspace-name))
      (common-lisp:list
       (common-lisp:cons "keyspaceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-name))
      (common-lisp:list
       (common-lisp:cons "tableName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "resourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input table-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype table-summary-list ()
   '(trivial-types:proper-list table-summary))
 (common-lisp:defun make-table-summary-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list table-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass tag common-lisp:nil
                       ((key :initarg :key :initform
                         (common-lisp:error ":key is required") :type
                         (common-lisp:or tag-key common-lisp:null) :accessor
                         struct-shape-tag-key :shape "TagKey" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (value :initarg :value :initform
                         (common-lisp:error ":value is required") :type
                         (common-lisp:or tag-value common-lisp:null) :accessor
                         struct-shape-tag-value :shape "TagValue" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tag (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'tag
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'tag 'make-tag))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag))
   common-lisp:nil))
(common-lisp:deftype tag-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tag-list () '(trivial-types:proper-list tag))
 (common-lisp:defun make-tag-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass tag-resource-request common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resourcearn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-tag-resource-request-resource-arn :shape
                         "ARN" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (tags :initarg :tags :initform
                         (common-lisp:error ":tags is required") :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-tag-resource-request-tags :shape
                         "TagList" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tag-resource-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'tag-resource-request 'make-tag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "resourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass tag-resource-response common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tag-resource-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'tag-resource-response 'make-tag-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   common-lisp:nil))
(common-lisp:deftype tag-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass target-tracking-scaling-policy-configuration
                       common-lisp:nil
                       ((disable-scale-in :initarg :disable-scale-in :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean-object common-lisp:null)
                         :accessor
                         struct-shape-target-tracking-scaling-policy-configuration-disable-scale-in
                         :shape "BooleanObject" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (scale-in-cooldown :initarg :scale-in-cooldown
                         :initform common-lisp:nil :type
                         (common-lisp:or integer-object common-lisp:null)
                         :accessor
                         struct-shape-target-tracking-scaling-policy-configuration-scale-in-cooldown
                         :shape "IntegerObject" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (scale-out-cooldown :initarg :scale-out-cooldown
                         :initform common-lisp:nil :type
                         (common-lisp:or integer-object common-lisp:null)
                         :accessor
                         struct-shape-target-tracking-scaling-policy-configuration-scale-out-cooldown
                         :shape "IntegerObject" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (target-value :initarg :target-value :initform
                         (common-lisp:error ":targetvalue is required") :type
                         (common-lisp:or double-object common-lisp:null)
                         :accessor
                         struct-shape-target-tracking-scaling-policy-configuration-target-value
                         :shape "DoubleObject" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-target-tracking-scaling-policy-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'target-tracking-scaling-policy-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'target-tracking-scaling-policy-configuration
                    'make-target-tracking-scaling-policy-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          target-tracking-scaling-policy-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          target-tracking-scaling-policy-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'disable-scale-in))
      (common-lisp:list
       (common-lisp:cons "disableScaleIn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scale-in-cooldown))
      (common-lisp:list
       (common-lisp:cons "scaleInCooldown"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scale-out-cooldown))
      (common-lisp:list
       (common-lisp:cons "scaleOutCooldown"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-value))
      (common-lisp:list
       (common-lisp:cons "targetValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          target-tracking-scaling-policy-configuration))
   common-lisp:nil))
(common-lisp:deftype throughput-mode () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass time-to-live common-lisp:nil
                       ((status :initarg :status :initform
                         (common-lisp:error ":status is required") :type
                         (common-lisp:or time-to-live-status common-lisp:null)
                         :accessor struct-shape-time-to-live-status :shape
                         "TimeToLiveStatus" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-time-to-live
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'time-to-live
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'time-to-live 'make-time-to-live))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input time-to-live))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input time-to-live))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input time-to-live))
   common-lisp:nil))
(common-lisp:deftype time-to-live-status () 'common-lisp:string)
(common-lisp:deftype timestamp () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass untag-resource-request common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resourcearn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-untag-resource-request-resource-arn
                         :shape "ARN" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (tags :initarg :tags :initform
                         (common-lisp:error ":tags is required") :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-untag-resource-request-tags :shape
                         "TagList" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-untag-resource-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'untag-resource-request 'make-untag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "resourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass untag-resource-response common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-untag-resource-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'untag-resource-response 'make-untag-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-table-request common-lisp:nil
                       ((keyspace-name :initarg :keyspace-name :initform
                         (common-lisp:error ":keyspacename is required") :type
                         (common-lisp:or keyspace-name common-lisp:null)
                         :accessor
                         struct-shape-update-table-request-keyspace-name :shape
                         "KeyspaceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (table-name :initarg :table-name :initform
                         (common-lisp:error ":tablename is required") :type
                         (common-lisp:or table-name common-lisp:null) :accessor
                         struct-shape-update-table-request-table-name :shape
                         "TableName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (add-columns :initarg :add-columns :initform
                         common-lisp:nil :type
                         (common-lisp:or column-definition-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-table-request-add-columns :shape
                         "ColumnDefinitionList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (capacity-specification :initarg
                         :capacity-specification :initform common-lisp:nil
                         :type
                         (common-lisp:or capacity-specification
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-table-request-capacity-specification
                         :shape "CapacitySpecification" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (encryption-specification :initarg
                         :encryption-specification :initform common-lisp:nil
                         :type
                         (common-lisp:or encryption-specification
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-table-request-encryption-specification
                         :shape "EncryptionSpecification" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (point-in-time-recovery :initarg
                         :point-in-time-recovery :initform common-lisp:nil
                         :type
                         (common-lisp:or point-in-time-recovery
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-table-request-point-in-time-recovery
                         :shape "PointInTimeRecovery" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (ttl :initarg :ttl :initform common-lisp:nil :type
                         (common-lisp:or time-to-live common-lisp:null)
                         :accessor struct-shape-update-table-request-ttl :shape
                         "TimeToLive" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (default-time-to-live :initarg :default-time-to-live
                         :initform common-lisp:nil :type
                         (common-lisp:or default-time-to-live common-lisp:null)
                         :accessor
                         struct-shape-update-table-request-default-time-to-live
                         :shape "DefaultTimeToLive" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (client-side-timestamps :initarg
                         :client-side-timestamps :initform common-lisp:nil
                         :type
                         (common-lisp:or client-side-timestamps
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-table-request-client-side-timestamps
                         :shape "ClientSideTimestamps" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (auto-scaling-specification :initarg
                         :auto-scaling-specification :initform common-lisp:nil
                         :type
                         (common-lisp:or auto-scaling-specification
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-table-request-auto-scaling-specification
                         :shape "AutoScalingSpecification" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (replica-specifications :initarg
                         :replica-specifications :initform common-lisp:nil
                         :type
                         (common-lisp:or replica-specification-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-table-request-replica-specifications
                         :shape "ReplicaSpecificationList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-table-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-table-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-table-request 'make-update-table-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-table-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-table-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'keyspace-name))
      (common-lisp:list
       (common-lisp:cons "keyspaceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-name))
      (common-lisp:list
       (common-lisp:cons "tableName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'add-columns))
      (common-lisp:list
       (common-lisp:cons "addColumns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'capacity-specification))
      (common-lisp:list
       (common-lisp:cons "capacitySpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'encryption-specification))
      (common-lisp:list
       (common-lisp:cons "encryptionSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'point-in-time-recovery))
      (common-lisp:list
       (common-lisp:cons "pointInTimeRecovery"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ttl))
      (common-lisp:list
       (common-lisp:cons "ttl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-time-to-live))
      (common-lisp:list
       (common-lisp:cons "defaultTimeToLive"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-side-timestamps))
      (common-lisp:list
       (common-lisp:cons "clientSideTimestamps"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-scaling-specification))
      (common-lisp:list
       (common-lisp:cons "autoScalingSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replica-specifications))
      (common-lisp:list
       (common-lisp:cons "replicaSpecifications"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-table-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-table-response common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resourcearn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-update-table-response-resource-arn :shape
                         "ARN" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-table-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-table-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-table-response 'make-update-table-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-table-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-table-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "resourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-table-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition validation-exception
     (keyspaces-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       validation-exception-message)))
 (common-lisp:export
  (common-lisp:list 'validation-exception 'validation-exception-message)))
(common-lisp:deftype |kmsKeyARN| () 'common-lisp:string)
(common-lisp:deftype |region| () 'common-lisp:string)
(common-lisp:deftype |rs| () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defun create-keyspace
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key keyspace-name tags
                     replication-specification)
   (common-lisp:declare
    (common-lisp:ignorable keyspace-name tags replication-specification))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-keyspace-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'keyspaces-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateKeyspace"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-keyspace))
(common-lisp:progn
 (common-lisp:defun create-table
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key keyspace-name table-name
                     schema-definition comment capacity-specification
                     encryption-specification point-in-time-recovery ttl
                     default-time-to-live tags client-side-timestamps
                     auto-scaling-specification replica-specifications)
   (common-lisp:declare
    (common-lisp:ignorable keyspace-name table-name schema-definition comment
     capacity-specification encryption-specification point-in-time-recovery ttl
     default-time-to-live tags client-side-timestamps
     auto-scaling-specification replica-specifications))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-table-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'keyspaces-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateTable"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-table))
(common-lisp:progn
 (common-lisp:defun delete-keyspace
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key keyspace-name)
   (common-lisp:declare (common-lisp:ignorable keyspace-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-keyspace-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'keyspaces-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteKeyspace"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-keyspace))
(common-lisp:progn
 (common-lisp:defun delete-table
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key keyspace-name table-name)
   (common-lisp:declare (common-lisp:ignorable keyspace-name table-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-table-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'keyspaces-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteTable"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-table))
(common-lisp:progn
 (common-lisp:defun get-keyspace
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key keyspace-name)
   (common-lisp:declare (common-lisp:ignorable keyspace-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-keyspace-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'keyspaces-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetKeyspace"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-keyspace))
(common-lisp:progn
 (common-lisp:defun get-table
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key keyspace-name table-name)
   (common-lisp:declare (common-lisp:ignorable keyspace-name table-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-table-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'keyspaces-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/" "GetTable"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-table))
(common-lisp:progn
 (common-lisp:defun get-table-auto-scaling-settings
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key keyspace-name table-name)
   (common-lisp:declare (common-lisp:ignorable keyspace-name table-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-table-auto-scaling-settings-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'keyspaces-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetTableAutoScalingSettings"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-table-auto-scaling-settings))
(common-lisp:progn
 (common-lisp:defun list-keyspaces
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results)
   (common-lisp:declare (common-lisp:ignorable next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-keyspaces-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'keyspaces-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListKeyspaces"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-keyspaces))
(common-lisp:progn
 (common-lisp:defun list-tables
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results keyspace-name)
   (common-lisp:declare
    (common-lisp:ignorable next-token max-results keyspace-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tables-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'keyspaces-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListTables"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-tables))
(common-lisp:progn
 (common-lisp:defun list-tags-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable resource-arn next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-for-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'keyspaces-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListTagsForResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-tags-for-resource))
(common-lisp:progn
 (common-lisp:defun restore-table
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key source-keyspace-name source-table-name
                     target-keyspace-name target-table-name restore-timestamp
                     capacity-specification-override
                     encryption-specification-override
                     point-in-time-recovery-override tags-override
                     auto-scaling-specification replica-specifications)
   (common-lisp:declare
    (common-lisp:ignorable source-keyspace-name source-table-name
     target-keyspace-name target-table-name restore-timestamp
     capacity-specification-override encryption-specification-override
     point-in-time-recovery-override tags-override auto-scaling-specification
     replica-specifications))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-restore-table-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'keyspaces-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "RestoreTable"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'restore-table))
(common-lisp:progn
 (common-lisp:defun tag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tags)
   (common-lisp:declare (common-lisp:ignorable resource-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'keyspaces-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "TagResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'tag-resource))
(common-lisp:progn
 (common-lisp:defun untag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tags)
   (common-lisp:declare (common-lisp:ignorable resource-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'keyspaces-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UntagResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'untag-resource))
(common-lisp:progn
 (common-lisp:defun update-table
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key keyspace-name table-name add-columns
                     capacity-specification encryption-specification
                     point-in-time-recovery ttl default-time-to-live
                     client-side-timestamps auto-scaling-specification
                     replica-specifications)
   (common-lisp:declare
    (common-lisp:ignorable keyspace-name table-name add-columns
     capacity-specification encryption-specification point-in-time-recovery ttl
     default-time-to-live client-side-timestamps auto-scaling-specification
     replica-specifications))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-table-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'keyspaces-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateTable"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-table))
