;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(uiop/package:define-package #:aws-sdk/services/neptunedata/api (:use)
                             (:nicknames #:aws/neptunedata)
                             (:import-from #:aws-sdk/generator/shape)
                             (:import-from #:aws-sdk/generator/operation)
                             (:import-from #:aws-sdk/api)
                             (:import-from #:aws-sdk/request)
                             (:import-from #:aws-sdk/json-request)
                             (:import-from #:aws-sdk/rest-json-request)
                             (:import-from #:aws-sdk/rest-xml-request)
                             (:import-from #:aws-sdk/query-request)
                             (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/neptunedata/api)
(common-lisp:progn
 (common-lisp:define-condition neptunedata-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'neptunedata-error))
(common-lisp:progn
 (common-lisp:defclass neptunedata-request
                       (aws-sdk/generator/service::rest-json-request)
                       common-lisp:nil
                       (:default-initargs :service "neptunedata" :api-version
                        "2023-08-01" :host-prefix "neptune-db" :signing-name
                        "neptune-db" :global-host common-lisp:nil))
 (common-lisp:export 'neptunedata-request))
(common-lisp:defvar *error-map*
  '(("AccessDeniedException" . access-denied-exception)
    ("BadRequestException" . bad-request-exception)
    ("BulkLoadIdNotFoundException" . bulk-load-id-not-found-exception)
    ("CancelledByUserException" . cancelled-by-user-exception)
    ("ClientTimeoutException" . client-timeout-exception)
    ("ConcurrentModificationException" . concurrent-modification-exception)
    ("ConstraintViolationException" . constraint-violation-exception)
    ("ExpiredStreamException" . expired-stream-exception)
    ("FailureByQueryException" . failure-by-query-exception)
    ("IllegalArgumentException" . illegal-argument-exception)
    ("InternalFailureException" . internal-failure-exception)
    ("InvalidArgumentException" . invalid-argument-exception)
    ("InvalidNumericDataException" . invalid-numeric-data-exception)
    ("InvalidParameterException" . invalid-parameter-exception)
    ("LoadUrlAccessDeniedException" . load-url-access-denied-exception)
    ("MLResourceNotFoundException" . mlresource-not-found-exception)
    ("MalformedQueryException" . malformed-query-exception)
    ("MemoryLimitExceededException" . memory-limit-exceeded-exception)
    ("MethodNotAllowedException" . method-not-allowed-exception)
    ("MissingParameterException" . missing-parameter-exception)
    ("ParsingException" . parsing-exception)
    ("PreconditionsFailedException" . preconditions-failed-exception)
    ("QueryLimitExceededException" . query-limit-exceeded-exception)
    ("QueryLimitException" . query-limit-exception)
    ("QueryTooLargeException" . query-too-large-exception)
    ("ReadOnlyViolationException" . read-only-violation-exception)
    ("S3Exception" . s3exception)
    ("ServerShutdownException" . server-shutdown-exception)
    ("StatisticsNotAvailableException" . statistics-not-available-exception)
    ("StreamRecordsNotFoundException" . stream-records-not-found-exception)
    ("ThrottlingException" . throttling-exception)
    ("TimeLimitExceededException" . time-limit-exceeded-exception)
    ("TooManyRequestsException" . too-many-requests-exception)
    ("UnsupportedOperationException" . unsupported-operation-exception)))
(common-lisp:progn
 (common-lisp:define-condition access-denied-exception
     (neptunedata-error)
     ((code :initarg :code :initform common-lisp:nil :reader
       access-denied-exception-code)
      (detailed-message :initarg :detailed-message :initform common-lisp:nil
       :reader access-denied-exception-detailed-message)
      (request-id :initarg :request-id :initform common-lisp:nil :reader
       access-denied-exception-request-id)))
 (common-lisp:export
  (common-lisp:list 'access-denied-exception 'access-denied-exception-code
                    'access-denied-exception-detailed-message
                    'access-denied-exception-request-id)))
(common-lisp:deftype action () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition bad-request-exception
     (neptunedata-error)
     ((code :initarg :code :initform common-lisp:nil :reader
       bad-request-exception-code)
      (detailed-message :initarg :detailed-message :initform common-lisp:nil
       :reader bad-request-exception-detailed-message)
      (request-id :initarg :request-id :initform common-lisp:nil :reader
       bad-request-exception-request-id)))
 (common-lisp:export
  (common-lisp:list 'bad-request-exception 'bad-request-exception-code
                    'bad-request-exception-detailed-message
                    'bad-request-exception-request-id)))
(common-lisp:deftype blob ()
  '(common-lisp:simple-array (common-lisp:unsigned-byte 8) (common-lisp:*)))
(common-lisp:deftype boolean () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:define-condition bulk-load-id-not-found-exception
     (neptunedata-error)
     ((code :initarg :code :initform common-lisp:nil :reader
       bulk-load-id-not-found-exception-code)
      (detailed-message :initarg :detailed-message :initform common-lisp:nil
       :reader bulk-load-id-not-found-exception-detailed-message)
      (request-id :initarg :request-id :initform common-lisp:nil :reader
       bulk-load-id-not-found-exception-request-id)))
 (common-lisp:export
  (common-lisp:list 'bulk-load-id-not-found-exception
                    'bulk-load-id-not-found-exception-code
                    'bulk-load-id-not-found-exception-detailed-message
                    'bulk-load-id-not-found-exception-request-id)))
(common-lisp:progn
 (common-lisp:defclass cancel-gremlin-query-input common-lisp:nil
                       ((query-id :initarg :query-id :initform
                         (common-lisp:error ":queryid is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-cancel-gremlin-query-input-query-id
                         :shape "String" :location "uri" :location-name
                         "queryId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-cancel-gremlin-query-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'cancel-gremlin-query-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'cancel-gremlin-query-input
                    'make-cancel-gremlin-query-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cancel-gremlin-query-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cancel-gremlin-query-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cancel-gremlin-query-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass cancel-gremlin-query-output common-lisp:nil
                       ((status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-cancel-gremlin-query-output-status :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-cancel-gremlin-query-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'cancel-gremlin-query-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'cancel-gremlin-query-output
                    'make-cancel-gremlin-query-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cancel-gremlin-query-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cancel-gremlin-query-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cancel-gremlin-query-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass cancel-loader-job-input common-lisp:nil
                       ((load-id :initarg :load-id :initform
                         (common-lisp:error ":loadid is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-cancel-loader-job-input-load-id :shape
                         "String" :location "uri" :location-name "loadId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-cancel-loader-job-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'cancel-loader-job-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'cancel-loader-job-input 'make-cancel-loader-job-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cancel-loader-job-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cancel-loader-job-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cancel-loader-job-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass cancel-loader-job-output common-lisp:nil
                       ((status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-cancel-loader-job-output-status
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-cancel-loader-job-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'cancel-loader-job-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'cancel-loader-job-output 'make-cancel-loader-job-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cancel-loader-job-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cancel-loader-job-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cancel-loader-job-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass cancel-mldata-processing-job-input common-lisp:nil
                       ((clean :initarg :clean :initform common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-cancel-mldata-processing-job-input-clean
                         :shape "Boolean" :location "querystring"
                         :location-name "clean")
                        (id :initarg :id :initform
                         (common-lisp:error ":id is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-cancel-mldata-processing-job-input-id
                         :shape "String" :location "uri" :location-name "id")
                        (neptune-iam-role-arn :initarg :neptune-iam-role-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-cancel-mldata-processing-job-input-neptune-iam-role-arn
                         :shape "String" :location "querystring" :location-name
                         "neptuneIamRoleArn"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-cancel-mldata-processing-job-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'cancel-mldata-processing-job-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'cancel-mldata-processing-job-input
                    'make-cancel-mldata-processing-job-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cancel-mldata-processing-job-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cancel-mldata-processing-job-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cancel-mldata-processing-job-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass cancel-mldata-processing-job-output common-lisp:nil
                       ((status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-cancel-mldata-processing-job-output-status
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-cancel-mldata-processing-job-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'cancel-mldata-processing-job-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'cancel-mldata-processing-job-output
                    'make-cancel-mldata-processing-job-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cancel-mldata-processing-job-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cancel-mldata-processing-job-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cancel-mldata-processing-job-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass cancel-mlmodel-training-job-input common-lisp:nil
                       ((clean :initarg :clean :initform common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-cancel-mlmodel-training-job-input-clean
                         :shape "Boolean" :location "querystring"
                         :location-name "clean")
                        (id :initarg :id :initform
                         (common-lisp:error ":id is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-cancel-mlmodel-training-job-input-id
                         :shape "String" :location "uri" :location-name "id")
                        (neptune-iam-role-arn :initarg :neptune-iam-role-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-cancel-mlmodel-training-job-input-neptune-iam-role-arn
                         :shape "String" :location "querystring" :location-name
                         "neptuneIamRoleArn"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-cancel-mlmodel-training-job-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'cancel-mlmodel-training-job-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'cancel-mlmodel-training-job-input
                    'make-cancel-mlmodel-training-job-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cancel-mlmodel-training-job-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cancel-mlmodel-training-job-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cancel-mlmodel-training-job-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass cancel-mlmodel-training-job-output common-lisp:nil
                       ((status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-cancel-mlmodel-training-job-output-status
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-cancel-mlmodel-training-job-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'cancel-mlmodel-training-job-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'cancel-mlmodel-training-job-output
                    'make-cancel-mlmodel-training-job-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cancel-mlmodel-training-job-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cancel-mlmodel-training-job-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cancel-mlmodel-training-job-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass cancel-mlmodel-transform-job-input common-lisp:nil
                       ((clean :initarg :clean :initform common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-cancel-mlmodel-transform-job-input-clean
                         :shape "Boolean" :location "querystring"
                         :location-name "clean")
                        (id :initarg :id :initform
                         (common-lisp:error ":id is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-cancel-mlmodel-transform-job-input-id
                         :shape "String" :location "uri" :location-name "id")
                        (neptune-iam-role-arn :initarg :neptune-iam-role-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-cancel-mlmodel-transform-job-input-neptune-iam-role-arn
                         :shape "String" :location "querystring" :location-name
                         "neptuneIamRoleArn"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-cancel-mlmodel-transform-job-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'cancel-mlmodel-transform-job-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'cancel-mlmodel-transform-job-input
                    'make-cancel-mlmodel-transform-job-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cancel-mlmodel-transform-job-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cancel-mlmodel-transform-job-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cancel-mlmodel-transform-job-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass cancel-mlmodel-transform-job-output common-lisp:nil
                       ((status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-cancel-mlmodel-transform-job-output-status
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-cancel-mlmodel-transform-job-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'cancel-mlmodel-transform-job-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'cancel-mlmodel-transform-job-output
                    'make-cancel-mlmodel-transform-job-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cancel-mlmodel-transform-job-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cancel-mlmodel-transform-job-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cancel-mlmodel-transform-job-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass cancel-open-cypher-query-input common-lisp:nil
                       ((query-id :initarg :query-id :initform
                         (common-lisp:error ":queryid is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-cancel-open-cypher-query-input-query-id
                         :shape "String" :location "uri" :location-name
                         "queryId")
                        (silent :initarg :silent :initform common-lisp:nil
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         struct-shape-cancel-open-cypher-query-input-silent
                         :shape "Boolean" :location "querystring"
                         :location-name "silent"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-cancel-open-cypher-query-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'cancel-open-cypher-query-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'cancel-open-cypher-query-input
                    'make-cancel-open-cypher-query-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cancel-open-cypher-query-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cancel-open-cypher-query-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cancel-open-cypher-query-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass cancel-open-cypher-query-output common-lisp:nil
                       ((payload :initarg :payload :initform common-lisp:nil
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         struct-shape-cancel-open-cypher-query-output-payload
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-cancel-open-cypher-query-output-status
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-cancel-open-cypher-query-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'cancel-open-cypher-query-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'cancel-open-cypher-query-output
                    'make-cancel-open-cypher-query-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cancel-open-cypher-query-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cancel-open-cypher-query-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'payload))
      (common-lisp:list
       (common-lisp:cons "payload"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cancel-open-cypher-query-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition cancelled-by-user-exception
     (neptunedata-error)
     ((code :initarg :code :initform common-lisp:nil :reader
       cancelled-by-user-exception-code)
      (detailed-message :initarg :detailed-message :initform common-lisp:nil
       :reader cancelled-by-user-exception-detailed-message)
      (request-id :initarg :request-id :initform common-lisp:nil :reader
       cancelled-by-user-exception-request-id)))
 (common-lisp:export
  (common-lisp:list 'cancelled-by-user-exception
                    'cancelled-by-user-exception-code
                    'cancelled-by-user-exception-detailed-message
                    'cancelled-by-user-exception-request-id)))
(common-lisp:progn
 (common-lisp:deftype classes () '(trivial-types:proper-list string))
 (common-lisp:defun make-classes
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition client-timeout-exception
     (neptunedata-error)
     ((code :initarg :code :initform common-lisp:nil :reader
       client-timeout-exception-code)
      (detailed-message :initarg :detailed-message :initform common-lisp:nil
       :reader client-timeout-exception-detailed-message)
      (request-id :initarg :request-id :initform common-lisp:nil :reader
       client-timeout-exception-request-id)))
 (common-lisp:export
  (common-lisp:list 'client-timeout-exception 'client-timeout-exception-code
                    'client-timeout-exception-detailed-message
                    'client-timeout-exception-request-id)))
(common-lisp:progn
 (common-lisp:define-condition concurrent-modification-exception
     (neptunedata-error)
     ((code :initarg :code :initform common-lisp:nil :reader
       concurrent-modification-exception-code)
      (detailed-message :initarg :detailed-message :initform common-lisp:nil
       :reader concurrent-modification-exception-detailed-message)
      (request-id :initarg :request-id :initform common-lisp:nil :reader
       concurrent-modification-exception-request-id)))
 (common-lisp:export
  (common-lisp:list 'concurrent-modification-exception
                    'concurrent-modification-exception-code
                    'concurrent-modification-exception-detailed-message
                    'concurrent-modification-exception-request-id)))
(common-lisp:progn
 (common-lisp:define-condition constraint-violation-exception
     (neptunedata-error)
     ((code :initarg :code :initform common-lisp:nil :reader
       constraint-violation-exception-code)
      (detailed-message :initarg :detailed-message :initform common-lisp:nil
       :reader constraint-violation-exception-detailed-message)
      (request-id :initarg :request-id :initform common-lisp:nil :reader
       constraint-violation-exception-request-id)))
 (common-lisp:export
  (common-lisp:list 'constraint-violation-exception
                    'constraint-violation-exception-code
                    'constraint-violation-exception-detailed-message
                    'constraint-violation-exception-request-id)))
(common-lisp:progn
 (common-lisp:defclass create-mlendpoint-input common-lisp:nil
                       ((id :initarg :id :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-mlendpoint-input-id :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (instance-count :initarg :instance-count :initform
                         common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-create-mlendpoint-input-instance-count
                         :shape "Integer" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (instance-type :initarg :instance-type :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-mlendpoint-input-instance-type
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (ml-model-training-job-id :initarg
                         :ml-model-training-job-id :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-create-mlendpoint-input-ml-model-training-job-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (ml-model-transform-job-id :initarg
                         :ml-model-transform-job-id :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-create-mlendpoint-input-ml-model-transform-job-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (model-name :initarg :model-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-mlendpoint-input-model-name :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (neptune-iam-role-arn :initarg :neptune-iam-role-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-mlendpoint-input-neptune-iam-role-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (update :initarg :update :initform common-lisp:nil
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor struct-shape-create-mlendpoint-input-update
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (volume-encryption-kmskey :initarg
                         :volume-encryption-kmskey :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-create-mlendpoint-input-volume-encryption-kmskey
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-mlendpoint-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-mlendpoint-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-mlendpoint-input 'make-create-mlendpoint-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-mlendpoint-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-mlendpoint-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-count))
      (common-lisp:list
       (common-lisp:cons "instanceCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-type))
      (common-lisp:list
       (common-lisp:cons "instanceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ml-model-training-job-id))
      (common-lisp:list
       (common-lisp:cons "mlModelTrainingJobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ml-model-transform-job-id))
      (common-lisp:list
       (common-lisp:cons "mlModelTransformJobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-name))
      (common-lisp:list
       (common-lisp:cons "modelName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'neptune-iam-role-arn))
      (common-lisp:list
       (common-lisp:cons "neptuneIamRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update))
      (common-lisp:list
       (common-lisp:cons "update"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'volume-encryption-kmskey))
      (common-lisp:list
       (common-lisp:cons "volumeEncryptionKMSKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-mlendpoint-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-mlendpoint-output common-lisp:nil
                       ((arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-mlendpoint-output-arn :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (creation-time-in-millis :initarg
                         :creation-time-in-millis :initform common-lisp:nil
                         :type (common-lisp:or long common-lisp:null) :accessor
                         struct-shape-create-mlendpoint-output-creation-time-in-millis
                         :shape "Long" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (id :initarg :id :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-mlendpoint-output-id :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-mlendpoint-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-mlendpoint-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-mlendpoint-output 'make-create-mlendpoint-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-mlendpoint-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-mlendpoint-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'creation-time-in-millis))
      (common-lisp:list
       (common-lisp:cons "creationTimeInMillis"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-mlendpoint-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass custom-model-training-parameters common-lisp:nil
                       ((source-s3directory-path :initarg
                         :source-s3directory-path :initform
                         (common-lisp:error
                          ":sources3directorypath is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-custom-model-training-parameters-source-s3directory-path
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (training-entry-point-script :initarg
                         :training-entry-point-script :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-custom-model-training-parameters-training-entry-point-script
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (transform-entry-point-script :initarg
                         :transform-entry-point-script :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-custom-model-training-parameters-transform-entry-point-script
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-custom-model-training-parameters
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'custom-model-training-parameters
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'custom-model-training-parameters
                    'make-custom-model-training-parameters))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          custom-model-training-parameters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          custom-model-training-parameters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-s3directory-path))
      (common-lisp:list
       (common-lisp:cons "sourceS3DirectoryPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'training-entry-point-script))
      (common-lisp:list
       (common-lisp:cons "trainingEntryPointScript"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'transform-entry-point-script))
      (common-lisp:list
       (common-lisp:cons "transformEntryPointScript"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          custom-model-training-parameters))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass custom-model-transform-parameters common-lisp:nil
                       ((source-s3directory-path :initarg
                         :source-s3directory-path :initform
                         (common-lisp:error
                          ":sources3directorypath is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-custom-model-transform-parameters-source-s3directory-path
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (transform-entry-point-script :initarg
                         :transform-entry-point-script :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-custom-model-transform-parameters-transform-entry-point-script
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-custom-model-transform-parameters
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'custom-model-transform-parameters
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'custom-model-transform-parameters
                    'make-custom-model-transform-parameters))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          custom-model-transform-parameters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          custom-model-transform-parameters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-s3directory-path))
      (common-lisp:list
       (common-lisp:cons "sourceS3DirectoryPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'transform-entry-point-script))
      (common-lisp:list
       (common-lisp:cons "transformEntryPointScript"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          custom-model-transform-parameters))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-mlendpoint-input common-lisp:nil
                       ((clean :initarg :clean :initform common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-delete-mlendpoint-input-clean :shape
                         "Boolean" :location "querystring" :location-name
                         "clean")
                        (id :initarg :id :initform
                         (common-lisp:error ":id is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-delete-mlendpoint-input-id :shape
                         "String" :location "uri" :location-name "id")
                        (neptune-iam-role-arn :initarg :neptune-iam-role-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-delete-mlendpoint-input-neptune-iam-role-arn
                         :shape "String" :location "querystring" :location-name
                         "neptuneIamRoleArn"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-mlendpoint-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-mlendpoint-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-mlendpoint-input 'make-delete-mlendpoint-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-mlendpoint-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-mlendpoint-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-mlendpoint-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-mlendpoint-output common-lisp:nil
                       ((status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-delete-mlendpoint-output-status
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-mlendpoint-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-mlendpoint-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-mlendpoint-output 'make-delete-mlendpoint-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-mlendpoint-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-mlendpoint-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-mlendpoint-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-propertygraph-statistics-output common-lisp:nil
                       ((payload :initarg :payload :initform common-lisp:nil
                         :type
                         (common-lisp:or delete-statistics-value-map
                                         common-lisp:null)
                         :accessor
                         struct-shape-delete-propertygraph-statistics-output-payload
                         :shape "DeleteStatisticsValueMap" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-delete-propertygraph-statistics-output-status
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status-code :initarg :status-code :initform
                         common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-delete-propertygraph-statistics-output-status-code
                         :shape "Integer" :location "statusCode" :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-propertygraph-statistics-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-propertygraph-statistics-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-propertygraph-statistics-output
                    'make-delete-propertygraph-statistics-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-propertygraph-statistics-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-propertygraph-statistics-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'payload))
      (common-lisp:list
       (common-lisp:cons "payload"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-propertygraph-statistics-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-sparql-statistics-output common-lisp:nil
                       ((payload :initarg :payload :initform common-lisp:nil
                         :type
                         (common-lisp:or delete-statistics-value-map
                                         common-lisp:null)
                         :accessor
                         struct-shape-delete-sparql-statistics-output-payload
                         :shape "DeleteStatisticsValueMap" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-delete-sparql-statistics-output-status
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status-code :initarg :status-code :initform
                         common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-delete-sparql-statistics-output-status-code
                         :shape "Integer" :location "statusCode" :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-sparql-statistics-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-sparql-statistics-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-sparql-statistics-output
                    'make-delete-sparql-statistics-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-sparql-statistics-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-sparql-statistics-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'payload))
      (common-lisp:list
       (common-lisp:cons "payload"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-sparql-statistics-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-statistics-value-map common-lisp:nil
                       ((active :initarg :active :initform common-lisp:nil
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         struct-shape-delete-statistics-value-map-active :shape
                         "Boolean" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (statistics-id :initarg :statistics-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-delete-statistics-value-map-statistics-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-statistics-value-map
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-statistics-value-map
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-statistics-value-map
                    'make-delete-statistics-value-map))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-statistics-value-map))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-statistics-value-map))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'active))
      (common-lisp:list
       (common-lisp:cons "active"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'statistics-id))
      (common-lisp:list
       (common-lisp:cons "statisticsId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-statistics-value-map))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype edge-labels () '(trivial-types:proper-list string))
 (common-lisp:defun make-edge-labels
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype edge-properties () '(trivial-types:proper-list string))
 (common-lisp:defun make-edge-properties
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass edge-structure common-lisp:nil
                       ((count :initarg :count :initform common-lisp:nil :type
                         (common-lisp:or long common-lisp:null) :accessor
                         struct-shape-edge-structure-count :shape "Long"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (edge-properties :initarg :edge-properties :initform
                         common-lisp:nil :type
                         (common-lisp:or edge-properties common-lisp:null)
                         :accessor struct-shape-edge-structure-edge-properties
                         :shape "EdgeProperties" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-edge-structure
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'edge-structure
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'edge-structure 'make-edge-structure))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input edge-structure))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input edge-structure))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'count))
      (common-lisp:list
       (common-lisp:cons "count"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'edge-properties))
      (common-lisp:list
       (common-lisp:cons "edgeProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input edge-structure))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype edge-structures ()
   '(trivial-types:proper-list edge-structure))
 (common-lisp:defun make-edge-structures
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list edge-structure))
   aws-sdk/generator/shape::members))
(common-lisp:deftype encoding () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass execute-fast-reset-input common-lisp:nil
                       ((action :initarg :action :initform
                         (common-lisp:error ":action is required") :type
                         (common-lisp:or action common-lisp:null) :accessor
                         struct-shape-execute-fast-reset-input-action :shape
                         "Action" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (token :initarg :token :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-execute-fast-reset-input-token :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-execute-fast-reset-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'execute-fast-reset-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'execute-fast-reset-input 'make-execute-fast-reset-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          execute-fast-reset-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          execute-fast-reset-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action))
      (common-lisp:list
       (common-lisp:cons "action"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'token))
      (common-lisp:list
       (common-lisp:cons "token"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          execute-fast-reset-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass execute-fast-reset-output common-lisp:nil
                       ((payload :initarg :payload :initform common-lisp:nil
                         :type
                         (common-lisp:or fast-reset-token common-lisp:null)
                         :accessor
                         struct-shape-execute-fast-reset-output-payload :shape
                         "FastResetToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform
                         (common-lisp:error ":status is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-execute-fast-reset-output-status :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-execute-fast-reset-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'execute-fast-reset-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'execute-fast-reset-output
                    'make-execute-fast-reset-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          execute-fast-reset-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          execute-fast-reset-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'payload))
      (common-lisp:list
       (common-lisp:cons "payload"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          execute-fast-reset-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass execute-gremlin-explain-query-input common-lisp:nil
                       ((gremlin-query :initarg :gremlin-query :initform
                         (common-lisp:error ":gremlinquery is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-execute-gremlin-explain-query-input-gremlin-query
                         :shape "String" :location common-lisp:nil
                         :location-name "gremlin"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-execute-gremlin-explain-query-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'execute-gremlin-explain-query-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'execute-gremlin-explain-query-input
                    'make-execute-gremlin-explain-query-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          execute-gremlin-explain-query-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          execute-gremlin-explain-query-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gremlin-query))
      (common-lisp:list
       (common-lisp:cons "gremlinQuery"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          execute-gremlin-explain-query-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass execute-gremlin-explain-query-output common-lisp:nil
                       ((output :initarg :output :initform common-lisp:nil
                         :type (common-lisp:or report-as-text common-lisp:null)
                         :accessor
                         struct-shape-execute-gremlin-explain-query-output-output
                         :shape "ReportAsText" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-execute-gremlin-explain-query-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'execute-gremlin-explain-query-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'execute-gremlin-explain-query-output
                    'make-execute-gremlin-explain-query-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          execute-gremlin-explain-query-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          execute-gremlin-explain-query-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output))
      (common-lisp:list
       (common-lisp:cons "output"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          execute-gremlin-explain-query-output))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload-properties
                        (
                         (aws-sdk/generator/shape::input
                          execute-gremlin-explain-query-output))
   (common-lisp:declare (common-lisp:ignore aws-sdk/generator/shape::input))
   (common-lisp:list)))
(common-lisp:progn
 (common-lisp:defclass execute-gremlin-profile-query-input common-lisp:nil
                       ((chop :initarg :chop :initform common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-execute-gremlin-profile-query-input-chop
                         :shape "Integer" :location common-lisp:nil
                         :location-name "profile.chop")
                        (gremlin-query :initarg :gremlin-query :initform
                         (common-lisp:error ":gremlinquery is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-execute-gremlin-profile-query-input-gremlin-query
                         :shape "String" :location common-lisp:nil
                         :location-name "gremlin")
                        (index-ops :initarg :index-ops :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-execute-gremlin-profile-query-input-index-ops
                         :shape "Boolean" :location common-lisp:nil
                         :location-name "profile.indexOps")
                        (results :initarg :results :initform common-lisp:nil
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         struct-shape-execute-gremlin-profile-query-input-results
                         :shape "Boolean" :location common-lisp:nil
                         :location-name "profile.results")
                        (serializer :initarg :serializer :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-execute-gremlin-profile-query-input-serializer
                         :shape "String" :location common-lisp:nil
                         :location-name "profile.serializer"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-execute-gremlin-profile-query-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'execute-gremlin-profile-query-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'execute-gremlin-profile-query-input
                    'make-execute-gremlin-profile-query-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          execute-gremlin-profile-query-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          execute-gremlin-profile-query-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'chop))
      (common-lisp:list
       (common-lisp:cons "chop"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gremlin-query))
      (common-lisp:list
       (common-lisp:cons "gremlinQuery"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'index-ops))
      (common-lisp:list
       (common-lisp:cons "indexOps"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'results))
      (common-lisp:list
       (common-lisp:cons "results"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'serializer))
      (common-lisp:list
       (common-lisp:cons "serializer"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          execute-gremlin-profile-query-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass execute-gremlin-profile-query-output common-lisp:nil
                       ((output :initarg :output :initform common-lisp:nil
                         :type (common-lisp:or report-as-text common-lisp:null)
                         :accessor
                         struct-shape-execute-gremlin-profile-query-output-output
                         :shape "ReportAsText" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-execute-gremlin-profile-query-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'execute-gremlin-profile-query-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'execute-gremlin-profile-query-output
                    'make-execute-gremlin-profile-query-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          execute-gremlin-profile-query-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          execute-gremlin-profile-query-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output))
      (common-lisp:list
       (common-lisp:cons "output"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          execute-gremlin-profile-query-output))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload-properties
                        (
                         (aws-sdk/generator/shape::input
                          execute-gremlin-profile-query-output))
   (common-lisp:declare (common-lisp:ignore aws-sdk/generator/shape::input))
   (common-lisp:list)))
(common-lisp:progn
 (common-lisp:defclass execute-gremlin-query-input common-lisp:nil
                       ((gremlin-query :initarg :gremlin-query :initform
                         (common-lisp:error ":gremlinquery is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-execute-gremlin-query-input-gremlin-query
                         :shape "String" :location common-lisp:nil
                         :location-name "gremlin")
                        (serializer :initarg :serializer :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-execute-gremlin-query-input-serializer
                         :shape "String" :location "header" :location-name
                         "accept"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-execute-gremlin-query-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'execute-gremlin-query-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'execute-gremlin-query-input
                    'make-execute-gremlin-query-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          execute-gremlin-query-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'serializer))
      (common-lisp:cons "accept" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          execute-gremlin-query-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gremlin-query))
      (common-lisp:list
       (common-lisp:cons "gremlinQuery"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          execute-gremlin-query-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass execute-gremlin-query-output common-lisp:nil
                       ((request-id :initarg :request-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-execute-gremlin-query-output-request-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or gremlin-query-status-attributes
                                         common-lisp:null)
                         :accessor
                         struct-shape-execute-gremlin-query-output-status
                         :shape "GremlinQueryStatusAttributes" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-execute-gremlin-query-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'execute-gremlin-query-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'execute-gremlin-query-output
                    'make-execute-gremlin-query-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          execute-gremlin-query-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          execute-gremlin-query-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "requestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          execute-gremlin-query-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass execute-open-cypher-explain-query-input common-lisp:nil
                       ((explain-mode :initarg :explain-mode :initform
                         (common-lisp:error ":explainmode is required") :type
                         (common-lisp:or open-cypher-explain-mode
                                         common-lisp:null)
                         :accessor
                         struct-shape-execute-open-cypher-explain-query-input-explain-mode
                         :shape "OpenCypherExplainMode" :location
                         common-lisp:nil :location-name "explain")
                        (open-cypher-query :initarg :open-cypher-query
                         :initform
                         (common-lisp:error ":opencypherquery is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-execute-open-cypher-explain-query-input-open-cypher-query
                         :shape "String" :location common-lisp:nil
                         :location-name "query")
                        (parameters :initarg :parameters :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-execute-open-cypher-explain-query-input-parameters
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-execute-open-cypher-explain-query-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'execute-open-cypher-explain-query-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'execute-open-cypher-explain-query-input
                    'make-execute-open-cypher-explain-query-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          execute-open-cypher-explain-query-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          execute-open-cypher-explain-query-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'explain-mode))
      (common-lisp:list
       (common-lisp:cons "explainMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'open-cypher-query))
      (common-lisp:list
       (common-lisp:cons "openCypherQuery"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameters))
      (common-lisp:list
       (common-lisp:cons "parameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          execute-open-cypher-explain-query-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass execute-open-cypher-explain-query-output common-lisp:nil
                       ((results :initarg :results :initform
                         (common-lisp:error ":results is required") :type
                         (common-lisp:or blob common-lisp:null) :accessor
                         struct-shape-execute-open-cypher-explain-query-output-results
                         :shape "Blob" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-execute-open-cypher-explain-query-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'execute-open-cypher-explain-query-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'execute-open-cypher-explain-query-output
                    'make-execute-open-cypher-explain-query-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          execute-open-cypher-explain-query-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          execute-open-cypher-explain-query-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'results))
      (common-lisp:list
       (common-lisp:cons "results"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          execute-open-cypher-explain-query-output))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'results))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload-properties
                        (
                         (aws-sdk/generator/shape::input
                          execute-open-cypher-explain-query-output))
   (common-lisp:declare (common-lisp:ignore aws-sdk/generator/shape::input))
   (common-lisp:list)))
(common-lisp:progn
 (common-lisp:defclass execute-open-cypher-query-input common-lisp:nil
                       ((open-cypher-query :initarg :open-cypher-query
                         :initform
                         (common-lisp:error ":opencypherquery is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-execute-open-cypher-query-input-open-cypher-query
                         :shape "String" :location common-lisp:nil
                         :location-name "query")
                        (parameters :initarg :parameters :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-execute-open-cypher-query-input-parameters
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-execute-open-cypher-query-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'execute-open-cypher-query-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'execute-open-cypher-query-input
                    'make-execute-open-cypher-query-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          execute-open-cypher-query-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          execute-open-cypher-query-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'open-cypher-query))
      (common-lisp:list
       (common-lisp:cons "openCypherQuery"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameters))
      (common-lisp:list
       (common-lisp:cons "parameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          execute-open-cypher-query-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition expired-stream-exception
     (neptunedata-error)
     ((code :initarg :code :initform common-lisp:nil :reader
       expired-stream-exception-code)
      (detailed-message :initarg :detailed-message :initform common-lisp:nil
       :reader expired-stream-exception-detailed-message)
      (request-id :initarg :request-id :initform common-lisp:nil :reader
       expired-stream-exception-request-id)))
 (common-lisp:export
  (common-lisp:list 'expired-stream-exception 'expired-stream-exception-code
                    'expired-stream-exception-detailed-message
                    'expired-stream-exception-request-id)))
(common-lisp:progn
 (common-lisp:define-condition failure-by-query-exception
     (neptunedata-error)
     ((code :initarg :code :initform common-lisp:nil :reader
       failure-by-query-exception-code)
      (detailed-message :initarg :detailed-message :initform common-lisp:nil
       :reader failure-by-query-exception-detailed-message)
      (request-id :initarg :request-id :initform common-lisp:nil :reader
       failure-by-query-exception-request-id)))
 (common-lisp:export
  (common-lisp:list 'failure-by-query-exception
                    'failure-by-query-exception-code
                    'failure-by-query-exception-detailed-message
                    'failure-by-query-exception-request-id)))
(common-lisp:progn
 (common-lisp:defclass fast-reset-token common-lisp:nil
                       ((token :initarg :token :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-fast-reset-token-token :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-fast-reset-token
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'fast-reset-token
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'fast-reset-token 'make-fast-reset-token))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input fast-reset-token))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input fast-reset-token))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'token))
      (common-lisp:list
       (common-lisp:cons "token"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input fast-reset-token))
   common-lisp:nil))
(common-lisp:deftype format () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass get-engine-status-output common-lisp:nil
                       ((db-engine-version :initarg :db-engine-version
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-get-engine-status-output-db-engine-version
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dfe-query-engine :initarg :dfe-query-engine :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-get-engine-status-output-dfe-query-engine
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (gremlin :initarg :gremlin :initform common-lisp:nil
                         :type
                         (common-lisp:or query-language-version
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-engine-status-output-gremlin :shape
                         "QueryLanguageVersion" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (lab-mode :initarg :lab-mode :initform common-lisp:nil
                         :type
                         (common-lisp:or string-valued-map common-lisp:null)
                         :accessor
                         struct-shape-get-engine-status-output-lab-mode :shape
                         "StringValuedMap" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (opencypher :initarg :opencypher :initform
                         common-lisp:nil :type
                         (common-lisp:or query-language-version
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-engine-status-output-opencypher
                         :shape "QueryLanguageVersion" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (role :initarg :role :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-get-engine-status-output-role :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (rolling-back-trx-count :initarg
                         :rolling-back-trx-count :initform common-lisp:nil
                         :type (common-lisp:or integer common-lisp:null)
                         :accessor
                         struct-shape-get-engine-status-output-rolling-back-trx-count
                         :shape "Integer" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (rolling-back-trx-earliest-start-time :initarg
                         :rolling-back-trx-earliest-start-time :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-get-engine-status-output-rolling-back-trx-earliest-start-time
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (settings :initarg :settings :initform common-lisp:nil
                         :type
                         (common-lisp:or string-valued-map common-lisp:null)
                         :accessor
                         struct-shape-get-engine-status-output-settings :shape
                         "StringValuedMap" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (sparql :initarg :sparql :initform common-lisp:nil
                         :type
                         (common-lisp:or query-language-version
                                         common-lisp:null)
                         :accessor struct-shape-get-engine-status-output-sparql
                         :shape "QueryLanguageVersion" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (start-time :initarg :start-time :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-get-engine-status-output-start-time
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-get-engine-status-output-status
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-engine-status-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-engine-status-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-engine-status-output 'make-get-engine-status-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-engine-status-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-engine-status-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'db-engine-version))
      (common-lisp:list
       (common-lisp:cons "dbEngineVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dfe-query-engine))
      (common-lisp:list
       (common-lisp:cons "dfeQueryEngine"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gremlin))
      (common-lisp:list
       (common-lisp:cons "gremlin"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lab-mode))
      (common-lisp:list
       (common-lisp:cons "labMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'opencypher))
      (common-lisp:list
       (common-lisp:cons "opencypher"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role))
      (common-lisp:list
       (common-lisp:cons "role"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'rolling-back-trx-count))
      (common-lisp:list
       (common-lisp:cons "rollingBackTrxCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'rolling-back-trx-earliest-start-time))
      (common-lisp:list
       (common-lisp:cons "rollingBackTrxEarliestStartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'settings))
      (common-lisp:list
       (common-lisp:cons "settings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sparql))
      (common-lisp:list
       (common-lisp:cons "sparql"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "startTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-engine-status-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-gremlin-query-status-input common-lisp:nil
                       ((query-id :initarg :query-id :initform
                         (common-lisp:error ":queryid is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-get-gremlin-query-status-input-query-id
                         :shape "String" :location "uri" :location-name
                         "queryId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-gremlin-query-status-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-gremlin-query-status-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-gremlin-query-status-input
                    'make-get-gremlin-query-status-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-gremlin-query-status-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-gremlin-query-status-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-gremlin-query-status-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-gremlin-query-status-output common-lisp:nil
                       ((query-eval-stats :initarg :query-eval-stats :initform
                         common-lisp:nil :type
                         (common-lisp:or query-eval-stats common-lisp:null)
                         :accessor
                         struct-shape-get-gremlin-query-status-output-query-eval-stats
                         :shape "QueryEvalStats" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (query-id :initarg :query-id :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-get-gremlin-query-status-output-query-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (query-string :initarg :query-string :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-get-gremlin-query-status-output-query-string
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-gremlin-query-status-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-gremlin-query-status-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-gremlin-query-status-output
                    'make-get-gremlin-query-status-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-gremlin-query-status-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-gremlin-query-status-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-eval-stats))
      (common-lisp:list
       (common-lisp:cons "queryEvalStats"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-id))
      (common-lisp:list
       (common-lisp:cons "queryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-string))
      (common-lisp:list
       (common-lisp:cons "queryString"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-gremlin-query-status-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-loader-job-status-input common-lisp:nil
                       ((details :initarg :details :initform common-lisp:nil
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         struct-shape-get-loader-job-status-input-details
                         :shape "Boolean" :location "querystring"
                         :location-name "details")
                        (errors :initarg :errors :initform common-lisp:nil
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         struct-shape-get-loader-job-status-input-errors :shape
                         "Boolean" :location "querystring" :location-name
                         "errors")
                        (errors-per-page :initarg :errors-per-page :initform
                         common-lisp:nil :type
                         (common-lisp:or positive-integer common-lisp:null)
                         :accessor
                         struct-shape-get-loader-job-status-input-errors-per-page
                         :shape "PositiveInteger" :location "querystring"
                         :location-name "errorsPerPage")
                        (load-id :initarg :load-id :initform
                         (common-lisp:error ":loadid is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-get-loader-job-status-input-load-id
                         :shape "String" :location "uri" :location-name
                         "loadId")
                        (page :initarg :page :initform common-lisp:nil :type
                         (common-lisp:or positive-integer common-lisp:null)
                         :accessor
                         struct-shape-get-loader-job-status-input-page :shape
                         "PositiveInteger" :location "querystring"
                         :location-name "page"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-loader-job-status-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-loader-job-status-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-loader-job-status-input
                    'make-get-loader-job-status-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-loader-job-status-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-loader-job-status-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-loader-job-status-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-mldata-processing-job-input common-lisp:nil
                       ((id :initarg :id :initform
                         (common-lisp:error ":id is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-get-mldata-processing-job-input-id :shape
                         "String" :location "uri" :location-name "id")
                        (neptune-iam-role-arn :initarg :neptune-iam-role-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-get-mldata-processing-job-input-neptune-iam-role-arn
                         :shape "String" :location "querystring" :location-name
                         "neptuneIamRoleArn"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-mldata-processing-job-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-mldata-processing-job-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-mldata-processing-job-input
                    'make-get-mldata-processing-job-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-mldata-processing-job-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-mldata-processing-job-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-mldata-processing-job-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-mldata-processing-job-output common-lisp:nil
                       ((id :initarg :id :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-get-mldata-processing-job-output-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (processing-job :initarg :processing-job :initform
                         common-lisp:nil :type
                         (common-lisp:or ml-resource-definition
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-mldata-processing-job-output-processing-job
                         :shape "MlResourceDefinition" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-get-mldata-processing-job-output-status
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-mldata-processing-job-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-mldata-processing-job-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-mldata-processing-job-output
                    'make-get-mldata-processing-job-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-mldata-processing-job-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-mldata-processing-job-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'processing-job))
      (common-lisp:list
       (common-lisp:cons "processingJob"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-mldata-processing-job-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-mlendpoint-input common-lisp:nil
                       ((id :initarg :id :initform
                         (common-lisp:error ":id is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-get-mlendpoint-input-id :shape "String"
                         :location "uri" :location-name "id")
                        (neptune-iam-role-arn :initarg :neptune-iam-role-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-get-mlendpoint-input-neptune-iam-role-arn
                         :shape "String" :location "querystring" :location-name
                         "neptuneIamRoleArn"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-mlendpoint-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-mlendpoint-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-mlendpoint-input 'make-get-mlendpoint-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-mlendpoint-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-mlendpoint-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-mlendpoint-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-mlendpoint-output common-lisp:nil
                       ((endpoint :initarg :endpoint :initform common-lisp:nil
                         :type
                         (common-lisp:or ml-resource-definition
                                         common-lisp:null)
                         :accessor struct-shape-get-mlendpoint-output-endpoint
                         :shape "MlResourceDefinition" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (endpoint-config :initarg :endpoint-config :initform
                         common-lisp:nil :type
                         (common-lisp:or ml-config-definition common-lisp:null)
                         :accessor
                         struct-shape-get-mlendpoint-output-endpoint-config
                         :shape "MlConfigDefinition" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (id :initarg :id :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-get-mlendpoint-output-id :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-get-mlendpoint-output-status
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-mlendpoint-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-mlendpoint-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-mlendpoint-output 'make-get-mlendpoint-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-mlendpoint-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-mlendpoint-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint))
      (common-lisp:list
       (common-lisp:cons "endpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-config))
      (common-lisp:list
       (common-lisp:cons "endpointConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-mlendpoint-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-mlmodel-training-job-input common-lisp:nil
                       ((id :initarg :id :initform
                         (common-lisp:error ":id is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-get-mlmodel-training-job-input-id :shape
                         "String" :location "uri" :location-name "id")
                        (neptune-iam-role-arn :initarg :neptune-iam-role-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-get-mlmodel-training-job-input-neptune-iam-role-arn
                         :shape "String" :location "querystring" :location-name
                         "neptuneIamRoleArn"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-mlmodel-training-job-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-mlmodel-training-job-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-mlmodel-training-job-input
                    'make-get-mlmodel-training-job-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-mlmodel-training-job-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-mlmodel-training-job-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-mlmodel-training-job-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-mlmodel-training-job-output common-lisp:nil
                       ((hpo-job :initarg :hpo-job :initform common-lisp:nil
                         :type
                         (common-lisp:or ml-resource-definition
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-mlmodel-training-job-output-hpo-job
                         :shape "MlResourceDefinition" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (id :initarg :id :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-get-mlmodel-training-job-output-id :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (ml-models :initarg :ml-models :initform
                         common-lisp:nil :type
                         (common-lisp:or ml-models common-lisp:null) :accessor
                         struct-shape-get-mlmodel-training-job-output-ml-models
                         :shape "MlModels" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (model-transform-job :initarg :model-transform-job
                         :initform common-lisp:nil :type
                         (common-lisp:or ml-resource-definition
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-mlmodel-training-job-output-model-transform-job
                         :shape "MlResourceDefinition" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (processing-job :initarg :processing-job :initform
                         common-lisp:nil :type
                         (common-lisp:or ml-resource-definition
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-mlmodel-training-job-output-processing-job
                         :shape "MlResourceDefinition" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-get-mlmodel-training-job-output-status
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-mlmodel-training-job-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-mlmodel-training-job-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-mlmodel-training-job-output
                    'make-get-mlmodel-training-job-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-mlmodel-training-job-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-mlmodel-training-job-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hpo-job))
      (common-lisp:list
       (common-lisp:cons "hpoJob"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ml-models))
      (common-lisp:list
       (common-lisp:cons "mlModels"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-transform-job))
      (common-lisp:list
       (common-lisp:cons "modelTransformJob"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'processing-job))
      (common-lisp:list
       (common-lisp:cons "processingJob"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-mlmodel-training-job-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-mlmodel-transform-job-input common-lisp:nil
                       ((id :initarg :id :initform
                         (common-lisp:error ":id is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-get-mlmodel-transform-job-input-id :shape
                         "String" :location "uri" :location-name "id")
                        (neptune-iam-role-arn :initarg :neptune-iam-role-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-get-mlmodel-transform-job-input-neptune-iam-role-arn
                         :shape "String" :location "querystring" :location-name
                         "neptuneIamRoleArn"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-mlmodel-transform-job-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-mlmodel-transform-job-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-mlmodel-transform-job-input
                    'make-get-mlmodel-transform-job-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-mlmodel-transform-job-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-mlmodel-transform-job-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-mlmodel-transform-job-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-mlmodel-transform-job-output common-lisp:nil
                       ((base-processing-job :initarg :base-processing-job
                         :initform common-lisp:nil :type
                         (common-lisp:or ml-resource-definition
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-mlmodel-transform-job-output-base-processing-job
                         :shape "MlResourceDefinition" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (id :initarg :id :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-get-mlmodel-transform-job-output-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (models :initarg :models :initform common-lisp:nil
                         :type (common-lisp:or models common-lisp:null)
                         :accessor
                         struct-shape-get-mlmodel-transform-job-output-models
                         :shape "Models" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (remote-model-transform-job :initarg
                         :remote-model-transform-job :initform common-lisp:nil
                         :type
                         (common-lisp:or ml-resource-definition
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-mlmodel-transform-job-output-remote-model-transform-job
                         :shape "MlResourceDefinition" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-get-mlmodel-transform-job-output-status
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-mlmodel-transform-job-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-mlmodel-transform-job-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-mlmodel-transform-job-output
                    'make-get-mlmodel-transform-job-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-mlmodel-transform-job-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-mlmodel-transform-job-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'base-processing-job))
      (common-lisp:list
       (common-lisp:cons "baseProcessingJob"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'models))
      (common-lisp:list
       (common-lisp:cons "models"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'remote-model-transform-job))
      (common-lisp:list
       (common-lisp:cons "remoteModelTransformJob"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-mlmodel-transform-job-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-open-cypher-query-status-input common-lisp:nil
                       ((query-id :initarg :query-id :initform
                         (common-lisp:error ":queryid is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-get-open-cypher-query-status-input-query-id
                         :shape "String" :location "uri" :location-name
                         "queryId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-open-cypher-query-status-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-open-cypher-query-status-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-open-cypher-query-status-input
                    'make-get-open-cypher-query-status-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-open-cypher-query-status-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-open-cypher-query-status-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-open-cypher-query-status-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-open-cypher-query-status-output common-lisp:nil
                       ((query-eval-stats :initarg :query-eval-stats :initform
                         common-lisp:nil :type
                         (common-lisp:or query-eval-stats common-lisp:null)
                         :accessor
                         struct-shape-get-open-cypher-query-status-output-query-eval-stats
                         :shape "QueryEvalStats" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (query-id :initarg :query-id :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-get-open-cypher-query-status-output-query-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (query-string :initarg :query-string :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-get-open-cypher-query-status-output-query-string
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-open-cypher-query-status-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-open-cypher-query-status-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-open-cypher-query-status-output
                    'make-get-open-cypher-query-status-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-open-cypher-query-status-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-open-cypher-query-status-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-eval-stats))
      (common-lisp:list
       (common-lisp:cons "queryEvalStats"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-id))
      (common-lisp:list
       (common-lisp:cons "queryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-string))
      (common-lisp:list
       (common-lisp:cons "queryString"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-open-cypher-query-status-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-propertygraph-statistics-output common-lisp:nil
                       ((payload :initarg :payload :initform
                         (common-lisp:error ":payload is required") :type
                         (common-lisp:or statistics common-lisp:null) :accessor
                         struct-shape-get-propertygraph-statistics-output-payload
                         :shape "Statistics" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform
                         (common-lisp:error ":status is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-get-propertygraph-statistics-output-status
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-propertygraph-statistics-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-propertygraph-statistics-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-propertygraph-statistics-output
                    'make-get-propertygraph-statistics-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-propertygraph-statistics-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-propertygraph-statistics-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'payload))
      (common-lisp:list
       (common-lisp:cons "payload"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-propertygraph-statistics-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-propertygraph-stream-input common-lisp:nil
                       ((commit-num :initarg :commit-num :initform
                         common-lisp:nil :type
                         (common-lisp:or long common-lisp:null) :accessor
                         struct-shape-get-propertygraph-stream-input-commit-num
                         :shape "Long" :location "querystring" :location-name
                         "commitNum")
                        (encoding :initarg :encoding :initform common-lisp:nil
                         :type (common-lisp:or encoding common-lisp:null)
                         :accessor
                         struct-shape-get-propertygraph-stream-input-encoding
                         :shape "Encoding" :location "header" :location-name
                         "Accept-Encoding")
                        (iterator-type :initarg :iterator-type :initform
                         common-lisp:nil :type
                         (common-lisp:or iterator-type common-lisp:null)
                         :accessor
                         struct-shape-get-propertygraph-stream-input-iterator-type
                         :shape "IteratorType" :location "querystring"
                         :location-name "iteratorType")
                        (limit :initarg :limit :initform common-lisp:nil :type
                         (common-lisp:or
                          get-propertygraph-stream-input-limit-long
                          common-lisp:null)
                         :accessor
                         struct-shape-get-propertygraph-stream-input-limit
                         :shape "GetPropertygraphStreamInputLimitLong"
                         :location "querystring" :location-name "limit")
                        (op-num :initarg :op-num :initform common-lisp:nil
                         :type (common-lisp:or long common-lisp:null) :accessor
                         struct-shape-get-propertygraph-stream-input-op-num
                         :shape "Long" :location "querystring" :location-name
                         "opNum"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-propertygraph-stream-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-propertygraph-stream-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-propertygraph-stream-input
                    'make-get-propertygraph-stream-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-propertygraph-stream-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encoding))
      (common-lisp:cons "Accept-Encoding" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-propertygraph-stream-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-propertygraph-stream-input))
   common-lisp:nil))
(common-lisp:deftype get-propertygraph-stream-input-limit-long ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass get-propertygraph-summary-input common-lisp:nil
                       ((mode :initarg :mode :initform common-lisp:nil :type
                         (common-lisp:or graph-summary-type common-lisp:null)
                         :accessor
                         struct-shape-get-propertygraph-summary-input-mode
                         :shape "GraphSummaryType" :location "querystring"
                         :location-name "mode"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-propertygraph-summary-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-propertygraph-summary-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-propertygraph-summary-input
                    'make-get-propertygraph-summary-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-propertygraph-summary-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-propertygraph-summary-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-propertygraph-summary-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-propertygraph-summary-output common-lisp:nil
                       ((payload :initarg :payload :initform common-lisp:nil
                         :type
                         (common-lisp:or propertygraph-summary-value-map
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-propertygraph-summary-output-payload
                         :shape "PropertygraphSummaryValueMap" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (status-code :initarg :status-code :initform
                         common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-get-propertygraph-summary-output-status-code
                         :shape "Integer" :location "statusCode" :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-propertygraph-summary-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-propertygraph-summary-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-propertygraph-summary-output
                    'make-get-propertygraph-summary-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-propertygraph-summary-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-propertygraph-summary-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'payload))
      (common-lisp:list
       (common-lisp:cons "payload"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-propertygraph-summary-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-rdfgraph-summary-input common-lisp:nil
                       ((mode :initarg :mode :initform common-lisp:nil :type
                         (common-lisp:or graph-summary-type common-lisp:null)
                         :accessor struct-shape-get-rdfgraph-summary-input-mode
                         :shape "GraphSummaryType" :location "querystring"
                         :location-name "mode"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-rdfgraph-summary-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-rdfgraph-summary-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-rdfgraph-summary-input
                    'make-get-rdfgraph-summary-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-rdfgraph-summary-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-rdfgraph-summary-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-rdfgraph-summary-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-rdfgraph-summary-output common-lisp:nil
                       ((payload :initarg :payload :initform common-lisp:nil
                         :type
                         (common-lisp:or rdfgraph-summary-value-map
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-rdfgraph-summary-output-payload
                         :shape "RDFGraphSummaryValueMap" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (status-code :initarg :status-code :initform
                         common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-get-rdfgraph-summary-output-status-code
                         :shape "Integer" :location "statusCode" :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-rdfgraph-summary-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-rdfgraph-summary-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-rdfgraph-summary-output
                    'make-get-rdfgraph-summary-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-rdfgraph-summary-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-rdfgraph-summary-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'payload))
      (common-lisp:list
       (common-lisp:cons "payload"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-rdfgraph-summary-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-sparql-statistics-output common-lisp:nil
                       ((payload :initarg :payload :initform
                         (common-lisp:error ":payload is required") :type
                         (common-lisp:or statistics common-lisp:null) :accessor
                         struct-shape-get-sparql-statistics-output-payload
                         :shape "Statistics" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform
                         (common-lisp:error ":status is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-get-sparql-statistics-output-status
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-sparql-statistics-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-sparql-statistics-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-sparql-statistics-output
                    'make-get-sparql-statistics-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-sparql-statistics-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-sparql-statistics-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'payload))
      (common-lisp:list
       (common-lisp:cons "payload"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-sparql-statistics-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-sparql-stream-input common-lisp:nil
                       ((commit-num :initarg :commit-num :initform
                         common-lisp:nil :type
                         (common-lisp:or long common-lisp:null) :accessor
                         struct-shape-get-sparql-stream-input-commit-num :shape
                         "Long" :location "querystring" :location-name
                         "commitNum")
                        (encoding :initarg :encoding :initform common-lisp:nil
                         :type (common-lisp:or encoding common-lisp:null)
                         :accessor
                         struct-shape-get-sparql-stream-input-encoding :shape
                         "Encoding" :location "header" :location-name
                         "Accept-Encoding")
                        (iterator-type :initarg :iterator-type :initform
                         common-lisp:nil :type
                         (common-lisp:or iterator-type common-lisp:null)
                         :accessor
                         struct-shape-get-sparql-stream-input-iterator-type
                         :shape "IteratorType" :location "querystring"
                         :location-name "iteratorType")
                        (limit :initarg :limit :initform common-lisp:nil :type
                         (common-lisp:or get-sparql-stream-input-limit-long
                                         common-lisp:null)
                         :accessor struct-shape-get-sparql-stream-input-limit
                         :shape "GetSparqlStreamInputLimitLong" :location
                         "querystring" :location-name "limit")
                        (op-num :initarg :op-num :initform common-lisp:nil
                         :type (common-lisp:or long common-lisp:null) :accessor
                         struct-shape-get-sparql-stream-input-op-num :shape
                         "Long" :location "querystring" :location-name
                         "opNum"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-sparql-stream-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-sparql-stream-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-sparql-stream-input 'make-get-sparql-stream-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-sparql-stream-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encoding))
      (common-lisp:cons "Accept-Encoding" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-sparql-stream-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-sparql-stream-input))
   common-lisp:nil))
(common-lisp:deftype get-sparql-stream-input-limit-long () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass get-sparql-stream-output common-lisp:nil
                       ((format :initarg :format :initform
                         (common-lisp:error ":format is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-get-sparql-stream-output-format :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (last-event-id :initarg :last-event-id :initform
                         (common-lisp:error ":lasteventid is required") :type
                         (common-lisp:or string-valued-map common-lisp:null)
                         :accessor
                         struct-shape-get-sparql-stream-output-last-event-id
                         :shape "StringValuedMap" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-trx-timestamp-in-millis :initarg
                         :last-trx-timestamp-in-millis :initform
                         (common-lisp:error
                          ":lasttrxtimestampinmillis is required")
                         :type (common-lisp:or long common-lisp:null) :accessor
                         struct-shape-get-sparql-stream-output-last-trx-timestamp-in-millis
                         :shape "Long" :location common-lisp:nil :location-name
                         "lastTrxTimestamp")
                        (records :initarg :records :initform
                         (common-lisp:error ":records is required") :type
                         (common-lisp:or sparql-records-list common-lisp:null)
                         :accessor
                         struct-shape-get-sparql-stream-output-records :shape
                         "SparqlRecordsList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (total-records :initarg :total-records :initform
                         (common-lisp:error ":totalrecords is required") :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-get-sparql-stream-output-total-records
                         :shape "Integer" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-sparql-stream-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-sparql-stream-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-sparql-stream-output 'make-get-sparql-stream-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-sparql-stream-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-sparql-stream-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'format))
      (common-lisp:list
       (common-lisp:cons "format"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-event-id))
      (common-lisp:list
       (common-lisp:cons "lastEventId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-trx-timestamp-in-millis))
      (common-lisp:list
       (common-lisp:cons "lastTrxTimestampInMillis"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'records))
      (common-lisp:list
       (common-lisp:cons "records"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total-records))
      (common-lisp:list
       (common-lisp:cons "totalRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-sparql-stream-output))
   common-lisp:nil))
(common-lisp:deftype graph-summary-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype gremlin-queries ()
   '(trivial-types:proper-list gremlin-query-status))
 (common-lisp:defun make-gremlin-queries
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list gremlin-query-status))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass gremlin-query-status common-lisp:nil
                       ((query-eval-stats :initarg :query-eval-stats :initform
                         common-lisp:nil :type
                         (common-lisp:or query-eval-stats common-lisp:null)
                         :accessor
                         struct-shape-gremlin-query-status-query-eval-stats
                         :shape "QueryEvalStats" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (query-id :initarg :query-id :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-gremlin-query-status-query-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (query-string :initarg :query-string :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-gremlin-query-status-query-string :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-gremlin-query-status
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'gremlin-query-status
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'gremlin-query-status 'make-gremlin-query-status))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input gremlin-query-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input gremlin-query-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-eval-stats))
      (common-lisp:list
       (common-lisp:cons "queryEvalStats"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-id))
      (common-lisp:list
       (common-lisp:cons "queryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-string))
      (common-lisp:list
       (common-lisp:cons "queryString"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input gremlin-query-status))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass gremlin-query-status-attributes common-lisp:nil
                       ((code :initarg :code :initform common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-gremlin-query-status-attributes-code
                         :shape "Integer" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (message :initarg :message :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-gremlin-query-status-attributes-message
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-gremlin-query-status-attributes
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'gremlin-query-status-attributes
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'gremlin-query-status-attributes
                    'make-gremlin-query-status-attributes))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          gremlin-query-status-attributes))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          gremlin-query-status-attributes))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code))
      (common-lisp:list
       (common-lisp:cons "code"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          gremlin-query-status-attributes))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition illegal-argument-exception
     (neptunedata-error)
     ((code :initarg :code :initform common-lisp:nil :reader
       illegal-argument-exception-code)
      (detailed-message :initarg :detailed-message :initform common-lisp:nil
       :reader illegal-argument-exception-detailed-message)
      (request-id :initarg :request-id :initform common-lisp:nil :reader
       illegal-argument-exception-request-id)))
 (common-lisp:export
  (common-lisp:list 'illegal-argument-exception
                    'illegal-argument-exception-code
                    'illegal-argument-exception-detailed-message
                    'illegal-argument-exception-request-id)))
(common-lisp:deftype integer () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition internal-failure-exception
     (neptunedata-error)
     ((code :initarg :code :initform common-lisp:nil :reader
       internal-failure-exception-code)
      (detailed-message :initarg :detailed-message :initform common-lisp:nil
       :reader internal-failure-exception-detailed-message)
      (request-id :initarg :request-id :initform common-lisp:nil :reader
       internal-failure-exception-request-id)))
 (common-lisp:export
  (common-lisp:list 'internal-failure-exception
                    'internal-failure-exception-code
                    'internal-failure-exception-detailed-message
                    'internal-failure-exception-request-id)))
(common-lisp:progn
 (common-lisp:define-condition invalid-argument-exception
     (neptunedata-error)
     ((code :initarg :code :initform common-lisp:nil :reader
       invalid-argument-exception-code)
      (detailed-message :initarg :detailed-message :initform common-lisp:nil
       :reader invalid-argument-exception-detailed-message)
      (request-id :initarg :request-id :initform common-lisp:nil :reader
       invalid-argument-exception-request-id)))
 (common-lisp:export
  (common-lisp:list 'invalid-argument-exception
                    'invalid-argument-exception-code
                    'invalid-argument-exception-detailed-message
                    'invalid-argument-exception-request-id)))
(common-lisp:progn
 (common-lisp:define-condition invalid-numeric-data-exception
     (neptunedata-error)
     ((code :initarg :code :initform common-lisp:nil :reader
       invalid-numeric-data-exception-code)
      (detailed-message :initarg :detailed-message :initform common-lisp:nil
       :reader invalid-numeric-data-exception-detailed-message)
      (request-id :initarg :request-id :initform common-lisp:nil :reader
       invalid-numeric-data-exception-request-id)))
 (common-lisp:export
  (common-lisp:list 'invalid-numeric-data-exception
                    'invalid-numeric-data-exception-code
                    'invalid-numeric-data-exception-detailed-message
                    'invalid-numeric-data-exception-request-id)))
(common-lisp:progn
 (common-lisp:define-condition invalid-parameter-exception
     (neptunedata-error)
     ((code :initarg :code :initform common-lisp:nil :reader
       invalid-parameter-exception-code)
      (detailed-message :initarg :detailed-message :initform common-lisp:nil
       :reader invalid-parameter-exception-detailed-message)
      (request-id :initarg :request-id :initform common-lisp:nil :reader
       invalid-parameter-exception-request-id)))
 (common-lisp:export
  (common-lisp:list 'invalid-parameter-exception
                    'invalid-parameter-exception-code
                    'invalid-parameter-exception-detailed-message
                    'invalid-parameter-exception-request-id)))
(common-lisp:deftype iterator-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass list-gremlin-queries-input common-lisp:nil
                       ((include-waiting :initarg :include-waiting :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-list-gremlin-queries-input-include-waiting
                         :shape "Boolean" :location "querystring"
                         :location-name "includeWaiting"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-gremlin-queries-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-gremlin-queries-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-gremlin-queries-input
                    'make-list-gremlin-queries-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-gremlin-queries-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-gremlin-queries-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-gremlin-queries-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-gremlin-queries-output common-lisp:nil
                       ((accepted-query-count :initarg :accepted-query-count
                         :initform common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-list-gremlin-queries-output-accepted-query-count
                         :shape "Integer" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (queries :initarg :queries :initform common-lisp:nil
                         :type
                         (common-lisp:or gremlin-queries common-lisp:null)
                         :accessor
                         struct-shape-list-gremlin-queries-output-queries
                         :shape "GremlinQueries" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (running-query-count :initarg :running-query-count
                         :initform common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-list-gremlin-queries-output-running-query-count
                         :shape "Integer" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-gremlin-queries-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-gremlin-queries-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-gremlin-queries-output
                    'make-list-gremlin-queries-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-gremlin-queries-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-gremlin-queries-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'accepted-query-count))
      (common-lisp:list
       (common-lisp:cons "acceptedQueryCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'queries))
      (common-lisp:list
       (common-lisp:cons "queries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'running-query-count))
      (common-lisp:list
       (common-lisp:cons "runningQueryCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-gremlin-queries-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-loader-jobs-input common-lisp:nil
                       ((include-queued-loads :initarg :include-queued-loads
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-list-loader-jobs-input-include-queued-loads
                         :shape "Boolean" :location "querystring"
                         :location-name "includeQueuedLoads")
                        (limit :initarg :limit :initform common-lisp:nil :type
                         (common-lisp:or list-loader-jobs-input-limit-integer
                                         common-lisp:null)
                         :accessor struct-shape-list-loader-jobs-input-limit
                         :shape "ListLoaderJobsInputLimitInteger" :location
                         "querystring" :location-name "limit"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-loader-jobs-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-loader-jobs-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-loader-jobs-input 'make-list-loader-jobs-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-loader-jobs-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-loader-jobs-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-loader-jobs-input))
   common-lisp:nil))
(common-lisp:deftype list-loader-jobs-input-limit-integer ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass list-loader-jobs-output common-lisp:nil
                       ((payload :initarg :payload :initform
                         (common-lisp:error ":payload is required") :type
                         (common-lisp:or loader-id-result common-lisp:null)
                         :accessor struct-shape-list-loader-jobs-output-payload
                         :shape "LoaderIdResult" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform
                         (common-lisp:error ":status is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-loader-jobs-output-status :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-loader-jobs-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-loader-jobs-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-loader-jobs-output 'make-list-loader-jobs-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-loader-jobs-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-loader-jobs-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'payload))
      (common-lisp:list
       (common-lisp:cons "payload"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-loader-jobs-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-mldata-processing-jobs-input common-lisp:nil
                       ((max-items :initarg :max-items :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          list-mldata-processing-jobs-input-max-items-integer
                          common-lisp:null)
                         :accessor
                         struct-shape-list-mldata-processing-jobs-input-max-items
                         :shape "ListMLDataProcessingJobsInputMaxItemsInteger"
                         :location "querystring" :location-name "maxItems")
                        (neptune-iam-role-arn :initarg :neptune-iam-role-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-mldata-processing-jobs-input-neptune-iam-role-arn
                         :shape "String" :location "querystring" :location-name
                         "neptuneIamRoleArn"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-mldata-processing-jobs-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-mldata-processing-jobs-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-mldata-processing-jobs-input
                    'make-list-mldata-processing-jobs-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-mldata-processing-jobs-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-mldata-processing-jobs-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-mldata-processing-jobs-input))
   common-lisp:nil))
(common-lisp:deftype list-mldata-processing-jobs-input-max-items-integer ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass list-mldata-processing-jobs-output common-lisp:nil
                       ((ids :initarg :ids :initform common-lisp:nil :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor
                         struct-shape-list-mldata-processing-jobs-output-ids
                         :shape "StringList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-mldata-processing-jobs-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-mldata-processing-jobs-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-mldata-processing-jobs-output
                    'make-list-mldata-processing-jobs-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-mldata-processing-jobs-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-mldata-processing-jobs-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ids))
      (common-lisp:list
       (common-lisp:cons "ids"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-mldata-processing-jobs-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-mlendpoints-input common-lisp:nil
                       ((max-items :initarg :max-items :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          list-mlendpoints-input-max-items-integer
                          common-lisp:null)
                         :accessor
                         struct-shape-list-mlendpoints-input-max-items :shape
                         "ListMLEndpointsInputMaxItemsInteger" :location
                         "querystring" :location-name "maxItems")
                        (neptune-iam-role-arn :initarg :neptune-iam-role-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-mlendpoints-input-neptune-iam-role-arn
                         :shape "String" :location "querystring" :location-name
                         "neptuneIamRoleArn"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-mlendpoints-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-mlendpoints-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-mlendpoints-input 'make-list-mlendpoints-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-mlendpoints-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-mlendpoints-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-mlendpoints-input))
   common-lisp:nil))
(common-lisp:deftype list-mlendpoints-input-max-items-integer ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass list-mlendpoints-output common-lisp:nil
                       ((ids :initarg :ids :initform common-lisp:nil :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor struct-shape-list-mlendpoints-output-ids
                         :shape "StringList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-mlendpoints-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-mlendpoints-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-mlendpoints-output 'make-list-mlendpoints-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-mlendpoints-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-mlendpoints-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ids))
      (common-lisp:list
       (common-lisp:cons "ids"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-mlendpoints-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-mlmodel-training-jobs-input common-lisp:nil
                       ((max-items :initarg :max-items :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          list-mlmodel-training-jobs-input-max-items-integer
                          common-lisp:null)
                         :accessor
                         struct-shape-list-mlmodel-training-jobs-input-max-items
                         :shape "ListMLModelTrainingJobsInputMaxItemsInteger"
                         :location "querystring" :location-name "maxItems")
                        (neptune-iam-role-arn :initarg :neptune-iam-role-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-mlmodel-training-jobs-input-neptune-iam-role-arn
                         :shape "String" :location "querystring" :location-name
                         "neptuneIamRoleArn"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-mlmodel-training-jobs-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-mlmodel-training-jobs-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-mlmodel-training-jobs-input
                    'make-list-mlmodel-training-jobs-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-mlmodel-training-jobs-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-mlmodel-training-jobs-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-mlmodel-training-jobs-input))
   common-lisp:nil))
(common-lisp:deftype list-mlmodel-training-jobs-input-max-items-integer ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass list-mlmodel-training-jobs-output common-lisp:nil
                       ((ids :initarg :ids :initform common-lisp:nil :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor
                         struct-shape-list-mlmodel-training-jobs-output-ids
                         :shape "StringList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-mlmodel-training-jobs-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-mlmodel-training-jobs-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-mlmodel-training-jobs-output
                    'make-list-mlmodel-training-jobs-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-mlmodel-training-jobs-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-mlmodel-training-jobs-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ids))
      (common-lisp:list
       (common-lisp:cons "ids"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-mlmodel-training-jobs-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-mlmodel-transform-jobs-input common-lisp:nil
                       ((max-items :initarg :max-items :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          list-mlmodel-transform-jobs-input-max-items-integer
                          common-lisp:null)
                         :accessor
                         struct-shape-list-mlmodel-transform-jobs-input-max-items
                         :shape "ListMLModelTransformJobsInputMaxItemsInteger"
                         :location "querystring" :location-name "maxItems")
                        (neptune-iam-role-arn :initarg :neptune-iam-role-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-mlmodel-transform-jobs-input-neptune-iam-role-arn
                         :shape "String" :location "querystring" :location-name
                         "neptuneIamRoleArn"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-mlmodel-transform-jobs-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-mlmodel-transform-jobs-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-mlmodel-transform-jobs-input
                    'make-list-mlmodel-transform-jobs-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-mlmodel-transform-jobs-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-mlmodel-transform-jobs-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-mlmodel-transform-jobs-input))
   common-lisp:nil))
(common-lisp:deftype list-mlmodel-transform-jobs-input-max-items-integer ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass list-mlmodel-transform-jobs-output common-lisp:nil
                       ((ids :initarg :ids :initform common-lisp:nil :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor
                         struct-shape-list-mlmodel-transform-jobs-output-ids
                         :shape "StringList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-mlmodel-transform-jobs-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-mlmodel-transform-jobs-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-mlmodel-transform-jobs-output
                    'make-list-mlmodel-transform-jobs-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-mlmodel-transform-jobs-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-mlmodel-transform-jobs-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ids))
      (common-lisp:list
       (common-lisp:cons "ids"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-mlmodel-transform-jobs-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-open-cypher-queries-input common-lisp:nil
                       ((include-waiting :initarg :include-waiting :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-list-open-cypher-queries-input-include-waiting
                         :shape "Boolean" :location "querystring"
                         :location-name "includeWaiting"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-open-cypher-queries-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-open-cypher-queries-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-open-cypher-queries-input
                    'make-list-open-cypher-queries-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-open-cypher-queries-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-open-cypher-queries-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-open-cypher-queries-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-open-cypher-queries-output common-lisp:nil
                       ((accepted-query-count :initarg :accepted-query-count
                         :initform common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-list-open-cypher-queries-output-accepted-query-count
                         :shape "Integer" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (queries :initarg :queries :initform common-lisp:nil
                         :type
                         (common-lisp:or open-cypher-queries common-lisp:null)
                         :accessor
                         struct-shape-list-open-cypher-queries-output-queries
                         :shape "OpenCypherQueries" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (running-query-count :initarg :running-query-count
                         :initform common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-list-open-cypher-queries-output-running-query-count
                         :shape "Integer" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-open-cypher-queries-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-open-cypher-queries-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-open-cypher-queries-output
                    'make-list-open-cypher-queries-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-open-cypher-queries-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-open-cypher-queries-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'accepted-query-count))
      (common-lisp:list
       (common-lisp:cons "acceptedQueryCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'queries))
      (common-lisp:list
       (common-lisp:cons "queries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'running-query-count))
      (common-lisp:list
       (common-lisp:cons "runningQueryCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-open-cypher-queries-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition load-url-access-denied-exception
     (neptunedata-error)
     ((code :initarg :code :initform common-lisp:nil :reader
       load-url-access-denied-exception-code)
      (detailed-message :initarg :detailed-message :initform common-lisp:nil
       :reader load-url-access-denied-exception-detailed-message)
      (request-id :initarg :request-id :initform common-lisp:nil :reader
       load-url-access-denied-exception-request-id)))
 (common-lisp:export
  (common-lisp:list 'load-url-access-denied-exception
                    'load-url-access-denied-exception-code
                    'load-url-access-denied-exception-detailed-message
                    'load-url-access-denied-exception-request-id)))
(common-lisp:progn
 (common-lisp:defclass loader-id-result common-lisp:nil
                       ((load-ids :initarg :load-ids :initform common-lisp:nil
                         :type (common-lisp:or string-list common-lisp:null)
                         :accessor struct-shape-loader-id-result-load-ids
                         :shape "StringList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-loader-id-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'loader-id-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'loader-id-result 'make-loader-id-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input loader-id-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input loader-id-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'load-ids))
      (common-lisp:list
       (common-lisp:cons "loadIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input loader-id-result))
   common-lisp:nil))
(common-lisp:deftype long () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:deftype long-valued-map () 'common-lisp:hash-table)
 (common-lisp:defun make-long-valued-map (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:deftype long-valued-map-list ()
   '(trivial-types:proper-list long-valued-map))
 (common-lisp:defun make-long-valued-map-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list long-valued-map))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition mlresource-not-found-exception
     (neptunedata-error)
     ((code :initarg :code :initform common-lisp:nil :reader
       mlresource-not-found-exception-code)
      (detailed-message :initarg :detailed-message :initform common-lisp:nil
       :reader mlresource-not-found-exception-detailed-message)
      (request-id :initarg :request-id :initform common-lisp:nil :reader
       mlresource-not-found-exception-request-id)))
 (common-lisp:export
  (common-lisp:list 'mlresource-not-found-exception
                    'mlresource-not-found-exception-code
                    'mlresource-not-found-exception-detailed-message
                    'mlresource-not-found-exception-request-id)))
(common-lisp:progn
 (common-lisp:define-condition malformed-query-exception
     (neptunedata-error)
     ((code :initarg :code :initform common-lisp:nil :reader
       malformed-query-exception-code)
      (detailed-message :initarg :detailed-message :initform common-lisp:nil
       :reader malformed-query-exception-detailed-message)
      (request-id :initarg :request-id :initform common-lisp:nil :reader
       malformed-query-exception-request-id)))
 (common-lisp:export
  (common-lisp:list 'malformed-query-exception 'malformed-query-exception-code
                    'malformed-query-exception-detailed-message
                    'malformed-query-exception-request-id)))
(common-lisp:progn
 (common-lisp:defclass manage-propertygraph-statistics-input common-lisp:nil
                       ((mode :initarg :mode :initform common-lisp:nil :type
                         (common-lisp:or statistics-auto-generation-mode
                                         common-lisp:null)
                         :accessor
                         struct-shape-manage-propertygraph-statistics-input-mode
                         :shape "StatisticsAutoGenerationMode" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-manage-propertygraph-statistics-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'manage-propertygraph-statistics-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'manage-propertygraph-statistics-input
                    'make-manage-propertygraph-statistics-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          manage-propertygraph-statistics-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          manage-propertygraph-statistics-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mode))
      (common-lisp:list
       (common-lisp:cons "mode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          manage-propertygraph-statistics-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass manage-propertygraph-statistics-output common-lisp:nil
                       ((payload :initarg :payload :initform common-lisp:nil
                         :type
                         (common-lisp:or refresh-statistics-id-map
                                         common-lisp:null)
                         :accessor
                         struct-shape-manage-propertygraph-statistics-output-payload
                         :shape "RefreshStatisticsIdMap" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (status :initarg :status :initform
                         (common-lisp:error ":status is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-manage-propertygraph-statistics-output-status
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-manage-propertygraph-statistics-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'manage-propertygraph-statistics-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'manage-propertygraph-statistics-output
                    'make-manage-propertygraph-statistics-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          manage-propertygraph-statistics-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          manage-propertygraph-statistics-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'payload))
      (common-lisp:list
       (common-lisp:cons "payload"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          manage-propertygraph-statistics-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass manage-sparql-statistics-input common-lisp:nil
                       ((mode :initarg :mode :initform common-lisp:nil :type
                         (common-lisp:or statistics-auto-generation-mode
                                         common-lisp:null)
                         :accessor
                         struct-shape-manage-sparql-statistics-input-mode
                         :shape "StatisticsAutoGenerationMode" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-manage-sparql-statistics-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'manage-sparql-statistics-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'manage-sparql-statistics-input
                    'make-manage-sparql-statistics-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          manage-sparql-statistics-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          manage-sparql-statistics-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mode))
      (common-lisp:list
       (common-lisp:cons "mode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          manage-sparql-statistics-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass manage-sparql-statistics-output common-lisp:nil
                       ((payload :initarg :payload :initform common-lisp:nil
                         :type
                         (common-lisp:or refresh-statistics-id-map
                                         common-lisp:null)
                         :accessor
                         struct-shape-manage-sparql-statistics-output-payload
                         :shape "RefreshStatisticsIdMap" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (status :initarg :status :initform
                         (common-lisp:error ":status is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-manage-sparql-statistics-output-status
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-manage-sparql-statistics-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'manage-sparql-statistics-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'manage-sparql-statistics-output
                    'make-manage-sparql-statistics-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          manage-sparql-statistics-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          manage-sparql-statistics-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'payload))
      (common-lisp:list
       (common-lisp:cons "payload"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          manage-sparql-statistics-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition memory-limit-exceeded-exception
     (neptunedata-error)
     ((code :initarg :code :initform common-lisp:nil :reader
       memory-limit-exceeded-exception-code)
      (detailed-message :initarg :detailed-message :initform common-lisp:nil
       :reader memory-limit-exceeded-exception-detailed-message)
      (request-id :initarg :request-id :initform common-lisp:nil :reader
       memory-limit-exceeded-exception-request-id)))
 (common-lisp:export
  (common-lisp:list 'memory-limit-exceeded-exception
                    'memory-limit-exceeded-exception-code
                    'memory-limit-exceeded-exception-detailed-message
                    'memory-limit-exceeded-exception-request-id)))
(common-lisp:progn
 (common-lisp:define-condition method-not-allowed-exception
     (neptunedata-error)
     ((code :initarg :code :initform common-lisp:nil :reader
       method-not-allowed-exception-code)
      (detailed-message :initarg :detailed-message :initform common-lisp:nil
       :reader method-not-allowed-exception-detailed-message)
      (request-id :initarg :request-id :initform common-lisp:nil :reader
       method-not-allowed-exception-request-id)))
 (common-lisp:export
  (common-lisp:list 'method-not-allowed-exception
                    'method-not-allowed-exception-code
                    'method-not-allowed-exception-detailed-message
                    'method-not-allowed-exception-request-id)))
(common-lisp:progn
 (common-lisp:define-condition missing-parameter-exception
     (neptunedata-error)
     ((code :initarg :code :initform common-lisp:nil :reader
       missing-parameter-exception-code)
      (detailed-message :initarg :detailed-message :initform common-lisp:nil
       :reader missing-parameter-exception-detailed-message)
      (request-id :initarg :request-id :initform common-lisp:nil :reader
       missing-parameter-exception-request-id)))
 (common-lisp:export
  (common-lisp:list 'missing-parameter-exception
                    'missing-parameter-exception-code
                    'missing-parameter-exception-detailed-message
                    'missing-parameter-exception-request-id)))
(common-lisp:progn
 (common-lisp:defclass ml-config-definition common-lisp:nil
                       ((arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-ml-config-definition-arn :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-ml-config-definition-name :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-ml-config-definition
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'ml-config-definition
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'ml-config-definition 'make-ml-config-definition))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input ml-config-definition))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input ml-config-definition))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input ml-config-definition))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype ml-models ()
   '(trivial-types:proper-list ml-config-definition))
 (common-lisp:defun make-ml-models
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list ml-config-definition))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass ml-resource-definition common-lisp:nil
                       ((arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-ml-resource-definition-arn :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (cloudwatch-log-url :initarg :cloudwatch-log-url
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-ml-resource-definition-cloudwatch-log-url
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (failure-reason :initarg :failure-reason :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-ml-resource-definition-failure-reason
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-ml-resource-definition-name :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (output-location :initarg :output-location :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-ml-resource-definition-output-location
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-ml-resource-definition-status
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-ml-resource-definition
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'ml-resource-definition
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'ml-resource-definition 'make-ml-resource-definition))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          ml-resource-definition))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          ml-resource-definition))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cloudwatch-log-url))
      (common-lisp:list
       (common-lisp:cons "cloudwatchLogUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-reason))
      (common-lisp:list
       (common-lisp:cons "failureReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-location))
      (common-lisp:list
       (common-lisp:cons "outputLocation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          ml-resource-definition))
   common-lisp:nil))
(common-lisp:deftype mode () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype models ()
   '(trivial-types:proper-list ml-config-definition))
 (common-lisp:defun make-models
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list ml-config-definition))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype node-labels () '(trivial-types:proper-list string))
 (common-lisp:defun make-node-labels
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype node-properties () '(trivial-types:proper-list string))
 (common-lisp:defun make-node-properties
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass node-structure common-lisp:nil
                       ((count :initarg :count :initform common-lisp:nil :type
                         (common-lisp:or long common-lisp:null) :accessor
                         struct-shape-node-structure-count :shape "Long"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (distinct-outgoing-edge-labels :initarg
                         :distinct-outgoing-edge-labels :initform
                         common-lisp:nil :type
                         (common-lisp:or outgoing-edge-labels common-lisp:null)
                         :accessor
                         struct-shape-node-structure-distinct-outgoing-edge-labels
                         :shape "OutgoingEdgeLabels" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (node-properties :initarg :node-properties :initform
                         common-lisp:nil :type
                         (common-lisp:or node-properties common-lisp:null)
                         :accessor struct-shape-node-structure-node-properties
                         :shape "NodeProperties" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-node-structure
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'node-structure
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'node-structure 'make-node-structure))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input node-structure))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input node-structure))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'count))
      (common-lisp:list
       (common-lisp:cons "count"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'distinct-outgoing-edge-labels))
      (common-lisp:list
       (common-lisp:cons "distinctOutgoingEdgeLabels"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'node-properties))
      (common-lisp:list
       (common-lisp:cons "nodeProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input node-structure))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype node-structures ()
   '(trivial-types:proper-list node-structure))
 (common-lisp:defun make-node-structures
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list node-structure))
   aws-sdk/generator/shape::members))
(common-lisp:deftype open-cypher-explain-mode () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype open-cypher-queries ()
   '(trivial-types:proper-list gremlin-query-status))
 (common-lisp:defun make-open-cypher-queries
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list gremlin-query-status))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype outgoing-edge-labels ()
   '(trivial-types:proper-list string))
 (common-lisp:defun make-outgoing-edge-labels
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype parallelism () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition parsing-exception
     (neptunedata-error)
     ((code :initarg :code :initform common-lisp:nil :reader
       parsing-exception-code)
      (detailed-message :initarg :detailed-message :initform common-lisp:nil
       :reader parsing-exception-detailed-message)
      (request-id :initarg :request-id :initform common-lisp:nil :reader
       parsing-exception-request-id)))
 (common-lisp:export
  (common-lisp:list 'parsing-exception 'parsing-exception-code
                    'parsing-exception-detailed-message
                    'parsing-exception-request-id)))
(common-lisp:deftype positive-integer () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition preconditions-failed-exception
     (neptunedata-error)
     ((code :initarg :code :initform common-lisp:nil :reader
       preconditions-failed-exception-code)
      (detailed-message :initarg :detailed-message :initform common-lisp:nil
       :reader preconditions-failed-exception-detailed-message)
      (request-id :initarg :request-id :initform common-lisp:nil :reader
       preconditions-failed-exception-request-id)))
 (common-lisp:export
  (common-lisp:list 'preconditions-failed-exception
                    'preconditions-failed-exception-code
                    'preconditions-failed-exception-detailed-message
                    'preconditions-failed-exception-request-id)))
(common-lisp:progn
 (common-lisp:deftype predicates () '(trivial-types:proper-list string))
 (common-lisp:defun make-predicates
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass propertygraph-summary common-lisp:nil
                       ((edge-labels :initarg :edge-labels :initform
                         common-lisp:nil :type
                         (common-lisp:or edge-labels common-lisp:null)
                         :accessor
                         struct-shape-propertygraph-summary-edge-labels :shape
                         "EdgeLabels" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (edge-properties :initarg :edge-properties :initform
                         common-lisp:nil :type
                         (common-lisp:or long-valued-map-list common-lisp:null)
                         :accessor
                         struct-shape-propertygraph-summary-edge-properties
                         :shape "LongValuedMapList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (edge-structures :initarg :edge-structures :initform
                         common-lisp:nil :type
                         (common-lisp:or edge-structures common-lisp:null)
                         :accessor
                         struct-shape-propertygraph-summary-edge-structures
                         :shape "EdgeStructures" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (node-labels :initarg :node-labels :initform
                         common-lisp:nil :type
                         (common-lisp:or node-labels common-lisp:null)
                         :accessor
                         struct-shape-propertygraph-summary-node-labels :shape
                         "NodeLabels" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (node-properties :initarg :node-properties :initform
                         common-lisp:nil :type
                         (common-lisp:or long-valued-map-list common-lisp:null)
                         :accessor
                         struct-shape-propertygraph-summary-node-properties
                         :shape "LongValuedMapList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (node-structures :initarg :node-structures :initform
                         common-lisp:nil :type
                         (common-lisp:or node-structures common-lisp:null)
                         :accessor
                         struct-shape-propertygraph-summary-node-structures
                         :shape "NodeStructures" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (num-edge-labels :initarg :num-edge-labels :initform
                         common-lisp:nil :type
                         (common-lisp:or long common-lisp:null) :accessor
                         struct-shape-propertygraph-summary-num-edge-labels
                         :shape "Long" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (num-edge-properties :initarg :num-edge-properties
                         :initform common-lisp:nil :type
                         (common-lisp:or long common-lisp:null) :accessor
                         struct-shape-propertygraph-summary-num-edge-properties
                         :shape "Long" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (num-edges :initarg :num-edges :initform
                         common-lisp:nil :type
                         (common-lisp:or long common-lisp:null) :accessor
                         struct-shape-propertygraph-summary-num-edges :shape
                         "Long" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (num-node-labels :initarg :num-node-labels :initform
                         common-lisp:nil :type
                         (common-lisp:or long common-lisp:null) :accessor
                         struct-shape-propertygraph-summary-num-node-labels
                         :shape "Long" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (num-node-properties :initarg :num-node-properties
                         :initform common-lisp:nil :type
                         (common-lisp:or long common-lisp:null) :accessor
                         struct-shape-propertygraph-summary-num-node-properties
                         :shape "Long" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (num-nodes :initarg :num-nodes :initform
                         common-lisp:nil :type
                         (common-lisp:or long common-lisp:null) :accessor
                         struct-shape-propertygraph-summary-num-nodes :shape
                         "Long" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (total-edge-property-values :initarg
                         :total-edge-property-values :initform common-lisp:nil
                         :type (common-lisp:or long common-lisp:null) :accessor
                         struct-shape-propertygraph-summary-total-edge-property-values
                         :shape "Long" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (total-node-property-values :initarg
                         :total-node-property-values :initform common-lisp:nil
                         :type (common-lisp:or long common-lisp:null) :accessor
                         struct-shape-propertygraph-summary-total-node-property-values
                         :shape "Long" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-propertygraph-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'propertygraph-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'propertygraph-summary 'make-propertygraph-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          propertygraph-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          propertygraph-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'edge-labels))
      (common-lisp:list
       (common-lisp:cons "edgeLabels"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'edge-properties))
      (common-lisp:list
       (common-lisp:cons "edgeProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'edge-structures))
      (common-lisp:list
       (common-lisp:cons "edgeStructures"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'node-labels))
      (common-lisp:list
       (common-lisp:cons "nodeLabels"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'node-properties))
      (common-lisp:list
       (common-lisp:cons "nodeProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'node-structures))
      (common-lisp:list
       (common-lisp:cons "nodeStructures"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'num-edge-labels))
      (common-lisp:list
       (common-lisp:cons "numEdgeLabels"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'num-edge-properties))
      (common-lisp:list
       (common-lisp:cons "numEdgeProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'num-edges))
      (common-lisp:list
       (common-lisp:cons "numEdges"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'num-node-labels))
      (common-lisp:list
       (common-lisp:cons "numNodeLabels"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'num-node-properties))
      (common-lisp:list
       (common-lisp:cons "numNodeProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'num-nodes))
      (common-lisp:list
       (common-lisp:cons "numNodes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'total-edge-property-values))
      (common-lisp:list
       (common-lisp:cons "totalEdgePropertyValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'total-node-property-values))
      (common-lisp:list
       (common-lisp:cons "totalNodePropertyValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          propertygraph-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass propertygraph-summary-value-map common-lisp:nil
                       ((graph-summary :initarg :graph-summary :initform
                         common-lisp:nil :type
                         (common-lisp:or propertygraph-summary
                                         common-lisp:null)
                         :accessor
                         struct-shape-propertygraph-summary-value-map-graph-summary
                         :shape "PropertygraphSummary" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (last-statistics-computation-time :initarg
                         :last-statistics-computation-time :initform
                         common-lisp:nil :type
                         (common-lisp:or synthetic-timestamp-date-time
                                         common-lisp:null)
                         :accessor
                         struct-shape-propertygraph-summary-value-map-last-statistics-computation-time
                         :shape "SyntheticTimestamp_date_time" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (version :initarg :version :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-propertygraph-summary-value-map-version
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-propertygraph-summary-value-map
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'propertygraph-summary-value-map
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'propertygraph-summary-value-map
                    'make-propertygraph-summary-value-map))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          propertygraph-summary-value-map))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          propertygraph-summary-value-map))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'graph-summary))
      (common-lisp:list
       (common-lisp:cons "graphSummary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-statistics-computation-time))
      (common-lisp:list
       (common-lisp:cons "lastStatisticsComputationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          propertygraph-summary-value-map))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass query-eval-stats common-lisp:nil
                       ((cancelled :initarg :cancelled :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-query-eval-stats-cancelled :shape
                         "Boolean" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (elapsed :initarg :elapsed :initform common-lisp:nil
                         :type (common-lisp:or integer common-lisp:null)
                         :accessor struct-shape-query-eval-stats-elapsed :shape
                         "Integer" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (waited :initarg :waited :initform common-lisp:nil
                         :type (common-lisp:or integer common-lisp:null)
                         :accessor struct-shape-query-eval-stats-waited :shape
                         "Integer" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-query-eval-stats
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'query-eval-stats
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'query-eval-stats 'make-query-eval-stats))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input query-eval-stats))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input query-eval-stats))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cancelled))
      (common-lisp:list
       (common-lisp:cons "cancelled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'elapsed))
      (common-lisp:list
       (common-lisp:cons "elapsed"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'waited))
      (common-lisp:list
       (common-lisp:cons "waited"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input query-eval-stats))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass query-language-version common-lisp:nil
                       ((version :initarg :version :initform
                         (common-lisp:error ":version is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-query-language-version-version :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-query-language-version
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'query-language-version
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'query-language-version 'make-query-language-version))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          query-language-version))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          query-language-version))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          query-language-version))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition query-limit-exceeded-exception
     (neptunedata-error)
     ((code :initarg :code :initform common-lisp:nil :reader
       query-limit-exceeded-exception-code)
      (detailed-message :initarg :detailed-message :initform common-lisp:nil
       :reader query-limit-exceeded-exception-detailed-message)
      (request-id :initarg :request-id :initform common-lisp:nil :reader
       query-limit-exceeded-exception-request-id)))
 (common-lisp:export
  (common-lisp:list 'query-limit-exceeded-exception
                    'query-limit-exceeded-exception-code
                    'query-limit-exceeded-exception-detailed-message
                    'query-limit-exceeded-exception-request-id)))
(common-lisp:progn
 (common-lisp:define-condition query-limit-exception
     (neptunedata-error)
     ((code :initarg :code :initform common-lisp:nil :reader
       query-limit-exception-code)
      (detailed-message :initarg :detailed-message :initform common-lisp:nil
       :reader query-limit-exception-detailed-message)
      (request-id :initarg :request-id :initform common-lisp:nil :reader
       query-limit-exception-request-id)))
 (common-lisp:export
  (common-lisp:list 'query-limit-exception 'query-limit-exception-code
                    'query-limit-exception-detailed-message
                    'query-limit-exception-request-id)))
(common-lisp:progn
 (common-lisp:define-condition query-too-large-exception
     (neptunedata-error)
     ((code :initarg :code :initform common-lisp:nil :reader
       query-too-large-exception-code)
      (detailed-message :initarg :detailed-message :initform common-lisp:nil
       :reader query-too-large-exception-detailed-message)
      (request-id :initarg :request-id :initform common-lisp:nil :reader
       query-too-large-exception-request-id)))
 (common-lisp:export
  (common-lisp:list 'query-too-large-exception 'query-too-large-exception-code
                    'query-too-large-exception-detailed-message
                    'query-too-large-exception-request-id)))
(common-lisp:progn
 (common-lisp:defclass rdfgraph-summary common-lisp:nil
                       ((classes :initarg :classes :initform common-lisp:nil
                         :type (common-lisp:or classes common-lisp:null)
                         :accessor struct-shape-rdfgraph-summary-classes :shape
                         "Classes" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (num-classes :initarg :num-classes :initform
                         common-lisp:nil :type
                         (common-lisp:or long common-lisp:null) :accessor
                         struct-shape-rdfgraph-summary-num-classes :shape
                         "Long" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (num-distinct-predicates :initarg
                         :num-distinct-predicates :initform common-lisp:nil
                         :type (common-lisp:or long common-lisp:null) :accessor
                         struct-shape-rdfgraph-summary-num-distinct-predicates
                         :shape "Long" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (num-distinct-subjects :initarg :num-distinct-subjects
                         :initform common-lisp:nil :type
                         (common-lisp:or long common-lisp:null) :accessor
                         struct-shape-rdfgraph-summary-num-distinct-subjects
                         :shape "Long" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (num-quads :initarg :num-quads :initform
                         common-lisp:nil :type
                         (common-lisp:or long common-lisp:null) :accessor
                         struct-shape-rdfgraph-summary-num-quads :shape "Long"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (predicates :initarg :predicates :initform
                         common-lisp:nil :type
                         (common-lisp:or long-valued-map-list common-lisp:null)
                         :accessor struct-shape-rdfgraph-summary-predicates
                         :shape "LongValuedMapList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (subject-structures :initarg :subject-structures
                         :initform common-lisp:nil :type
                         (common-lisp:or subject-structures common-lisp:null)
                         :accessor
                         struct-shape-rdfgraph-summary-subject-structures
                         :shape "SubjectStructures" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-rdfgraph-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'rdfgraph-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'rdfgraph-summary 'make-rdfgraph-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input rdfgraph-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input rdfgraph-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'classes))
      (common-lisp:list
       (common-lisp:cons "classes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'num-classes))
      (common-lisp:list
       (common-lisp:cons "numClasses"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'num-distinct-predicates))
      (common-lisp:list
       (common-lisp:cons "numDistinctPredicates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'num-distinct-subjects))
      (common-lisp:list
       (common-lisp:cons "numDistinctSubjects"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'num-quads))
      (common-lisp:list
       (common-lisp:cons "numQuads"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'predicates))
      (common-lisp:list
       (common-lisp:cons "predicates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subject-structures))
      (common-lisp:list
       (common-lisp:cons "subjectStructures"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input rdfgraph-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass rdfgraph-summary-value-map common-lisp:nil
                       ((graph-summary :initarg :graph-summary :initform
                         common-lisp:nil :type
                         (common-lisp:or rdfgraph-summary common-lisp:null)
                         :accessor
                         struct-shape-rdfgraph-summary-value-map-graph-summary
                         :shape "RDFGraphSummary" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-statistics-computation-time :initarg
                         :last-statistics-computation-time :initform
                         common-lisp:nil :type
                         (common-lisp:or synthetic-timestamp-date-time
                                         common-lisp:null)
                         :accessor
                         struct-shape-rdfgraph-summary-value-map-last-statistics-computation-time
                         :shape "SyntheticTimestamp_date_time" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (version :initarg :version :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-rdfgraph-summary-value-map-version :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-rdfgraph-summary-value-map
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'rdfgraph-summary-value-map
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'rdfgraph-summary-value-map
                    'make-rdfgraph-summary-value-map))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          rdfgraph-summary-value-map))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          rdfgraph-summary-value-map))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'graph-summary))
      (common-lisp:list
       (common-lisp:cons "graphSummary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-statistics-computation-time))
      (common-lisp:list
       (common-lisp:cons "lastStatisticsComputationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          rdfgraph-summary-value-map))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition read-only-violation-exception
     (neptunedata-error)
     ((code :initarg :code :initform common-lisp:nil :reader
       read-only-violation-exception-code)
      (detailed-message :initarg :detailed-message :initform common-lisp:nil
       :reader read-only-violation-exception-detailed-message)
      (request-id :initarg :request-id :initform common-lisp:nil :reader
       read-only-violation-exception-request-id)))
 (common-lisp:export
  (common-lisp:list 'read-only-violation-exception
                    'read-only-violation-exception-code
                    'read-only-violation-exception-detailed-message
                    'read-only-violation-exception-request-id)))
(common-lisp:progn
 (common-lisp:defclass refresh-statistics-id-map common-lisp:nil
                       ((statistics-id :initarg :statistics-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-refresh-statistics-id-map-statistics-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-refresh-statistics-id-map
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'refresh-statistics-id-map
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'refresh-statistics-id-map
                    'make-refresh-statistics-id-map))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          refresh-statistics-id-map))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          refresh-statistics-id-map))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'statistics-id))
      (common-lisp:list
       (common-lisp:cons "statisticsId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          refresh-statistics-id-map))
   common-lisp:nil))
(common-lisp:deftype report-as-text ()
  '(common-lisp:simple-array (common-lisp:unsigned-byte 8) (common-lisp:*)))
(common-lisp:deftype s3bucket-region () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition s3exception
     (neptunedata-error)
     ((code :initarg :code :initform common-lisp:nil :reader s3exception-code)
      (detailed-message :initarg :detailed-message :initform common-lisp:nil
       :reader s3exception-detailed-message)
      (request-id :initarg :request-id :initform common-lisp:nil :reader
       s3exception-request-id)))
 (common-lisp:export
  (common-lisp:list 's3exception 's3exception-code
                    's3exception-detailed-message 's3exception-request-id)))
(common-lisp:progn
 (common-lisp:define-condition server-shutdown-exception
     (neptunedata-error)
     ((code :initarg :code :initform common-lisp:nil :reader
       server-shutdown-exception-code)
      (detailed-message :initarg :detailed-message :initform common-lisp:nil
       :reader server-shutdown-exception-detailed-message)
      (request-id :initarg :request-id :initform common-lisp:nil :reader
       server-shutdown-exception-request-id)))
 (common-lisp:export
  (common-lisp:list 'server-shutdown-exception 'server-shutdown-exception-code
                    'server-shutdown-exception-detailed-message
                    'server-shutdown-exception-request-id)))
(common-lisp:progn
 (common-lisp:defclass sparql-data common-lisp:nil
                       ((stmt :initarg :stmt :initform
                         (common-lisp:error ":stmt is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-sparql-data-stmt :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-sparql-data
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'sparql-data
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'sparql-data 'make-sparql-data))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input sparql-data))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input sparql-data))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stmt))
      (common-lisp:list
       (common-lisp:cons "stmt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input sparql-data))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass sparql-record common-lisp:nil
                       ((commit-timestamp-in-millis :initarg
                         :commit-timestamp-in-millis :initform
                         (common-lisp:error
                          ":committimestampinmillis is required")
                         :type (common-lisp:or long common-lisp:null) :accessor
                         struct-shape-sparql-record-commit-timestamp-in-millis
                         :shape "Long" :location common-lisp:nil :location-name
                         "commitTimestamp")
                        (data :initarg :data :initform
                         (common-lisp:error ":data is required") :type
                         (common-lisp:or sparql-data common-lisp:null)
                         :accessor struct-shape-sparql-record-data :shape
                         "SparqlData" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (event-id :initarg :event-id :initform
                         (common-lisp:error ":eventid is required") :type
                         (common-lisp:or string-valued-map common-lisp:null)
                         :accessor struct-shape-sparql-record-event-id :shape
                         "StringValuedMap" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (is-last-op :initarg :is-last-op :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-sparql-record-is-last-op :shape "Boolean"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (op :initarg :op :initform
                         (common-lisp:error ":op is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-sparql-record-op :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-sparql-record
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'sparql-record
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'sparql-record 'make-sparql-record))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input sparql-record))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input sparql-record))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'commit-timestamp-in-millis))
      (common-lisp:list
       (common-lisp:cons "commitTimestampInMillis"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data))
      (common-lisp:list
       (common-lisp:cons "data"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-id))
      (common-lisp:list
       (common-lisp:cons "eventId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-last-op))
      (common-lisp:list
       (common-lisp:cons "isLastOp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'op))
      (common-lisp:list
       (common-lisp:cons "op"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input sparql-record))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype sparql-records-list ()
   '(trivial-types:proper-list sparql-record))
 (common-lisp:defun make-sparql-records-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list sparql-record))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass start-loader-job-input common-lisp:nil
                       ((dependencies :initarg :dependencies :initform
                         common-lisp:nil :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor
                         struct-shape-start-loader-job-input-dependencies
                         :shape "StringList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (fail-on-error :initarg :fail-on-error :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-start-loader-job-input-fail-on-error
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (format :initarg :format :initform
                         (common-lisp:error ":format is required") :type
                         (common-lisp:or format common-lisp:null) :accessor
                         struct-shape-start-loader-job-input-format :shape
                         "Format" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (iam-role-arn :initarg :iam-role-arn :initform
                         (common-lisp:error ":iamrolearn is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-start-loader-job-input-iam-role-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (mode :initarg :mode :initform common-lisp:nil :type
                         (common-lisp:or mode common-lisp:null) :accessor
                         struct-shape-start-loader-job-input-mode :shape "Mode"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (parallelism :initarg :parallelism :initform
                         common-lisp:nil :type
                         (common-lisp:or parallelism common-lisp:null)
                         :accessor
                         struct-shape-start-loader-job-input-parallelism :shape
                         "Parallelism" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (parser-configuration :initarg :parser-configuration
                         :initform common-lisp:nil :type
                         (common-lisp:or string-valued-map common-lisp:null)
                         :accessor
                         struct-shape-start-loader-job-input-parser-configuration
                         :shape "StringValuedMap" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (queue-request :initarg :queue-request :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-start-loader-job-input-queue-request
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (s3bucket-region :initarg :s3bucket-region :initform
                         (common-lisp:error ":s3bucketregion is required")
                         :type
                         (common-lisp:or s3bucket-region common-lisp:null)
                         :accessor
                         struct-shape-start-loader-job-input-s3bucket-region
                         :shape "S3BucketRegion" :location common-lisp:nil
                         :location-name "region")
                        (source :initarg :source :initform
                         (common-lisp:error ":source is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-start-loader-job-input-source :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (update-single-cardinality-properties :initarg
                         :update-single-cardinality-properties :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-start-loader-job-input-update-single-cardinality-properties
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (user-provided-edge-ids :initarg
                         :user-provided-edge-ids :initform common-lisp:nil
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         struct-shape-start-loader-job-input-user-provided-edge-ids
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-loader-job-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'start-loader-job-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-loader-job-input 'make-start-loader-job-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-loader-job-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-loader-job-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dependencies))
      (common-lisp:list
       (common-lisp:cons "dependencies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fail-on-error))
      (common-lisp:list
       (common-lisp:cons "failOnError"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'format))
      (common-lisp:list
       (common-lisp:cons "format"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iam-role-arn))
      (common-lisp:list
       (common-lisp:cons "iamRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mode))
      (common-lisp:list
       (common-lisp:cons "mode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parallelism))
      (common-lisp:list
       (common-lisp:cons "parallelism"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'parser-configuration))
      (common-lisp:list
       (common-lisp:cons "parserConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'queue-request))
      (common-lisp:list
       (common-lisp:cons "queueRequest"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3bucket-region))
      (common-lisp:list
       (common-lisp:cons "s3BucketRegion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source))
      (common-lisp:list
       (common-lisp:cons "source"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'update-single-cardinality-properties))
      (common-lisp:list
       (common-lisp:cons "updateSingleCardinalityProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'user-provided-edge-ids))
      (common-lisp:list
       (common-lisp:cons "userProvidedEdgeIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-loader-job-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-loader-job-output common-lisp:nil
                       ((payload :initarg :payload :initform
                         (common-lisp:error ":payload is required") :type
                         (common-lisp:or string-valued-map common-lisp:null)
                         :accessor struct-shape-start-loader-job-output-payload
                         :shape "StringValuedMap" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform
                         (common-lisp:error ":status is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-start-loader-job-output-status :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-loader-job-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'start-loader-job-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-loader-job-output 'make-start-loader-job-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-loader-job-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-loader-job-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'payload))
      (common-lisp:list
       (common-lisp:cons "payload"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-loader-job-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-mldata-processing-job-input common-lisp:nil
                       ((config-file-name :initarg :config-file-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-start-mldata-processing-job-input-config-file-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (id :initarg :id :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-start-mldata-processing-job-input-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (input-data-s3location :initarg :input-data-s3location
                         :initform
                         (common-lisp:error ":inputdatas3location is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-start-mldata-processing-job-input-input-data-s3location
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (model-type :initarg :model-type :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-start-mldata-processing-job-input-model-type
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (neptune-iam-role-arn :initarg :neptune-iam-role-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-start-mldata-processing-job-input-neptune-iam-role-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (previous-data-processing-job-id :initarg
                         :previous-data-processing-job-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-start-mldata-processing-job-input-previous-data-processing-job-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (processed-data-s3location :initarg
                         :processed-data-s3location :initform
                         (common-lisp:error
                          ":processeddatas3location is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-start-mldata-processing-job-input-processed-data-s3location
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (processing-instance-type :initarg
                         :processing-instance-type :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-start-mldata-processing-job-input-processing-instance-type
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (processing-instance-volume-size-in-gb :initarg
                         :processing-instance-volume-size-in-gb :initform
                         common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-start-mldata-processing-job-input-processing-instance-volume-size-in-gb
                         :shape "Integer" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (processing-time-out-in-seconds :initarg
                         :processing-time-out-in-seconds :initform
                         common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-start-mldata-processing-job-input-processing-time-out-in-seconds
                         :shape "Integer" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (s3output-encryption-kmskey :initarg
                         :s3output-encryption-kmskey :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-start-mldata-processing-job-input-s3output-encryption-kmskey
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (sagemaker-iam-role-arn :initarg
                         :sagemaker-iam-role-arn :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-start-mldata-processing-job-input-sagemaker-iam-role-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (security-group-ids :initarg :security-group-ids
                         :initform common-lisp:nil :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor
                         struct-shape-start-mldata-processing-job-input-security-group-ids
                         :shape "StringList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (subnets :initarg :subnets :initform common-lisp:nil
                         :type (common-lisp:or string-list common-lisp:null)
                         :accessor
                         struct-shape-start-mldata-processing-job-input-subnets
                         :shape "StringList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (volume-encryption-kmskey :initarg
                         :volume-encryption-kmskey :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-start-mldata-processing-job-input-volume-encryption-kmskey
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-mldata-processing-job-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-mldata-processing-job-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-mldata-processing-job-input
                    'make-start-mldata-processing-job-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-mldata-processing-job-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-mldata-processing-job-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'config-file-name))
      (common-lisp:list
       (common-lisp:cons "configFileName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'input-data-s3location))
      (common-lisp:list
       (common-lisp:cons "inputDataS3Location"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-type))
      (common-lisp:list
       (common-lisp:cons "modelType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'neptune-iam-role-arn))
      (common-lisp:list
       (common-lisp:cons "neptuneIamRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'previous-data-processing-job-id))
      (common-lisp:list
       (common-lisp:cons "previousDataProcessingJobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'processed-data-s3location))
      (common-lisp:list
       (common-lisp:cons "processedDataS3Location"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'processing-instance-type))
      (common-lisp:list
       (common-lisp:cons "processingInstanceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'processing-instance-volume-size-in-gb))
      (common-lisp:list
       (common-lisp:cons "processingInstanceVolumeSizeInGB"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'processing-time-out-in-seconds))
      (common-lisp:list
       (common-lisp:cons "processingTimeOutInSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           's3output-encryption-kmskey))
      (common-lisp:list
       (common-lisp:cons "s3OutputEncryptionKMSKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'sagemaker-iam-role-arn))
      (common-lisp:list
       (common-lisp:cons "sagemakerIamRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-group-ids))
      (common-lisp:list
       (common-lisp:cons "securityGroupIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnets))
      (common-lisp:list
       (common-lisp:cons "subnets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'volume-encryption-kmskey))
      (common-lisp:list
       (common-lisp:cons "volumeEncryptionKMSKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-mldata-processing-job-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-mldata-processing-job-output common-lisp:nil
                       ((arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-start-mldata-processing-job-output-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (creation-time-in-millis :initarg
                         :creation-time-in-millis :initform common-lisp:nil
                         :type (common-lisp:or long common-lisp:null) :accessor
                         struct-shape-start-mldata-processing-job-output-creation-time-in-millis
                         :shape "Long" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (id :initarg :id :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-start-mldata-processing-job-output-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-mldata-processing-job-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-mldata-processing-job-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-mldata-processing-job-output
                    'make-start-mldata-processing-job-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-mldata-processing-job-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-mldata-processing-job-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'creation-time-in-millis))
      (common-lisp:list
       (common-lisp:cons "creationTimeInMillis"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-mldata-processing-job-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-mlmodel-training-job-input common-lisp:nil
                       ((base-processing-instance-type :initarg
                         :base-processing-instance-type :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-start-mlmodel-training-job-input-base-processing-instance-type
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (custom-model-training-parameters :initarg
                         :custom-model-training-parameters :initform
                         common-lisp:nil :type
                         (common-lisp:or custom-model-training-parameters
                                         common-lisp:null)
                         :accessor
                         struct-shape-start-mlmodel-training-job-input-custom-model-training-parameters
                         :shape "CustomModelTrainingParameters" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (data-processing-job-id :initarg
                         :data-processing-job-id :initform
                         (common-lisp:error ":dataprocessingjobid is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-start-mlmodel-training-job-input-data-processing-job-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (enable-managed-spot-training :initarg
                         :enable-managed-spot-training :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-start-mlmodel-training-job-input-enable-managed-spot-training
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (id :initarg :id :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-start-mlmodel-training-job-input-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-hponumber-of-training-jobs :initarg
                         :max-hponumber-of-training-jobs :initform
                         common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-start-mlmodel-training-job-input-max-hponumber-of-training-jobs
                         :shape "Integer" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-hpoparallel-training-jobs :initarg
                         :max-hpoparallel-training-jobs :initform
                         common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-start-mlmodel-training-job-input-max-hpoparallel-training-jobs
                         :shape "Integer" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (neptune-iam-role-arn :initarg :neptune-iam-role-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-start-mlmodel-training-job-input-neptune-iam-role-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (previous-model-training-job-id :initarg
                         :previous-model-training-job-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-start-mlmodel-training-job-input-previous-model-training-job-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (s3output-encryption-kmskey :initarg
                         :s3output-encryption-kmskey :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-start-mlmodel-training-job-input-s3output-encryption-kmskey
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (sagemaker-iam-role-arn :initarg
                         :sagemaker-iam-role-arn :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-start-mlmodel-training-job-input-sagemaker-iam-role-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (security-group-ids :initarg :security-group-ids
                         :initform common-lisp:nil :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor
                         struct-shape-start-mlmodel-training-job-input-security-group-ids
                         :shape "StringList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (subnets :initarg :subnets :initform common-lisp:nil
                         :type (common-lisp:or string-list common-lisp:null)
                         :accessor
                         struct-shape-start-mlmodel-training-job-input-subnets
                         :shape "StringList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (train-model-s3location :initarg
                         :train-model-s3location :initform
                         (common-lisp:error
                          ":trainmodels3location is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-start-mlmodel-training-job-input-train-model-s3location
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (training-instance-type :initarg
                         :training-instance-type :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-start-mlmodel-training-job-input-training-instance-type
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (training-instance-volume-size-in-gb :initarg
                         :training-instance-volume-size-in-gb :initform
                         common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-start-mlmodel-training-job-input-training-instance-volume-size-in-gb
                         :shape "Integer" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (training-time-out-in-seconds :initarg
                         :training-time-out-in-seconds :initform
                         common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-start-mlmodel-training-job-input-training-time-out-in-seconds
                         :shape "Integer" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (volume-encryption-kmskey :initarg
                         :volume-encryption-kmskey :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-start-mlmodel-training-job-input-volume-encryption-kmskey
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-mlmodel-training-job-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-mlmodel-training-job-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-mlmodel-training-job-input
                    'make-start-mlmodel-training-job-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-mlmodel-training-job-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-mlmodel-training-job-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'base-processing-instance-type))
      (common-lisp:list
       (common-lisp:cons "baseProcessingInstanceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'custom-model-training-parameters))
      (common-lisp:list
       (common-lisp:cons "customModelTrainingParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-processing-job-id))
      (common-lisp:list
       (common-lisp:cons "dataProcessingJobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-managed-spot-training))
      (common-lisp:list
       (common-lisp:cons "enableManagedSpotTraining"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'max-hponumber-of-training-jobs))
      (common-lisp:list
       (common-lisp:cons "maxHPONumberOfTrainingJobs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'max-hpoparallel-training-jobs))
      (common-lisp:list
       (common-lisp:cons "maxHPOParallelTrainingJobs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'neptune-iam-role-arn))
      (common-lisp:list
       (common-lisp:cons "neptuneIamRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'previous-model-training-job-id))
      (common-lisp:list
       (common-lisp:cons "previousModelTrainingJobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           's3output-encryption-kmskey))
      (common-lisp:list
       (common-lisp:cons "s3OutputEncryptionKMSKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'sagemaker-iam-role-arn))
      (common-lisp:list
       (common-lisp:cons "sagemakerIamRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-group-ids))
      (common-lisp:list
       (common-lisp:cons "securityGroupIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnets))
      (common-lisp:list
       (common-lisp:cons "subnets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'train-model-s3location))
      (common-lisp:list
       (common-lisp:cons "trainModelS3Location"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'training-instance-type))
      (common-lisp:list
       (common-lisp:cons "trainingInstanceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'training-instance-volume-size-in-gb))
      (common-lisp:list
       (common-lisp:cons "trainingInstanceVolumeSizeInGB"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'training-time-out-in-seconds))
      (common-lisp:list
       (common-lisp:cons "trainingTimeOutInSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'volume-encryption-kmskey))
      (common-lisp:list
       (common-lisp:cons "volumeEncryptionKMSKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-mlmodel-training-job-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-mlmodel-training-job-output common-lisp:nil
                       ((arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-start-mlmodel-training-job-output-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (creation-time-in-millis :initarg
                         :creation-time-in-millis :initform common-lisp:nil
                         :type (common-lisp:or long common-lisp:null) :accessor
                         struct-shape-start-mlmodel-training-job-output-creation-time-in-millis
                         :shape "Long" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (id :initarg :id :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-start-mlmodel-training-job-output-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-mlmodel-training-job-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-mlmodel-training-job-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-mlmodel-training-job-output
                    'make-start-mlmodel-training-job-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-mlmodel-training-job-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-mlmodel-training-job-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'creation-time-in-millis))
      (common-lisp:list
       (common-lisp:cons "creationTimeInMillis"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-mlmodel-training-job-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-mlmodel-transform-job-input common-lisp:nil
                       ((base-processing-instance-type :initarg
                         :base-processing-instance-type :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-start-mlmodel-transform-job-input-base-processing-instance-type
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (base-processing-instance-volume-size-in-gb :initarg
                         :base-processing-instance-volume-size-in-gb :initform
                         common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-start-mlmodel-transform-job-input-base-processing-instance-volume-size-in-gb
                         :shape "Integer" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (custom-model-transform-parameters :initarg
                         :custom-model-transform-parameters :initform
                         common-lisp:nil :type
                         (common-lisp:or custom-model-transform-parameters
                                         common-lisp:null)
                         :accessor
                         struct-shape-start-mlmodel-transform-job-input-custom-model-transform-parameters
                         :shape "CustomModelTransformParameters" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (data-processing-job-id :initarg
                         :data-processing-job-id :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-start-mlmodel-transform-job-input-data-processing-job-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (id :initarg :id :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-start-mlmodel-transform-job-input-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (ml-model-training-job-id :initarg
                         :ml-model-training-job-id :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-start-mlmodel-transform-job-input-ml-model-training-job-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (model-transform-output-s3location :initarg
                         :model-transform-output-s3location :initform
                         (common-lisp:error
                          ":modeltransformoutputs3location is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-start-mlmodel-transform-job-input-model-transform-output-s3location
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (neptune-iam-role-arn :initarg :neptune-iam-role-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-start-mlmodel-transform-job-input-neptune-iam-role-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (s3output-encryption-kmskey :initarg
                         :s3output-encryption-kmskey :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-start-mlmodel-transform-job-input-s3output-encryption-kmskey
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (sagemaker-iam-role-arn :initarg
                         :sagemaker-iam-role-arn :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-start-mlmodel-transform-job-input-sagemaker-iam-role-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (security-group-ids :initarg :security-group-ids
                         :initform common-lisp:nil :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor
                         struct-shape-start-mlmodel-transform-job-input-security-group-ids
                         :shape "StringList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (subnets :initarg :subnets :initform common-lisp:nil
                         :type (common-lisp:or string-list common-lisp:null)
                         :accessor
                         struct-shape-start-mlmodel-transform-job-input-subnets
                         :shape "StringList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (training-job-name :initarg :training-job-name
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-start-mlmodel-transform-job-input-training-job-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (volume-encryption-kmskey :initarg
                         :volume-encryption-kmskey :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-start-mlmodel-transform-job-input-volume-encryption-kmskey
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-mlmodel-transform-job-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-mlmodel-transform-job-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-mlmodel-transform-job-input
                    'make-start-mlmodel-transform-job-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-mlmodel-transform-job-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-mlmodel-transform-job-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'base-processing-instance-type))
      (common-lisp:list
       (common-lisp:cons "baseProcessingInstanceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'base-processing-instance-volume-size-in-gb))
      (common-lisp:list
       (common-lisp:cons "baseProcessingInstanceVolumeSizeInGB"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'custom-model-transform-parameters))
      (common-lisp:list
       (common-lisp:cons "customModelTransformParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-processing-job-id))
      (common-lisp:list
       (common-lisp:cons "dataProcessingJobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ml-model-training-job-id))
      (common-lisp:list
       (common-lisp:cons "mlModelTrainingJobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'model-transform-output-s3location))
      (common-lisp:list
       (common-lisp:cons "modelTransformOutputS3Location"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'neptune-iam-role-arn))
      (common-lisp:list
       (common-lisp:cons "neptuneIamRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           's3output-encryption-kmskey))
      (common-lisp:list
       (common-lisp:cons "s3OutputEncryptionKMSKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'sagemaker-iam-role-arn))
      (common-lisp:list
       (common-lisp:cons "sagemakerIamRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-group-ids))
      (common-lisp:list
       (common-lisp:cons "securityGroupIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnets))
      (common-lisp:list
       (common-lisp:cons "subnets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'training-job-name))
      (common-lisp:list
       (common-lisp:cons "trainingJobName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'volume-encryption-kmskey))
      (common-lisp:list
       (common-lisp:cons "volumeEncryptionKMSKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-mlmodel-transform-job-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-mlmodel-transform-job-output common-lisp:nil
                       ((arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-start-mlmodel-transform-job-output-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (creation-time-in-millis :initarg
                         :creation-time-in-millis :initform common-lisp:nil
                         :type (common-lisp:or long common-lisp:null) :accessor
                         struct-shape-start-mlmodel-transform-job-output-creation-time-in-millis
                         :shape "Long" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (id :initarg :id :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-start-mlmodel-transform-job-output-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-mlmodel-transform-job-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-mlmodel-transform-job-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-mlmodel-transform-job-output
                    'make-start-mlmodel-transform-job-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-mlmodel-transform-job-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-mlmodel-transform-job-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'creation-time-in-millis))
      (common-lisp:list
       (common-lisp:cons "creationTimeInMillis"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-mlmodel-transform-job-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass statistics common-lisp:nil
                       ((active :initarg :active :initform common-lisp:nil
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor struct-shape-statistics-active :shape
                         "Boolean" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (auto-compute :initarg :auto-compute :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-statistics-auto-compute :shape "Boolean"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (date :initarg :date :initform common-lisp:nil :type
                         (common-lisp:or synthetic-timestamp-date-time
                                         common-lisp:null)
                         :accessor struct-shape-statistics-date :shape
                         "SyntheticTimestamp_date_time" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (note :initarg :note :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-statistics-note :shape "String" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (signature-info :initarg :signature-info :initform
                         common-lisp:nil :type
                         (common-lisp:or statistics-summary common-lisp:null)
                         :accessor struct-shape-statistics-signature-info
                         :shape "StatisticsSummary" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (statistics-id :initarg :statistics-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-statistics-statistics-id :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-statistics
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'statistics
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'statistics 'make-statistics))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input statistics))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input statistics))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'active))
      (common-lisp:list
       (common-lisp:cons "active"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auto-compute))
      (common-lisp:list
       (common-lisp:cons "autoCompute"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'date))
      (common-lisp:list
       (common-lisp:cons "date"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'note))
      (common-lisp:list
       (common-lisp:cons "note"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'signature-info))
      (common-lisp:list
       (common-lisp:cons "signatureInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'statistics-id))
      (common-lisp:list
       (common-lisp:cons "statisticsId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input statistics))
   common-lisp:nil))
(common-lisp:deftype statistics-auto-generation-mode () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition statistics-not-available-exception
     (neptunedata-error)
     ((code :initarg :code :initform common-lisp:nil :reader
       statistics-not-available-exception-code)
      (detailed-message :initarg :detailed-message :initform common-lisp:nil
       :reader statistics-not-available-exception-detailed-message)
      (request-id :initarg :request-id :initform common-lisp:nil :reader
       statistics-not-available-exception-request-id)))
 (common-lisp:export
  (common-lisp:list 'statistics-not-available-exception
                    'statistics-not-available-exception-code
                    'statistics-not-available-exception-detailed-message
                    'statistics-not-available-exception-request-id)))
(common-lisp:progn
 (common-lisp:defclass statistics-summary common-lisp:nil
                       ((instance-count :initarg :instance-count :initform
                         common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-statistics-summary-instance-count :shape
                         "Integer" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (predicate-count :initarg :predicate-count :initform
                         common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-statistics-summary-predicate-count :shape
                         "Integer" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (signature-count :initarg :signature-count :initform
                         common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-statistics-summary-signature-count :shape
                         "Integer" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-statistics-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'statistics-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'statistics-summary 'make-statistics-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input statistics-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input statistics-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-count))
      (common-lisp:list
       (common-lisp:cons "instanceCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'predicate-count))
      (common-lisp:list
       (common-lisp:cons "predicateCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'signature-count))
      (common-lisp:list
       (common-lisp:cons "signatureCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input statistics-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition stream-records-not-found-exception
     (neptunedata-error)
     ((code :initarg :code :initform common-lisp:nil :reader
       stream-records-not-found-exception-code)
      (detailed-message :initarg :detailed-message :initform common-lisp:nil
       :reader stream-records-not-found-exception-detailed-message)
      (request-id :initarg :request-id :initform common-lisp:nil :reader
       stream-records-not-found-exception-request-id)))
 (common-lisp:export
  (common-lisp:list 'stream-records-not-found-exception
                    'stream-records-not-found-exception-code
                    'stream-records-not-found-exception-detailed-message
                    'stream-records-not-found-exception-request-id)))
(common-lisp:deftype string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype string-list () '(trivial-types:proper-list string))
 (common-lisp:defun make-string-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype string-valued-map () 'common-lisp:hash-table)
 (common-lisp:defun make-string-valued-map
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defclass subject-structure common-lisp:nil
                       ((count :initarg :count :initform common-lisp:nil :type
                         (common-lisp:or long common-lisp:null) :accessor
                         struct-shape-subject-structure-count :shape "Long"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (predicates :initarg :predicates :initform
                         common-lisp:nil :type
                         (common-lisp:or predicates common-lisp:null) :accessor
                         struct-shape-subject-structure-predicates :shape
                         "Predicates" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-subject-structure
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'subject-structure
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'subject-structure 'make-subject-structure))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input subject-structure))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input subject-structure))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'count))
      (common-lisp:list
       (common-lisp:cons "count"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'predicates))
      (common-lisp:list
       (common-lisp:cons "predicates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input subject-structure))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype subject-structures ()
   '(trivial-types:proper-list subject-structure))
 (common-lisp:defun make-subject-structures
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list subject-structure))
   aws-sdk/generator/shape::members))
(common-lisp:deftype synthetic-timestamp-date-time () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition throttling-exception
     (neptunedata-error)
     ((code :initarg :code :initform common-lisp:nil :reader
       throttling-exception-code)
      (detailed-message :initarg :detailed-message :initform common-lisp:nil
       :reader throttling-exception-detailed-message)
      (request-id :initarg :request-id :initform common-lisp:nil :reader
       throttling-exception-request-id)))
 (common-lisp:export
  (common-lisp:list 'throttling-exception 'throttling-exception-code
                    'throttling-exception-detailed-message
                    'throttling-exception-request-id)))
(common-lisp:progn
 (common-lisp:define-condition time-limit-exceeded-exception
     (neptunedata-error)
     ((code :initarg :code :initform common-lisp:nil :reader
       time-limit-exceeded-exception-code)
      (detailed-message :initarg :detailed-message :initform common-lisp:nil
       :reader time-limit-exceeded-exception-detailed-message)
      (request-id :initarg :request-id :initform common-lisp:nil :reader
       time-limit-exceeded-exception-request-id)))
 (common-lisp:export
  (common-lisp:list 'time-limit-exceeded-exception
                    'time-limit-exceeded-exception-code
                    'time-limit-exceeded-exception-detailed-message
                    'time-limit-exceeded-exception-request-id)))
(common-lisp:progn
 (common-lisp:define-condition too-many-requests-exception
     (neptunedata-error)
     ((code :initarg :code :initform common-lisp:nil :reader
       too-many-requests-exception-code)
      (detailed-message :initarg :detailed-message :initform common-lisp:nil
       :reader too-many-requests-exception-detailed-message)
      (request-id :initarg :request-id :initform common-lisp:nil :reader
       too-many-requests-exception-request-id)))
 (common-lisp:export
  (common-lisp:list 'too-many-requests-exception
                    'too-many-requests-exception-code
                    'too-many-requests-exception-detailed-message
                    'too-many-requests-exception-request-id)))
(common-lisp:progn
 (common-lisp:define-condition unsupported-operation-exception
     (neptunedata-error)
     ((code :initarg :code :initform common-lisp:nil :reader
       unsupported-operation-exception-code)
      (detailed-message :initarg :detailed-message :initform common-lisp:nil
       :reader unsupported-operation-exception-detailed-message)
      (request-id :initarg :request-id :initform common-lisp:nil :reader
       unsupported-operation-exception-request-id)))
 (common-lisp:export
  (common-lisp:list 'unsupported-operation-exception
                    'unsupported-operation-exception-code
                    'unsupported-operation-exception-detailed-message
                    'unsupported-operation-exception-request-id)))
(common-lisp:progn
 (common-lisp:defun cancel-gremlin-query
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key query-id)
   (common-lisp:declare (common-lisp:ignorable query-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-cancel-gremlin-query-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'neptunedata-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/gremlin/status/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'query-id))))
                                                        "CancelGremlinQuery"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'cancel-gremlin-query))
(common-lisp:progn
 (common-lisp:defun cancel-loader-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key load-id)
   (common-lisp:declare (common-lisp:ignorable load-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-cancel-loader-job-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'neptunedata-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/loader/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'load-id))))
                                                        "CancelLoaderJob"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'cancel-loader-job))
(common-lisp:progn
 (common-lisp:defun cancel-mldata-processing-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key clean id neptune-iam-role-arn)
   (common-lisp:declare (common-lisp:ignorable clean id neptune-iam-role-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-cancel-mldata-processing-job-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'neptunedata-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/ml/dataprocessing/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "CancelMLDataProcessingJob"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'cancel-mldata-processing-job))
(common-lisp:progn
 (common-lisp:defun cancel-mlmodel-training-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key clean id neptune-iam-role-arn)
   (common-lisp:declare (common-lisp:ignorable clean id neptune-iam-role-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-cancel-mlmodel-training-job-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'neptunedata-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/ml/modeltraining/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "CancelMLModelTrainingJob"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'cancel-mlmodel-training-job))
(common-lisp:progn
 (common-lisp:defun cancel-mlmodel-transform-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key clean id neptune-iam-role-arn)
   (common-lisp:declare (common-lisp:ignorable clean id neptune-iam-role-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-cancel-mlmodel-transform-job-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'neptunedata-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/ml/modeltransform/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "CancelMLModelTransformJob"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'cancel-mlmodel-transform-job))
(common-lisp:progn
 (common-lisp:defun cancel-open-cypher-query
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key query-id silent)
   (common-lisp:declare (common-lisp:ignorable query-id silent))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-cancel-open-cypher-query-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'neptunedata-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/opencypher/status/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'query-id))))
                                                        "CancelOpenCypherQuery"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'cancel-open-cypher-query))
(common-lisp:progn
 (common-lisp:defun create-mlendpoint
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id instance-count instance-type
                     ml-model-training-job-id ml-model-transform-job-id
                     model-name neptune-iam-role-arn update
                     volume-encryption-kmskey)
   (common-lisp:declare
    (common-lisp:ignorable id instance-count instance-type
     ml-model-training-job-id ml-model-transform-job-id model-name
     neptune-iam-role-arn update volume-encryption-kmskey))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-mlendpoint-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'neptunedata-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/ml/endpoints"
                                                        "CreateMLEndpoint"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-mlendpoint))
(common-lisp:progn
 (common-lisp:defun delete-mlendpoint
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key clean id neptune-iam-role-arn)
   (common-lisp:declare (common-lisp:ignorable clean id neptune-iam-role-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-mlendpoint-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'neptunedata-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/ml/endpoints/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "DeleteMLEndpoint"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-mlendpoint))
(common-lisp:progn
 (common-lisp:defun delete-propertygraph-statistics ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'neptunedata-request :method "DELETE" :path
                                "/propertygraph/statistics" :operation
                                "DeletePropertygraphStatistics"))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'delete-propertygraph-statistics))
(common-lisp:progn
 (common-lisp:defun delete-sparql-statistics ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'neptunedata-request :method "DELETE" :path
                                "/sparql/statistics" :operation
                                "DeleteSparqlStatistics"))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'delete-sparql-statistics))
(common-lisp:progn
 (common-lisp:defun execute-fast-reset
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key action token)
   (common-lisp:declare (common-lisp:ignorable action token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-execute-fast-reset-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'neptunedata-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/system"
                                                        "ExecuteFastReset"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'execute-fast-reset))
(common-lisp:progn
 (common-lisp:defun execute-gremlin-explain-query
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key gremlin-query)
   (common-lisp:declare (common-lisp:ignorable gremlin-query))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-execute-gremlin-explain-query-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'neptunedata-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/gremlin/explain"
                                                        "ExecuteGremlinExplainQuery")
       :want-stream common-lisp:t)
      "blob" common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'execute-gremlin-explain-query))
(common-lisp:progn
 (common-lisp:defun execute-gremlin-profile-query
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key chop gremlin-query index-ops results
                     serializer)
   (common-lisp:declare
    (common-lisp:ignorable chop gremlin-query index-ops results serializer))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-execute-gremlin-profile-query-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'neptunedata-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/gremlin/profile"
                                                        "ExecuteGremlinProfileQuery")
       :want-stream common-lisp:t)
      "blob" common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'execute-gremlin-profile-query))
(common-lisp:progn
 (common-lisp:defun execute-gremlin-query
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key gremlin-query serializer)
   (common-lisp:declare (common-lisp:ignorable gremlin-query serializer))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-execute-gremlin-query-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'neptunedata-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/gremlin"
                                                        "ExecuteGremlinQuery"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'execute-gremlin-query))
(common-lisp:progn
 (common-lisp:defun execute-open-cypher-explain-query
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key explain-mode open-cypher-query
                     parameters)
   (common-lisp:declare
    (common-lisp:ignorable explain-mode open-cypher-query parameters))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-execute-open-cypher-explain-query-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'neptunedata-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/opencypher/explain"
                                                        "ExecuteOpenCypherExplainQuery")
       :want-stream common-lisp:t)
      "blob" common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'execute-open-cypher-explain-query))
(common-lisp:progn
 (common-lisp:defun get-engine-status ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'neptunedata-request :method "GET" :path
                                "/status" :operation "GetEngineStatus"))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'get-engine-status))
(common-lisp:progn
 (common-lisp:defun get-gremlin-query-status
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key query-id)
   (common-lisp:declare (common-lisp:ignorable query-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-gremlin-query-status-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'neptunedata-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/gremlin/status/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'query-id))))
                                                        "GetGremlinQueryStatus"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-gremlin-query-status))
(common-lisp:progn
 (common-lisp:defun get-mldata-processing-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id neptune-iam-role-arn)
   (common-lisp:declare (common-lisp:ignorable id neptune-iam-role-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-mldata-processing-job-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'neptunedata-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/ml/dataprocessing/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "GetMLDataProcessingJob"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-mldata-processing-job))
(common-lisp:progn
 (common-lisp:defun get-mlendpoint
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id neptune-iam-role-arn)
   (common-lisp:declare (common-lisp:ignorable id neptune-iam-role-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-mlendpoint-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'neptunedata-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/ml/endpoints/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "GetMLEndpoint"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-mlendpoint))
(common-lisp:progn
 (common-lisp:defun get-mlmodel-training-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id neptune-iam-role-arn)
   (common-lisp:declare (common-lisp:ignorable id neptune-iam-role-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-mlmodel-training-job-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'neptunedata-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/ml/modeltraining/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "GetMLModelTrainingJob"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-mlmodel-training-job))
(common-lisp:progn
 (common-lisp:defun get-mlmodel-transform-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id neptune-iam-role-arn)
   (common-lisp:declare (common-lisp:ignorable id neptune-iam-role-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-mlmodel-transform-job-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'neptunedata-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/ml/modeltransform/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "GetMLModelTransformJob"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-mlmodel-transform-job))
(common-lisp:progn
 (common-lisp:defun get-open-cypher-query-status
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key query-id)
   (common-lisp:declare (common-lisp:ignorable query-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-open-cypher-query-status-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'neptunedata-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/opencypher/status/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'query-id))))
                                                        "GetOpenCypherQueryStatus"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-open-cypher-query-status))
(common-lisp:progn
 (common-lisp:defun get-propertygraph-statistics ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'neptunedata-request :method "GET" :path
                                "/propertygraph/statistics" :operation
                                "GetPropertygraphStatistics"))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'get-propertygraph-statistics))
(common-lisp:progn
 (common-lisp:defun get-propertygraph-summary
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key mode)
   (common-lisp:declare (common-lisp:ignorable mode))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-propertygraph-summary-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'neptunedata-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        "/propertygraph/statistics/summary"
                                                        "GetPropertygraphSummary"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-propertygraph-summary))
(common-lisp:progn
 (common-lisp:defun get-rdfgraph-summary
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key mode)
   (common-lisp:declare (common-lisp:ignorable mode))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-rdfgraph-summary-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'neptunedata-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        "/rdf/statistics/summary"
                                                        "GetRDFGraphSummary"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-rdfgraph-summary))
(common-lisp:progn
 (common-lisp:defun get-sparql-statistics ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'neptunedata-request :method "GET" :path
                                "/sparql/statistics" :operation
                                "GetSparqlStatistics"))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'get-sparql-statistics))
(common-lisp:progn
 (common-lisp:defun get-sparql-stream
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key commit-num encoding iterator-type limit
                     op-num)
   (common-lisp:declare
    (common-lisp:ignorable commit-num encoding iterator-type limit op-num))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-sparql-stream-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'neptunedata-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" "/sparql/stream"
                                                        "GetSparqlStream"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-sparql-stream))
(common-lisp:progn
 (common-lisp:defun list-gremlin-queries
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key include-waiting)
   (common-lisp:declare (common-lisp:ignorable include-waiting))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-gremlin-queries-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'neptunedata-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" "/gremlin/status"
                                                        "ListGremlinQueries"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-gremlin-queries))
(common-lisp:progn
 (common-lisp:defun list-loader-jobs
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key include-queued-loads limit)
   (common-lisp:declare (common-lisp:ignorable include-queued-loads limit))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-loader-jobs-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'neptunedata-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" "/loader"
                                                        "ListLoaderJobs"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-loader-jobs))
(common-lisp:progn
 (common-lisp:defun list-mldata-processing-jobs
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-items neptune-iam-role-arn)
   (common-lisp:declare (common-lisp:ignorable max-items neptune-iam-role-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-mldata-processing-jobs-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'neptunedata-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        "/ml/dataprocessing"
                                                        "ListMLDataProcessingJobs"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-mldata-processing-jobs))
(common-lisp:progn
 (common-lisp:defun list-mlendpoints
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-items neptune-iam-role-arn)
   (common-lisp:declare (common-lisp:ignorable max-items neptune-iam-role-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-mlendpoints-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'neptunedata-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" "/ml/endpoints"
                                                        "ListMLEndpoints"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-mlendpoints))
(common-lisp:progn
 (common-lisp:defun list-mlmodel-training-jobs
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-items neptune-iam-role-arn)
   (common-lisp:declare (common-lisp:ignorable max-items neptune-iam-role-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-mlmodel-training-jobs-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'neptunedata-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        "/ml/modeltraining"
                                                        "ListMLModelTrainingJobs"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-mlmodel-training-jobs))
(common-lisp:progn
 (common-lisp:defun list-mlmodel-transform-jobs
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-items neptune-iam-role-arn)
   (common-lisp:declare (common-lisp:ignorable max-items neptune-iam-role-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-mlmodel-transform-jobs-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'neptunedata-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        "/ml/modeltransform"
                                                        "ListMLModelTransformJobs"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-mlmodel-transform-jobs))
(common-lisp:progn
 (common-lisp:defun list-open-cypher-queries
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key include-waiting)
   (common-lisp:declare (common-lisp:ignorable include-waiting))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-open-cypher-queries-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'neptunedata-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        "/opencypher/status"
                                                        "ListOpenCypherQueries"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-open-cypher-queries))
(common-lisp:progn
 (common-lisp:defun manage-propertygraph-statistics
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key mode)
   (common-lisp:declare (common-lisp:ignorable mode))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-manage-propertygraph-statistics-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'neptunedata-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/propertygraph/statistics"
                                                        "ManagePropertygraphStatistics"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'manage-propertygraph-statistics))
(common-lisp:progn
 (common-lisp:defun manage-sparql-statistics
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key mode)
   (common-lisp:declare (common-lisp:ignorable mode))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-manage-sparql-statistics-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'neptunedata-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/sparql/statistics"
                                                        "ManageSparqlStatistics"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'manage-sparql-statistics))
(common-lisp:progn
 (common-lisp:defun start-loader-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dependencies fail-on-error format
                     iam-role-arn mode parallelism parser-configuration
                     queue-request s3bucket-region source
                     update-single-cardinality-properties
                     user-provided-edge-ids)
   (common-lisp:declare
    (common-lisp:ignorable dependencies fail-on-error format iam-role-arn mode
     parallelism parser-configuration queue-request s3bucket-region source
     update-single-cardinality-properties user-provided-edge-ids))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-start-loader-job-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'neptunedata-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/loader"
                                                        "StartLoaderJob"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'start-loader-job))
(common-lisp:progn
 (common-lisp:defun start-mldata-processing-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key config-file-name id input-data-s3location
                     model-type neptune-iam-role-arn
                     previous-data-processing-job-id processed-data-s3location
                     processing-instance-type
                     processing-instance-volume-size-in-gb
                     processing-time-out-in-seconds s3output-encryption-kmskey
                     sagemaker-iam-role-arn security-group-ids subnets
                     volume-encryption-kmskey)
   (common-lisp:declare
    (common-lisp:ignorable config-file-name id input-data-s3location model-type
     neptune-iam-role-arn previous-data-processing-job-id
     processed-data-s3location processing-instance-type
     processing-instance-volume-size-in-gb processing-time-out-in-seconds
     s3output-encryption-kmskey sagemaker-iam-role-arn security-group-ids
     subnets volume-encryption-kmskey))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-start-mldata-processing-job-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'neptunedata-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/ml/dataprocessing"
                                                        "StartMLDataProcessingJob"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'start-mldata-processing-job))
(common-lisp:progn
 (common-lisp:defun start-mlmodel-training-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key base-processing-instance-type
                     custom-model-training-parameters data-processing-job-id
                     enable-managed-spot-training id
                     max-hponumber-of-training-jobs
                     max-hpoparallel-training-jobs neptune-iam-role-arn
                     previous-model-training-job-id s3output-encryption-kmskey
                     sagemaker-iam-role-arn security-group-ids subnets
                     train-model-s3location training-instance-type
                     training-instance-volume-size-in-gb
                     training-time-out-in-seconds volume-encryption-kmskey)
   (common-lisp:declare
    (common-lisp:ignorable base-processing-instance-type
     custom-model-training-parameters data-processing-job-id
     enable-managed-spot-training id max-hponumber-of-training-jobs
     max-hpoparallel-training-jobs neptune-iam-role-arn
     previous-model-training-job-id s3output-encryption-kmskey
     sagemaker-iam-role-arn security-group-ids subnets train-model-s3location
     training-instance-type training-instance-volume-size-in-gb
     training-time-out-in-seconds volume-encryption-kmskey))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-start-mlmodel-training-job-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'neptunedata-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/ml/modeltraining"
                                                        "StartMLModelTrainingJob"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'start-mlmodel-training-job))
(common-lisp:progn
 (common-lisp:defun start-mlmodel-transform-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key base-processing-instance-type
                     base-processing-instance-volume-size-in-gb
                     custom-model-transform-parameters data-processing-job-id
                     id ml-model-training-job-id
                     model-transform-output-s3location neptune-iam-role-arn
                     s3output-encryption-kmskey sagemaker-iam-role-arn
                     security-group-ids subnets training-job-name
                     volume-encryption-kmskey)
   (common-lisp:declare
    (common-lisp:ignorable base-processing-instance-type
     base-processing-instance-volume-size-in-gb
     custom-model-transform-parameters data-processing-job-id id
     ml-model-training-job-id model-transform-output-s3location
     neptune-iam-role-arn s3output-encryption-kmskey sagemaker-iam-role-arn
     security-group-ids subnets training-job-name volume-encryption-kmskey))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-start-mlmodel-transform-job-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'neptunedata-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/ml/modeltransform"
                                                        "StartMLModelTransformJob"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'start-mlmodel-transform-job))
