;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/grafana/api
  (:use)
  (:nicknames #:aws/grafana)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/json-request)
  (:import-from #:aws-sdk/rest-json-request)
  (:import-from #:aws-sdk/rest-xml-request)
  (:import-from #:aws-sdk/query-request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/grafana/api)
(common-lisp:progn
 (common-lisp:define-condition grafana-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'grafana-error))
(common-lisp:progn
 (common-lisp:defclass grafana-request
                       (aws-sdk/generator/service::rest-json-request)
                       common-lisp:nil
                       (:default-initargs :service "grafana" :api-version
                        "2020-08-18" :host-prefix "grafana" :signing-name
                        "grafana" :global-host common-lisp:nil))
 (common-lisp:export 'grafana-request))
(common-lisp:defvar *error-map*
  '(("AccessDeniedException" . access-denied-exception)
    ("ConflictException" . conflict-exception)
    ("InternalServerException" . internal-server-exception)
    ("ResourceNotFoundException" . resource-not-found-exception)
    ("ServiceQuotaExceededException" . service-quota-exceeded-exception)
    ("ThrottlingException" . throttling-exception)
    ("ValidationException" . validation-exception)))
(common-lisp:progn
 (common-lisp:define-condition access-denied-exception
     (grafana-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       access-denied-exception-message)))
 (common-lisp:export
  (common-lisp:list 'access-denied-exception 'access-denied-exception-message)))
(common-lisp:deftype account-access-type () 'common-lisp:string)
(common-lisp:deftype allowed-organization () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype allowed-organizations ()
   '(trivial-types:proper-list allowed-organization))
 (common-lisp:defun make-allowed-organizations
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list allowed-organization))
   aws-sdk/generator/shape::members))
(common-lisp:deftype api-key-name () 'common-lisp:string)
(common-lisp:deftype api-key-token () 'common-lisp:string)
(common-lisp:deftype assertion-attribute () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass assertion-attributes common-lisp:nil
                       ((email :initarg :email :initform common-lisp:nil :type
                         (common-lisp:or assertion-attribute common-lisp:null)
                         :accessor struct-shape-assertion-attributes-email
                         :shape "AssertionAttribute" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (groups :initarg :groups :initform common-lisp:nil
                         :type
                         (common-lisp:or assertion-attribute common-lisp:null)
                         :accessor struct-shape-assertion-attributes-groups
                         :shape "AssertionAttribute" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (login :initarg :login :initform common-lisp:nil :type
                         (common-lisp:or assertion-attribute common-lisp:null)
                         :accessor struct-shape-assertion-attributes-login
                         :shape "AssertionAttribute" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or assertion-attribute common-lisp:null)
                         :accessor struct-shape-assertion-attributes-name
                         :shape "AssertionAttribute" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (org :initarg :org :initform common-lisp:nil :type
                         (common-lisp:or assertion-attribute common-lisp:null)
                         :accessor struct-shape-assertion-attributes-org :shape
                         "AssertionAttribute" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (role :initarg :role :initform common-lisp:nil :type
                         (common-lisp:or assertion-attribute common-lisp:null)
                         :accessor struct-shape-assertion-attributes-role
                         :shape "AssertionAttribute" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-assertion-attributes
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'assertion-attributes
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'assertion-attributes 'make-assertion-attributes))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input assertion-attributes))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input assertion-attributes))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'email))
      (common-lisp:list
       (common-lisp:cons "email"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'groups))
      (common-lisp:list
       (common-lisp:cons "groups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'login))
      (common-lisp:list
       (common-lisp:cons "login"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'org))
      (common-lisp:list
       (common-lisp:cons "org"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role))
      (common-lisp:list
       (common-lisp:cons "role"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input assertion-attributes))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass associate-license-request common-lisp:nil
                       ((grafana-token :initarg :grafana-token :initform
                         common-lisp:nil :type
                         (common-lisp:or grafana-token common-lisp:null)
                         :accessor
                         struct-shape-associate-license-request-grafana-token
                         :shape "GrafanaToken" :location "header"
                         :location-name "Grafana-Token")
                        (license-type :initarg :license-type :initform
                         (common-lisp:error ":licensetype is required") :type
                         (common-lisp:or license-type common-lisp:null)
                         :accessor
                         struct-shape-associate-license-request-license-type
                         :shape "LicenseType" :location "uri" :location-name
                         "licenseType")
                        (workspace-id :initarg :workspace-id :initform
                         (common-lisp:error ":workspaceid is required") :type
                         (common-lisp:or workspace-id common-lisp:null)
                         :accessor
                         struct-shape-associate-license-request-workspace-id
                         :shape "WorkspaceId" :location "uri" :location-name
                         "workspaceId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-associate-license-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'associate-license-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'associate-license-request
                    'make-associate-license-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-license-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grafana-token))
      (common-lisp:cons "Grafana-Token" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-license-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-license-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass associate-license-response common-lisp:nil
                       ((workspace :initarg :workspace :initform
                         (common-lisp:error ":workspace is required") :type
                         (common-lisp:or workspace-description
                                         common-lisp:null)
                         :accessor
                         struct-shape-associate-license-response-workspace
                         :shape "WorkspaceDescription" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-associate-license-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'associate-license-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'associate-license-response
                    'make-associate-license-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-license-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-license-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workspace))
      (common-lisp:list
       (common-lisp:cons "workspace"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-license-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass authentication-description common-lisp:nil
                       ((aws-sso :initarg :aws-sso :initform common-lisp:nil
                         :type
                         (common-lisp:or aws-sso-authentication
                                         common-lisp:null)
                         :accessor
                         struct-shape-authentication-description-aws-sso :shape
                         "AwsSsoAuthentication" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (providers :initarg :providers :initform
                         (common-lisp:error ":providers is required") :type
                         (common-lisp:or authentication-providers
                                         common-lisp:null)
                         :accessor
                         struct-shape-authentication-description-providers
                         :shape "AuthenticationProviders" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (saml :initarg :saml :initform common-lisp:nil :type
                         (common-lisp:or saml-authentication common-lisp:null)
                         :accessor struct-shape-authentication-description-saml
                         :shape "SamlAuthentication" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-authentication-description
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'authentication-description
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'authentication-description
                    'make-authentication-description))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          authentication-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          authentication-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-sso))
      (common-lisp:list
       (common-lisp:cons "awsSso"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'providers))
      (common-lisp:list
       (common-lisp:cons "providers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'saml))
      (common-lisp:list
       (common-lisp:cons "saml"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          authentication-description))
   common-lisp:nil))
(common-lisp:deftype authentication-provider-types () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype authentication-providers ()
   '(trivial-types:proper-list authentication-provider-types))
 (common-lisp:defun make-authentication-providers
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            authentication-provider-types))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass authentication-summary common-lisp:nil
                       ((providers :initarg :providers :initform
                         (common-lisp:error ":providers is required") :type
                         (common-lisp:or authentication-providers
                                         common-lisp:null)
                         :accessor
                         struct-shape-authentication-summary-providers :shape
                         "AuthenticationProviders" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (saml-configuration-status :initarg
                         :saml-configuration-status :initform common-lisp:nil
                         :type
                         (common-lisp:or saml-configuration-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-authentication-summary-saml-configuration-status
                         :shape "SamlConfigurationStatus" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-authentication-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'authentication-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'authentication-summary 'make-authentication-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          authentication-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          authentication-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'providers))
      (common-lisp:list
       (common-lisp:cons "providers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'saml-configuration-status))
      (common-lisp:list
       (common-lisp:cons "samlConfigurationStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          authentication-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aws-sso-authentication common-lisp:nil
                       ((sso-client-id :initarg :sso-client-id :initform
                         common-lisp:nil :type
                         (common-lisp:or ssoclient-id common-lisp:null)
                         :accessor
                         struct-shape-aws-sso-authentication-sso-client-id
                         :shape "SSOClientId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-aws-sso-authentication
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'aws-sso-authentication
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'aws-sso-authentication 'make-aws-sso-authentication))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-sso-authentication))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-sso-authentication))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sso-client-id))
      (common-lisp:list
       (common-lisp:cons "ssoClientId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-sso-authentication))
   common-lisp:nil))
(common-lisp:deftype boolean () 'common-lisp:boolean)
(common-lisp:deftype client-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition conflict-exception
     (grafana-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       conflict-exception-message)
      (resource-id :initarg :resource-id :initform common-lisp:nil :reader
       conflict-exception-resource-id)
      (resource-type :initarg :resource-type :initform common-lisp:nil :reader
       conflict-exception-resource-type)))
 (common-lisp:export
  (common-lisp:list 'conflict-exception 'conflict-exception-message
                    'conflict-exception-resource-id
                    'conflict-exception-resource-type)))
(common-lisp:progn
 (common-lisp:defclass create-workspace-api-key-request common-lisp:nil
                       ((key-name :initarg :key-name :initform
                         (common-lisp:error ":keyname is required") :type
                         (common-lisp:or api-key-name common-lisp:null)
                         :accessor
                         struct-shape-create-workspace-api-key-request-key-name
                         :shape "ApiKeyName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (key-role :initarg :key-role :initform
                         (common-lisp:error ":keyrole is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-workspace-api-key-request-key-role
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (seconds-to-live :initarg :seconds-to-live :initform
                         (common-lisp:error ":secondstolive is required") :type
                         (common-lisp:or
                          create-workspace-api-key-request-seconds-to-live-integer
                          common-lisp:null)
                         :accessor
                         struct-shape-create-workspace-api-key-request-seconds-to-live
                         :shape
                         "CreateWorkspaceApiKeyRequestSecondsToLiveInteger"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (workspace-id :initarg :workspace-id :initform
                         (common-lisp:error ":workspaceid is required") :type
                         (common-lisp:or workspace-id common-lisp:null)
                         :accessor
                         struct-shape-create-workspace-api-key-request-workspace-id
                         :shape "WorkspaceId" :location "uri" :location-name
                         "workspaceId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-workspace-api-key-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-workspace-api-key-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-workspace-api-key-request
                    'make-create-workspace-api-key-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-workspace-api-key-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-workspace-api-key-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-name))
      (common-lisp:list
       (common-lisp:cons "keyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-role))
      (common-lisp:list
       (common-lisp:cons "keyRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'seconds-to-live))
      (common-lisp:list
       (common-lisp:cons "secondsToLive"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-workspace-api-key-request))
   common-lisp:nil))
(common-lisp:deftype create-workspace-api-key-request-seconds-to-live-integer
                     ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass create-workspace-api-key-response common-lisp:nil
                       ((key :initarg :key :initform
                         (common-lisp:error ":key is required") :type
                         (common-lisp:or api-key-token common-lisp:null)
                         :accessor
                         struct-shape-create-workspace-api-key-response-key
                         :shape "ApiKeyToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (key-name :initarg :key-name :initform
                         (common-lisp:error ":keyname is required") :type
                         (common-lisp:or api-key-name common-lisp:null)
                         :accessor
                         struct-shape-create-workspace-api-key-response-key-name
                         :shape "ApiKeyName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (workspace-id :initarg :workspace-id :initform
                         (common-lisp:error ":workspaceid is required") :type
                         (common-lisp:or workspace-id common-lisp:null)
                         :accessor
                         struct-shape-create-workspace-api-key-response-workspace-id
                         :shape "WorkspaceId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-workspace-api-key-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-workspace-api-key-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-workspace-api-key-response
                    'make-create-workspace-api-key-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-workspace-api-key-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-workspace-api-key-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-name))
      (common-lisp:list
       (common-lisp:cons "keyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workspace-id))
      (common-lisp:list
       (common-lisp:cons "workspaceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-workspace-api-key-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-workspace-request common-lisp:nil
                       ((account-access-type :initarg :account-access-type
                         :initform
                         (common-lisp:error ":accountaccesstype is required")
                         :type
                         (common-lisp:or account-access-type common-lisp:null)
                         :accessor
                         struct-shape-create-workspace-request-account-access-type
                         :shape "AccountAccessType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (authentication-providers :initarg
                         :authentication-providers :initform
                         (common-lisp:error
                          ":authenticationproviders is required")
                         :type
                         (common-lisp:or authentication-providers
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-workspace-request-authentication-providers
                         :shape "AuthenticationProviders" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor
                         struct-shape-create-workspace-request-client-token
                         :shape "ClientToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (configuration :initarg :configuration :initform
                         common-lisp:nil :type
                         (common-lisp:or overridable-configuration-json
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-workspace-request-configuration
                         :shape "OverridableConfigurationJson" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (grafana-version :initarg :grafana-version :initform
                         common-lisp:nil :type
                         (common-lisp:or grafana-version common-lisp:null)
                         :accessor
                         struct-shape-create-workspace-request-grafana-version
                         :shape "GrafanaVersion" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (network-access-control :initarg
                         :network-access-control :initform common-lisp:nil
                         :type
                         (common-lisp:or network-access-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-workspace-request-network-access-control
                         :shape "NetworkAccessConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (organization-role-name :initarg
                         :organization-role-name :initform common-lisp:nil
                         :type
                         (common-lisp:or organization-role-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-workspace-request-organization-role-name
                         :shape "OrganizationRoleName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (permission-type :initarg :permission-type :initform
                         (common-lisp:error ":permissiontype is required")
                         :type
                         (common-lisp:or permission-type common-lisp:null)
                         :accessor
                         struct-shape-create-workspace-request-permission-type
                         :shape "PermissionType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (stack-set-name :initarg :stack-set-name :initform
                         common-lisp:nil :type
                         (common-lisp:or stack-set-name common-lisp:null)
                         :accessor
                         struct-shape-create-workspace-request-stack-set-name
                         :shape "StackSetName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         struct-shape-create-workspace-request-tags :shape
                         "TagMap" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (vpc-configuration :initarg :vpc-configuration
                         :initform common-lisp:nil :type
                         (common-lisp:or vpc-configuration common-lisp:null)
                         :accessor
                         struct-shape-create-workspace-request-vpc-configuration
                         :shape "VpcConfiguration" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (workspace-data-sources :initarg
                         :workspace-data-sources :initform common-lisp:nil
                         :type
                         (common-lisp:or data-source-types-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-workspace-request-workspace-data-sources
                         :shape "DataSourceTypesList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (workspace-description :initarg :workspace-description
                         :initform common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor
                         struct-shape-create-workspace-request-workspace-description
                         :shape "Description" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (workspace-name :initarg :workspace-name :initform
                         common-lisp:nil :type
                         (common-lisp:or workspace-name common-lisp:null)
                         :accessor
                         struct-shape-create-workspace-request-workspace-name
                         :shape "WorkspaceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (workspace-notification-destinations :initarg
                         :workspace-notification-destinations :initform
                         common-lisp:nil :type
                         (common-lisp:or notification-destinations-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-workspace-request-workspace-notification-destinations
                         :shape "NotificationDestinationsList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (workspace-organizational-units :initarg
                         :workspace-organizational-units :initform
                         common-lisp:nil :type
                         (common-lisp:or organizational-unit-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-workspace-request-workspace-organizational-units
                         :shape "OrganizationalUnitList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (workspace-role-arn :initarg :workspace-role-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or iam-role-arn common-lisp:null)
                         :accessor
                         struct-shape-create-workspace-request-workspace-role-arn
                         :shape "IamRoleArn" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-workspace-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-workspace-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-workspace-request 'make-create-workspace-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-workspace-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-workspace-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-access-type))
      (common-lisp:list
       (common-lisp:cons "accountAccessType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'authentication-providers))
      (common-lisp:list
       (common-lisp:cons "authenticationProviders"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration))
      (common-lisp:list
       (common-lisp:cons "configuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grafana-version))
      (common-lisp:list
       (common-lisp:cons "grafanaVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'network-access-control))
      (common-lisp:list
       (common-lisp:cons "networkAccessControl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'organization-role-name))
      (common-lisp:list
       (common-lisp:cons "organizationRoleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'permission-type))
      (common-lisp:list
       (common-lisp:cons "permissionType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-set-name))
      (common-lisp:list
       (common-lisp:cons "stackSetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-configuration))
      (common-lisp:list
       (common-lisp:cons "vpcConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'workspace-data-sources))
      (common-lisp:list
       (common-lisp:cons "workspaceDataSources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'workspace-description))
      (common-lisp:list
       (common-lisp:cons "workspaceDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workspace-name))
      (common-lisp:list
       (common-lisp:cons "workspaceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'workspace-notification-destinations))
      (common-lisp:list
       (common-lisp:cons "workspaceNotificationDestinations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'workspace-organizational-units))
      (common-lisp:list
       (common-lisp:cons "workspaceOrganizationalUnits"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workspace-role-arn))
      (common-lisp:list
       (common-lisp:cons "workspaceRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-workspace-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-workspace-response common-lisp:nil
                       ((workspace :initarg :workspace :initform
                         (common-lisp:error ":workspace is required") :type
                         (common-lisp:or workspace-description
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-workspace-response-workspace
                         :shape "WorkspaceDescription" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-workspace-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-workspace-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-workspace-response
                    'make-create-workspace-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-workspace-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-workspace-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workspace))
      (common-lisp:list
       (common-lisp:cons "workspace"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-workspace-response))
   common-lisp:nil))
(common-lisp:deftype data-source-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype data-source-types-list ()
   '(trivial-types:proper-list data-source-type))
 (common-lisp:defun make-data-source-types-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list data-source-type))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass delete-workspace-api-key-request common-lisp:nil
                       ((key-name :initarg :key-name :initform
                         (common-lisp:error ":keyname is required") :type
                         (common-lisp:or api-key-name common-lisp:null)
                         :accessor
                         struct-shape-delete-workspace-api-key-request-key-name
                         :shape "ApiKeyName" :location "uri" :location-name
                         "keyName")
                        (workspace-id :initarg :workspace-id :initform
                         (common-lisp:error ":workspaceid is required") :type
                         (common-lisp:or workspace-id common-lisp:null)
                         :accessor
                         struct-shape-delete-workspace-api-key-request-workspace-id
                         :shape "WorkspaceId" :location "uri" :location-name
                         "workspaceId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-workspace-api-key-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-workspace-api-key-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-workspace-api-key-request
                    'make-delete-workspace-api-key-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-workspace-api-key-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-workspace-api-key-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-workspace-api-key-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-workspace-api-key-response common-lisp:nil
                       ((key-name :initarg :key-name :initform
                         (common-lisp:error ":keyname is required") :type
                         (common-lisp:or api-key-name common-lisp:null)
                         :accessor
                         struct-shape-delete-workspace-api-key-response-key-name
                         :shape "ApiKeyName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (workspace-id :initarg :workspace-id :initform
                         (common-lisp:error ":workspaceid is required") :type
                         (common-lisp:or workspace-id common-lisp:null)
                         :accessor
                         struct-shape-delete-workspace-api-key-response-workspace-id
                         :shape "WorkspaceId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-workspace-api-key-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-workspace-api-key-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-workspace-api-key-response
                    'make-delete-workspace-api-key-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-workspace-api-key-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-workspace-api-key-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-name))
      (common-lisp:list
       (common-lisp:cons "keyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workspace-id))
      (common-lisp:list
       (common-lisp:cons "workspaceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-workspace-api-key-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-workspace-request common-lisp:nil
                       ((workspace-id :initarg :workspace-id :initform
                         (common-lisp:error ":workspaceid is required") :type
                         (common-lisp:or workspace-id common-lisp:null)
                         :accessor
                         struct-shape-delete-workspace-request-workspace-id
                         :shape "WorkspaceId" :location "uri" :location-name
                         "workspaceId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-workspace-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-workspace-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-workspace-request 'make-delete-workspace-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-workspace-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-workspace-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-workspace-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-workspace-response common-lisp:nil
                       ((workspace :initarg :workspace :initform
                         (common-lisp:error ":workspace is required") :type
                         (common-lisp:or workspace-description
                                         common-lisp:null)
                         :accessor
                         struct-shape-delete-workspace-response-workspace
                         :shape "WorkspaceDescription" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-workspace-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-workspace-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-workspace-response
                    'make-delete-workspace-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-workspace-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-workspace-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workspace))
      (common-lisp:list
       (common-lisp:cons "workspace"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-workspace-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-workspace-authentication-request
                       common-lisp:nil
                       ((workspace-id :initarg :workspace-id :initform
                         (common-lisp:error ":workspaceid is required") :type
                         (common-lisp:or workspace-id common-lisp:null)
                         :accessor
                         struct-shape-describe-workspace-authentication-request-workspace-id
                         :shape "WorkspaceId" :location "uri" :location-name
                         "workspaceId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-workspace-authentication-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-workspace-authentication-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-workspace-authentication-request
                    'make-describe-workspace-authentication-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-workspace-authentication-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-workspace-authentication-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-workspace-authentication-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-workspace-authentication-response
                       common-lisp:nil
                       ((authentication :initarg :authentication :initform
                         (common-lisp:error ":authentication is required")
                         :type
                         (common-lisp:or authentication-description
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-workspace-authentication-response-authentication
                         :shape "AuthenticationDescription" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-workspace-authentication-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-workspace-authentication-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-workspace-authentication-response
                    'make-describe-workspace-authentication-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-workspace-authentication-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-workspace-authentication-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'authentication))
      (common-lisp:list
       (common-lisp:cons "authentication"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-workspace-authentication-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-workspace-configuration-request common-lisp:nil
                       ((workspace-id :initarg :workspace-id :initform
                         (common-lisp:error ":workspaceid is required") :type
                         (common-lisp:or workspace-id common-lisp:null)
                         :accessor
                         struct-shape-describe-workspace-configuration-request-workspace-id
                         :shape "WorkspaceId" :location "uri" :location-name
                         "workspaceId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-workspace-configuration-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-workspace-configuration-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-workspace-configuration-request
                    'make-describe-workspace-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-workspace-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-workspace-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-workspace-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-workspace-configuration-response
                       common-lisp:nil
                       ((configuration :initarg :configuration :initform
                         (common-lisp:error ":configuration is required") :type
                         (common-lisp:or overridable-configuration-json
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-workspace-configuration-response-configuration
                         :shape "OverridableConfigurationJson" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (grafana-version :initarg :grafana-version :initform
                         common-lisp:nil :type
                         (common-lisp:or grafana-version common-lisp:null)
                         :accessor
                         struct-shape-describe-workspace-configuration-response-grafana-version
                         :shape "GrafanaVersion" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-workspace-configuration-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-workspace-configuration-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-workspace-configuration-response
                    'make-describe-workspace-configuration-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-workspace-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-workspace-configuration-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration))
      (common-lisp:list
       (common-lisp:cons "configuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grafana-version))
      (common-lisp:list
       (common-lisp:cons "grafanaVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-workspace-configuration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-workspace-request common-lisp:nil
                       ((workspace-id :initarg :workspace-id :initform
                         (common-lisp:error ":workspaceid is required") :type
                         (common-lisp:or workspace-id common-lisp:null)
                         :accessor
                         struct-shape-describe-workspace-request-workspace-id
                         :shape "WorkspaceId" :location "uri" :location-name
                         "workspaceId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-workspace-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-workspace-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-workspace-request
                    'make-describe-workspace-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-workspace-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-workspace-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-workspace-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-workspace-response common-lisp:nil
                       ((workspace :initarg :workspace :initform
                         (common-lisp:error ":workspace is required") :type
                         (common-lisp:or workspace-description
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-workspace-response-workspace
                         :shape "WorkspaceDescription" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-workspace-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-workspace-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-workspace-response
                    'make-describe-workspace-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-workspace-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-workspace-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workspace))
      (common-lisp:list
       (common-lisp:cons "workspace"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-workspace-response))
   common-lisp:nil))
(common-lisp:deftype description () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass disassociate-license-request common-lisp:nil
                       ((license-type :initarg :license-type :initform
                         (common-lisp:error ":licensetype is required") :type
                         (common-lisp:or license-type common-lisp:null)
                         :accessor
                         struct-shape-disassociate-license-request-license-type
                         :shape "LicenseType" :location "uri" :location-name
                         "licenseType")
                        (workspace-id :initarg :workspace-id :initform
                         (common-lisp:error ":workspaceid is required") :type
                         (common-lisp:or workspace-id common-lisp:null)
                         :accessor
                         struct-shape-disassociate-license-request-workspace-id
                         :shape "WorkspaceId" :location "uri" :location-name
                         "workspaceId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-disassociate-license-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'disassociate-license-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'disassociate-license-request
                    'make-disassociate-license-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-license-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-license-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-license-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass disassociate-license-response common-lisp:nil
                       ((workspace :initarg :workspace :initform
                         (common-lisp:error ":workspace is required") :type
                         (common-lisp:or workspace-description
                                         common-lisp:null)
                         :accessor
                         struct-shape-disassociate-license-response-workspace
                         :shape "WorkspaceDescription" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-disassociate-license-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'disassociate-license-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'disassociate-license-response
                    'make-disassociate-license-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-license-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-license-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workspace))
      (common-lisp:list
       (common-lisp:cons "workspace"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-license-response))
   common-lisp:nil))
(common-lisp:deftype endpoint () 'common-lisp:string)
(common-lisp:deftype grafana-token () 'common-lisp:string)
(common-lisp:deftype grafana-version () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype grafana-version-list ()
   '(trivial-types:proper-list grafana-version))
 (common-lisp:defun make-grafana-version-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list grafana-version))
   aws-sdk/generator/shape::members))
(common-lisp:deftype iam-role-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass idp-metadata common-lisp:nil
                       ((url :initarg :url :initform common-lisp:nil :type
                         (common-lisp:or idp-metadata-url common-lisp:null)
                         :accessor struct-shape-idp-metadata-url :shape
                         "IdpMetadataUrl" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (xml :initarg :xml :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-idp-metadata-xml :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-idp-metadata
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'idp-metadata
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'idp-metadata 'make-idp-metadata))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input idp-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input idp-metadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'url))
      (common-lisp:list
       (common-lisp:cons "url"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'xml))
      (common-lisp:list
       (common-lisp:cons "xml"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input idp-metadata))
   common-lisp:nil))
(common-lisp:deftype idp-metadata-url () 'common-lisp:string)
(common-lisp:deftype integer () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition internal-server-exception
     (grafana-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       internal-server-exception-message)
      (retry-after-seconds :initarg :retry-after-seconds :initform
       common-lisp:nil :reader internal-server-exception-retry-after-seconds)))
 (common-lisp:export
  (common-lisp:list 'internal-server-exception
                    'internal-server-exception-message
                    'internal-server-exception-retry-after-seconds)))
(common-lisp:deftype license-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass list-permissions-request common-lisp:nil
                       ((group-id :initarg :group-id :initform common-lisp:nil
                         :type (common-lisp:or sso-id common-lisp:null)
                         :accessor
                         struct-shape-list-permissions-request-group-id :shape
                         "SsoId" :location "querystring" :location-name
                         "groupId")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          list-permissions-request-max-results-integer
                          common-lisp:null)
                         :accessor
                         struct-shape-list-permissions-request-max-results
                         :shape "ListPermissionsRequestMaxResultsInteger"
                         :location "querystring" :location-name "maxResults")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-permissions-request-next-token
                         :shape "PaginationToken" :location "querystring"
                         :location-name "nextToken")
                        (user-id :initarg :user-id :initform common-lisp:nil
                         :type (common-lisp:or sso-id common-lisp:null)
                         :accessor
                         struct-shape-list-permissions-request-user-id :shape
                         "SsoId" :location "querystring" :location-name
                         "userId")
                        (user-type :initarg :user-type :initform
                         common-lisp:nil :type
                         (common-lisp:or user-type common-lisp:null) :accessor
                         struct-shape-list-permissions-request-user-type :shape
                         "UserType" :location "querystring" :location-name
                         "userType")
                        (workspace-id :initarg :workspace-id :initform
                         (common-lisp:error ":workspaceid is required") :type
                         (common-lisp:or workspace-id common-lisp:null)
                         :accessor
                         struct-shape-list-permissions-request-workspace-id
                         :shape "WorkspaceId" :location "uri" :location-name
                         "workspaceId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-permissions-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-permissions-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-permissions-request 'make-list-permissions-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-permissions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-permissions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-permissions-request))
   common-lisp:nil))
(common-lisp:deftype list-permissions-request-max-results-integer ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass list-permissions-response common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-permissions-response-next-token
                         :shape "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (permissions :initarg :permissions :initform
                         (common-lisp:error ":permissions is required") :type
                         (common-lisp:or permission-entry-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-permissions-response-permissions
                         :shape "PermissionEntryList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-permissions-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-permissions-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-permissions-response
                    'make-list-permissions-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-permissions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-permissions-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'permissions))
      (common-lisp:list
       (common-lisp:cons "permissions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-permissions-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-request common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resourcearn is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-tags-for-resource-request-resource-arn
                         :shape "String" :location "uri" :location-name
                         "resourceArn"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-tags-for-resource-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-request
                    'make-list-tags-for-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-response common-lisp:nil
                       ((tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         struct-shape-list-tags-for-resource-response-tags
                         :shape "TagMap" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-tags-for-resource-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-response
                    'make-list-tags-for-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-versions-request common-lisp:nil
                       ((max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          list-versions-request-max-results-integer
                          common-lisp:null)
                         :accessor
                         struct-shape-list-versions-request-max-results :shape
                         "ListVersionsRequestMaxResultsInteger" :location
                         "querystring" :location-name "maxResults")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-versions-request-next-token :shape
                         "PaginationToken" :location "querystring"
                         :location-name "nextToken")
                        (workspace-id :initarg :workspace-id :initform
                         common-lisp:nil :type
                         (common-lisp:or workspace-id common-lisp:null)
                         :accessor
                         struct-shape-list-versions-request-workspace-id :shape
                         "WorkspaceId" :location "querystring" :location-name
                         "workspace-id"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-versions-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-versions-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-versions-request 'make-list-versions-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-versions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-versions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-versions-request))
   common-lisp:nil))
(common-lisp:deftype list-versions-request-max-results-integer ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass list-versions-response common-lisp:nil
                       ((grafana-versions :initarg :grafana-versions :initform
                         common-lisp:nil :type
                         (common-lisp:or grafana-version-list common-lisp:null)
                         :accessor
                         struct-shape-list-versions-response-grafana-versions
                         :shape "GrafanaVersionList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-versions-response-next-token :shape
                         "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-versions-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-versions-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-versions-response 'make-list-versions-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-versions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-versions-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grafana-versions))
      (common-lisp:list
       (common-lisp:cons "grafanaVersions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-versions-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-workspaces-request common-lisp:nil
                       ((max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          list-workspaces-request-max-results-integer
                          common-lisp:null)
                         :accessor
                         struct-shape-list-workspaces-request-max-results
                         :shape "ListWorkspacesRequestMaxResultsInteger"
                         :location "querystring" :location-name "maxResults")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-workspaces-request-next-token :shape
                         "PaginationToken" :location "querystring"
                         :location-name "nextToken"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-workspaces-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-workspaces-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-workspaces-request 'make-list-workspaces-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-workspaces-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-workspaces-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-workspaces-request))
   common-lisp:nil))
(common-lisp:deftype list-workspaces-request-max-results-integer ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass list-workspaces-response common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-workspaces-response-next-token
                         :shape "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (workspaces :initarg :workspaces :initform
                         (common-lisp:error ":workspaces is required") :type
                         (common-lisp:or workspace-list common-lisp:null)
                         :accessor
                         struct-shape-list-workspaces-response-workspaces
                         :shape "WorkspaceList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-workspaces-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-workspaces-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-workspaces-response 'make-list-workspaces-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-workspaces-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-workspaces-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workspaces))
      (common-lisp:list
       (common-lisp:cons "workspaces"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-workspaces-response))
   common-lisp:nil))
(common-lisp:deftype login-validity-duration () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass network-access-configuration common-lisp:nil
                       ((prefix-list-ids :initarg :prefix-list-ids :initform
                         (common-lisp:error ":prefixlistids is required") :type
                         (common-lisp:or prefix-list-ids common-lisp:null)
                         :accessor
                         struct-shape-network-access-configuration-prefix-list-ids
                         :shape "PrefixListIds" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (vpce-ids :initarg :vpce-ids :initform
                         (common-lisp:error ":vpceids is required") :type
                         (common-lisp:or vpce-ids common-lisp:null) :accessor
                         struct-shape-network-access-configuration-vpce-ids
                         :shape "VpceIds" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-network-access-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'network-access-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'network-access-configuration
                    'make-network-access-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          network-access-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          network-access-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'prefix-list-ids))
      (common-lisp:list
       (common-lisp:cons "prefixListIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpce-ids))
      (common-lisp:list
       (common-lisp:cons "vpceIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          network-access-configuration))
   common-lisp:nil))
(common-lisp:deftype notification-destination-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype notification-destinations-list ()
   '(trivial-types:proper-list notification-destination-type))
 (common-lisp:defun make-notification-destinations-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            notification-destination-type))
   aws-sdk/generator/shape::members))
(common-lisp:deftype organization-role-name () 'common-lisp:string)
(common-lisp:deftype organizational-unit () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype organizational-unit-list ()
   '(trivial-types:proper-list organizational-unit))
 (common-lisp:defun make-organizational-unit-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list organizational-unit))
   aws-sdk/generator/shape::members))
(common-lisp:deftype overridable-configuration-json () 'common-lisp:string)
(common-lisp:deftype pagination-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass permission-entry common-lisp:nil
                       ((role :initarg :role :initform
                         (common-lisp:error ":role is required") :type
                         (common-lisp:or role common-lisp:null) :accessor
                         struct-shape-permission-entry-role :shape "Role"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (user :initarg :user :initform
                         (common-lisp:error ":user is required") :type
                         (common-lisp:or user common-lisp:null) :accessor
                         struct-shape-permission-entry-user :shape "User"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-permission-entry
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'permission-entry
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'permission-entry 'make-permission-entry))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input permission-entry))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input permission-entry))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role))
      (common-lisp:list
       (common-lisp:cons "role"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user))
      (common-lisp:list
       (common-lisp:cons "user"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input permission-entry))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype permission-entry-list ()
   '(trivial-types:proper-list permission-entry))
 (common-lisp:defun make-permission-entry-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list permission-entry))
   aws-sdk/generator/shape::members))
(common-lisp:deftype permission-type () 'common-lisp:string)
(common-lisp:deftype prefix-list-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype prefix-list-ids ()
   '(trivial-types:proper-list prefix-list-id))
 (common-lisp:defun make-prefix-list-ids
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list prefix-list-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-exception
     (grafana-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-not-found-exception-message)
      (resource-id :initarg :resource-id :initform common-lisp:nil :reader
       resource-not-found-exception-resource-id)
      (resource-type :initarg :resource-type :initform common-lisp:nil :reader
       resource-not-found-exception-resource-type)))
 (common-lisp:export
  (common-lisp:list 'resource-not-found-exception
                    'resource-not-found-exception-message
                    'resource-not-found-exception-resource-id
                    'resource-not-found-exception-resource-type)))
(common-lisp:deftype role () 'common-lisp:string)
(common-lisp:deftype role-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype role-value-list ()
   '(trivial-types:proper-list role-value))
 (common-lisp:defun make-role-value-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list role-value))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass role-values common-lisp:nil
                       ((admin :initarg :admin :initform common-lisp:nil :type
                         (common-lisp:or role-value-list common-lisp:null)
                         :accessor struct-shape-role-values-admin :shape
                         "RoleValueList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (editor :initarg :editor :initform common-lisp:nil
                         :type
                         (common-lisp:or role-value-list common-lisp:null)
                         :accessor struct-shape-role-values-editor :shape
                         "RoleValueList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-role-values
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'role-values
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'role-values 'make-role-values))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input role-values))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input role-values))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'admin))
      (common-lisp:list
       (common-lisp:cons "admin"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'editor))
      (common-lisp:list
       (common-lisp:cons "editor"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input role-values))
   common-lisp:nil))
(common-lisp:deftype ssoclient-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass saml-authentication common-lisp:nil
                       ((configuration :initarg :configuration :initform
                         common-lisp:nil :type
                         (common-lisp:or saml-configuration common-lisp:null)
                         :accessor
                         struct-shape-saml-authentication-configuration :shape
                         "SamlConfiguration" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform
                         (common-lisp:error ":status is required") :type
                         (common-lisp:or saml-configuration-status
                                         common-lisp:null)
                         :accessor struct-shape-saml-authentication-status
                         :shape "SamlConfigurationStatus" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-saml-authentication
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'saml-authentication
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'saml-authentication 'make-saml-authentication))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input saml-authentication))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input saml-authentication))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration))
      (common-lisp:list
       (common-lisp:cons "configuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input saml-authentication))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass saml-configuration common-lisp:nil
                       ((allowed-organizations :initarg :allowed-organizations
                         :initform common-lisp:nil :type
                         (common-lisp:or allowed-organizations
                                         common-lisp:null)
                         :accessor
                         struct-shape-saml-configuration-allowed-organizations
                         :shape "AllowedOrganizations" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (assertion-attributes :initarg :assertion-attributes
                         :initform common-lisp:nil :type
                         (common-lisp:or assertion-attributes common-lisp:null)
                         :accessor
                         struct-shape-saml-configuration-assertion-attributes
                         :shape "AssertionAttributes" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (idp-metadata :initarg :idp-metadata :initform
                         (common-lisp:error ":idpmetadata is required") :type
                         (common-lisp:or idp-metadata common-lisp:null)
                         :accessor struct-shape-saml-configuration-idp-metadata
                         :shape "IdpMetadata" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (login-validity-duration :initarg
                         :login-validity-duration :initform common-lisp:nil
                         :type
                         (common-lisp:or login-validity-duration
                                         common-lisp:null)
                         :accessor
                         struct-shape-saml-configuration-login-validity-duration
                         :shape "LoginValidityDuration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (role-values :initarg :role-values :initform
                         common-lisp:nil :type
                         (common-lisp:or role-values common-lisp:null)
                         :accessor struct-shape-saml-configuration-role-values
                         :shape "RoleValues" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-saml-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'saml-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'saml-configuration 'make-saml-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input saml-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input saml-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'allowed-organizations))
      (common-lisp:list
       (common-lisp:cons "allowedOrganizations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'assertion-attributes))
      (common-lisp:list
       (common-lisp:cons "assertionAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'idp-metadata))
      (common-lisp:list
       (common-lisp:cons "idpMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'login-validity-duration))
      (common-lisp:list
       (common-lisp:cons "loginValidityDuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-values))
      (common-lisp:list
       (common-lisp:cons "roleValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input saml-configuration))
   common-lisp:nil))
(common-lisp:deftype saml-configuration-status () 'common-lisp:string)
(common-lisp:deftype security-group-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype security-group-ids ()
   '(trivial-types:proper-list security-group-id))
 (common-lisp:defun make-security-group-ids
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list security-group-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition service-quota-exceeded-exception
     (grafana-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       service-quota-exceeded-exception-message)
      (quota-code :initarg :quota-code :initform common-lisp:nil :reader
       service-quota-exceeded-exception-quota-code)
      (resource-id :initarg :resource-id :initform common-lisp:nil :reader
       service-quota-exceeded-exception-resource-id)
      (resource-type :initarg :resource-type :initform common-lisp:nil :reader
       service-quota-exceeded-exception-resource-type)
      (service-code :initarg :service-code :initform common-lisp:nil :reader
       service-quota-exceeded-exception-service-code)))
 (common-lisp:export
  (common-lisp:list 'service-quota-exceeded-exception
                    'service-quota-exceeded-exception-message
                    'service-quota-exceeded-exception-quota-code
                    'service-quota-exceeded-exception-resource-id
                    'service-quota-exceeded-exception-resource-type
                    'service-quota-exceeded-exception-service-code)))
(common-lisp:deftype sso-id () 'common-lisp:string)
(common-lisp:deftype stack-set-name () 'common-lisp:string)
(common-lisp:deftype string () 'common-lisp:string)
(common-lisp:deftype subnet-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype subnet-ids () '(trivial-types:proper-list subnet-id))
 (common-lisp:defun make-subnet-ids
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list subnet-id))
   aws-sdk/generator/shape::members))
(common-lisp:deftype tag-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tag-keys () '(trivial-types:proper-list tag-key))
 (common-lisp:defun make-tag-keys
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype tag-map () 'common-lisp:hash-table)
 (common-lisp:defun make-tag-map (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defclass tag-resource-request common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resourcearn is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-tag-resource-request-resource-arn :shape
                         "String" :location "uri" :location-name "resourceArn")
                        (tags :initarg :tags :initform
                         (common-lisp:error ":tags is required") :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         struct-shape-tag-resource-request-tags :shape "TagMap"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tag-resource-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'tag-resource-request 'make-tag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass tag-resource-response common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tag-resource-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'tag-resource-response 'make-tag-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   common-lisp:nil))
(common-lisp:deftype tag-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition throttling-exception
     (grafana-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       throttling-exception-message)
      (quota-code :initarg :quota-code :initform common-lisp:nil :reader
       throttling-exception-quota-code)
      (retry-after-seconds :initarg :retry-after-seconds :initform
       common-lisp:nil :reader throttling-exception-retry-after-seconds)
      (service-code :initarg :service-code :initform common-lisp:nil :reader
       throttling-exception-service-code)))
 (common-lisp:export
  (common-lisp:list 'throttling-exception 'throttling-exception-message
                    'throttling-exception-quota-code
                    'throttling-exception-retry-after-seconds
                    'throttling-exception-service-code)))
(common-lisp:deftype timestamp () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass untag-resource-request common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resourcearn is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-untag-resource-request-resource-arn
                         :shape "String" :location "uri" :location-name
                         "resourceArn")
                        (tag-keys :initarg :tag-keys :initform
                         (common-lisp:error ":tagkeys is required") :type
                         (common-lisp:or tag-keys common-lisp:null) :accessor
                         struct-shape-untag-resource-request-tag-keys :shape
                         "TagKeys" :location "querystring" :location-name
                         "tagKeys"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-untag-resource-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'untag-resource-request 'make-untag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass untag-resource-response common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-untag-resource-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'untag-resource-response 'make-untag-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   common-lisp:nil))
(common-lisp:deftype update-action () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass update-error common-lisp:nil
                       ((caused-by :initarg :caused-by :initform
                         (common-lisp:error ":causedby is required") :type
                         (common-lisp:or update-instruction common-lisp:null)
                         :accessor struct-shape-update-error-caused-by :shape
                         "UpdateInstruction" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (code :initarg :code :initform
                         (common-lisp:error ":code is required") :type
                         (common-lisp:or update-error-code-integer
                                         common-lisp:null)
                         :accessor struct-shape-update-error-code :shape
                         "UpdateErrorCodeInteger" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (message :initarg :message :initform
                         (common-lisp:error ":message is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-update-error-message :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-error
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-error
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'update-error 'make-update-error))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-error))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-error))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'caused-by))
      (common-lisp:list
       (common-lisp:cons "causedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code))
      (common-lisp:list
       (common-lisp:cons "code"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-error))
   common-lisp:nil))
(common-lisp:deftype update-error-code-integer () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:deftype update-error-list ()
   '(trivial-types:proper-list update-error))
 (common-lisp:defun make-update-error-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list update-error))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass update-instruction common-lisp:nil
                       ((action :initarg :action :initform
                         (common-lisp:error ":action is required") :type
                         (common-lisp:or update-action common-lisp:null)
                         :accessor struct-shape-update-instruction-action
                         :shape "UpdateAction" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (role :initarg :role :initform
                         (common-lisp:error ":role is required") :type
                         (common-lisp:or role common-lisp:null) :accessor
                         struct-shape-update-instruction-role :shape "Role"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (users :initarg :users :initform
                         (common-lisp:error ":users is required") :type
                         (common-lisp:or user-list common-lisp:null) :accessor
                         struct-shape-update-instruction-users :shape
                         "UserList" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-instruction
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-instruction
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-instruction 'make-update-instruction))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-instruction))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-instruction))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action))
      (common-lisp:list
       (common-lisp:cons "action"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role))
      (common-lisp:list
       (common-lisp:cons "role"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'users))
      (common-lisp:list
       (common-lisp:cons "users"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-instruction))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype update-instruction-batch ()
   '(trivial-types:proper-list update-instruction))
 (common-lisp:defun make-update-instruction-batch
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list update-instruction))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass update-permissions-request common-lisp:nil
                       ((update-instruction-batch :initarg
                         :update-instruction-batch :initform
                         (common-lisp:error
                          ":updateinstructionbatch is required")
                         :type
                         (common-lisp:or update-instruction-batch
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-permissions-request-update-instruction-batch
                         :shape "UpdateInstructionBatch" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (workspace-id :initarg :workspace-id :initform
                         (common-lisp:error ":workspaceid is required") :type
                         (common-lisp:or workspace-id common-lisp:null)
                         :accessor
                         struct-shape-update-permissions-request-workspace-id
                         :shape "WorkspaceId" :location "uri" :location-name
                         "workspaceId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-permissions-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-permissions-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-permissions-request
                    'make-update-permissions-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-permissions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-permissions-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'update-instruction-batch))
      (common-lisp:list
       (common-lisp:cons "updateInstructionBatch"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-permissions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-permissions-response common-lisp:nil
                       ((errors :initarg :errors :initform
                         (common-lisp:error ":errors is required") :type
                         (common-lisp:or update-error-list common-lisp:null)
                         :accessor
                         struct-shape-update-permissions-response-errors :shape
                         "UpdateErrorList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-permissions-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-permissions-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-permissions-response
                    'make-update-permissions-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-permissions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-permissions-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'errors))
      (common-lisp:list
       (common-lisp:cons "errors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-permissions-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-workspace-authentication-request common-lisp:nil
                       ((authentication-providers :initarg
                         :authentication-providers :initform
                         (common-lisp:error
                          ":authenticationproviders is required")
                         :type
                         (common-lisp:or authentication-providers
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-workspace-authentication-request-authentication-providers
                         :shape "AuthenticationProviders" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (saml-configuration :initarg :saml-configuration
                         :initform common-lisp:nil :type
                         (common-lisp:or saml-configuration common-lisp:null)
                         :accessor
                         struct-shape-update-workspace-authentication-request-saml-configuration
                         :shape "SamlConfiguration" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (workspace-id :initarg :workspace-id :initform
                         (common-lisp:error ":workspaceid is required") :type
                         (common-lisp:or workspace-id common-lisp:null)
                         :accessor
                         struct-shape-update-workspace-authentication-request-workspace-id
                         :shape "WorkspaceId" :location "uri" :location-name
                         "workspaceId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-workspace-authentication-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-workspace-authentication-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-workspace-authentication-request
                    'make-update-workspace-authentication-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-workspace-authentication-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-workspace-authentication-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'authentication-providers))
      (common-lisp:list
       (common-lisp:cons "authenticationProviders"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'saml-configuration))
      (common-lisp:list
       (common-lisp:cons "samlConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-workspace-authentication-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-workspace-authentication-response common-lisp:nil
                       ((authentication :initarg :authentication :initform
                         (common-lisp:error ":authentication is required")
                         :type
                         (common-lisp:or authentication-description
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-workspace-authentication-response-authentication
                         :shape "AuthenticationDescription" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-workspace-authentication-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-workspace-authentication-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-workspace-authentication-response
                    'make-update-workspace-authentication-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-workspace-authentication-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-workspace-authentication-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'authentication))
      (common-lisp:list
       (common-lisp:cons "authentication"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-workspace-authentication-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-workspace-configuration-request common-lisp:nil
                       ((configuration :initarg :configuration :initform
                         (common-lisp:error ":configuration is required") :type
                         (common-lisp:or overridable-configuration-json
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-workspace-configuration-request-configuration
                         :shape "OverridableConfigurationJson" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (grafana-version :initarg :grafana-version :initform
                         common-lisp:nil :type
                         (common-lisp:or grafana-version common-lisp:null)
                         :accessor
                         struct-shape-update-workspace-configuration-request-grafana-version
                         :shape "GrafanaVersion" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (workspace-id :initarg :workspace-id :initform
                         (common-lisp:error ":workspaceid is required") :type
                         (common-lisp:or workspace-id common-lisp:null)
                         :accessor
                         struct-shape-update-workspace-configuration-request-workspace-id
                         :shape "WorkspaceId" :location "uri" :location-name
                         "workspaceId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-workspace-configuration-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-workspace-configuration-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-workspace-configuration-request
                    'make-update-workspace-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-workspace-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-workspace-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration))
      (common-lisp:list
       (common-lisp:cons "configuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grafana-version))
      (common-lisp:list
       (common-lisp:cons "grafanaVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-workspace-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-workspace-configuration-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-workspace-configuration-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-workspace-configuration-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-workspace-configuration-response
                    'make-update-workspace-configuration-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-workspace-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-workspace-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-workspace-configuration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-workspace-request common-lisp:nil
                       ((account-access-type :initarg :account-access-type
                         :initform common-lisp:nil :type
                         (common-lisp:or account-access-type common-lisp:null)
                         :accessor
                         struct-shape-update-workspace-request-account-access-type
                         :shape "AccountAccessType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (network-access-control :initarg
                         :network-access-control :initform common-lisp:nil
                         :type
                         (common-lisp:or network-access-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-workspace-request-network-access-control
                         :shape "NetworkAccessConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (organization-role-name :initarg
                         :organization-role-name :initform common-lisp:nil
                         :type
                         (common-lisp:or organization-role-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-workspace-request-organization-role-name
                         :shape "OrganizationRoleName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (permission-type :initarg :permission-type :initform
                         common-lisp:nil :type
                         (common-lisp:or permission-type common-lisp:null)
                         :accessor
                         struct-shape-update-workspace-request-permission-type
                         :shape "PermissionType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (remove-network-access-configuration :initarg
                         :remove-network-access-configuration :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-update-workspace-request-remove-network-access-configuration
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (remove-vpc-configuration :initarg
                         :remove-vpc-configuration :initform common-lisp:nil
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         struct-shape-update-workspace-request-remove-vpc-configuration
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (stack-set-name :initarg :stack-set-name :initform
                         common-lisp:nil :type
                         (common-lisp:or stack-set-name common-lisp:null)
                         :accessor
                         struct-shape-update-workspace-request-stack-set-name
                         :shape "StackSetName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (vpc-configuration :initarg :vpc-configuration
                         :initform common-lisp:nil :type
                         (common-lisp:or vpc-configuration common-lisp:null)
                         :accessor
                         struct-shape-update-workspace-request-vpc-configuration
                         :shape "VpcConfiguration" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (workspace-data-sources :initarg
                         :workspace-data-sources :initform common-lisp:nil
                         :type
                         (common-lisp:or data-source-types-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-workspace-request-workspace-data-sources
                         :shape "DataSourceTypesList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (workspace-description :initarg :workspace-description
                         :initform common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor
                         struct-shape-update-workspace-request-workspace-description
                         :shape "Description" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (workspace-id :initarg :workspace-id :initform
                         (common-lisp:error ":workspaceid is required") :type
                         (common-lisp:or workspace-id common-lisp:null)
                         :accessor
                         struct-shape-update-workspace-request-workspace-id
                         :shape "WorkspaceId" :location "uri" :location-name
                         "workspaceId")
                        (workspace-name :initarg :workspace-name :initform
                         common-lisp:nil :type
                         (common-lisp:or workspace-name common-lisp:null)
                         :accessor
                         struct-shape-update-workspace-request-workspace-name
                         :shape "WorkspaceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (workspace-notification-destinations :initarg
                         :workspace-notification-destinations :initform
                         common-lisp:nil :type
                         (common-lisp:or notification-destinations-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-workspace-request-workspace-notification-destinations
                         :shape "NotificationDestinationsList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (workspace-organizational-units :initarg
                         :workspace-organizational-units :initform
                         common-lisp:nil :type
                         (common-lisp:or organizational-unit-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-workspace-request-workspace-organizational-units
                         :shape "OrganizationalUnitList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (workspace-role-arn :initarg :workspace-role-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or iam-role-arn common-lisp:null)
                         :accessor
                         struct-shape-update-workspace-request-workspace-role-arn
                         :shape "IamRoleArn" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-workspace-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-workspace-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-workspace-request 'make-update-workspace-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-workspace-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-workspace-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-access-type))
      (common-lisp:list
       (common-lisp:cons "accountAccessType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'network-access-control))
      (common-lisp:list
       (common-lisp:cons "networkAccessControl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'organization-role-name))
      (common-lisp:list
       (common-lisp:cons "organizationRoleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'permission-type))
      (common-lisp:list
       (common-lisp:cons "permissionType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'remove-network-access-configuration))
      (common-lisp:list
       (common-lisp:cons "removeNetworkAccessConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'remove-vpc-configuration))
      (common-lisp:list
       (common-lisp:cons "removeVpcConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-set-name))
      (common-lisp:list
       (common-lisp:cons "stackSetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-configuration))
      (common-lisp:list
       (common-lisp:cons "vpcConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'workspace-data-sources))
      (common-lisp:list
       (common-lisp:cons "workspaceDataSources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'workspace-description))
      (common-lisp:list
       (common-lisp:cons "workspaceDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workspace-name))
      (common-lisp:list
       (common-lisp:cons "workspaceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'workspace-notification-destinations))
      (common-lisp:list
       (common-lisp:cons "workspaceNotificationDestinations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'workspace-organizational-units))
      (common-lisp:list
       (common-lisp:cons "workspaceOrganizationalUnits"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workspace-role-arn))
      (common-lisp:list
       (common-lisp:cons "workspaceRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-workspace-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-workspace-response common-lisp:nil
                       ((workspace :initarg :workspace :initform
                         (common-lisp:error ":workspace is required") :type
                         (common-lisp:or workspace-description
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-workspace-response-workspace
                         :shape "WorkspaceDescription" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-workspace-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-workspace-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-workspace-response
                    'make-update-workspace-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-workspace-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-workspace-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workspace))
      (common-lisp:list
       (common-lisp:cons "workspace"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-workspace-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass user common-lisp:nil
                       ((id :initarg :id :initform
                         (common-lisp:error ":id is required") :type
                         (common-lisp:or sso-id common-lisp:null) :accessor
                         struct-shape-user-id :shape "SsoId" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (type :initarg :type :initform
                         (common-lisp:error ":type is required") :type
                         (common-lisp:or user-type common-lisp:null) :accessor
                         struct-shape-user-type :shape "UserType" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-user (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'user
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'user 'make-user))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input user))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input user))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input user))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype user-list () '(trivial-types:proper-list user))
 (common-lisp:defun make-user-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list user))
   aws-sdk/generator/shape::members))
(common-lisp:deftype user-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition validation-exception
     (grafana-error)
     ((field-list :initarg :field-list :initform common-lisp:nil :reader
       validation-exception-field-list)
      (message :initarg :message :initform common-lisp:nil :reader
       validation-exception-message)
      (reason :initarg :reason :initform common-lisp:nil :reader
       validation-exception-reason)))
 (common-lisp:export
  (common-lisp:list 'validation-exception 'validation-exception-field-list
                    'validation-exception-message
                    'validation-exception-reason)))
(common-lisp:progn
 (common-lisp:defclass validation-exception-field common-lisp:nil
                       ((message :initarg :message :initform
                         (common-lisp:error ":message is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-validation-exception-field-message :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-validation-exception-field-name :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-validation-exception-field
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'validation-exception-field
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'validation-exception-field
                    'make-validation-exception-field))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          validation-exception-field))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          validation-exception-field))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          validation-exception-field))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype validation-exception-field-list ()
   '(trivial-types:proper-list validation-exception-field))
 (common-lisp:defun make-validation-exception-field-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            validation-exception-field))
   aws-sdk/generator/shape::members))
(common-lisp:deftype validation-exception-reason () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass vpc-configuration common-lisp:nil
                       ((security-group-ids :initarg :security-group-ids
                         :initform
                         (common-lisp:error ":securitygroupids is required")
                         :type
                         (common-lisp:or security-group-ids common-lisp:null)
                         :accessor
                         struct-shape-vpc-configuration-security-group-ids
                         :shape "SecurityGroupIds" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (subnet-ids :initarg :subnet-ids :initform
                         (common-lisp:error ":subnetids is required") :type
                         (common-lisp:or subnet-ids common-lisp:null) :accessor
                         struct-shape-vpc-configuration-subnet-ids :shape
                         "SubnetIds" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-vpc-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'vpc-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'vpc-configuration 'make-vpc-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input vpc-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input vpc-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-group-ids))
      (common-lisp:list
       (common-lisp:cons "securityGroupIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-ids))
      (common-lisp:list
       (common-lisp:cons "subnetIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input vpc-configuration))
   common-lisp:nil))
(common-lisp:deftype vpce-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype vpce-ids () '(trivial-types:proper-list vpce-id))
 (common-lisp:defun make-vpce-ids
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list vpce-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass workspace-description common-lisp:nil
                       ((account-access-type :initarg :account-access-type
                         :initform common-lisp:nil :type
                         (common-lisp:or account-access-type common-lisp:null)
                         :accessor
                         struct-shape-workspace-description-account-access-type
                         :shape "AccountAccessType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (authentication :initarg :authentication :initform
                         (common-lisp:error ":authentication is required")
                         :type
                         (common-lisp:or authentication-summary
                                         common-lisp:null)
                         :accessor
                         struct-shape-workspace-description-authentication
                         :shape "AuthenticationSummary" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (created :initarg :created :initform
                         (common-lisp:error ":created is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-workspace-description-created :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (data-sources :initarg :data-sources :initform
                         (common-lisp:error ":datasources is required") :type
                         (common-lisp:or data-source-types-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-workspace-description-data-sources :shape
                         "DataSourceTypesList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor
                         struct-shape-workspace-description-description :shape
                         "Description" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (endpoint :initarg :endpoint :initform
                         (common-lisp:error ":endpoint is required") :type
                         (common-lisp:or endpoint common-lisp:null) :accessor
                         struct-shape-workspace-description-endpoint :shape
                         "Endpoint" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (free-trial-consumed :initarg :free-trial-consumed
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-workspace-description-free-trial-consumed
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (free-trial-expiration :initarg :free-trial-expiration
                         :initform common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-workspace-description-free-trial-expiration
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (grafana-token :initarg :grafana-token :initform
                         common-lisp:nil :type
                         (common-lisp:or grafana-token common-lisp:null)
                         :accessor
                         struct-shape-workspace-description-grafana-token
                         :shape "GrafanaToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (grafana-version :initarg :grafana-version :initform
                         (common-lisp:error ":grafanaversion is required")
                         :type
                         (common-lisp:or grafana-version common-lisp:null)
                         :accessor
                         struct-shape-workspace-description-grafana-version
                         :shape "GrafanaVersion" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (id :initarg :id :initform
                         (common-lisp:error ":id is required") :type
                         (common-lisp:or workspace-id common-lisp:null)
                         :accessor struct-shape-workspace-description-id :shape
                         "WorkspaceId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (license-expiration :initarg :license-expiration
                         :initform common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-workspace-description-license-expiration
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (license-type :initarg :license-type :initform
                         common-lisp:nil :type
                         (common-lisp:or license-type common-lisp:null)
                         :accessor
                         struct-shape-workspace-description-license-type :shape
                         "LicenseType" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (modified :initarg :modified :initform
                         (common-lisp:error ":modified is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-workspace-description-modified :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or workspace-name common-lisp:null)
                         :accessor struct-shape-workspace-description-name
                         :shape "WorkspaceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (network-access-control :initarg
                         :network-access-control :initform common-lisp:nil
                         :type
                         (common-lisp:or network-access-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-workspace-description-network-access-control
                         :shape "NetworkAccessConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (notification-destinations :initarg
                         :notification-destinations :initform common-lisp:nil
                         :type
                         (common-lisp:or notification-destinations-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-workspace-description-notification-destinations
                         :shape "NotificationDestinationsList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (organization-role-name :initarg
                         :organization-role-name :initform common-lisp:nil
                         :type
                         (common-lisp:or organization-role-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-workspace-description-organization-role-name
                         :shape "OrganizationRoleName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (organizational-units :initarg :organizational-units
                         :initform common-lisp:nil :type
                         (common-lisp:or organizational-unit-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-workspace-description-organizational-units
                         :shape "OrganizationalUnitList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (permission-type :initarg :permission-type :initform
                         common-lisp:nil :type
                         (common-lisp:or permission-type common-lisp:null)
                         :accessor
                         struct-shape-workspace-description-permission-type
                         :shape "PermissionType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (stack-set-name :initarg :stack-set-name :initform
                         common-lisp:nil :type
                         (common-lisp:or stack-set-name common-lisp:null)
                         :accessor
                         struct-shape-workspace-description-stack-set-name
                         :shape "StackSetName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform
                         (common-lisp:error ":status is required") :type
                         (common-lisp:or workspace-status common-lisp:null)
                         :accessor struct-shape-workspace-description-status
                         :shape "WorkspaceStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         struct-shape-workspace-description-tags :shape
                         "TagMap" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (vpc-configuration :initarg :vpc-configuration
                         :initform common-lisp:nil :type
                         (common-lisp:or vpc-configuration common-lisp:null)
                         :accessor
                         struct-shape-workspace-description-vpc-configuration
                         :shape "VpcConfiguration" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (workspace-role-arn :initarg :workspace-role-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or iam-role-arn common-lisp:null)
                         :accessor
                         struct-shape-workspace-description-workspace-role-arn
                         :shape "IamRoleArn" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-workspace-description
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'workspace-description
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'workspace-description 'make-workspace-description))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          workspace-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          workspace-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-access-type))
      (common-lisp:list
       (common-lisp:cons "accountAccessType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'authentication))
      (common-lisp:list
       (common-lisp:cons "authentication"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created))
      (common-lisp:list
       (common-lisp:cons "created"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-sources))
      (common-lisp:list
       (common-lisp:cons "dataSources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint))
      (common-lisp:list
       (common-lisp:cons "endpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'free-trial-consumed))
      (common-lisp:list
       (common-lisp:cons "freeTrialConsumed"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'free-trial-expiration))
      (common-lisp:list
       (common-lisp:cons "freeTrialExpiration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grafana-token))
      (common-lisp:list
       (common-lisp:cons "grafanaToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grafana-version))
      (common-lisp:list
       (common-lisp:cons "grafanaVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'license-expiration))
      (common-lisp:list
       (common-lisp:cons "licenseExpiration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'license-type))
      (common-lisp:list
       (common-lisp:cons "licenseType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'modified))
      (common-lisp:list
       (common-lisp:cons "modified"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'network-access-control))
      (common-lisp:list
       (common-lisp:cons "networkAccessControl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'notification-destinations))
      (common-lisp:list
       (common-lisp:cons "notificationDestinations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'organization-role-name))
      (common-lisp:list
       (common-lisp:cons "organizationRoleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'organizational-units))
      (common-lisp:list
       (common-lisp:cons "organizationalUnits"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'permission-type))
      (common-lisp:list
       (common-lisp:cons "permissionType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-set-name))
      (common-lisp:list
       (common-lisp:cons "stackSetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-configuration))
      (common-lisp:list
       (common-lisp:cons "vpcConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workspace-role-arn))
      (common-lisp:list
       (common-lisp:cons "workspaceRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          workspace-description))
   common-lisp:nil))
(common-lisp:deftype workspace-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype workspace-list ()
   '(trivial-types:proper-list workspace-summary))
 (common-lisp:defun make-workspace-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list workspace-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype workspace-name () 'common-lisp:string)
(common-lisp:deftype workspace-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass workspace-summary common-lisp:nil
                       ((authentication :initarg :authentication :initform
                         (common-lisp:error ":authentication is required")
                         :type
                         (common-lisp:or authentication-summary
                                         common-lisp:null)
                         :accessor
                         struct-shape-workspace-summary-authentication :shape
                         "AuthenticationSummary" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (created :initarg :created :initform
                         (common-lisp:error ":created is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-workspace-summary-created :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor struct-shape-workspace-summary-description
                         :shape "Description" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (endpoint :initarg :endpoint :initform
                         (common-lisp:error ":endpoint is required") :type
                         (common-lisp:or endpoint common-lisp:null) :accessor
                         struct-shape-workspace-summary-endpoint :shape
                         "Endpoint" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (grafana-token :initarg :grafana-token :initform
                         common-lisp:nil :type
                         (common-lisp:or grafana-token common-lisp:null)
                         :accessor struct-shape-workspace-summary-grafana-token
                         :shape "GrafanaToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (grafana-version :initarg :grafana-version :initform
                         (common-lisp:error ":grafanaversion is required")
                         :type
                         (common-lisp:or grafana-version common-lisp:null)
                         :accessor
                         struct-shape-workspace-summary-grafana-version :shape
                         "GrafanaVersion" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (id :initarg :id :initform
                         (common-lisp:error ":id is required") :type
                         (common-lisp:or workspace-id common-lisp:null)
                         :accessor struct-shape-workspace-summary-id :shape
                         "WorkspaceId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (license-type :initarg :license-type :initform
                         common-lisp:nil :type
                         (common-lisp:or license-type common-lisp:null)
                         :accessor struct-shape-workspace-summary-license-type
                         :shape "LicenseType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (modified :initarg :modified :initform
                         (common-lisp:error ":modified is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-workspace-summary-modified :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or workspace-name common-lisp:null)
                         :accessor struct-shape-workspace-summary-name :shape
                         "WorkspaceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (notification-destinations :initarg
                         :notification-destinations :initform common-lisp:nil
                         :type
                         (common-lisp:or notification-destinations-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-workspace-summary-notification-destinations
                         :shape "NotificationDestinationsList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (status :initarg :status :initform
                         (common-lisp:error ":status is required") :type
                         (common-lisp:or workspace-status common-lisp:null)
                         :accessor struct-shape-workspace-summary-status :shape
                         "WorkspaceStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         struct-shape-workspace-summary-tags :shape "TagMap"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-workspace-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'workspace-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'workspace-summary 'make-workspace-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input workspace-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input workspace-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'authentication))
      (common-lisp:list
       (common-lisp:cons "authentication"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created))
      (common-lisp:list
       (common-lisp:cons "created"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint))
      (common-lisp:list
       (common-lisp:cons "endpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grafana-token))
      (common-lisp:list
       (common-lisp:cons "grafanaToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grafana-version))
      (common-lisp:list
       (common-lisp:cons "grafanaVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'license-type))
      (common-lisp:list
       (common-lisp:cons "licenseType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'modified))
      (common-lisp:list
       (common-lisp:cons "modified"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'notification-destinations))
      (common-lisp:list
       (common-lisp:cons "notificationDestinations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input workspace-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defun associate-license
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key grafana-token license-type workspace-id)
   (common-lisp:declare
    (common-lisp:ignorable grafana-token license-type workspace-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-associate-license-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'grafana-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/workspaces/~A/licenses/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'workspace-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'license-type))))
                                                        "AssociateLicense"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'associate-license))
(common-lisp:progn
 (common-lisp:defun create-workspace
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-access-type
                     authentication-providers client-token configuration
                     grafana-version network-access-control
                     organization-role-name permission-type stack-set-name tags
                     vpc-configuration workspace-data-sources
                     workspace-description workspace-name
                     workspace-notification-destinations
                     workspace-organizational-units workspace-role-arn)
   (common-lisp:declare
    (common-lisp:ignorable account-access-type authentication-providers
     client-token configuration grafana-version network-access-control
     organization-role-name permission-type stack-set-name tags
     vpc-configuration workspace-data-sources workspace-description
     workspace-name workspace-notification-destinations
     workspace-organizational-units workspace-role-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-workspace-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'grafana-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/workspaces"
                                                        "CreateWorkspace"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-workspace))
(common-lisp:progn
 (common-lisp:defun create-workspace-api-key
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key key-name key-role seconds-to-live
                     workspace-id)
   (common-lisp:declare
    (common-lisp:ignorable key-name key-role seconds-to-live workspace-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-workspace-api-key-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'grafana-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/workspaces/~A/apikeys"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'workspace-id))))
                                                        "CreateWorkspaceApiKey"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-workspace-api-key))
(common-lisp:progn
 (common-lisp:defun delete-workspace
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key workspace-id)
   (common-lisp:declare (common-lisp:ignorable workspace-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-workspace-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'grafana-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/workspaces/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'workspace-id))))
                                                        "DeleteWorkspace"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-workspace))
(common-lisp:progn
 (common-lisp:defun delete-workspace-api-key
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key key-name workspace-id)
   (common-lisp:declare (common-lisp:ignorable key-name workspace-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-workspace-api-key-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'grafana-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/workspaces/~A/apikeys/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'workspace-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'key-name))))
                                                        "DeleteWorkspaceApiKey"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-workspace-api-key))
(common-lisp:progn
 (common-lisp:defun describe-workspace
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key workspace-id)
   (common-lisp:declare (common-lisp:ignorable workspace-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-workspace-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'grafana-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/workspaces/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'workspace-id))))
                                                        "DescribeWorkspace"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-workspace))
(common-lisp:progn
 (common-lisp:defun describe-workspace-authentication
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key workspace-id)
   (common-lisp:declare (common-lisp:ignorable workspace-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-workspace-authentication-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'grafana-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/workspaces/~A/authentication"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'workspace-id))))
                                                        "DescribeWorkspaceAuthentication"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-workspace-authentication))
(common-lisp:progn
 (common-lisp:defun describe-workspace-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key workspace-id)
   (common-lisp:declare (common-lisp:ignorable workspace-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-workspace-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'grafana-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/workspaces/~A/configuration"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'workspace-id))))
                                                        "DescribeWorkspaceConfiguration"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-workspace-configuration))
(common-lisp:progn
 (common-lisp:defun disassociate-license
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key license-type workspace-id)
   (common-lisp:declare (common-lisp:ignorable license-type workspace-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-disassociate-license-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'grafana-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/workspaces/~A/licenses/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'workspace-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'license-type))))
                                                        "DisassociateLicense"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'disassociate-license))
(common-lisp:progn
 (common-lisp:defun list-permissions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key group-id max-results next-token user-id
                     user-type workspace-id)
   (common-lisp:declare
    (common-lisp:ignorable group-id max-results next-token user-id user-type
     workspace-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-permissions-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'grafana-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/workspaces/~A/permissions"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'workspace-id))))
                                                        "ListPermissions"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-permissions))
(common-lisp:progn
 (common-lisp:defun list-tags-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn)
   (common-lisp:declare (common-lisp:ignorable resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-for-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'grafana-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "ListTagsForResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-tags-for-resource))
(common-lisp:progn
 (common-lisp:defun list-versions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token workspace-id)
   (common-lisp:declare
    (common-lisp:ignorable max-results next-token workspace-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-versions-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'grafana-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" "/versions"
                                                        "ListVersions"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-versions))
(common-lisp:progn
 (common-lisp:defun list-workspaces
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-workspaces-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'grafana-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" "/workspaces"
                                                        "ListWorkspaces"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-workspaces))
(common-lisp:progn
 (common-lisp:defun tag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tags)
   (common-lisp:declare (common-lisp:ignorable resource-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'grafana-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "TagResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'tag-resource))
(common-lisp:progn
 (common-lisp:defun untag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tag-keys)
   (common-lisp:declare (common-lisp:ignorable resource-arn tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'grafana-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "UntagResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'untag-resource))
(common-lisp:progn
 (common-lisp:defun update-permissions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key update-instruction-batch workspace-id)
   (common-lisp:declare
    (common-lisp:ignorable update-instruction-batch workspace-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-permissions-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'grafana-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/workspaces/~A/permissions"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'workspace-id))))
                                                        "UpdatePermissions"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-permissions))
(common-lisp:progn
 (common-lisp:defun update-workspace
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-access-type
                     network-access-control organization-role-name
                     permission-type remove-network-access-configuration
                     remove-vpc-configuration stack-set-name vpc-configuration
                     workspace-data-sources workspace-description workspace-id
                     workspace-name workspace-notification-destinations
                     workspace-organizational-units workspace-role-arn)
   (common-lisp:declare
    (common-lisp:ignorable account-access-type network-access-control
     organization-role-name permission-type remove-network-access-configuration
     remove-vpc-configuration stack-set-name vpc-configuration
     workspace-data-sources workspace-description workspace-id workspace-name
     workspace-notification-destinations workspace-organizational-units
     workspace-role-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-workspace-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'grafana-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/workspaces/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'workspace-id))))
                                                        "UpdateWorkspace"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-workspace))
(common-lisp:progn
 (common-lisp:defun update-workspace-authentication
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key authentication-providers
                     saml-configuration workspace-id)
   (common-lisp:declare
    (common-lisp:ignorable authentication-providers saml-configuration
     workspace-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-workspace-authentication-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'grafana-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/workspaces/~A/authentication"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'workspace-id))))
                                                        "UpdateWorkspaceAuthentication"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-workspace-authentication))
(common-lisp:progn
 (common-lisp:defun update-workspace-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key configuration grafana-version
                     workspace-id)
   (common-lisp:declare
    (common-lisp:ignorable configuration grafana-version workspace-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-workspace-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'grafana-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/workspaces/~A/configuration"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'workspace-id))))
                                                        "UpdateWorkspaceConfiguration"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-workspace-configuration))
