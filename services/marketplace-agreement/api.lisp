;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(uiop/package:define-package #:aws-sdk/services/marketplace-agreement/api
                             (:use) (:nicknames #:aws/marketplace-agreement)
                             (:import-from #:aws-sdk/generator/shape)
                             (:import-from #:aws-sdk/generator/operation)
                             (:import-from #:aws-sdk/api)
                             (:import-from #:aws-sdk/request)
                             (:import-from #:aws-sdk/json-request)
                             (:import-from #:aws-sdk/rest-json-request)
                             (:import-from #:aws-sdk/rest-xml-request)
                             (:import-from #:aws-sdk/query-request)
                             (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/marketplace-agreement/api)
(common-lisp:progn
 (common-lisp:define-condition marketplace-agreement-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'marketplace-agreement-error))
(common-lisp:progn
 (common-lisp:defclass marketplace-agreement-request
                       (aws-sdk/json-request:json-request) common-lisp:nil
                       (:default-initargs :service "marketplace-agreement"
                        :api-version "2020-03-01" :host-prefix
                        "agreement-marketplace" :signing-name "aws-marketplace"
                        :global-host common-lisp:nil :target-prefix
                        "AWSMPCommerceService_v20200301" :json-version "1.0"))
 (common-lisp:export 'marketplace-agreement-request))
(common-lisp:defvar *error-map*
  '(("AccessDeniedException" . access-denied-exception)
    ("InternalServerException" . internal-server-exception)
    ("ResourceNotFoundException" . resource-not-found-exception)
    ("ThrottlingException" . throttling-exception)
    ("ValidationException" . validation-exception)))
(common-lisp:deftype awsaccount-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass accepted-term common-lisp:nil
                       ((byol-pricing-term :initarg :byol-pricing-term
                         :initform common-lisp:nil :type
                         (common-lisp:or byol-pricing-term common-lisp:null)
                         :accessor struct-shape-accepted-term-byol-pricing-term
                         :shape "ByolPricingTerm" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (configurable-upfront-pricing-term :initarg
                         :configurable-upfront-pricing-term :initform
                         common-lisp:nil :type
                         (common-lisp:or configurable-upfront-pricing-term
                                         common-lisp:null)
                         :accessor
                         struct-shape-accepted-term-configurable-upfront-pricing-term
                         :shape "ConfigurableUpfrontPricingTerm" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (fixed-upfront-pricing-term :initarg
                         :fixed-upfront-pricing-term :initform common-lisp:nil
                         :type
                         (common-lisp:or fixed-upfront-pricing-term
                                         common-lisp:null)
                         :accessor
                         struct-shape-accepted-term-fixed-upfront-pricing-term
                         :shape "FixedUpfrontPricingTerm" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (free-trial-pricing-term :initarg
                         :free-trial-pricing-term :initform common-lisp:nil
                         :type
                         (common-lisp:or free-trial-pricing-term
                                         common-lisp:null)
                         :accessor
                         struct-shape-accepted-term-free-trial-pricing-term
                         :shape "FreeTrialPricingTerm" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (legal-term :initarg :legal-term :initform
                         common-lisp:nil :type
                         (common-lisp:or legal-term common-lisp:null) :accessor
                         struct-shape-accepted-term-legal-term :shape
                         "LegalTerm" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (payment-schedule-term :initarg :payment-schedule-term
                         :initform common-lisp:nil :type
                         (common-lisp:or payment-schedule-term
                                         common-lisp:null)
                         :accessor
                         struct-shape-accepted-term-payment-schedule-term
                         :shape "PaymentScheduleTerm" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (recurring-payment-term :initarg
                         :recurring-payment-term :initform common-lisp:nil
                         :type
                         (common-lisp:or recurring-payment-term
                                         common-lisp:null)
                         :accessor
                         struct-shape-accepted-term-recurring-payment-term
                         :shape "RecurringPaymentTerm" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (renewal-term :initarg :renewal-term :initform
                         common-lisp:nil :type
                         (common-lisp:or renewal-term common-lisp:null)
                         :accessor struct-shape-accepted-term-renewal-term
                         :shape "RenewalTerm" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (support-term :initarg :support-term :initform
                         common-lisp:nil :type
                         (common-lisp:or support-term common-lisp:null)
                         :accessor struct-shape-accepted-term-support-term
                         :shape "SupportTerm" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (usage-based-pricing-term :initarg
                         :usage-based-pricing-term :initform common-lisp:nil
                         :type
                         (common-lisp:or usage-based-pricing-term
                                         common-lisp:null)
                         :accessor
                         struct-shape-accepted-term-usage-based-pricing-term
                         :shape "UsageBasedPricingTerm" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (validity-term :initarg :validity-term :initform
                         common-lisp:nil :type
                         (common-lisp:or validity-term common-lisp:null)
                         :accessor struct-shape-accepted-term-validity-term
                         :shape "ValidityTerm" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-accepted-term
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'accepted-term
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'accepted-term 'make-accepted-term))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input accepted-term))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input accepted-term))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'byol-pricing-term))
      (common-lisp:list
       (common-lisp:cons "byolPricingTerm"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'configurable-upfront-pricing-term))
      (common-lisp:list
       (common-lisp:cons "configurableUpfrontPricingTerm"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'fixed-upfront-pricing-term))
      (common-lisp:list
       (common-lisp:cons "fixedUpfrontPricingTerm"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'free-trial-pricing-term))
      (common-lisp:list
       (common-lisp:cons "freeTrialPricingTerm"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'legal-term))
      (common-lisp:list
       (common-lisp:cons "legalTerm"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'payment-schedule-term))
      (common-lisp:list
       (common-lisp:cons "paymentScheduleTerm"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'recurring-payment-term))
      (common-lisp:list
       (common-lisp:cons "recurringPaymentTerm"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'renewal-term))
      (common-lisp:list
       (common-lisp:cons "renewalTerm"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'support-term))
      (common-lisp:list
       (common-lisp:cons "supportTerm"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'usage-based-pricing-term))
      (common-lisp:list
       (common-lisp:cons "usageBasedPricingTerm"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'validity-term))
      (common-lisp:list
       (common-lisp:cons "validityTerm"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input accepted-term))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype accepted-term-list ()
   '(trivial-types:proper-list accepted-term))
 (common-lisp:defun make-accepted-term-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list accepted-term))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass acceptor common-lisp:nil
                       ((account-id :initarg :account-id :initform
                         common-lisp:nil :type
                         (common-lisp:or awsaccount-id common-lisp:null)
                         :accessor struct-shape-acceptor-account-id :shape
                         "AWSAccountId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-acceptor
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'acceptor
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'acceptor 'make-acceptor))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input acceptor))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input acceptor))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "accountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input acceptor))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition access-denied-exception
     (marketplace-agreement-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       access-denied-exception-message)
      (request-id :initarg :request-id :initform common-lisp:nil :reader
       access-denied-exception-request-id)))
 (common-lisp:export
  (common-lisp:list 'access-denied-exception 'access-denied-exception-message
                    'access-denied-exception-request-id)))
(common-lisp:deftype agreement-resource-type () 'common-lisp:string)
(common-lisp:deftype agreement-status () 'common-lisp:string)
(common-lisp:deftype agreement-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass agreement-view-summary common-lisp:nil
                       ((acceptance-time :initarg :acceptance-time :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-agreement-view-summary-acceptance-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (acceptor :initarg :acceptor :initform common-lisp:nil
                         :type (common-lisp:or acceptor common-lisp:null)
                         :accessor struct-shape-agreement-view-summary-acceptor
                         :shape "Acceptor" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (agreement-id :initarg :agreement-id :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-id common-lisp:null)
                         :accessor
                         struct-shape-agreement-view-summary-agreement-id
                         :shape "ResourceId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (agreement-type :initarg :agreement-type :initform
                         common-lisp:nil :type
                         (common-lisp:or agreement-type common-lisp:null)
                         :accessor
                         struct-shape-agreement-view-summary-agreement-type
                         :shape "AgreementType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (end-time :initarg :end-time :initform common-lisp:nil
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor struct-shape-agreement-view-summary-end-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (proposal-summary :initarg :proposal-summary :initform
                         common-lisp:nil :type
                         (common-lisp:or proposal-summary common-lisp:null)
                         :accessor
                         struct-shape-agreement-view-summary-proposal-summary
                         :shape "ProposalSummary" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (proposer :initarg :proposer :initform common-lisp:nil
                         :type (common-lisp:or proposer common-lisp:null)
                         :accessor struct-shape-agreement-view-summary-proposer
                         :shape "Proposer" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (start-time :initarg :start-time :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-agreement-view-summary-start-time :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or agreement-status common-lisp:null)
                         :accessor struct-shape-agreement-view-summary-status
                         :shape "AgreementStatus" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-agreement-view-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'agreement-view-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'agreement-view-summary 'make-agreement-view-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          agreement-view-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          agreement-view-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'acceptance-time))
      (common-lisp:list
       (common-lisp:cons "acceptanceTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'acceptor))
      (common-lisp:list
       (common-lisp:cons "acceptor"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'agreement-id))
      (common-lisp:list
       (common-lisp:cons "agreementId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'agreement-type))
      (common-lisp:list
       (common-lisp:cons "agreementType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "endTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'proposal-summary))
      (common-lisp:list
       (common-lisp:cons "proposalSummary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'proposer))
      (common-lisp:list
       (common-lisp:cons "proposer"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "startTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          agreement-view-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype agreement-view-summary-list ()
   '(trivial-types:proper-list agreement-view-summary))
 (common-lisp:defun make-agreement-view-summary-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list agreement-view-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype boolean () 'common-lisp:boolean)
(common-lisp:deftype bounded-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass byol-pricing-term common-lisp:nil
                       ((type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or unversioned-term-type
                                         common-lisp:null)
                         :accessor struct-shape-byol-pricing-term-type :shape
                         "UnversionedTermType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-byol-pricing-term
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'byol-pricing-term
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'byol-pricing-term 'make-byol-pricing-term))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input byol-pricing-term))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input byol-pricing-term))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input byol-pricing-term))
   common-lisp:nil))
(common-lisp:deftype catalog () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass configurable-upfront-pricing-term common-lisp:nil
                       ((configuration :initarg :configuration :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          configurable-upfront-pricing-term-configuration
                          common-lisp:null)
                         :accessor
                         struct-shape-configurable-upfront-pricing-term-configuration
                         :shape "ConfigurableUpfrontPricingTermConfiguration"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (currency-code :initarg :currency-code :initform
                         common-lisp:nil :type
                         (common-lisp:or currency-code common-lisp:null)
                         :accessor
                         struct-shape-configurable-upfront-pricing-term-currency-code
                         :shape "CurrencyCode" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (rate-cards :initarg :rate-cards :initform
                         common-lisp:nil :type
                         (common-lisp:or configurable-upfront-rate-card-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-configurable-upfront-pricing-term-rate-cards
                         :shape "ConfigurableUpfrontRateCardList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or unversioned-term-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-configurable-upfront-pricing-term-type
                         :shape "UnversionedTermType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-configurable-upfront-pricing-term
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'configurable-upfront-pricing-term
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'configurable-upfront-pricing-term
                    'make-configurable-upfront-pricing-term))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          configurable-upfront-pricing-term))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          configurable-upfront-pricing-term))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration))
      (common-lisp:list
       (common-lisp:cons "configuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'currency-code))
      (common-lisp:list
       (common-lisp:cons "currencyCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rate-cards))
      (common-lisp:list
       (common-lisp:cons "rateCards"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          configurable-upfront-pricing-term))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass configurable-upfront-pricing-term-configuration
                       common-lisp:nil
                       ((dimensions :initarg :dimensions :initform
                         (common-lisp:error ":dimensions is required") :type
                         (common-lisp:or dimension-list common-lisp:null)
                         :accessor
                         struct-shape-configurable-upfront-pricing-term-configuration-dimensions
                         :shape "DimensionList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (selector-value :initarg :selector-value :initform
                         (common-lisp:error ":selectorvalue is required") :type
                         (common-lisp:or bounded-string common-lisp:null)
                         :accessor
                         struct-shape-configurable-upfront-pricing-term-configuration-selector-value
                         :shape "BoundedString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-configurable-upfront-pricing-term-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'configurable-upfront-pricing-term-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'configurable-upfront-pricing-term-configuration
                    'make-configurable-upfront-pricing-term-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          configurable-upfront-pricing-term-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          configurable-upfront-pricing-term-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dimensions))
      (common-lisp:list
       (common-lisp:cons "dimensions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'selector-value))
      (common-lisp:list
       (common-lisp:cons "selectorValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          configurable-upfront-pricing-term-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass configurable-upfront-rate-card-item common-lisp:nil
                       ((constraints :initarg :constraints :initform
                         common-lisp:nil :type
                         (common-lisp:or constraints common-lisp:null)
                         :accessor
                         struct-shape-configurable-upfront-rate-card-item-constraints
                         :shape "Constraints" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (rate-card :initarg :rate-card :initform
                         common-lisp:nil :type
                         (common-lisp:or rate-card-list common-lisp:null)
                         :accessor
                         struct-shape-configurable-upfront-rate-card-item-rate-card
                         :shape "RateCardList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (selector :initarg :selector :initform common-lisp:nil
                         :type (common-lisp:or selector common-lisp:null)
                         :accessor
                         struct-shape-configurable-upfront-rate-card-item-selector
                         :shape "Selector" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-configurable-upfront-rate-card-item
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'configurable-upfront-rate-card-item
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'configurable-upfront-rate-card-item
                    'make-configurable-upfront-rate-card-item))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          configurable-upfront-rate-card-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          configurable-upfront-rate-card-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'constraints))
      (common-lisp:list
       (common-lisp:cons "constraints"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rate-card))
      (common-lisp:list
       (common-lisp:cons "rateCard"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'selector))
      (common-lisp:list
       (common-lisp:cons "selector"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          configurable-upfront-rate-card-item))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype configurable-upfront-rate-card-list ()
   '(trivial-types:proper-list configurable-upfront-rate-card-item))
 (common-lisp:defun make-configurable-upfront-rate-card-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            configurable-upfront-rate-card-item))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass constraints common-lisp:nil
                       ((multiple-dimension-selection :initarg
                         :multiple-dimension-selection :initform
                         common-lisp:nil :type
                         (common-lisp:or bounded-string common-lisp:null)
                         :accessor
                         struct-shape-constraints-multiple-dimension-selection
                         :shape "BoundedString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (quantity-configuration :initarg
                         :quantity-configuration :initform common-lisp:nil
                         :type (common-lisp:or bounded-string common-lisp:null)
                         :accessor
                         struct-shape-constraints-quantity-configuration :shape
                         "BoundedString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-constraints
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'constraints
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'constraints 'make-constraints))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input constraints))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input constraints))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'multiple-dimension-selection))
      (common-lisp:list
       (common-lisp:cons "multipleDimensionSelection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'quantity-configuration))
      (common-lisp:list
       (common-lisp:cons "quantityConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input constraints))
   common-lisp:nil))
(common-lisp:deftype currency-code () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass describe-agreement-input common-lisp:nil
                       ((agreement-id :initarg :agreement-id :initform
                         (common-lisp:error ":agreementid is required") :type
                         (common-lisp:or resource-id common-lisp:null)
                         :accessor
                         struct-shape-describe-agreement-input-agreement-id
                         :shape "ResourceId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-agreement-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-agreement-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-agreement-input 'make-describe-agreement-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-agreement-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-agreement-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'agreement-id))
      (common-lisp:list
       (common-lisp:cons "agreementId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-agreement-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-agreement-output common-lisp:nil
                       ((acceptance-time :initarg :acceptance-time :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-describe-agreement-output-acceptance-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (acceptor :initarg :acceptor :initform common-lisp:nil
                         :type (common-lisp:or acceptor common-lisp:null)
                         :accessor
                         struct-shape-describe-agreement-output-acceptor :shape
                         "Acceptor" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (agreement-id :initarg :agreement-id :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-id common-lisp:null)
                         :accessor
                         struct-shape-describe-agreement-output-agreement-id
                         :shape "ResourceId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (agreement-type :initarg :agreement-type :initform
                         common-lisp:nil :type
                         (common-lisp:or agreement-type common-lisp:null)
                         :accessor
                         struct-shape-describe-agreement-output-agreement-type
                         :shape "AgreementType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (end-time :initarg :end-time :initform common-lisp:nil
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         struct-shape-describe-agreement-output-end-time :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (estimated-charges :initarg :estimated-charges
                         :initform common-lisp:nil :type
                         (common-lisp:or estimated-charges common-lisp:null)
                         :accessor
                         struct-shape-describe-agreement-output-estimated-charges
                         :shape "EstimatedCharges" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (proposal-summary :initarg :proposal-summary :initform
                         common-lisp:nil :type
                         (common-lisp:or proposal-summary common-lisp:null)
                         :accessor
                         struct-shape-describe-agreement-output-proposal-summary
                         :shape "ProposalSummary" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (proposer :initarg :proposer :initform common-lisp:nil
                         :type (common-lisp:or proposer common-lisp:null)
                         :accessor
                         struct-shape-describe-agreement-output-proposer :shape
                         "Proposer" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (start-time :initarg :start-time :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-describe-agreement-output-start-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or agreement-status common-lisp:null)
                         :accessor
                         struct-shape-describe-agreement-output-status :shape
                         "AgreementStatus" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-agreement-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-agreement-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-agreement-output
                    'make-describe-agreement-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-agreement-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-agreement-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'acceptance-time))
      (common-lisp:list
       (common-lisp:cons "acceptanceTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'acceptor))
      (common-lisp:list
       (common-lisp:cons "acceptor"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'agreement-id))
      (common-lisp:list
       (common-lisp:cons "agreementId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'agreement-type))
      (common-lisp:list
       (common-lisp:cons "agreementType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "endTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'estimated-charges))
      (common-lisp:list
       (common-lisp:cons "estimatedCharges"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'proposal-summary))
      (common-lisp:list
       (common-lisp:cons "proposalSummary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'proposer))
      (common-lisp:list
       (common-lisp:cons "proposer"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "startTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-agreement-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass dimension common-lisp:nil
                       ((dimension-key :initarg :dimension-key :initform
                         (common-lisp:error ":dimensionkey is required") :type
                         (common-lisp:or bounded-string common-lisp:null)
                         :accessor struct-shape-dimension-dimension-key :shape
                         "BoundedString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dimension-value :initarg :dimension-value :initform
                         (common-lisp:error ":dimensionvalue is required")
                         :type
                         (common-lisp:or zero-value-integer common-lisp:null)
                         :accessor struct-shape-dimension-dimension-value
                         :shape "ZeroValueInteger" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-dimension
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'dimension
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'dimension 'make-dimension))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input dimension))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input dimension))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dimension-key))
      (common-lisp:list
       (common-lisp:cons "dimensionKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dimension-value))
      (common-lisp:list
       (common-lisp:cons "dimensionValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input dimension))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype dimension-list () '(trivial-types:proper-list dimension))
 (common-lisp:defun make-dimension-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list dimension))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass document-item common-lisp:nil
                       ((type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or bounded-string common-lisp:null)
                         :accessor struct-shape-document-item-type :shape
                         "BoundedString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (url :initarg :url :initform common-lisp:nil :type
                         (common-lisp:or bounded-string common-lisp:null)
                         :accessor struct-shape-document-item-url :shape
                         "BoundedString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (version :initarg :version :initform common-lisp:nil
                         :type (common-lisp:or bounded-string common-lisp:null)
                         :accessor struct-shape-document-item-version :shape
                         "BoundedString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-document-item
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'document-item
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'document-item 'make-document-item))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input document-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input document-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'url))
      (common-lisp:list
       (common-lisp:cons "url"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input document-item))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype document-list ()
   '(trivial-types:proper-list document-item))
 (common-lisp:defun make-document-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list document-item))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass estimated-charges common-lisp:nil
                       ((agreement-value :initarg :agreement-value :initform
                         common-lisp:nil :type
                         (common-lisp:or bounded-string common-lisp:null)
                         :accessor
                         struct-shape-estimated-charges-agreement-value :shape
                         "BoundedString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (currency-code :initarg :currency-code :initform
                         common-lisp:nil :type
                         (common-lisp:or currency-code common-lisp:null)
                         :accessor struct-shape-estimated-charges-currency-code
                         :shape "CurrencyCode" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-estimated-charges
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'estimated-charges
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'estimated-charges 'make-estimated-charges))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input estimated-charges))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input estimated-charges))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'agreement-value))
      (common-lisp:list
       (common-lisp:cons "agreementValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'currency-code))
      (common-lisp:list
       (common-lisp:cons "currencyCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input estimated-charges))
   common-lisp:nil))
(common-lisp:deftype exception-message () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass filter common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or filter-name common-lisp:null)
                         :accessor struct-shape-filter-name :shape "FilterName"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (values :initarg :values :initform common-lisp:nil
                         :type
                         (common-lisp:or filter-value-list common-lisp:null)
                         :accessor struct-shape-filter-values :shape
                         "FilterValueList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-filter
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'filter
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'filter 'make-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype filter-list () '(trivial-types:proper-list filter))
 (common-lisp:defun make-filter-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list filter))
   aws-sdk/generator/shape::members))
(common-lisp:deftype filter-name () 'common-lisp:string)
(common-lisp:deftype filter-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype filter-value-list ()
   '(trivial-types:proper-list filter-value))
 (common-lisp:defun make-filter-value-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list filter-value))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass fixed-upfront-pricing-term common-lisp:nil
                       ((currency-code :initarg :currency-code :initform
                         common-lisp:nil :type
                         (common-lisp:or currency-code common-lisp:null)
                         :accessor
                         struct-shape-fixed-upfront-pricing-term-currency-code
                         :shape "CurrencyCode" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (duration :initarg :duration :initform common-lisp:nil
                         :type (common-lisp:or bounded-string common-lisp:null)
                         :accessor
                         struct-shape-fixed-upfront-pricing-term-duration
                         :shape "BoundedString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (grants :initarg :grants :initform common-lisp:nil
                         :type (common-lisp:or grant-list common-lisp:null)
                         :accessor
                         struct-shape-fixed-upfront-pricing-term-grants :shape
                         "GrantList" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (price :initarg :price :initform common-lisp:nil :type
                         (common-lisp:or bounded-string common-lisp:null)
                         :accessor
                         struct-shape-fixed-upfront-pricing-term-price :shape
                         "BoundedString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or unversioned-term-type
                                         common-lisp:null)
                         :accessor struct-shape-fixed-upfront-pricing-term-type
                         :shape "UnversionedTermType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-fixed-upfront-pricing-term
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'fixed-upfront-pricing-term
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'fixed-upfront-pricing-term
                    'make-fixed-upfront-pricing-term))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          fixed-upfront-pricing-term))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          fixed-upfront-pricing-term))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'currency-code))
      (common-lisp:list
       (common-lisp:cons "currencyCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'duration))
      (common-lisp:list
       (common-lisp:cons "duration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grants))
      (common-lisp:list
       (common-lisp:cons "grants"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'price))
      (common-lisp:list
       (common-lisp:cons "price"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          fixed-upfront-pricing-term))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass free-trial-pricing-term common-lisp:nil
                       ((duration :initarg :duration :initform common-lisp:nil
                         :type (common-lisp:or bounded-string common-lisp:null)
                         :accessor
                         struct-shape-free-trial-pricing-term-duration :shape
                         "BoundedString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (grants :initarg :grants :initform common-lisp:nil
                         :type (common-lisp:or grant-list common-lisp:null)
                         :accessor struct-shape-free-trial-pricing-term-grants
                         :shape "GrantList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or unversioned-term-type
                                         common-lisp:null)
                         :accessor struct-shape-free-trial-pricing-term-type
                         :shape "UnversionedTermType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-free-trial-pricing-term
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'free-trial-pricing-term
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'free-trial-pricing-term 'make-free-trial-pricing-term))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          free-trial-pricing-term))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          free-trial-pricing-term))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'duration))
      (common-lisp:list
       (common-lisp:cons "duration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grants))
      (common-lisp:list
       (common-lisp:cons "grants"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          free-trial-pricing-term))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-agreement-terms-input common-lisp:nil
                       ((agreement-id :initarg :agreement-id :initform
                         (common-lisp:error ":agreementid is required") :type
                         (common-lisp:or resource-id common-lisp:null)
                         :accessor
                         struct-shape-get-agreement-terms-input-agreement-id
                         :shape "ResourceId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-get-agreement-terms-input-max-results
                         :shape "MaxResults" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-get-agreement-terms-input-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-agreement-terms-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-agreement-terms-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-agreement-terms-input
                    'make-get-agreement-terms-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-agreement-terms-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-agreement-terms-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'agreement-id))
      (common-lisp:list
       (common-lisp:cons "agreementId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-agreement-terms-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-agreement-terms-output common-lisp:nil
                       ((accepted-terms :initarg :accepted-terms :initform
                         common-lisp:nil :type
                         (common-lisp:or accepted-term-list common-lisp:null)
                         :accessor
                         struct-shape-get-agreement-terms-output-accepted-terms
                         :shape "AcceptedTermList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-get-agreement-terms-output-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-agreement-terms-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-agreement-terms-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-agreement-terms-output
                    'make-get-agreement-terms-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-agreement-terms-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-agreement-terms-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accepted-terms))
      (common-lisp:list
       (common-lisp:cons "acceptedTerms"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-agreement-terms-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass grant-item common-lisp:nil
                       ((dimension-key :initarg :dimension-key :initform
                         common-lisp:nil :type
                         (common-lisp:or bounded-string common-lisp:null)
                         :accessor struct-shape-grant-item-dimension-key :shape
                         "BoundedString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-quantity :initarg :max-quantity :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          positive-integer-with-default-value-one
                          common-lisp:null)
                         :accessor struct-shape-grant-item-max-quantity :shape
                         "PositiveIntegerWithDefaultValueOne" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-grant-item
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'grant-item
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'grant-item 'make-grant-item))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input grant-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input grant-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dimension-key))
      (common-lisp:list
       (common-lisp:cons "dimensionKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-quantity))
      (common-lisp:list
       (common-lisp:cons "maxQuantity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input grant-item))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype grant-list () '(trivial-types:proper-list grant-item))
 (common-lisp:defun make-grant-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list grant-item))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition internal-server-exception
     (marketplace-agreement-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       internal-server-exception-message)
      (request-id :initarg :request-id :initform common-lisp:nil :reader
       internal-server-exception-request-id)))
 (common-lisp:export
  (common-lisp:list 'internal-server-exception
                    'internal-server-exception-message
                    'internal-server-exception-request-id)))
(common-lisp:progn
 (common-lisp:defclass legal-term common-lisp:nil
                       ((documents :initarg :documents :initform
                         common-lisp:nil :type
                         (common-lisp:or document-list common-lisp:null)
                         :accessor struct-shape-legal-term-documents :shape
                         "DocumentList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or unversioned-term-type
                                         common-lisp:null)
                         :accessor struct-shape-legal-term-type :shape
                         "UnversionedTermType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-legal-term
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'legal-term
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'legal-term 'make-legal-term))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input legal-term))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input legal-term))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'documents))
      (common-lisp:list
       (common-lisp:cons "documents"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input legal-term))
   common-lisp:nil))
(common-lisp:deftype max-results () 'common-lisp:integer)
(common-lisp:deftype next-token () 'common-lisp:string)
(common-lisp:deftype offer-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass payment-schedule-term common-lisp:nil
                       ((currency-code :initarg :currency-code :initform
                         common-lisp:nil :type
                         (common-lisp:or currency-code common-lisp:null)
                         :accessor
                         struct-shape-payment-schedule-term-currency-code
                         :shape "CurrencyCode" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (schedule :initarg :schedule :initform common-lisp:nil
                         :type (common-lisp:or schedule-list common-lisp:null)
                         :accessor struct-shape-payment-schedule-term-schedule
                         :shape "ScheduleList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or unversioned-term-type
                                         common-lisp:null)
                         :accessor struct-shape-payment-schedule-term-type
                         :shape "UnversionedTermType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-payment-schedule-term
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'payment-schedule-term
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'payment-schedule-term 'make-payment-schedule-term))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          payment-schedule-term))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          payment-schedule-term))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'currency-code))
      (common-lisp:list
       (common-lisp:cons "currencyCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schedule))
      (common-lisp:list
       (common-lisp:cons "schedule"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          payment-schedule-term))
   common-lisp:nil))
(common-lisp:deftype positive-integer-with-default-value-one ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass proposal-summary common-lisp:nil
                       ((offer-id :initarg :offer-id :initform common-lisp:nil
                         :type (common-lisp:or offer-id common-lisp:null)
                         :accessor struct-shape-proposal-summary-offer-id
                         :shape "OfferId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (resources :initarg :resources :initform
                         common-lisp:nil :type
                         (common-lisp:or resources common-lisp:null) :accessor
                         struct-shape-proposal-summary-resources :shape
                         "Resources" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-proposal-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'proposal-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'proposal-summary 'make-proposal-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input proposal-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input proposal-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'offer-id))
      (common-lisp:list
       (common-lisp:cons "offerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resources))
      (common-lisp:list
       (common-lisp:cons "resources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input proposal-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass proposer common-lisp:nil
                       ((account-id :initarg :account-id :initform
                         common-lisp:nil :type
                         (common-lisp:or awsaccount-id common-lisp:null)
                         :accessor struct-shape-proposer-account-id :shape
                         "AWSAccountId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-proposer
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'proposer
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'proposer 'make-proposer))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input proposer))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input proposer))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "accountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input proposer))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass rate-card-item common-lisp:nil
                       ((dimension-key :initarg :dimension-key :initform
                         common-lisp:nil :type
                         (common-lisp:or bounded-string common-lisp:null)
                         :accessor struct-shape-rate-card-item-dimension-key
                         :shape "BoundedString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (price :initarg :price :initform common-lisp:nil :type
                         (common-lisp:or bounded-string common-lisp:null)
                         :accessor struct-shape-rate-card-item-price :shape
                         "BoundedString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-rate-card-item
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'rate-card-item
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'rate-card-item 'make-rate-card-item))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input rate-card-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input rate-card-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dimension-key))
      (common-lisp:list
       (common-lisp:cons "dimensionKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'price))
      (common-lisp:list
       (common-lisp:cons "price"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input rate-card-item))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype rate-card-list ()
   '(trivial-types:proper-list rate-card-item))
 (common-lisp:defun make-rate-card-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list rate-card-item))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass recurring-payment-term common-lisp:nil
                       ((billing-period :initarg :billing-period :initform
                         common-lisp:nil :type
                         (common-lisp:or bounded-string common-lisp:null)
                         :accessor
                         struct-shape-recurring-payment-term-billing-period
                         :shape "BoundedString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (currency-code :initarg :currency-code :initform
                         common-lisp:nil :type
                         (common-lisp:or currency-code common-lisp:null)
                         :accessor
                         struct-shape-recurring-payment-term-currency-code
                         :shape "CurrencyCode" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (price :initarg :price :initform common-lisp:nil :type
                         (common-lisp:or bounded-string common-lisp:null)
                         :accessor struct-shape-recurring-payment-term-price
                         :shape "BoundedString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or unversioned-term-type
                                         common-lisp:null)
                         :accessor struct-shape-recurring-payment-term-type
                         :shape "UnversionedTermType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-recurring-payment-term
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'recurring-payment-term
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'recurring-payment-term 'make-recurring-payment-term))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          recurring-payment-term))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          recurring-payment-term))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'billing-period))
      (common-lisp:list
       (common-lisp:cons "billingPeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'currency-code))
      (common-lisp:list
       (common-lisp:cons "currencyCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'price))
      (common-lisp:list
       (common-lisp:cons "price"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          recurring-payment-term))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass renewal-term common-lisp:nil
                       ((configuration :initarg :configuration :initform
                         common-lisp:nil :type
                         (common-lisp:or renewal-term-configuration
                                         common-lisp:null)
                         :accessor struct-shape-renewal-term-configuration
                         :shape "RenewalTermConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or unversioned-term-type
                                         common-lisp:null)
                         :accessor struct-shape-renewal-term-type :shape
                         "UnversionedTermType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-renewal-term
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'renewal-term
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'renewal-term 'make-renewal-term))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input renewal-term))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input renewal-term))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration))
      (common-lisp:list
       (common-lisp:cons "configuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input renewal-term))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass renewal-term-configuration common-lisp:nil
                       ((enable-auto-renew :initarg :enable-auto-renew
                         :initform
                         (common-lisp:error ":enableautorenew is required")
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         struct-shape-renewal-term-configuration-enable-auto-renew
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-renewal-term-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'renewal-term-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'renewal-term-configuration
                    'make-renewal-term-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          renewal-term-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          renewal-term-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enable-auto-renew))
      (common-lisp:list
       (common-lisp:cons "enableAutoRenew"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          renewal-term-configuration))
   common-lisp:nil))
(common-lisp:deftype request-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass resource common-lisp:nil
                       ((id :initarg :id :initform common-lisp:nil :type
                         (common-lisp:or resource-id common-lisp:null)
                         :accessor struct-shape-resource-id :shape "ResourceId"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or agreement-resource-type
                                         common-lisp:null)
                         :accessor struct-shape-resource-type :shape
                         "AgreementResourceType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-resource
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'resource
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'resource 'make-resource))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input resource))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input resource))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input resource))
   common-lisp:nil))
(common-lisp:deftype resource-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-exception
     (marketplace-agreement-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-not-found-exception-message)
      (request-id :initarg :request-id :initform common-lisp:nil :reader
       resource-not-found-exception-request-id)
      (resource-id :initarg :resource-id :initform common-lisp:nil :reader
       resource-not-found-exception-resource-id)
      (resource-type :initarg :resource-type :initform common-lisp:nil :reader
       resource-not-found-exception-resource-type)))
 (common-lisp:export
  (common-lisp:list 'resource-not-found-exception
                    'resource-not-found-exception-message
                    'resource-not-found-exception-request-id
                    'resource-not-found-exception-resource-id
                    'resource-not-found-exception-resource-type)))
(common-lisp:deftype resource-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype resources () '(trivial-types:proper-list resource))
 (common-lisp:defun make-resources
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list resource))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass schedule-item common-lisp:nil
                       ((charge-amount :initarg :charge-amount :initform
                         common-lisp:nil :type
                         (common-lisp:or bounded-string common-lisp:null)
                         :accessor struct-shape-schedule-item-charge-amount
                         :shape "BoundedString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (charge-date :initarg :charge-date :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-schedule-item-charge-date :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-schedule-item
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'schedule-item
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'schedule-item 'make-schedule-item))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input schedule-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input schedule-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'charge-amount))
      (common-lisp:list
       (common-lisp:cons "chargeAmount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'charge-date))
      (common-lisp:list
       (common-lisp:cons "chargeDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input schedule-item))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype schedule-list ()
   '(trivial-types:proper-list schedule-item))
 (common-lisp:defun make-schedule-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list schedule-item))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass search-agreements-input common-lisp:nil
                       ((catalog :initarg :catalog :initform common-lisp:nil
                         :type (common-lisp:or catalog common-lisp:null)
                         :accessor struct-shape-search-agreements-input-catalog
                         :shape "Catalog" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (filters :initarg :filters :initform common-lisp:nil
                         :type (common-lisp:or filter-list common-lisp:null)
                         :accessor struct-shape-search-agreements-input-filters
                         :shape "FilterList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-search-agreements-input-max-results
                         :shape "MaxResults" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-search-agreements-input-next-token :shape
                         "NextToken" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (sort :initarg :sort :initform common-lisp:nil :type
                         (common-lisp:or sort common-lisp:null) :accessor
                         struct-shape-search-agreements-input-sort :shape
                         "Sort" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-search-agreements-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'search-agreements-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'search-agreements-input 'make-search-agreements-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          search-agreements-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          search-agreements-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog))
      (common-lisp:list
       (common-lisp:cons "catalog"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort))
      (common-lisp:list
       (common-lisp:cons "sort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          search-agreements-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass search-agreements-output common-lisp:nil
                       ((agreement-view-summaries :initarg
                         :agreement-view-summaries :initform common-lisp:nil
                         :type
                         (common-lisp:or agreement-view-summary-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-search-agreements-output-agreement-view-summaries
                         :shape "AgreementViewSummaryList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-search-agreements-output-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-search-agreements-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'search-agreements-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'search-agreements-output 'make-search-agreements-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          search-agreements-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          search-agreements-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'agreement-view-summaries))
      (common-lisp:list
       (common-lisp:cons "agreementViewSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          search-agreements-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass selector common-lisp:nil
                       ((type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or bounded-string common-lisp:null)
                         :accessor struct-shape-selector-type :shape
                         "BoundedString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (value :initarg :value :initform common-lisp:nil :type
                         (common-lisp:or bounded-string common-lisp:null)
                         :accessor struct-shape-selector-value :shape
                         "BoundedString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-selector
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'selector
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'selector 'make-selector))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input selector))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input selector))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input selector))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass sort common-lisp:nil
                       ((sort-by :initarg :sort-by :initform common-lisp:nil
                         :type (common-lisp:or sort-by common-lisp:null)
                         :accessor struct-shape-sort-sort-by :shape "SortBy"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (sort-order :initarg :sort-order :initform
                         common-lisp:nil :type
                         (common-lisp:or sort-order common-lisp:null) :accessor
                         struct-shape-sort-sort-order :shape "SortOrder"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-sort (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'sort
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'sort 'make-sort))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input sort))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input sort))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-by))
      (common-lisp:list
       (common-lisp:cons "sortBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-order))
      (common-lisp:list
       (common-lisp:cons "sortOrder"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input sort))
   common-lisp:nil))
(common-lisp:deftype sort-by () 'common-lisp:string)
(common-lisp:deftype sort-order () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass support-term common-lisp:nil
                       ((refund-policy :initarg :refund-policy :initform
                         common-lisp:nil :type
                         (common-lisp:or bounded-string common-lisp:null)
                         :accessor struct-shape-support-term-refund-policy
                         :shape "BoundedString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or unversioned-term-type
                                         common-lisp:null)
                         :accessor struct-shape-support-term-type :shape
                         "UnversionedTermType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-support-term
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'support-term
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'support-term 'make-support-term))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input support-term))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input support-term))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'refund-policy))
      (common-lisp:list
       (common-lisp:cons "refundPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input support-term))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition throttling-exception
     (marketplace-agreement-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       throttling-exception-message)
      (request-id :initarg :request-id :initform common-lisp:nil :reader
       throttling-exception-request-id)))
 (common-lisp:export
  (common-lisp:list 'throttling-exception 'throttling-exception-message
                    'throttling-exception-request-id)))
(common-lisp:deftype timestamp () 'common-lisp:string)
(common-lisp:deftype unversioned-term-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass usage-based-pricing-term common-lisp:nil
                       ((currency-code :initarg :currency-code :initform
                         common-lisp:nil :type
                         (common-lisp:or currency-code common-lisp:null)
                         :accessor
                         struct-shape-usage-based-pricing-term-currency-code
                         :shape "CurrencyCode" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (rate-cards :initarg :rate-cards :initform
                         common-lisp:nil :type
                         (common-lisp:or usage-based-rate-card-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-usage-based-pricing-term-rate-cards
                         :shape "UsageBasedRateCardList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or unversioned-term-type
                                         common-lisp:null)
                         :accessor struct-shape-usage-based-pricing-term-type
                         :shape "UnversionedTermType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-usage-based-pricing-term
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'usage-based-pricing-term
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'usage-based-pricing-term 'make-usage-based-pricing-term))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          usage-based-pricing-term))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          usage-based-pricing-term))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'currency-code))
      (common-lisp:list
       (common-lisp:cons "currencyCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rate-cards))
      (common-lisp:list
       (common-lisp:cons "rateCards"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          usage-based-pricing-term))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass usage-based-rate-card-item common-lisp:nil
                       ((rate-card :initarg :rate-card :initform
                         common-lisp:nil :type
                         (common-lisp:or rate-card-list common-lisp:null)
                         :accessor
                         struct-shape-usage-based-rate-card-item-rate-card
                         :shape "RateCardList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-usage-based-rate-card-item
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'usage-based-rate-card-item
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'usage-based-rate-card-item
                    'make-usage-based-rate-card-item))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          usage-based-rate-card-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          usage-based-rate-card-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rate-card))
      (common-lisp:list
       (common-lisp:cons "rateCard"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          usage-based-rate-card-item))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype usage-based-rate-card-list ()
   '(trivial-types:proper-list usage-based-rate-card-item))
 (common-lisp:defun make-usage-based-rate-card-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            usage-based-rate-card-item))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition validation-exception
     (marketplace-agreement-error)
     ((fields :initarg :fields :initform common-lisp:nil :reader
       validation-exception-fields)
      (message :initarg :message :initform common-lisp:nil :reader
       validation-exception-message)
      (reason :initarg :reason :initform common-lisp:nil :reader
       validation-exception-reason)
      (request-id :initarg :request-id :initform common-lisp:nil :reader
       validation-exception-request-id)))
 (common-lisp:export
  (common-lisp:list 'validation-exception 'validation-exception-fields
                    'validation-exception-message 'validation-exception-reason
                    'validation-exception-request-id)))
(common-lisp:progn
 (common-lisp:defclass validation-exception-field common-lisp:nil
                       ((message :initarg :message :initform
                         (common-lisp:error ":message is required") :type
                         (common-lisp:or bounded-string common-lisp:null)
                         :accessor
                         struct-shape-validation-exception-field-message :shape
                         "BoundedString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or bounded-string common-lisp:null)
                         :accessor struct-shape-validation-exception-field-name
                         :shape "BoundedString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-validation-exception-field
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'validation-exception-field
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'validation-exception-field
                    'make-validation-exception-field))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          validation-exception-field))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          validation-exception-field))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          validation-exception-field))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype validation-exception-field-list ()
   '(trivial-types:proper-list validation-exception-field))
 (common-lisp:defun make-validation-exception-field-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            validation-exception-field))
   aws-sdk/generator/shape::members))
(common-lisp:deftype validation-exception-reason () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass validity-term common-lisp:nil
                       ((agreement-duration :initarg :agreement-duration
                         :initform common-lisp:nil :type
                         (common-lisp:or bounded-string common-lisp:null)
                         :accessor
                         struct-shape-validity-term-agreement-duration :shape
                         "BoundedString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (agreement-end-date :initarg :agreement-end-date
                         :initform common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-validity-term-agreement-end-date :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (agreement-start-date :initarg :agreement-start-date
                         :initform common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-validity-term-agreement-start-date :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or unversioned-term-type
                                         common-lisp:null)
                         :accessor struct-shape-validity-term-type :shape
                         "UnversionedTermType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-validity-term
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'validity-term
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'validity-term 'make-validity-term))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input validity-term))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input validity-term))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'agreement-duration))
      (common-lisp:list
       (common-lisp:cons "agreementDuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'agreement-end-date))
      (common-lisp:list
       (common-lisp:cons "agreementEndDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'agreement-start-date))
      (common-lisp:list
       (common-lisp:cons "agreementStartDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input validity-term))
   common-lisp:nil))
(common-lisp:deftype zero-value-integer () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defun describe-agreement
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key agreement-id)
   (common-lisp:declare (common-lisp:ignorable agreement-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-agreement-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'marketplace-agreement-request aws-sdk/generator/operation::input
        "POST" "/" "DescribeAgreement"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-agreement))
(common-lisp:progn
 (common-lisp:defun get-agreement-terms
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key agreement-id max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable agreement-id max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-agreement-terms-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'marketplace-agreement-request aws-sdk/generator/operation::input
        "POST" "/" "GetAgreementTerms"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-agreement-terms))
(common-lisp:progn
 (common-lisp:defun search-agreements
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key catalog filters max-results next-token
                     sort)
   (common-lisp:declare
    (common-lisp:ignorable catalog filters max-results next-token sort))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-search-agreements-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'marketplace-agreement-request aws-sdk/generator/operation::input
        "POST" "/" "SearchAgreements"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'search-agreements))
