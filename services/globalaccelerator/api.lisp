;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/globalaccelerator/api
  (:use)
  (:nicknames #:aws/globalaccelerator)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/json-request)
  (:import-from #:aws-sdk/rest-json-request)
  (:import-from #:aws-sdk/rest-xml-request)
  (:import-from #:aws-sdk/query-request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/globalaccelerator/api)
(common-lisp:progn
 (common-lisp:define-condition globalaccelerator-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'globalaccelerator-error))
(common-lisp:progn
 (common-lisp:defclass globalaccelerator-request
                       (aws-sdk/json-request:json-request) common-lisp:nil
                       (:default-initargs :service "globalaccelerator"
                        :api-version "2018-08-08" :host-prefix
                        "globalaccelerator" :signing-name "globalaccelerator"
                        :global-host common-lisp:nil :target-prefix
                        "GlobalAccelerator_V20180706" :json-version "1.1"))
 (common-lisp:export 'globalaccelerator-request))
(common-lisp:defvar *error-map*
  '(("AcceleratorNotDisabledException" . accelerator-not-disabled-exception)
    ("AcceleratorNotFoundException" . accelerator-not-found-exception)
    ("AccessDeniedException" . access-denied-exception)
    ("AssociatedEndpointGroupFoundException"
     . associated-endpoint-group-found-exception)
    ("AssociatedListenerFoundException" . associated-listener-found-exception)
    ("AttachmentNotFoundException" . attachment-not-found-exception)
    ("ByoipCidrNotFoundException" . byoip-cidr-not-found-exception)
    ("ConflictException" . conflict-exception)
    ("EndpointAlreadyExistsException" . endpoint-already-exists-exception)
    ("EndpointGroupAlreadyExistsException"
     . endpoint-group-already-exists-exception)
    ("EndpointGroupNotFoundException" . endpoint-group-not-found-exception)
    ("EndpointNotFoundException" . endpoint-not-found-exception)
    ("IncorrectCidrStateException" . incorrect-cidr-state-exception)
    ("InternalServiceErrorException" . internal-service-error-exception)
    ("InvalidArgumentException" . invalid-argument-exception)
    ("InvalidNextTokenException" . invalid-next-token-exception)
    ("InvalidPortRangeException" . invalid-port-range-exception)
    ("LimitExceededException" . limit-exceeded-exception)
    ("ListenerNotFoundException" . listener-not-found-exception)
    ("TransactionInProgressException" . transaction-in-progress-exception)))
(common-lisp:progn
 (common-lisp:defclass accelerator common-lisp:nil
                       ((accelerator-arn :initarg :accelerator-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor struct-shape-accelerator-accelerator-arn
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor struct-shape-accelerator-name :shape
                         "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (ip-address-type :initarg :ip-address-type :initform
                         common-lisp:nil :type
                         (common-lisp:or ip-address-type common-lisp:null)
                         :accessor struct-shape-accelerator-ip-address-type
                         :shape "IpAddressType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (enabled :initarg :enabled :initform common-lisp:nil
                         :type
                         (common-lisp:or generic-boolean common-lisp:null)
                         :accessor struct-shape-accelerator-enabled :shape
                         "GenericBoolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (ip-sets :initarg :ip-sets :initform common-lisp:nil
                         :type (common-lisp:or ip-sets common-lisp:null)
                         :accessor struct-shape-accelerator-ip-sets :shape
                         "IpSets" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (dns-name :initarg :dns-name :initform common-lisp:nil
                         :type (common-lisp:or generic-string common-lisp:null)
                         :accessor struct-shape-accelerator-dns-name :shape
                         "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or accelerator-status common-lisp:null)
                         :accessor struct-shape-accelerator-status :shape
                         "AcceleratorStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (created-time :initarg :created-time :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-accelerator-created-time :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (last-modified-time :initarg :last-modified-time
                         :initform common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-accelerator-last-modified-time :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (dual-stack-dns-name :initarg :dual-stack-dns-name
                         :initform common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor struct-shape-accelerator-dual-stack-dns-name
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (events :initarg :events :initform common-lisp:nil
                         :type
                         (common-lisp:or accelerator-events common-lisp:null)
                         :accessor struct-shape-accelerator-events :shape
                         "AcceleratorEvents" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-accelerator
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'accelerator
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'accelerator 'make-accelerator))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input accelerator))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input accelerator))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accelerator-arn))
      (common-lisp:list
       (common-lisp:cons "AcceleratorArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-address-type))
      (common-lisp:list
       (common-lisp:cons "IpAddressType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "Enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-sets))
      (common-lisp:list
       (common-lisp:cons "IpSets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dns-name))
      (common-lisp:list
       (common-lisp:cons "DnsName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-time))
      (common-lisp:list
       (common-lisp:cons "CreatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-time))
      (common-lisp:list
       (common-lisp:cons "LastModifiedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dual-stack-dns-name))
      (common-lisp:list
       (common-lisp:cons "DualStackDnsName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'events))
      (common-lisp:list
       (common-lisp:cons "Events"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input accelerator))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass accelerator-attributes common-lisp:nil
                       ((flow-logs-enabled :initarg :flow-logs-enabled
                         :initform common-lisp:nil :type
                         (common-lisp:or generic-boolean common-lisp:null)
                         :accessor
                         struct-shape-accelerator-attributes-flow-logs-enabled
                         :shape "GenericBoolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (flow-logs-s3bucket :initarg :flow-logs-s3bucket
                         :initform common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-accelerator-attributes-flow-logs-s3bucket
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (flow-logs-s3prefix :initarg :flow-logs-s3prefix
                         :initform common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-accelerator-attributes-flow-logs-s3prefix
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-accelerator-attributes
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'accelerator-attributes
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'accelerator-attributes 'make-accelerator-attributes))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          accelerator-attributes))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          accelerator-attributes))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'flow-logs-enabled))
      (common-lisp:list
       (common-lisp:cons "FlowLogsEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'flow-logs-s3bucket))
      (common-lisp:list
       (common-lisp:cons "FlowLogsS3Bucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'flow-logs-s3prefix))
      (common-lisp:list
       (common-lisp:cons "FlowLogsS3Prefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          accelerator-attributes))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass accelerator-event common-lisp:nil
                       ((message :initarg :message :initform common-lisp:nil
                         :type (common-lisp:or generic-string common-lisp:null)
                         :accessor struct-shape-accelerator-event-message
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (timestamp :initarg :timestamp :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-accelerator-event-timestamp :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-accelerator-event
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'accelerator-event
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'accelerator-event 'make-accelerator-event))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input accelerator-event))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input accelerator-event))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timestamp))
      (common-lisp:list
       (common-lisp:cons "Timestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input accelerator-event))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype accelerator-events ()
   '(trivial-types:proper-list accelerator-event))
 (common-lisp:defun make-accelerator-events
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list accelerator-event))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition accelerator-not-disabled-exception
     (globalaccelerator-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       accelerator-not-disabled-exception-message)))
 (common-lisp:export
  (common-lisp:list 'accelerator-not-disabled-exception
                    'accelerator-not-disabled-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition accelerator-not-found-exception
     (globalaccelerator-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       accelerator-not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'accelerator-not-found-exception
                    'accelerator-not-found-exception-message)))
(common-lisp:deftype accelerator-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype accelerators () '(trivial-types:proper-list accelerator))
 (common-lisp:defun make-accelerators
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list accelerator))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition access-denied-exception
     (globalaccelerator-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       access-denied-exception-message)))
 (common-lisp:export
  (common-lisp:list 'access-denied-exception 'access-denied-exception-message)))
(common-lisp:progn
 (common-lisp:defclass add-custom-routing-endpoints-request common-lisp:nil
                       ((endpoint-configurations :initarg
                         :endpoint-configurations :initform
                         (common-lisp:error
                          ":endpoint-configurations is required")
                         :type
                         (common-lisp:or custom-routing-endpoint-configurations
                                         common-lisp:null)
                         :accessor
                         struct-shape-add-custom-routing-endpoints-request-endpoint-configurations
                         :shape "CustomRoutingEndpointConfigurations" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (endpoint-group-arn :initarg :endpoint-group-arn
                         :initform
                         (common-lisp:error ":endpoint-group-arn is required")
                         :type (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-add-custom-routing-endpoints-request-endpoint-group-arn
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-add-custom-routing-endpoints-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'add-custom-routing-endpoints-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'add-custom-routing-endpoints-request
                    'make-add-custom-routing-endpoints-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          add-custom-routing-endpoints-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          add-custom-routing-endpoints-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'endpoint-configurations))
      (common-lisp:list
       (common-lisp:cons "EndpointConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-group-arn))
      (common-lisp:list
       (common-lisp:cons "EndpointGroupArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          add-custom-routing-endpoints-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass add-custom-routing-endpoints-response common-lisp:nil
                       ((endpoint-descriptions :initarg :endpoint-descriptions
                         :initform common-lisp:nil :type
                         (common-lisp:or custom-routing-endpoint-descriptions
                                         common-lisp:null)
                         :accessor
                         struct-shape-add-custom-routing-endpoints-response-endpoint-descriptions
                         :shape "CustomRoutingEndpointDescriptions" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (endpoint-group-arn :initarg :endpoint-group-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-add-custom-routing-endpoints-response-endpoint-group-arn
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-add-custom-routing-endpoints-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'add-custom-routing-endpoints-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'add-custom-routing-endpoints-response
                    'make-add-custom-routing-endpoints-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          add-custom-routing-endpoints-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          add-custom-routing-endpoints-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'endpoint-descriptions))
      (common-lisp:list
       (common-lisp:cons "EndpointDescriptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-group-arn))
      (common-lisp:list
       (common-lisp:cons "EndpointGroupArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          add-custom-routing-endpoints-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass add-endpoints-request common-lisp:nil
                       ((endpoint-configurations :initarg
                         :endpoint-configurations :initform
                         (common-lisp:error
                          ":endpoint-configurations is required")
                         :type
                         (common-lisp:or endpoint-configurations
                                         common-lisp:null)
                         :accessor
                         struct-shape-add-endpoints-request-endpoint-configurations
                         :shape "EndpointConfigurations" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (endpoint-group-arn :initarg :endpoint-group-arn
                         :initform
                         (common-lisp:error ":endpoint-group-arn is required")
                         :type (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-add-endpoints-request-endpoint-group-arn
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-add-endpoints-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'add-endpoints-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'add-endpoints-request 'make-add-endpoints-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          add-endpoints-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          add-endpoints-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'endpoint-configurations))
      (common-lisp:list
       (common-lisp:cons "EndpointConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-group-arn))
      (common-lisp:list
       (common-lisp:cons "EndpointGroupArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          add-endpoints-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass add-endpoints-response common-lisp:nil
                       ((endpoint-descriptions :initarg :endpoint-descriptions
                         :initform common-lisp:nil :type
                         (common-lisp:or endpoint-descriptions
                                         common-lisp:null)
                         :accessor
                         struct-shape-add-endpoints-response-endpoint-descriptions
                         :shape "EndpointDescriptions" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (endpoint-group-arn :initarg :endpoint-group-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-add-endpoints-response-endpoint-group-arn
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-add-endpoints-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'add-endpoints-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'add-endpoints-response 'make-add-endpoints-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          add-endpoints-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          add-endpoints-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'endpoint-descriptions))
      (common-lisp:list
       (common-lisp:cons "EndpointDescriptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-group-arn))
      (common-lisp:list
       (common-lisp:cons "EndpointGroupArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          add-endpoints-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass advertise-byoip-cidr-request common-lisp:nil
                       ((cidr :initarg :cidr :initform
                         (common-lisp:error ":cidr is required") :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-advertise-byoip-cidr-request-cidr :shape
                         "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-advertise-byoip-cidr-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'advertise-byoip-cidr-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'advertise-byoip-cidr-request
                    'make-advertise-byoip-cidr-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          advertise-byoip-cidr-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          advertise-byoip-cidr-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cidr))
      (common-lisp:list
       (common-lisp:cons "Cidr"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          advertise-byoip-cidr-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass advertise-byoip-cidr-response common-lisp:nil
                       ((byoip-cidr :initarg :byoip-cidr :initform
                         common-lisp:nil :type
                         (common-lisp:or byoip-cidr common-lisp:null) :accessor
                         struct-shape-advertise-byoip-cidr-response-byoip-cidr
                         :shape "ByoipCidr" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-advertise-byoip-cidr-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'advertise-byoip-cidr-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'advertise-byoip-cidr-response
                    'make-advertise-byoip-cidr-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          advertise-byoip-cidr-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          advertise-byoip-cidr-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'byoip-cidr))
      (common-lisp:list
       (common-lisp:cons "ByoipCidr"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          advertise-byoip-cidr-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass allow-custom-routing-traffic-request common-lisp:nil
                       ((endpoint-group-arn :initarg :endpoint-group-arn
                         :initform
                         (common-lisp:error ":endpoint-group-arn is required")
                         :type (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-allow-custom-routing-traffic-request-endpoint-group-arn
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (endpoint-id :initarg :endpoint-id :initform
                         (common-lisp:error ":endpoint-id is required") :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-allow-custom-routing-traffic-request-endpoint-id
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (destination-addresses :initarg :destination-addresses
                         :initform common-lisp:nil :type
                         (common-lisp:or destination-addresses
                                         common-lisp:null)
                         :accessor
                         struct-shape-allow-custom-routing-traffic-request-destination-addresses
                         :shape "DestinationAddresses" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (destination-ports :initarg :destination-ports
                         :initform common-lisp:nil :type
                         (common-lisp:or destination-ports common-lisp:null)
                         :accessor
                         struct-shape-allow-custom-routing-traffic-request-destination-ports
                         :shape "DestinationPorts" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (allow-all-traffic-to-endpoint :initarg
                         :allow-all-traffic-to-endpoint :initform
                         common-lisp:nil :type
                         (common-lisp:or generic-boolean common-lisp:null)
                         :accessor
                         struct-shape-allow-custom-routing-traffic-request-allow-all-traffic-to-endpoint
                         :shape "GenericBoolean" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-allow-custom-routing-traffic-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'allow-custom-routing-traffic-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'allow-custom-routing-traffic-request
                    'make-allow-custom-routing-traffic-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          allow-custom-routing-traffic-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          allow-custom-routing-traffic-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-group-arn))
      (common-lisp:list
       (common-lisp:cons "EndpointGroupArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-id))
      (common-lisp:list
       (common-lisp:cons "EndpointId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'destination-addresses))
      (common-lisp:list
       (common-lisp:cons "DestinationAddresses"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination-ports))
      (common-lisp:list
       (common-lisp:cons "DestinationPorts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'allow-all-traffic-to-endpoint))
      (common-lisp:list
       (common-lisp:cons "AllowAllTrafficToEndpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          allow-custom-routing-traffic-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition associated-endpoint-group-found-exception
     (globalaccelerator-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       associated-endpoint-group-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'associated-endpoint-group-found-exception
                    'associated-endpoint-group-found-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition associated-listener-found-exception
     (globalaccelerator-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       associated-listener-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'associated-listener-found-exception
                    'associated-listener-found-exception-message)))
(common-lisp:progn
 (common-lisp:defclass attachment common-lisp:nil
                       ((attachment-arn :initarg :attachment-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor struct-shape-attachment-attachment-arn
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or attachment-name common-lisp:null)
                         :accessor struct-shape-attachment-name :shape
                         "AttachmentName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (principals :initarg :principals :initform
                         common-lisp:nil :type
                         (common-lisp:or principals common-lisp:null) :accessor
                         struct-shape-attachment-principals :shape "Principals"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (resources :initarg :resources :initform
                         common-lisp:nil :type
                         (common-lisp:or resources common-lisp:null) :accessor
                         struct-shape-attachment-resources :shape "Resources"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (last-modified-time :initarg :last-modified-time
                         :initform common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-attachment-last-modified-time :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (created-time :initarg :created-time :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-attachment-created-time :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-attachment
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'attachment
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'attachment 'make-attachment))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input attachment))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input attachment))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attachment-arn))
      (common-lisp:list
       (common-lisp:cons "AttachmentArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'principals))
      (common-lisp:list
       (common-lisp:cons "Principals"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resources))
      (common-lisp:list
       (common-lisp:cons "Resources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-time))
      (common-lisp:list
       (common-lisp:cons "LastModifiedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-time))
      (common-lisp:list
       (common-lisp:cons "CreatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input attachment))
   common-lisp:nil))
(common-lisp:deftype attachment-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition attachment-not-found-exception
     (globalaccelerator-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       attachment-not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'attachment-not-found-exception
                    'attachment-not-found-exception-message)))
(common-lisp:progn
 (common-lisp:deftype attachments () '(trivial-types:proper-list attachment))
 (common-lisp:defun make-attachments
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list attachment))
   aws-sdk/generator/shape::members))
(common-lisp:deftype aws-account-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype aws-account-ids ()
   '(trivial-types:proper-list aws-account-id))
 (common-lisp:defun make-aws-account-ids
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list aws-account-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass byoip-cidr common-lisp:nil
                       ((cidr :initarg :cidr :initform common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor struct-shape-byoip-cidr-cidr :shape
                         "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (state :initarg :state :initform common-lisp:nil :type
                         (common-lisp:or byoip-cidr-state common-lisp:null)
                         :accessor struct-shape-byoip-cidr-state :shape
                         "ByoipCidrState" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (events :initarg :events :initform common-lisp:nil
                         :type
                         (common-lisp:or byoip-cidr-events common-lisp:null)
                         :accessor struct-shape-byoip-cidr-events :shape
                         "ByoipCidrEvents" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-byoip-cidr
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'byoip-cidr
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'byoip-cidr 'make-byoip-cidr))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input byoip-cidr))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input byoip-cidr))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cidr))
      (common-lisp:list
       (common-lisp:cons "Cidr"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'events))
      (common-lisp:list
       (common-lisp:cons "Events"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input byoip-cidr))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass byoip-cidr-event common-lisp:nil
                       ((message :initarg :message :initform common-lisp:nil
                         :type (common-lisp:or generic-string common-lisp:null)
                         :accessor struct-shape-byoip-cidr-event-message :shape
                         "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (timestamp :initarg :timestamp :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-byoip-cidr-event-timestamp :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-byoip-cidr-event
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'byoip-cidr-event
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'byoip-cidr-event 'make-byoip-cidr-event))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input byoip-cidr-event))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input byoip-cidr-event))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timestamp))
      (common-lisp:list
       (common-lisp:cons "Timestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input byoip-cidr-event))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype byoip-cidr-events ()
   '(trivial-types:proper-list byoip-cidr-event))
 (common-lisp:defun make-byoip-cidr-events
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list byoip-cidr-event))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition byoip-cidr-not-found-exception
     (globalaccelerator-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       byoip-cidr-not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'byoip-cidr-not-found-exception
                    'byoip-cidr-not-found-exception-message)))
(common-lisp:deftype byoip-cidr-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype byoip-cidrs () '(trivial-types:proper-list byoip-cidr))
 (common-lisp:defun make-byoip-cidrs
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list byoip-cidr))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass cidr-authorization-context common-lisp:nil
                       ((message :initarg :message :initform
                         (common-lisp:error ":message is required") :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-cidr-authorization-context-message :shape
                         "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (signature :initarg :signature :initform
                         (common-lisp:error ":signature is required") :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-cidr-authorization-context-signature
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-cidr-authorization-context
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'cidr-authorization-context
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'cidr-authorization-context
                    'make-cidr-authorization-context))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cidr-authorization-context))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cidr-authorization-context))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'signature))
      (common-lisp:list
       (common-lisp:cons "Signature"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cidr-authorization-context))
   common-lisp:nil))
(common-lisp:deftype client-affinity () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition conflict-exception
     (globalaccelerator-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       conflict-exception-message)))
 (common-lisp:export
  (common-lisp:list 'conflict-exception 'conflict-exception-message)))
(common-lisp:progn
 (common-lisp:defclass create-accelerator-request common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor struct-shape-create-accelerator-request-name
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (ip-address-type :initarg :ip-address-type :initform
                         common-lisp:nil :type
                         (common-lisp:or ip-address-type common-lisp:null)
                         :accessor
                         struct-shape-create-accelerator-request-ip-address-type
                         :shape "IpAddressType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (ip-addresses :initarg :ip-addresses :initform
                         common-lisp:nil :type
                         (common-lisp:or ip-addresses common-lisp:null)
                         :accessor
                         struct-shape-create-accelerator-request-ip-addresses
                         :shape "IpAddresses" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (enabled :initarg :enabled :initform common-lisp:nil
                         :type
                         (common-lisp:or generic-boolean common-lisp:null)
                         :accessor
                         struct-shape-create-accelerator-request-enabled :shape
                         "GenericBoolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (idempotency-token :initarg :idempotency-token
                         :initform
                         (common-lisp:error ":idempotency-token is required")
                         :type
                         (common-lisp:or idempotency-token common-lisp:null)
                         :accessor
                         struct-shape-create-accelerator-request-idempotency-token
                         :shape "IdempotencyToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         struct-shape-create-accelerator-request-tags :shape
                         "Tags" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-accelerator-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-accelerator-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-accelerator-request
                    'make-create-accelerator-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-accelerator-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-accelerator-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-address-type))
      (common-lisp:list
       (common-lisp:cons "IpAddressType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-addresses))
      (common-lisp:list
       (common-lisp:cons "IpAddresses"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "Enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'idempotency-token))
      (common-lisp:list
       (common-lisp:cons "IdempotencyToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-accelerator-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-accelerator-response common-lisp:nil
                       ((accelerator :initarg :accelerator :initform
                         common-lisp:nil :type
                         (common-lisp:or accelerator common-lisp:null)
                         :accessor
                         struct-shape-create-accelerator-response-accelerator
                         :shape "Accelerator" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-accelerator-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-accelerator-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-accelerator-response
                    'make-create-accelerator-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-accelerator-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-accelerator-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accelerator))
      (common-lisp:list
       (common-lisp:cons "Accelerator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-accelerator-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-cross-account-attachment-request common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or attachment-name common-lisp:null)
                         :accessor
                         struct-shape-create-cross-account-attachment-request-name
                         :shape "AttachmentName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (principals :initarg :principals :initform
                         common-lisp:nil :type
                         (common-lisp:or principals common-lisp:null) :accessor
                         struct-shape-create-cross-account-attachment-request-principals
                         :shape "Principals" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (resources :initarg :resources :initform
                         common-lisp:nil :type
                         (common-lisp:or resources common-lisp:null) :accessor
                         struct-shape-create-cross-account-attachment-request-resources
                         :shape "Resources" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (idempotency-token :initarg :idempotency-token
                         :initform
                         (common-lisp:error ":idempotency-token is required")
                         :type
                         (common-lisp:or idempotency-token common-lisp:null)
                         :accessor
                         struct-shape-create-cross-account-attachment-request-idempotency-token
                         :shape "IdempotencyToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         struct-shape-create-cross-account-attachment-request-tags
                         :shape "Tags" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-cross-account-attachment-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-cross-account-attachment-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-cross-account-attachment-request
                    'make-create-cross-account-attachment-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-cross-account-attachment-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-cross-account-attachment-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'principals))
      (common-lisp:list
       (common-lisp:cons "Principals"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resources))
      (common-lisp:list
       (common-lisp:cons "Resources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'idempotency-token))
      (common-lisp:list
       (common-lisp:cons "IdempotencyToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-cross-account-attachment-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-cross-account-attachment-response common-lisp:nil
                       ((cross-account-attachment :initarg
                         :cross-account-attachment :initform common-lisp:nil
                         :type (common-lisp:or attachment common-lisp:null)
                         :accessor
                         struct-shape-create-cross-account-attachment-response-cross-account-attachment
                         :shape "Attachment" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-cross-account-attachment-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-cross-account-attachment-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-cross-account-attachment-response
                    'make-create-cross-account-attachment-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-cross-account-attachment-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-cross-account-attachment-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cross-account-attachment))
      (common-lisp:list
       (common-lisp:cons "CrossAccountAttachment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-cross-account-attachment-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-custom-routing-accelerator-request
                       common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-create-custom-routing-accelerator-request-name
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (ip-address-type :initarg :ip-address-type :initform
                         common-lisp:nil :type
                         (common-lisp:or ip-address-type common-lisp:null)
                         :accessor
                         struct-shape-create-custom-routing-accelerator-request-ip-address-type
                         :shape "IpAddressType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (ip-addresses :initarg :ip-addresses :initform
                         common-lisp:nil :type
                         (common-lisp:or ip-addresses common-lisp:null)
                         :accessor
                         struct-shape-create-custom-routing-accelerator-request-ip-addresses
                         :shape "IpAddresses" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (enabled :initarg :enabled :initform common-lisp:nil
                         :type
                         (common-lisp:or generic-boolean common-lisp:null)
                         :accessor
                         struct-shape-create-custom-routing-accelerator-request-enabled
                         :shape "GenericBoolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (idempotency-token :initarg :idempotency-token
                         :initform
                         (common-lisp:error ":idempotency-token is required")
                         :type
                         (common-lisp:or idempotency-token common-lisp:null)
                         :accessor
                         struct-shape-create-custom-routing-accelerator-request-idempotency-token
                         :shape "IdempotencyToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         struct-shape-create-custom-routing-accelerator-request-tags
                         :shape "Tags" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-custom-routing-accelerator-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-custom-routing-accelerator-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-custom-routing-accelerator-request
                    'make-create-custom-routing-accelerator-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-custom-routing-accelerator-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-custom-routing-accelerator-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-address-type))
      (common-lisp:list
       (common-lisp:cons "IpAddressType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-addresses))
      (common-lisp:list
       (common-lisp:cons "IpAddresses"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "Enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'idempotency-token))
      (common-lisp:list
       (common-lisp:cons "IdempotencyToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-custom-routing-accelerator-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-custom-routing-accelerator-response
                       common-lisp:nil
                       ((accelerator :initarg :accelerator :initform
                         common-lisp:nil :type
                         (common-lisp:or custom-routing-accelerator
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-custom-routing-accelerator-response-accelerator
                         :shape "CustomRoutingAccelerator" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-custom-routing-accelerator-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-custom-routing-accelerator-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-custom-routing-accelerator-response
                    'make-create-custom-routing-accelerator-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-custom-routing-accelerator-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-custom-routing-accelerator-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accelerator))
      (common-lisp:list
       (common-lisp:cons "Accelerator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-custom-routing-accelerator-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-custom-routing-endpoint-group-request
                       common-lisp:nil
                       ((listener-arn :initarg :listener-arn :initform
                         (common-lisp:error ":listener-arn is required") :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-create-custom-routing-endpoint-group-request-listener-arn
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (endpoint-group-region :initarg :endpoint-group-region
                         :initform
                         (common-lisp:error
                          ":endpoint-group-region is required")
                         :type (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-create-custom-routing-endpoint-group-request-endpoint-group-region
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (destination-configurations :initarg
                         :destination-configurations :initform
                         (common-lisp:error
                          ":destination-configurations is required")
                         :type
                         (common-lisp:or
                          custom-routing-destination-configurations
                          common-lisp:null)
                         :accessor
                         struct-shape-create-custom-routing-endpoint-group-request-destination-configurations
                         :shape "CustomRoutingDestinationConfigurations"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (idempotency-token :initarg :idempotency-token
                         :initform
                         (common-lisp:error ":idempotency-token is required")
                         :type
                         (common-lisp:or idempotency-token common-lisp:null)
                         :accessor
                         struct-shape-create-custom-routing-endpoint-group-request-idempotency-token
                         :shape "IdempotencyToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-custom-routing-endpoint-group-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-custom-routing-endpoint-group-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-custom-routing-endpoint-group-request
                    'make-create-custom-routing-endpoint-group-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-custom-routing-endpoint-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-custom-routing-endpoint-group-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'listener-arn))
      (common-lisp:list
       (common-lisp:cons "ListenerArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'endpoint-group-region))
      (common-lisp:list
       (common-lisp:cons "EndpointGroupRegion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'destination-configurations))
      (common-lisp:list
       (common-lisp:cons "DestinationConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'idempotency-token))
      (common-lisp:list
       (common-lisp:cons "IdempotencyToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-custom-routing-endpoint-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-custom-routing-endpoint-group-response
                       common-lisp:nil
                       ((endpoint-group :initarg :endpoint-group :initform
                         common-lisp:nil :type
                         (common-lisp:or custom-routing-endpoint-group
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-custom-routing-endpoint-group-response-endpoint-group
                         :shape "CustomRoutingEndpointGroup" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-custom-routing-endpoint-group-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-custom-routing-endpoint-group-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-custom-routing-endpoint-group-response
                    'make-create-custom-routing-endpoint-group-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-custom-routing-endpoint-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-custom-routing-endpoint-group-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-group))
      (common-lisp:list
       (common-lisp:cons "EndpointGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-custom-routing-endpoint-group-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-custom-routing-listener-request common-lisp:nil
                       ((accelerator-arn :initarg :accelerator-arn :initform
                         (common-lisp:error ":accelerator-arn is required")
                         :type (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-create-custom-routing-listener-request-accelerator-arn
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (port-ranges :initarg :port-ranges :initform
                         (common-lisp:error ":port-ranges is required") :type
                         (common-lisp:or port-ranges common-lisp:null)
                         :accessor
                         struct-shape-create-custom-routing-listener-request-port-ranges
                         :shape "PortRanges" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (idempotency-token :initarg :idempotency-token
                         :initform
                         (common-lisp:error ":idempotency-token is required")
                         :type
                         (common-lisp:or idempotency-token common-lisp:null)
                         :accessor
                         struct-shape-create-custom-routing-listener-request-idempotency-token
                         :shape "IdempotencyToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-custom-routing-listener-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-custom-routing-listener-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-custom-routing-listener-request
                    'make-create-custom-routing-listener-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-custom-routing-listener-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-custom-routing-listener-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accelerator-arn))
      (common-lisp:list
       (common-lisp:cons "AcceleratorArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port-ranges))
      (common-lisp:list
       (common-lisp:cons "PortRanges"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'idempotency-token))
      (common-lisp:list
       (common-lisp:cons "IdempotencyToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-custom-routing-listener-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-custom-routing-listener-response common-lisp:nil
                       ((listener :initarg :listener :initform common-lisp:nil
                         :type
                         (common-lisp:or custom-routing-listener
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-custom-routing-listener-response-listener
                         :shape "CustomRoutingListener" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-custom-routing-listener-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-custom-routing-listener-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-custom-routing-listener-response
                    'make-create-custom-routing-listener-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-custom-routing-listener-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-custom-routing-listener-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'listener))
      (common-lisp:list
       (common-lisp:cons "Listener"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-custom-routing-listener-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-endpoint-group-request common-lisp:nil
                       ((listener-arn :initarg :listener-arn :initform
                         (common-lisp:error ":listener-arn is required") :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-create-endpoint-group-request-listener-arn
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (endpoint-group-region :initarg :endpoint-group-region
                         :initform
                         (common-lisp:error
                          ":endpoint-group-region is required")
                         :type (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-create-endpoint-group-request-endpoint-group-region
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (endpoint-configurations :initarg
                         :endpoint-configurations :initform common-lisp:nil
                         :type
                         (common-lisp:or endpoint-configurations
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-endpoint-group-request-endpoint-configurations
                         :shape "EndpointConfigurations" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (traffic-dial-percentage :initarg
                         :traffic-dial-percentage :initform common-lisp:nil
                         :type
                         (common-lisp:or traffic-dial-percentage
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-endpoint-group-request-traffic-dial-percentage
                         :shape "TrafficDialPercentage" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (health-check-port :initarg :health-check-port
                         :initform common-lisp:nil :type
                         (common-lisp:or health-check-port common-lisp:null)
                         :accessor
                         struct-shape-create-endpoint-group-request-health-check-port
                         :shape "HealthCheckPort" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (health-check-protocol :initarg :health-check-protocol
                         :initform common-lisp:nil :type
                         (common-lisp:or health-check-protocol
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-endpoint-group-request-health-check-protocol
                         :shape "HealthCheckProtocol" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (health-check-path :initarg :health-check-path
                         :initform common-lisp:nil :type
                         (common-lisp:or health-check-path common-lisp:null)
                         :accessor
                         struct-shape-create-endpoint-group-request-health-check-path
                         :shape "HealthCheckPath" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (health-check-interval-seconds :initarg
                         :health-check-interval-seconds :initform
                         common-lisp:nil :type
                         (common-lisp:or health-check-interval-seconds
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-endpoint-group-request-health-check-interval-seconds
                         :shape "HealthCheckIntervalSeconds" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (threshold-count :initarg :threshold-count :initform
                         common-lisp:nil :type
                         (common-lisp:or threshold-count common-lisp:null)
                         :accessor
                         struct-shape-create-endpoint-group-request-threshold-count
                         :shape "ThresholdCount" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (idempotency-token :initarg :idempotency-token
                         :initform
                         (common-lisp:error ":idempotency-token is required")
                         :type
                         (common-lisp:or idempotency-token common-lisp:null)
                         :accessor
                         struct-shape-create-endpoint-group-request-idempotency-token
                         :shape "IdempotencyToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (port-overrides :initarg :port-overrides :initform
                         common-lisp:nil :type
                         (common-lisp:or port-overrides common-lisp:null)
                         :accessor
                         struct-shape-create-endpoint-group-request-port-overrides
                         :shape "PortOverrides" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-endpoint-group-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-endpoint-group-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-endpoint-group-request
                    'make-create-endpoint-group-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-endpoint-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-endpoint-group-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'listener-arn))
      (common-lisp:list
       (common-lisp:cons "ListenerArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'endpoint-group-region))
      (common-lisp:list
       (common-lisp:cons "EndpointGroupRegion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'endpoint-configurations))
      (common-lisp:list
       (common-lisp:cons "EndpointConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'traffic-dial-percentage))
      (common-lisp:list
       (common-lisp:cons "TrafficDialPercentage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'health-check-port))
      (common-lisp:list
       (common-lisp:cons "HealthCheckPort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'health-check-protocol))
      (common-lisp:list
       (common-lisp:cons "HealthCheckProtocol"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'health-check-path))
      (common-lisp:list
       (common-lisp:cons "HealthCheckPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'health-check-interval-seconds))
      (common-lisp:list
       (common-lisp:cons "HealthCheckIntervalSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'threshold-count))
      (common-lisp:list
       (common-lisp:cons "ThresholdCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'idempotency-token))
      (common-lisp:list
       (common-lisp:cons "IdempotencyToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port-overrides))
      (common-lisp:list
       (common-lisp:cons "PortOverrides"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-endpoint-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-endpoint-group-response common-lisp:nil
                       ((endpoint-group :initarg :endpoint-group :initform
                         common-lisp:nil :type
                         (common-lisp:or endpoint-group common-lisp:null)
                         :accessor
                         struct-shape-create-endpoint-group-response-endpoint-group
                         :shape "EndpointGroup" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-endpoint-group-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-endpoint-group-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-endpoint-group-response
                    'make-create-endpoint-group-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-endpoint-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-endpoint-group-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-group))
      (common-lisp:list
       (common-lisp:cons "EndpointGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-endpoint-group-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-listener-request common-lisp:nil
                       ((accelerator-arn :initarg :accelerator-arn :initform
                         (common-lisp:error ":accelerator-arn is required")
                         :type (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-create-listener-request-accelerator-arn
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (port-ranges :initarg :port-ranges :initform
                         (common-lisp:error ":port-ranges is required") :type
                         (common-lisp:or port-ranges common-lisp:null)
                         :accessor
                         struct-shape-create-listener-request-port-ranges
                         :shape "PortRanges" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (protocol :initarg :protocol :initform
                         (common-lisp:error ":protocol is required") :type
                         (common-lisp:or protocol common-lisp:null) :accessor
                         struct-shape-create-listener-request-protocol :shape
                         "Protocol" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (client-affinity :initarg :client-affinity :initform
                         common-lisp:nil :type
                         (common-lisp:or client-affinity common-lisp:null)
                         :accessor
                         struct-shape-create-listener-request-client-affinity
                         :shape "ClientAffinity" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (idempotency-token :initarg :idempotency-token
                         :initform
                         (common-lisp:error ":idempotency-token is required")
                         :type
                         (common-lisp:or idempotency-token common-lisp:null)
                         :accessor
                         struct-shape-create-listener-request-idempotency-token
                         :shape "IdempotencyToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-listener-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-listener-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-listener-request 'make-create-listener-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-listener-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-listener-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accelerator-arn))
      (common-lisp:list
       (common-lisp:cons "AcceleratorArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port-ranges))
      (common-lisp:list
       (common-lisp:cons "PortRanges"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'protocol))
      (common-lisp:list
       (common-lisp:cons "Protocol"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-affinity))
      (common-lisp:list
       (common-lisp:cons "ClientAffinity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'idempotency-token))
      (common-lisp:list
       (common-lisp:cons "IdempotencyToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-listener-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-listener-response common-lisp:nil
                       ((listener :initarg :listener :initform common-lisp:nil
                         :type (common-lisp:or listener common-lisp:null)
                         :accessor
                         struct-shape-create-listener-response-listener :shape
                         "Listener" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-listener-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-listener-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-listener-response 'make-create-listener-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-listener-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-listener-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'listener))
      (common-lisp:list
       (common-lisp:cons "Listener"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-listener-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass cross-account-resource common-lisp:nil
                       ((endpoint-id :initarg :endpoint-id :initform
                         common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-cross-account-resource-endpoint-id :shape
                         "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (attachment-arn :initarg :attachment-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-cross-account-resource-attachment-arn
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-cross-account-resource
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'cross-account-resource
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'cross-account-resource 'make-cross-account-resource))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cross-account-resource))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cross-account-resource))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-id))
      (common-lisp:list
       (common-lisp:cons "EndpointId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attachment-arn))
      (common-lisp:list
       (common-lisp:cons "AttachmentArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cross-account-resource))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype cross-account-resources ()
   '(trivial-types:proper-list cross-account-resource))
 (common-lisp:defun make-cross-account-resources
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list cross-account-resource))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass custom-routing-accelerator common-lisp:nil
                       ((accelerator-arn :initarg :accelerator-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-custom-routing-accelerator-accelerator-arn
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor struct-shape-custom-routing-accelerator-name
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (ip-address-type :initarg :ip-address-type :initform
                         common-lisp:nil :type
                         (common-lisp:or ip-address-type common-lisp:null)
                         :accessor
                         struct-shape-custom-routing-accelerator-ip-address-type
                         :shape "IpAddressType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (enabled :initarg :enabled :initform common-lisp:nil
                         :type
                         (common-lisp:or generic-boolean common-lisp:null)
                         :accessor
                         struct-shape-custom-routing-accelerator-enabled :shape
                         "GenericBoolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (ip-sets :initarg :ip-sets :initform common-lisp:nil
                         :type (common-lisp:or ip-sets common-lisp:null)
                         :accessor
                         struct-shape-custom-routing-accelerator-ip-sets :shape
                         "IpSets" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (dns-name :initarg :dns-name :initform common-lisp:nil
                         :type (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-custom-routing-accelerator-dns-name
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or custom-routing-accelerator-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-custom-routing-accelerator-status :shape
                         "CustomRoutingAcceleratorStatus" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (created-time :initarg :created-time :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-custom-routing-accelerator-created-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-modified-time :initarg :last-modified-time
                         :initform common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-custom-routing-accelerator-last-modified-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-custom-routing-accelerator
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'custom-routing-accelerator
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'custom-routing-accelerator
                    'make-custom-routing-accelerator))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          custom-routing-accelerator))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          custom-routing-accelerator))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accelerator-arn))
      (common-lisp:list
       (common-lisp:cons "AcceleratorArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-address-type))
      (common-lisp:list
       (common-lisp:cons "IpAddressType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "Enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-sets))
      (common-lisp:list
       (common-lisp:cons "IpSets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dns-name))
      (common-lisp:list
       (common-lisp:cons "DnsName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-time))
      (common-lisp:list
       (common-lisp:cons "CreatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-time))
      (common-lisp:list
       (common-lisp:cons "LastModifiedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          custom-routing-accelerator))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass custom-routing-accelerator-attributes common-lisp:nil
                       ((flow-logs-enabled :initarg :flow-logs-enabled
                         :initform common-lisp:nil :type
                         (common-lisp:or generic-boolean common-lisp:null)
                         :accessor
                         struct-shape-custom-routing-accelerator-attributes-flow-logs-enabled
                         :shape "GenericBoolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (flow-logs-s3bucket :initarg :flow-logs-s3bucket
                         :initform common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-custom-routing-accelerator-attributes-flow-logs-s3bucket
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (flow-logs-s3prefix :initarg :flow-logs-s3prefix
                         :initform common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-custom-routing-accelerator-attributes-flow-logs-s3prefix
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-custom-routing-accelerator-attributes
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'custom-routing-accelerator-attributes
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'custom-routing-accelerator-attributes
                    'make-custom-routing-accelerator-attributes))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          custom-routing-accelerator-attributes))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          custom-routing-accelerator-attributes))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'flow-logs-enabled))
      (common-lisp:list
       (common-lisp:cons "FlowLogsEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'flow-logs-s3bucket))
      (common-lisp:list
       (common-lisp:cons "FlowLogsS3Bucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'flow-logs-s3prefix))
      (common-lisp:list
       (common-lisp:cons "FlowLogsS3Prefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          custom-routing-accelerator-attributes))
   common-lisp:nil))
(common-lisp:deftype custom-routing-accelerator-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype custom-routing-accelerators ()
   '(trivial-types:proper-list custom-routing-accelerator))
 (common-lisp:defun make-custom-routing-accelerators
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            custom-routing-accelerator))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass custom-routing-destination-configuration common-lisp:nil
                       ((from-port :initarg :from-port :initform
                         (common-lisp:error ":from-port is required") :type
                         (common-lisp:or port-number common-lisp:null)
                         :accessor
                         struct-shape-custom-routing-destination-configuration-from-port
                         :shape "PortNumber" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (to-port :initarg :to-port :initform
                         (common-lisp:error ":to-port is required") :type
                         (common-lisp:or port-number common-lisp:null)
                         :accessor
                         struct-shape-custom-routing-destination-configuration-to-port
                         :shape "PortNumber" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (protocols :initarg :protocols :initform
                         (common-lisp:error ":protocols is required") :type
                         (common-lisp:or custom-routing-protocols
                                         common-lisp:null)
                         :accessor
                         struct-shape-custom-routing-destination-configuration-protocols
                         :shape "CustomRoutingProtocols" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-custom-routing-destination-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'custom-routing-destination-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'custom-routing-destination-configuration
                    'make-custom-routing-destination-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          custom-routing-destination-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          custom-routing-destination-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'from-port))
      (common-lisp:list
       (common-lisp:cons "FromPort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'to-port))
      (common-lisp:list
       (common-lisp:cons "ToPort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'protocols))
      (common-lisp:list
       (common-lisp:cons "Protocols"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          custom-routing-destination-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype custom-routing-destination-configurations ()
   '(trivial-types:proper-list custom-routing-destination-configuration))
 (common-lisp:defun make-custom-routing-destination-configurations
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            custom-routing-destination-configuration))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass custom-routing-destination-description common-lisp:nil
                       ((from-port :initarg :from-port :initform
                         common-lisp:nil :type
                         (common-lisp:or port-number common-lisp:null)
                         :accessor
                         struct-shape-custom-routing-destination-description-from-port
                         :shape "PortNumber" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (to-port :initarg :to-port :initform common-lisp:nil
                         :type (common-lisp:or port-number common-lisp:null)
                         :accessor
                         struct-shape-custom-routing-destination-description-to-port
                         :shape "PortNumber" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (protocols :initarg :protocols :initform
                         common-lisp:nil :type
                         (common-lisp:or protocols common-lisp:null) :accessor
                         struct-shape-custom-routing-destination-description-protocols
                         :shape "Protocols" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-custom-routing-destination-description
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'custom-routing-destination-description
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'custom-routing-destination-description
                    'make-custom-routing-destination-description))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          custom-routing-destination-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          custom-routing-destination-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'from-port))
      (common-lisp:list
       (common-lisp:cons "FromPort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'to-port))
      (common-lisp:list
       (common-lisp:cons "ToPort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'protocols))
      (common-lisp:list
       (common-lisp:cons "Protocols"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          custom-routing-destination-description))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype custom-routing-destination-descriptions ()
   '(trivial-types:proper-list custom-routing-destination-description))
 (common-lisp:defun make-custom-routing-destination-descriptions
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            custom-routing-destination-description))
   aws-sdk/generator/shape::members))
(common-lisp:deftype custom-routing-destination-traffic-state ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass custom-routing-endpoint-configuration common-lisp:nil
                       ((endpoint-id :initarg :endpoint-id :initform
                         common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-custom-routing-endpoint-configuration-endpoint-id
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (attachment-arn :initarg :attachment-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-custom-routing-endpoint-configuration-attachment-arn
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-custom-routing-endpoint-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'custom-routing-endpoint-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'custom-routing-endpoint-configuration
                    'make-custom-routing-endpoint-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          custom-routing-endpoint-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          custom-routing-endpoint-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-id))
      (common-lisp:list
       (common-lisp:cons "EndpointId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attachment-arn))
      (common-lisp:list
       (common-lisp:cons "AttachmentArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          custom-routing-endpoint-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype custom-routing-endpoint-configurations ()
   '(trivial-types:proper-list custom-routing-endpoint-configuration))
 (common-lisp:defun make-custom-routing-endpoint-configurations
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            custom-routing-endpoint-configuration))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass custom-routing-endpoint-description common-lisp:nil
                       ((endpoint-id :initarg :endpoint-id :initform
                         common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-custom-routing-endpoint-description-endpoint-id
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-custom-routing-endpoint-description
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'custom-routing-endpoint-description
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'custom-routing-endpoint-description
                    'make-custom-routing-endpoint-description))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          custom-routing-endpoint-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          custom-routing-endpoint-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-id))
      (common-lisp:list
       (common-lisp:cons "EndpointId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          custom-routing-endpoint-description))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype custom-routing-endpoint-descriptions ()
   '(trivial-types:proper-list custom-routing-endpoint-description))
 (common-lisp:defun make-custom-routing-endpoint-descriptions
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            custom-routing-endpoint-description))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass custom-routing-endpoint-group common-lisp:nil
                       ((endpoint-group-arn :initarg :endpoint-group-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-custom-routing-endpoint-group-endpoint-group-arn
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (endpoint-group-region :initarg :endpoint-group-region
                         :initform common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-custom-routing-endpoint-group-endpoint-group-region
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (destination-descriptions :initarg
                         :destination-descriptions :initform common-lisp:nil
                         :type
                         (common-lisp:or
                          custom-routing-destination-descriptions
                          common-lisp:null)
                         :accessor
                         struct-shape-custom-routing-endpoint-group-destination-descriptions
                         :shape "CustomRoutingDestinationDescriptions"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (endpoint-descriptions :initarg :endpoint-descriptions
                         :initform common-lisp:nil :type
                         (common-lisp:or custom-routing-endpoint-descriptions
                                         common-lisp:null)
                         :accessor
                         struct-shape-custom-routing-endpoint-group-endpoint-descriptions
                         :shape "CustomRoutingEndpointDescriptions" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-custom-routing-endpoint-group
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'custom-routing-endpoint-group
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'custom-routing-endpoint-group
                    'make-custom-routing-endpoint-group))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          custom-routing-endpoint-group))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          custom-routing-endpoint-group))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-group-arn))
      (common-lisp:list
       (common-lisp:cons "EndpointGroupArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'endpoint-group-region))
      (common-lisp:list
       (common-lisp:cons "EndpointGroupRegion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'destination-descriptions))
      (common-lisp:list
       (common-lisp:cons "DestinationDescriptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'endpoint-descriptions))
      (common-lisp:list
       (common-lisp:cons "EndpointDescriptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          custom-routing-endpoint-group))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype custom-routing-endpoint-groups ()
   '(trivial-types:proper-list custom-routing-endpoint-group))
 (common-lisp:defun make-custom-routing-endpoint-groups
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            custom-routing-endpoint-group))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass custom-routing-listener common-lisp:nil
                       ((listener-arn :initarg :listener-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-custom-routing-listener-listener-arn
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (port-ranges :initarg :port-ranges :initform
                         common-lisp:nil :type
                         (common-lisp:or port-ranges common-lisp:null)
                         :accessor
                         struct-shape-custom-routing-listener-port-ranges
                         :shape "PortRanges" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-custom-routing-listener
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'custom-routing-listener
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'custom-routing-listener 'make-custom-routing-listener))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          custom-routing-listener))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          custom-routing-listener))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'listener-arn))
      (common-lisp:list
       (common-lisp:cons "ListenerArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port-ranges))
      (common-lisp:list
       (common-lisp:cons "PortRanges"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          custom-routing-listener))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype custom-routing-listeners ()
   '(trivial-types:proper-list custom-routing-listener))
 (common-lisp:defun make-custom-routing-listeners
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list custom-routing-listener))
   aws-sdk/generator/shape::members))
(common-lisp:deftype custom-routing-protocol () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype custom-routing-protocols ()
   '(trivial-types:proper-list custom-routing-protocol))
 (common-lisp:defun make-custom-routing-protocols
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list custom-routing-protocol))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass delete-accelerator-request common-lisp:nil
                       ((accelerator-arn :initarg :accelerator-arn :initform
                         (common-lisp:error ":accelerator-arn is required")
                         :type (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-delete-accelerator-request-accelerator-arn
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-accelerator-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-accelerator-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-accelerator-request
                    'make-delete-accelerator-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-accelerator-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-accelerator-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accelerator-arn))
      (common-lisp:list
       (common-lisp:cons "AcceleratorArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-accelerator-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-cross-account-attachment-request common-lisp:nil
                       ((attachment-arn :initarg :attachment-arn :initform
                         (common-lisp:error ":attachment-arn is required")
                         :type (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-delete-cross-account-attachment-request-attachment-arn
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-cross-account-attachment-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-cross-account-attachment-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-cross-account-attachment-request
                    'make-delete-cross-account-attachment-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-cross-account-attachment-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-cross-account-attachment-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attachment-arn))
      (common-lisp:list
       (common-lisp:cons "AttachmentArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-cross-account-attachment-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-custom-routing-accelerator-request
                       common-lisp:nil
                       ((accelerator-arn :initarg :accelerator-arn :initform
                         (common-lisp:error ":accelerator-arn is required")
                         :type (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-delete-custom-routing-accelerator-request-accelerator-arn
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-custom-routing-accelerator-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-custom-routing-accelerator-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-custom-routing-accelerator-request
                    'make-delete-custom-routing-accelerator-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-custom-routing-accelerator-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-custom-routing-accelerator-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accelerator-arn))
      (common-lisp:list
       (common-lisp:cons "AcceleratorArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-custom-routing-accelerator-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-custom-routing-endpoint-group-request
                       common-lisp:nil
                       ((endpoint-group-arn :initarg :endpoint-group-arn
                         :initform
                         (common-lisp:error ":endpoint-group-arn is required")
                         :type (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-delete-custom-routing-endpoint-group-request-endpoint-group-arn
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-custom-routing-endpoint-group-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-custom-routing-endpoint-group-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-custom-routing-endpoint-group-request
                    'make-delete-custom-routing-endpoint-group-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-custom-routing-endpoint-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-custom-routing-endpoint-group-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-group-arn))
      (common-lisp:list
       (common-lisp:cons "EndpointGroupArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-custom-routing-endpoint-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-custom-routing-listener-request common-lisp:nil
                       ((listener-arn :initarg :listener-arn :initform
                         (common-lisp:error ":listener-arn is required") :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-delete-custom-routing-listener-request-listener-arn
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-custom-routing-listener-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-custom-routing-listener-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-custom-routing-listener-request
                    'make-delete-custom-routing-listener-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-custom-routing-listener-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-custom-routing-listener-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'listener-arn))
      (common-lisp:list
       (common-lisp:cons "ListenerArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-custom-routing-listener-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-endpoint-group-request common-lisp:nil
                       ((endpoint-group-arn :initarg :endpoint-group-arn
                         :initform
                         (common-lisp:error ":endpoint-group-arn is required")
                         :type (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-delete-endpoint-group-request-endpoint-group-arn
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-endpoint-group-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-endpoint-group-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-endpoint-group-request
                    'make-delete-endpoint-group-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-endpoint-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-endpoint-group-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-group-arn))
      (common-lisp:list
       (common-lisp:cons "EndpointGroupArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-endpoint-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-listener-request common-lisp:nil
                       ((listener-arn :initarg :listener-arn :initform
                         (common-lisp:error ":listener-arn is required") :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-delete-listener-request-listener-arn
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-listener-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-listener-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-listener-request 'make-delete-listener-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-listener-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-listener-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'listener-arn))
      (common-lisp:list
       (common-lisp:cons "ListenerArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-listener-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass deny-custom-routing-traffic-request common-lisp:nil
                       ((endpoint-group-arn :initarg :endpoint-group-arn
                         :initform
                         (common-lisp:error ":endpoint-group-arn is required")
                         :type (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-deny-custom-routing-traffic-request-endpoint-group-arn
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (endpoint-id :initarg :endpoint-id :initform
                         (common-lisp:error ":endpoint-id is required") :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-deny-custom-routing-traffic-request-endpoint-id
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (destination-addresses :initarg :destination-addresses
                         :initform common-lisp:nil :type
                         (common-lisp:or destination-addresses
                                         common-lisp:null)
                         :accessor
                         struct-shape-deny-custom-routing-traffic-request-destination-addresses
                         :shape "DestinationAddresses" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (destination-ports :initarg :destination-ports
                         :initform common-lisp:nil :type
                         (common-lisp:or destination-ports common-lisp:null)
                         :accessor
                         struct-shape-deny-custom-routing-traffic-request-destination-ports
                         :shape "DestinationPorts" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (deny-all-traffic-to-endpoint :initarg
                         :deny-all-traffic-to-endpoint :initform
                         common-lisp:nil :type
                         (common-lisp:or generic-boolean common-lisp:null)
                         :accessor
                         struct-shape-deny-custom-routing-traffic-request-deny-all-traffic-to-endpoint
                         :shape "GenericBoolean" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-deny-custom-routing-traffic-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'deny-custom-routing-traffic-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'deny-custom-routing-traffic-request
                    'make-deny-custom-routing-traffic-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          deny-custom-routing-traffic-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          deny-custom-routing-traffic-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-group-arn))
      (common-lisp:list
       (common-lisp:cons "EndpointGroupArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-id))
      (common-lisp:list
       (common-lisp:cons "EndpointId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'destination-addresses))
      (common-lisp:list
       (common-lisp:cons "DestinationAddresses"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination-ports))
      (common-lisp:list
       (common-lisp:cons "DestinationPorts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'deny-all-traffic-to-endpoint))
      (common-lisp:list
       (common-lisp:cons "DenyAllTrafficToEndpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          deny-custom-routing-traffic-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass deprovision-byoip-cidr-request common-lisp:nil
                       ((cidr :initarg :cidr :initform
                         (common-lisp:error ":cidr is required") :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-deprovision-byoip-cidr-request-cidr
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-deprovision-byoip-cidr-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'deprovision-byoip-cidr-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'deprovision-byoip-cidr-request
                    'make-deprovision-byoip-cidr-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          deprovision-byoip-cidr-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          deprovision-byoip-cidr-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cidr))
      (common-lisp:list
       (common-lisp:cons "Cidr"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          deprovision-byoip-cidr-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass deprovision-byoip-cidr-response common-lisp:nil
                       ((byoip-cidr :initarg :byoip-cidr :initform
                         common-lisp:nil :type
                         (common-lisp:or byoip-cidr common-lisp:null) :accessor
                         struct-shape-deprovision-byoip-cidr-response-byoip-cidr
                         :shape "ByoipCidr" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-deprovision-byoip-cidr-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'deprovision-byoip-cidr-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'deprovision-byoip-cidr-response
                    'make-deprovision-byoip-cidr-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          deprovision-byoip-cidr-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          deprovision-byoip-cidr-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'byoip-cidr))
      (common-lisp:list
       (common-lisp:cons "ByoipCidr"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          deprovision-byoip-cidr-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-accelerator-attributes-request common-lisp:nil
                       ((accelerator-arn :initarg :accelerator-arn :initform
                         (common-lisp:error ":accelerator-arn is required")
                         :type (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-describe-accelerator-attributes-request-accelerator-arn
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-accelerator-attributes-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-accelerator-attributes-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-accelerator-attributes-request
                    'make-describe-accelerator-attributes-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-accelerator-attributes-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-accelerator-attributes-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accelerator-arn))
      (common-lisp:list
       (common-lisp:cons "AcceleratorArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-accelerator-attributes-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-accelerator-attributes-response common-lisp:nil
                       ((accelerator-attributes :initarg
                         :accelerator-attributes :initform common-lisp:nil
                         :type
                         (common-lisp:or accelerator-attributes
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-accelerator-attributes-response-accelerator-attributes
                         :shape "AcceleratorAttributes" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-accelerator-attributes-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-accelerator-attributes-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-accelerator-attributes-response
                    'make-describe-accelerator-attributes-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-accelerator-attributes-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-accelerator-attributes-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'accelerator-attributes))
      (common-lisp:list
       (common-lisp:cons "AcceleratorAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-accelerator-attributes-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-accelerator-request common-lisp:nil
                       ((accelerator-arn :initarg :accelerator-arn :initform
                         (common-lisp:error ":accelerator-arn is required")
                         :type (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-describe-accelerator-request-accelerator-arn
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-accelerator-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-accelerator-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-accelerator-request
                    'make-describe-accelerator-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-accelerator-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-accelerator-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accelerator-arn))
      (common-lisp:list
       (common-lisp:cons "AcceleratorArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-accelerator-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-accelerator-response common-lisp:nil
                       ((accelerator :initarg :accelerator :initform
                         common-lisp:nil :type
                         (common-lisp:or accelerator common-lisp:null)
                         :accessor
                         struct-shape-describe-accelerator-response-accelerator
                         :shape "Accelerator" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-accelerator-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-accelerator-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-accelerator-response
                    'make-describe-accelerator-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-accelerator-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-accelerator-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accelerator))
      (common-lisp:list
       (common-lisp:cons "Accelerator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-accelerator-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-cross-account-attachment-request
                       common-lisp:nil
                       ((attachment-arn :initarg :attachment-arn :initform
                         (common-lisp:error ":attachment-arn is required")
                         :type (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-describe-cross-account-attachment-request-attachment-arn
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-cross-account-attachment-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-cross-account-attachment-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-cross-account-attachment-request
                    'make-describe-cross-account-attachment-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-cross-account-attachment-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-cross-account-attachment-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attachment-arn))
      (common-lisp:list
       (common-lisp:cons "AttachmentArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-cross-account-attachment-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-cross-account-attachment-response
                       common-lisp:nil
                       ((cross-account-attachment :initarg
                         :cross-account-attachment :initform common-lisp:nil
                         :type (common-lisp:or attachment common-lisp:null)
                         :accessor
                         struct-shape-describe-cross-account-attachment-response-cross-account-attachment
                         :shape "Attachment" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-cross-account-attachment-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-cross-account-attachment-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-cross-account-attachment-response
                    'make-describe-cross-account-attachment-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-cross-account-attachment-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-cross-account-attachment-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cross-account-attachment))
      (common-lisp:list
       (common-lisp:cons "CrossAccountAttachment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-cross-account-attachment-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-custom-routing-accelerator-attributes-request
                       common-lisp:nil
                       ((accelerator-arn :initarg :accelerator-arn :initform
                         (common-lisp:error ":accelerator-arn is required")
                         :type (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-describe-custom-routing-accelerator-attributes-request-accelerator-arn
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-custom-routing-accelerator-attributes-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-custom-routing-accelerator-attributes-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-custom-routing-accelerator-attributes-request
                    'make-describe-custom-routing-accelerator-attributes-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-custom-routing-accelerator-attributes-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-custom-routing-accelerator-attributes-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accelerator-arn))
      (common-lisp:list
       (common-lisp:cons "AcceleratorArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-custom-routing-accelerator-attributes-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-custom-routing-accelerator-attributes-response
                       common-lisp:nil
                       ((accelerator-attributes :initarg
                         :accelerator-attributes :initform common-lisp:nil
                         :type
                         (common-lisp:or custom-routing-accelerator-attributes
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-custom-routing-accelerator-attributes-response-accelerator-attributes
                         :shape "CustomRoutingAcceleratorAttributes" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-custom-routing-accelerator-attributes-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-custom-routing-accelerator-attributes-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-custom-routing-accelerator-attributes-response
                    'make-describe-custom-routing-accelerator-attributes-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-custom-routing-accelerator-attributes-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-custom-routing-accelerator-attributes-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'accelerator-attributes))
      (common-lisp:list
       (common-lisp:cons "AcceleratorAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-custom-routing-accelerator-attributes-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-custom-routing-accelerator-request
                       common-lisp:nil
                       ((accelerator-arn :initarg :accelerator-arn :initform
                         (common-lisp:error ":accelerator-arn is required")
                         :type (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-describe-custom-routing-accelerator-request-accelerator-arn
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-custom-routing-accelerator-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-custom-routing-accelerator-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-custom-routing-accelerator-request
                    'make-describe-custom-routing-accelerator-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-custom-routing-accelerator-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-custom-routing-accelerator-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accelerator-arn))
      (common-lisp:list
       (common-lisp:cons "AcceleratorArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-custom-routing-accelerator-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-custom-routing-accelerator-response
                       common-lisp:nil
                       ((accelerator :initarg :accelerator :initform
                         common-lisp:nil :type
                         (common-lisp:or custom-routing-accelerator
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-custom-routing-accelerator-response-accelerator
                         :shape "CustomRoutingAccelerator" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-custom-routing-accelerator-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-custom-routing-accelerator-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-custom-routing-accelerator-response
                    'make-describe-custom-routing-accelerator-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-custom-routing-accelerator-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-custom-routing-accelerator-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accelerator))
      (common-lisp:list
       (common-lisp:cons "Accelerator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-custom-routing-accelerator-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-custom-routing-endpoint-group-request
                       common-lisp:nil
                       ((endpoint-group-arn :initarg :endpoint-group-arn
                         :initform
                         (common-lisp:error ":endpoint-group-arn is required")
                         :type (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-describe-custom-routing-endpoint-group-request-endpoint-group-arn
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-custom-routing-endpoint-group-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-custom-routing-endpoint-group-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-custom-routing-endpoint-group-request
                    'make-describe-custom-routing-endpoint-group-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-custom-routing-endpoint-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-custom-routing-endpoint-group-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-group-arn))
      (common-lisp:list
       (common-lisp:cons "EndpointGroupArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-custom-routing-endpoint-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-custom-routing-endpoint-group-response
                       common-lisp:nil
                       ((endpoint-group :initarg :endpoint-group :initform
                         common-lisp:nil :type
                         (common-lisp:or custom-routing-endpoint-group
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-custom-routing-endpoint-group-response-endpoint-group
                         :shape "CustomRoutingEndpointGroup" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-custom-routing-endpoint-group-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-custom-routing-endpoint-group-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-custom-routing-endpoint-group-response
                    'make-describe-custom-routing-endpoint-group-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-custom-routing-endpoint-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-custom-routing-endpoint-group-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-group))
      (common-lisp:list
       (common-lisp:cons "EndpointGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-custom-routing-endpoint-group-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-custom-routing-listener-request common-lisp:nil
                       ((listener-arn :initarg :listener-arn :initform
                         (common-lisp:error ":listener-arn is required") :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-describe-custom-routing-listener-request-listener-arn
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-custom-routing-listener-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-custom-routing-listener-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-custom-routing-listener-request
                    'make-describe-custom-routing-listener-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-custom-routing-listener-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-custom-routing-listener-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'listener-arn))
      (common-lisp:list
       (common-lisp:cons "ListenerArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-custom-routing-listener-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-custom-routing-listener-response
                       common-lisp:nil
                       ((listener :initarg :listener :initform common-lisp:nil
                         :type
                         (common-lisp:or custom-routing-listener
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-custom-routing-listener-response-listener
                         :shape "CustomRoutingListener" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-custom-routing-listener-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-custom-routing-listener-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-custom-routing-listener-response
                    'make-describe-custom-routing-listener-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-custom-routing-listener-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-custom-routing-listener-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'listener))
      (common-lisp:list
       (common-lisp:cons "Listener"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-custom-routing-listener-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-endpoint-group-request common-lisp:nil
                       ((endpoint-group-arn :initarg :endpoint-group-arn
                         :initform
                         (common-lisp:error ":endpoint-group-arn is required")
                         :type (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-describe-endpoint-group-request-endpoint-group-arn
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-endpoint-group-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-endpoint-group-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-endpoint-group-request
                    'make-describe-endpoint-group-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-endpoint-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-endpoint-group-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-group-arn))
      (common-lisp:list
       (common-lisp:cons "EndpointGroupArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-endpoint-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-endpoint-group-response common-lisp:nil
                       ((endpoint-group :initarg :endpoint-group :initform
                         common-lisp:nil :type
                         (common-lisp:or endpoint-group common-lisp:null)
                         :accessor
                         struct-shape-describe-endpoint-group-response-endpoint-group
                         :shape "EndpointGroup" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-endpoint-group-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-endpoint-group-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-endpoint-group-response
                    'make-describe-endpoint-group-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-endpoint-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-endpoint-group-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-group))
      (common-lisp:list
       (common-lisp:cons "EndpointGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-endpoint-group-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-listener-request common-lisp:nil
                       ((listener-arn :initarg :listener-arn :initform
                         (common-lisp:error ":listener-arn is required") :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-describe-listener-request-listener-arn
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-listener-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-listener-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-listener-request
                    'make-describe-listener-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-listener-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-listener-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'listener-arn))
      (common-lisp:list
       (common-lisp:cons "ListenerArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-listener-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-listener-response common-lisp:nil
                       ((listener :initarg :listener :initform common-lisp:nil
                         :type (common-lisp:or listener common-lisp:null)
                         :accessor
                         struct-shape-describe-listener-response-listener
                         :shape "Listener" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-listener-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-listener-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-listener-response
                    'make-describe-listener-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-listener-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-listener-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'listener))
      (common-lisp:list
       (common-lisp:cons "Listener"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-listener-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype destination-addresses ()
   '(trivial-types:proper-list ip-address))
 (common-lisp:defun make-destination-addresses
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list ip-address))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass destination-port-mapping common-lisp:nil
                       ((accelerator-arn :initarg :accelerator-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-destination-port-mapping-accelerator-arn
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (accelerator-socket-addresses :initarg
                         :accelerator-socket-addresses :initform
                         common-lisp:nil :type
                         (common-lisp:or socket-addresses common-lisp:null)
                         :accessor
                         struct-shape-destination-port-mapping-accelerator-socket-addresses
                         :shape "SocketAddresses" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (endpoint-group-arn :initarg :endpoint-group-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-destination-port-mapping-endpoint-group-arn
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (endpoint-id :initarg :endpoint-id :initform
                         common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-destination-port-mapping-endpoint-id
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (endpoint-group-region :initarg :endpoint-group-region
                         :initform common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-destination-port-mapping-endpoint-group-region
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (destination-socket-address :initarg
                         :destination-socket-address :initform common-lisp:nil
                         :type (common-lisp:or socket-address common-lisp:null)
                         :accessor
                         struct-shape-destination-port-mapping-destination-socket-address
                         :shape "SocketAddress" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (ip-address-type :initarg :ip-address-type :initform
                         common-lisp:nil :type
                         (common-lisp:or ip-address-type common-lisp:null)
                         :accessor
                         struct-shape-destination-port-mapping-ip-address-type
                         :shape "IpAddressType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (destination-traffic-state :initarg
                         :destination-traffic-state :initform common-lisp:nil
                         :type
                         (common-lisp:or
                          custom-routing-destination-traffic-state
                          common-lisp:null)
                         :accessor
                         struct-shape-destination-port-mapping-destination-traffic-state
                         :shape "CustomRoutingDestinationTrafficState"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-destination-port-mapping
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'destination-port-mapping
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'destination-port-mapping 'make-destination-port-mapping))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          destination-port-mapping))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          destination-port-mapping))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accelerator-arn))
      (common-lisp:list
       (common-lisp:cons "AcceleratorArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'accelerator-socket-addresses))
      (common-lisp:list
       (common-lisp:cons "AcceleratorSocketAddresses"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-group-arn))
      (common-lisp:list
       (common-lisp:cons "EndpointGroupArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-id))
      (common-lisp:list
       (common-lisp:cons "EndpointId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'endpoint-group-region))
      (common-lisp:list
       (common-lisp:cons "EndpointGroupRegion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'destination-socket-address))
      (common-lisp:list
       (common-lisp:cons "DestinationSocketAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-address-type))
      (common-lisp:list
       (common-lisp:cons "IpAddressType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'destination-traffic-state))
      (common-lisp:list
       (common-lisp:cons "DestinationTrafficState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          destination-port-mapping))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype destination-port-mappings ()
   '(trivial-types:proper-list destination-port-mapping))
 (common-lisp:defun make-destination-port-mappings
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            destination-port-mapping))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype destination-ports ()
   '(trivial-types:proper-list port-number))
 (common-lisp:defun make-destination-ports
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list port-number))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition endpoint-already-exists-exception
     (globalaccelerator-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       endpoint-already-exists-exception-message)))
 (common-lisp:export
  (common-lisp:list 'endpoint-already-exists-exception
                    'endpoint-already-exists-exception-message)))
(common-lisp:progn
 (common-lisp:defclass endpoint-configuration common-lisp:nil
                       ((endpoint-id :initarg :endpoint-id :initform
                         common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-endpoint-configuration-endpoint-id :shape
                         "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (weight :initarg :weight :initform common-lisp:nil
                         :type
                         (common-lisp:or endpoint-weight common-lisp:null)
                         :accessor struct-shape-endpoint-configuration-weight
                         :shape "EndpointWeight" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (client-ippreservation-enabled :initarg
                         :client-ippreservation-enabled :initform
                         common-lisp:nil :type
                         (common-lisp:or generic-boolean common-lisp:null)
                         :accessor
                         struct-shape-endpoint-configuration-client-ippreservation-enabled
                         :shape "GenericBoolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (attachment-arn :initarg :attachment-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-endpoint-configuration-attachment-arn
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-endpoint-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'endpoint-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'endpoint-configuration 'make-endpoint-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          endpoint-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          endpoint-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-id))
      (common-lisp:list
       (common-lisp:cons "EndpointId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'weight))
      (common-lisp:list
       (common-lisp:cons "Weight"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-ippreservation-enabled))
      (common-lisp:list
       (common-lisp:cons "ClientIPPreservationEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attachment-arn))
      (common-lisp:list
       (common-lisp:cons "AttachmentArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          endpoint-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype endpoint-configurations ()
   '(trivial-types:proper-list endpoint-configuration))
 (common-lisp:defun make-endpoint-configurations
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list endpoint-configuration))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass endpoint-description common-lisp:nil
                       ((endpoint-id :initarg :endpoint-id :initform
                         common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-endpoint-description-endpoint-id :shape
                         "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (weight :initarg :weight :initform common-lisp:nil
                         :type
                         (common-lisp:or endpoint-weight common-lisp:null)
                         :accessor struct-shape-endpoint-description-weight
                         :shape "EndpointWeight" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (health-state :initarg :health-state :initform
                         common-lisp:nil :type
                         (common-lisp:or health-state common-lisp:null)
                         :accessor
                         struct-shape-endpoint-description-health-state :shape
                         "HealthState" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (health-reason :initarg :health-reason :initform
                         common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-endpoint-description-health-reason :shape
                         "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (client-ippreservation-enabled :initarg
                         :client-ippreservation-enabled :initform
                         common-lisp:nil :type
                         (common-lisp:or generic-boolean common-lisp:null)
                         :accessor
                         struct-shape-endpoint-description-client-ippreservation-enabled
                         :shape "GenericBoolean" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-endpoint-description
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'endpoint-description
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'endpoint-description 'make-endpoint-description))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input endpoint-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input endpoint-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-id))
      (common-lisp:list
       (common-lisp:cons "EndpointId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'weight))
      (common-lisp:list
       (common-lisp:cons "Weight"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'health-state))
      (common-lisp:list
       (common-lisp:cons "HealthState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'health-reason))
      (common-lisp:list
       (common-lisp:cons "HealthReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-ippreservation-enabled))
      (common-lisp:list
       (common-lisp:cons "ClientIPPreservationEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input endpoint-description))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype endpoint-descriptions ()
   '(trivial-types:proper-list endpoint-description))
 (common-lisp:defun make-endpoint-descriptions
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list endpoint-description))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass endpoint-group common-lisp:nil
                       ((endpoint-group-arn :initarg :endpoint-group-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-endpoint-group-endpoint-group-arn :shape
                         "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (endpoint-group-region :initarg :endpoint-group-region
                         :initform common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-endpoint-group-endpoint-group-region
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (endpoint-descriptions :initarg :endpoint-descriptions
                         :initform common-lisp:nil :type
                         (common-lisp:or endpoint-descriptions
                                         common-lisp:null)
                         :accessor
                         struct-shape-endpoint-group-endpoint-descriptions
                         :shape "EndpointDescriptions" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (traffic-dial-percentage :initarg
                         :traffic-dial-percentage :initform common-lisp:nil
                         :type
                         (common-lisp:or traffic-dial-percentage
                                         common-lisp:null)
                         :accessor
                         struct-shape-endpoint-group-traffic-dial-percentage
                         :shape "TrafficDialPercentage" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (health-check-port :initarg :health-check-port
                         :initform common-lisp:nil :type
                         (common-lisp:or health-check-port common-lisp:null)
                         :accessor
                         struct-shape-endpoint-group-health-check-port :shape
                         "HealthCheckPort" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (health-check-protocol :initarg :health-check-protocol
                         :initform common-lisp:nil :type
                         (common-lisp:or health-check-protocol
                                         common-lisp:null)
                         :accessor
                         struct-shape-endpoint-group-health-check-protocol
                         :shape "HealthCheckProtocol" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (health-check-path :initarg :health-check-path
                         :initform common-lisp:nil :type
                         (common-lisp:or health-check-path common-lisp:null)
                         :accessor
                         struct-shape-endpoint-group-health-check-path :shape
                         "HealthCheckPath" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (health-check-interval-seconds :initarg
                         :health-check-interval-seconds :initform
                         common-lisp:nil :type
                         (common-lisp:or health-check-interval-seconds
                                         common-lisp:null)
                         :accessor
                         struct-shape-endpoint-group-health-check-interval-seconds
                         :shape "HealthCheckIntervalSeconds" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (threshold-count :initarg :threshold-count :initform
                         common-lisp:nil :type
                         (common-lisp:or threshold-count common-lisp:null)
                         :accessor struct-shape-endpoint-group-threshold-count
                         :shape "ThresholdCount" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (port-overrides :initarg :port-overrides :initform
                         common-lisp:nil :type
                         (common-lisp:or port-overrides common-lisp:null)
                         :accessor struct-shape-endpoint-group-port-overrides
                         :shape "PortOverrides" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-endpoint-group
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'endpoint-group
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'endpoint-group 'make-endpoint-group))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input endpoint-group))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input endpoint-group))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-group-arn))
      (common-lisp:list
       (common-lisp:cons "EndpointGroupArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'endpoint-group-region))
      (common-lisp:list
       (common-lisp:cons "EndpointGroupRegion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'endpoint-descriptions))
      (common-lisp:list
       (common-lisp:cons "EndpointDescriptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'traffic-dial-percentage))
      (common-lisp:list
       (common-lisp:cons "TrafficDialPercentage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'health-check-port))
      (common-lisp:list
       (common-lisp:cons "HealthCheckPort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'health-check-protocol))
      (common-lisp:list
       (common-lisp:cons "HealthCheckProtocol"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'health-check-path))
      (common-lisp:list
       (common-lisp:cons "HealthCheckPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'health-check-interval-seconds))
      (common-lisp:list
       (common-lisp:cons "HealthCheckIntervalSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'threshold-count))
      (common-lisp:list
       (common-lisp:cons "ThresholdCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port-overrides))
      (common-lisp:list
       (common-lisp:cons "PortOverrides"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input endpoint-group))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition endpoint-group-already-exists-exception
     (globalaccelerator-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       endpoint-group-already-exists-exception-message)))
 (common-lisp:export
  (common-lisp:list 'endpoint-group-already-exists-exception
                    'endpoint-group-already-exists-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition endpoint-group-not-found-exception
     (globalaccelerator-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       endpoint-group-not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'endpoint-group-not-found-exception
                    'endpoint-group-not-found-exception-message)))
(common-lisp:progn
 (common-lisp:deftype endpoint-groups ()
   '(trivial-types:proper-list endpoint-group))
 (common-lisp:defun make-endpoint-groups
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list endpoint-group))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass endpoint-identifier common-lisp:nil
                       ((endpoint-id :initarg :endpoint-id :initform
                         (common-lisp:error ":endpoint-id is required") :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor struct-shape-endpoint-identifier-endpoint-id
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (client-ippreservation-enabled :initarg
                         :client-ippreservation-enabled :initform
                         common-lisp:nil :type
                         (common-lisp:or generic-boolean common-lisp:null)
                         :accessor
                         struct-shape-endpoint-identifier-client-ippreservation-enabled
                         :shape "GenericBoolean" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-endpoint-identifier
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'endpoint-identifier
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'endpoint-identifier 'make-endpoint-identifier))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input endpoint-identifier))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input endpoint-identifier))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-id))
      (common-lisp:list
       (common-lisp:cons "EndpointId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-ippreservation-enabled))
      (common-lisp:list
       (common-lisp:cons "ClientIPPreservationEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input endpoint-identifier))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype endpoint-identifiers ()
   '(trivial-types:proper-list endpoint-identifier))
 (common-lisp:defun make-endpoint-identifiers
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list endpoint-identifier))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype endpoint-ids ()
   '(trivial-types:proper-list generic-string))
 (common-lisp:defun make-endpoint-ids
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list generic-string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition endpoint-not-found-exception
     (globalaccelerator-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       endpoint-not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'endpoint-not-found-exception
                    'endpoint-not-found-exception-message)))
(common-lisp:deftype endpoint-weight () 'common-lisp:integer)
(common-lisp:deftype error-message () 'common-lisp:string)
(common-lisp:deftype generic-boolean () 'common-lisp:boolean)
(common-lisp:deftype generic-string () 'common-lisp:string)
(common-lisp:deftype health-check-interval-seconds () 'common-lisp:integer)
(common-lisp:deftype health-check-path () 'common-lisp:string)
(common-lisp:deftype health-check-port () 'common-lisp:integer)
(common-lisp:deftype health-check-protocol () 'common-lisp:string)
(common-lisp:deftype health-state () 'common-lisp:string)
(common-lisp:deftype idempotency-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition incorrect-cidr-state-exception
     (globalaccelerator-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       incorrect-cidr-state-exception-message)))
 (common-lisp:export
  (common-lisp:list 'incorrect-cidr-state-exception
                    'incorrect-cidr-state-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition internal-service-error-exception
     (globalaccelerator-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       internal-service-error-exception-message)))
 (common-lisp:export
  (common-lisp:list 'internal-service-error-exception
                    'internal-service-error-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-argument-exception
     (globalaccelerator-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-argument-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-argument-exception
                    'invalid-argument-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-next-token-exception
     (globalaccelerator-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-next-token-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-next-token-exception
                    'invalid-next-token-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-port-range-exception
     (globalaccelerator-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-port-range-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-port-range-exception
                    'invalid-port-range-exception-message)))
(common-lisp:deftype ip-address () 'common-lisp:string)
(common-lisp:deftype ip-address-family () 'common-lisp:string)
(common-lisp:deftype ip-address-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype ip-addresses () '(trivial-types:proper-list ip-address))
 (common-lisp:defun make-ip-addresses
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list ip-address))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass ip-set common-lisp:nil
                       ((ip-family :initarg :ip-family :initform
                         common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor struct-shape-ip-set-ip-family :shape
                         "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (ip-addresses :initarg :ip-addresses :initform
                         common-lisp:nil :type
                         (common-lisp:or ip-addresses common-lisp:null)
                         :accessor struct-shape-ip-set-ip-addresses :shape
                         "IpAddresses" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (ip-address-family :initarg :ip-address-family
                         :initform common-lisp:nil :type
                         (common-lisp:or ip-address-family common-lisp:null)
                         :accessor struct-shape-ip-set-ip-address-family :shape
                         "IpAddressFamily" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-ip-set
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'ip-set
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'ip-set 'make-ip-set))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input ip-set))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input ip-set))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-family))
      (common-lisp:list
       (common-lisp:cons "IpFamily"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-addresses))
      (common-lisp:list
       (common-lisp:cons "IpAddresses"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-address-family))
      (common-lisp:list
       (common-lisp:cons "IpAddressFamily"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input ip-set))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype ip-sets () '(trivial-types:proper-list ip-set))
 (common-lisp:defun make-ip-sets
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list ip-set))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition limit-exceeded-exception
     (globalaccelerator-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       limit-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'limit-exceeded-exception
                    'limit-exceeded-exception-message)))
(common-lisp:progn
 (common-lisp:defclass list-accelerators-request common-lisp:nil
                       ((max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-accelerators-request-max-results
                         :shape "MaxResults" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-list-accelerators-request-next-token
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-accelerators-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-accelerators-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-accelerators-request
                    'make-list-accelerators-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-accelerators-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-accelerators-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-accelerators-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-accelerators-response common-lisp:nil
                       ((accelerators :initarg :accelerators :initform
                         common-lisp:nil :type
                         (common-lisp:or accelerators common-lisp:null)
                         :accessor
                         struct-shape-list-accelerators-response-accelerators
                         :shape "Accelerators" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-list-accelerators-response-next-token
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-accelerators-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-accelerators-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-accelerators-response
                    'make-list-accelerators-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-accelerators-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-accelerators-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accelerators))
      (common-lisp:list
       (common-lisp:cons "Accelerators"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-accelerators-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-byoip-cidrs-request common-lisp:nil
                       ((max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-byoip-cidrs-request-max-results
                         :shape "MaxResults" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-list-byoip-cidrs-request-next-token
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-byoip-cidrs-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-byoip-cidrs-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-byoip-cidrs-request 'make-list-byoip-cidrs-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-byoip-cidrs-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-byoip-cidrs-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-byoip-cidrs-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-byoip-cidrs-response common-lisp:nil
                       ((byoip-cidrs :initarg :byoip-cidrs :initform
                         common-lisp:nil :type
                         (common-lisp:or byoip-cidrs common-lisp:null)
                         :accessor
                         struct-shape-list-byoip-cidrs-response-byoip-cidrs
                         :shape "ByoipCidrs" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-list-byoip-cidrs-response-next-token
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-byoip-cidrs-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-byoip-cidrs-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-byoip-cidrs-response
                    'make-list-byoip-cidrs-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-byoip-cidrs-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-byoip-cidrs-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'byoip-cidrs))
      (common-lisp:list
       (common-lisp:cons "ByoipCidrs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-byoip-cidrs-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-cross-account-attachments-request common-lisp:nil
                       ((max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-cross-account-attachments-request-max-results
                         :shape "MaxResults" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-list-cross-account-attachments-request-next-token
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-cross-account-attachments-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-cross-account-attachments-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-cross-account-attachments-request
                    'make-list-cross-account-attachments-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-cross-account-attachments-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-cross-account-attachments-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-cross-account-attachments-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-cross-account-attachments-response common-lisp:nil
                       ((cross-account-attachments :initarg
                         :cross-account-attachments :initform common-lisp:nil
                         :type (common-lisp:or attachments common-lisp:null)
                         :accessor
                         struct-shape-list-cross-account-attachments-response-cross-account-attachments
                         :shape "Attachments" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-list-cross-account-attachments-response-next-token
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-cross-account-attachments-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-cross-account-attachments-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-cross-account-attachments-response
                    'make-list-cross-account-attachments-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-cross-account-attachments-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-cross-account-attachments-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cross-account-attachments))
      (common-lisp:list
       (common-lisp:cons "CrossAccountAttachments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-cross-account-attachments-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-cross-account-resource-accounts-request
                       common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-cross-account-resource-accounts-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-cross-account-resource-accounts-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-cross-account-resource-accounts-request
                    'make-list-cross-account-resource-accounts-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-cross-account-resource-accounts-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-cross-account-resource-accounts-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-cross-account-resource-accounts-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-cross-account-resource-accounts-response
                       common-lisp:nil
                       ((resource-owner-aws-account-ids :initarg
                         :resource-owner-aws-account-ids :initform
                         common-lisp:nil :type
                         (common-lisp:or aws-account-ids common-lisp:null)
                         :accessor
                         struct-shape-list-cross-account-resource-accounts-response-resource-owner-aws-account-ids
                         :shape "AwsAccountIds" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-cross-account-resource-accounts-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-cross-account-resource-accounts-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-cross-account-resource-accounts-response
                    'make-list-cross-account-resource-accounts-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-cross-account-resource-accounts-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-cross-account-resource-accounts-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resource-owner-aws-account-ids))
      (common-lisp:list
       (common-lisp:cons "ResourceOwnerAwsAccountIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-cross-account-resource-accounts-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-cross-account-resources-request common-lisp:nil
                       ((accelerator-arn :initarg :accelerator-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-list-cross-account-resources-request-accelerator-arn
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (resource-owner-aws-account-id :initarg
                         :resource-owner-aws-account-id :initform
                         (common-lisp:error
                          ":resource-owner-aws-account-id is required")
                         :type (common-lisp:or aws-account-id common-lisp:null)
                         :accessor
                         struct-shape-list-cross-account-resources-request-resource-owner-aws-account-id
                         :shape "AwsAccountId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-cross-account-resources-request-max-results
                         :shape "MaxResults" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-list-cross-account-resources-request-next-token
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-cross-account-resources-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-cross-account-resources-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-cross-account-resources-request
                    'make-list-cross-account-resources-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-cross-account-resources-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-cross-account-resources-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accelerator-arn))
      (common-lisp:list
       (common-lisp:cons "AcceleratorArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resource-owner-aws-account-id))
      (common-lisp:list
       (common-lisp:cons "ResourceOwnerAwsAccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-cross-account-resources-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-cross-account-resources-response common-lisp:nil
                       ((cross-account-resources :initarg
                         :cross-account-resources :initform common-lisp:nil
                         :type
                         (common-lisp:or cross-account-resources
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-cross-account-resources-response-cross-account-resources
                         :shape "CrossAccountResources" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-list-cross-account-resources-response-next-token
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-cross-account-resources-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-cross-account-resources-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-cross-account-resources-response
                    'make-list-cross-account-resources-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-cross-account-resources-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-cross-account-resources-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cross-account-resources))
      (common-lisp:list
       (common-lisp:cons "CrossAccountResources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-cross-account-resources-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-custom-routing-accelerators-request common-lisp:nil
                       ((max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-custom-routing-accelerators-request-max-results
                         :shape "MaxResults" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-list-custom-routing-accelerators-request-next-token
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-custom-routing-accelerators-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-custom-routing-accelerators-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-custom-routing-accelerators-request
                    'make-list-custom-routing-accelerators-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-custom-routing-accelerators-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-custom-routing-accelerators-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-custom-routing-accelerators-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-custom-routing-accelerators-response
                       common-lisp:nil
                       ((accelerators :initarg :accelerators :initform
                         common-lisp:nil :type
                         (common-lisp:or custom-routing-accelerators
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-custom-routing-accelerators-response-accelerators
                         :shape "CustomRoutingAccelerators" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-list-custom-routing-accelerators-response-next-token
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-custom-routing-accelerators-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-custom-routing-accelerators-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-custom-routing-accelerators-response
                    'make-list-custom-routing-accelerators-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-custom-routing-accelerators-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-custom-routing-accelerators-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accelerators))
      (common-lisp:list
       (common-lisp:cons "Accelerators"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-custom-routing-accelerators-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-custom-routing-endpoint-groups-request
                       common-lisp:nil
                       ((listener-arn :initarg :listener-arn :initform
                         (common-lisp:error ":listener-arn is required") :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-list-custom-routing-endpoint-groups-request-listener-arn
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-custom-routing-endpoint-groups-request-max-results
                         :shape "MaxResults" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-list-custom-routing-endpoint-groups-request-next-token
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-custom-routing-endpoint-groups-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-custom-routing-endpoint-groups-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-custom-routing-endpoint-groups-request
                    'make-list-custom-routing-endpoint-groups-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-custom-routing-endpoint-groups-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-custom-routing-endpoint-groups-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'listener-arn))
      (common-lisp:list
       (common-lisp:cons "ListenerArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-custom-routing-endpoint-groups-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-custom-routing-endpoint-groups-response
                       common-lisp:nil
                       ((endpoint-groups :initarg :endpoint-groups :initform
                         common-lisp:nil :type
                         (common-lisp:or custom-routing-endpoint-groups
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-custom-routing-endpoint-groups-response-endpoint-groups
                         :shape "CustomRoutingEndpointGroups" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-list-custom-routing-endpoint-groups-response-next-token
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-custom-routing-endpoint-groups-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-custom-routing-endpoint-groups-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-custom-routing-endpoint-groups-response
                    'make-list-custom-routing-endpoint-groups-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-custom-routing-endpoint-groups-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-custom-routing-endpoint-groups-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-groups))
      (common-lisp:list
       (common-lisp:cons "EndpointGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-custom-routing-endpoint-groups-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-custom-routing-listeners-request common-lisp:nil
                       ((accelerator-arn :initarg :accelerator-arn :initform
                         (common-lisp:error ":accelerator-arn is required")
                         :type (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-list-custom-routing-listeners-request-accelerator-arn
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-custom-routing-listeners-request-max-results
                         :shape "MaxResults" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-list-custom-routing-listeners-request-next-token
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-custom-routing-listeners-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-custom-routing-listeners-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-custom-routing-listeners-request
                    'make-list-custom-routing-listeners-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-custom-routing-listeners-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-custom-routing-listeners-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accelerator-arn))
      (common-lisp:list
       (common-lisp:cons "AcceleratorArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-custom-routing-listeners-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-custom-routing-listeners-response common-lisp:nil
                       ((listeners :initarg :listeners :initform
                         common-lisp:nil :type
                         (common-lisp:or custom-routing-listeners
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-custom-routing-listeners-response-listeners
                         :shape "CustomRoutingListeners" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-list-custom-routing-listeners-response-next-token
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-custom-routing-listeners-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-custom-routing-listeners-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-custom-routing-listeners-response
                    'make-list-custom-routing-listeners-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-custom-routing-listeners-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-custom-routing-listeners-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'listeners))
      (common-lisp:list
       (common-lisp:cons "Listeners"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-custom-routing-listeners-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-custom-routing-port-mappings-by-destination-request
                       common-lisp:nil
                       ((endpoint-id :initarg :endpoint-id :initform
                         (common-lisp:error ":endpoint-id is required") :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-list-custom-routing-port-mappings-by-destination-request-endpoint-id
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (destination-address :initarg :destination-address
                         :initform
                         (common-lisp:error ":destination-address is required")
                         :type (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-list-custom-routing-port-mappings-by-destination-request-destination-address
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or port-mappings-max-results
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-custom-routing-port-mappings-by-destination-request-max-results
                         :shape "PortMappingsMaxResults" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-list-custom-routing-port-mappings-by-destination-request-next-token
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-custom-routing-port-mappings-by-destination-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-custom-routing-port-mappings-by-destination-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-custom-routing-port-mappings-by-destination-request
                    'make-list-custom-routing-port-mappings-by-destination-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-custom-routing-port-mappings-by-destination-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-custom-routing-port-mappings-by-destination-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-id))
      (common-lisp:list
       (common-lisp:cons "EndpointId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination-address))
      (common-lisp:list
       (common-lisp:cons "DestinationAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-custom-routing-port-mappings-by-destination-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass
  list-custom-routing-port-mappings-by-destination-response common-lisp:nil
  ((destination-port-mappings :initarg :destination-port-mappings :initform
    common-lisp:nil :type
    (common-lisp:or destination-port-mappings common-lisp:null) :accessor
    struct-shape-list-custom-routing-port-mappings-by-destination-response-destination-port-mappings
    :shape "DestinationPortMappings" :location common-lisp:nil :location-name
    common-lisp:nil)
   (next-token :initarg :next-token :initform common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null) :accessor
    struct-shape-list-custom-routing-port-mappings-by-destination-response-next-token
    :shape "GenericString" :location common-lisp:nil :location-name
    common-lisp:nil))
  (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-custom-routing-port-mappings-by-destination-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-custom-routing-port-mappings-by-destination-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-custom-routing-port-mappings-by-destination-response
                    'make-list-custom-routing-port-mappings-by-destination-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-custom-routing-port-mappings-by-destination-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-custom-routing-port-mappings-by-destination-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'destination-port-mappings))
      (common-lisp:list
       (common-lisp:cons "DestinationPortMappings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-custom-routing-port-mappings-by-destination-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-custom-routing-port-mappings-request
                       common-lisp:nil
                       ((accelerator-arn :initarg :accelerator-arn :initform
                         (common-lisp:error ":accelerator-arn is required")
                         :type (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-list-custom-routing-port-mappings-request-accelerator-arn
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (endpoint-group-arn :initarg :endpoint-group-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-list-custom-routing-port-mappings-request-endpoint-group-arn
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or port-mappings-max-results
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-custom-routing-port-mappings-request-max-results
                         :shape "PortMappingsMaxResults" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-list-custom-routing-port-mappings-request-next-token
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-custom-routing-port-mappings-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-custom-routing-port-mappings-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-custom-routing-port-mappings-request
                    'make-list-custom-routing-port-mappings-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-custom-routing-port-mappings-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-custom-routing-port-mappings-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accelerator-arn))
      (common-lisp:list
       (common-lisp:cons "AcceleratorArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-group-arn))
      (common-lisp:list
       (common-lisp:cons "EndpointGroupArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-custom-routing-port-mappings-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-custom-routing-port-mappings-response
                       common-lisp:nil
                       ((port-mappings :initarg :port-mappings :initform
                         common-lisp:nil :type
                         (common-lisp:or port-mappings common-lisp:null)
                         :accessor
                         struct-shape-list-custom-routing-port-mappings-response-port-mappings
                         :shape "PortMappings" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-list-custom-routing-port-mappings-response-next-token
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-custom-routing-port-mappings-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-custom-routing-port-mappings-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-custom-routing-port-mappings-response
                    'make-list-custom-routing-port-mappings-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-custom-routing-port-mappings-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-custom-routing-port-mappings-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port-mappings))
      (common-lisp:list
       (common-lisp:cons "PortMappings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-custom-routing-port-mappings-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-endpoint-groups-request common-lisp:nil
                       ((listener-arn :initarg :listener-arn :initform
                         (common-lisp:error ":listener-arn is required") :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-list-endpoint-groups-request-listener-arn
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-endpoint-groups-request-max-results
                         :shape "MaxResults" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-list-endpoint-groups-request-next-token
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-endpoint-groups-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-endpoint-groups-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-endpoint-groups-request
                    'make-list-endpoint-groups-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-endpoint-groups-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-endpoint-groups-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'listener-arn))
      (common-lisp:list
       (common-lisp:cons "ListenerArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-endpoint-groups-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-endpoint-groups-response common-lisp:nil
                       ((endpoint-groups :initarg :endpoint-groups :initform
                         common-lisp:nil :type
                         (common-lisp:or endpoint-groups common-lisp:null)
                         :accessor
                         struct-shape-list-endpoint-groups-response-endpoint-groups
                         :shape "EndpointGroups" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-list-endpoint-groups-response-next-token
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-endpoint-groups-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-endpoint-groups-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-endpoint-groups-response
                    'make-list-endpoint-groups-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-endpoint-groups-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-endpoint-groups-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-groups))
      (common-lisp:list
       (common-lisp:cons "EndpointGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-endpoint-groups-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-listeners-request common-lisp:nil
                       ((accelerator-arn :initarg :accelerator-arn :initform
                         (common-lisp:error ":accelerator-arn is required")
                         :type (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-list-listeners-request-accelerator-arn
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-listeners-request-max-results :shape
                         "MaxResults" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-list-listeners-request-next-token :shape
                         "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-listeners-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-listeners-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-listeners-request 'make-list-listeners-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-listeners-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-listeners-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accelerator-arn))
      (common-lisp:list
       (common-lisp:cons "AcceleratorArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-listeners-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-listeners-response common-lisp:nil
                       ((listeners :initarg :listeners :initform
                         common-lisp:nil :type
                         (common-lisp:or listeners common-lisp:null) :accessor
                         struct-shape-list-listeners-response-listeners :shape
                         "Listeners" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-list-listeners-response-next-token :shape
                         "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-listeners-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-listeners-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-listeners-response 'make-list-listeners-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-listeners-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-listeners-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'listeners))
      (common-lisp:list
       (common-lisp:cons "Listeners"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-listeners-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-request common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resource-arn is required") :type
                         (common-lisp:or resource-arn common-lisp:null)
                         :accessor
                         struct-shape-list-tags-for-resource-request-resource-arn
                         :shape "ResourceArn" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-tags-for-resource-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-request
                    'make-list-tags-for-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-response common-lisp:nil
                       ((tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         struct-shape-list-tags-for-resource-response-tags
                         :shape "Tags" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-tags-for-resource-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-response
                    'make-list-tags-for-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass listener common-lisp:nil
                       ((listener-arn :initarg :listener-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor struct-shape-listener-listener-arn :shape
                         "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (port-ranges :initarg :port-ranges :initform
                         common-lisp:nil :type
                         (common-lisp:or port-ranges common-lisp:null)
                         :accessor struct-shape-listener-port-ranges :shape
                         "PortRanges" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (protocol :initarg :protocol :initform common-lisp:nil
                         :type (common-lisp:or protocol common-lisp:null)
                         :accessor struct-shape-listener-protocol :shape
                         "Protocol" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (client-affinity :initarg :client-affinity :initform
                         common-lisp:nil :type
                         (common-lisp:or client-affinity common-lisp:null)
                         :accessor struct-shape-listener-client-affinity :shape
                         "ClientAffinity" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-listener
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'listener
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'listener 'make-listener))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input listener))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input listener))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'listener-arn))
      (common-lisp:list
       (common-lisp:cons "ListenerArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port-ranges))
      (common-lisp:list
       (common-lisp:cons "PortRanges"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'protocol))
      (common-lisp:list
       (common-lisp:cons "Protocol"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-affinity))
      (common-lisp:list
       (common-lisp:cons "ClientAffinity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input listener))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition listener-not-found-exception
     (globalaccelerator-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       listener-not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'listener-not-found-exception
                    'listener-not-found-exception-message)))
(common-lisp:progn
 (common-lisp:deftype listeners () '(trivial-types:proper-list listener))
 (common-lisp:defun make-listeners
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list listener))
   aws-sdk/generator/shape::members))
(common-lisp:deftype max-results () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass port-mapping common-lisp:nil
                       ((accelerator-port :initarg :accelerator-port :initform
                         common-lisp:nil :type
                         (common-lisp:or port-number common-lisp:null)
                         :accessor struct-shape-port-mapping-accelerator-port
                         :shape "PortNumber" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (endpoint-group-arn :initarg :endpoint-group-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor struct-shape-port-mapping-endpoint-group-arn
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (endpoint-id :initarg :endpoint-id :initform
                         common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor struct-shape-port-mapping-endpoint-id :shape
                         "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (destination-socket-address :initarg
                         :destination-socket-address :initform common-lisp:nil
                         :type (common-lisp:or socket-address common-lisp:null)
                         :accessor
                         struct-shape-port-mapping-destination-socket-address
                         :shape "SocketAddress" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (protocols :initarg :protocols :initform
                         common-lisp:nil :type
                         (common-lisp:or custom-routing-protocols
                                         common-lisp:null)
                         :accessor struct-shape-port-mapping-protocols :shape
                         "CustomRoutingProtocols" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (destination-traffic-state :initarg
                         :destination-traffic-state :initform common-lisp:nil
                         :type
                         (common-lisp:or
                          custom-routing-destination-traffic-state
                          common-lisp:null)
                         :accessor
                         struct-shape-port-mapping-destination-traffic-state
                         :shape "CustomRoutingDestinationTrafficState"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-port-mapping
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'port-mapping
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'port-mapping 'make-port-mapping))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input port-mapping))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input port-mapping))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accelerator-port))
      (common-lisp:list
       (common-lisp:cons "AcceleratorPort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-group-arn))
      (common-lisp:list
       (common-lisp:cons "EndpointGroupArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-id))
      (common-lisp:list
       (common-lisp:cons "EndpointId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'destination-socket-address))
      (common-lisp:list
       (common-lisp:cons "DestinationSocketAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'protocols))
      (common-lisp:list
       (common-lisp:cons "Protocols"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'destination-traffic-state))
      (common-lisp:list
       (common-lisp:cons "DestinationTrafficState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input port-mapping))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype port-mappings ()
   '(trivial-types:proper-list port-mapping))
 (common-lisp:defun make-port-mappings
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list port-mapping))
   aws-sdk/generator/shape::members))
(common-lisp:deftype port-mappings-max-results () 'common-lisp:integer)
(common-lisp:deftype port-number () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass port-override common-lisp:nil
                       ((listener-port :initarg :listener-port :initform
                         common-lisp:nil :type
                         (common-lisp:or port-number common-lisp:null)
                         :accessor struct-shape-port-override-listener-port
                         :shape "PortNumber" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (endpoint-port :initarg :endpoint-port :initform
                         common-lisp:nil :type
                         (common-lisp:or port-number common-lisp:null)
                         :accessor struct-shape-port-override-endpoint-port
                         :shape "PortNumber" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-port-override
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'port-override
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'port-override 'make-port-override))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input port-override))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input port-override))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'listener-port))
      (common-lisp:list
       (common-lisp:cons "ListenerPort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-port))
      (common-lisp:list
       (common-lisp:cons "EndpointPort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input port-override))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype port-overrides ()
   '(trivial-types:proper-list port-override))
 (common-lisp:defun make-port-overrides
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list port-override))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass port-range common-lisp:nil
                       ((from-port :initarg :from-port :initform
                         common-lisp:nil :type
                         (common-lisp:or port-number common-lisp:null)
                         :accessor struct-shape-port-range-from-port :shape
                         "PortNumber" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (to-port :initarg :to-port :initform common-lisp:nil
                         :type (common-lisp:or port-number common-lisp:null)
                         :accessor struct-shape-port-range-to-port :shape
                         "PortNumber" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-port-range
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'port-range
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'port-range 'make-port-range))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input port-range))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input port-range))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'from-port))
      (common-lisp:list
       (common-lisp:cons "FromPort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'to-port))
      (common-lisp:list
       (common-lisp:cons "ToPort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input port-range))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype port-ranges () '(trivial-types:proper-list port-range))
 (common-lisp:defun make-port-ranges
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list port-range))
   aws-sdk/generator/shape::members))
(common-lisp:deftype principal () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype principals () '(trivial-types:proper-list principal))
 (common-lisp:defun make-principals
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list principal))
   aws-sdk/generator/shape::members))
(common-lisp:deftype protocol () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype protocols () '(trivial-types:proper-list protocol))
 (common-lisp:defun make-protocols
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list protocol))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass provision-byoip-cidr-request common-lisp:nil
                       ((cidr :initarg :cidr :initform
                         (common-lisp:error ":cidr is required") :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-provision-byoip-cidr-request-cidr :shape
                         "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cidr-authorization-context :initarg
                         :cidr-authorization-context :initform
                         (common-lisp:error
                          ":cidr-authorization-context is required")
                         :type
                         (common-lisp:or cidr-authorization-context
                                         common-lisp:null)
                         :accessor
                         struct-shape-provision-byoip-cidr-request-cidr-authorization-context
                         :shape "CidrAuthorizationContext" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-provision-byoip-cidr-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'provision-byoip-cidr-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'provision-byoip-cidr-request
                    'make-provision-byoip-cidr-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          provision-byoip-cidr-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          provision-byoip-cidr-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cidr))
      (common-lisp:list
       (common-lisp:cons "Cidr"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cidr-authorization-context))
      (common-lisp:list
       (common-lisp:cons "CidrAuthorizationContext"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          provision-byoip-cidr-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass provision-byoip-cidr-response common-lisp:nil
                       ((byoip-cidr :initarg :byoip-cidr :initform
                         common-lisp:nil :type
                         (common-lisp:or byoip-cidr common-lisp:null) :accessor
                         struct-shape-provision-byoip-cidr-response-byoip-cidr
                         :shape "ByoipCidr" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-provision-byoip-cidr-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'provision-byoip-cidr-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'provision-byoip-cidr-response
                    'make-provision-byoip-cidr-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          provision-byoip-cidr-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          provision-byoip-cidr-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'byoip-cidr))
      (common-lisp:list
       (common-lisp:cons "ByoipCidr"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          provision-byoip-cidr-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass remove-custom-routing-endpoints-request common-lisp:nil
                       ((endpoint-ids :initarg :endpoint-ids :initform
                         (common-lisp:error ":endpoint-ids is required") :type
                         (common-lisp:or endpoint-ids common-lisp:null)
                         :accessor
                         struct-shape-remove-custom-routing-endpoints-request-endpoint-ids
                         :shape "EndpointIds" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (endpoint-group-arn :initarg :endpoint-group-arn
                         :initform
                         (common-lisp:error ":endpoint-group-arn is required")
                         :type (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-remove-custom-routing-endpoints-request-endpoint-group-arn
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-remove-custom-routing-endpoints-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'remove-custom-routing-endpoints-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'remove-custom-routing-endpoints-request
                    'make-remove-custom-routing-endpoints-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          remove-custom-routing-endpoints-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          remove-custom-routing-endpoints-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-ids))
      (common-lisp:list
       (common-lisp:cons "EndpointIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-group-arn))
      (common-lisp:list
       (common-lisp:cons "EndpointGroupArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          remove-custom-routing-endpoints-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass remove-endpoints-request common-lisp:nil
                       ((endpoint-identifiers :initarg :endpoint-identifiers
                         :initform
                         (common-lisp:error
                          ":endpoint-identifiers is required")
                         :type
                         (common-lisp:or endpoint-identifiers common-lisp:null)
                         :accessor
                         struct-shape-remove-endpoints-request-endpoint-identifiers
                         :shape "EndpointIdentifiers" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (endpoint-group-arn :initarg :endpoint-group-arn
                         :initform
                         (common-lisp:error ":endpoint-group-arn is required")
                         :type (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-remove-endpoints-request-endpoint-group-arn
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-remove-endpoints-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'remove-endpoints-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'remove-endpoints-request 'make-remove-endpoints-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          remove-endpoints-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          remove-endpoints-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'endpoint-identifiers))
      (common-lisp:list
       (common-lisp:cons "EndpointIdentifiers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-group-arn))
      (common-lisp:list
       (common-lisp:cons "EndpointGroupArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          remove-endpoints-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass resource common-lisp:nil
                       ((endpoint-id :initarg :endpoint-id :initform
                         (common-lisp:error ":endpoint-id is required") :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor struct-shape-resource-endpoint-id :shape
                         "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (region :initarg :region :initform common-lisp:nil
                         :type (common-lisp:or generic-string common-lisp:null)
                         :accessor struct-shape-resource-region :shape
                         "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-resource
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'resource
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'resource 'make-resource))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input resource))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input resource))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-id))
      (common-lisp:list
       (common-lisp:cons "EndpointId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'region))
      (common-lisp:list
       (common-lisp:cons "Region"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input resource))
   common-lisp:nil))
(common-lisp:deftype resource-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype resources () '(trivial-types:proper-list resource))
 (common-lisp:defun make-resources
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list resource))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass socket-address common-lisp:nil
                       ((ip-address :initarg :ip-address :initform
                         common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor struct-shape-socket-address-ip-address
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (port :initarg :port :initform common-lisp:nil :type
                         (common-lisp:or port-number common-lisp:null)
                         :accessor struct-shape-socket-address-port :shape
                         "PortNumber" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-socket-address
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'socket-address
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'socket-address 'make-socket-address))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input socket-address))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input socket-address))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-address))
      (common-lisp:list
       (common-lisp:cons "IpAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "Port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input socket-address))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype socket-addresses ()
   '(trivial-types:proper-list socket-address))
 (common-lisp:defun make-socket-addresses
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list socket-address))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass tag common-lisp:nil
                       ((key :initarg :key :initform
                         (common-lisp:error ":key is required") :type
                         (common-lisp:or tag-key common-lisp:null) :accessor
                         struct-shape-tag-key :shape "TagKey" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (value :initarg :value :initform
                         (common-lisp:error ":value is required") :type
                         (common-lisp:or tag-value common-lisp:null) :accessor
                         struct-shape-tag-value :shape "TagValue" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tag (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'tag
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'tag 'make-tag))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag))
   common-lisp:nil))
(common-lisp:deftype tag-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tag-keys () '(trivial-types:proper-list tag-key))
 (common-lisp:defun make-tag-keys
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass tag-resource-request common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resource-arn is required") :type
                         (common-lisp:or resource-arn common-lisp:null)
                         :accessor
                         struct-shape-tag-resource-request-resource-arn :shape
                         "ResourceArn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (tags :initarg :tags :initform
                         (common-lisp:error ":tags is required") :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         struct-shape-tag-resource-request-tags :shape "Tags"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tag-resource-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'tag-resource-request 'make-tag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass tag-resource-response common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tag-resource-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'tag-resource-response 'make-tag-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   common-lisp:nil))
(common-lisp:deftype tag-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tags () '(trivial-types:proper-list tag))
 (common-lisp:defun make-tags
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag))
   aws-sdk/generator/shape::members))
(common-lisp:deftype threshold-count () 'common-lisp:integer)
(common-lisp:deftype timestamp () 'common-lisp:string)
(common-lisp:deftype traffic-dial-percentage () 'common-lisp:single-float)
(common-lisp:progn
 (common-lisp:define-condition transaction-in-progress-exception
     (globalaccelerator-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       transaction-in-progress-exception-message)))
 (common-lisp:export
  (common-lisp:list 'transaction-in-progress-exception
                    'transaction-in-progress-exception-message)))
(common-lisp:progn
 (common-lisp:defclass untag-resource-request common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resource-arn is required") :type
                         (common-lisp:or resource-arn common-lisp:null)
                         :accessor
                         struct-shape-untag-resource-request-resource-arn
                         :shape "ResourceArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tag-keys :initarg :tag-keys :initform
                         (common-lisp:error ":tag-keys is required") :type
                         (common-lisp:or tag-keys common-lisp:null) :accessor
                         struct-shape-untag-resource-request-tag-keys :shape
                         "TagKeys" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-untag-resource-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'untag-resource-request 'make-untag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-keys))
      (common-lisp:list
       (common-lisp:cons "TagKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass untag-resource-response common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-untag-resource-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'untag-resource-response 'make-untag-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-accelerator-attributes-request common-lisp:nil
                       ((accelerator-arn :initarg :accelerator-arn :initform
                         (common-lisp:error ":accelerator-arn is required")
                         :type (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-update-accelerator-attributes-request-accelerator-arn
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (flow-logs-enabled :initarg :flow-logs-enabled
                         :initform common-lisp:nil :type
                         (common-lisp:or generic-boolean common-lisp:null)
                         :accessor
                         struct-shape-update-accelerator-attributes-request-flow-logs-enabled
                         :shape "GenericBoolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (flow-logs-s3bucket :initarg :flow-logs-s3bucket
                         :initform common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-update-accelerator-attributes-request-flow-logs-s3bucket
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (flow-logs-s3prefix :initarg :flow-logs-s3prefix
                         :initform common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-update-accelerator-attributes-request-flow-logs-s3prefix
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-accelerator-attributes-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-accelerator-attributes-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-accelerator-attributes-request
                    'make-update-accelerator-attributes-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-accelerator-attributes-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-accelerator-attributes-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accelerator-arn))
      (common-lisp:list
       (common-lisp:cons "AcceleratorArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'flow-logs-enabled))
      (common-lisp:list
       (common-lisp:cons "FlowLogsEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'flow-logs-s3bucket))
      (common-lisp:list
       (common-lisp:cons "FlowLogsS3Bucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'flow-logs-s3prefix))
      (common-lisp:list
       (common-lisp:cons "FlowLogsS3Prefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-accelerator-attributes-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-accelerator-attributes-response common-lisp:nil
                       ((accelerator-attributes :initarg
                         :accelerator-attributes :initform common-lisp:nil
                         :type
                         (common-lisp:or accelerator-attributes
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-accelerator-attributes-response-accelerator-attributes
                         :shape "AcceleratorAttributes" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-accelerator-attributes-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-accelerator-attributes-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-accelerator-attributes-response
                    'make-update-accelerator-attributes-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-accelerator-attributes-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-accelerator-attributes-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'accelerator-attributes))
      (common-lisp:list
       (common-lisp:cons "AcceleratorAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-accelerator-attributes-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-accelerator-request common-lisp:nil
                       ((accelerator-arn :initarg :accelerator-arn :initform
                         (common-lisp:error ":accelerator-arn is required")
                         :type (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-update-accelerator-request-accelerator-arn
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor struct-shape-update-accelerator-request-name
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (ip-address-type :initarg :ip-address-type :initform
                         common-lisp:nil :type
                         (common-lisp:or ip-address-type common-lisp:null)
                         :accessor
                         struct-shape-update-accelerator-request-ip-address-type
                         :shape "IpAddressType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (enabled :initarg :enabled :initform common-lisp:nil
                         :type
                         (common-lisp:or generic-boolean common-lisp:null)
                         :accessor
                         struct-shape-update-accelerator-request-enabled :shape
                         "GenericBoolean" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-accelerator-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-accelerator-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-accelerator-request
                    'make-update-accelerator-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-accelerator-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-accelerator-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accelerator-arn))
      (common-lisp:list
       (common-lisp:cons "AcceleratorArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-address-type))
      (common-lisp:list
       (common-lisp:cons "IpAddressType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "Enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-accelerator-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-accelerator-response common-lisp:nil
                       ((accelerator :initarg :accelerator :initform
                         common-lisp:nil :type
                         (common-lisp:or accelerator common-lisp:null)
                         :accessor
                         struct-shape-update-accelerator-response-accelerator
                         :shape "Accelerator" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-accelerator-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-accelerator-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-accelerator-response
                    'make-update-accelerator-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-accelerator-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-accelerator-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accelerator))
      (common-lisp:list
       (common-lisp:cons "Accelerator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-accelerator-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-cross-account-attachment-request common-lisp:nil
                       ((attachment-arn :initarg :attachment-arn :initform
                         (common-lisp:error ":attachment-arn is required")
                         :type (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-update-cross-account-attachment-request-attachment-arn
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or attachment-name common-lisp:null)
                         :accessor
                         struct-shape-update-cross-account-attachment-request-name
                         :shape "AttachmentName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (add-principals :initarg :add-principals :initform
                         common-lisp:nil :type
                         (common-lisp:or principals common-lisp:null) :accessor
                         struct-shape-update-cross-account-attachment-request-add-principals
                         :shape "Principals" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (remove-principals :initarg :remove-principals
                         :initform common-lisp:nil :type
                         (common-lisp:or principals common-lisp:null) :accessor
                         struct-shape-update-cross-account-attachment-request-remove-principals
                         :shape "Principals" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (add-resources :initarg :add-resources :initform
                         common-lisp:nil :type
                         (common-lisp:or resources common-lisp:null) :accessor
                         struct-shape-update-cross-account-attachment-request-add-resources
                         :shape "Resources" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (remove-resources :initarg :remove-resources :initform
                         common-lisp:nil :type
                         (common-lisp:or resources common-lisp:null) :accessor
                         struct-shape-update-cross-account-attachment-request-remove-resources
                         :shape "Resources" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-cross-account-attachment-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-cross-account-attachment-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-cross-account-attachment-request
                    'make-update-cross-account-attachment-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-cross-account-attachment-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-cross-account-attachment-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attachment-arn))
      (common-lisp:list
       (common-lisp:cons "AttachmentArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'add-principals))
      (common-lisp:list
       (common-lisp:cons "AddPrincipals"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'remove-principals))
      (common-lisp:list
       (common-lisp:cons "RemovePrincipals"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'add-resources))
      (common-lisp:list
       (common-lisp:cons "AddResources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'remove-resources))
      (common-lisp:list
       (common-lisp:cons "RemoveResources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-cross-account-attachment-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-cross-account-attachment-response common-lisp:nil
                       ((cross-account-attachment :initarg
                         :cross-account-attachment :initform common-lisp:nil
                         :type (common-lisp:or attachment common-lisp:null)
                         :accessor
                         struct-shape-update-cross-account-attachment-response-cross-account-attachment
                         :shape "Attachment" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-cross-account-attachment-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-cross-account-attachment-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-cross-account-attachment-response
                    'make-update-cross-account-attachment-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-cross-account-attachment-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-cross-account-attachment-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cross-account-attachment))
      (common-lisp:list
       (common-lisp:cons "CrossAccountAttachment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-cross-account-attachment-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-custom-routing-accelerator-attributes-request
                       common-lisp:nil
                       ((accelerator-arn :initarg :accelerator-arn :initform
                         (common-lisp:error ":accelerator-arn is required")
                         :type (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-update-custom-routing-accelerator-attributes-request-accelerator-arn
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (flow-logs-enabled :initarg :flow-logs-enabled
                         :initform common-lisp:nil :type
                         (common-lisp:or generic-boolean common-lisp:null)
                         :accessor
                         struct-shape-update-custom-routing-accelerator-attributes-request-flow-logs-enabled
                         :shape "GenericBoolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (flow-logs-s3bucket :initarg :flow-logs-s3bucket
                         :initform common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-update-custom-routing-accelerator-attributes-request-flow-logs-s3bucket
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (flow-logs-s3prefix :initarg :flow-logs-s3prefix
                         :initform common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-update-custom-routing-accelerator-attributes-request-flow-logs-s3prefix
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-custom-routing-accelerator-attributes-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-custom-routing-accelerator-attributes-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-custom-routing-accelerator-attributes-request
                    'make-update-custom-routing-accelerator-attributes-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-custom-routing-accelerator-attributes-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-custom-routing-accelerator-attributes-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accelerator-arn))
      (common-lisp:list
       (common-lisp:cons "AcceleratorArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'flow-logs-enabled))
      (common-lisp:list
       (common-lisp:cons "FlowLogsEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'flow-logs-s3bucket))
      (common-lisp:list
       (common-lisp:cons "FlowLogsS3Bucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'flow-logs-s3prefix))
      (common-lisp:list
       (common-lisp:cons "FlowLogsS3Prefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-custom-routing-accelerator-attributes-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-custom-routing-accelerator-attributes-response
                       common-lisp:nil
                       ((accelerator-attributes :initarg
                         :accelerator-attributes :initform common-lisp:nil
                         :type
                         (common-lisp:or custom-routing-accelerator-attributes
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-custom-routing-accelerator-attributes-response-accelerator-attributes
                         :shape "CustomRoutingAcceleratorAttributes" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-custom-routing-accelerator-attributes-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-custom-routing-accelerator-attributes-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-custom-routing-accelerator-attributes-response
                    'make-update-custom-routing-accelerator-attributes-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-custom-routing-accelerator-attributes-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-custom-routing-accelerator-attributes-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'accelerator-attributes))
      (common-lisp:list
       (common-lisp:cons "AcceleratorAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-custom-routing-accelerator-attributes-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-custom-routing-accelerator-request
                       common-lisp:nil
                       ((accelerator-arn :initarg :accelerator-arn :initform
                         (common-lisp:error ":accelerator-arn is required")
                         :type (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-update-custom-routing-accelerator-request-accelerator-arn
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-update-custom-routing-accelerator-request-name
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (ip-address-type :initarg :ip-address-type :initform
                         common-lisp:nil :type
                         (common-lisp:or ip-address-type common-lisp:null)
                         :accessor
                         struct-shape-update-custom-routing-accelerator-request-ip-address-type
                         :shape "IpAddressType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (enabled :initarg :enabled :initform common-lisp:nil
                         :type
                         (common-lisp:or generic-boolean common-lisp:null)
                         :accessor
                         struct-shape-update-custom-routing-accelerator-request-enabled
                         :shape "GenericBoolean" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-custom-routing-accelerator-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-custom-routing-accelerator-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-custom-routing-accelerator-request
                    'make-update-custom-routing-accelerator-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-custom-routing-accelerator-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-custom-routing-accelerator-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accelerator-arn))
      (common-lisp:list
       (common-lisp:cons "AcceleratorArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-address-type))
      (common-lisp:list
       (common-lisp:cons "IpAddressType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "Enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-custom-routing-accelerator-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-custom-routing-accelerator-response
                       common-lisp:nil
                       ((accelerator :initarg :accelerator :initform
                         common-lisp:nil :type
                         (common-lisp:or custom-routing-accelerator
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-custom-routing-accelerator-response-accelerator
                         :shape "CustomRoutingAccelerator" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-custom-routing-accelerator-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-custom-routing-accelerator-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-custom-routing-accelerator-response
                    'make-update-custom-routing-accelerator-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-custom-routing-accelerator-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-custom-routing-accelerator-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accelerator))
      (common-lisp:list
       (common-lisp:cons "Accelerator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-custom-routing-accelerator-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-custom-routing-listener-request common-lisp:nil
                       ((listener-arn :initarg :listener-arn :initform
                         (common-lisp:error ":listener-arn is required") :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-update-custom-routing-listener-request-listener-arn
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (port-ranges :initarg :port-ranges :initform
                         (common-lisp:error ":port-ranges is required") :type
                         (common-lisp:or port-ranges common-lisp:null)
                         :accessor
                         struct-shape-update-custom-routing-listener-request-port-ranges
                         :shape "PortRanges" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-custom-routing-listener-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-custom-routing-listener-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-custom-routing-listener-request
                    'make-update-custom-routing-listener-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-custom-routing-listener-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-custom-routing-listener-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'listener-arn))
      (common-lisp:list
       (common-lisp:cons "ListenerArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port-ranges))
      (common-lisp:list
       (common-lisp:cons "PortRanges"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-custom-routing-listener-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-custom-routing-listener-response common-lisp:nil
                       ((listener :initarg :listener :initform common-lisp:nil
                         :type
                         (common-lisp:or custom-routing-listener
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-custom-routing-listener-response-listener
                         :shape "CustomRoutingListener" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-custom-routing-listener-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-custom-routing-listener-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-custom-routing-listener-response
                    'make-update-custom-routing-listener-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-custom-routing-listener-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-custom-routing-listener-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'listener))
      (common-lisp:list
       (common-lisp:cons "Listener"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-custom-routing-listener-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-endpoint-group-request common-lisp:nil
                       ((endpoint-group-arn :initarg :endpoint-group-arn
                         :initform
                         (common-lisp:error ":endpoint-group-arn is required")
                         :type (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-update-endpoint-group-request-endpoint-group-arn
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (endpoint-configurations :initarg
                         :endpoint-configurations :initform common-lisp:nil
                         :type
                         (common-lisp:or endpoint-configurations
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-endpoint-group-request-endpoint-configurations
                         :shape "EndpointConfigurations" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (traffic-dial-percentage :initarg
                         :traffic-dial-percentage :initform common-lisp:nil
                         :type
                         (common-lisp:or traffic-dial-percentage
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-endpoint-group-request-traffic-dial-percentage
                         :shape "TrafficDialPercentage" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (health-check-port :initarg :health-check-port
                         :initform common-lisp:nil :type
                         (common-lisp:or health-check-port common-lisp:null)
                         :accessor
                         struct-shape-update-endpoint-group-request-health-check-port
                         :shape "HealthCheckPort" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (health-check-protocol :initarg :health-check-protocol
                         :initform common-lisp:nil :type
                         (common-lisp:or health-check-protocol
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-endpoint-group-request-health-check-protocol
                         :shape "HealthCheckProtocol" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (health-check-path :initarg :health-check-path
                         :initform common-lisp:nil :type
                         (common-lisp:or health-check-path common-lisp:null)
                         :accessor
                         struct-shape-update-endpoint-group-request-health-check-path
                         :shape "HealthCheckPath" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (health-check-interval-seconds :initarg
                         :health-check-interval-seconds :initform
                         common-lisp:nil :type
                         (common-lisp:or health-check-interval-seconds
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-endpoint-group-request-health-check-interval-seconds
                         :shape "HealthCheckIntervalSeconds" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (threshold-count :initarg :threshold-count :initform
                         common-lisp:nil :type
                         (common-lisp:or threshold-count common-lisp:null)
                         :accessor
                         struct-shape-update-endpoint-group-request-threshold-count
                         :shape "ThresholdCount" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (port-overrides :initarg :port-overrides :initform
                         common-lisp:nil :type
                         (common-lisp:or port-overrides common-lisp:null)
                         :accessor
                         struct-shape-update-endpoint-group-request-port-overrides
                         :shape "PortOverrides" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-endpoint-group-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-endpoint-group-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-endpoint-group-request
                    'make-update-endpoint-group-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-endpoint-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-endpoint-group-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-group-arn))
      (common-lisp:list
       (common-lisp:cons "EndpointGroupArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'endpoint-configurations))
      (common-lisp:list
       (common-lisp:cons "EndpointConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'traffic-dial-percentage))
      (common-lisp:list
       (common-lisp:cons "TrafficDialPercentage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'health-check-port))
      (common-lisp:list
       (common-lisp:cons "HealthCheckPort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'health-check-protocol))
      (common-lisp:list
       (common-lisp:cons "HealthCheckProtocol"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'health-check-path))
      (common-lisp:list
       (common-lisp:cons "HealthCheckPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'health-check-interval-seconds))
      (common-lisp:list
       (common-lisp:cons "HealthCheckIntervalSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'threshold-count))
      (common-lisp:list
       (common-lisp:cons "ThresholdCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port-overrides))
      (common-lisp:list
       (common-lisp:cons "PortOverrides"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-endpoint-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-endpoint-group-response common-lisp:nil
                       ((endpoint-group :initarg :endpoint-group :initform
                         common-lisp:nil :type
                         (common-lisp:or endpoint-group common-lisp:null)
                         :accessor
                         struct-shape-update-endpoint-group-response-endpoint-group
                         :shape "EndpointGroup" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-endpoint-group-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-endpoint-group-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-endpoint-group-response
                    'make-update-endpoint-group-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-endpoint-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-endpoint-group-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-group))
      (common-lisp:list
       (common-lisp:cons "EndpointGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-endpoint-group-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-listener-request common-lisp:nil
                       ((listener-arn :initarg :listener-arn :initform
                         (common-lisp:error ":listener-arn is required") :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-update-listener-request-listener-arn
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (port-ranges :initarg :port-ranges :initform
                         common-lisp:nil :type
                         (common-lisp:or port-ranges common-lisp:null)
                         :accessor
                         struct-shape-update-listener-request-port-ranges
                         :shape "PortRanges" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (protocol :initarg :protocol :initform common-lisp:nil
                         :type (common-lisp:or protocol common-lisp:null)
                         :accessor
                         struct-shape-update-listener-request-protocol :shape
                         "Protocol" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (client-affinity :initarg :client-affinity :initform
                         common-lisp:nil :type
                         (common-lisp:or client-affinity common-lisp:null)
                         :accessor
                         struct-shape-update-listener-request-client-affinity
                         :shape "ClientAffinity" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-listener-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-listener-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-listener-request 'make-update-listener-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-listener-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-listener-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'listener-arn))
      (common-lisp:list
       (common-lisp:cons "ListenerArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port-ranges))
      (common-lisp:list
       (common-lisp:cons "PortRanges"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'protocol))
      (common-lisp:list
       (common-lisp:cons "Protocol"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-affinity))
      (common-lisp:list
       (common-lisp:cons "ClientAffinity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-listener-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-listener-response common-lisp:nil
                       ((listener :initarg :listener :initform common-lisp:nil
                         :type (common-lisp:or listener common-lisp:null)
                         :accessor
                         struct-shape-update-listener-response-listener :shape
                         "Listener" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-listener-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-listener-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-listener-response 'make-update-listener-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-listener-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-listener-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'listener))
      (common-lisp:list
       (common-lisp:cons "Listener"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-listener-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass withdraw-byoip-cidr-request common-lisp:nil
                       ((cidr :initarg :cidr :initform
                         (common-lisp:error ":cidr is required") :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-withdraw-byoip-cidr-request-cidr :shape
                         "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-withdraw-byoip-cidr-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'withdraw-byoip-cidr-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'withdraw-byoip-cidr-request
                    'make-withdraw-byoip-cidr-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          withdraw-byoip-cidr-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          withdraw-byoip-cidr-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cidr))
      (common-lisp:list
       (common-lisp:cons "Cidr"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          withdraw-byoip-cidr-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass withdraw-byoip-cidr-response common-lisp:nil
                       ((byoip-cidr :initarg :byoip-cidr :initform
                         common-lisp:nil :type
                         (common-lisp:or byoip-cidr common-lisp:null) :accessor
                         struct-shape-withdraw-byoip-cidr-response-byoip-cidr
                         :shape "ByoipCidr" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-withdraw-byoip-cidr-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'withdraw-byoip-cidr-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'withdraw-byoip-cidr-response
                    'make-withdraw-byoip-cidr-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          withdraw-byoip-cidr-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          withdraw-byoip-cidr-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'byoip-cidr))
      (common-lisp:list
       (common-lisp:cons "ByoipCidr"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          withdraw-byoip-cidr-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defun add-custom-routing-endpoints
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key endpoint-configurations
                     endpoint-group-arn)
   (common-lisp:declare
    (common-lisp:ignorable endpoint-configurations endpoint-group-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-add-custom-routing-endpoints-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'globalaccelerator-request aws-sdk/generator/operation::input "POST"
        "/" "AddCustomRoutingEndpoints"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'add-custom-routing-endpoints))
(common-lisp:progn
 (common-lisp:defun add-endpoints
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key endpoint-configurations
                     endpoint-group-arn)
   (common-lisp:declare
    (common-lisp:ignorable endpoint-configurations endpoint-group-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-add-endpoints-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'globalaccelerator-request aws-sdk/generator/operation::input "POST"
        "/" "AddEndpoints"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'add-endpoints))
(common-lisp:progn
 (common-lisp:defun advertise-byoip-cidr
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cidr)
   (common-lisp:declare (common-lisp:ignorable cidr))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-advertise-byoip-cidr-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'globalaccelerator-request aws-sdk/generator/operation::input "POST"
        "/" "AdvertiseByoipCidr"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'advertise-byoip-cidr))
(common-lisp:progn
 (common-lisp:defun allow-custom-routing-traffic
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key endpoint-group-arn endpoint-id
                     destination-addresses destination-ports
                     allow-all-traffic-to-endpoint)
   (common-lisp:declare
    (common-lisp:ignorable endpoint-group-arn endpoint-id destination-addresses
     destination-ports allow-all-traffic-to-endpoint))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-allow-custom-routing-traffic-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'globalaccelerator-request aws-sdk/generator/operation::input "POST"
        "/" "AllowCustomRoutingTraffic"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'allow-custom-routing-traffic))
(common-lisp:progn
 (common-lisp:defun create-accelerator
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name ip-address-type ip-addresses enabled
                     idempotency-token tags)
   (common-lisp:declare
    (common-lisp:ignorable name ip-address-type ip-addresses enabled
     idempotency-token tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-accelerator-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'globalaccelerator-request aws-sdk/generator/operation::input "POST"
        "/" "CreateAccelerator"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-accelerator))
(common-lisp:progn
 (common-lisp:defun create-cross-account-attachment
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name principals resources
                     idempotency-token tags)
   (common-lisp:declare
    (common-lisp:ignorable name principals resources idempotency-token tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-cross-account-attachment-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'globalaccelerator-request aws-sdk/generator/operation::input "POST"
        "/" "CreateCrossAccountAttachment"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-cross-account-attachment))
(common-lisp:progn
 (common-lisp:defun create-custom-routing-accelerator
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name ip-address-type ip-addresses enabled
                     idempotency-token tags)
   (common-lisp:declare
    (common-lisp:ignorable name ip-address-type ip-addresses enabled
     idempotency-token tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-custom-routing-accelerator-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'globalaccelerator-request aws-sdk/generator/operation::input "POST"
        "/" "CreateCustomRoutingAccelerator"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-custom-routing-accelerator))
(common-lisp:progn
 (common-lisp:defun create-custom-routing-endpoint-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key listener-arn endpoint-group-region
                     destination-configurations idempotency-token)
   (common-lisp:declare
    (common-lisp:ignorable listener-arn endpoint-group-region
     destination-configurations idempotency-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-custom-routing-endpoint-group-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'globalaccelerator-request aws-sdk/generator/operation::input "POST"
        "/" "CreateCustomRoutingEndpointGroup"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-custom-routing-endpoint-group))
(common-lisp:progn
 (common-lisp:defun create-custom-routing-listener
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key accelerator-arn port-ranges
                     idempotency-token)
   (common-lisp:declare
    (common-lisp:ignorable accelerator-arn port-ranges idempotency-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-custom-routing-listener-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'globalaccelerator-request aws-sdk/generator/operation::input "POST"
        "/" "CreateCustomRoutingListener"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-custom-routing-listener))
(common-lisp:progn
 (common-lisp:defun create-endpoint-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key listener-arn endpoint-group-region
                     endpoint-configurations traffic-dial-percentage
                     health-check-port health-check-protocol health-check-path
                     health-check-interval-seconds threshold-count
                     idempotency-token port-overrides)
   (common-lisp:declare
    (common-lisp:ignorable listener-arn endpoint-group-region
     endpoint-configurations traffic-dial-percentage health-check-port
     health-check-protocol health-check-path health-check-interval-seconds
     threshold-count idempotency-token port-overrides))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-endpoint-group-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'globalaccelerator-request aws-sdk/generator/operation::input "POST"
        "/" "CreateEndpointGroup"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-endpoint-group))
(common-lisp:progn
 (common-lisp:defun create-listener
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key accelerator-arn port-ranges protocol
                     client-affinity idempotency-token)
   (common-lisp:declare
    (common-lisp:ignorable accelerator-arn port-ranges protocol client-affinity
     idempotency-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-listener-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'globalaccelerator-request aws-sdk/generator/operation::input "POST"
        "/" "CreateListener"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-listener))
(common-lisp:progn
 (common-lisp:defun delete-accelerator
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key accelerator-arn)
   (common-lisp:declare (common-lisp:ignorable accelerator-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-accelerator-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'globalaccelerator-request aws-sdk/generator/operation::input "POST"
        "/" "DeleteAccelerator"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-accelerator))
(common-lisp:progn
 (common-lisp:defun delete-cross-account-attachment
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key attachment-arn)
   (common-lisp:declare (common-lisp:ignorable attachment-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-cross-account-attachment-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'globalaccelerator-request aws-sdk/generator/operation::input "POST"
        "/" "DeleteCrossAccountAttachment"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-cross-account-attachment))
(common-lisp:progn
 (common-lisp:defun delete-custom-routing-accelerator
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key accelerator-arn)
   (common-lisp:declare (common-lisp:ignorable accelerator-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-custom-routing-accelerator-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'globalaccelerator-request aws-sdk/generator/operation::input "POST"
        "/" "DeleteCustomRoutingAccelerator"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-custom-routing-accelerator))
(common-lisp:progn
 (common-lisp:defun delete-custom-routing-endpoint-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key endpoint-group-arn)
   (common-lisp:declare (common-lisp:ignorable endpoint-group-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-custom-routing-endpoint-group-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'globalaccelerator-request aws-sdk/generator/operation::input "POST"
        "/" "DeleteCustomRoutingEndpointGroup"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-custom-routing-endpoint-group))
(common-lisp:progn
 (common-lisp:defun delete-custom-routing-listener
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key listener-arn)
   (common-lisp:declare (common-lisp:ignorable listener-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-custom-routing-listener-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'globalaccelerator-request aws-sdk/generator/operation::input "POST"
        "/" "DeleteCustomRoutingListener"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-custom-routing-listener))
(common-lisp:progn
 (common-lisp:defun delete-endpoint-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key endpoint-group-arn)
   (common-lisp:declare (common-lisp:ignorable endpoint-group-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-endpoint-group-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'globalaccelerator-request aws-sdk/generator/operation::input "POST"
        "/" "DeleteEndpointGroup"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-endpoint-group))
(common-lisp:progn
 (common-lisp:defun delete-listener
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key listener-arn)
   (common-lisp:declare (common-lisp:ignorable listener-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-listener-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'globalaccelerator-request aws-sdk/generator/operation::input "POST"
        "/" "DeleteListener"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-listener))
(common-lisp:progn
 (common-lisp:defun deny-custom-routing-traffic
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key endpoint-group-arn endpoint-id
                     destination-addresses destination-ports
                     deny-all-traffic-to-endpoint)
   (common-lisp:declare
    (common-lisp:ignorable endpoint-group-arn endpoint-id destination-addresses
     destination-ports deny-all-traffic-to-endpoint))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-deny-custom-routing-traffic-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'globalaccelerator-request aws-sdk/generator/operation::input "POST"
        "/" "DenyCustomRoutingTraffic"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'deny-custom-routing-traffic))
(common-lisp:progn
 (common-lisp:defun deprovision-byoip-cidr
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cidr)
   (common-lisp:declare (common-lisp:ignorable cidr))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-deprovision-byoip-cidr-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'globalaccelerator-request aws-sdk/generator/operation::input "POST"
        "/" "DeprovisionByoipCidr"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'deprovision-byoip-cidr))
(common-lisp:progn
 (common-lisp:defun describe-accelerator
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key accelerator-arn)
   (common-lisp:declare (common-lisp:ignorable accelerator-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-accelerator-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'globalaccelerator-request aws-sdk/generator/operation::input "POST"
        "/" "DescribeAccelerator"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-accelerator))
(common-lisp:progn
 (common-lisp:defun describe-accelerator-attributes
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key accelerator-arn)
   (common-lisp:declare (common-lisp:ignorable accelerator-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-accelerator-attributes-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'globalaccelerator-request aws-sdk/generator/operation::input "POST"
        "/" "DescribeAcceleratorAttributes"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-accelerator-attributes))
(common-lisp:progn
 (common-lisp:defun describe-cross-account-attachment
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key attachment-arn)
   (common-lisp:declare (common-lisp:ignorable attachment-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-cross-account-attachment-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'globalaccelerator-request aws-sdk/generator/operation::input "POST"
        "/" "DescribeCrossAccountAttachment"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-cross-account-attachment))
(common-lisp:progn
 (common-lisp:defun describe-custom-routing-accelerator
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key accelerator-arn)
   (common-lisp:declare (common-lisp:ignorable accelerator-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-custom-routing-accelerator-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'globalaccelerator-request aws-sdk/generator/operation::input "POST"
        "/" "DescribeCustomRoutingAccelerator"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-custom-routing-accelerator))
(common-lisp:progn
 (common-lisp:defun describe-custom-routing-accelerator-attributes
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key accelerator-arn)
   (common-lisp:declare (common-lisp:ignorable accelerator-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-custom-routing-accelerator-attributes-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'globalaccelerator-request aws-sdk/generator/operation::input "POST"
        "/" "DescribeCustomRoutingAcceleratorAttributes"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-custom-routing-accelerator-attributes))
(common-lisp:progn
 (common-lisp:defun describe-custom-routing-endpoint-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key endpoint-group-arn)
   (common-lisp:declare (common-lisp:ignorable endpoint-group-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-custom-routing-endpoint-group-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'globalaccelerator-request aws-sdk/generator/operation::input "POST"
        "/" "DescribeCustomRoutingEndpointGroup"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-custom-routing-endpoint-group))
(common-lisp:progn
 (common-lisp:defun describe-custom-routing-listener
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key listener-arn)
   (common-lisp:declare (common-lisp:ignorable listener-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-custom-routing-listener-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'globalaccelerator-request aws-sdk/generator/operation::input "POST"
        "/" "DescribeCustomRoutingListener"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-custom-routing-listener))
(common-lisp:progn
 (common-lisp:defun describe-endpoint-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key endpoint-group-arn)
   (common-lisp:declare (common-lisp:ignorable endpoint-group-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-endpoint-group-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'globalaccelerator-request aws-sdk/generator/operation::input "POST"
        "/" "DescribeEndpointGroup"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-endpoint-group))
(common-lisp:progn
 (common-lisp:defun describe-listener
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key listener-arn)
   (common-lisp:declare (common-lisp:ignorable listener-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-listener-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'globalaccelerator-request aws-sdk/generator/operation::input "POST"
        "/" "DescribeListener"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-listener))
(common-lisp:progn
 (common-lisp:defun list-accelerators
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-accelerators-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'globalaccelerator-request aws-sdk/generator/operation::input "POST"
        "/" "ListAccelerators"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-accelerators))
(common-lisp:progn
 (common-lisp:defun list-byoip-cidrs
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-byoip-cidrs-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'globalaccelerator-request aws-sdk/generator/operation::input "POST"
        "/" "ListByoipCidrs"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-byoip-cidrs))
(common-lisp:progn
 (common-lisp:defun list-cross-account-attachments
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-cross-account-attachments-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'globalaccelerator-request aws-sdk/generator/operation::input "POST"
        "/" "ListCrossAccountAttachments"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-cross-account-attachments))
(common-lisp:progn
 (common-lisp:defun list-cross-account-resource-accounts ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'globalaccelerator-request :method "POST" :path
                                "/" :operation
                                "ListCrossAccountResourceAccounts"))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'list-cross-account-resource-accounts))
(common-lisp:progn
 (common-lisp:defun list-cross-account-resources
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key accelerator-arn
                     resource-owner-aws-account-id max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable accelerator-arn resource-owner-aws-account-id
     max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-cross-account-resources-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'globalaccelerator-request aws-sdk/generator/operation::input "POST"
        "/" "ListCrossAccountResources"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-cross-account-resources))
(common-lisp:progn
 (common-lisp:defun list-custom-routing-accelerators
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-custom-routing-accelerators-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'globalaccelerator-request aws-sdk/generator/operation::input "POST"
        "/" "ListCustomRoutingAccelerators"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-custom-routing-accelerators))
(common-lisp:progn
 (common-lisp:defun list-custom-routing-endpoint-groups
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key listener-arn max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable listener-arn max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-custom-routing-endpoint-groups-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'globalaccelerator-request aws-sdk/generator/operation::input "POST"
        "/" "ListCustomRoutingEndpointGroups"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-custom-routing-endpoint-groups))
(common-lisp:progn
 (common-lisp:defun list-custom-routing-listeners
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key accelerator-arn max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable accelerator-arn max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-custom-routing-listeners-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'globalaccelerator-request aws-sdk/generator/operation::input "POST"
        "/" "ListCustomRoutingListeners"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-custom-routing-listeners))
(common-lisp:progn
 (common-lisp:defun list-custom-routing-port-mappings
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key accelerator-arn endpoint-group-arn
                     max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable accelerator-arn endpoint-group-arn max-results
     next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-custom-routing-port-mappings-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'globalaccelerator-request aws-sdk/generator/operation::input "POST"
        "/" "ListCustomRoutingPortMappings"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-custom-routing-port-mappings))
(common-lisp:progn
 (common-lisp:defun list-custom-routing-port-mappings-by-destination
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key endpoint-id destination-address
                     max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable endpoint-id destination-address max-results
     next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-custom-routing-port-mappings-by-destination-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'globalaccelerator-request aws-sdk/generator/operation::input "POST"
        "/" "ListCustomRoutingPortMappingsByDestination"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-custom-routing-port-mappings-by-destination))
(common-lisp:progn
 (common-lisp:defun list-endpoint-groups
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key listener-arn max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable listener-arn max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-endpoint-groups-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'globalaccelerator-request aws-sdk/generator/operation::input "POST"
        "/" "ListEndpointGroups"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-endpoint-groups))
(common-lisp:progn
 (common-lisp:defun list-listeners
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key accelerator-arn max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable accelerator-arn max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-listeners-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'globalaccelerator-request aws-sdk/generator/operation::input "POST"
        "/" "ListListeners"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-listeners))
(common-lisp:progn
 (common-lisp:defun list-tags-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn)
   (common-lisp:declare (common-lisp:ignorable resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-for-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'globalaccelerator-request aws-sdk/generator/operation::input "POST"
        "/" "ListTagsForResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-tags-for-resource))
(common-lisp:progn
 (common-lisp:defun provision-byoip-cidr
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cidr cidr-authorization-context)
   (common-lisp:declare
    (common-lisp:ignorable cidr cidr-authorization-context))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-provision-byoip-cidr-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'globalaccelerator-request aws-sdk/generator/operation::input "POST"
        "/" "ProvisionByoipCidr"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'provision-byoip-cidr))
(common-lisp:progn
 (common-lisp:defun remove-custom-routing-endpoints
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key endpoint-ids endpoint-group-arn)
   (common-lisp:declare
    (common-lisp:ignorable endpoint-ids endpoint-group-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-remove-custom-routing-endpoints-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'globalaccelerator-request aws-sdk/generator/operation::input "POST"
        "/" "RemoveCustomRoutingEndpoints"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'remove-custom-routing-endpoints))
(common-lisp:progn
 (common-lisp:defun remove-endpoints
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key endpoint-identifiers endpoint-group-arn)
   (common-lisp:declare
    (common-lisp:ignorable endpoint-identifiers endpoint-group-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-remove-endpoints-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'globalaccelerator-request aws-sdk/generator/operation::input "POST"
        "/" "RemoveEndpoints"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'remove-endpoints))
(common-lisp:progn
 (common-lisp:defun tag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tags)
   (common-lisp:declare (common-lisp:ignorable resource-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'globalaccelerator-request aws-sdk/generator/operation::input "POST"
        "/" "TagResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'tag-resource))
(common-lisp:progn
 (common-lisp:defun untag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tag-keys)
   (common-lisp:declare (common-lisp:ignorable resource-arn tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'globalaccelerator-request aws-sdk/generator/operation::input "POST"
        "/" "UntagResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'untag-resource))
(common-lisp:progn
 (common-lisp:defun update-accelerator
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key accelerator-arn name ip-address-type
                     enabled)
   (common-lisp:declare
    (common-lisp:ignorable accelerator-arn name ip-address-type enabled))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-accelerator-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'globalaccelerator-request aws-sdk/generator/operation::input "POST"
        "/" "UpdateAccelerator"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-accelerator))
(common-lisp:progn
 (common-lisp:defun update-accelerator-attributes
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key accelerator-arn flow-logs-enabled
                     flow-logs-s3bucket flow-logs-s3prefix)
   (common-lisp:declare
    (common-lisp:ignorable accelerator-arn flow-logs-enabled flow-logs-s3bucket
     flow-logs-s3prefix))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-accelerator-attributes-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'globalaccelerator-request aws-sdk/generator/operation::input "POST"
        "/" "UpdateAcceleratorAttributes"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-accelerator-attributes))
(common-lisp:progn
 (common-lisp:defun update-cross-account-attachment
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key attachment-arn name add-principals
                     remove-principals add-resources remove-resources)
   (common-lisp:declare
    (common-lisp:ignorable attachment-arn name add-principals remove-principals
     add-resources remove-resources))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-cross-account-attachment-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'globalaccelerator-request aws-sdk/generator/operation::input "POST"
        "/" "UpdateCrossAccountAttachment"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-cross-account-attachment))
(common-lisp:progn
 (common-lisp:defun update-custom-routing-accelerator
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key accelerator-arn name ip-address-type
                     enabled)
   (common-lisp:declare
    (common-lisp:ignorable accelerator-arn name ip-address-type enabled))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-custom-routing-accelerator-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'globalaccelerator-request aws-sdk/generator/operation::input "POST"
        "/" "UpdateCustomRoutingAccelerator"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-custom-routing-accelerator))
(common-lisp:progn
 (common-lisp:defun update-custom-routing-accelerator-attributes
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key accelerator-arn flow-logs-enabled
                     flow-logs-s3bucket flow-logs-s3prefix)
   (common-lisp:declare
    (common-lisp:ignorable accelerator-arn flow-logs-enabled flow-logs-s3bucket
     flow-logs-s3prefix))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-custom-routing-accelerator-attributes-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'globalaccelerator-request aws-sdk/generator/operation::input "POST"
        "/" "UpdateCustomRoutingAcceleratorAttributes"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-custom-routing-accelerator-attributes))
(common-lisp:progn
 (common-lisp:defun update-custom-routing-listener
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key listener-arn port-ranges)
   (common-lisp:declare (common-lisp:ignorable listener-arn port-ranges))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-custom-routing-listener-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'globalaccelerator-request aws-sdk/generator/operation::input "POST"
        "/" "UpdateCustomRoutingListener"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-custom-routing-listener))
(common-lisp:progn
 (common-lisp:defun update-endpoint-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key endpoint-group-arn
                     endpoint-configurations traffic-dial-percentage
                     health-check-port health-check-protocol health-check-path
                     health-check-interval-seconds threshold-count
                     port-overrides)
   (common-lisp:declare
    (common-lisp:ignorable endpoint-group-arn endpoint-configurations
     traffic-dial-percentage health-check-port health-check-protocol
     health-check-path health-check-interval-seconds threshold-count
     port-overrides))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-endpoint-group-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'globalaccelerator-request aws-sdk/generator/operation::input "POST"
        "/" "UpdateEndpointGroup"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-endpoint-group))
(common-lisp:progn
 (common-lisp:defun update-listener
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key listener-arn port-ranges protocol
                     client-affinity)
   (common-lisp:declare
    (common-lisp:ignorable listener-arn port-ranges protocol client-affinity))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-listener-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'globalaccelerator-request aws-sdk/generator/operation::input "POST"
        "/" "UpdateListener"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-listener))
(common-lisp:progn
 (common-lisp:defun withdraw-byoip-cidr
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cidr)
   (common-lisp:declare (common-lisp:ignorable cidr))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-withdraw-byoip-cidr-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'globalaccelerator-request aws-sdk/generator/operation::input "POST"
        "/" "WithdrawByoipCidr"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'withdraw-byoip-cidr))
