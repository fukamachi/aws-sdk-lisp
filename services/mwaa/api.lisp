;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(uiop/package:define-package #:aws-sdk/services/mwaa/api (:use)
                             (:nicknames #:aws/mwaa)
                             (:import-from #:aws-sdk/generator/shape)
                             (:import-from #:aws-sdk/generator/operation)
                             (:import-from #:aws-sdk/api)
                             (:import-from #:aws-sdk/request)
                             (:import-from #:aws-sdk/json-request)
                             (:import-from #:aws-sdk/rest-json-request)
                             (:import-from #:aws-sdk/rest-xml-request)
                             (:import-from #:aws-sdk/query-request)
                             (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/mwaa/api)
(common-lisp:progn
 (common-lisp:define-condition mwaa-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'mwaa-error))
(common-lisp:progn
 (common-lisp:defclass mwaa-request
                       (aws-sdk/generator/service::rest-json-request)
                       common-lisp:nil
                       (:default-initargs :service "mwaa" :api-version
                        "2020-07-01" :host-prefix "airflow" :signing-name
                        "airflow" :global-host common-lisp:nil))
 (common-lisp:export 'mwaa-request))
(common-lisp:defvar *error-map*
  '(("AccessDeniedException" . access-denied-exception)
    ("InternalServerException" . internal-server-exception)
    ("ResourceNotFoundException" . resource-not-found-exception)
    ("ValidationException" . validation-exception)))
(common-lisp:progn
 (common-lisp:define-condition access-denied-exception
     (mwaa-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       access-denied-exception-message)))
 (common-lisp:export
  (common-lisp:list 'access-denied-exception 'access-denied-exception-message)))
(common-lisp:progn
 (common-lisp:deftype airflow-configuration-options () 'common-lisp:hash-table)
 (common-lisp:defun make-airflow-configuration-options
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype airflow-identity () 'common-lisp:string)
(common-lisp:deftype airflow-version () 'common-lisp:string)
(common-lisp:deftype celery-executor-queue () 'common-lisp:string)
(common-lisp:deftype cloud-watch-log-group-arn () 'common-lisp:string)
(common-lisp:deftype config-key () 'common-lisp:string)
(common-lisp:deftype config-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass create-cli-token-request common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or environment-name common-lisp:null)
                         :accessor struct-shape-create-cli-token-request-name
                         :shape "EnvironmentName" :location "uri"
                         :location-name "Name"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-cli-token-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-cli-token-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-cli-token-request 'make-create-cli-token-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-cli-token-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-cli-token-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-cli-token-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-cli-token-response common-lisp:nil
                       ((cli-token :initarg :cli-token :initform
                         common-lisp:nil :type
                         (common-lisp:or token common-lisp:null) :accessor
                         struct-shape-create-cli-token-response-cli-token
                         :shape "Token" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (web-server-hostname :initarg :web-server-hostname
                         :initform common-lisp:nil :type
                         (common-lisp:or hostname common-lisp:null) :accessor
                         struct-shape-create-cli-token-response-web-server-hostname
                         :shape "Hostname" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-cli-token-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-cli-token-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-cli-token-response
                    'make-create-cli-token-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-cli-token-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-cli-token-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cli-token))
      (common-lisp:list
       (common-lisp:cons "CliToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'web-server-hostname))
      (common-lisp:list
       (common-lisp:cons "WebServerHostname"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-cli-token-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-environment-input common-lisp:nil
                       ((airflow-configuration-options :initarg
                         :airflow-configuration-options :initform
                         common-lisp:nil :type
                         (common-lisp:or airflow-configuration-options
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-environment-input-airflow-configuration-options
                         :shape "AirflowConfigurationOptions" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (airflow-version :initarg :airflow-version :initform
                         common-lisp:nil :type
                         (common-lisp:or airflow-version common-lisp:null)
                         :accessor
                         struct-shape-create-environment-input-airflow-version
                         :shape "AirflowVersion" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dag-s3path :initarg :dag-s3path :initform
                         (common-lisp:error ":dag-s3path is required") :type
                         (common-lisp:or relative-path common-lisp:null)
                         :accessor
                         struct-shape-create-environment-input-dag-s3path
                         :shape "RelativePath" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (endpoint-management :initarg :endpoint-management
                         :initform common-lisp:nil :type
                         (common-lisp:or endpoint-management common-lisp:null)
                         :accessor
                         struct-shape-create-environment-input-endpoint-management
                         :shape "EndpointManagement" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (environment-class :initarg :environment-class
                         :initform common-lisp:nil :type
                         (common-lisp:or environment-class common-lisp:null)
                         :accessor
                         struct-shape-create-environment-input-environment-class
                         :shape "EnvironmentClass" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (execution-role-arn :initarg :execution-role-arn
                         :initform
                         (common-lisp:error ":execution-role-arn is required")
                         :type (common-lisp:or iam-role-arn common-lisp:null)
                         :accessor
                         struct-shape-create-environment-input-execution-role-arn
                         :shape "IamRoleArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (kms-key :initarg :kms-key :initform common-lisp:nil
                         :type (common-lisp:or kms-key common-lisp:null)
                         :accessor
                         struct-shape-create-environment-input-kms-key :shape
                         "KmsKey" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (logging-configuration :initarg :logging-configuration
                         :initform common-lisp:nil :type
                         (common-lisp:or logging-configuration-input
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-environment-input-logging-configuration
                         :shape "LoggingConfigurationInput" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (max-workers :initarg :max-workers :initform
                         common-lisp:nil :type
                         (common-lisp:or max-workers common-lisp:null)
                         :accessor
                         struct-shape-create-environment-input-max-workers
                         :shape "MaxWorkers" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (min-workers :initarg :min-workers :initform
                         common-lisp:nil :type
                         (common-lisp:or min-workers common-lisp:null)
                         :accessor
                         struct-shape-create-environment-input-min-workers
                         :shape "MinWorkers" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or environment-name common-lisp:null)
                         :accessor struct-shape-create-environment-input-name
                         :shape "EnvironmentName" :location "uri"
                         :location-name "Name")
                        (network-configuration :initarg :network-configuration
                         :initform
                         (common-lisp:error
                          ":network-configuration is required")
                         :type
                         (common-lisp:or network-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-environment-input-network-configuration
                         :shape "NetworkConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (plugins-s3object-version :initarg
                         :plugins-s3object-version :initform common-lisp:nil
                         :type
                         (common-lisp:or s3object-version common-lisp:null)
                         :accessor
                         struct-shape-create-environment-input-plugins-s3object-version
                         :shape "S3ObjectVersion" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (plugins-s3path :initarg :plugins-s3path :initform
                         common-lisp:nil :type
                         (common-lisp:or relative-path common-lisp:null)
                         :accessor
                         struct-shape-create-environment-input-plugins-s3path
                         :shape "RelativePath" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (requirements-s3object-version :initarg
                         :requirements-s3object-version :initform
                         common-lisp:nil :type
                         (common-lisp:or s3object-version common-lisp:null)
                         :accessor
                         struct-shape-create-environment-input-requirements-s3object-version
                         :shape "S3ObjectVersion" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (requirements-s3path :initarg :requirements-s3path
                         :initform common-lisp:nil :type
                         (common-lisp:or relative-path common-lisp:null)
                         :accessor
                         struct-shape-create-environment-input-requirements-s3path
                         :shape "RelativePath" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (schedulers :initarg :schedulers :initform
                         common-lisp:nil :type
                         (common-lisp:or schedulers common-lisp:null) :accessor
                         struct-shape-create-environment-input-schedulers
                         :shape "Schedulers" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (source-bucket-arn :initarg :source-bucket-arn
                         :initform
                         (common-lisp:error ":source-bucket-arn is required")
                         :type (common-lisp:or s3bucket-arn common-lisp:null)
                         :accessor
                         struct-shape-create-environment-input-source-bucket-arn
                         :shape "S3BucketArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (startup-script-s3object-version :initarg
                         :startup-script-s3object-version :initform
                         common-lisp:nil :type
                         (common-lisp:or s3object-version common-lisp:null)
                         :accessor
                         struct-shape-create-environment-input-startup-script-s3object-version
                         :shape "S3ObjectVersion" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (startup-script-s3path :initarg :startup-script-s3path
                         :initform common-lisp:nil :type
                         (common-lisp:or relative-path common-lisp:null)
                         :accessor
                         struct-shape-create-environment-input-startup-script-s3path
                         :shape "RelativePath" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         struct-shape-create-environment-input-tags :shape
                         "TagMap" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (webserver-access-mode :initarg :webserver-access-mode
                         :initform common-lisp:nil :type
                         (common-lisp:or webserver-access-mode
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-environment-input-webserver-access-mode
                         :shape "WebserverAccessMode" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (weekly-maintenance-window-start :initarg
                         :weekly-maintenance-window-start :initform
                         common-lisp:nil :type
                         (common-lisp:or weekly-maintenance-window-start
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-environment-input-weekly-maintenance-window-start
                         :shape "WeeklyMaintenanceWindowStart" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-environment-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-environment-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-environment-input 'make-create-environment-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-environment-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-environment-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'airflow-configuration-options))
      (common-lisp:list
       (common-lisp:cons "AirflowConfigurationOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'airflow-version))
      (common-lisp:list
       (common-lisp:cons "AirflowVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dag-s3path))
      (common-lisp:list
       (common-lisp:cons "DagS3Path"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-management))
      (common-lisp:list
       (common-lisp:cons "EndpointManagement"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment-class))
      (common-lisp:list
       (common-lisp:cons "EnvironmentClass"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execution-role-arn))
      (common-lisp:list
       (common-lisp:cons "ExecutionRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key))
      (common-lisp:list
       (common-lisp:cons "KmsKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'logging-configuration))
      (common-lisp:list
       (common-lisp:cons "LoggingConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-workers))
      (common-lisp:list
       (common-lisp:cons "MaxWorkers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'min-workers))
      (common-lisp:list
       (common-lisp:cons "MinWorkers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'network-configuration))
      (common-lisp:list
       (common-lisp:cons "NetworkConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'plugins-s3object-version))
      (common-lisp:list
       (common-lisp:cons "PluginsS3ObjectVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'plugins-s3path))
      (common-lisp:list
       (common-lisp:cons "PluginsS3Path"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'requirements-s3object-version))
      (common-lisp:list
       (common-lisp:cons "RequirementsS3ObjectVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'requirements-s3path))
      (common-lisp:list
       (common-lisp:cons "RequirementsS3Path"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schedulers))
      (common-lisp:list
       (common-lisp:cons "Schedulers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-bucket-arn))
      (common-lisp:list
       (common-lisp:cons "SourceBucketArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'startup-script-s3object-version))
      (common-lisp:list
       (common-lisp:cons "StartupScriptS3ObjectVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'startup-script-s3path))
      (common-lisp:list
       (common-lisp:cons "StartupScriptS3Path"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'webserver-access-mode))
      (common-lisp:list
       (common-lisp:cons "WebserverAccessMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'weekly-maintenance-window-start))
      (common-lisp:list
       (common-lisp:cons "WeeklyMaintenanceWindowStart"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-environment-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-environment-output common-lisp:nil
                       ((arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or environment-arn common-lisp:null)
                         :accessor struct-shape-create-environment-output-arn
                         :shape "EnvironmentArn" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-environment-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-environment-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-environment-output
                    'make-create-environment-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-environment-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-environment-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-environment-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-web-login-token-request common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or environment-name common-lisp:null)
                         :accessor
                         struct-shape-create-web-login-token-request-name
                         :shape "EnvironmentName" :location "uri"
                         :location-name "Name"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-web-login-token-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-web-login-token-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-web-login-token-request
                    'make-create-web-login-token-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-web-login-token-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-web-login-token-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-web-login-token-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-web-login-token-response common-lisp:nil
                       ((airflow-identity :initarg :airflow-identity :initform
                         common-lisp:nil :type
                         (common-lisp:or airflow-identity common-lisp:null)
                         :accessor
                         struct-shape-create-web-login-token-response-airflow-identity
                         :shape "AirflowIdentity" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (iam-identity :initarg :iam-identity :initform
                         common-lisp:nil :type
                         (common-lisp:or iam-identity common-lisp:null)
                         :accessor
                         struct-shape-create-web-login-token-response-iam-identity
                         :shape "IamIdentity" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (web-server-hostname :initarg :web-server-hostname
                         :initform common-lisp:nil :type
                         (common-lisp:or hostname common-lisp:null) :accessor
                         struct-shape-create-web-login-token-response-web-server-hostname
                         :shape "Hostname" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (web-token :initarg :web-token :initform
                         common-lisp:nil :type
                         (common-lisp:or token common-lisp:null) :accessor
                         struct-shape-create-web-login-token-response-web-token
                         :shape "Token" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-web-login-token-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-web-login-token-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-web-login-token-response
                    'make-create-web-login-token-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-web-login-token-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-web-login-token-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'airflow-identity))
      (common-lisp:list
       (common-lisp:cons "AirflowIdentity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iam-identity))
      (common-lisp:list
       (common-lisp:cons "IamIdentity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'web-server-hostname))
      (common-lisp:list
       (common-lisp:cons "WebServerHostname"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'web-token))
      (common-lisp:list
       (common-lisp:cons "WebToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-web-login-token-response))
   common-lisp:nil))
(common-lisp:deftype created-at () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass delete-environment-input common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or environment-name common-lisp:null)
                         :accessor struct-shape-delete-environment-input-name
                         :shape "EnvironmentName" :location "uri"
                         :location-name "Name"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-environment-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-environment-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-environment-input 'make-delete-environment-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-environment-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-environment-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-environment-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-environment-output common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-environment-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-environment-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-environment-output
                    'make-delete-environment-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-environment-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-environment-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-environment-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass dimension common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-dimension-name :shape "String" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (value :initarg :value :initform
                         (common-lisp:error ":value is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-dimension-value :shape "String" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-dimension
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'dimension
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'dimension 'make-dimension))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input dimension))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input dimension))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input dimension))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype dimensions () '(trivial-types:proper-list dimension))
 (common-lisp:defun make-dimensions
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list dimension))
   aws-sdk/generator/shape::members))
(common-lisp:deftype double () 'common-lisp:double-float)
(common-lisp:deftype endpoint-management () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass environment common-lisp:nil
                       ((airflow-configuration-options :initarg
                         :airflow-configuration-options :initform
                         common-lisp:nil :type
                         (common-lisp:or airflow-configuration-options
                                         common-lisp:null)
                         :accessor
                         struct-shape-environment-airflow-configuration-options
                         :shape "AirflowConfigurationOptions" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (airflow-version :initarg :airflow-version :initform
                         common-lisp:nil :type
                         (common-lisp:or airflow-version common-lisp:null)
                         :accessor struct-shape-environment-airflow-version
                         :shape "AirflowVersion" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or environment-arn common-lisp:null)
                         :accessor struct-shape-environment-arn :shape
                         "EnvironmentArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (celery-executor-queue :initarg :celery-executor-queue
                         :initform common-lisp:nil :type
                         (common-lisp:or celery-executor-queue
                                         common-lisp:null)
                         :accessor
                         struct-shape-environment-celery-executor-queue :shape
                         "CeleryExecutorQueue" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (created-at :initarg :created-at :initform
                         common-lisp:nil :type
                         (common-lisp:or created-at common-lisp:null) :accessor
                         struct-shape-environment-created-at :shape "CreatedAt"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (dag-s3path :initarg :dag-s3path :initform
                         common-lisp:nil :type
                         (common-lisp:or relative-path common-lisp:null)
                         :accessor struct-shape-environment-dag-s3path :shape
                         "RelativePath" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (database-vpc-endpoint-service :initarg
                         :database-vpc-endpoint-service :initform
                         common-lisp:nil :type
                         (common-lisp:or vpc-endpoint-service-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-environment-database-vpc-endpoint-service
                         :shape "VpcEndpointServiceName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (endpoint-management :initarg :endpoint-management
                         :initform common-lisp:nil :type
                         (common-lisp:or endpoint-management common-lisp:null)
                         :accessor struct-shape-environment-endpoint-management
                         :shape "EndpointManagement" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (environment-class :initarg :environment-class
                         :initform common-lisp:nil :type
                         (common-lisp:or environment-class common-lisp:null)
                         :accessor struct-shape-environment-environment-class
                         :shape "EnvironmentClass" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (execution-role-arn :initarg :execution-role-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or iam-role-arn common-lisp:null)
                         :accessor struct-shape-environment-execution-role-arn
                         :shape "IamRoleArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (kms-key :initarg :kms-key :initform common-lisp:nil
                         :type (common-lisp:or kms-key common-lisp:null)
                         :accessor struct-shape-environment-kms-key :shape
                         "KmsKey" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (last-update :initarg :last-update :initform
                         common-lisp:nil :type
                         (common-lisp:or last-update common-lisp:null)
                         :accessor struct-shape-environment-last-update :shape
                         "LastUpdate" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (logging-configuration :initarg :logging-configuration
                         :initform common-lisp:nil :type
                         (common-lisp:or logging-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-environment-logging-configuration :shape
                         "LoggingConfiguration" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-workers :initarg :max-workers :initform
                         common-lisp:nil :type
                         (common-lisp:or max-workers common-lisp:null)
                         :accessor struct-shape-environment-max-workers :shape
                         "MaxWorkers" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (min-workers :initarg :min-workers :initform
                         common-lisp:nil :type
                         (common-lisp:or min-workers common-lisp:null)
                         :accessor struct-shape-environment-min-workers :shape
                         "MinWorkers" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or environment-name common-lisp:null)
                         :accessor struct-shape-environment-name :shape
                         "EnvironmentName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (network-configuration :initarg :network-configuration
                         :initform common-lisp:nil :type
                         (common-lisp:or network-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-environment-network-configuration :shape
                         "NetworkConfiguration" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (plugins-s3object-version :initarg
                         :plugins-s3object-version :initform common-lisp:nil
                         :type
                         (common-lisp:or s3object-version common-lisp:null)
                         :accessor
                         struct-shape-environment-plugins-s3object-version
                         :shape "S3ObjectVersion" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (plugins-s3path :initarg :plugins-s3path :initform
                         common-lisp:nil :type
                         (common-lisp:or relative-path common-lisp:null)
                         :accessor struct-shape-environment-plugins-s3path
                         :shape "RelativePath" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (requirements-s3object-version :initarg
                         :requirements-s3object-version :initform
                         common-lisp:nil :type
                         (common-lisp:or s3object-version common-lisp:null)
                         :accessor
                         struct-shape-environment-requirements-s3object-version
                         :shape "S3ObjectVersion" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (requirements-s3path :initarg :requirements-s3path
                         :initform common-lisp:nil :type
                         (common-lisp:or relative-path common-lisp:null)
                         :accessor struct-shape-environment-requirements-s3path
                         :shape "RelativePath" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (schedulers :initarg :schedulers :initform
                         common-lisp:nil :type
                         (common-lisp:or schedulers common-lisp:null) :accessor
                         struct-shape-environment-schedulers :shape
                         "Schedulers" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (service-role-arn :initarg :service-role-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or iam-role-arn common-lisp:null)
                         :accessor struct-shape-environment-service-role-arn
                         :shape "IamRoleArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (source-bucket-arn :initarg :source-bucket-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or s3bucket-arn common-lisp:null)
                         :accessor struct-shape-environment-source-bucket-arn
                         :shape "S3BucketArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (startup-script-s3object-version :initarg
                         :startup-script-s3object-version :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-environment-startup-script-s3object-version
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (startup-script-s3path :initarg :startup-script-s3path
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-environment-startup-script-s3path :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or environment-status common-lisp:null)
                         :accessor struct-shape-environment-status :shape
                         "EnvironmentStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         struct-shape-environment-tags :shape "TagMap"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (webserver-access-mode :initarg :webserver-access-mode
                         :initform common-lisp:nil :type
                         (common-lisp:or webserver-access-mode
                                         common-lisp:null)
                         :accessor
                         struct-shape-environment-webserver-access-mode :shape
                         "WebserverAccessMode" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (webserver-url :initarg :webserver-url :initform
                         common-lisp:nil :type
                         (common-lisp:or webserver-url common-lisp:null)
                         :accessor struct-shape-environment-webserver-url
                         :shape "WebserverUrl" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (webserver-vpc-endpoint-service :initarg
                         :webserver-vpc-endpoint-service :initform
                         common-lisp:nil :type
                         (common-lisp:or vpc-endpoint-service-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-environment-webserver-vpc-endpoint-service
                         :shape "VpcEndpointServiceName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (weekly-maintenance-window-start :initarg
                         :weekly-maintenance-window-start :initform
                         common-lisp:nil :type
                         (common-lisp:or weekly-maintenance-window-start
                                         common-lisp:null)
                         :accessor
                         struct-shape-environment-weekly-maintenance-window-start
                         :shape "WeeklyMaintenanceWindowStart" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-environment
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'environment
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'environment 'make-environment))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input environment))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input environment))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'airflow-configuration-options))
      (common-lisp:list
       (common-lisp:cons "AirflowConfigurationOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'airflow-version))
      (common-lisp:list
       (common-lisp:cons "AirflowVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'celery-executor-queue))
      (common-lisp:list
       (common-lisp:cons "CeleryExecutorQueue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "CreatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dag-s3path))
      (common-lisp:list
       (common-lisp:cons "DagS3Path"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'database-vpc-endpoint-service))
      (common-lisp:list
       (common-lisp:cons "DatabaseVpcEndpointService"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-management))
      (common-lisp:list
       (common-lisp:cons "EndpointManagement"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment-class))
      (common-lisp:list
       (common-lisp:cons "EnvironmentClass"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execution-role-arn))
      (common-lisp:list
       (common-lisp:cons "ExecutionRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key))
      (common-lisp:list
       (common-lisp:cons "KmsKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-update))
      (common-lisp:list
       (common-lisp:cons "LastUpdate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'logging-configuration))
      (common-lisp:list
       (common-lisp:cons "LoggingConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-workers))
      (common-lisp:list
       (common-lisp:cons "MaxWorkers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'min-workers))
      (common-lisp:list
       (common-lisp:cons "MinWorkers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'network-configuration))
      (common-lisp:list
       (common-lisp:cons "NetworkConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'plugins-s3object-version))
      (common-lisp:list
       (common-lisp:cons "PluginsS3ObjectVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'plugins-s3path))
      (common-lisp:list
       (common-lisp:cons "PluginsS3Path"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'requirements-s3object-version))
      (common-lisp:list
       (common-lisp:cons "RequirementsS3ObjectVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'requirements-s3path))
      (common-lisp:list
       (common-lisp:cons "RequirementsS3Path"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schedulers))
      (common-lisp:list
       (common-lisp:cons "Schedulers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-role-arn))
      (common-lisp:list
       (common-lisp:cons "ServiceRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-bucket-arn))
      (common-lisp:list
       (common-lisp:cons "SourceBucketArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'startup-script-s3object-version))
      (common-lisp:list
       (common-lisp:cons "StartupScriptS3ObjectVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'startup-script-s3path))
      (common-lisp:list
       (common-lisp:cons "StartupScriptS3Path"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'webserver-access-mode))
      (common-lisp:list
       (common-lisp:cons "WebserverAccessMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'webserver-url))
      (common-lisp:list
       (common-lisp:cons "WebserverUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'webserver-vpc-endpoint-service))
      (common-lisp:list
       (common-lisp:cons "WebserverVpcEndpointService"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'weekly-maintenance-window-start))
      (common-lisp:list
       (common-lisp:cons "WeeklyMaintenanceWindowStart"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input environment))
   common-lisp:nil))
(common-lisp:deftype environment-arn () 'common-lisp:string)
(common-lisp:deftype environment-class () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype environment-list ()
   '(trivial-types:proper-list environment-name))
 (common-lisp:defun make-environment-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list environment-name))
   aws-sdk/generator/shape::members))
(common-lisp:deftype environment-name () 'common-lisp:string)
(common-lisp:deftype environment-status () 'common-lisp:string)
(common-lisp:deftype error-code () 'common-lisp:string)
(common-lisp:deftype error-message () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass get-environment-input common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or environment-name common-lisp:null)
                         :accessor struct-shape-get-environment-input-name
                         :shape "EnvironmentName" :location "uri"
                         :location-name "Name"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-environment-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-environment-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-environment-input 'make-get-environment-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-environment-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-environment-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-environment-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-environment-output common-lisp:nil
                       ((environment :initarg :environment :initform
                         common-lisp:nil :type
                         (common-lisp:or environment common-lisp:null)
                         :accessor
                         struct-shape-get-environment-output-environment :shape
                         "Environment" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-environment-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-environment-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-environment-output 'make-get-environment-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-environment-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-environment-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment))
      (common-lisp:list
       (common-lisp:cons "Environment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-environment-output))
   common-lisp:nil))
(common-lisp:deftype hostname () 'common-lisp:string)
(common-lisp:deftype iam-identity () 'common-lisp:string)
(common-lisp:deftype iam-role-arn () 'common-lisp:string)
(common-lisp:deftype integer () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition internal-server-exception
     (mwaa-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       internal-server-exception-message)))
 (common-lisp:export
  (common-lisp:list 'internal-server-exception
                    'internal-server-exception-message)))
(common-lisp:deftype kms-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass last-update common-lisp:nil
                       ((created-at :initarg :created-at :initform
                         common-lisp:nil :type
                         (common-lisp:or update-created-at common-lisp:null)
                         :accessor struct-shape-last-update-created-at :shape
                         "UpdateCreatedAt" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (error :initarg :error :initform common-lisp:nil :type
                         (common-lisp:or update-error common-lisp:null)
                         :accessor struct-shape-last-update-error :shape
                         "UpdateError" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (source :initarg :source :initform common-lisp:nil
                         :type (common-lisp:or update-source common-lisp:null)
                         :accessor struct-shape-last-update-source :shape
                         "UpdateSource" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or update-status common-lisp:null)
                         :accessor struct-shape-last-update-status :shape
                         "UpdateStatus" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-last-update
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'last-update
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'last-update 'make-last-update))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input last-update))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input last-update))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "CreatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error))
      (common-lisp:list
       (common-lisp:cons "Error"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source))
      (common-lisp:list
       (common-lisp:cons "Source"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input last-update))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-environments-input common-lisp:nil
                       ((max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          list-environments-input-max-results-integer
                          common-lisp:null)
                         :accessor
                         struct-shape-list-environments-input-max-results
                         :shape "ListEnvironmentsInputMaxResultsInteger"
                         :location "querystring" :location-name "MaxResults")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-environments-input-next-token :shape
                         "NextToken" :location "querystring" :location-name
                         "NextToken"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-environments-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-environments-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-environments-input 'make-list-environments-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-environments-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-environments-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-environments-input))
   common-lisp:nil))
(common-lisp:deftype list-environments-input-max-results-integer ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass list-environments-output common-lisp:nil
                       ((environments :initarg :environments :initform
                         (common-lisp:error ":environments is required") :type
                         (common-lisp:or environment-list common-lisp:null)
                         :accessor
                         struct-shape-list-environments-output-environments
                         :shape "EnvironmentList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-environments-output-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-environments-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-environments-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-environments-output 'make-list-environments-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-environments-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-environments-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environments))
      (common-lisp:list
       (common-lisp:cons "Environments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-environments-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-input common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resource-arn is required") :type
                         (common-lisp:or environment-arn common-lisp:null)
                         :accessor
                         struct-shape-list-tags-for-resource-input-resource-arn
                         :shape "EnvironmentArn" :location "uri" :location-name
                         "ResourceArn"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-tags-for-resource-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-tags-for-resource-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-input
                    'make-list-tags-for-resource-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-output common-lisp:nil
                       ((tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         struct-shape-list-tags-for-resource-output-tags :shape
                         "TagMap" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-tags-for-resource-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-output
                    'make-list-tags-for-resource-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass logging-configuration common-lisp:nil
                       ((dag-processing-logs :initarg :dag-processing-logs
                         :initform common-lisp:nil :type
                         (common-lisp:or module-logging-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-logging-configuration-dag-processing-logs
                         :shape "ModuleLoggingConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (scheduler-logs :initarg :scheduler-logs :initform
                         common-lisp:nil :type
                         (common-lisp:or module-logging-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-logging-configuration-scheduler-logs
                         :shape "ModuleLoggingConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (task-logs :initarg :task-logs :initform
                         common-lisp:nil :type
                         (common-lisp:or module-logging-configuration
                                         common-lisp:null)
                         :accessor struct-shape-logging-configuration-task-logs
                         :shape "ModuleLoggingConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (webserver-logs :initarg :webserver-logs :initform
                         common-lisp:nil :type
                         (common-lisp:or module-logging-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-logging-configuration-webserver-logs
                         :shape "ModuleLoggingConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (worker-logs :initarg :worker-logs :initform
                         common-lisp:nil :type
                         (common-lisp:or module-logging-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-logging-configuration-worker-logs :shape
                         "ModuleLoggingConfiguration" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-logging-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'logging-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'logging-configuration 'make-logging-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          logging-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          logging-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dag-processing-logs))
      (common-lisp:list
       (common-lisp:cons "DagProcessingLogs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scheduler-logs))
      (common-lisp:list
       (common-lisp:cons "SchedulerLogs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-logs))
      (common-lisp:list
       (common-lisp:cons "TaskLogs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'webserver-logs))
      (common-lisp:list
       (common-lisp:cons "WebserverLogs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'worker-logs))
      (common-lisp:list
       (common-lisp:cons "WorkerLogs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          logging-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass logging-configuration-input common-lisp:nil
                       ((dag-processing-logs :initarg :dag-processing-logs
                         :initform common-lisp:nil :type
                         (common-lisp:or module-logging-configuration-input
                                         common-lisp:null)
                         :accessor
                         struct-shape-logging-configuration-input-dag-processing-logs
                         :shape "ModuleLoggingConfigurationInput" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (scheduler-logs :initarg :scheduler-logs :initform
                         common-lisp:nil :type
                         (common-lisp:or module-logging-configuration-input
                                         common-lisp:null)
                         :accessor
                         struct-shape-logging-configuration-input-scheduler-logs
                         :shape "ModuleLoggingConfigurationInput" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (task-logs :initarg :task-logs :initform
                         common-lisp:nil :type
                         (common-lisp:or module-logging-configuration-input
                                         common-lisp:null)
                         :accessor
                         struct-shape-logging-configuration-input-task-logs
                         :shape "ModuleLoggingConfigurationInput" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (webserver-logs :initarg :webserver-logs :initform
                         common-lisp:nil :type
                         (common-lisp:or module-logging-configuration-input
                                         common-lisp:null)
                         :accessor
                         struct-shape-logging-configuration-input-webserver-logs
                         :shape "ModuleLoggingConfigurationInput" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (worker-logs :initarg :worker-logs :initform
                         common-lisp:nil :type
                         (common-lisp:or module-logging-configuration-input
                                         common-lisp:null)
                         :accessor
                         struct-shape-logging-configuration-input-worker-logs
                         :shape "ModuleLoggingConfigurationInput" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-logging-configuration-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'logging-configuration-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'logging-configuration-input
                    'make-logging-configuration-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          logging-configuration-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          logging-configuration-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dag-processing-logs))
      (common-lisp:list
       (common-lisp:cons "DagProcessingLogs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scheduler-logs))
      (common-lisp:list
       (common-lisp:cons "SchedulerLogs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-logs))
      (common-lisp:list
       (common-lisp:cons "TaskLogs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'webserver-logs))
      (common-lisp:list
       (common-lisp:cons "WebserverLogs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'worker-logs))
      (common-lisp:list
       (common-lisp:cons "WorkerLogs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          logging-configuration-input))
   common-lisp:nil))
(common-lisp:deftype logging-enabled () 'common-lisp:boolean)
(common-lisp:deftype logging-level () 'common-lisp:string)
(common-lisp:deftype max-workers () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:deftype metric-data () '(trivial-types:proper-list metric-datum))
 (common-lisp:defun make-metric-data
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list metric-datum))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass metric-datum common-lisp:nil
                       ((dimensions :initarg :dimensions :initform
                         common-lisp:nil :type
                         (common-lisp:or dimensions common-lisp:null) :accessor
                         struct-shape-metric-datum-dimensions :shape
                         "Dimensions" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (metric-name :initarg :metric-name :initform
                         (common-lisp:error ":metric-name is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-metric-datum-metric-name :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (statistic-values :initarg :statistic-values :initform
                         common-lisp:nil :type
                         (common-lisp:or statistic-set common-lisp:null)
                         :accessor struct-shape-metric-datum-statistic-values
                         :shape "StatisticSet" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (timestamp :initarg :timestamp :initform
                         (common-lisp:error ":timestamp is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-metric-datum-timestamp :shape "Timestamp"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (unit :initarg :unit :initform common-lisp:nil :type
                         (common-lisp:or unit common-lisp:null) :accessor
                         struct-shape-metric-datum-unit :shape "Unit" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (value :initarg :value :initform common-lisp:nil :type
                         (common-lisp:or double common-lisp:null) :accessor
                         struct-shape-metric-datum-value :shape "Double"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-metric-datum
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'metric-datum
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'metric-datum 'make-metric-datum))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input metric-datum))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input metric-datum))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dimensions))
      (common-lisp:list
       (common-lisp:cons "Dimensions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-name))
      (common-lisp:list
       (common-lisp:cons "MetricName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'statistic-values))
      (common-lisp:list
       (common-lisp:cons "StatisticValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timestamp))
      (common-lisp:list
       (common-lisp:cons "Timestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'unit))
      (common-lisp:list
       (common-lisp:cons "Unit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input metric-datum))
   common-lisp:nil))
(common-lisp:deftype min-workers () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass module-logging-configuration common-lisp:nil
                       ((cloud-watch-log-group-arn :initarg
                         :cloud-watch-log-group-arn :initform common-lisp:nil
                         :type
                         (common-lisp:or cloud-watch-log-group-arn
                                         common-lisp:null)
                         :accessor
                         struct-shape-module-logging-configuration-cloud-watch-log-group-arn
                         :shape "CloudWatchLogGroupArn" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (enabled :initarg :enabled :initform common-lisp:nil
                         :type
                         (common-lisp:or logging-enabled common-lisp:null)
                         :accessor
                         struct-shape-module-logging-configuration-enabled
                         :shape "LoggingEnabled" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (log-level :initarg :log-level :initform
                         common-lisp:nil :type
                         (common-lisp:or logging-level common-lisp:null)
                         :accessor
                         struct-shape-module-logging-configuration-log-level
                         :shape "LoggingLevel" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-module-logging-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'module-logging-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'module-logging-configuration
                    'make-module-logging-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          module-logging-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          module-logging-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cloud-watch-log-group-arn))
      (common-lisp:list
       (common-lisp:cons "CloudWatchLogGroupArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "Enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-level))
      (common-lisp:list
       (common-lisp:cons "LogLevel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          module-logging-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass module-logging-configuration-input common-lisp:nil
                       ((enabled :initarg :enabled :initform
                         (common-lisp:error ":enabled is required") :type
                         (common-lisp:or logging-enabled common-lisp:null)
                         :accessor
                         struct-shape-module-logging-configuration-input-enabled
                         :shape "LoggingEnabled" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (log-level :initarg :log-level :initform
                         (common-lisp:error ":log-level is required") :type
                         (common-lisp:or logging-level common-lisp:null)
                         :accessor
                         struct-shape-module-logging-configuration-input-log-level
                         :shape "LoggingLevel" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-module-logging-configuration-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'module-logging-configuration-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'module-logging-configuration-input
                    'make-module-logging-configuration-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          module-logging-configuration-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          module-logging-configuration-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "Enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-level))
      (common-lisp:list
       (common-lisp:cons "LogLevel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          module-logging-configuration-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass network-configuration common-lisp:nil
                       ((security-group-ids :initarg :security-group-ids
                         :initform common-lisp:nil :type
                         (common-lisp:or security-group-list common-lisp:null)
                         :accessor
                         struct-shape-network-configuration-security-group-ids
                         :shape "SecurityGroupList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (subnet-ids :initarg :subnet-ids :initform
                         common-lisp:nil :type
                         (common-lisp:or subnet-list common-lisp:null)
                         :accessor
                         struct-shape-network-configuration-subnet-ids :shape
                         "SubnetList" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-network-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'network-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'network-configuration 'make-network-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          network-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          network-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-group-ids))
      (common-lisp:list
       (common-lisp:cons "SecurityGroupIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-ids))
      (common-lisp:list
       (common-lisp:cons "SubnetIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          network-configuration))
   common-lisp:nil))
(common-lisp:deftype next-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass publish-metrics-input common-lisp:nil
                       ((environment-name :initarg :environment-name :initform
                         (common-lisp:error ":environment-name is required")
                         :type
                         (common-lisp:or environment-name common-lisp:null)
                         :accessor
                         struct-shape-publish-metrics-input-environment-name
                         :shape "EnvironmentName" :location "uri"
                         :location-name "EnvironmentName")
                        (metric-data :initarg :metric-data :initform
                         (common-lisp:error ":metric-data is required") :type
                         (common-lisp:or metric-data common-lisp:null)
                         :accessor
                         struct-shape-publish-metrics-input-metric-data :shape
                         "MetricData" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-publish-metrics-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'publish-metrics-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'publish-metrics-input 'make-publish-metrics-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          publish-metrics-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          publish-metrics-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-data))
      (common-lisp:list
       (common-lisp:cons "MetricData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          publish-metrics-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass publish-metrics-output common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-publish-metrics-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'publish-metrics-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'publish-metrics-output 'make-publish-metrics-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          publish-metrics-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          publish-metrics-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          publish-metrics-output))
   common-lisp:nil))
(common-lisp:deftype relative-path () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-exception
     (mwaa-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'resource-not-found-exception
                    'resource-not-found-exception-message)))
(common-lisp:deftype s3bucket-arn () 'common-lisp:string)
(common-lisp:deftype s3object-version () 'common-lisp:string)
(common-lisp:deftype schedulers () 'common-lisp:integer)
(common-lisp:deftype security-group-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype security-group-list ()
   '(trivial-types:proper-list security-group-id))
 (common-lisp:defun make-security-group-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list security-group-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass statistic-set common-lisp:nil
                       ((maximum :initarg :maximum :initform common-lisp:nil
                         :type (common-lisp:or double common-lisp:null)
                         :accessor struct-shape-statistic-set-maximum :shape
                         "Double" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (minimum :initarg :minimum :initform common-lisp:nil
                         :type (common-lisp:or double common-lisp:null)
                         :accessor struct-shape-statistic-set-minimum :shape
                         "Double" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (sample-count :initarg :sample-count :initform
                         common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-statistic-set-sample-count :shape
                         "Integer" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (sum :initarg :sum :initform common-lisp:nil :type
                         (common-lisp:or double common-lisp:null) :accessor
                         struct-shape-statistic-set-sum :shape "Double"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-statistic-set
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'statistic-set
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'statistic-set 'make-statistic-set))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input statistic-set))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input statistic-set))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'maximum))
      (common-lisp:list
       (common-lisp:cons "Maximum"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'minimum))
      (common-lisp:list
       (common-lisp:cons "Minimum"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sample-count))
      (common-lisp:list
       (common-lisp:cons "SampleCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sum))
      (common-lisp:list
       (common-lisp:cons "Sum"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input statistic-set))
   common-lisp:nil))
(common-lisp:deftype string () 'common-lisp:string)
(common-lisp:deftype subnet-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype subnet-list () '(trivial-types:proper-list subnet-id))
 (common-lisp:defun make-subnet-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list subnet-id))
   aws-sdk/generator/shape::members))
(common-lisp:deftype tag-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tag-key-list () '(trivial-types:proper-list tag-key))
 (common-lisp:defun make-tag-key-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype tag-map () 'common-lisp:hash-table)
 (common-lisp:defun make-tag-map (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defclass tag-resource-input common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resource-arn is required") :type
                         (common-lisp:or environment-arn common-lisp:null)
                         :accessor struct-shape-tag-resource-input-resource-arn
                         :shape "EnvironmentArn" :location "uri" :location-name
                         "ResourceArn")
                        (tags :initarg :tags :initform
                         (common-lisp:error ":tags is required") :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         struct-shape-tag-resource-input-tags :shape "TagMap"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tag-resource-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'tag-resource-input 'make-tag-resource-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass tag-resource-output common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tag-resource-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'tag-resource-output 'make-tag-resource-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-output))
   common-lisp:nil))
(common-lisp:deftype tag-value () 'common-lisp:string)
(common-lisp:deftype timestamp () 'common-lisp:string)
(common-lisp:deftype token () 'common-lisp:string)
(common-lisp:deftype unit () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass untag-resource-input common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resource-arn is required") :type
                         (common-lisp:or environment-arn common-lisp:null)
                         :accessor
                         struct-shape-untag-resource-input-resource-arn :shape
                         "EnvironmentArn" :location "uri" :location-name
                         "ResourceArn")
                        (tag-keys :initarg :tag-keys :initform
                         (common-lisp:error ":tagkeys is required") :type
                         (common-lisp:or tag-key-list common-lisp:null)
                         :accessor struct-shape-untag-resource-input-tag-keys
                         :shape "TagKeyList" :location "querystring"
                         :location-name "tagKeys"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-untag-resource-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'untag-resource-input 'make-untag-resource-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input untag-resource-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input untag-resource-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input untag-resource-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass untag-resource-output common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-untag-resource-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'untag-resource-output 'make-untag-resource-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-output))
   common-lisp:nil))
(common-lisp:deftype update-created-at () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass update-environment-input common-lisp:nil
                       ((airflow-configuration-options :initarg
                         :airflow-configuration-options :initform
                         common-lisp:nil :type
                         (common-lisp:or airflow-configuration-options
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-environment-input-airflow-configuration-options
                         :shape "AirflowConfigurationOptions" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (airflow-version :initarg :airflow-version :initform
                         common-lisp:nil :type
                         (common-lisp:or airflow-version common-lisp:null)
                         :accessor
                         struct-shape-update-environment-input-airflow-version
                         :shape "AirflowVersion" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dag-s3path :initarg :dag-s3path :initform
                         common-lisp:nil :type
                         (common-lisp:or relative-path common-lisp:null)
                         :accessor
                         struct-shape-update-environment-input-dag-s3path
                         :shape "RelativePath" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (environment-class :initarg :environment-class
                         :initform common-lisp:nil :type
                         (common-lisp:or environment-class common-lisp:null)
                         :accessor
                         struct-shape-update-environment-input-environment-class
                         :shape "EnvironmentClass" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (execution-role-arn :initarg :execution-role-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or iam-role-arn common-lisp:null)
                         :accessor
                         struct-shape-update-environment-input-execution-role-arn
                         :shape "IamRoleArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (logging-configuration :initarg :logging-configuration
                         :initform common-lisp:nil :type
                         (common-lisp:or logging-configuration-input
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-environment-input-logging-configuration
                         :shape "LoggingConfigurationInput" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (max-workers :initarg :max-workers :initform
                         common-lisp:nil :type
                         (common-lisp:or max-workers common-lisp:null)
                         :accessor
                         struct-shape-update-environment-input-max-workers
                         :shape "MaxWorkers" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (min-workers :initarg :min-workers :initform
                         common-lisp:nil :type
                         (common-lisp:or min-workers common-lisp:null)
                         :accessor
                         struct-shape-update-environment-input-min-workers
                         :shape "MinWorkers" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or environment-name common-lisp:null)
                         :accessor struct-shape-update-environment-input-name
                         :shape "EnvironmentName" :location "uri"
                         :location-name "Name")
                        (network-configuration :initarg :network-configuration
                         :initform common-lisp:nil :type
                         (common-lisp:or update-network-configuration-input
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-environment-input-network-configuration
                         :shape "UpdateNetworkConfigurationInput" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (plugins-s3object-version :initarg
                         :plugins-s3object-version :initform common-lisp:nil
                         :type
                         (common-lisp:or s3object-version common-lisp:null)
                         :accessor
                         struct-shape-update-environment-input-plugins-s3object-version
                         :shape "S3ObjectVersion" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (plugins-s3path :initarg :plugins-s3path :initform
                         common-lisp:nil :type
                         (common-lisp:or relative-path common-lisp:null)
                         :accessor
                         struct-shape-update-environment-input-plugins-s3path
                         :shape "RelativePath" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (requirements-s3object-version :initarg
                         :requirements-s3object-version :initform
                         common-lisp:nil :type
                         (common-lisp:or s3object-version common-lisp:null)
                         :accessor
                         struct-shape-update-environment-input-requirements-s3object-version
                         :shape "S3ObjectVersion" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (requirements-s3path :initarg :requirements-s3path
                         :initform common-lisp:nil :type
                         (common-lisp:or relative-path common-lisp:null)
                         :accessor
                         struct-shape-update-environment-input-requirements-s3path
                         :shape "RelativePath" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (schedulers :initarg :schedulers :initform
                         common-lisp:nil :type
                         (common-lisp:or schedulers common-lisp:null) :accessor
                         struct-shape-update-environment-input-schedulers
                         :shape "Schedulers" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (source-bucket-arn :initarg :source-bucket-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or s3bucket-arn common-lisp:null)
                         :accessor
                         struct-shape-update-environment-input-source-bucket-arn
                         :shape "S3BucketArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (startup-script-s3object-version :initarg
                         :startup-script-s3object-version :initform
                         common-lisp:nil :type
                         (common-lisp:or s3object-version common-lisp:null)
                         :accessor
                         struct-shape-update-environment-input-startup-script-s3object-version
                         :shape "S3ObjectVersion" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (startup-script-s3path :initarg :startup-script-s3path
                         :initform common-lisp:nil :type
                         (common-lisp:or relative-path common-lisp:null)
                         :accessor
                         struct-shape-update-environment-input-startup-script-s3path
                         :shape "RelativePath" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (webserver-access-mode :initarg :webserver-access-mode
                         :initform common-lisp:nil :type
                         (common-lisp:or webserver-access-mode
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-environment-input-webserver-access-mode
                         :shape "WebserverAccessMode" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (weekly-maintenance-window-start :initarg
                         :weekly-maintenance-window-start :initform
                         common-lisp:nil :type
                         (common-lisp:or weekly-maintenance-window-start
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-environment-input-weekly-maintenance-window-start
                         :shape "WeeklyMaintenanceWindowStart" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-environment-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-environment-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-environment-input 'make-update-environment-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-environment-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-environment-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'airflow-configuration-options))
      (common-lisp:list
       (common-lisp:cons "AirflowConfigurationOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'airflow-version))
      (common-lisp:list
       (common-lisp:cons "AirflowVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dag-s3path))
      (common-lisp:list
       (common-lisp:cons "DagS3Path"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment-class))
      (common-lisp:list
       (common-lisp:cons "EnvironmentClass"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execution-role-arn))
      (common-lisp:list
       (common-lisp:cons "ExecutionRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'logging-configuration))
      (common-lisp:list
       (common-lisp:cons "LoggingConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-workers))
      (common-lisp:list
       (common-lisp:cons "MaxWorkers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'min-workers))
      (common-lisp:list
       (common-lisp:cons "MinWorkers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'network-configuration))
      (common-lisp:list
       (common-lisp:cons "NetworkConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'plugins-s3object-version))
      (common-lisp:list
       (common-lisp:cons "PluginsS3ObjectVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'plugins-s3path))
      (common-lisp:list
       (common-lisp:cons "PluginsS3Path"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'requirements-s3object-version))
      (common-lisp:list
       (common-lisp:cons "RequirementsS3ObjectVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'requirements-s3path))
      (common-lisp:list
       (common-lisp:cons "RequirementsS3Path"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schedulers))
      (common-lisp:list
       (common-lisp:cons "Schedulers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-bucket-arn))
      (common-lisp:list
       (common-lisp:cons "SourceBucketArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'startup-script-s3object-version))
      (common-lisp:list
       (common-lisp:cons "StartupScriptS3ObjectVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'startup-script-s3path))
      (common-lisp:list
       (common-lisp:cons "StartupScriptS3Path"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'webserver-access-mode))
      (common-lisp:list
       (common-lisp:cons "WebserverAccessMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'weekly-maintenance-window-start))
      (common-lisp:list
       (common-lisp:cons "WeeklyMaintenanceWindowStart"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-environment-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-environment-output common-lisp:nil
                       ((arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or environment-arn common-lisp:null)
                         :accessor struct-shape-update-environment-output-arn
                         :shape "EnvironmentArn" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-environment-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-environment-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-environment-output
                    'make-update-environment-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-environment-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-environment-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-environment-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-error common-lisp:nil
                       ((error-code :initarg :error-code :initform
                         common-lisp:nil :type
                         (common-lisp:or error-code common-lisp:null) :accessor
                         struct-shape-update-error-error-code :shape
                         "ErrorCode" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (error-message :initarg :error-message :initform
                         common-lisp:nil :type
                         (common-lisp:or error-message common-lisp:null)
                         :accessor struct-shape-update-error-error-message
                         :shape "ErrorMessage" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-error
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-error
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'update-error 'make-update-error))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-error))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-error))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-code))
      (common-lisp:list
       (common-lisp:cons "ErrorCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-message))
      (common-lisp:list
       (common-lisp:cons "ErrorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-error))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-network-configuration-input common-lisp:nil
                       ((security-group-ids :initarg :security-group-ids
                         :initform
                         (common-lisp:error ":security-group-ids is required")
                         :type
                         (common-lisp:or security-group-list common-lisp:null)
                         :accessor
                         struct-shape-update-network-configuration-input-security-group-ids
                         :shape "SecurityGroupList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-network-configuration-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-network-configuration-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-network-configuration-input
                    'make-update-network-configuration-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-network-configuration-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-network-configuration-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-group-ids))
      (common-lisp:list
       (common-lisp:cons "SecurityGroupIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-network-configuration-input))
   common-lisp:nil))
(common-lisp:deftype update-source () 'common-lisp:string)
(common-lisp:deftype update-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition validation-exception
     (mwaa-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       validation-exception-message)))
 (common-lisp:export
  (common-lisp:list 'validation-exception 'validation-exception-message)))
(common-lisp:deftype vpc-endpoint-service-name () 'common-lisp:string)
(common-lisp:deftype webserver-access-mode () 'common-lisp:string)
(common-lisp:deftype webserver-url () 'common-lisp:string)
(common-lisp:deftype weekly-maintenance-window-start () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defun create-cli-token
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name)
   (common-lisp:declare (common-lisp:ignorable name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-cli-token-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'mwaa-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/clitoken/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "CreateCliToken"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-cli-token))
(common-lisp:progn
 (common-lisp:defun create-environment
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key airflow-configuration-options
                     airflow-version dag-s3path endpoint-management
                     environment-class execution-role-arn kms-key
                     logging-configuration max-workers min-workers name
                     network-configuration plugins-s3object-version
                     plugins-s3path requirements-s3object-version
                     requirements-s3path schedulers source-bucket-arn
                     startup-script-s3object-version startup-script-s3path tags
                     webserver-access-mode weekly-maintenance-window-start)
   (common-lisp:declare
    (common-lisp:ignorable airflow-configuration-options airflow-version
     dag-s3path endpoint-management environment-class execution-role-arn
     kms-key logging-configuration max-workers min-workers name
     network-configuration plugins-s3object-version plugins-s3path
     requirements-s3object-version requirements-s3path schedulers
     source-bucket-arn startup-script-s3object-version startup-script-s3path
     tags webserver-access-mode weekly-maintenance-window-start))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-environment-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'mwaa-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/environments/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "CreateEnvironment"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-environment))
(common-lisp:progn
 (common-lisp:defun create-web-login-token
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name)
   (common-lisp:declare (common-lisp:ignorable name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-web-login-token-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'mwaa-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/webtoken/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "CreateWebLoginToken"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-web-login-token))
(common-lisp:progn
 (common-lisp:defun delete-environment
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name)
   (common-lisp:declare (common-lisp:ignorable name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-environment-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'mwaa-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/environments/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "DeleteEnvironment"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-environment))
(common-lisp:progn
 (common-lisp:defun get-environment
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name)
   (common-lisp:declare (common-lisp:ignorable name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-environment-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'mwaa-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/environments/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "GetEnvironment"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-environment))
(common-lisp:progn
 (common-lisp:defun list-environments
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-environments-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'mwaa-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" "/environments"
                                                        "ListEnvironments"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-environments))
(common-lisp:progn
 (common-lisp:defun list-tags-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn)
   (common-lisp:declare (common-lisp:ignorable resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-for-resource-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'mwaa-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "ListTagsForResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-tags-for-resource))
(common-lisp:progn
 (common-lisp:defun publish-metrics
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key environment-name metric-data)
   (common-lisp:declare (common-lisp:ignorable environment-name metric-data))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-publish-metrics-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'mwaa-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/metrics/environments/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'environment-name))))
                                                        "PublishMetrics"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'publish-metrics))
(common-lisp:progn
 (common-lisp:defun tag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tags)
   (common-lisp:declare (common-lisp:ignorable resource-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-resource-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'mwaa-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "TagResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'tag-resource))
(common-lisp:progn
 (common-lisp:defun untag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tag-keys)
   (common-lisp:declare (common-lisp:ignorable resource-arn tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-resource-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'mwaa-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "UntagResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'untag-resource))
(common-lisp:progn
 (common-lisp:defun update-environment
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key airflow-configuration-options
                     airflow-version dag-s3path environment-class
                     execution-role-arn logging-configuration max-workers
                     min-workers name network-configuration
                     plugins-s3object-version plugins-s3path
                     requirements-s3object-version requirements-s3path
                     schedulers source-bucket-arn
                     startup-script-s3object-version startup-script-s3path
                     webserver-access-mode weekly-maintenance-window-start)
   (common-lisp:declare
    (common-lisp:ignorable airflow-configuration-options airflow-version
     dag-s3path environment-class execution-role-arn logging-configuration
     max-workers min-workers name network-configuration
     plugins-s3object-version plugins-s3path requirements-s3object-version
     requirements-s3path schedulers source-bucket-arn
     startup-script-s3object-version startup-script-s3path
     webserver-access-mode weekly-maintenance-window-start))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-environment-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'mwaa-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/environments/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "UpdateEnvironment"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-environment))
