;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/nimble/api
  (:use)
  (:nicknames #:aws/nimble)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/json-request)
  (:import-from #:aws-sdk/rest-json-request)
  (:import-from #:aws-sdk/rest-xml-request)
  (:import-from #:aws-sdk/query-request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/nimble/api)
(common-lisp:progn
 (common-lisp:define-condition nimble-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'nimble-error))
(common-lisp:progn
 (common-lisp:defclass nimble-request
                       (aws-sdk/generator/service::rest-json-request)
                       common-lisp:nil
                       (:default-initargs :service "nimble" :api-version
                        "2020-08-01" :host-prefix "nimble" :signing-name
                        "nimble" :global-host common-lisp:nil))
 (common-lisp:export 'nimble-request))
(common-lisp:defvar *error-map*
  '(("AccessDeniedException" . access-denied-exception)
    ("ConflictException" . conflict-exception)
    ("InternalServerErrorException" . internal-server-error-exception)
    ("ResourceNotFoundException" . resource-not-found-exception)
    ("ServiceQuotaExceededException" . service-quota-exceeded-exception)
    ("ThrottlingException" . throttling-exception)
    ("ValidationException" . validation-exception)))
(common-lisp:progn
 (common-lisp:defclass accept-eulas-request common-lisp:nil
                       ((client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor
                         struct-shape-accept-eulas-request-client-token :shape
                         "ClientToken" :location "header" :location-name
                         "X-Amz-Client-Token")
                        (eula-ids :initarg :eula-ids :initform common-lisp:nil
                         :type (common-lisp:or eula-id-list common-lisp:null)
                         :accessor struct-shape-accept-eulas-request-eula-ids
                         :shape "EulaIdList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (studio-id :initarg :studio-id :initform
                         (common-lisp:error ":studioid is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-accept-eulas-request-studio-id :shape
                         "String" :location "uri" :location-name "studioId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-accept-eulas-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'accept-eulas-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'accept-eulas-request 'make-accept-eulas-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input accept-eulas-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:cons "X-Amz-Client-Token" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input accept-eulas-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'eula-ids))
      (common-lisp:list
       (common-lisp:cons "eulaIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input accept-eulas-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass accept-eulas-response common-lisp:nil
                       ((eula-acceptances :initarg :eula-acceptances :initform
                         common-lisp:nil :type
                         (common-lisp:or eula-acceptance-list common-lisp:null)
                         :accessor
                         struct-shape-accept-eulas-response-eula-acceptances
                         :shape "EulaAcceptanceList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-accept-eulas-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'accept-eulas-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'accept-eulas-response 'make-accept-eulas-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          accept-eulas-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          accept-eulas-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'eula-acceptances))
      (common-lisp:list
       (common-lisp:cons "eulaAcceptances"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          accept-eulas-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition access-denied-exception
     (nimble-error)
     ((code :initarg :code :initform common-lisp:nil :reader
       access-denied-exception-code)
      (context :initarg :context :initform common-lisp:nil :reader
       access-denied-exception-context)
      (message :initarg :message :initform common-lisp:nil :reader
       access-denied-exception-message)))
 (common-lisp:export
  (common-lisp:list 'access-denied-exception 'access-denied-exception-code
                    'access-denied-exception-context
                    'access-denied-exception-message)))
(common-lisp:progn
 (common-lisp:defclass active-directory-computer-attribute common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or
                          active-directory-computer-attribute-name
                          common-lisp:null)
                         :accessor
                         struct-shape-active-directory-computer-attribute-name
                         :shape "ActiveDirectoryComputerAttributeName"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (value :initarg :value :initform common-lisp:nil :type
                         (common-lisp:or
                          active-directory-computer-attribute-value
                          common-lisp:null)
                         :accessor
                         struct-shape-active-directory-computer-attribute-value
                         :shape "ActiveDirectoryComputerAttributeValue"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-active-directory-computer-attribute
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'active-directory-computer-attribute
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'active-directory-computer-attribute
                    'make-active-directory-computer-attribute))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          active-directory-computer-attribute))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          active-directory-computer-attribute))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          active-directory-computer-attribute))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype active-directory-computer-attribute-list ()
   '(trivial-types:proper-list active-directory-computer-attribute))
 (common-lisp:defun make-active-directory-computer-attribute-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            active-directory-computer-attribute))
   aws-sdk/generator/shape::members))
(common-lisp:deftype active-directory-computer-attribute-name ()
  'common-lisp:string)
(common-lisp:deftype active-directory-computer-attribute-value ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass active-directory-configuration common-lisp:nil
                       ((computer-attributes :initarg :computer-attributes
                         :initform common-lisp:nil :type
                         (common-lisp:or
                          active-directory-computer-attribute-list
                          common-lisp:null)
                         :accessor
                         struct-shape-active-directory-configuration-computer-attributes
                         :shape "ActiveDirectoryComputerAttributeList"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (directory-id :initarg :directory-id :initform
                         common-lisp:nil :type
                         (common-lisp:or directory-id common-lisp:null)
                         :accessor
                         struct-shape-active-directory-configuration-directory-id
                         :shape "DirectoryId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (organizational-unit-distinguished-name :initarg
                         :organizational-unit-distinguished-name :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          active-directory-organizational-unit-distinguished-name
                          common-lisp:null)
                         :accessor
                         struct-shape-active-directory-configuration-organizational-unit-distinguished-name
                         :shape
                         "ActiveDirectoryOrganizationalUnitDistinguishedName"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-active-directory-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'active-directory-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'active-directory-configuration
                    'make-active-directory-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          active-directory-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          active-directory-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'computer-attributes))
      (common-lisp:list
       (common-lisp:cons "computerAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directory-id))
      (common-lisp:list
       (common-lisp:cons "directoryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'organizational-unit-distinguished-name))
      (common-lisp:list
       (common-lisp:cons "organizationalUnitDistinguishedName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          active-directory-configuration))
   common-lisp:nil))
(common-lisp:deftype active-directory-dns-ip-address () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype active-directory-dns-ip-address-list ()
   '(trivial-types:proper-list active-directory-dns-ip-address))
 (common-lisp:defun make-active-directory-dns-ip-address-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            active-directory-dns-ip-address))
   aws-sdk/generator/shape::members))
(common-lisp:deftype active-directory-organizational-unit-distinguished-name ()
  'common-lisp:string)
(common-lisp:deftype automatic-termination-mode () 'common-lisp:string)
(common-lisp:deftype client-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass compute-farm-configuration common-lisp:nil
                       ((active-directory-user :initarg :active-directory-user
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-compute-farm-configuration-active-directory-user
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (endpoint :initarg :endpoint :initform common-lisp:nil
                         :type
                         (common-lisp:or sensitive-string common-lisp:null)
                         :accessor
                         struct-shape-compute-farm-configuration-endpoint
                         :shape "SensitiveString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-compute-farm-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'compute-farm-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'compute-farm-configuration
                    'make-compute-farm-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          compute-farm-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          compute-farm-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'active-directory-user))
      (common-lisp:list
       (common-lisp:cons "activeDirectoryUser"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint))
      (common-lisp:list
       (common-lisp:cons "endpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          compute-farm-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition conflict-exception
     (nimble-error)
     ((code :initarg :code :initform common-lisp:nil :reader
       conflict-exception-code)
      (context :initarg :context :initform common-lisp:nil :reader
       conflict-exception-context)
      (message :initarg :message :initform common-lisp:nil :reader
       conflict-exception-message)))
 (common-lisp:export
  (common-lisp:list 'conflict-exception 'conflict-exception-code
                    'conflict-exception-context 'conflict-exception-message)))
(common-lisp:progn
 (common-lisp:defclass create-launch-profile-request common-lisp:nil
                       ((client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor
                         struct-shape-create-launch-profile-request-client-token
                         :shape "ClientToken" :location "header" :location-name
                         "X-Amz-Client-Token")
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or launch-profile-description
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-launch-profile-request-description
                         :shape "LaunchProfileDescription" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (ec2subnet-ids :initarg :ec2subnet-ids :initform
                         (common-lisp:error ":ec2subnetids is required") :type
                         (common-lisp:or ec2subnet-id-list common-lisp:null)
                         :accessor
                         struct-shape-create-launch-profile-request-ec2subnet-ids
                         :shape "EC2SubnetIdList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (launch-profile-protocol-versions :initarg
                         :launch-profile-protocol-versions :initform
                         (common-lisp:error
                          ":launchprofileprotocolversions is required")
                         :type
                         (common-lisp:or launch-profile-protocol-version-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-launch-profile-request-launch-profile-protocol-versions
                         :shape "LaunchProfileProtocolVersionList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or launch-profile-name common-lisp:null)
                         :accessor
                         struct-shape-create-launch-profile-request-name :shape
                         "LaunchProfileName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (stream-configuration :initarg :stream-configuration
                         :initform
                         (common-lisp:error ":streamconfiguration is required")
                         :type
                         (common-lisp:or stream-configuration-create
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-launch-profile-request-stream-configuration
                         :shape "StreamConfigurationCreate" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (studio-component-ids :initarg :studio-component-ids
                         :initform
                         (common-lisp:error ":studiocomponentids is required")
                         :type
                         (common-lisp:or
                          launch-profile-studio-component-id-list
                          common-lisp:null)
                         :accessor
                         struct-shape-create-launch-profile-request-studio-component-ids
                         :shape "LaunchProfileStudioComponentIdList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (studio-id :initarg :studio-id :initform
                         (common-lisp:error ":studioid is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-launch-profile-request-studio-id
                         :shape "String" :location "uri" :location-name
                         "studioId")
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         struct-shape-create-launch-profile-request-tags :shape
                         "Tags" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-launch-profile-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-launch-profile-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-launch-profile-request
                    'make-create-launch-profile-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-launch-profile-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:cons "X-Amz-Client-Token" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-launch-profile-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ec2subnet-ids))
      (common-lisp:list
       (common-lisp:cons "ec2SubnetIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'launch-profile-protocol-versions))
      (common-lisp:list
       (common-lisp:cons "launchProfileProtocolVersions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'stream-configuration))
      (common-lisp:list
       (common-lisp:cons "streamConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'studio-component-ids))
      (common-lisp:list
       (common-lisp:cons "studioComponentIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-launch-profile-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-launch-profile-response common-lisp:nil
                       ((launch-profile :initarg :launch-profile :initform
                         common-lisp:nil :type
                         (common-lisp:or launch-profile common-lisp:null)
                         :accessor
                         struct-shape-create-launch-profile-response-launch-profile
                         :shape "LaunchProfile" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-launch-profile-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-launch-profile-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-launch-profile-response
                    'make-create-launch-profile-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-launch-profile-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-launch-profile-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'launch-profile))
      (common-lisp:list
       (common-lisp:cons "launchProfile"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-launch-profile-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-streaming-image-request common-lisp:nil
                       ((client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor
                         struct-shape-create-streaming-image-request-client-token
                         :shape "ClientToken" :location "header" :location-name
                         "X-Amz-Client-Token")
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or streaming-image-description
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-streaming-image-request-description
                         :shape "StreamingImageDescription" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (ec2image-id :initarg :ec2image-id :initform
                         (common-lisp:error ":ec2imageid is required") :type
                         (common-lisp:or ec2image-id common-lisp:null)
                         :accessor
                         struct-shape-create-streaming-image-request-ec2image-id
                         :shape "EC2ImageId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or streaming-image-name common-lisp:null)
                         :accessor
                         struct-shape-create-streaming-image-request-name
                         :shape "StreamingImageName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (studio-id :initarg :studio-id :initform
                         (common-lisp:error ":studioid is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-streaming-image-request-studio-id
                         :shape "String" :location "uri" :location-name
                         "studioId")
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         struct-shape-create-streaming-image-request-tags
                         :shape "Tags" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-streaming-image-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-streaming-image-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-streaming-image-request
                    'make-create-streaming-image-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-streaming-image-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:cons "X-Amz-Client-Token" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-streaming-image-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ec2image-id))
      (common-lisp:list
       (common-lisp:cons "ec2ImageId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-streaming-image-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-streaming-image-response common-lisp:nil
                       ((streaming-image :initarg :streaming-image :initform
                         common-lisp:nil :type
                         (common-lisp:or streaming-image common-lisp:null)
                         :accessor
                         struct-shape-create-streaming-image-response-streaming-image
                         :shape "StreamingImage" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-streaming-image-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-streaming-image-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-streaming-image-response
                    'make-create-streaming-image-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-streaming-image-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-streaming-image-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'streaming-image))
      (common-lisp:list
       (common-lisp:cons "streamingImage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-streaming-image-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-streaming-session-request common-lisp:nil
                       ((client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor
                         struct-shape-create-streaming-session-request-client-token
                         :shape "ClientToken" :location "header" :location-name
                         "X-Amz-Client-Token")
                        (ec2instance-type :initarg :ec2instance-type :initform
                         common-lisp:nil :type
                         (common-lisp:or streaming-instance-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-streaming-session-request-ec2instance-type
                         :shape "StreamingInstanceType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (launch-profile-id :initarg :launch-profile-id
                         :initform
                         (common-lisp:error ":launchprofileid is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-create-streaming-session-request-launch-profile-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (owned-by :initarg :owned-by :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-create-streaming-session-request-owned-by
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (streaming-image-id :initarg :streaming-image-id
                         :initform common-lisp:nil :type
                         (common-lisp:or streaming-image-id common-lisp:null)
                         :accessor
                         struct-shape-create-streaming-session-request-streaming-image-id
                         :shape "StreamingImageId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (studio-id :initarg :studio-id :initform
                         (common-lisp:error ":studioid is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-streaming-session-request-studio-id
                         :shape "String" :location "uri" :location-name
                         "studioId")
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         struct-shape-create-streaming-session-request-tags
                         :shape "Tags" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-streaming-session-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-streaming-session-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-streaming-session-request
                    'make-create-streaming-session-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-streaming-session-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:cons "X-Amz-Client-Token" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-streaming-session-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ec2instance-type))
      (common-lisp:list
       (common-lisp:cons "ec2InstanceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'launch-profile-id))
      (common-lisp:list
       (common-lisp:cons "launchProfileId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owned-by))
      (common-lisp:list
       (common-lisp:cons "ownedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'streaming-image-id))
      (common-lisp:list
       (common-lisp:cons "streamingImageId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-streaming-session-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-streaming-session-response common-lisp:nil
                       ((session :initarg :session :initform common-lisp:nil
                         :type
                         (common-lisp:or streaming-session common-lisp:null)
                         :accessor
                         struct-shape-create-streaming-session-response-session
                         :shape "StreamingSession" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-streaming-session-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-streaming-session-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-streaming-session-response
                    'make-create-streaming-session-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-streaming-session-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-streaming-session-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session))
      (common-lisp:list
       (common-lisp:cons "session"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-streaming-session-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-streaming-session-stream-request common-lisp:nil
                       ((client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor
                         struct-shape-create-streaming-session-stream-request-client-token
                         :shape "ClientToken" :location "header" :location-name
                         "X-Amz-Client-Token")
                        (expiration-in-seconds :initarg :expiration-in-seconds
                         :initform common-lisp:nil :type
                         (common-lisp:or
                          streaming-session-stream-expiration-in-seconds
                          common-lisp:null)
                         :accessor
                         struct-shape-create-streaming-session-stream-request-expiration-in-seconds
                         :shape "StreamingSessionStreamExpirationInSeconds"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (session-id :initarg :session-id :initform
                         (common-lisp:error ":sessionid is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-streaming-session-stream-request-session-id
                         :shape "String" :location "uri" :location-name
                         "sessionId")
                        (studio-id :initarg :studio-id :initform
                         (common-lisp:error ":studioid is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-streaming-session-stream-request-studio-id
                         :shape "String" :location "uri" :location-name
                         "studioId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-streaming-session-stream-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-streaming-session-stream-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-streaming-session-stream-request
                    'make-create-streaming-session-stream-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-streaming-session-stream-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:cons "X-Amz-Client-Token" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-streaming-session-stream-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expiration-in-seconds))
      (common-lisp:list
       (common-lisp:cons "expirationInSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-streaming-session-stream-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-streaming-session-stream-response common-lisp:nil
                       ((stream :initarg :stream :initform common-lisp:nil
                         :type
                         (common-lisp:or streaming-session-stream
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-streaming-session-stream-response-stream
                         :shape "StreamingSessionStream" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-streaming-session-stream-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-streaming-session-stream-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-streaming-session-stream-response
                    'make-create-streaming-session-stream-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-streaming-session-stream-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-streaming-session-stream-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stream))
      (common-lisp:list
       (common-lisp:cons "stream"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-streaming-session-stream-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-studio-component-request common-lisp:nil
                       ((client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor
                         struct-shape-create-studio-component-request-client-token
                         :shape "ClientToken" :location "header" :location-name
                         "X-Amz-Client-Token")
                        (configuration :initarg :configuration :initform
                         common-lisp:nil :type
                         (common-lisp:or studio-component-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-studio-component-request-configuration
                         :shape "StudioComponentConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or studio-component-description
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-studio-component-request-description
                         :shape "StudioComponentDescription" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (ec2security-group-ids :initarg :ec2security-group-ids
                         :initform common-lisp:nil :type
                         (common-lisp:or
                          studio-component-security-group-id-list
                          common-lisp:null)
                         :accessor
                         struct-shape-create-studio-component-request-ec2security-group-ids
                         :shape "StudioComponentSecurityGroupIdList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (initialization-scripts :initarg
                         :initialization-scripts :initform common-lisp:nil
                         :type
                         (common-lisp:or
                          studio-component-initialization-script-list
                          common-lisp:null)
                         :accessor
                         struct-shape-create-studio-component-request-initialization-scripts
                         :shape "StudioComponentInitializationScriptList"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or studio-component-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-studio-component-request-name
                         :shape "StudioComponentName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (runtime-role-arn :initarg :runtime-role-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or role-arn common-lisp:null) :accessor
                         struct-shape-create-studio-component-request-runtime-role-arn
                         :shape "RoleArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (script-parameters :initarg :script-parameters
                         :initform common-lisp:nil :type
                         (common-lisp:or
                          studio-component-script-parameter-key-value-list
                          common-lisp:null)
                         :accessor
                         struct-shape-create-studio-component-request-script-parameters
                         :shape "StudioComponentScriptParameterKeyValueList"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (secure-initialization-role-arn :initarg
                         :secure-initialization-role-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or role-arn common-lisp:null) :accessor
                         struct-shape-create-studio-component-request-secure-initialization-role-arn
                         :shape "RoleArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (studio-id :initarg :studio-id :initform
                         (common-lisp:error ":studioid is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-studio-component-request-studio-id
                         :shape "String" :location "uri" :location-name
                         "studioId")
                        (subtype :initarg :subtype :initform common-lisp:nil
                         :type
                         (common-lisp:or studio-component-subtype
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-studio-component-request-subtype
                         :shape "StudioComponentSubtype" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         struct-shape-create-studio-component-request-tags
                         :shape "Tags" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (type :initarg :type :initform
                         (common-lisp:error ":type is required") :type
                         (common-lisp:or studio-component-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-studio-component-request-type
                         :shape "StudioComponentType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-studio-component-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-studio-component-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-studio-component-request
                    'make-create-studio-component-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-studio-component-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:cons "X-Amz-Client-Token" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-studio-component-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration))
      (common-lisp:list
       (common-lisp:cons "configuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ec2security-group-ids))
      (common-lisp:list
       (common-lisp:cons "ec2SecurityGroupIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'initialization-scripts))
      (common-lisp:list
       (common-lisp:cons "initializationScripts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'runtime-role-arn))
      (common-lisp:list
       (common-lisp:cons "runtimeRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'script-parameters))
      (common-lisp:list
       (common-lisp:cons "scriptParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'secure-initialization-role-arn))
      (common-lisp:list
       (common-lisp:cons "secureInitializationRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subtype))
      (common-lisp:list
       (common-lisp:cons "subtype"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-studio-component-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-studio-component-response common-lisp:nil
                       ((studio-component :initarg :studio-component :initform
                         common-lisp:nil :type
                         (common-lisp:or studio-component common-lisp:null)
                         :accessor
                         struct-shape-create-studio-component-response-studio-component
                         :shape "StudioComponent" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-studio-component-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-studio-component-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-studio-component-response
                    'make-create-studio-component-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-studio-component-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-studio-component-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'studio-component))
      (common-lisp:list
       (common-lisp:cons "studioComponent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-studio-component-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-studio-request common-lisp:nil
                       ((admin-role-arn :initarg :admin-role-arn :initform
                         (common-lisp:error ":adminrolearn is required") :type
                         (common-lisp:or role-arn common-lisp:null) :accessor
                         struct-shape-create-studio-request-admin-role-arn
                         :shape "RoleArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor
                         struct-shape-create-studio-request-client-token :shape
                         "ClientToken" :location "header" :location-name
                         "X-Amz-Client-Token")
                        (display-name :initarg :display-name :initform
                         (common-lisp:error ":displayname is required") :type
                         (common-lisp:or studio-display-name common-lisp:null)
                         :accessor
                         struct-shape-create-studio-request-display-name :shape
                         "StudioDisplayName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (studio-encryption-configuration :initarg
                         :studio-encryption-configuration :initform
                         common-lisp:nil :type
                         (common-lisp:or studio-encryption-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-studio-request-studio-encryption-configuration
                         :shape "StudioEncryptionConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (studio-name :initarg :studio-name :initform
                         (common-lisp:error ":studioname is required") :type
                         (common-lisp:or studio-name common-lisp:null)
                         :accessor
                         struct-shape-create-studio-request-studio-name :shape
                         "StudioName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         struct-shape-create-studio-request-tags :shape "Tags"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (user-role-arn :initarg :user-role-arn :initform
                         (common-lisp:error ":userrolearn is required") :type
                         (common-lisp:or role-arn common-lisp:null) :accessor
                         struct-shape-create-studio-request-user-role-arn
                         :shape "RoleArn" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-studio-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-studio-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-studio-request 'make-create-studio-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-studio-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:cons "X-Amz-Client-Token" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-studio-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'admin-role-arn))
      (common-lisp:list
       (common-lisp:cons "adminRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-name))
      (common-lisp:list
       (common-lisp:cons "displayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'studio-encryption-configuration))
      (common-lisp:list
       (common-lisp:cons "studioEncryptionConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'studio-name))
      (common-lisp:list
       (common-lisp:cons "studioName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-role-arn))
      (common-lisp:list
       (common-lisp:cons "userRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-studio-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-studio-response common-lisp:nil
                       ((studio :initarg :studio :initform common-lisp:nil
                         :type (common-lisp:or studio common-lisp:null)
                         :accessor struct-shape-create-studio-response-studio
                         :shape "Studio" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-studio-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-studio-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-studio-response 'make-create-studio-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-studio-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-studio-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'studio))
      (common-lisp:list
       (common-lisp:cons "studio"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-studio-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-launch-profile-member-request common-lisp:nil
                       ((client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor
                         struct-shape-delete-launch-profile-member-request-client-token
                         :shape "ClientToken" :location "header" :location-name
                         "X-Amz-Client-Token")
                        (launch-profile-id :initarg :launch-profile-id
                         :initform
                         (common-lisp:error ":launchprofileid is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-delete-launch-profile-member-request-launch-profile-id
                         :shape "String" :location "uri" :location-name
                         "launchProfileId")
                        (principal-id :initarg :principal-id :initform
                         (common-lisp:error ":principalid is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-delete-launch-profile-member-request-principal-id
                         :shape "String" :location "uri" :location-name
                         "principalId")
                        (studio-id :initarg :studio-id :initform
                         (common-lisp:error ":studioid is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-delete-launch-profile-member-request-studio-id
                         :shape "String" :location "uri" :location-name
                         "studioId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-launch-profile-member-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-launch-profile-member-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-launch-profile-member-request
                    'make-delete-launch-profile-member-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-launch-profile-member-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:cons "X-Amz-Client-Token" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-launch-profile-member-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-launch-profile-member-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-launch-profile-member-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-launch-profile-member-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-launch-profile-member-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-launch-profile-member-response
                    'make-delete-launch-profile-member-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-launch-profile-member-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-launch-profile-member-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-launch-profile-member-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-launch-profile-request common-lisp:nil
                       ((client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor
                         struct-shape-delete-launch-profile-request-client-token
                         :shape "ClientToken" :location "header" :location-name
                         "X-Amz-Client-Token")
                        (launch-profile-id :initarg :launch-profile-id
                         :initform
                         (common-lisp:error ":launchprofileid is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-delete-launch-profile-request-launch-profile-id
                         :shape "String" :location "uri" :location-name
                         "launchProfileId")
                        (studio-id :initarg :studio-id :initform
                         (common-lisp:error ":studioid is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-delete-launch-profile-request-studio-id
                         :shape "String" :location "uri" :location-name
                         "studioId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-launch-profile-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-launch-profile-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-launch-profile-request
                    'make-delete-launch-profile-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-launch-profile-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:cons "X-Amz-Client-Token" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-launch-profile-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-launch-profile-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-launch-profile-response common-lisp:nil
                       ((launch-profile :initarg :launch-profile :initform
                         common-lisp:nil :type
                         (common-lisp:or launch-profile common-lisp:null)
                         :accessor
                         struct-shape-delete-launch-profile-response-launch-profile
                         :shape "LaunchProfile" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-launch-profile-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-launch-profile-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-launch-profile-response
                    'make-delete-launch-profile-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-launch-profile-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-launch-profile-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'launch-profile))
      (common-lisp:list
       (common-lisp:cons "launchProfile"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-launch-profile-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-streaming-image-request common-lisp:nil
                       ((client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor
                         struct-shape-delete-streaming-image-request-client-token
                         :shape "ClientToken" :location "header" :location-name
                         "X-Amz-Client-Token")
                        (streaming-image-id :initarg :streaming-image-id
                         :initform
                         (common-lisp:error ":streamingimageid is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-delete-streaming-image-request-streaming-image-id
                         :shape "String" :location "uri" :location-name
                         "streamingImageId")
                        (studio-id :initarg :studio-id :initform
                         (common-lisp:error ":studioid is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-delete-streaming-image-request-studio-id
                         :shape "String" :location "uri" :location-name
                         "studioId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-streaming-image-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-streaming-image-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-streaming-image-request
                    'make-delete-streaming-image-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-streaming-image-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:cons "X-Amz-Client-Token" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-streaming-image-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-streaming-image-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-streaming-image-response common-lisp:nil
                       ((streaming-image :initarg :streaming-image :initform
                         common-lisp:nil :type
                         (common-lisp:or streaming-image common-lisp:null)
                         :accessor
                         struct-shape-delete-streaming-image-response-streaming-image
                         :shape "StreamingImage" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-streaming-image-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-streaming-image-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-streaming-image-response
                    'make-delete-streaming-image-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-streaming-image-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-streaming-image-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'streaming-image))
      (common-lisp:list
       (common-lisp:cons "streamingImage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-streaming-image-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-streaming-session-request common-lisp:nil
                       ((client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor
                         struct-shape-delete-streaming-session-request-client-token
                         :shape "ClientToken" :location "header" :location-name
                         "X-Amz-Client-Token")
                        (session-id :initarg :session-id :initform
                         (common-lisp:error ":sessionid is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-delete-streaming-session-request-session-id
                         :shape "String" :location "uri" :location-name
                         "sessionId")
                        (studio-id :initarg :studio-id :initform
                         (common-lisp:error ":studioid is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-delete-streaming-session-request-studio-id
                         :shape "String" :location "uri" :location-name
                         "studioId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-streaming-session-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-streaming-session-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-streaming-session-request
                    'make-delete-streaming-session-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-streaming-session-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:cons "X-Amz-Client-Token" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-streaming-session-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-streaming-session-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-streaming-session-response common-lisp:nil
                       ((session :initarg :session :initform common-lisp:nil
                         :type
                         (common-lisp:or streaming-session common-lisp:null)
                         :accessor
                         struct-shape-delete-streaming-session-response-session
                         :shape "StreamingSession" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-streaming-session-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-streaming-session-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-streaming-session-response
                    'make-delete-streaming-session-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-streaming-session-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-streaming-session-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session))
      (common-lisp:list
       (common-lisp:cons "session"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-streaming-session-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-studio-component-request common-lisp:nil
                       ((client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor
                         struct-shape-delete-studio-component-request-client-token
                         :shape "ClientToken" :location "header" :location-name
                         "X-Amz-Client-Token")
                        (studio-component-id :initarg :studio-component-id
                         :initform
                         (common-lisp:error ":studiocomponentid is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-delete-studio-component-request-studio-component-id
                         :shape "String" :location "uri" :location-name
                         "studioComponentId")
                        (studio-id :initarg :studio-id :initform
                         (common-lisp:error ":studioid is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-delete-studio-component-request-studio-id
                         :shape "String" :location "uri" :location-name
                         "studioId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-studio-component-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-studio-component-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-studio-component-request
                    'make-delete-studio-component-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-studio-component-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:cons "X-Amz-Client-Token" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-studio-component-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-studio-component-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-studio-component-response common-lisp:nil
                       ((studio-component :initarg :studio-component :initform
                         common-lisp:nil :type
                         (common-lisp:or studio-component common-lisp:null)
                         :accessor
                         struct-shape-delete-studio-component-response-studio-component
                         :shape "StudioComponent" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-studio-component-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-studio-component-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-studio-component-response
                    'make-delete-studio-component-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-studio-component-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-studio-component-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'studio-component))
      (common-lisp:list
       (common-lisp:cons "studioComponent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-studio-component-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-studio-member-request common-lisp:nil
                       ((client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor
                         struct-shape-delete-studio-member-request-client-token
                         :shape "ClientToken" :location "header" :location-name
                         "X-Amz-Client-Token")
                        (principal-id :initarg :principal-id :initform
                         (common-lisp:error ":principalid is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-delete-studio-member-request-principal-id
                         :shape "String" :location "uri" :location-name
                         "principalId")
                        (studio-id :initarg :studio-id :initform
                         (common-lisp:error ":studioid is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-delete-studio-member-request-studio-id
                         :shape "String" :location "uri" :location-name
                         "studioId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-studio-member-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-studio-member-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-studio-member-request
                    'make-delete-studio-member-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-studio-member-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:cons "X-Amz-Client-Token" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-studio-member-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-studio-member-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-studio-member-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-studio-member-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-studio-member-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-studio-member-response
                    'make-delete-studio-member-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-studio-member-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-studio-member-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-studio-member-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-studio-request common-lisp:nil
                       ((client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor
                         struct-shape-delete-studio-request-client-token :shape
                         "ClientToken" :location "header" :location-name
                         "X-Amz-Client-Token")
                        (studio-id :initarg :studio-id :initform
                         (common-lisp:error ":studioid is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-delete-studio-request-studio-id :shape
                         "String" :location "uri" :location-name "studioId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-studio-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-studio-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-studio-request 'make-delete-studio-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-studio-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:cons "X-Amz-Client-Token" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-studio-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-studio-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-studio-response common-lisp:nil
                       ((studio :initarg :studio :initform
                         (common-lisp:error ":studio is required") :type
                         (common-lisp:or studio common-lisp:null) :accessor
                         struct-shape-delete-studio-response-studio :shape
                         "Studio" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-studio-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-studio-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-studio-response 'make-delete-studio-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-studio-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-studio-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'studio))
      (common-lisp:list
       (common-lisp:cons "studio"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-studio-response))
   common-lisp:nil))
(common-lisp:deftype directory-id () 'common-lisp:string)
(common-lisp:deftype ec2image-id () 'common-lisp:string)
(common-lisp:deftype ec2subnet-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype ec2subnet-id-list ()
   '(trivial-types:proper-list ec2subnet-id))
 (common-lisp:defun make-ec2subnet-id-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list ec2subnet-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass eula common-lisp:nil
                       ((content :initarg :content :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-eula-content :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (created-at :initarg :created-at :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-eula-created-at :shape "Timestamp"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (eula-id :initarg :eula-id :initform common-lisp:nil
                         :type (common-lisp:or eula-id common-lisp:null)
                         :accessor struct-shape-eula-eula-id :shape "EulaId"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or eula-name common-lisp:null) :accessor
                         struct-shape-eula-name :shape "EulaName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (updated-at :initarg :updated-at :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-eula-updated-at :shape "Timestamp"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-eula (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'eula
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'eula 'make-eula))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input eula))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input eula))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content))
      (common-lisp:list
       (common-lisp:cons "content"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'eula-id))
      (common-lisp:list
       (common-lisp:cons "eulaId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input eula))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass eula-acceptance common-lisp:nil
                       ((accepted-at :initarg :accepted-at :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-eula-acceptance-accepted-at :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (accepted-by :initarg :accepted-by :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-eula-acceptance-accepted-by :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (acceptee-id :initarg :acceptee-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-eula-acceptance-acceptee-id :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (eula-acceptance-id :initarg :eula-acceptance-id
                         :initform common-lisp:nil :type
                         (common-lisp:or eula-acceptance-id common-lisp:null)
                         :accessor
                         struct-shape-eula-acceptance-eula-acceptance-id :shape
                         "EulaAcceptanceId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (eula-id :initarg :eula-id :initform common-lisp:nil
                         :type (common-lisp:or eula-id common-lisp:null)
                         :accessor struct-shape-eula-acceptance-eula-id :shape
                         "EulaId" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-eula-acceptance
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'eula-acceptance
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'eula-acceptance 'make-eula-acceptance))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input eula-acceptance))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input eula-acceptance))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accepted-at))
      (common-lisp:list
       (common-lisp:cons "acceptedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accepted-by))
      (common-lisp:list
       (common-lisp:cons "acceptedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'acceptee-id))
      (common-lisp:list
       (common-lisp:cons "accepteeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'eula-acceptance-id))
      (common-lisp:list
       (common-lisp:cons "eulaAcceptanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'eula-id))
      (common-lisp:list
       (common-lisp:cons "eulaId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input eula-acceptance))
   common-lisp:nil))
(common-lisp:deftype eula-acceptance-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype eula-acceptance-list ()
   '(trivial-types:proper-list eula-acceptance))
 (common-lisp:defun make-eula-acceptance-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list eula-acceptance))
   aws-sdk/generator/shape::members))
(common-lisp:deftype eula-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype eula-id-list () '(trivial-types:proper-list string))
 (common-lisp:defun make-eula-id-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype eula-list () '(trivial-types:proper-list eula))
 (common-lisp:defun make-eula-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list eula))
   aws-sdk/generator/shape::members))
(common-lisp:deftype eula-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype exception-context () 'common-lisp:hash-table)
 (common-lisp:defun make-exception-context
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defclass get-eula-request common-lisp:nil
                       ((eula-id :initarg :eula-id :initform
                         (common-lisp:error ":eulaid is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-get-eula-request-eula-id :shape "String"
                         :location "uri" :location-name "eulaId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-eula-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-eula-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-eula-request 'make-get-eula-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-eula-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-eula-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-eula-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-eula-response common-lisp:nil
                       ((eula :initarg :eula :initform common-lisp:nil :type
                         (common-lisp:or eula common-lisp:null) :accessor
                         struct-shape-get-eula-response-eula :shape "Eula"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-eula-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-eula-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-eula-response 'make-get-eula-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-eula-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-eula-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'eula))
      (common-lisp:list
       (common-lisp:cons "eula"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-eula-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-launch-profile-details-request common-lisp:nil
                       ((launch-profile-id :initarg :launch-profile-id
                         :initform
                         (common-lisp:error ":launchprofileid is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-get-launch-profile-details-request-launch-profile-id
                         :shape "String" :location "uri" :location-name
                         "launchProfileId")
                        (studio-id :initarg :studio-id :initform
                         (common-lisp:error ":studioid is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-get-launch-profile-details-request-studio-id
                         :shape "String" :location "uri" :location-name
                         "studioId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-launch-profile-details-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-launch-profile-details-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-launch-profile-details-request
                    'make-get-launch-profile-details-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-launch-profile-details-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-launch-profile-details-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-launch-profile-details-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-launch-profile-details-response common-lisp:nil
                       ((launch-profile :initarg :launch-profile :initform
                         common-lisp:nil :type
                         (common-lisp:or launch-profile common-lisp:null)
                         :accessor
                         struct-shape-get-launch-profile-details-response-launch-profile
                         :shape "LaunchProfile" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (streaming-images :initarg :streaming-images :initform
                         common-lisp:nil :type
                         (common-lisp:or streaming-image-list common-lisp:null)
                         :accessor
                         struct-shape-get-launch-profile-details-response-streaming-images
                         :shape "StreamingImageList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (studio-component-summaries :initarg
                         :studio-component-summaries :initform common-lisp:nil
                         :type
                         (common-lisp:or studio-component-summary-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-launch-profile-details-response-studio-component-summaries
                         :shape "StudioComponentSummaryList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-launch-profile-details-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-launch-profile-details-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-launch-profile-details-response
                    'make-get-launch-profile-details-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-launch-profile-details-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-launch-profile-details-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'launch-profile))
      (common-lisp:list
       (common-lisp:cons "launchProfile"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'streaming-images))
      (common-lisp:list
       (common-lisp:cons "streamingImages"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'studio-component-summaries))
      (common-lisp:list
       (common-lisp:cons "studioComponentSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-launch-profile-details-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-launch-profile-initialization-request
                       common-lisp:nil
                       ((launch-profile-id :initarg :launch-profile-id
                         :initform
                         (common-lisp:error ":launchprofileid is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-get-launch-profile-initialization-request-launch-profile-id
                         :shape "String" :location "uri" :location-name
                         "launchProfileId")
                        (launch-profile-protocol-versions :initarg
                         :launch-profile-protocol-versions :initform
                         (common-lisp:error
                          ":launchprofileprotocolversions is required")
                         :type (common-lisp:or string-list common-lisp:null)
                         :accessor
                         struct-shape-get-launch-profile-initialization-request-launch-profile-protocol-versions
                         :shape "StringList" :location "querystring"
                         :location-name "launchProfileProtocolVersions")
                        (launch-purpose :initarg :launch-purpose :initform
                         (common-lisp:error ":launchpurpose is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-get-launch-profile-initialization-request-launch-purpose
                         :shape "String" :location "querystring" :location-name
                         "launchPurpose")
                        (platform :initarg :platform :initform
                         (common-lisp:error ":platform is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-get-launch-profile-initialization-request-platform
                         :shape "String" :location "querystring" :location-name
                         "platform")
                        (studio-id :initarg :studio-id :initform
                         (common-lisp:error ":studioid is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-get-launch-profile-initialization-request-studio-id
                         :shape "String" :location "uri" :location-name
                         "studioId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-launch-profile-initialization-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-launch-profile-initialization-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-launch-profile-initialization-request
                    'make-get-launch-profile-initialization-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-launch-profile-initialization-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-launch-profile-initialization-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-launch-profile-initialization-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-launch-profile-initialization-response
                       common-lisp:nil
                       ((launch-profile-initialization :initarg
                         :launch-profile-initialization :initform
                         common-lisp:nil :type
                         (common-lisp:or launch-profile-initialization
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-launch-profile-initialization-response-launch-profile-initialization
                         :shape "LaunchProfileInitialization" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-launch-profile-initialization-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-launch-profile-initialization-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-launch-profile-initialization-response
                    'make-get-launch-profile-initialization-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-launch-profile-initialization-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-launch-profile-initialization-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'launch-profile-initialization))
      (common-lisp:list
       (common-lisp:cons "launchProfileInitialization"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-launch-profile-initialization-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-launch-profile-member-request common-lisp:nil
                       ((launch-profile-id :initarg :launch-profile-id
                         :initform
                         (common-lisp:error ":launchprofileid is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-get-launch-profile-member-request-launch-profile-id
                         :shape "String" :location "uri" :location-name
                         "launchProfileId")
                        (principal-id :initarg :principal-id :initform
                         (common-lisp:error ":principalid is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-get-launch-profile-member-request-principal-id
                         :shape "String" :location "uri" :location-name
                         "principalId")
                        (studio-id :initarg :studio-id :initform
                         (common-lisp:error ":studioid is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-get-launch-profile-member-request-studio-id
                         :shape "String" :location "uri" :location-name
                         "studioId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-launch-profile-member-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-launch-profile-member-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-launch-profile-member-request
                    'make-get-launch-profile-member-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-launch-profile-member-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-launch-profile-member-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-launch-profile-member-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-launch-profile-member-response common-lisp:nil
                       ((member :initarg :member :initform common-lisp:nil
                         :type
                         (common-lisp:or launch-profile-membership
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-launch-profile-member-response-member
                         :shape "LaunchProfileMembership" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-launch-profile-member-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-launch-profile-member-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-launch-profile-member-response
                    'make-get-launch-profile-member-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-launch-profile-member-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-launch-profile-member-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'member))
      (common-lisp:list
       (common-lisp:cons "member"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-launch-profile-member-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-launch-profile-request common-lisp:nil
                       ((launch-profile-id :initarg :launch-profile-id
                         :initform
                         (common-lisp:error ":launchprofileid is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-get-launch-profile-request-launch-profile-id
                         :shape "String" :location "uri" :location-name
                         "launchProfileId")
                        (studio-id :initarg :studio-id :initform
                         (common-lisp:error ":studioid is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-get-launch-profile-request-studio-id
                         :shape "String" :location "uri" :location-name
                         "studioId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-launch-profile-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-launch-profile-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-launch-profile-request
                    'make-get-launch-profile-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-launch-profile-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-launch-profile-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-launch-profile-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-launch-profile-response common-lisp:nil
                       ((launch-profile :initarg :launch-profile :initform
                         common-lisp:nil :type
                         (common-lisp:or launch-profile common-lisp:null)
                         :accessor
                         struct-shape-get-launch-profile-response-launch-profile
                         :shape "LaunchProfile" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-launch-profile-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-launch-profile-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-launch-profile-response
                    'make-get-launch-profile-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-launch-profile-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-launch-profile-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'launch-profile))
      (common-lisp:list
       (common-lisp:cons "launchProfile"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-launch-profile-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-streaming-image-request common-lisp:nil
                       ((streaming-image-id :initarg :streaming-image-id
                         :initform
                         (common-lisp:error ":streamingimageid is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-get-streaming-image-request-streaming-image-id
                         :shape "String" :location "uri" :location-name
                         "streamingImageId")
                        (studio-id :initarg :studio-id :initform
                         (common-lisp:error ":studioid is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-get-streaming-image-request-studio-id
                         :shape "String" :location "uri" :location-name
                         "studioId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-streaming-image-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-streaming-image-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-streaming-image-request
                    'make-get-streaming-image-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-streaming-image-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-streaming-image-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-streaming-image-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-streaming-image-response common-lisp:nil
                       ((streaming-image :initarg :streaming-image :initform
                         common-lisp:nil :type
                         (common-lisp:or streaming-image common-lisp:null)
                         :accessor
                         struct-shape-get-streaming-image-response-streaming-image
                         :shape "StreamingImage" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-streaming-image-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-streaming-image-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-streaming-image-response
                    'make-get-streaming-image-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-streaming-image-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-streaming-image-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'streaming-image))
      (common-lisp:list
       (common-lisp:cons "streamingImage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-streaming-image-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-streaming-session-backup-request common-lisp:nil
                       ((backup-id :initarg :backup-id :initform
                         (common-lisp:error ":backupid is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-get-streaming-session-backup-request-backup-id
                         :shape "String" :location "uri" :location-name
                         "backupId")
                        (studio-id :initarg :studio-id :initform
                         (common-lisp:error ":studioid is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-get-streaming-session-backup-request-studio-id
                         :shape "String" :location "uri" :location-name
                         "studioId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-streaming-session-backup-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-streaming-session-backup-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-streaming-session-backup-request
                    'make-get-streaming-session-backup-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-streaming-session-backup-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-streaming-session-backup-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-streaming-session-backup-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-streaming-session-backup-response common-lisp:nil
                       ((streaming-session-backup :initarg
                         :streaming-session-backup :initform common-lisp:nil
                         :type
                         (common-lisp:or streaming-session-backup
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-streaming-session-backup-response-streaming-session-backup
                         :shape "StreamingSessionBackup" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-streaming-session-backup-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-streaming-session-backup-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-streaming-session-backup-response
                    'make-get-streaming-session-backup-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-streaming-session-backup-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-streaming-session-backup-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'streaming-session-backup))
      (common-lisp:list
       (common-lisp:cons "streamingSessionBackup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-streaming-session-backup-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-streaming-session-request common-lisp:nil
                       ((session-id :initarg :session-id :initform
                         (common-lisp:error ":sessionid is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-get-streaming-session-request-session-id
                         :shape "String" :location "uri" :location-name
                         "sessionId")
                        (studio-id :initarg :studio-id :initform
                         (common-lisp:error ":studioid is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-get-streaming-session-request-studio-id
                         :shape "String" :location "uri" :location-name
                         "studioId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-streaming-session-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-streaming-session-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-streaming-session-request
                    'make-get-streaming-session-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-streaming-session-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-streaming-session-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-streaming-session-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-streaming-session-response common-lisp:nil
                       ((session :initarg :session :initform common-lisp:nil
                         :type
                         (common-lisp:or streaming-session common-lisp:null)
                         :accessor
                         struct-shape-get-streaming-session-response-session
                         :shape "StreamingSession" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-streaming-session-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-streaming-session-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-streaming-session-response
                    'make-get-streaming-session-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-streaming-session-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-streaming-session-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session))
      (common-lisp:list
       (common-lisp:cons "session"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-streaming-session-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-streaming-session-stream-request common-lisp:nil
                       ((session-id :initarg :session-id :initform
                         (common-lisp:error ":sessionid is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-get-streaming-session-stream-request-session-id
                         :shape "String" :location "uri" :location-name
                         "sessionId")
                        (stream-id :initarg :stream-id :initform
                         (common-lisp:error ":streamid is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-get-streaming-session-stream-request-stream-id
                         :shape "String" :location "uri" :location-name
                         "streamId")
                        (studio-id :initarg :studio-id :initform
                         (common-lisp:error ":studioid is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-get-streaming-session-stream-request-studio-id
                         :shape "String" :location "uri" :location-name
                         "studioId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-streaming-session-stream-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-streaming-session-stream-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-streaming-session-stream-request
                    'make-get-streaming-session-stream-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-streaming-session-stream-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-streaming-session-stream-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-streaming-session-stream-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-streaming-session-stream-response common-lisp:nil
                       ((stream :initarg :stream :initform common-lisp:nil
                         :type
                         (common-lisp:or streaming-session-stream
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-streaming-session-stream-response-stream
                         :shape "StreamingSessionStream" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-streaming-session-stream-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-streaming-session-stream-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-streaming-session-stream-response
                    'make-get-streaming-session-stream-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-streaming-session-stream-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-streaming-session-stream-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stream))
      (common-lisp:list
       (common-lisp:cons "stream"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-streaming-session-stream-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-studio-component-request common-lisp:nil
                       ((studio-component-id :initarg :studio-component-id
                         :initform
                         (common-lisp:error ":studiocomponentid is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-get-studio-component-request-studio-component-id
                         :shape "String" :location "uri" :location-name
                         "studioComponentId")
                        (studio-id :initarg :studio-id :initform
                         (common-lisp:error ":studioid is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-get-studio-component-request-studio-id
                         :shape "String" :location "uri" :location-name
                         "studioId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-studio-component-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-studio-component-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-studio-component-request
                    'make-get-studio-component-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-studio-component-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-studio-component-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-studio-component-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-studio-component-response common-lisp:nil
                       ((studio-component :initarg :studio-component :initform
                         common-lisp:nil :type
                         (common-lisp:or studio-component common-lisp:null)
                         :accessor
                         struct-shape-get-studio-component-response-studio-component
                         :shape "StudioComponent" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-studio-component-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-studio-component-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-studio-component-response
                    'make-get-studio-component-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-studio-component-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-studio-component-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'studio-component))
      (common-lisp:list
       (common-lisp:cons "studioComponent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-studio-component-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-studio-member-request common-lisp:nil
                       ((principal-id :initarg :principal-id :initform
                         (common-lisp:error ":principalid is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-get-studio-member-request-principal-id
                         :shape "String" :location "uri" :location-name
                         "principalId")
                        (studio-id :initarg :studio-id :initform
                         (common-lisp:error ":studioid is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-get-studio-member-request-studio-id
                         :shape "String" :location "uri" :location-name
                         "studioId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-studio-member-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-studio-member-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-studio-member-request
                    'make-get-studio-member-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-studio-member-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-studio-member-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-studio-member-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-studio-member-response common-lisp:nil
                       ((member :initarg :member :initform common-lisp:nil
                         :type
                         (common-lisp:or studio-membership common-lisp:null)
                         :accessor
                         struct-shape-get-studio-member-response-member :shape
                         "StudioMembership" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-studio-member-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-studio-member-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-studio-member-response
                    'make-get-studio-member-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-studio-member-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-studio-member-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'member))
      (common-lisp:list
       (common-lisp:cons "member"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-studio-member-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-studio-request common-lisp:nil
                       ((studio-id :initarg :studio-id :initform
                         (common-lisp:error ":studioid is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-get-studio-request-studio-id :shape
                         "String" :location "uri" :location-name "studioId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-studio-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-studio-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-studio-request 'make-get-studio-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-studio-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-studio-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-studio-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-studio-response common-lisp:nil
                       ((studio :initarg :studio :initform
                         (common-lisp:error ":studio is required") :type
                         (common-lisp:or studio common-lisp:null) :accessor
                         struct-shape-get-studio-response-studio :shape
                         "Studio" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-studio-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-studio-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-studio-response 'make-get-studio-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-studio-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-studio-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'studio))
      (common-lisp:list
       (common-lisp:cons "studio"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-studio-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition internal-server-error-exception
     (nimble-error)
     ((code :initarg :code :initform common-lisp:nil :reader
       internal-server-error-exception-code)
      (context :initarg :context :initform common-lisp:nil :reader
       internal-server-error-exception-context)
      (message :initarg :message :initform common-lisp:nil :reader
       internal-server-error-exception-message)))
 (common-lisp:export
  (common-lisp:list 'internal-server-error-exception
                    'internal-server-error-exception-code
                    'internal-server-error-exception-context
                    'internal-server-error-exception-message)))
(common-lisp:progn
 (common-lisp:defclass launch-profile common-lisp:nil
                       ((arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-launch-profile-arn :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (created-at :initarg :created-at :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-launch-profile-created-at :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (created-by :initarg :created-by :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-launch-profile-created-by :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or launch-profile-description
                                         common-lisp:null)
                         :accessor struct-shape-launch-profile-description
                         :shape "LaunchProfileDescription" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (ec2subnet-ids :initarg :ec2subnet-ids :initform
                         common-lisp:nil :type
                         (common-lisp:or ec2subnet-id-list common-lisp:null)
                         :accessor struct-shape-launch-profile-ec2subnet-ids
                         :shape "EC2SubnetIdList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (launch-profile-id :initarg :launch-profile-id
                         :initform common-lisp:nil :type
                         (common-lisp:or launch-profile-id common-lisp:null)
                         :accessor
                         struct-shape-launch-profile-launch-profile-id :shape
                         "LaunchProfileId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (launch-profile-protocol-versions :initarg
                         :launch-profile-protocol-versions :initform
                         common-lisp:nil :type
                         (common-lisp:or launch-profile-protocol-version-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-launch-profile-launch-profile-protocol-versions
                         :shape "LaunchProfileProtocolVersionList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or launch-profile-name common-lisp:null)
                         :accessor struct-shape-launch-profile-name :shape
                         "LaunchProfileName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (state :initarg :state :initform common-lisp:nil :type
                         (common-lisp:or launch-profile-state common-lisp:null)
                         :accessor struct-shape-launch-profile-state :shape
                         "LaunchProfileState" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status-code :initarg :status-code :initform
                         common-lisp:nil :type
                         (common-lisp:or launch-profile-status-code
                                         common-lisp:null)
                         :accessor struct-shape-launch-profile-status-code
                         :shape "LaunchProfileStatusCode" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (status-message :initarg :status-message :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-launch-profile-status-message :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (stream-configuration :initarg :stream-configuration
                         :initform common-lisp:nil :type
                         (common-lisp:or stream-configuration common-lisp:null)
                         :accessor
                         struct-shape-launch-profile-stream-configuration
                         :shape "StreamConfiguration" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (studio-component-ids :initarg :studio-component-ids
                         :initform common-lisp:nil :type
                         (common-lisp:or
                          launch-profile-studio-component-id-list
                          common-lisp:null)
                         :accessor
                         struct-shape-launch-profile-studio-component-ids
                         :shape "LaunchProfileStudioComponentIdList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         struct-shape-launch-profile-tags :shape "Tags"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (updated-at :initarg :updated-at :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-launch-profile-updated-at :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (updated-by :initarg :updated-by :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-launch-profile-updated-by :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (validation-results :initarg :validation-results
                         :initform common-lisp:nil :type
                         (common-lisp:or validation-results common-lisp:null)
                         :accessor
                         struct-shape-launch-profile-validation-results :shape
                         "ValidationResults" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-launch-profile
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'launch-profile
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'launch-profile 'make-launch-profile))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input launch-profile))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input launch-profile))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-by))
      (common-lisp:list
       (common-lisp:cons "createdBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ec2subnet-ids))
      (common-lisp:list
       (common-lisp:cons "ec2SubnetIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'launch-profile-id))
      (common-lisp:list
       (common-lisp:cons "launchProfileId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'launch-profile-protocol-versions))
      (common-lisp:list
       (common-lisp:cons "launchProfileProtocolVersions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "state"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-code))
      (common-lisp:list
       (common-lisp:cons "statusCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-message))
      (common-lisp:list
       (common-lisp:cons "statusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'stream-configuration))
      (common-lisp:list
       (common-lisp:cons "streamConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'studio-component-ids))
      (common-lisp:list
       (common-lisp:cons "studioComponentIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-by))
      (common-lisp:list
       (common-lisp:cons "updatedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'validation-results))
      (common-lisp:list
       (common-lisp:cons "validationResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input launch-profile))
   common-lisp:nil))
(common-lisp:deftype launch-profile-description () 'common-lisp:string)
(common-lisp:deftype launch-profile-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass launch-profile-initialization common-lisp:nil
                       ((active-directory :initarg :active-directory :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          launch-profile-initialization-active-directory
                          common-lisp:null)
                         :accessor
                         struct-shape-launch-profile-initialization-active-directory
                         :shape "LaunchProfileInitializationActiveDirectory"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (ec2security-group-ids :initarg :ec2security-group-ids
                         :initform common-lisp:nil :type
                         (common-lisp:or launch-profile-security-group-id-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-launch-profile-initialization-ec2security-group-ids
                         :shape "LaunchProfileSecurityGroupIdList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (launch-profile-id :initarg :launch-profile-id
                         :initform common-lisp:nil :type
                         (common-lisp:or launch-profile-id common-lisp:null)
                         :accessor
                         struct-shape-launch-profile-initialization-launch-profile-id
                         :shape "LaunchProfileId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (launch-profile-protocol-version :initarg
                         :launch-profile-protocol-version :initform
                         common-lisp:nil :type
                         (common-lisp:or launch-profile-protocol-version
                                         common-lisp:null)
                         :accessor
                         struct-shape-launch-profile-initialization-launch-profile-protocol-version
                         :shape "LaunchProfileProtocolVersion" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (launch-purpose :initarg :launch-purpose :initform
                         common-lisp:nil :type
                         (common-lisp:or launch-purpose common-lisp:null)
                         :accessor
                         struct-shape-launch-profile-initialization-launch-purpose
                         :shape "LaunchPurpose" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or launch-profile-name common-lisp:null)
                         :accessor
                         struct-shape-launch-profile-initialization-name :shape
                         "LaunchProfileName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (platform :initarg :platform :initform common-lisp:nil
                         :type
                         (common-lisp:or launch-profile-platform
                                         common-lisp:null)
                         :accessor
                         struct-shape-launch-profile-initialization-platform
                         :shape "LaunchProfilePlatform" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (system-initialization-scripts :initarg
                         :system-initialization-scripts :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          launch-profile-initialization-script-list
                          common-lisp:null)
                         :accessor
                         struct-shape-launch-profile-initialization-system-initialization-scripts
                         :shape "LaunchProfileInitializationScriptList"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (user-initialization-scripts :initarg
                         :user-initialization-scripts :initform common-lisp:nil
                         :type
                         (common-lisp:or
                          launch-profile-initialization-script-list
                          common-lisp:null)
                         :accessor
                         struct-shape-launch-profile-initialization-user-initialization-scripts
                         :shape "LaunchProfileInitializationScriptList"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-launch-profile-initialization
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'launch-profile-initialization
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'launch-profile-initialization
                    'make-launch-profile-initialization))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          launch-profile-initialization))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          launch-profile-initialization))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'active-directory))
      (common-lisp:list
       (common-lisp:cons "activeDirectory"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ec2security-group-ids))
      (common-lisp:list
       (common-lisp:cons "ec2SecurityGroupIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'launch-profile-id))
      (common-lisp:list
       (common-lisp:cons "launchProfileId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'launch-profile-protocol-version))
      (common-lisp:list
       (common-lisp:cons "launchProfileProtocolVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'launch-purpose))
      (common-lisp:list
       (common-lisp:cons "launchPurpose"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'platform))
      (common-lisp:list
       (common-lisp:cons "platform"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'system-initialization-scripts))
      (common-lisp:list
       (common-lisp:cons "systemInitializationScripts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'user-initialization-scripts))
      (common-lisp:list
       (common-lisp:cons "userInitializationScripts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          launch-profile-initialization))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass launch-profile-initialization-active-directory
                       common-lisp:nil
                       ((computer-attributes :initarg :computer-attributes
                         :initform common-lisp:nil :type
                         (common-lisp:or
                          active-directory-computer-attribute-list
                          common-lisp:null)
                         :accessor
                         struct-shape-launch-profile-initialization-active-directory-computer-attributes
                         :shape "ActiveDirectoryComputerAttributeList"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (directory-id :initarg :directory-id :initform
                         common-lisp:nil :type
                         (common-lisp:or directory-id common-lisp:null)
                         :accessor
                         struct-shape-launch-profile-initialization-active-directory-directory-id
                         :shape "DirectoryId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (directory-name :initarg :directory-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-launch-profile-initialization-active-directory-directory-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dns-ip-addresses :initarg :dns-ip-addresses :initform
                         common-lisp:nil :type
                         (common-lisp:or active-directory-dns-ip-address-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-launch-profile-initialization-active-directory-dns-ip-addresses
                         :shape "ActiveDirectoryDnsIpAddressList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (organizational-unit-distinguished-name :initarg
                         :organizational-unit-distinguished-name :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          active-directory-organizational-unit-distinguished-name
                          common-lisp:null)
                         :accessor
                         struct-shape-launch-profile-initialization-active-directory-organizational-unit-distinguished-name
                         :shape
                         "ActiveDirectoryOrganizationalUnitDistinguishedName"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (studio-component-id :initarg :studio-component-id
                         :initform common-lisp:nil :type
                         (common-lisp:or studio-component-id common-lisp:null)
                         :accessor
                         struct-shape-launch-profile-initialization-active-directory-studio-component-id
                         :shape "StudioComponentId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (studio-component-name :initarg :studio-component-name
                         :initform common-lisp:nil :type
                         (common-lisp:or studio-component-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-launch-profile-initialization-active-directory-studio-component-name
                         :shape "StudioComponentName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-launch-profile-initialization-active-directory
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'launch-profile-initialization-active-directory
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'launch-profile-initialization-active-directory
                    'make-launch-profile-initialization-active-directory))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          launch-profile-initialization-active-directory))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          launch-profile-initialization-active-directory))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'computer-attributes))
      (common-lisp:list
       (common-lisp:cons "computerAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directory-id))
      (common-lisp:list
       (common-lisp:cons "directoryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directory-name))
      (common-lisp:list
       (common-lisp:cons "directoryName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dns-ip-addresses))
      (common-lisp:list
       (common-lisp:cons "dnsIpAddresses"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'organizational-unit-distinguished-name))
      (common-lisp:list
       (common-lisp:cons "organizationalUnitDistinguishedName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'studio-component-id))
      (common-lisp:list
       (common-lisp:cons "studioComponentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'studio-component-name))
      (common-lisp:list
       (common-lisp:cons "studioComponentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          launch-profile-initialization-active-directory))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass launch-profile-initialization-script common-lisp:nil
                       ((runtime-role-arn :initarg :runtime-role-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or role-arn common-lisp:null) :accessor
                         struct-shape-launch-profile-initialization-script-runtime-role-arn
                         :shape "RoleArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (script :initarg :script :initform common-lisp:nil
                         :type
                         (common-lisp:or
                          studio-component-initialization-script-content
                          common-lisp:null)
                         :accessor
                         struct-shape-launch-profile-initialization-script-script
                         :shape "StudioComponentInitializationScriptContent"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (secure-initialization-role-arn :initarg
                         :secure-initialization-role-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or role-arn common-lisp:null) :accessor
                         struct-shape-launch-profile-initialization-script-secure-initialization-role-arn
                         :shape "RoleArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (studio-component-id :initarg :studio-component-id
                         :initform common-lisp:nil :type
                         (common-lisp:or studio-component-id common-lisp:null)
                         :accessor
                         struct-shape-launch-profile-initialization-script-studio-component-id
                         :shape "StudioComponentId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (studio-component-name :initarg :studio-component-name
                         :initform common-lisp:nil :type
                         (common-lisp:or studio-component-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-launch-profile-initialization-script-studio-component-name
                         :shape "StudioComponentName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-launch-profile-initialization-script
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'launch-profile-initialization-script
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'launch-profile-initialization-script
                    'make-launch-profile-initialization-script))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          launch-profile-initialization-script))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          launch-profile-initialization-script))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'runtime-role-arn))
      (common-lisp:list
       (common-lisp:cons "runtimeRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'script))
      (common-lisp:list
       (common-lisp:cons "script"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'secure-initialization-role-arn))
      (common-lisp:list
       (common-lisp:cons "secureInitializationRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'studio-component-id))
      (common-lisp:list
       (common-lisp:cons "studioComponentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'studio-component-name))
      (common-lisp:list
       (common-lisp:cons "studioComponentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          launch-profile-initialization-script))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype launch-profile-initialization-script-list ()
   '(trivial-types:proper-list launch-profile-initialization-script))
 (common-lisp:defun make-launch-profile-initialization-script-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            launch-profile-initialization-script))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype launch-profile-list ()
   '(trivial-types:proper-list launch-profile))
 (common-lisp:defun make-launch-profile-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list launch-profile))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass launch-profile-membership common-lisp:nil
                       ((identity-store-id :initarg :identity-store-id
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-launch-profile-membership-identity-store-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (persona :initarg :persona :initform common-lisp:nil
                         :type
                         (common-lisp:or launch-profile-persona
                                         common-lisp:null)
                         :accessor
                         struct-shape-launch-profile-membership-persona :shape
                         "LaunchProfilePersona" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (principal-id :initarg :principal-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-launch-profile-membership-principal-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (sid :initarg :sid :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-launch-profile-membership-sid :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-launch-profile-membership
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'launch-profile-membership
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'launch-profile-membership
                    'make-launch-profile-membership))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          launch-profile-membership))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          launch-profile-membership))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identity-store-id))
      (common-lisp:list
       (common-lisp:cons "identityStoreId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'persona))
      (common-lisp:list
       (common-lisp:cons "persona"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'principal-id))
      (common-lisp:list
       (common-lisp:cons "principalId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sid))
      (common-lisp:list
       (common-lisp:cons "sid"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          launch-profile-membership))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype launch-profile-membership-list ()
   '(trivial-types:proper-list launch-profile-membership))
 (common-lisp:defun make-launch-profile-membership-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            launch-profile-membership))
   aws-sdk/generator/shape::members))
(common-lisp:deftype launch-profile-name () 'common-lisp:string)
(common-lisp:deftype launch-profile-persona () 'common-lisp:string)
(common-lisp:deftype launch-profile-platform () 'common-lisp:string)
(common-lisp:deftype launch-profile-protocol-version () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype launch-profile-protocol-version-list ()
   '(trivial-types:proper-list launch-profile-protocol-version))
 (common-lisp:defun make-launch-profile-protocol-version-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            launch-profile-protocol-version))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype launch-profile-security-group-id-list ()
   '(trivial-types:proper-list security-group-id))
 (common-lisp:defun make-launch-profile-security-group-id-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list security-group-id))
   aws-sdk/generator/shape::members))
(common-lisp:deftype launch-profile-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype launch-profile-state-list ()
   '(trivial-types:proper-list launch-profile-state))
 (common-lisp:defun make-launch-profile-state-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list launch-profile-state))
   aws-sdk/generator/shape::members))
(common-lisp:deftype launch-profile-status-code () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype launch-profile-studio-component-id-list ()
   '(trivial-types:proper-list string))
 (common-lisp:defun make-launch-profile-studio-component-id-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype launch-profile-validation-state () 'common-lisp:string)
(common-lisp:deftype launch-profile-validation-status-code ()
  'common-lisp:string)
(common-lisp:deftype launch-profile-validation-status-message ()
  'common-lisp:string)
(common-lisp:deftype launch-profile-validation-type () 'common-lisp:string)
(common-lisp:deftype launch-purpose () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass license-service-configuration common-lisp:nil
                       ((endpoint :initarg :endpoint :initform common-lisp:nil
                         :type
                         (common-lisp:or sensitive-string common-lisp:null)
                         :accessor
                         struct-shape-license-service-configuration-endpoint
                         :shape "SensitiveString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-license-service-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'license-service-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'license-service-configuration
                    'make-license-service-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          license-service-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          license-service-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint))
      (common-lisp:list
       (common-lisp:cons "endpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          license-service-configuration))
   common-lisp:nil))
(common-lisp:deftype linux-mount-point () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass list-eula-acceptances-request common-lisp:nil
                       ((eula-ids :initarg :eula-ids :initform common-lisp:nil
                         :type (common-lisp:or string-list common-lisp:null)
                         :accessor
                         struct-shape-list-eula-acceptances-request-eula-ids
                         :shape "StringList" :location "querystring"
                         :location-name "eulaIds")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-eula-acceptances-request-next-token
                         :shape "String" :location "querystring" :location-name
                         "nextToken")
                        (studio-id :initarg :studio-id :initform
                         (common-lisp:error ":studioid is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-eula-acceptances-request-studio-id
                         :shape "String" :location "uri" :location-name
                         "studioId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-eula-acceptances-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-eula-acceptances-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-eula-acceptances-request
                    'make-list-eula-acceptances-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-eula-acceptances-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-eula-acceptances-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-eula-acceptances-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-eula-acceptances-response common-lisp:nil
                       ((eula-acceptances :initarg :eula-acceptances :initform
                         common-lisp:nil :type
                         (common-lisp:or eula-acceptance-list common-lisp:null)
                         :accessor
                         struct-shape-list-eula-acceptances-response-eula-acceptances
                         :shape "EulaAcceptanceList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-eula-acceptances-response-next-token
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-eula-acceptances-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-eula-acceptances-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-eula-acceptances-response
                    'make-list-eula-acceptances-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-eula-acceptances-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-eula-acceptances-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'eula-acceptances))
      (common-lisp:list
       (common-lisp:cons "eulaAcceptances"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-eula-acceptances-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-eulas-request common-lisp:nil
                       ((eula-ids :initarg :eula-ids :initform common-lisp:nil
                         :type (common-lisp:or string-list common-lisp:null)
                         :accessor struct-shape-list-eulas-request-eula-ids
                         :shape "StringList" :location "querystring"
                         :location-name "eulaIds")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-eulas-request-next-token :shape
                         "String" :location "querystring" :location-name
                         "nextToken"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-eulas-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-eulas-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-eulas-request 'make-list-eulas-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-eulas-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-eulas-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-eulas-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-eulas-response common-lisp:nil
                       ((eulas :initarg :eulas :initform common-lisp:nil :type
                         (common-lisp:or eula-list common-lisp:null) :accessor
                         struct-shape-list-eulas-response-eulas :shape
                         "EulaList" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-eulas-response-next-token :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-eulas-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-eulas-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-eulas-response 'make-list-eulas-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-eulas-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-eulas-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'eulas))
      (common-lisp:list
       (common-lisp:cons "eulas"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-eulas-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-launch-profile-members-request common-lisp:nil
                       ((launch-profile-id :initarg :launch-profile-id
                         :initform
                         (common-lisp:error ":launchprofileid is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-list-launch-profile-members-request-launch-profile-id
                         :shape "String" :location "uri" :location-name
                         "launchProfileId")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-launch-profile-members-request-max-results
                         :shape "MaxResults" :location "querystring"
                         :location-name "maxResults")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-launch-profile-members-request-next-token
                         :shape "String" :location "querystring" :location-name
                         "nextToken")
                        (studio-id :initarg :studio-id :initform
                         (common-lisp:error ":studioid is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-launch-profile-members-request-studio-id
                         :shape "String" :location "uri" :location-name
                         "studioId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-launch-profile-members-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-launch-profile-members-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-launch-profile-members-request
                    'make-list-launch-profile-members-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-launch-profile-members-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-launch-profile-members-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-launch-profile-members-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-launch-profile-members-response common-lisp:nil
                       ((members :initarg :members :initform common-lisp:nil
                         :type
                         (common-lisp:or launch-profile-membership-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-launch-profile-members-response-members
                         :shape "LaunchProfileMembershipList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-launch-profile-members-response-next-token
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-launch-profile-members-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-launch-profile-members-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-launch-profile-members-response
                    'make-list-launch-profile-members-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-launch-profile-members-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-launch-profile-members-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'members))
      (common-lisp:list
       (common-lisp:cons "members"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-launch-profile-members-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-launch-profiles-request common-lisp:nil
                       ((max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-launch-profiles-request-max-results
                         :shape "MaxResults" :location "querystring"
                         :location-name "maxResults")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-launch-profiles-request-next-token
                         :shape "String" :location "querystring" :location-name
                         "nextToken")
                        (principal-id :initarg :principal-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-launch-profiles-request-principal-id
                         :shape "String" :location "querystring" :location-name
                         "principalId")
                        (states :initarg :states :initform common-lisp:nil
                         :type
                         (common-lisp:or launch-profile-state-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-launch-profiles-request-states
                         :shape "LaunchProfileStateList" :location
                         "querystring" :location-name "states")
                        (studio-id :initarg :studio-id :initform
                         (common-lisp:error ":studioid is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-launch-profiles-request-studio-id
                         :shape "String" :location "uri" :location-name
                         "studioId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-launch-profiles-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-launch-profiles-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-launch-profiles-request
                    'make-list-launch-profiles-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-launch-profiles-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-launch-profiles-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-launch-profiles-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-launch-profiles-response common-lisp:nil
                       ((launch-profiles :initarg :launch-profiles :initform
                         common-lisp:nil :type
                         (common-lisp:or launch-profile-list common-lisp:null)
                         :accessor
                         struct-shape-list-launch-profiles-response-launch-profiles
                         :shape "LaunchProfileList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-launch-profiles-response-next-token
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-launch-profiles-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-launch-profiles-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-launch-profiles-response
                    'make-list-launch-profiles-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-launch-profiles-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-launch-profiles-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'launch-profiles))
      (common-lisp:list
       (common-lisp:cons "launchProfiles"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-launch-profiles-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-streaming-images-request common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-streaming-images-request-next-token
                         :shape "String" :location "querystring" :location-name
                         "nextToken")
                        (owner :initarg :owner :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-streaming-images-request-owner
                         :shape "String" :location "querystring" :location-name
                         "owner")
                        (studio-id :initarg :studio-id :initform
                         (common-lisp:error ":studioid is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-streaming-images-request-studio-id
                         :shape "String" :location "uri" :location-name
                         "studioId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-streaming-images-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-streaming-images-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-streaming-images-request
                    'make-list-streaming-images-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-streaming-images-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-streaming-images-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-streaming-images-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-streaming-images-response common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-streaming-images-response-next-token
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (streaming-images :initarg :streaming-images :initform
                         common-lisp:nil :type
                         (common-lisp:or streaming-image-list common-lisp:null)
                         :accessor
                         struct-shape-list-streaming-images-response-streaming-images
                         :shape "StreamingImageList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-streaming-images-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-streaming-images-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-streaming-images-response
                    'make-list-streaming-images-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-streaming-images-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-streaming-images-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'streaming-images))
      (common-lisp:list
       (common-lisp:cons "streamingImages"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-streaming-images-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-streaming-session-backups-request common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-streaming-session-backups-request-next-token
                         :shape "String" :location "querystring" :location-name
                         "nextToken")
                        (owned-by :initarg :owned-by :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-list-streaming-session-backups-request-owned-by
                         :shape "String" :location "querystring" :location-name
                         "ownedBy")
                        (studio-id :initarg :studio-id :initform
                         (common-lisp:error ":studioid is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-streaming-session-backups-request-studio-id
                         :shape "String" :location "uri" :location-name
                         "studioId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-streaming-session-backups-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-streaming-session-backups-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-streaming-session-backups-request
                    'make-list-streaming-session-backups-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-streaming-session-backups-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-streaming-session-backups-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-streaming-session-backups-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-streaming-session-backups-response common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-streaming-session-backups-response-next-token
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (streaming-session-backups :initarg
                         :streaming-session-backups :initform common-lisp:nil
                         :type
                         (common-lisp:or streaming-session-backup-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-streaming-session-backups-response-streaming-session-backups
                         :shape "StreamingSessionBackupList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-streaming-session-backups-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-streaming-session-backups-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-streaming-session-backups-response
                    'make-list-streaming-session-backups-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-streaming-session-backups-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-streaming-session-backups-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'streaming-session-backups))
      (common-lisp:list
       (common-lisp:cons "streamingSessionBackups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-streaming-session-backups-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-streaming-sessions-request common-lisp:nil
                       ((created-by :initarg :created-by :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-streaming-sessions-request-created-by
                         :shape "String" :location "querystring" :location-name
                         "createdBy")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-streaming-sessions-request-next-token
                         :shape "String" :location "querystring" :location-name
                         "nextToken")
                        (owned-by :initarg :owned-by :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-list-streaming-sessions-request-owned-by
                         :shape "String" :location "querystring" :location-name
                         "ownedBy")
                        (session-ids :initarg :session-ids :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-streaming-sessions-request-session-ids
                         :shape "String" :location "querystring" :location-name
                         "sessionIds")
                        (studio-id :initarg :studio-id :initform
                         (common-lisp:error ":studioid is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-streaming-sessions-request-studio-id
                         :shape "String" :location "uri" :location-name
                         "studioId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-streaming-sessions-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-streaming-sessions-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-streaming-sessions-request
                    'make-list-streaming-sessions-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-streaming-sessions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-streaming-sessions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-streaming-sessions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-streaming-sessions-response common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-streaming-sessions-response-next-token
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (sessions :initarg :sessions :initform common-lisp:nil
                         :type
                         (common-lisp:or streaming-session-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-streaming-sessions-response-sessions
                         :shape "StreamingSessionList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-streaming-sessions-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-streaming-sessions-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-streaming-sessions-response
                    'make-list-streaming-sessions-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-streaming-sessions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-streaming-sessions-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sessions))
      (common-lisp:list
       (common-lisp:cons "sessions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-streaming-sessions-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-studio-components-request common-lisp:nil
                       ((max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-studio-components-request-max-results
                         :shape "MaxResults" :location "querystring"
                         :location-name "maxResults")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-studio-components-request-next-token
                         :shape "String" :location "querystring" :location-name
                         "nextToken")
                        (states :initarg :states :initform common-lisp:nil
                         :type
                         (common-lisp:or studio-component-state-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-studio-components-request-states
                         :shape "StudioComponentStateList" :location
                         "querystring" :location-name "states")
                        (studio-id :initarg :studio-id :initform
                         (common-lisp:error ":studioid is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-studio-components-request-studio-id
                         :shape "String" :location "uri" :location-name
                         "studioId")
                        (types :initarg :types :initform common-lisp:nil :type
                         (common-lisp:or studio-component-type-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-studio-components-request-types
                         :shape "StudioComponentTypeList" :location
                         "querystring" :location-name "types"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-studio-components-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-studio-components-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-studio-components-request
                    'make-list-studio-components-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-studio-components-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-studio-components-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-studio-components-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-studio-components-response common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-studio-components-response-next-token
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (studio-components :initarg :studio-components
                         :initform common-lisp:nil :type
                         (common-lisp:or studio-component-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-studio-components-response-studio-components
                         :shape "StudioComponentList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-studio-components-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-studio-components-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-studio-components-response
                    'make-list-studio-components-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-studio-components-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-studio-components-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'studio-components))
      (common-lisp:list
       (common-lisp:cons "studioComponents"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-studio-components-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-studio-members-request common-lisp:nil
                       ((max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-studio-members-request-max-results
                         :shape "MaxResults" :location "querystring"
                         :location-name "maxResults")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-studio-members-request-next-token
                         :shape "String" :location "querystring" :location-name
                         "nextToken")
                        (studio-id :initarg :studio-id :initform
                         (common-lisp:error ":studioid is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-studio-members-request-studio-id
                         :shape "String" :location "uri" :location-name
                         "studioId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-studio-members-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-studio-members-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-studio-members-request
                    'make-list-studio-members-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-studio-members-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-studio-members-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-studio-members-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-studio-members-response common-lisp:nil
                       ((members :initarg :members :initform common-lisp:nil
                         :type
                         (common-lisp:or studio-membership-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-studio-members-response-members
                         :shape "StudioMembershipList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-studio-members-response-next-token
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-studio-members-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-studio-members-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-studio-members-response
                    'make-list-studio-members-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-studio-members-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-studio-members-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'members))
      (common-lisp:list
       (common-lisp:cons "members"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-studio-members-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-studios-request common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-studios-request-next-token :shape
                         "String" :location "querystring" :location-name
                         "nextToken"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-studios-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-studios-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-studios-request 'make-list-studios-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-studios-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-studios-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-studios-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-studios-response common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-studios-response-next-token :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (studios :initarg :studios :initform
                         (common-lisp:error ":studios is required") :type
                         (common-lisp:or studio-list common-lisp:null)
                         :accessor struct-shape-list-studios-response-studios
                         :shape "StudioList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-studios-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-studios-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-studios-response 'make-list-studios-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-studios-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-studios-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'studios))
      (common-lisp:list
       (common-lisp:cons "studios"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-studios-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-request common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resourcearn is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-tags-for-resource-request-resource-arn
                         :shape "String" :location "uri" :location-name
                         "resourceArn"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-tags-for-resource-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-request
                    'make-list-tags-for-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-response common-lisp:nil
                       ((tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         struct-shape-list-tags-for-resource-response-tags
                         :shape "Tags" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-tags-for-resource-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-response
                    'make-list-tags-for-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   common-lisp:nil))
(common-lisp:deftype max-results () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass new-launch-profile-member common-lisp:nil
                       ((persona :initarg :persona :initform
                         (common-lisp:error ":persona is required") :type
                         (common-lisp:or launch-profile-persona
                                         common-lisp:null)
                         :accessor
                         struct-shape-new-launch-profile-member-persona :shape
                         "LaunchProfilePersona" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (principal-id :initarg :principal-id :initform
                         (common-lisp:error ":principalid is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-new-launch-profile-member-principal-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-new-launch-profile-member
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'new-launch-profile-member
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'new-launch-profile-member
                    'make-new-launch-profile-member))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          new-launch-profile-member))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          new-launch-profile-member))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'persona))
      (common-lisp:list
       (common-lisp:cons "persona"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'principal-id))
      (common-lisp:list
       (common-lisp:cons "principalId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          new-launch-profile-member))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype new-launch-profile-member-list ()
   '(trivial-types:proper-list new-launch-profile-member))
 (common-lisp:defun make-new-launch-profile-member-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            new-launch-profile-member))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass new-studio-member common-lisp:nil
                       ((persona :initarg :persona :initform
                         (common-lisp:error ":persona is required") :type
                         (common-lisp:or studio-persona common-lisp:null)
                         :accessor struct-shape-new-studio-member-persona
                         :shape "StudioPersona" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (principal-id :initarg :principal-id :initform
                         (common-lisp:error ":principalid is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-new-studio-member-principal-id :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-new-studio-member
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'new-studio-member
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'new-studio-member 'make-new-studio-member))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input new-studio-member))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input new-studio-member))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'persona))
      (common-lisp:list
       (common-lisp:cons "persona"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'principal-id))
      (common-lisp:list
       (common-lisp:cons "principalId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input new-studio-member))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype new-studio-member-list ()
   '(trivial-types:proper-list new-studio-member))
 (common-lisp:defun make-new-studio-member-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list new-studio-member))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass put-launch-profile-members-request common-lisp:nil
                       ((client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor
                         struct-shape-put-launch-profile-members-request-client-token
                         :shape "ClientToken" :location "header" :location-name
                         "X-Amz-Client-Token")
                        (identity-store-id :initarg :identity-store-id
                         :initform
                         (common-lisp:error ":identitystoreid is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-put-launch-profile-members-request-identity-store-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (launch-profile-id :initarg :launch-profile-id
                         :initform
                         (common-lisp:error ":launchprofileid is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-put-launch-profile-members-request-launch-profile-id
                         :shape "String" :location "uri" :location-name
                         "launchProfileId")
                        (members :initarg :members :initform
                         (common-lisp:error ":members is required") :type
                         (common-lisp:or new-launch-profile-member-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-put-launch-profile-members-request-members
                         :shape "NewLaunchProfileMemberList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (studio-id :initarg :studio-id :initform
                         (common-lisp:error ":studioid is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-put-launch-profile-members-request-studio-id
                         :shape "String" :location "uri" :location-name
                         "studioId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-launch-profile-members-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-launch-profile-members-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-launch-profile-members-request
                    'make-put-launch-profile-members-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-launch-profile-members-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:cons "X-Amz-Client-Token" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-launch-profile-members-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identity-store-id))
      (common-lisp:list
       (common-lisp:cons "identityStoreId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'members))
      (common-lisp:list
       (common-lisp:cons "members"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-launch-profile-members-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-launch-profile-members-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-launch-profile-members-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-launch-profile-members-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-launch-profile-members-response
                    'make-put-launch-profile-members-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-launch-profile-members-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-launch-profile-members-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-launch-profile-members-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-studio-members-request common-lisp:nil
                       ((client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor
                         struct-shape-put-studio-members-request-client-token
                         :shape "ClientToken" :location "header" :location-name
                         "X-Amz-Client-Token")
                        (identity-store-id :initarg :identity-store-id
                         :initform
                         (common-lisp:error ":identitystoreid is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-put-studio-members-request-identity-store-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (members :initarg :members :initform
                         (common-lisp:error ":members is required") :type
                         (common-lisp:or new-studio-member-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-put-studio-members-request-members :shape
                         "NewStudioMemberList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (studio-id :initarg :studio-id :initform
                         (common-lisp:error ":studioid is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-put-studio-members-request-studio-id
                         :shape "String" :location "uri" :location-name
                         "studioId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-studio-members-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'put-studio-members-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-studio-members-request
                    'make-put-studio-members-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-studio-members-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:cons "X-Amz-Client-Token" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-studio-members-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identity-store-id))
      (common-lisp:list
       (common-lisp:cons "identityStoreId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'members))
      (common-lisp:list
       (common-lisp:cons "members"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-studio-members-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-studio-members-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-studio-members-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'put-studio-members-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-studio-members-response
                    'make-put-studio-members-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-studio-members-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-studio-members-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-studio-members-response))
   common-lisp:nil))
(common-lisp:deftype region () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-exception
     (nimble-error)
     ((code :initarg :code :initform common-lisp:nil :reader
       resource-not-found-exception-code)
      (context :initarg :context :initform common-lisp:nil :reader
       resource-not-found-exception-context)
      (message :initarg :message :initform common-lisp:nil :reader
       resource-not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'resource-not-found-exception
                    'resource-not-found-exception-code
                    'resource-not-found-exception-context
                    'resource-not-found-exception-message)))
(common-lisp:deftype role-arn () 'common-lisp:string)
(common-lisp:deftype script-parameter-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass script-parameter-key-value common-lisp:nil
                       ((key :initarg :key :initform common-lisp:nil :type
                         (common-lisp:or script-parameter-key common-lisp:null)
                         :accessor struct-shape-script-parameter-key-value-key
                         :shape "ScriptParameterKey" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (value :initarg :value :initform common-lisp:nil :type
                         (common-lisp:or script-parameter-value
                                         common-lisp:null)
                         :accessor
                         struct-shape-script-parameter-key-value-value :shape
                         "ScriptParameterValue" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-script-parameter-key-value
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'script-parameter-key-value
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'script-parameter-key-value
                    'make-script-parameter-key-value))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          script-parameter-key-value))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          script-parameter-key-value))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          script-parameter-key-value))
   common-lisp:nil))
(common-lisp:deftype script-parameter-value () 'common-lisp:string)
(common-lisp:deftype security-group-id () 'common-lisp:string)
(common-lisp:deftype sensitive-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition service-quota-exceeded-exception
     (nimble-error)
     ((code :initarg :code :initform common-lisp:nil :reader
       service-quota-exceeded-exception-code)
      (context :initarg :context :initform common-lisp:nil :reader
       service-quota-exceeded-exception-context)
      (message :initarg :message :initform common-lisp:nil :reader
       service-quota-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'service-quota-exceeded-exception
                    'service-quota-exceeded-exception-code
                    'service-quota-exceeded-exception-context
                    'service-quota-exceeded-exception-message)))
(common-lisp:deftype session-backup-mode () 'common-lisp:string)
(common-lisp:deftype session-persistence-mode () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass shared-file-system-configuration common-lisp:nil
                       ((endpoint :initarg :endpoint :initform common-lisp:nil
                         :type
                         (common-lisp:or sensitive-string common-lisp:null)
                         :accessor
                         struct-shape-shared-file-system-configuration-endpoint
                         :shape "SensitiveString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (file-system-id :initarg :file-system-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-shared-file-system-configuration-file-system-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (linux-mount-point :initarg :linux-mount-point
                         :initform common-lisp:nil :type
                         (common-lisp:or linux-mount-point common-lisp:null)
                         :accessor
                         struct-shape-shared-file-system-configuration-linux-mount-point
                         :shape "LinuxMountPoint" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (share-name :initarg :share-name :initform
                         common-lisp:nil :type
                         (common-lisp:or sensitive-string common-lisp:null)
                         :accessor
                         struct-shape-shared-file-system-configuration-share-name
                         :shape "SensitiveString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (windows-mount-drive :initarg :windows-mount-drive
                         :initform common-lisp:nil :type
                         (common-lisp:or windows-mount-drive common-lisp:null)
                         :accessor
                         struct-shape-shared-file-system-configuration-windows-mount-drive
                         :shape "WindowsMountDrive" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-shared-file-system-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'shared-file-system-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'shared-file-system-configuration
                    'make-shared-file-system-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          shared-file-system-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          shared-file-system-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint))
      (common-lisp:list
       (common-lisp:cons "endpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file-system-id))
      (common-lisp:list
       (common-lisp:cons "fileSystemId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'linux-mount-point))
      (common-lisp:list
       (common-lisp:cons "linuxMountPoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'share-name))
      (common-lisp:list
       (common-lisp:cons "shareName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'windows-mount-drive))
      (common-lisp:list
       (common-lisp:cons "windowsMountDrive"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          shared-file-system-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-streaming-session-request common-lisp:nil
                       ((backup-id :initarg :backup-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-start-streaming-session-request-backup-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor
                         struct-shape-start-streaming-session-request-client-token
                         :shape "ClientToken" :location "header" :location-name
                         "X-Amz-Client-Token")
                        (session-id :initarg :session-id :initform
                         (common-lisp:error ":sessionid is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-start-streaming-session-request-session-id
                         :shape "String" :location "uri" :location-name
                         "sessionId")
                        (studio-id :initarg :studio-id :initform
                         (common-lisp:error ":studioid is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-start-streaming-session-request-studio-id
                         :shape "String" :location "uri" :location-name
                         "studioId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-streaming-session-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-streaming-session-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-streaming-session-request
                    'make-start-streaming-session-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-streaming-session-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:cons "X-Amz-Client-Token" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-streaming-session-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'backup-id))
      (common-lisp:list
       (common-lisp:cons "backupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-streaming-session-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-streaming-session-response common-lisp:nil
                       ((session :initarg :session :initform common-lisp:nil
                         :type
                         (common-lisp:or streaming-session common-lisp:null)
                         :accessor
                         struct-shape-start-streaming-session-response-session
                         :shape "StreamingSession" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-streaming-session-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-streaming-session-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-streaming-session-response
                    'make-start-streaming-session-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-streaming-session-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-streaming-session-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session))
      (common-lisp:list
       (common-lisp:cons "session"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-streaming-session-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-studio-ssoconfiguration-repair-request
                       common-lisp:nil
                       ((client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor
                         struct-shape-start-studio-ssoconfiguration-repair-request-client-token
                         :shape "ClientToken" :location "header" :location-name
                         "X-Amz-Client-Token")
                        (studio-id :initarg :studio-id :initform
                         (common-lisp:error ":studioid is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-start-studio-ssoconfiguration-repair-request-studio-id
                         :shape "String" :location "uri" :location-name
                         "studioId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-studio-ssoconfiguration-repair-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-studio-ssoconfiguration-repair-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-studio-ssoconfiguration-repair-request
                    'make-start-studio-ssoconfiguration-repair-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-studio-ssoconfiguration-repair-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:cons "X-Amz-Client-Token" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-studio-ssoconfiguration-repair-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-studio-ssoconfiguration-repair-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-studio-ssoconfiguration-repair-response
                       common-lisp:nil
                       ((studio :initarg :studio :initform
                         (common-lisp:error ":studio is required") :type
                         (common-lisp:or studio common-lisp:null) :accessor
                         struct-shape-start-studio-ssoconfiguration-repair-response-studio
                         :shape "Studio" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-studio-ssoconfiguration-repair-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-studio-ssoconfiguration-repair-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-studio-ssoconfiguration-repair-response
                    'make-start-studio-ssoconfiguration-repair-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-studio-ssoconfiguration-repair-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-studio-ssoconfiguration-repair-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'studio))
      (common-lisp:list
       (common-lisp:cons "studio"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-studio-ssoconfiguration-repair-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass stop-streaming-session-request common-lisp:nil
                       ((client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor
                         struct-shape-stop-streaming-session-request-client-token
                         :shape "ClientToken" :location "header" :location-name
                         "X-Amz-Client-Token")
                        (session-id :initarg :session-id :initform
                         (common-lisp:error ":sessionid is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-stop-streaming-session-request-session-id
                         :shape "String" :location "uri" :location-name
                         "sessionId")
                        (studio-id :initarg :studio-id :initform
                         (common-lisp:error ":studioid is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-stop-streaming-session-request-studio-id
                         :shape "String" :location "uri" :location-name
                         "studioId")
                        (volume-retention-mode :initarg :volume-retention-mode
                         :initform common-lisp:nil :type
                         (common-lisp:or volume-retention-mode
                                         common-lisp:null)
                         :accessor
                         struct-shape-stop-streaming-session-request-volume-retention-mode
                         :shape "VolumeRetentionMode" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-stop-streaming-session-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'stop-streaming-session-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'stop-streaming-session-request
                    'make-stop-streaming-session-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-streaming-session-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:cons "X-Amz-Client-Token" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-streaming-session-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'volume-retention-mode))
      (common-lisp:list
       (common-lisp:cons "volumeRetentionMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-streaming-session-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass stop-streaming-session-response common-lisp:nil
                       ((session :initarg :session :initform common-lisp:nil
                         :type
                         (common-lisp:or streaming-session common-lisp:null)
                         :accessor
                         struct-shape-stop-streaming-session-response-session
                         :shape "StreamingSession" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-stop-streaming-session-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'stop-streaming-session-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'stop-streaming-session-response
                    'make-stop-streaming-session-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-streaming-session-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-streaming-session-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session))
      (common-lisp:list
       (common-lisp:cons "session"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-streaming-session-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass stream-configuration common-lisp:nil
                       ((automatic-termination-mode :initarg
                         :automatic-termination-mode :initform common-lisp:nil
                         :type
                         (common-lisp:or automatic-termination-mode
                                         common-lisp:null)
                         :accessor
                         struct-shape-stream-configuration-automatic-termination-mode
                         :shape "AutomaticTerminationMode" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (clipboard-mode :initarg :clipboard-mode :initform
                         (common-lisp:error ":clipboardmode is required") :type
                         (common-lisp:or streaming-clipboard-mode
                                         common-lisp:null)
                         :accessor
                         struct-shape-stream-configuration-clipboard-mode
                         :shape "StreamingClipboardMode" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (ec2instance-types :initarg :ec2instance-types
                         :initform
                         (common-lisp:error ":ec2instancetypes is required")
                         :type
                         (common-lisp:or streaming-instance-type-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-stream-configuration-ec2instance-types
                         :shape "StreamingInstanceTypeList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (max-session-length-in-minutes :initarg
                         :max-session-length-in-minutes :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          stream-configuration-max-session-length-in-minutes
                          common-lisp:null)
                         :accessor
                         struct-shape-stream-configuration-max-session-length-in-minutes
                         :shape "StreamConfigurationMaxSessionLengthInMinutes"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (max-stopped-session-length-in-minutes :initarg
                         :max-stopped-session-length-in-minutes :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          stream-configuration-max-stopped-session-length-in-minutes
                          common-lisp:null)
                         :accessor
                         struct-shape-stream-configuration-max-stopped-session-length-in-minutes
                         :shape
                         "StreamConfigurationMaxStoppedSessionLengthInMinutes"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (session-backup :initarg :session-backup :initform
                         common-lisp:nil :type
                         (common-lisp:or stream-configuration-session-backup
                                         common-lisp:null)
                         :accessor
                         struct-shape-stream-configuration-session-backup
                         :shape "StreamConfigurationSessionBackup" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (session-persistence-mode :initarg
                         :session-persistence-mode :initform common-lisp:nil
                         :type
                         (common-lisp:or session-persistence-mode
                                         common-lisp:null)
                         :accessor
                         struct-shape-stream-configuration-session-persistence-mode
                         :shape "SessionPersistenceMode" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (session-storage :initarg :session-storage :initform
                         common-lisp:nil :type
                         (common-lisp:or stream-configuration-session-storage
                                         common-lisp:null)
                         :accessor
                         struct-shape-stream-configuration-session-storage
                         :shape "StreamConfigurationSessionStorage" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (streaming-image-ids :initarg :streaming-image-ids
                         :initform
                         (common-lisp:error ":streamingimageids is required")
                         :type
                         (common-lisp:or streaming-image-id-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-stream-configuration-streaming-image-ids
                         :shape "StreamingImageIdList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (volume-configuration :initarg :volume-configuration
                         :initform common-lisp:nil :type
                         (common-lisp:or volume-configuration common-lisp:null)
                         :accessor
                         struct-shape-stream-configuration-volume-configuration
                         :shape "VolumeConfiguration" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-stream-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'stream-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'stream-configuration 'make-stream-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input stream-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input stream-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'automatic-termination-mode))
      (common-lisp:list
       (common-lisp:cons "automaticTerminationMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'clipboard-mode))
      (common-lisp:list
       (common-lisp:cons "clipboardMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ec2instance-types))
      (common-lisp:list
       (common-lisp:cons "ec2InstanceTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'max-session-length-in-minutes))
      (common-lisp:list
       (common-lisp:cons "maxSessionLengthInMinutes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'max-stopped-session-length-in-minutes))
      (common-lisp:list
       (common-lisp:cons "maxStoppedSessionLengthInMinutes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session-backup))
      (common-lisp:list
       (common-lisp:cons "sessionBackup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'session-persistence-mode))
      (common-lisp:list
       (common-lisp:cons "sessionPersistenceMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session-storage))
      (common-lisp:list
       (common-lisp:cons "sessionStorage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'streaming-image-ids))
      (common-lisp:list
       (common-lisp:cons "streamingImageIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'volume-configuration))
      (common-lisp:list
       (common-lisp:cons "volumeConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input stream-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass stream-configuration-create common-lisp:nil
                       ((automatic-termination-mode :initarg
                         :automatic-termination-mode :initform common-lisp:nil
                         :type
                         (common-lisp:or automatic-termination-mode
                                         common-lisp:null)
                         :accessor
                         struct-shape-stream-configuration-create-automatic-termination-mode
                         :shape "AutomaticTerminationMode" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (clipboard-mode :initarg :clipboard-mode :initform
                         (common-lisp:error ":clipboardmode is required") :type
                         (common-lisp:or streaming-clipboard-mode
                                         common-lisp:null)
                         :accessor
                         struct-shape-stream-configuration-create-clipboard-mode
                         :shape "StreamingClipboardMode" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (ec2instance-types :initarg :ec2instance-types
                         :initform
                         (common-lisp:error ":ec2instancetypes is required")
                         :type
                         (common-lisp:or streaming-instance-type-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-stream-configuration-create-ec2instance-types
                         :shape "StreamingInstanceTypeList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (max-session-length-in-minutes :initarg
                         :max-session-length-in-minutes :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          stream-configuration-max-session-length-in-minutes
                          common-lisp:null)
                         :accessor
                         struct-shape-stream-configuration-create-max-session-length-in-minutes
                         :shape "StreamConfigurationMaxSessionLengthInMinutes"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (max-stopped-session-length-in-minutes :initarg
                         :max-stopped-session-length-in-minutes :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          stream-configuration-max-stopped-session-length-in-minutes
                          common-lisp:null)
                         :accessor
                         struct-shape-stream-configuration-create-max-stopped-session-length-in-minutes
                         :shape
                         "StreamConfigurationMaxStoppedSessionLengthInMinutes"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (session-backup :initarg :session-backup :initform
                         common-lisp:nil :type
                         (common-lisp:or stream-configuration-session-backup
                                         common-lisp:null)
                         :accessor
                         struct-shape-stream-configuration-create-session-backup
                         :shape "StreamConfigurationSessionBackup" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (session-persistence-mode :initarg
                         :session-persistence-mode :initform common-lisp:nil
                         :type
                         (common-lisp:or session-persistence-mode
                                         common-lisp:null)
                         :accessor
                         struct-shape-stream-configuration-create-session-persistence-mode
                         :shape "SessionPersistenceMode" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (session-storage :initarg :session-storage :initform
                         common-lisp:nil :type
                         (common-lisp:or stream-configuration-session-storage
                                         common-lisp:null)
                         :accessor
                         struct-shape-stream-configuration-create-session-storage
                         :shape "StreamConfigurationSessionStorage" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (streaming-image-ids :initarg :streaming-image-ids
                         :initform
                         (common-lisp:error ":streamingimageids is required")
                         :type
                         (common-lisp:or streaming-image-id-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-stream-configuration-create-streaming-image-ids
                         :shape "StreamingImageIdList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (volume-configuration :initarg :volume-configuration
                         :initform common-lisp:nil :type
                         (common-lisp:or volume-configuration common-lisp:null)
                         :accessor
                         struct-shape-stream-configuration-create-volume-configuration
                         :shape "VolumeConfiguration" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-stream-configuration-create
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'stream-configuration-create
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'stream-configuration-create
                    'make-stream-configuration-create))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stream-configuration-create))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stream-configuration-create))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'automatic-termination-mode))
      (common-lisp:list
       (common-lisp:cons "automaticTerminationMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'clipboard-mode))
      (common-lisp:list
       (common-lisp:cons "clipboardMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ec2instance-types))
      (common-lisp:list
       (common-lisp:cons "ec2InstanceTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'max-session-length-in-minutes))
      (common-lisp:list
       (common-lisp:cons "maxSessionLengthInMinutes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'max-stopped-session-length-in-minutes))
      (common-lisp:list
       (common-lisp:cons "maxStoppedSessionLengthInMinutes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session-backup))
      (common-lisp:list
       (common-lisp:cons "sessionBackup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'session-persistence-mode))
      (common-lisp:list
       (common-lisp:cons "sessionPersistenceMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session-storage))
      (common-lisp:list
       (common-lisp:cons "sessionStorage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'streaming-image-ids))
      (common-lisp:list
       (common-lisp:cons "streamingImageIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'volume-configuration))
      (common-lisp:list
       (common-lisp:cons "volumeConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stream-configuration-create))
   common-lisp:nil))
(common-lisp:deftype stream-configuration-max-backups-to-retain ()
  'common-lisp:integer)
(common-lisp:deftype stream-configuration-max-session-length-in-minutes ()
  'common-lisp:integer)
(common-lisp:deftype stream-configuration-max-stopped-session-length-in-minutes
                     ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass stream-configuration-session-backup common-lisp:nil
                       ((max-backups-to-retain :initarg :max-backups-to-retain
                         :initform common-lisp:nil :type
                         (common-lisp:or
                          stream-configuration-max-backups-to-retain
                          common-lisp:null)
                         :accessor
                         struct-shape-stream-configuration-session-backup-max-backups-to-retain
                         :shape "StreamConfigurationMaxBackupsToRetain"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (mode :initarg :mode :initform common-lisp:nil :type
                         (common-lisp:or session-backup-mode common-lisp:null)
                         :accessor
                         struct-shape-stream-configuration-session-backup-mode
                         :shape "SessionBackupMode" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-stream-configuration-session-backup
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'stream-configuration-session-backup
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'stream-configuration-session-backup
                    'make-stream-configuration-session-backup))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stream-configuration-session-backup))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stream-configuration-session-backup))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'max-backups-to-retain))
      (common-lisp:list
       (common-lisp:cons "maxBackupsToRetain"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mode))
      (common-lisp:list
       (common-lisp:cons "mode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stream-configuration-session-backup))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass stream-configuration-session-storage common-lisp:nil
                       ((mode :initarg :mode :initform
                         (common-lisp:error ":mode is required") :type
                         (common-lisp:or streaming-session-storage-mode-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-stream-configuration-session-storage-mode
                         :shape "StreamingSessionStorageModeList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (root :initarg :root :initform common-lisp:nil :type
                         (common-lisp:or streaming-session-storage-root
                                         common-lisp:null)
                         :accessor
                         struct-shape-stream-configuration-session-storage-root
                         :shape "StreamingSessionStorageRoot" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-stream-configuration-session-storage
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'stream-configuration-session-storage
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'stream-configuration-session-storage
                    'make-stream-configuration-session-storage))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stream-configuration-session-storage))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stream-configuration-session-storage))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mode))
      (common-lisp:list
       (common-lisp:cons "mode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'root))
      (common-lisp:list
       (common-lisp:cons "root"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stream-configuration-session-storage))
   common-lisp:nil))
(common-lisp:deftype streaming-clipboard-mode () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass streaming-image common-lisp:nil
                       ((arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-streaming-image-arn :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or streaming-image-description
                                         common-lisp:null)
                         :accessor struct-shape-streaming-image-description
                         :shape "StreamingImageDescription" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (ec2image-id :initarg :ec2image-id :initform
                         common-lisp:nil :type
                         (common-lisp:or ec2image-id common-lisp:null)
                         :accessor struct-shape-streaming-image-ec2image-id
                         :shape "EC2ImageId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (encryption-configuration :initarg
                         :encryption-configuration :initform common-lisp:nil
                         :type
                         (common-lisp:or
                          streaming-image-encryption-configuration
                          common-lisp:null)
                         :accessor
                         struct-shape-streaming-image-encryption-configuration
                         :shape "StreamingImageEncryptionConfiguration"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (eula-ids :initarg :eula-ids :initform common-lisp:nil
                         :type (common-lisp:or eula-id-list common-lisp:null)
                         :accessor struct-shape-streaming-image-eula-ids :shape
                         "EulaIdList" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or streaming-image-name common-lisp:null)
                         :accessor struct-shape-streaming-image-name :shape
                         "StreamingImageName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (owner :initarg :owner :initform common-lisp:nil :type
                         (common-lisp:or streaming-image-owner
                                         common-lisp:null)
                         :accessor struct-shape-streaming-image-owner :shape
                         "StreamingImageOwner" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (platform :initarg :platform :initform common-lisp:nil
                         :type
                         (common-lisp:or streaming-image-platform
                                         common-lisp:null)
                         :accessor struct-shape-streaming-image-platform :shape
                         "StreamingImagePlatform" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (state :initarg :state :initform common-lisp:nil :type
                         (common-lisp:or streaming-image-state
                                         common-lisp:null)
                         :accessor struct-shape-streaming-image-state :shape
                         "StreamingImageState" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status-code :initarg :status-code :initform
                         common-lisp:nil :type
                         (common-lisp:or streaming-image-status-code
                                         common-lisp:null)
                         :accessor struct-shape-streaming-image-status-code
                         :shape "StreamingImageStatusCode" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (status-message :initarg :status-message :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-streaming-image-status-message :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (streaming-image-id :initarg :streaming-image-id
                         :initform common-lisp:nil :type
                         (common-lisp:or streaming-image-id common-lisp:null)
                         :accessor
                         struct-shape-streaming-image-streaming-image-id :shape
                         "StreamingImageId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         struct-shape-streaming-image-tags :shape "Tags"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-streaming-image
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'streaming-image
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'streaming-image 'make-streaming-image))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input streaming-image))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input streaming-image))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ec2image-id))
      (common-lisp:list
       (common-lisp:cons "ec2ImageId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'encryption-configuration))
      (common-lisp:list
       (common-lisp:cons "encryptionConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'eula-ids))
      (common-lisp:list
       (common-lisp:cons "eulaIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner))
      (common-lisp:list
       (common-lisp:cons "owner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'platform))
      (common-lisp:list
       (common-lisp:cons "platform"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "state"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-code))
      (common-lisp:list
       (common-lisp:cons "statusCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-message))
      (common-lisp:list
       (common-lisp:cons "statusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'streaming-image-id))
      (common-lisp:list
       (common-lisp:cons "streamingImageId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input streaming-image))
   common-lisp:nil))
(common-lisp:deftype streaming-image-description () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass streaming-image-encryption-configuration common-lisp:nil
                       ((key-arn :initarg :key-arn :initform common-lisp:nil
                         :type
                         (common-lisp:or
                          streaming-image-encryption-configuration-key-arn
                          common-lisp:null)
                         :accessor
                         struct-shape-streaming-image-encryption-configuration-key-arn
                         :shape "StreamingImageEncryptionConfigurationKeyArn"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (key-type :initarg :key-type :initform
                         (common-lisp:error ":keytype is required") :type
                         (common-lisp:or
                          streaming-image-encryption-configuration-key-type
                          common-lisp:null)
                         :accessor
                         struct-shape-streaming-image-encryption-configuration-key-type
                         :shape "StreamingImageEncryptionConfigurationKeyType"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-streaming-image-encryption-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'streaming-image-encryption-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'streaming-image-encryption-configuration
                    'make-streaming-image-encryption-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          streaming-image-encryption-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          streaming-image-encryption-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-arn))
      (common-lisp:list
       (common-lisp:cons "keyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-type))
      (common-lisp:list
       (common-lisp:cons "keyType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          streaming-image-encryption-configuration))
   common-lisp:nil))
(common-lisp:deftype streaming-image-encryption-configuration-key-arn ()
  'common-lisp:string)
(common-lisp:deftype streaming-image-encryption-configuration-key-type ()
  'common-lisp:string)
(common-lisp:deftype streaming-image-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype streaming-image-id-list ()
   '(trivial-types:proper-list streaming-image-id))
 (common-lisp:defun make-streaming-image-id-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list streaming-image-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype streaming-image-list ()
   '(trivial-types:proper-list streaming-image))
 (common-lisp:defun make-streaming-image-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list streaming-image))
   aws-sdk/generator/shape::members))
(common-lisp:deftype streaming-image-name () 'common-lisp:string)
(common-lisp:deftype streaming-image-owner () 'common-lisp:string)
(common-lisp:deftype streaming-image-platform () 'common-lisp:string)
(common-lisp:deftype streaming-image-state () 'common-lisp:string)
(common-lisp:deftype streaming-image-status-code () 'common-lisp:string)
(common-lisp:deftype streaming-instance-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype streaming-instance-type-list ()
   '(trivial-types:proper-list streaming-instance-type))
 (common-lisp:defun make-streaming-instance-type-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list streaming-instance-type))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass streaming-session common-lisp:nil
                       ((arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-streaming-session-arn :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (automatic-termination-mode :initarg
                         :automatic-termination-mode :initform common-lisp:nil
                         :type
                         (common-lisp:or automatic-termination-mode
                                         common-lisp:null)
                         :accessor
                         struct-shape-streaming-session-automatic-termination-mode
                         :shape "AutomaticTerminationMode" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (backup-mode :initarg :backup-mode :initform
                         common-lisp:nil :type
                         (common-lisp:or session-backup-mode common-lisp:null)
                         :accessor struct-shape-streaming-session-backup-mode
                         :shape "SessionBackupMode" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (created-at :initarg :created-at :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-streaming-session-created-at :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (created-by :initarg :created-by :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-streaming-session-created-by :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (ec2instance-type :initarg :ec2instance-type :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-streaming-session-ec2instance-type :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (launch-profile-id :initarg :launch-profile-id
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-streaming-session-launch-profile-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-backups-to-retain :initarg :max-backups-to-retain
                         :initform common-lisp:nil :type
                         (common-lisp:or
                          stream-configuration-max-backups-to-retain
                          common-lisp:null)
                         :accessor
                         struct-shape-streaming-session-max-backups-to-retain
                         :shape "StreamConfigurationMaxBackupsToRetain"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (owned-by :initarg :owned-by :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-streaming-session-owned-by
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (session-id :initarg :session-id :initform
                         common-lisp:nil :type
                         (common-lisp:or streaming-session-id common-lisp:null)
                         :accessor struct-shape-streaming-session-session-id
                         :shape "StreamingSessionId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (session-persistence-mode :initarg
                         :session-persistence-mode :initform common-lisp:nil
                         :type
                         (common-lisp:or session-persistence-mode
                                         common-lisp:null)
                         :accessor
                         struct-shape-streaming-session-session-persistence-mode
                         :shape "SessionPersistenceMode" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (started-at :initarg :started-at :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-streaming-session-started-at :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (started-by :initarg :started-by :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-streaming-session-started-by :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (started-from-backup-id :initarg
                         :started-from-backup-id :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-streaming-session-started-from-backup-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (state :initarg :state :initform common-lisp:nil :type
                         (common-lisp:or streaming-session-state
                                         common-lisp:null)
                         :accessor struct-shape-streaming-session-state :shape
                         "StreamingSessionState" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status-code :initarg :status-code :initform
                         common-lisp:nil :type
                         (common-lisp:or streaming-session-status-code
                                         common-lisp:null)
                         :accessor struct-shape-streaming-session-status-code
                         :shape "StreamingSessionStatusCode" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (status-message :initarg :status-message :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-streaming-session-status-message :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (stop-at :initarg :stop-at :initform common-lisp:nil
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor struct-shape-streaming-session-stop-at
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (stopped-at :initarg :stopped-at :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-streaming-session-stopped-at :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (stopped-by :initarg :stopped-by :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-streaming-session-stopped-by :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (streaming-image-id :initarg :streaming-image-id
                         :initform common-lisp:nil :type
                         (common-lisp:or streaming-image-id common-lisp:null)
                         :accessor
                         struct-shape-streaming-session-streaming-image-id
                         :shape "StreamingImageId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         struct-shape-streaming-session-tags :shape "Tags"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (terminate-at :initarg :terminate-at :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-streaming-session-terminate-at :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (updated-at :initarg :updated-at :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-streaming-session-updated-at :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (updated-by :initarg :updated-by :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-streaming-session-updated-by :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (volume-configuration :initarg :volume-configuration
                         :initform common-lisp:nil :type
                         (common-lisp:or volume-configuration common-lisp:null)
                         :accessor
                         struct-shape-streaming-session-volume-configuration
                         :shape "VolumeConfiguration" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (volume-retention-mode :initarg :volume-retention-mode
                         :initform common-lisp:nil :type
                         (common-lisp:or volume-retention-mode
                                         common-lisp:null)
                         :accessor
                         struct-shape-streaming-session-volume-retention-mode
                         :shape "VolumeRetentionMode" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-streaming-session
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'streaming-session
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'streaming-session 'make-streaming-session))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input streaming-session))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input streaming-session))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'automatic-termination-mode))
      (common-lisp:list
       (common-lisp:cons "automaticTerminationMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'backup-mode))
      (common-lisp:list
       (common-lisp:cons "backupMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-by))
      (common-lisp:list
       (common-lisp:cons "createdBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ec2instance-type))
      (common-lisp:list
       (common-lisp:cons "ec2InstanceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'launch-profile-id))
      (common-lisp:list
       (common-lisp:cons "launchProfileId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'max-backups-to-retain))
      (common-lisp:list
       (common-lisp:cons "maxBackupsToRetain"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owned-by))
      (common-lisp:list
       (common-lisp:cons "ownedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session-id))
      (common-lisp:list
       (common-lisp:cons "sessionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'session-persistence-mode))
      (common-lisp:list
       (common-lisp:cons "sessionPersistenceMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'started-at))
      (common-lisp:list
       (common-lisp:cons "startedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'started-by))
      (common-lisp:list
       (common-lisp:cons "startedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'started-from-backup-id))
      (common-lisp:list
       (common-lisp:cons "startedFromBackupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "state"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-code))
      (common-lisp:list
       (common-lisp:cons "statusCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-message))
      (common-lisp:list
       (common-lisp:cons "statusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stop-at))
      (common-lisp:list
       (common-lisp:cons "stopAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stopped-at))
      (common-lisp:list
       (common-lisp:cons "stoppedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stopped-by))
      (common-lisp:list
       (common-lisp:cons "stoppedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'streaming-image-id))
      (common-lisp:list
       (common-lisp:cons "streamingImageId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'terminate-at))
      (common-lisp:list
       (common-lisp:cons "terminateAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-by))
      (common-lisp:list
       (common-lisp:cons "updatedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'volume-configuration))
      (common-lisp:list
       (common-lisp:cons "volumeConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'volume-retention-mode))
      (common-lisp:list
       (common-lisp:cons "volumeRetentionMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input streaming-session))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass streaming-session-backup common-lisp:nil
                       ((arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-streaming-session-backup-arn :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (backup-id :initarg :backup-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-streaming-session-backup-backup-id :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (created-at :initarg :created-at :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-streaming-session-backup-created-at
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (launch-profile-id :initarg :launch-profile-id
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-streaming-session-backup-launch-profile-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (owned-by :initarg :owned-by :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-streaming-session-backup-owned-by :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (session-id :initarg :session-id :initform
                         common-lisp:nil :type
                         (common-lisp:or streaming-session-id common-lisp:null)
                         :accessor
                         struct-shape-streaming-session-backup-session-id
                         :shape "StreamingSessionId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (state :initarg :state :initform common-lisp:nil :type
                         (common-lisp:or streaming-session-state
                                         common-lisp:null)
                         :accessor struct-shape-streaming-session-backup-state
                         :shape "StreamingSessionState" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (status-code :initarg :status-code :initform
                         common-lisp:nil :type
                         (common-lisp:or streaming-session-status-code
                                         common-lisp:null)
                         :accessor
                         struct-shape-streaming-session-backup-status-code
                         :shape "StreamingSessionStatusCode" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (status-message :initarg :status-message :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-streaming-session-backup-status-message
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         struct-shape-streaming-session-backup-tags :shape
                         "Tags" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-streaming-session-backup
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'streaming-session-backup
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'streaming-session-backup 'make-streaming-session-backup))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          streaming-session-backup))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          streaming-session-backup))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'backup-id))
      (common-lisp:list
       (common-lisp:cons "backupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'launch-profile-id))
      (common-lisp:list
       (common-lisp:cons "launchProfileId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owned-by))
      (common-lisp:list
       (common-lisp:cons "ownedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session-id))
      (common-lisp:list
       (common-lisp:cons "sessionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "state"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-code))
      (common-lisp:list
       (common-lisp:cons "statusCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-message))
      (common-lisp:list
       (common-lisp:cons "statusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          streaming-session-backup))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype streaming-session-backup-list ()
   '(trivial-types:proper-list streaming-session-backup))
 (common-lisp:defun make-streaming-session-backup-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            streaming-session-backup))
   aws-sdk/generator/shape::members))
(common-lisp:deftype streaming-session-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype streaming-session-list ()
   '(trivial-types:proper-list streaming-session))
 (common-lisp:defun make-streaming-session-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list streaming-session))
   aws-sdk/generator/shape::members))
(common-lisp:deftype streaming-session-state () 'common-lisp:string)
(common-lisp:deftype streaming-session-status-code () 'common-lisp:string)
(common-lisp:deftype streaming-session-storage-mode () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype streaming-session-storage-mode-list ()
   '(trivial-types:proper-list streaming-session-storage-mode))
 (common-lisp:defun make-streaming-session-storage-mode-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            streaming-session-storage-mode))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass streaming-session-storage-root common-lisp:nil
                       ((linux :initarg :linux :initform common-lisp:nil :type
                         (common-lisp:or
                          streaming-session-storage-root-path-linux
                          common-lisp:null)
                         :accessor
                         struct-shape-streaming-session-storage-root-linux
                         :shape "StreamingSessionStorageRootPathLinux"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (windows :initarg :windows :initform common-lisp:nil
                         :type
                         (common-lisp:or
                          streaming-session-storage-root-path-windows
                          common-lisp:null)
                         :accessor
                         struct-shape-streaming-session-storage-root-windows
                         :shape "StreamingSessionStorageRootPathWindows"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-streaming-session-storage-root
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'streaming-session-storage-root
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'streaming-session-storage-root
                    'make-streaming-session-storage-root))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          streaming-session-storage-root))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          streaming-session-storage-root))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'linux))
      (common-lisp:list
       (common-lisp:cons "linux"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'windows))
      (common-lisp:list
       (common-lisp:cons "windows"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          streaming-session-storage-root))
   common-lisp:nil))
(common-lisp:deftype streaming-session-storage-root-path-linux ()
  'common-lisp:string)
(common-lisp:deftype streaming-session-storage-root-path-windows ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass streaming-session-stream common-lisp:nil
                       ((created-at :initarg :created-at :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-streaming-session-stream-created-at
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (created-by :initarg :created-by :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-streaming-session-stream-created-by
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (expires-at :initarg :expires-at :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-streaming-session-stream-expires-at
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (owned-by :initarg :owned-by :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-streaming-session-stream-owned-by :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (state :initarg :state :initform common-lisp:nil :type
                         (common-lisp:or streaming-session-stream-state
                                         common-lisp:null)
                         :accessor struct-shape-streaming-session-stream-state
                         :shape "StreamingSessionStreamState" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (status-code :initarg :status-code :initform
                         common-lisp:nil :type
                         (common-lisp:or streaming-session-stream-status-code
                                         common-lisp:null)
                         :accessor
                         struct-shape-streaming-session-stream-status-code
                         :shape "StreamingSessionStreamStatusCode" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (stream-id :initarg :stream-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-streaming-session-stream-stream-id :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (url :initarg :url :initform common-lisp:nil :type
                         (common-lisp:or sensitive-string common-lisp:null)
                         :accessor struct-shape-streaming-session-stream-url
                         :shape "SensitiveString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-streaming-session-stream
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'streaming-session-stream
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'streaming-session-stream 'make-streaming-session-stream))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          streaming-session-stream))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          streaming-session-stream))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-by))
      (common-lisp:list
       (common-lisp:cons "createdBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expires-at))
      (common-lisp:list
       (common-lisp:cons "expiresAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owned-by))
      (common-lisp:list
       (common-lisp:cons "ownedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "state"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-code))
      (common-lisp:list
       (common-lisp:cons "statusCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stream-id))
      (common-lisp:list
       (common-lisp:cons "streamId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'url))
      (common-lisp:list
       (common-lisp:cons "url"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          streaming-session-stream))
   common-lisp:nil))
(common-lisp:deftype streaming-session-stream-expiration-in-seconds ()
  'common-lisp:integer)
(common-lisp:deftype streaming-session-stream-state () 'common-lisp:string)
(common-lisp:deftype streaming-session-stream-status-code ()
  'common-lisp:string)
(common-lisp:deftype string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype string-list () '(trivial-types:proper-list string))
 (common-lisp:defun make-string-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass studio common-lisp:nil
                       ((admin-role-arn :initarg :admin-role-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or role-arn common-lisp:null) :accessor
                         struct-shape-studio-admin-role-arn :shape "RoleArn"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-studio-arn :shape "String" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (created-at :initarg :created-at :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-studio-created-at :shape "Timestamp"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (display-name :initarg :display-name :initform
                         common-lisp:nil :type
                         (common-lisp:or studio-display-name common-lisp:null)
                         :accessor struct-shape-studio-display-name :shape
                         "StudioDisplayName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (home-region :initarg :home-region :initform
                         common-lisp:nil :type
                         (common-lisp:or region common-lisp:null) :accessor
                         struct-shape-studio-home-region :shape "Region"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (sso-client-id :initarg :sso-client-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-studio-sso-client-id :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (state :initarg :state :initform common-lisp:nil :type
                         (common-lisp:or studio-state common-lisp:null)
                         :accessor struct-shape-studio-state :shape
                         "StudioState" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (status-code :initarg :status-code :initform
                         common-lisp:nil :type
                         (common-lisp:or studio-status-code common-lisp:null)
                         :accessor struct-shape-studio-status-code :shape
                         "StudioStatusCode" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status-message :initarg :status-message :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-studio-status-message :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (studio-encryption-configuration :initarg
                         :studio-encryption-configuration :initform
                         common-lisp:nil :type
                         (common-lisp:or studio-encryption-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-studio-studio-encryption-configuration
                         :shape "StudioEncryptionConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (studio-id :initarg :studio-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-studio-studio-id :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (studio-name :initarg :studio-name :initform
                         common-lisp:nil :type
                         (common-lisp:or studio-name common-lisp:null)
                         :accessor struct-shape-studio-studio-name :shape
                         "StudioName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (studio-url :initarg :studio-url :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-studio-studio-url :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         struct-shape-studio-tags :shape "Tags" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (updated-at :initarg :updated-at :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-studio-updated-at :shape "Timestamp"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (user-role-arn :initarg :user-role-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or role-arn common-lisp:null) :accessor
                         struct-shape-studio-user-role-arn :shape "RoleArn"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-studio
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'studio
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'studio 'make-studio))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input studio))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input studio))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'admin-role-arn))
      (common-lisp:list
       (common-lisp:cons "adminRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-name))
      (common-lisp:list
       (common-lisp:cons "displayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'home-region))
      (common-lisp:list
       (common-lisp:cons "homeRegion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sso-client-id))
      (common-lisp:list
       (common-lisp:cons "ssoClientId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "state"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-code))
      (common-lisp:list
       (common-lisp:cons "statusCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-message))
      (common-lisp:list
       (common-lisp:cons "statusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'studio-encryption-configuration))
      (common-lisp:list
       (common-lisp:cons "studioEncryptionConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'studio-id))
      (common-lisp:list
       (common-lisp:cons "studioId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'studio-name))
      (common-lisp:list
       (common-lisp:cons "studioName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'studio-url))
      (common-lisp:list
       (common-lisp:cons "studioUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-role-arn))
      (common-lisp:list
       (common-lisp:cons "userRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input studio))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass studio-component common-lisp:nil
                       ((arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-studio-component-arn :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (configuration :initarg :configuration :initform
                         common-lisp:nil :type
                         (common-lisp:or studio-component-configuration
                                         common-lisp:null)
                         :accessor struct-shape-studio-component-configuration
                         :shape "StudioComponentConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (created-at :initarg :created-at :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-studio-component-created-at :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (created-by :initarg :created-by :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-studio-component-created-by :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or studio-component-description
                                         common-lisp:null)
                         :accessor struct-shape-studio-component-description
                         :shape "StudioComponentDescription" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (ec2security-group-ids :initarg :ec2security-group-ids
                         :initform common-lisp:nil :type
                         (common-lisp:or
                          studio-component-security-group-id-list
                          common-lisp:null)
                         :accessor
                         struct-shape-studio-component-ec2security-group-ids
                         :shape "StudioComponentSecurityGroupIdList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (initialization-scripts :initarg
                         :initialization-scripts :initform common-lisp:nil
                         :type
                         (common-lisp:or
                          studio-component-initialization-script-list
                          common-lisp:null)
                         :accessor
                         struct-shape-studio-component-initialization-scripts
                         :shape "StudioComponentInitializationScriptList"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or studio-component-name
                                         common-lisp:null)
                         :accessor struct-shape-studio-component-name :shape
                         "StudioComponentName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (runtime-role-arn :initarg :runtime-role-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or role-arn common-lisp:null) :accessor
                         struct-shape-studio-component-runtime-role-arn :shape
                         "RoleArn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (script-parameters :initarg :script-parameters
                         :initform common-lisp:nil :type
                         (common-lisp:or
                          studio-component-script-parameter-key-value-list
                          common-lisp:null)
                         :accessor
                         struct-shape-studio-component-script-parameters :shape
                         "StudioComponentScriptParameterKeyValueList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (secure-initialization-role-arn :initarg
                         :secure-initialization-role-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or role-arn common-lisp:null) :accessor
                         struct-shape-studio-component-secure-initialization-role-arn
                         :shape "RoleArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (state :initarg :state :initform common-lisp:nil :type
                         (common-lisp:or studio-component-state
                                         common-lisp:null)
                         :accessor struct-shape-studio-component-state :shape
                         "StudioComponentState" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status-code :initarg :status-code :initform
                         common-lisp:nil :type
                         (common-lisp:or studio-component-status-code
                                         common-lisp:null)
                         :accessor struct-shape-studio-component-status-code
                         :shape "StudioComponentStatusCode" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (status-message :initarg :status-message :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-studio-component-status-message :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (studio-component-id :initarg :studio-component-id
                         :initform common-lisp:nil :type
                         (common-lisp:or studio-component-id common-lisp:null)
                         :accessor
                         struct-shape-studio-component-studio-component-id
                         :shape "StudioComponentId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (subtype :initarg :subtype :initform common-lisp:nil
                         :type
                         (common-lisp:or studio-component-subtype
                                         common-lisp:null)
                         :accessor struct-shape-studio-component-subtype :shape
                         "StudioComponentSubtype" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         struct-shape-studio-component-tags :shape "Tags"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or studio-component-type
                                         common-lisp:null)
                         :accessor struct-shape-studio-component-type :shape
                         "StudioComponentType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (updated-at :initarg :updated-at :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-studio-component-updated-at :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (updated-by :initarg :updated-by :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-studio-component-updated-by :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-studio-component
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'studio-component
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'studio-component 'make-studio-component))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input studio-component))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input studio-component))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration))
      (common-lisp:list
       (common-lisp:cons "configuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-by))
      (common-lisp:list
       (common-lisp:cons "createdBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ec2security-group-ids))
      (common-lisp:list
       (common-lisp:cons "ec2SecurityGroupIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'initialization-scripts))
      (common-lisp:list
       (common-lisp:cons "initializationScripts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'runtime-role-arn))
      (common-lisp:list
       (common-lisp:cons "runtimeRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'script-parameters))
      (common-lisp:list
       (common-lisp:cons "scriptParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'secure-initialization-role-arn))
      (common-lisp:list
       (common-lisp:cons "secureInitializationRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "state"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-code))
      (common-lisp:list
       (common-lisp:cons "statusCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-message))
      (common-lisp:list
       (common-lisp:cons "statusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'studio-component-id))
      (common-lisp:list
       (common-lisp:cons "studioComponentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subtype))
      (common-lisp:list
       (common-lisp:cons "subtype"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-by))
      (common-lisp:list
       (common-lisp:cons "updatedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input studio-component))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass studio-component-configuration common-lisp:nil
                       ((active-directory-configuration :initarg
                         :active-directory-configuration :initform
                         common-lisp:nil :type
                         (common-lisp:or active-directory-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-studio-component-configuration-active-directory-configuration
                         :shape "ActiveDirectoryConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (compute-farm-configuration :initarg
                         :compute-farm-configuration :initform common-lisp:nil
                         :type
                         (common-lisp:or compute-farm-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-studio-component-configuration-compute-farm-configuration
                         :shape "ComputeFarmConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (license-service-configuration :initarg
                         :license-service-configuration :initform
                         common-lisp:nil :type
                         (common-lisp:or license-service-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-studio-component-configuration-license-service-configuration
                         :shape "LicenseServiceConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (shared-file-system-configuration :initarg
                         :shared-file-system-configuration :initform
                         common-lisp:nil :type
                         (common-lisp:or shared-file-system-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-studio-component-configuration-shared-file-system-configuration
                         :shape "SharedFileSystemConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-studio-component-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'studio-component-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'studio-component-configuration
                    'make-studio-component-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          studio-component-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          studio-component-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'active-directory-configuration))
      (common-lisp:list
       (common-lisp:cons "activeDirectoryConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'compute-farm-configuration))
      (common-lisp:list
       (common-lisp:cons "computeFarmConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'license-service-configuration))
      (common-lisp:list
       (common-lisp:cons "licenseServiceConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'shared-file-system-configuration))
      (common-lisp:list
       (common-lisp:cons "sharedFileSystemConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          studio-component-configuration))
   common-lisp:nil))
(common-lisp:deftype studio-component-description () 'common-lisp:string)
(common-lisp:deftype studio-component-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass studio-component-initialization-script common-lisp:nil
                       ((launch-profile-protocol-version :initarg
                         :launch-profile-protocol-version :initform
                         common-lisp:nil :type
                         (common-lisp:or launch-profile-protocol-version
                                         common-lisp:null)
                         :accessor
                         struct-shape-studio-component-initialization-script-launch-profile-protocol-version
                         :shape "LaunchProfileProtocolVersion" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (platform :initarg :platform :initform common-lisp:nil
                         :type
                         (common-lisp:or launch-profile-platform
                                         common-lisp:null)
                         :accessor
                         struct-shape-studio-component-initialization-script-platform
                         :shape "LaunchProfilePlatform" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (run-context :initarg :run-context :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          studio-component-initialization-script-run-context
                          common-lisp:null)
                         :accessor
                         struct-shape-studio-component-initialization-script-run-context
                         :shape "StudioComponentInitializationScriptRunContext"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (script :initarg :script :initform common-lisp:nil
                         :type
                         (common-lisp:or
                          studio-component-initialization-script-content
                          common-lisp:null)
                         :accessor
                         struct-shape-studio-component-initialization-script-script
                         :shape "StudioComponentInitializationScriptContent"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-studio-component-initialization-script
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'studio-component-initialization-script
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'studio-component-initialization-script
                    'make-studio-component-initialization-script))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          studio-component-initialization-script))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          studio-component-initialization-script))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'launch-profile-protocol-version))
      (common-lisp:list
       (common-lisp:cons "launchProfileProtocolVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'platform))
      (common-lisp:list
       (common-lisp:cons "platform"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'run-context))
      (common-lisp:list
       (common-lisp:cons "runContext"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'script))
      (common-lisp:list
       (common-lisp:cons "script"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          studio-component-initialization-script))
   common-lisp:nil))
(common-lisp:deftype studio-component-initialization-script-content ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype studio-component-initialization-script-list ()
   '(trivial-types:proper-list studio-component-initialization-script))
 (common-lisp:defun make-studio-component-initialization-script-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            studio-component-initialization-script))
   aws-sdk/generator/shape::members))
(common-lisp:deftype studio-component-initialization-script-run-context ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype studio-component-list ()
   '(trivial-types:proper-list studio-component))
 (common-lisp:defun make-studio-component-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list studio-component))
   aws-sdk/generator/shape::members))
(common-lisp:deftype studio-component-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype studio-component-script-parameter-key-value-list ()
   '(trivial-types:proper-list script-parameter-key-value))
 (common-lisp:defun make-studio-component-script-parameter-key-value-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            script-parameter-key-value))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype studio-component-security-group-id-list ()
   '(trivial-types:proper-list security-group-id))
 (common-lisp:defun make-studio-component-security-group-id-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list security-group-id))
   aws-sdk/generator/shape::members))
(common-lisp:deftype studio-component-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype studio-component-state-list ()
   '(trivial-types:proper-list studio-component-state))
 (common-lisp:defun make-studio-component-state-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list studio-component-state))
   aws-sdk/generator/shape::members))
(common-lisp:deftype studio-component-status-code () 'common-lisp:string)
(common-lisp:deftype studio-component-subtype () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass studio-component-summary common-lisp:nil
                       ((created-at :initarg :created-at :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-studio-component-summary-created-at
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (created-by :initarg :created-by :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-studio-component-summary-created-by
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or studio-component-description
                                         common-lisp:null)
                         :accessor
                         struct-shape-studio-component-summary-description
                         :shape "StudioComponentDescription" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or studio-component-name
                                         common-lisp:null)
                         :accessor struct-shape-studio-component-summary-name
                         :shape "StudioComponentName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (studio-component-id :initarg :studio-component-id
                         :initform common-lisp:nil :type
                         (common-lisp:or studio-component-id common-lisp:null)
                         :accessor
                         struct-shape-studio-component-summary-studio-component-id
                         :shape "StudioComponentId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (subtype :initarg :subtype :initform common-lisp:nil
                         :type
                         (common-lisp:or studio-component-subtype
                                         common-lisp:null)
                         :accessor
                         struct-shape-studio-component-summary-subtype :shape
                         "StudioComponentSubtype" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or studio-component-type
                                         common-lisp:null)
                         :accessor struct-shape-studio-component-summary-type
                         :shape "StudioComponentType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (updated-at :initarg :updated-at :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-studio-component-summary-updated-at
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (updated-by :initarg :updated-by :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-studio-component-summary-updated-by
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-studio-component-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'studio-component-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'studio-component-summary 'make-studio-component-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          studio-component-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          studio-component-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-by))
      (common-lisp:list
       (common-lisp:cons "createdBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'studio-component-id))
      (common-lisp:list
       (common-lisp:cons "studioComponentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subtype))
      (common-lisp:list
       (common-lisp:cons "subtype"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-by))
      (common-lisp:list
       (common-lisp:cons "updatedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          studio-component-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype studio-component-summary-list ()
   '(trivial-types:proper-list studio-component-summary))
 (common-lisp:defun make-studio-component-summary-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            studio-component-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype studio-component-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype studio-component-type-list ()
   '(trivial-types:proper-list studio-component-type))
 (common-lisp:defun make-studio-component-type-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list studio-component-type))
   aws-sdk/generator/shape::members))
(common-lisp:deftype studio-display-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass studio-encryption-configuration common-lisp:nil
                       ((key-arn :initarg :key-arn :initform common-lisp:nil
                         :type
                         (common-lisp:or
                          studio-encryption-configuration-key-arn
                          common-lisp:null)
                         :accessor
                         struct-shape-studio-encryption-configuration-key-arn
                         :shape "StudioEncryptionConfigurationKeyArn" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (key-type :initarg :key-type :initform
                         (common-lisp:error ":keytype is required") :type
                         (common-lisp:or
                          studio-encryption-configuration-key-type
                          common-lisp:null)
                         :accessor
                         struct-shape-studio-encryption-configuration-key-type
                         :shape "StudioEncryptionConfigurationKeyType"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-studio-encryption-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'studio-encryption-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'studio-encryption-configuration
                    'make-studio-encryption-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          studio-encryption-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          studio-encryption-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-arn))
      (common-lisp:list
       (common-lisp:cons "keyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-type))
      (common-lisp:list
       (common-lisp:cons "keyType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          studio-encryption-configuration))
   common-lisp:nil))
(common-lisp:deftype studio-encryption-configuration-key-arn ()
  'common-lisp:string)
(common-lisp:deftype studio-encryption-configuration-key-type ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype studio-list () '(trivial-types:proper-list studio))
 (common-lisp:defun make-studio-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list studio))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass studio-membership common-lisp:nil
                       ((identity-store-id :initarg :identity-store-id
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-studio-membership-identity-store-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (persona :initarg :persona :initform common-lisp:nil
                         :type (common-lisp:or studio-persona common-lisp:null)
                         :accessor struct-shape-studio-membership-persona
                         :shape "StudioPersona" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (principal-id :initarg :principal-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-studio-membership-principal-id :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (sid :initarg :sid :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-studio-membership-sid :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-studio-membership
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'studio-membership
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'studio-membership 'make-studio-membership))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input studio-membership))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input studio-membership))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identity-store-id))
      (common-lisp:list
       (common-lisp:cons "identityStoreId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'persona))
      (common-lisp:list
       (common-lisp:cons "persona"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'principal-id))
      (common-lisp:list
       (common-lisp:cons "principalId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sid))
      (common-lisp:list
       (common-lisp:cons "sid"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input studio-membership))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype studio-membership-list ()
   '(trivial-types:proper-list studio-membership))
 (common-lisp:defun make-studio-membership-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list studio-membership))
   aws-sdk/generator/shape::members))
(common-lisp:deftype studio-name () 'common-lisp:string)
(common-lisp:deftype studio-persona () 'common-lisp:string)
(common-lisp:deftype studio-state () 'common-lisp:string)
(common-lisp:deftype studio-status-code () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass tag-resource-request common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resourcearn is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-tag-resource-request-resource-arn :shape
                         "String" :location "uri" :location-name "resourceArn")
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         struct-shape-tag-resource-request-tags :shape "Tags"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tag-resource-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'tag-resource-request 'make-tag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass tag-resource-response common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tag-resource-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'tag-resource-response 'make-tag-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype tags () 'common-lisp:hash-table)
 (common-lisp:defun make-tags (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:define-condition throttling-exception
     (nimble-error)
     ((code :initarg :code :initform common-lisp:nil :reader
       throttling-exception-code)
      (context :initarg :context :initform common-lisp:nil :reader
       throttling-exception-context)
      (message :initarg :message :initform common-lisp:nil :reader
       throttling-exception-message)))
 (common-lisp:export
  (common-lisp:list 'throttling-exception 'throttling-exception-code
                    'throttling-exception-context
                    'throttling-exception-message)))
(common-lisp:deftype timestamp () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass untag-resource-request common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resourcearn is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-untag-resource-request-resource-arn
                         :shape "String" :location "uri" :location-name
                         "resourceArn")
                        (tag-keys :initarg :tag-keys :initform
                         (common-lisp:error ":tagkeys is required") :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor struct-shape-untag-resource-request-tag-keys
                         :shape "StringList" :location "querystring"
                         :location-name "tagKeys"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-untag-resource-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'untag-resource-request 'make-untag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass untag-resource-response common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-untag-resource-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'untag-resource-response 'make-untag-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-launch-profile-member-request common-lisp:nil
                       ((client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor
                         struct-shape-update-launch-profile-member-request-client-token
                         :shape "ClientToken" :location "header" :location-name
                         "X-Amz-Client-Token")
                        (launch-profile-id :initarg :launch-profile-id
                         :initform
                         (common-lisp:error ":launchprofileid is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-update-launch-profile-member-request-launch-profile-id
                         :shape "String" :location "uri" :location-name
                         "launchProfileId")
                        (persona :initarg :persona :initform
                         (common-lisp:error ":persona is required") :type
                         (common-lisp:or launch-profile-persona
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-launch-profile-member-request-persona
                         :shape "LaunchProfilePersona" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (principal-id :initarg :principal-id :initform
                         (common-lisp:error ":principalid is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-update-launch-profile-member-request-principal-id
                         :shape "String" :location "uri" :location-name
                         "principalId")
                        (studio-id :initarg :studio-id :initform
                         (common-lisp:error ":studioid is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-update-launch-profile-member-request-studio-id
                         :shape "String" :location "uri" :location-name
                         "studioId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-launch-profile-member-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-launch-profile-member-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-launch-profile-member-request
                    'make-update-launch-profile-member-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-launch-profile-member-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:cons "X-Amz-Client-Token" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-launch-profile-member-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'persona))
      (common-lisp:list
       (common-lisp:cons "persona"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-launch-profile-member-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-launch-profile-member-response common-lisp:nil
                       ((member :initarg :member :initform common-lisp:nil
                         :type
                         (common-lisp:or launch-profile-membership
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-launch-profile-member-response-member
                         :shape "LaunchProfileMembership" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-launch-profile-member-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-launch-profile-member-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-launch-profile-member-response
                    'make-update-launch-profile-member-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-launch-profile-member-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-launch-profile-member-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'member))
      (common-lisp:list
       (common-lisp:cons "member"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-launch-profile-member-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-launch-profile-request common-lisp:nil
                       ((client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor
                         struct-shape-update-launch-profile-request-client-token
                         :shape "ClientToken" :location "header" :location-name
                         "X-Amz-Client-Token")
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or launch-profile-description
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-launch-profile-request-description
                         :shape "LaunchProfileDescription" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (launch-profile-id :initarg :launch-profile-id
                         :initform
                         (common-lisp:error ":launchprofileid is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-update-launch-profile-request-launch-profile-id
                         :shape "String" :location "uri" :location-name
                         "launchProfileId")
                        (launch-profile-protocol-versions :initarg
                         :launch-profile-protocol-versions :initform
                         common-lisp:nil :type
                         (common-lisp:or launch-profile-protocol-version-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-launch-profile-request-launch-profile-protocol-versions
                         :shape "LaunchProfileProtocolVersionList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or launch-profile-name common-lisp:null)
                         :accessor
                         struct-shape-update-launch-profile-request-name :shape
                         "LaunchProfileName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (stream-configuration :initarg :stream-configuration
                         :initform common-lisp:nil :type
                         (common-lisp:or stream-configuration-create
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-launch-profile-request-stream-configuration
                         :shape "StreamConfigurationCreate" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (studio-component-ids :initarg :studio-component-ids
                         :initform common-lisp:nil :type
                         (common-lisp:or
                          launch-profile-studio-component-id-list
                          common-lisp:null)
                         :accessor
                         struct-shape-update-launch-profile-request-studio-component-ids
                         :shape "LaunchProfileStudioComponentIdList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (studio-id :initarg :studio-id :initform
                         (common-lisp:error ":studioid is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-update-launch-profile-request-studio-id
                         :shape "String" :location "uri" :location-name
                         "studioId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-launch-profile-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-launch-profile-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-launch-profile-request
                    'make-update-launch-profile-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-launch-profile-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:cons "X-Amz-Client-Token" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-launch-profile-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'launch-profile-protocol-versions))
      (common-lisp:list
       (common-lisp:cons "launchProfileProtocolVersions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'stream-configuration))
      (common-lisp:list
       (common-lisp:cons "streamConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'studio-component-ids))
      (common-lisp:list
       (common-lisp:cons "studioComponentIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-launch-profile-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-launch-profile-response common-lisp:nil
                       ((launch-profile :initarg :launch-profile :initform
                         common-lisp:nil :type
                         (common-lisp:or launch-profile common-lisp:null)
                         :accessor
                         struct-shape-update-launch-profile-response-launch-profile
                         :shape "LaunchProfile" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-launch-profile-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-launch-profile-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-launch-profile-response
                    'make-update-launch-profile-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-launch-profile-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-launch-profile-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'launch-profile))
      (common-lisp:list
       (common-lisp:cons "launchProfile"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-launch-profile-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-streaming-image-request common-lisp:nil
                       ((client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor
                         struct-shape-update-streaming-image-request-client-token
                         :shape "ClientToken" :location "header" :location-name
                         "X-Amz-Client-Token")
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or streaming-image-description
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-streaming-image-request-description
                         :shape "StreamingImageDescription" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or streaming-image-name common-lisp:null)
                         :accessor
                         struct-shape-update-streaming-image-request-name
                         :shape "StreamingImageName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (streaming-image-id :initarg :streaming-image-id
                         :initform
                         (common-lisp:error ":streamingimageid is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-update-streaming-image-request-streaming-image-id
                         :shape "String" :location "uri" :location-name
                         "streamingImageId")
                        (studio-id :initarg :studio-id :initform
                         (common-lisp:error ":studioid is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-update-streaming-image-request-studio-id
                         :shape "String" :location "uri" :location-name
                         "studioId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-streaming-image-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-streaming-image-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-streaming-image-request
                    'make-update-streaming-image-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-streaming-image-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:cons "X-Amz-Client-Token" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-streaming-image-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-streaming-image-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-streaming-image-response common-lisp:nil
                       ((streaming-image :initarg :streaming-image :initform
                         common-lisp:nil :type
                         (common-lisp:or streaming-image common-lisp:null)
                         :accessor
                         struct-shape-update-streaming-image-response-streaming-image
                         :shape "StreamingImage" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-streaming-image-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-streaming-image-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-streaming-image-response
                    'make-update-streaming-image-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-streaming-image-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-streaming-image-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'streaming-image))
      (common-lisp:list
       (common-lisp:cons "streamingImage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-streaming-image-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-studio-component-request common-lisp:nil
                       ((client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor
                         struct-shape-update-studio-component-request-client-token
                         :shape "ClientToken" :location "header" :location-name
                         "X-Amz-Client-Token")
                        (configuration :initarg :configuration :initform
                         common-lisp:nil :type
                         (common-lisp:or studio-component-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-studio-component-request-configuration
                         :shape "StudioComponentConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or studio-component-description
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-studio-component-request-description
                         :shape "StudioComponentDescription" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (ec2security-group-ids :initarg :ec2security-group-ids
                         :initform common-lisp:nil :type
                         (common-lisp:or
                          studio-component-security-group-id-list
                          common-lisp:null)
                         :accessor
                         struct-shape-update-studio-component-request-ec2security-group-ids
                         :shape "StudioComponentSecurityGroupIdList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (initialization-scripts :initarg
                         :initialization-scripts :initform common-lisp:nil
                         :type
                         (common-lisp:or
                          studio-component-initialization-script-list
                          common-lisp:null)
                         :accessor
                         struct-shape-update-studio-component-request-initialization-scripts
                         :shape "StudioComponentInitializationScriptList"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or studio-component-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-studio-component-request-name
                         :shape "StudioComponentName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (runtime-role-arn :initarg :runtime-role-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or role-arn common-lisp:null) :accessor
                         struct-shape-update-studio-component-request-runtime-role-arn
                         :shape "RoleArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (script-parameters :initarg :script-parameters
                         :initform common-lisp:nil :type
                         (common-lisp:or
                          studio-component-script-parameter-key-value-list
                          common-lisp:null)
                         :accessor
                         struct-shape-update-studio-component-request-script-parameters
                         :shape "StudioComponentScriptParameterKeyValueList"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (secure-initialization-role-arn :initarg
                         :secure-initialization-role-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or role-arn common-lisp:null) :accessor
                         struct-shape-update-studio-component-request-secure-initialization-role-arn
                         :shape "RoleArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (studio-component-id :initarg :studio-component-id
                         :initform
                         (common-lisp:error ":studiocomponentid is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-update-studio-component-request-studio-component-id
                         :shape "String" :location "uri" :location-name
                         "studioComponentId")
                        (studio-id :initarg :studio-id :initform
                         (common-lisp:error ":studioid is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-update-studio-component-request-studio-id
                         :shape "String" :location "uri" :location-name
                         "studioId")
                        (subtype :initarg :subtype :initform common-lisp:nil
                         :type
                         (common-lisp:or studio-component-subtype
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-studio-component-request-subtype
                         :shape "StudioComponentSubtype" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or studio-component-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-studio-component-request-type
                         :shape "StudioComponentType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-studio-component-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-studio-component-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-studio-component-request
                    'make-update-studio-component-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-studio-component-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:cons "X-Amz-Client-Token" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-studio-component-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration))
      (common-lisp:list
       (common-lisp:cons "configuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ec2security-group-ids))
      (common-lisp:list
       (common-lisp:cons "ec2SecurityGroupIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'initialization-scripts))
      (common-lisp:list
       (common-lisp:cons "initializationScripts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'runtime-role-arn))
      (common-lisp:list
       (common-lisp:cons "runtimeRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'script-parameters))
      (common-lisp:list
       (common-lisp:cons "scriptParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'secure-initialization-role-arn))
      (common-lisp:list
       (common-lisp:cons "secureInitializationRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subtype))
      (common-lisp:list
       (common-lisp:cons "subtype"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-studio-component-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-studio-component-response common-lisp:nil
                       ((studio-component :initarg :studio-component :initform
                         common-lisp:nil :type
                         (common-lisp:or studio-component common-lisp:null)
                         :accessor
                         struct-shape-update-studio-component-response-studio-component
                         :shape "StudioComponent" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-studio-component-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-studio-component-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-studio-component-response
                    'make-update-studio-component-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-studio-component-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-studio-component-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'studio-component))
      (common-lisp:list
       (common-lisp:cons "studioComponent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-studio-component-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-studio-request common-lisp:nil
                       ((admin-role-arn :initarg :admin-role-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or role-arn common-lisp:null) :accessor
                         struct-shape-update-studio-request-admin-role-arn
                         :shape "RoleArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor
                         struct-shape-update-studio-request-client-token :shape
                         "ClientToken" :location "header" :location-name
                         "X-Amz-Client-Token")
                        (display-name :initarg :display-name :initform
                         common-lisp:nil :type
                         (common-lisp:or studio-display-name common-lisp:null)
                         :accessor
                         struct-shape-update-studio-request-display-name :shape
                         "StudioDisplayName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (studio-id :initarg :studio-id :initform
                         (common-lisp:error ":studioid is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-update-studio-request-studio-id :shape
                         "String" :location "uri" :location-name "studioId")
                        (user-role-arn :initarg :user-role-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or role-arn common-lisp:null) :accessor
                         struct-shape-update-studio-request-user-role-arn
                         :shape "RoleArn" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-studio-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-studio-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-studio-request 'make-update-studio-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-studio-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:cons "X-Amz-Client-Token" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-studio-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'admin-role-arn))
      (common-lisp:list
       (common-lisp:cons "adminRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-name))
      (common-lisp:list
       (common-lisp:cons "displayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-role-arn))
      (common-lisp:list
       (common-lisp:cons "userRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-studio-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-studio-response common-lisp:nil
                       ((studio :initarg :studio :initform
                         (common-lisp:error ":studio is required") :type
                         (common-lisp:or studio common-lisp:null) :accessor
                         struct-shape-update-studio-response-studio :shape
                         "Studio" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-studio-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-studio-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-studio-response 'make-update-studio-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-studio-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-studio-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'studio))
      (common-lisp:list
       (common-lisp:cons "studio"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-studio-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition validation-exception
     (nimble-error)
     ((code :initarg :code :initform common-lisp:nil :reader
       validation-exception-code)
      (context :initarg :context :initform common-lisp:nil :reader
       validation-exception-context)
      (message :initarg :message :initform common-lisp:nil :reader
       validation-exception-message)))
 (common-lisp:export
  (common-lisp:list 'validation-exception 'validation-exception-code
                    'validation-exception-context
                    'validation-exception-message)))
(common-lisp:progn
 (common-lisp:defclass validation-result common-lisp:nil
                       ((state :initarg :state :initform
                         (common-lisp:error ":state is required") :type
                         (common-lisp:or launch-profile-validation-state
                                         common-lisp:null)
                         :accessor struct-shape-validation-result-state :shape
                         "LaunchProfileValidationState" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (status-code :initarg :status-code :initform
                         (common-lisp:error ":statuscode is required") :type
                         (common-lisp:or launch-profile-validation-status-code
                                         common-lisp:null)
                         :accessor struct-shape-validation-result-status-code
                         :shape "LaunchProfileValidationStatusCode" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (status-message :initarg :status-message :initform
                         (common-lisp:error ":statusmessage is required") :type
                         (common-lisp:or
                          launch-profile-validation-status-message
                          common-lisp:null)
                         :accessor
                         struct-shape-validation-result-status-message :shape
                         "LaunchProfileValidationStatusMessage" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (type :initarg :type :initform
                         (common-lisp:error ":type is required") :type
                         (common-lisp:or launch-profile-validation-type
                                         common-lisp:null)
                         :accessor struct-shape-validation-result-type :shape
                         "LaunchProfileValidationType" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-validation-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'validation-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'validation-result 'make-validation-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input validation-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input validation-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "state"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-code))
      (common-lisp:list
       (common-lisp:cons "statusCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-message))
      (common-lisp:list
       (common-lisp:cons "statusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input validation-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype validation-results ()
   '(trivial-types:proper-list validation-result))
 (common-lisp:defun make-validation-results
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list validation-result))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass volume-configuration common-lisp:nil
                       ((iops :initarg :iops :initform common-lisp:nil :type
                         (common-lisp:or volume-iops common-lisp:null)
                         :accessor struct-shape-volume-configuration-iops
                         :shape "VolumeIops" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (size :initarg :size :initform common-lisp:nil :type
                         (common-lisp:or volume-size-in-gi-b common-lisp:null)
                         :accessor struct-shape-volume-configuration-size
                         :shape "VolumeSizeInGiB" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (throughput :initarg :throughput :initform
                         common-lisp:nil :type
                         (common-lisp:or volume-throughput-in-mi-bs
                                         common-lisp:null)
                         :accessor struct-shape-volume-configuration-throughput
                         :shape "VolumeThroughputInMiBs" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-volume-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'volume-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'volume-configuration 'make-volume-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input volume-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input volume-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iops))
      (common-lisp:list
       (common-lisp:cons "iops"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'size))
      (common-lisp:list
       (common-lisp:cons "size"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'throughput))
      (common-lisp:list
       (common-lisp:cons "throughput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input volume-configuration))
   common-lisp:nil))
(common-lisp:deftype volume-iops () 'common-lisp:integer)
(common-lisp:deftype volume-retention-mode () 'common-lisp:string)
(common-lisp:deftype volume-size-in-gi-b () 'common-lisp:integer)
(common-lisp:deftype volume-throughput-in-mi-bs () 'common-lisp:integer)
(common-lisp:deftype windows-mount-drive () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defun accept-eulas
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token eula-ids studio-id)
   (common-lisp:declare
    (common-lisp:ignorable client-token eula-ids studio-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-accept-eulas-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'nimble-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-08-01/studios/~A/eula-acceptances"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'studio-id))))
                                                        "AcceptEulas"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'accept-eulas))
(common-lisp:progn
 (common-lisp:defun create-launch-profile
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token description ec2subnet-ids
                     launch-profile-protocol-versions name stream-configuration
                     studio-component-ids studio-id tags)
   (common-lisp:declare
    (common-lisp:ignorable client-token description ec2subnet-ids
     launch-profile-protocol-versions name stream-configuration
     studio-component-ids studio-id tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-launch-profile-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'nimble-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-08-01/studios/~A/launch-profiles"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'studio-id))))
                                                        "CreateLaunchProfile"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-launch-profile))
(common-lisp:progn
 (common-lisp:defun create-streaming-image
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token description ec2image-id name
                     studio-id tags)
   (common-lisp:declare
    (common-lisp:ignorable client-token description ec2image-id name studio-id
     tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-streaming-image-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'nimble-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-08-01/studios/~A/streaming-images"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'studio-id))))
                                                        "CreateStreamingImage"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-streaming-image))
(common-lisp:progn
 (common-lisp:defun create-streaming-session
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token ec2instance-type
                     launch-profile-id owned-by streaming-image-id studio-id
                     tags)
   (common-lisp:declare
    (common-lisp:ignorable client-token ec2instance-type launch-profile-id
     owned-by streaming-image-id studio-id tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-streaming-session-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'nimble-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-08-01/studios/~A/streaming-sessions"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'studio-id))))
                                                        "CreateStreamingSession"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-streaming-session))
(common-lisp:progn
 (common-lisp:defun create-streaming-session-stream
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token expiration-in-seconds
                     session-id studio-id)
   (common-lisp:declare
    (common-lisp:ignorable client-token expiration-in-seconds session-id
     studio-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-streaming-session-stream-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'nimble-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-08-01/studios/~A/streaming-sessions/~A/streams"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'studio-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'session-id))))
                                                        "CreateStreamingSessionStream"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-streaming-session-stream))
(common-lisp:progn
 (common-lisp:defun create-studio
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key admin-role-arn client-token display-name
                     studio-encryption-configuration studio-name tags
                     user-role-arn)
   (common-lisp:declare
    (common-lisp:ignorable admin-role-arn client-token display-name
     studio-encryption-configuration studio-name tags user-role-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-studio-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'nimble-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/2020-08-01/studios"
                                                        "CreateStudio"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-studio))
(common-lisp:progn
 (common-lisp:defun create-studio-component
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token configuration description
                     ec2security-group-ids initialization-scripts name
                     runtime-role-arn script-parameters
                     secure-initialization-role-arn studio-id subtype tags
                     type)
   (common-lisp:declare
    (common-lisp:ignorable client-token configuration description
     ec2security-group-ids initialization-scripts name runtime-role-arn
     script-parameters secure-initialization-role-arn studio-id subtype tags
     type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-studio-component-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'nimble-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-08-01/studios/~A/studio-components"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'studio-id))))
                                                        "CreateStudioComponent"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-studio-component))
(common-lisp:progn
 (common-lisp:defun delete-launch-profile
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token launch-profile-id studio-id)
   (common-lisp:declare
    (common-lisp:ignorable client-token launch-profile-id studio-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-launch-profile-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'nimble-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-08-01/studios/~A/launch-profiles/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'studio-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'launch-profile-id))))
                                                        "DeleteLaunchProfile"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-launch-profile))
(common-lisp:progn
 (common-lisp:defun delete-launch-profile-member
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token launch-profile-id
                     principal-id studio-id)
   (common-lisp:declare
    (common-lisp:ignorable client-token launch-profile-id principal-id
     studio-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-launch-profile-member-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'nimble-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-08-01/studios/~A/launch-profiles/~A/membership/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'studio-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'launch-profile-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'principal-id))))
                                                        "DeleteLaunchProfileMember"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-launch-profile-member))
(common-lisp:progn
 (common-lisp:defun delete-streaming-image
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token streaming-image-id
                     studio-id)
   (common-lisp:declare
    (common-lisp:ignorable client-token streaming-image-id studio-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-streaming-image-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'nimble-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-08-01/studios/~A/streaming-images/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'studio-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'streaming-image-id))))
                                                        "DeleteStreamingImage"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-streaming-image))
(common-lisp:progn
 (common-lisp:defun delete-streaming-session
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token session-id studio-id)
   (common-lisp:declare
    (common-lisp:ignorable client-token session-id studio-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-streaming-session-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'nimble-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-08-01/studios/~A/streaming-sessions/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'studio-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'session-id))))
                                                        "DeleteStreamingSession"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-streaming-session))
(common-lisp:progn
 (common-lisp:defun delete-studio
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token studio-id)
   (common-lisp:declare (common-lisp:ignorable client-token studio-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-studio-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'nimble-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-08-01/studios/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'studio-id))))
                                                        "DeleteStudio"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-studio))
(common-lisp:progn
 (common-lisp:defun delete-studio-component
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token studio-component-id
                     studio-id)
   (common-lisp:declare
    (common-lisp:ignorable client-token studio-component-id studio-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-studio-component-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'nimble-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-08-01/studios/~A/studio-components/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'studio-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'studio-component-id))))
                                                        "DeleteStudioComponent"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-studio-component))
(common-lisp:progn
 (common-lisp:defun delete-studio-member
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token principal-id studio-id)
   (common-lisp:declare
    (common-lisp:ignorable client-token principal-id studio-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-studio-member-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'nimble-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-08-01/studios/~A/membership/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'studio-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'principal-id))))
                                                        "DeleteStudioMember"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-studio-member))
(common-lisp:progn
 (common-lisp:defun get-eula
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key eula-id)
   (common-lisp:declare (common-lisp:ignorable eula-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-eula-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'nimble-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-08-01/eulas/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'eula-id))))
                                                        "GetEula"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-eula))
(common-lisp:progn
 (common-lisp:defun get-launch-profile
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key launch-profile-id studio-id)
   (common-lisp:declare (common-lisp:ignorable launch-profile-id studio-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-launch-profile-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'nimble-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-08-01/studios/~A/launch-profiles/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'studio-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'launch-profile-id))))
                                                        "GetLaunchProfile"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-launch-profile))
(common-lisp:progn
 (common-lisp:defun get-launch-profile-details
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key launch-profile-id studio-id)
   (common-lisp:declare (common-lisp:ignorable launch-profile-id studio-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-launch-profile-details-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'nimble-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-08-01/studios/~A/launch-profiles/~A/details"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'studio-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'launch-profile-id))))
                                                        "GetLaunchProfileDetails"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-launch-profile-details))
(common-lisp:progn
 (common-lisp:defun get-launch-profile-initialization
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key launch-profile-id
                     launch-profile-protocol-versions launch-purpose platform
                     studio-id)
   (common-lisp:declare
    (common-lisp:ignorable launch-profile-id launch-profile-protocol-versions
     launch-purpose platform studio-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-launch-profile-initialization-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'nimble-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-08-01/studios/~A/launch-profiles/~A/init"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'studio-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'launch-profile-id))))
                                                        "GetLaunchProfileInitialization"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-launch-profile-initialization))
(common-lisp:progn
 (common-lisp:defun get-launch-profile-member
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key launch-profile-id principal-id studio-id)
   (common-lisp:declare
    (common-lisp:ignorable launch-profile-id principal-id studio-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-launch-profile-member-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'nimble-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-08-01/studios/~A/launch-profiles/~A/membership/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'studio-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'launch-profile-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'principal-id))))
                                                        "GetLaunchProfileMember"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-launch-profile-member))
(common-lisp:progn
 (common-lisp:defun get-streaming-image
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key streaming-image-id studio-id)
   (common-lisp:declare (common-lisp:ignorable streaming-image-id studio-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-streaming-image-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'nimble-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-08-01/studios/~A/streaming-images/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'studio-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'streaming-image-id))))
                                                        "GetStreamingImage"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-streaming-image))
(common-lisp:progn
 (common-lisp:defun get-streaming-session
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key session-id studio-id)
   (common-lisp:declare (common-lisp:ignorable session-id studio-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-streaming-session-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'nimble-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-08-01/studios/~A/streaming-sessions/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'studio-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'session-id))))
                                                        "GetStreamingSession"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-streaming-session))
(common-lisp:progn
 (common-lisp:defun get-streaming-session-backup
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key backup-id studio-id)
   (common-lisp:declare (common-lisp:ignorable backup-id studio-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-streaming-session-backup-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'nimble-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-08-01/studios/~A/streaming-session-backups/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'studio-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'backup-id))))
                                                        "GetStreamingSessionBackup"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-streaming-session-backup))
(common-lisp:progn
 (common-lisp:defun get-streaming-session-stream
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key session-id stream-id studio-id)
   (common-lisp:declare (common-lisp:ignorable session-id stream-id studio-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-streaming-session-stream-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'nimble-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-08-01/studios/~A/streaming-sessions/~A/streams/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'studio-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'session-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'stream-id))))
                                                        "GetStreamingSessionStream"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-streaming-session-stream))
(common-lisp:progn
 (common-lisp:defun get-studio
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key studio-id)
   (common-lisp:declare (common-lisp:ignorable studio-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-studio-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'nimble-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-08-01/studios/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'studio-id))))
                                                        "GetStudio"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-studio))
(common-lisp:progn
 (common-lisp:defun get-studio-component
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key studio-component-id studio-id)
   (common-lisp:declare (common-lisp:ignorable studio-component-id studio-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-studio-component-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'nimble-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-08-01/studios/~A/studio-components/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'studio-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'studio-component-id))))
                                                        "GetStudioComponent"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-studio-component))
(common-lisp:progn
 (common-lisp:defun get-studio-member
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key principal-id studio-id)
   (common-lisp:declare (common-lisp:ignorable principal-id studio-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-studio-member-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'nimble-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-08-01/studios/~A/membership/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'studio-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'principal-id))))
                                                        "GetStudioMember"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-studio-member))
(common-lisp:progn
 (common-lisp:defun list-eula-acceptances
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key eula-ids next-token studio-id)
   (common-lisp:declare (common-lisp:ignorable eula-ids next-token studio-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-eula-acceptances-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'nimble-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-08-01/studios/~A/eula-acceptances"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'studio-id))))
                                                        "ListEulaAcceptances"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-eula-acceptances))
(common-lisp:progn
 (common-lisp:defun list-eulas
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key eula-ids next-token)
   (common-lisp:declare (common-lisp:ignorable eula-ids next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-eulas-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'nimble-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        "/2020-08-01/eulas"
                                                        "ListEulas"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-eulas))
(common-lisp:progn
 (common-lisp:defun list-launch-profile-members
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key launch-profile-id max-results next-token
                     studio-id)
   (common-lisp:declare
    (common-lisp:ignorable launch-profile-id max-results next-token studio-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-launch-profile-members-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'nimble-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-08-01/studios/~A/launch-profiles/~A/membership"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'studio-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'launch-profile-id))))
                                                        "ListLaunchProfileMembers"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-launch-profile-members))
(common-lisp:progn
 (common-lisp:defun list-launch-profiles
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token principal-id
                     states studio-id)
   (common-lisp:declare
    (common-lisp:ignorable max-results next-token principal-id states
     studio-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-launch-profiles-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'nimble-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-08-01/studios/~A/launch-profiles"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'studio-id))))
                                                        "ListLaunchProfiles"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-launch-profiles))
(common-lisp:progn
 (common-lisp:defun list-streaming-images
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token owner studio-id)
   (common-lisp:declare (common-lisp:ignorable next-token owner studio-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-streaming-images-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'nimble-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-08-01/studios/~A/streaming-images"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'studio-id))))
                                                        "ListStreamingImages"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-streaming-images))
(common-lisp:progn
 (common-lisp:defun list-streaming-session-backups
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token owned-by studio-id)
   (common-lisp:declare (common-lisp:ignorable next-token owned-by studio-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-streaming-session-backups-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'nimble-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-08-01/studios/~A/streaming-session-backups"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'studio-id))))
                                                        "ListStreamingSessionBackups"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-streaming-session-backups))
(common-lisp:progn
 (common-lisp:defun list-streaming-sessions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key created-by next-token owned-by
                     session-ids studio-id)
   (common-lisp:declare
    (common-lisp:ignorable created-by next-token owned-by session-ids
     studio-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-streaming-sessions-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'nimble-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-08-01/studios/~A/streaming-sessions"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'studio-id))))
                                                        "ListStreamingSessions"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-streaming-sessions))
(common-lisp:progn
 (common-lisp:defun list-studio-components
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token states studio-id
                     types)
   (common-lisp:declare
    (common-lisp:ignorable max-results next-token states studio-id types))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-studio-components-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'nimble-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-08-01/studios/~A/studio-components"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'studio-id))))
                                                        "ListStudioComponents"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-studio-components))
(common-lisp:progn
 (common-lisp:defun list-studio-members
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token studio-id)
   (common-lisp:declare
    (common-lisp:ignorable max-results next-token studio-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-studio-members-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'nimble-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-08-01/studios/~A/membership"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'studio-id))))
                                                        "ListStudioMembers"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-studio-members))
(common-lisp:progn
 (common-lisp:defun list-studios
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token)
   (common-lisp:declare (common-lisp:ignorable next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-studios-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'nimble-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        "/2020-08-01/studios"
                                                        "ListStudios"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-studios))
(common-lisp:progn
 (common-lisp:defun list-tags-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn)
   (common-lisp:declare (common-lisp:ignorable resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-for-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'nimble-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-08-01/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "ListTagsForResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-tags-for-resource))
(common-lisp:progn
 (common-lisp:defun put-launch-profile-members
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token identity-store-id
                     launch-profile-id members studio-id)
   (common-lisp:declare
    (common-lisp:ignorable client-token identity-store-id launch-profile-id
     members studio-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-put-launch-profile-members-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'nimble-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-08-01/studios/~A/launch-profiles/~A/membership"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'studio-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'launch-profile-id))))
                                                        "PutLaunchProfileMembers"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'put-launch-profile-members))
(common-lisp:progn
 (common-lisp:defun put-studio-members
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token identity-store-id members
                     studio-id)
   (common-lisp:declare
    (common-lisp:ignorable client-token identity-store-id members studio-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-studio-members-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'nimble-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-08-01/studios/~A/membership"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'studio-id))))
                                                        "PutStudioMembers"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'put-studio-members))
(common-lisp:progn
 (common-lisp:defun start-streaming-session
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key backup-id client-token session-id
                     studio-id)
   (common-lisp:declare
    (common-lisp:ignorable backup-id client-token session-id studio-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-start-streaming-session-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'nimble-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-08-01/studios/~A/streaming-sessions/~A/start"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'studio-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'session-id))))
                                                        "StartStreamingSession"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'start-streaming-session))
(common-lisp:progn
 (common-lisp:defun start-studio-ssoconfiguration-repair
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token studio-id)
   (common-lisp:declare (common-lisp:ignorable client-token studio-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-start-studio-ssoconfiguration-repair-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'nimble-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-08-01/studios/~A/sso-configuration"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'studio-id))))
                                                        "StartStudioSSOConfigurationRepair"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'start-studio-ssoconfiguration-repair))
(common-lisp:progn
 (common-lisp:defun stop-streaming-session
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token session-id studio-id
                     volume-retention-mode)
   (common-lisp:declare
    (common-lisp:ignorable client-token session-id studio-id
     volume-retention-mode))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-stop-streaming-session-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'nimble-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-08-01/studios/~A/streaming-sessions/~A/stop"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'studio-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'session-id))))
                                                        "StopStreamingSession"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'stop-streaming-session))
(common-lisp:progn
 (common-lisp:defun tag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tags)
   (common-lisp:declare (common-lisp:ignorable resource-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'nimble-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-08-01/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "TagResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'tag-resource))
(common-lisp:progn
 (common-lisp:defun untag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tag-keys)
   (common-lisp:declare (common-lisp:ignorable resource-arn tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'nimble-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-08-01/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "UntagResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'untag-resource))
(common-lisp:progn
 (common-lisp:defun update-launch-profile
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token description
                     launch-profile-id launch-profile-protocol-versions name
                     stream-configuration studio-component-ids studio-id)
   (common-lisp:declare
    (common-lisp:ignorable client-token description launch-profile-id
     launch-profile-protocol-versions name stream-configuration
     studio-component-ids studio-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-launch-profile-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'nimble-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-08-01/studios/~A/launch-profiles/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'studio-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'launch-profile-id))))
                                                        "UpdateLaunchProfile"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-launch-profile))
(common-lisp:progn
 (common-lisp:defun update-launch-profile-member
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token launch-profile-id persona
                     principal-id studio-id)
   (common-lisp:declare
    (common-lisp:ignorable client-token launch-profile-id persona principal-id
     studio-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-launch-profile-member-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'nimble-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-08-01/studios/~A/launch-profiles/~A/membership/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'studio-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'launch-profile-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'principal-id))))
                                                        "UpdateLaunchProfileMember"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-launch-profile-member))
(common-lisp:progn
 (common-lisp:defun update-streaming-image
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token description name
                     streaming-image-id studio-id)
   (common-lisp:declare
    (common-lisp:ignorable client-token description name streaming-image-id
     studio-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-streaming-image-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'nimble-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-08-01/studios/~A/streaming-images/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'studio-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'streaming-image-id))))
                                                        "UpdateStreamingImage"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-streaming-image))
(common-lisp:progn
 (common-lisp:defun update-studio
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key admin-role-arn client-token display-name
                     studio-id user-role-arn)
   (common-lisp:declare
    (common-lisp:ignorable admin-role-arn client-token display-name studio-id
     user-role-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-studio-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'nimble-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-08-01/studios/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'studio-id))))
                                                        "UpdateStudio"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-studio))
(common-lisp:progn
 (common-lisp:defun update-studio-component
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token configuration description
                     ec2security-group-ids initialization-scripts name
                     runtime-role-arn script-parameters
                     secure-initialization-role-arn studio-component-id
                     studio-id subtype type)
   (common-lisp:declare
    (common-lisp:ignorable client-token configuration description
     ec2security-group-ids initialization-scripts name runtime-role-arn
     script-parameters secure-initialization-role-arn studio-component-id
     studio-id subtype type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-studio-component-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'nimble-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-08-01/studios/~A/studio-components/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'studio-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'studio-component-id))))
                                                        "UpdateStudioComponent"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-studio-component))
