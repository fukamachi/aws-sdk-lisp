;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(uiop/package:define-package #:aws-sdk/services/customer-profiles/api (:use)
                             (:nicknames #:aws/customer-profiles)
                             (:import-from #:aws-sdk/generator/shape)
                             (:import-from #:aws-sdk/generator/operation)
                             (:import-from #:aws-sdk/api)
                             (:import-from #:aws-sdk/request)
                             (:import-from #:aws-sdk/json-request)
                             (:import-from #:aws-sdk/rest-json-request)
                             (:import-from #:aws-sdk/rest-xml-request)
                             (:import-from #:aws-sdk/query-request)
                             (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/customer-profiles/api)
(common-lisp:progn
 (common-lisp:define-condition customer-profiles-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'customer-profiles-error))
(common-lisp:progn
 (common-lisp:defclass customer-profiles-request
                       (aws-sdk/generator/service::rest-json-request)
                       common-lisp:nil
                       (:default-initargs :service "customer-profiles"
                        :api-version "2020-08-15" :host-prefix "profile"
                        :signing-name "profile" :global-host common-lisp:nil))
 (common-lisp:export 'customer-profiles-request))
(common-lisp:defvar *error-map*
  '(("AccessDeniedException" . access-denied-exception)
    ("BadRequestException" . bad-request-exception)
    ("InternalServerException" . internal-server-exception)
    ("ResourceNotFoundException" . resource-not-found-exception)
    ("ThrottlingException" . throttling-exception)))
(common-lisp:deftype |name| () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition access-denied-exception
     (customer-profiles-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       access-denied-exception-message)))
 (common-lisp:export
  (common-lisp:list 'access-denied-exception 'access-denied-exception-message)))
(common-lisp:progn
 (common-lisp:defclass add-profile-key-request common-lisp:nil
                       ((profile-id :initarg :profile-id :initform
                         (common-lisp:error ":profile-id is required") :type
                         (common-lisp:or |uuid| common-lisp:null) :accessor
                         struct-shape-add-profile-key-request-profile-id :shape
                         "uuid" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (key-name :initarg :key-name :initform
                         (common-lisp:error ":key-name is required") :type
                         (common-lisp:or |name| common-lisp:null) :accessor
                         struct-shape-add-profile-key-request-key-name :shape
                         "name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (values :initarg :values :initform
                         (common-lisp:error ":values is required") :type
                         (common-lisp:or |requestValueList| common-lisp:null)
                         :accessor struct-shape-add-profile-key-request-values
                         :shape "requestValueList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (domain-name :initarg :domain-name :initform
                         (common-lisp:error ":domain-name is required") :type
                         (common-lisp:or |name| common-lisp:null) :accessor
                         struct-shape-add-profile-key-request-domain-name
                         :shape "name" :location "uri" :location-name
                         "DomainName"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-add-profile-key-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'add-profile-key-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'add-profile-key-request 'make-add-profile-key-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          add-profile-key-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          add-profile-key-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'profile-id))
      (common-lisp:list
       (common-lisp:cons "ProfileId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-name))
      (common-lisp:list
       (common-lisp:cons "KeyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "Values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          add-profile-key-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass add-profile-key-response common-lisp:nil
                       ((key-name :initarg :key-name :initform common-lisp:nil
                         :type (common-lisp:or |name| common-lisp:null)
                         :accessor
                         struct-shape-add-profile-key-response-key-name :shape
                         "name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (values :initarg :values :initform common-lisp:nil
                         :type
                         (common-lisp:or |requestValueList| common-lisp:null)
                         :accessor struct-shape-add-profile-key-response-values
                         :shape "requestValueList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-add-profile-key-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'add-profile-key-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'add-profile-key-response 'make-add-profile-key-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          add-profile-key-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          add-profile-key-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-name))
      (common-lisp:list
       (common-lisp:cons "KeyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "Values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          add-profile-key-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass additional-search-key common-lisp:nil
                       ((key-name :initarg :key-name :initform
                         (common-lisp:error ":key-name is required") :type
                         (common-lisp:or |name| common-lisp:null) :accessor
                         struct-shape-additional-search-key-key-name :shape
                         "name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (values :initarg :values :initform
                         (common-lisp:error ":values is required") :type
                         (common-lisp:or |requestValueList| common-lisp:null)
                         :accessor struct-shape-additional-search-key-values
                         :shape "requestValueList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-additional-search-key
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'additional-search-key
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'additional-search-key 'make-additional-search-key))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          additional-search-key))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          additional-search-key))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-name))
      (common-lisp:list
       (common-lisp:cons "KeyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "Values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          additional-search-key))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass address common-lisp:nil
                       ((address1 :initarg :address1 :initform common-lisp:nil
                         :type (common-lisp:or |string1To255| common-lisp:null)
                         :accessor struct-shape-address-address1 :shape
                         "string1To255" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (address2 :initarg :address2 :initform common-lisp:nil
                         :type (common-lisp:or |string1To255| common-lisp:null)
                         :accessor struct-shape-address-address2 :shape
                         "string1To255" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (address3 :initarg :address3 :initform common-lisp:nil
                         :type (common-lisp:or |string1To255| common-lisp:null)
                         :accessor struct-shape-address-address3 :shape
                         "string1To255" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (address4 :initarg :address4 :initform common-lisp:nil
                         :type (common-lisp:or |string1To255| common-lisp:null)
                         :accessor struct-shape-address-address4 :shape
                         "string1To255" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (city :initarg :city :initform common-lisp:nil :type
                         (common-lisp:or |string1To255| common-lisp:null)
                         :accessor struct-shape-address-city :shape
                         "string1To255" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (county :initarg :county :initform common-lisp:nil
                         :type (common-lisp:or |string1To255| common-lisp:null)
                         :accessor struct-shape-address-county :shape
                         "string1To255" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (state :initarg :state :initform common-lisp:nil :type
                         (common-lisp:or |string1To255| common-lisp:null)
                         :accessor struct-shape-address-state :shape
                         "string1To255" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (province :initarg :province :initform common-lisp:nil
                         :type (common-lisp:or |string1To255| common-lisp:null)
                         :accessor struct-shape-address-province :shape
                         "string1To255" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (country :initarg :country :initform common-lisp:nil
                         :type (common-lisp:or |string1To255| common-lisp:null)
                         :accessor struct-shape-address-country :shape
                         "string1To255" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (postal-code :initarg :postal-code :initform
                         common-lisp:nil :type
                         (common-lisp:or |string1To255| common-lisp:null)
                         :accessor struct-shape-address-postal-code :shape
                         "string1To255" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-address
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'address
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'address 'make-address))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input address))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input address))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'address1))
      (common-lisp:list
       (common-lisp:cons "Address1"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'address2))
      (common-lisp:list
       (common-lisp:cons "Address2"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'address3))
      (common-lisp:list
       (common-lisp:cons "Address3"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'address4))
      (common-lisp:list
       (common-lisp:cons "Address4"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'city))
      (common-lisp:list
       (common-lisp:cons "City"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'county))
      (common-lisp:list
       (common-lisp:cons "County"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'province))
      (common-lisp:list
       (common-lisp:cons "Province"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'country))
      (common-lisp:list
       (common-lisp:cons "Country"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'postal-code))
      (common-lisp:list
       (common-lisp:cons "PostalCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input address))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype address-list ()
   '(trivial-types:proper-list |string1To255|))
 (common-lisp:defun make-address-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list |string1To255|))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass appflow-integration common-lisp:nil
                       ((flow-definition :initarg :flow-definition :initform
                         (common-lisp:error ":flow-definition is required")
                         :type
                         (common-lisp:or flow-definition common-lisp:null)
                         :accessor
                         struct-shape-appflow-integration-flow-definition
                         :shape "FlowDefinition" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (batches :initarg :batches :initform common-lisp:nil
                         :type (common-lisp:or batches common-lisp:null)
                         :accessor struct-shape-appflow-integration-batches
                         :shape "Batches" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-appflow-integration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'appflow-integration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'appflow-integration 'make-appflow-integration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input appflow-integration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input appflow-integration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'flow-definition))
      (common-lisp:list
       (common-lisp:cons "FlowDefinition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'batches))
      (common-lisp:list
       (common-lisp:cons "Batches"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input appflow-integration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass appflow-integration-workflow-attributes common-lisp:nil
                       ((source-connector-type :initarg :source-connector-type
                         :initform
                         (common-lisp:error
                          ":source-connector-type is required")
                         :type
                         (common-lisp:or source-connector-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-appflow-integration-workflow-attributes-source-connector-type
                         :shape "SourceConnectorType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (connector-profile-name :initarg
                         :connector-profile-name :initform
                         (common-lisp:error
                          ":connector-profile-name is required")
                         :type
                         (common-lisp:or connector-profile-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-appflow-integration-workflow-attributes-connector-profile-name
                         :shape "ConnectorProfileName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (role-arn :initarg :role-arn :initform common-lisp:nil
                         :type (common-lisp:or |string1To255| common-lisp:null)
                         :accessor
                         struct-shape-appflow-integration-workflow-attributes-role-arn
                         :shape "string1To255" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-appflow-integration-workflow-attributes
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'appflow-integration-workflow-attributes
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'appflow-integration-workflow-attributes
                    'make-appflow-integration-workflow-attributes))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          appflow-integration-workflow-attributes))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          appflow-integration-workflow-attributes))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-connector-type))
      (common-lisp:list
       (common-lisp:cons "SourceConnectorType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'connector-profile-name))
      (common-lisp:list
       (common-lisp:cons "ConnectorProfileName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          appflow-integration-workflow-attributes))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass appflow-integration-workflow-metrics common-lisp:nil
                       ((records-processed :initarg :records-processed
                         :initform
                         (common-lisp:error ":records-processed is required")
                         :type
                         (common-lisp:or common-lisp:integer common-lisp:null)
                         :accessor
                         struct-shape-appflow-integration-workflow-metrics-records-processed
                         :shape "long" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (steps-completed :initarg :steps-completed :initform
                         (common-lisp:error ":steps-completed is required")
                         :type
                         (common-lisp:or common-lisp:integer common-lisp:null)
                         :accessor
                         struct-shape-appflow-integration-workflow-metrics-steps-completed
                         :shape "long" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (total-steps :initarg :total-steps :initform
                         (common-lisp:error ":total-steps is required") :type
                         (common-lisp:or common-lisp:integer common-lisp:null)
                         :accessor
                         struct-shape-appflow-integration-workflow-metrics-total-steps
                         :shape "long" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-appflow-integration-workflow-metrics
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'appflow-integration-workflow-metrics
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'appflow-integration-workflow-metrics
                    'make-appflow-integration-workflow-metrics))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          appflow-integration-workflow-metrics))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          appflow-integration-workflow-metrics))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'records-processed))
      (common-lisp:list
       (common-lisp:cons "RecordsProcessed"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'steps-completed))
      (common-lisp:list
       (common-lisp:cons "StepsCompleted"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total-steps))
      (common-lisp:list
       (common-lisp:cons "TotalSteps"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          appflow-integration-workflow-metrics))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass appflow-integration-workflow-step common-lisp:nil
                       ((flow-name :initarg :flow-name :initform
                         (common-lisp:error ":flow-name is required") :type
                         (common-lisp:or flow-name common-lisp:null) :accessor
                         struct-shape-appflow-integration-workflow-step-flow-name
                         :shape "FlowName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform
                         (common-lisp:error ":status is required") :type
                         (common-lisp:or status common-lisp:null) :accessor
                         struct-shape-appflow-integration-workflow-step-status
                         :shape "Status" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (execution-message :initarg :execution-message
                         :initform
                         (common-lisp:error ":execution-message is required")
                         :type (common-lisp:or |string1To255| common-lisp:null)
                         :accessor
                         struct-shape-appflow-integration-workflow-step-execution-message
                         :shape "string1To255" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (records-processed :initarg :records-processed
                         :initform
                         (common-lisp:error ":records-processed is required")
                         :type
                         (common-lisp:or common-lisp:integer common-lisp:null)
                         :accessor
                         struct-shape-appflow-integration-workflow-step-records-processed
                         :shape "long" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (batch-records-start-time :initarg
                         :batch-records-start-time :initform
                         (common-lisp:error
                          ":batch-records-start-time is required")
                         :type (common-lisp:or |string1To255| common-lisp:null)
                         :accessor
                         struct-shape-appflow-integration-workflow-step-batch-records-start-time
                         :shape "string1To255" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (batch-records-end-time :initarg
                         :batch-records-end-time :initform
                         (common-lisp:error
                          ":batch-records-end-time is required")
                         :type (common-lisp:or |string1To255| common-lisp:null)
                         :accessor
                         struct-shape-appflow-integration-workflow-step-batch-records-end-time
                         :shape "string1To255" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (created-at :initarg :created-at :initform
                         (common-lisp:error ":created-at is required") :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         struct-shape-appflow-integration-workflow-step-created-at
                         :shape "timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-updated-at :initarg :last-updated-at :initform
                         (common-lisp:error ":last-updated-at is required")
                         :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         struct-shape-appflow-integration-workflow-step-last-updated-at
                         :shape "timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-appflow-integration-workflow-step
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'appflow-integration-workflow-step
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'appflow-integration-workflow-step
                    'make-appflow-integration-workflow-step))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          appflow-integration-workflow-step))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          appflow-integration-workflow-step))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'flow-name))
      (common-lisp:list
       (common-lisp:cons "FlowName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execution-message))
      (common-lisp:list
       (common-lisp:cons "ExecutionMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'records-processed))
      (common-lisp:list
       (common-lisp:cons "RecordsProcessed"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'batch-records-start-time))
      (common-lisp:list
       (common-lisp:cons "BatchRecordsStartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'batch-records-end-time))
      (common-lisp:list
       (common-lisp:cons "BatchRecordsEndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "CreatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-at))
      (common-lisp:list
       (common-lisp:cons "LastUpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          appflow-integration-workflow-step))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass attribute-details common-lisp:nil
                       ((attributes :initarg :attributes :initform
                         (common-lisp:error ":attributes is required") :type
                         (common-lisp:or attribute-list common-lisp:null)
                         :accessor struct-shape-attribute-details-attributes
                         :shape "AttributeList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (expression :initarg :expression :initform
                         (common-lisp:error ":expression is required") :type
                         (common-lisp:or |string1To255| common-lisp:null)
                         :accessor struct-shape-attribute-details-expression
                         :shape "string1To255" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-attribute-details
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'attribute-details
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'attribute-details 'make-attribute-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input attribute-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input attribute-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attributes))
      (common-lisp:list
       (common-lisp:cons "Attributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expression))
      (common-lisp:list
       (common-lisp:cons "Expression"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input attribute-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass attribute-item common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or |attributeName| common-lisp:null)
                         :accessor struct-shape-attribute-item-name :shape
                         "attributeName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-attribute-item
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'attribute-item
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'attribute-item 'make-attribute-item))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input attribute-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input attribute-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input attribute-item))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype attribute-list ()
   '(trivial-types:proper-list attribute-item))
 (common-lisp:defun make-attribute-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list attribute-item))
   aws-sdk/generator/shape::members))
(common-lisp:deftype attribute-matching-model () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype attribute-source-id-map () 'common-lisp:hash-table)
 (common-lisp:defun make-attribute-source-id-map
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defclass attribute-types-selector common-lisp:nil
                       ((attribute-matching-model :initarg
                         :attribute-matching-model :initform
                         (common-lisp:error
                          ":attribute-matching-model is required")
                         :type
                         (common-lisp:or attribute-matching-model
                                         common-lisp:null)
                         :accessor
                         struct-shape-attribute-types-selector-attribute-matching-model
                         :shape "AttributeMatchingModel" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (address :initarg :address :initform common-lisp:nil
                         :type (common-lisp:or address-list common-lisp:null)
                         :accessor
                         struct-shape-attribute-types-selector-address :shape
                         "AddressList" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (phone-number :initarg :phone-number :initform
                         common-lisp:nil :type
                         (common-lisp:or phone-number-list common-lisp:null)
                         :accessor
                         struct-shape-attribute-types-selector-phone-number
                         :shape "PhoneNumberList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (email-address :initarg :email-address :initform
                         common-lisp:nil :type
                         (common-lisp:or email-list common-lisp:null) :accessor
                         struct-shape-attribute-types-selector-email-address
                         :shape "EmailList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-attribute-types-selector
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'attribute-types-selector
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'attribute-types-selector 'make-attribute-types-selector))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          attribute-types-selector))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          attribute-types-selector))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'attribute-matching-model))
      (common-lisp:list
       (common-lisp:cons "AttributeMatchingModel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'address))
      (common-lisp:list
       (common-lisp:cons "Address"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'phone-number))
      (common-lisp:list
       (common-lisp:cons "PhoneNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'email-address))
      (common-lisp:list
       (common-lisp:cons "EmailAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          attribute-types-selector))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype attributes () 'common-lisp:hash-table)
 (common-lisp:defun make-attributes (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defclass auto-merging common-lisp:nil
                       ((enabled :initarg :enabled :initform
                         (common-lisp:error ":enabled is required") :type
                         (common-lisp:or |optionalBoolean| common-lisp:null)
                         :accessor struct-shape-auto-merging-enabled :shape
                         "optionalBoolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (consolidation :initarg :consolidation :initform
                         common-lisp:nil :type
                         (common-lisp:or consolidation common-lisp:null)
                         :accessor struct-shape-auto-merging-consolidation
                         :shape "Consolidation" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (conflict-resolution :initarg :conflict-resolution
                         :initform common-lisp:nil :type
                         (common-lisp:or conflict-resolution common-lisp:null)
                         :accessor
                         struct-shape-auto-merging-conflict-resolution :shape
                         "ConflictResolution" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (min-allowed-confidence-score-for-merging :initarg
                         :min-allowed-confidence-score-for-merging :initform
                         common-lisp:nil :type
                         (common-lisp:or double0to1 common-lisp:null) :accessor
                         struct-shape-auto-merging-min-allowed-confidence-score-for-merging
                         :shape "Double0To1" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-auto-merging
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'auto-merging
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'auto-merging 'make-auto-merging))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input auto-merging))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input auto-merging))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "Enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'consolidation))
      (common-lisp:list
       (common-lisp:cons "Consolidation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'conflict-resolution))
      (common-lisp:list
       (common-lisp:cons "ConflictResolution"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'min-allowed-confidence-score-for-merging))
      (common-lisp:list
       (common-lisp:cons "MinAllowedConfidenceScoreForMerging"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input auto-merging))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition bad-request-exception
     (customer-profiles-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       bad-request-exception-message)))
 (common-lisp:export
  (common-lisp:list 'bad-request-exception 'bad-request-exception-message)))
(common-lisp:progn
 (common-lisp:defclass batch common-lisp:nil
                       ((start-time :initarg :start-time :initform
                         (common-lisp:error ":start-time is required") :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor struct-shape-batch-start-time :shape
                         "timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (end-time :initarg :end-time :initform
                         (common-lisp:error ":end-time is required") :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor struct-shape-batch-end-time :shape
                         "timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-batch
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'batch
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'batch 'make-batch))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input batch))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input batch))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "StartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "EndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input batch))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype batches () '(trivial-types:proper-list batch))
 (common-lisp:defun make-batches
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list batch))
   aws-sdk/generator/shape::members))
(common-lisp:deftype bucket-name () 'common-lisp:string)
(common-lisp:deftype bucket-prefix () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype calculated-attribute-definitions-list ()
   '(trivial-types:proper-list list-calculated-attribute-definition-item))
 (common-lisp:defun make-calculated-attribute-definitions-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            list-calculated-attribute-definition-item))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype calculated-attributes-for-profile-list ()
   '(trivial-types:proper-list list-calculated-attribute-for-profile-item))
 (common-lisp:defun make-calculated-attributes-for-profile-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            list-calculated-attribute-for-profile-item))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass conditions common-lisp:nil
                       ((range :initarg :range :initform common-lisp:nil :type
                         (common-lisp:or range common-lisp:null) :accessor
                         struct-shape-conditions-range :shape "Range" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (object-count :initarg :object-count :initform
                         common-lisp:nil :type
                         (common-lisp:or object-count common-lisp:null)
                         :accessor struct-shape-conditions-object-count :shape
                         "ObjectCount" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (threshold :initarg :threshold :initform
                         common-lisp:nil :type
                         (common-lisp:or threshold common-lisp:null) :accessor
                         struct-shape-conditions-threshold :shape "Threshold"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-conditions
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'conditions
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'conditions 'make-conditions))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input conditions))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input conditions))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'range))
      (common-lisp:list
       (common-lisp:cons "Range"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'object-count))
      (common-lisp:list
       (common-lisp:cons "ObjectCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'threshold))
      (common-lisp:list
       (common-lisp:cons "Threshold"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input conditions))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass conflict-resolution common-lisp:nil
                       ((conflict-resolving-model :initarg
                         :conflict-resolving-model :initform
                         (common-lisp:error
                          ":conflict-resolving-model is required")
                         :type
                         (common-lisp:or conflict-resolving-model
                                         common-lisp:null)
                         :accessor
                         struct-shape-conflict-resolution-conflict-resolving-model
                         :shape "ConflictResolvingModel" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (source-name :initarg :source-name :initform
                         common-lisp:nil :type
                         (common-lisp:or |string1To255| common-lisp:null)
                         :accessor struct-shape-conflict-resolution-source-name
                         :shape "string1To255" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-conflict-resolution
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'conflict-resolution
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'conflict-resolution 'make-conflict-resolution))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input conflict-resolution))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input conflict-resolution))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'conflict-resolving-model))
      (common-lisp:list
       (common-lisp:cons "ConflictResolvingModel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-name))
      (common-lisp:list
       (common-lisp:cons "SourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input conflict-resolution))
   common-lisp:nil))
(common-lisp:deftype conflict-resolving-model () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass connector-operator common-lisp:nil
                       ((marketo :initarg :marketo :initform common-lisp:nil
                         :type
                         (common-lisp:or marketo-connector-operator
                                         common-lisp:null)
                         :accessor struct-shape-connector-operator-marketo
                         :shape "MarketoConnectorOperator" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (s3 :initarg :s3 :initform common-lisp:nil :type
                         (common-lisp:or s3connector-operator common-lisp:null)
                         :accessor struct-shape-connector-operator-s3 :shape
                         "S3ConnectorOperator" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (salesforce :initarg :salesforce :initform
                         common-lisp:nil :type
                         (common-lisp:or salesforce-connector-operator
                                         common-lisp:null)
                         :accessor struct-shape-connector-operator-salesforce
                         :shape "SalesforceConnectorOperator" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (service-now :initarg :service-now :initform
                         common-lisp:nil :type
                         (common-lisp:or service-now-connector-operator
                                         common-lisp:null)
                         :accessor struct-shape-connector-operator-service-now
                         :shape "ServiceNowConnectorOperator" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (zendesk :initarg :zendesk :initform common-lisp:nil
                         :type
                         (common-lisp:or zendesk-connector-operator
                                         common-lisp:null)
                         :accessor struct-shape-connector-operator-zendesk
                         :shape "ZendeskConnectorOperator" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-connector-operator
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'connector-operator
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'connector-operator 'make-connector-operator))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input connector-operator))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input connector-operator))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marketo))
      (common-lisp:list
       (common-lisp:cons "Marketo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3))
      (common-lisp:list
       (common-lisp:cons "S3"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'salesforce))
      (common-lisp:list
       (common-lisp:cons "Salesforce"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-now))
      (common-lisp:list
       (common-lisp:cons "ServiceNow"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'zendesk))
      (common-lisp:list
       (common-lisp:cons "Zendesk"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input connector-operator))
   common-lisp:nil))
(common-lisp:deftype connector-profile-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass consolidation common-lisp:nil
                       ((matching-attributes-list :initarg
                         :matching-attributes-list :initform
                         (common-lisp:error
                          ":matching-attributes-list is required")
                         :type
                         (common-lisp:or matching-attributes-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-consolidation-matching-attributes-list
                         :shape "MatchingAttributesList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-consolidation
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'consolidation
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'consolidation 'make-consolidation))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input consolidation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input consolidation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'matching-attributes-list))
      (common-lisp:list
       (common-lisp:cons "MatchingAttributesList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input consolidation))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-calculated-attribute-definition-request
                       common-lisp:nil
                       ((domain-name :initarg :domain-name :initform
                         (common-lisp:error ":domain-name is required") :type
                         (common-lisp:or |name| common-lisp:null) :accessor
                         struct-shape-create-calculated-attribute-definition-request-domain-name
                         :shape "name" :location "uri" :location-name
                         "DomainName")
                        (calculated-attribute-name :initarg
                         :calculated-attribute-name :initform
                         (common-lisp:error
                          ":calculated-attribute-name is required")
                         :type (common-lisp:or |typeName| common-lisp:null)
                         :accessor
                         struct-shape-create-calculated-attribute-definition-request-calculated-attribute-name
                         :shape "typeName" :location "uri" :location-name
                         "CalculatedAttributeName")
                        (display-name :initarg :display-name :initform
                         common-lisp:nil :type
                         (common-lisp:or |displayName| common-lisp:null)
                         :accessor
                         struct-shape-create-calculated-attribute-definition-request-display-name
                         :shape "displayName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or |sensitiveText| common-lisp:null)
                         :accessor
                         struct-shape-create-calculated-attribute-definition-request-description
                         :shape "sensitiveText" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (attribute-details :initarg :attribute-details
                         :initform
                         (common-lisp:error ":attribute-details is required")
                         :type
                         (common-lisp:or attribute-details common-lisp:null)
                         :accessor
                         struct-shape-create-calculated-attribute-definition-request-attribute-details
                         :shape "AttributeDetails" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (conditions :initarg :conditions :initform
                         common-lisp:nil :type
                         (common-lisp:or conditions common-lisp:null) :accessor
                         struct-shape-create-calculated-attribute-definition-request-conditions
                         :shape "Conditions" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (statistic :initarg :statistic :initform
                         (common-lisp:error ":statistic is required") :type
                         (common-lisp:or statistic common-lisp:null) :accessor
                         struct-shape-create-calculated-attribute-definition-request-statistic
                         :shape "Statistic" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         struct-shape-create-calculated-attribute-definition-request-tags
                         :shape "TagMap" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-calculated-attribute-definition-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-calculated-attribute-definition-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-calculated-attribute-definition-request
                    'make-create-calculated-attribute-definition-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-calculated-attribute-definition-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-calculated-attribute-definition-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-name))
      (common-lisp:list
       (common-lisp:cons "DisplayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attribute-details))
      (common-lisp:list
       (common-lisp:cons "AttributeDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'conditions))
      (common-lisp:list
       (common-lisp:cons "Conditions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'statistic))
      (common-lisp:list
       (common-lisp:cons "Statistic"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-calculated-attribute-definition-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-calculated-attribute-definition-response
                       common-lisp:nil
                       ((calculated-attribute-name :initarg
                         :calculated-attribute-name :initform common-lisp:nil
                         :type (common-lisp:or |typeName| common-lisp:null)
                         :accessor
                         struct-shape-create-calculated-attribute-definition-response-calculated-attribute-name
                         :shape "typeName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (display-name :initarg :display-name :initform
                         common-lisp:nil :type
                         (common-lisp:or |displayName| common-lisp:null)
                         :accessor
                         struct-shape-create-calculated-attribute-definition-response-display-name
                         :shape "displayName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or |sensitiveText| common-lisp:null)
                         :accessor
                         struct-shape-create-calculated-attribute-definition-response-description
                         :shape "sensitiveText" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (attribute-details :initarg :attribute-details
                         :initform common-lisp:nil :type
                         (common-lisp:or attribute-details common-lisp:null)
                         :accessor
                         struct-shape-create-calculated-attribute-definition-response-attribute-details
                         :shape "AttributeDetails" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (conditions :initarg :conditions :initform
                         common-lisp:nil :type
                         (common-lisp:or conditions common-lisp:null) :accessor
                         struct-shape-create-calculated-attribute-definition-response-conditions
                         :shape "Conditions" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (statistic :initarg :statistic :initform
                         common-lisp:nil :type
                         (common-lisp:or statistic common-lisp:null) :accessor
                         struct-shape-create-calculated-attribute-definition-response-statistic
                         :shape "Statistic" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (created-at :initarg :created-at :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         struct-shape-create-calculated-attribute-definition-response-created-at
                         :shape "timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-updated-at :initarg :last-updated-at :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         struct-shape-create-calculated-attribute-definition-response-last-updated-at
                         :shape "timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         struct-shape-create-calculated-attribute-definition-response-tags
                         :shape "TagMap" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-calculated-attribute-definition-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-calculated-attribute-definition-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-calculated-attribute-definition-response
                    'make-create-calculated-attribute-definition-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-calculated-attribute-definition-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-calculated-attribute-definition-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'calculated-attribute-name))
      (common-lisp:list
       (common-lisp:cons "CalculatedAttributeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-name))
      (common-lisp:list
       (common-lisp:cons "DisplayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attribute-details))
      (common-lisp:list
       (common-lisp:cons "AttributeDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'conditions))
      (common-lisp:list
       (common-lisp:cons "Conditions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'statistic))
      (common-lisp:list
       (common-lisp:cons "Statistic"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "CreatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-at))
      (common-lisp:list
       (common-lisp:cons "LastUpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-calculated-attribute-definition-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-domain-request common-lisp:nil
                       ((domain-name :initarg :domain-name :initform
                         (common-lisp:error ":domain-name is required") :type
                         (common-lisp:or |name| common-lisp:null) :accessor
                         struct-shape-create-domain-request-domain-name :shape
                         "name" :location "uri" :location-name "DomainName")
                        (default-expiration-days :initarg
                         :default-expiration-days :initform
                         (common-lisp:error
                          ":default-expiration-days is required")
                         :type
                         (common-lisp:or |expirationDaysInteger|
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-domain-request-default-expiration-days
                         :shape "expirationDaysInteger" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (default-encryption-key :initarg
                         :default-encryption-key :initform common-lisp:nil
                         :type
                         (common-lisp:or |encryptionKey| common-lisp:null)
                         :accessor
                         struct-shape-create-domain-request-default-encryption-key
                         :shape "encryptionKey" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dead-letter-queue-url :initarg :dead-letter-queue-url
                         :initform common-lisp:nil :type
                         (common-lisp:or |sqsQueueUrl| common-lisp:null)
                         :accessor
                         struct-shape-create-domain-request-dead-letter-queue-url
                         :shape "sqsQueueUrl" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (matching :initarg :matching :initform common-lisp:nil
                         :type
                         (common-lisp:or matching-request common-lisp:null)
                         :accessor struct-shape-create-domain-request-matching
                         :shape "MatchingRequest" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (rule-based-matching :initarg :rule-based-matching
                         :initform common-lisp:nil :type
                         (common-lisp:or rule-based-matching-request
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-domain-request-rule-based-matching
                         :shape "RuleBasedMatchingRequest" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         struct-shape-create-domain-request-tags :shape
                         "TagMap" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-domain-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-domain-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-domain-request 'make-create-domain-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-domain-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-domain-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-expiration-days))
      (common-lisp:list
       (common-lisp:cons "DefaultExpirationDays"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-encryption-key))
      (common-lisp:list
       (common-lisp:cons "DefaultEncryptionKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dead-letter-queue-url))
      (common-lisp:list
       (common-lisp:cons "DeadLetterQueueUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'matching))
      (common-lisp:list
       (common-lisp:cons "Matching"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-based-matching))
      (common-lisp:list
       (common-lisp:cons "RuleBasedMatching"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-domain-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-domain-response common-lisp:nil
                       ((domain-name :initarg :domain-name :initform
                         (common-lisp:error ":domain-name is required") :type
                         (common-lisp:or |name| common-lisp:null) :accessor
                         struct-shape-create-domain-response-domain-name :shape
                         "name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (default-expiration-days :initarg
                         :default-expiration-days :initform
                         (common-lisp:error
                          ":default-expiration-days is required")
                         :type
                         (common-lisp:or |expirationDaysInteger|
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-domain-response-default-expiration-days
                         :shape "expirationDaysInteger" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (default-encryption-key :initarg
                         :default-encryption-key :initform common-lisp:nil
                         :type
                         (common-lisp:or |encryptionKey| common-lisp:null)
                         :accessor
                         struct-shape-create-domain-response-default-encryption-key
                         :shape "encryptionKey" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dead-letter-queue-url :initarg :dead-letter-queue-url
                         :initform common-lisp:nil :type
                         (common-lisp:or |sqsQueueUrl| common-lisp:null)
                         :accessor
                         struct-shape-create-domain-response-dead-letter-queue-url
                         :shape "sqsQueueUrl" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (matching :initarg :matching :initform common-lisp:nil
                         :type
                         (common-lisp:or matching-response common-lisp:null)
                         :accessor struct-shape-create-domain-response-matching
                         :shape "MatchingResponse" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (rule-based-matching :initarg :rule-based-matching
                         :initform common-lisp:nil :type
                         (common-lisp:or rule-based-matching-response
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-domain-response-rule-based-matching
                         :shape "RuleBasedMatchingResponse" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (created-at :initarg :created-at :initform
                         (common-lisp:error ":created-at is required") :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         struct-shape-create-domain-response-created-at :shape
                         "timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (last-updated-at :initarg :last-updated-at :initform
                         (common-lisp:error ":last-updated-at is required")
                         :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         struct-shape-create-domain-response-last-updated-at
                         :shape "timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         struct-shape-create-domain-response-tags :shape
                         "TagMap" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-domain-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-domain-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-domain-response 'make-create-domain-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-domain-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-domain-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-name))
      (common-lisp:list
       (common-lisp:cons "DomainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-expiration-days))
      (common-lisp:list
       (common-lisp:cons "DefaultExpirationDays"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-encryption-key))
      (common-lisp:list
       (common-lisp:cons "DefaultEncryptionKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dead-letter-queue-url))
      (common-lisp:list
       (common-lisp:cons "DeadLetterQueueUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'matching))
      (common-lisp:list
       (common-lisp:cons "Matching"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-based-matching))
      (common-lisp:list
       (common-lisp:cons "RuleBasedMatching"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "CreatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-at))
      (common-lisp:list
       (common-lisp:cons "LastUpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-domain-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-event-stream-request common-lisp:nil
                       ((domain-name :initarg :domain-name :initform
                         (common-lisp:error ":domain-name is required") :type
                         (common-lisp:or |name| common-lisp:null) :accessor
                         struct-shape-create-event-stream-request-domain-name
                         :shape "name" :location "uri" :location-name
                         "DomainName")
                        (uri :initarg :uri :initform
                         (common-lisp:error ":uri is required") :type
                         (common-lisp:or |string1To255| common-lisp:null)
                         :accessor struct-shape-create-event-stream-request-uri
                         :shape "string1To255" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (event-stream-name :initarg :event-stream-name
                         :initform
                         (common-lisp:error ":event-stream-name is required")
                         :type (common-lisp:or |name| common-lisp:null)
                         :accessor
                         struct-shape-create-event-stream-request-event-stream-name
                         :shape "name" :location "uri" :location-name
                         "EventStreamName")
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         struct-shape-create-event-stream-request-tags :shape
                         "TagMap" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-event-stream-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-event-stream-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-event-stream-request
                    'make-create-event-stream-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-event-stream-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-event-stream-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'uri))
      (common-lisp:list
       (common-lisp:cons "Uri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-event-stream-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-event-stream-response common-lisp:nil
                       ((event-stream-arn :initarg :event-stream-arn :initform
                         (common-lisp:error ":event-stream-arn is required")
                         :type (common-lisp:or |string1To255| common-lisp:null)
                         :accessor
                         struct-shape-create-event-stream-response-event-stream-arn
                         :shape "string1To255" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         struct-shape-create-event-stream-response-tags :shape
                         "TagMap" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-event-stream-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-event-stream-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-event-stream-response
                    'make-create-event-stream-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-event-stream-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-event-stream-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-stream-arn))
      (common-lisp:list
       (common-lisp:cons "EventStreamArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-event-stream-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-integration-workflow-request common-lisp:nil
                       ((domain-name :initarg :domain-name :initform
                         (common-lisp:error ":domain-name is required") :type
                         (common-lisp:or |name| common-lisp:null) :accessor
                         struct-shape-create-integration-workflow-request-domain-name
                         :shape "name" :location "uri" :location-name
                         "DomainName")
                        (workflow-type :initarg :workflow-type :initform
                         (common-lisp:error ":workflow-type is required") :type
                         (common-lisp:or workflow-type common-lisp:null)
                         :accessor
                         struct-shape-create-integration-workflow-request-workflow-type
                         :shape "WorkflowType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (integration-config :initarg :integration-config
                         :initform
                         (common-lisp:error ":integration-config is required")
                         :type
                         (common-lisp:or integration-config common-lisp:null)
                         :accessor
                         struct-shape-create-integration-workflow-request-integration-config
                         :shape "IntegrationConfig" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (object-type-name :initarg :object-type-name :initform
                         (common-lisp:error ":object-type-name is required")
                         :type (common-lisp:or |typeName| common-lisp:null)
                         :accessor
                         struct-shape-create-integration-workflow-request-object-type-name
                         :shape "typeName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (role-arn :initarg :role-arn :initform
                         (common-lisp:error ":role-arn is required") :type
                         (common-lisp:or role-arn common-lisp:null) :accessor
                         struct-shape-create-integration-workflow-request-role-arn
                         :shape "RoleArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         struct-shape-create-integration-workflow-request-tags
                         :shape "TagMap" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-integration-workflow-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-integration-workflow-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-integration-workflow-request
                    'make-create-integration-workflow-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-integration-workflow-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-integration-workflow-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workflow-type))
      (common-lisp:list
       (common-lisp:cons "WorkflowType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'integration-config))
      (common-lisp:list
       (common-lisp:cons "IntegrationConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'object-type-name))
      (common-lisp:list
       (common-lisp:cons "ObjectTypeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-integration-workflow-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-integration-workflow-response common-lisp:nil
                       ((workflow-id :initarg :workflow-id :initform
                         (common-lisp:error ":workflow-id is required") :type
                         (common-lisp:or |uuid| common-lisp:null) :accessor
                         struct-shape-create-integration-workflow-response-workflow-id
                         :shape "uuid" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (message :initarg :message :initform
                         (common-lisp:error ":message is required") :type
                         (common-lisp:or |string1To255| common-lisp:null)
                         :accessor
                         struct-shape-create-integration-workflow-response-message
                         :shape "string1To255" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-integration-workflow-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-integration-workflow-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-integration-workflow-response
                    'make-create-integration-workflow-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-integration-workflow-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-integration-workflow-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workflow-id))
      (common-lisp:list
       (common-lisp:cons "WorkflowId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-integration-workflow-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-profile-request common-lisp:nil
                       ((domain-name :initarg :domain-name :initform
                         (common-lisp:error ":domain-name is required") :type
                         (common-lisp:or |name| common-lisp:null) :accessor
                         struct-shape-create-profile-request-domain-name :shape
                         "name" :location "uri" :location-name "DomainName")
                        (account-number :initarg :account-number :initform
                         common-lisp:nil :type
                         (common-lisp:or |sensitiveString1To255|
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-profile-request-account-number
                         :shape "sensitiveString1To255" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (additional-information :initarg
                         :additional-information :initform common-lisp:nil
                         :type
                         (common-lisp:or |sensitiveString1To1000|
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-profile-request-additional-information
                         :shape "sensitiveString1To1000" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (party-type :initarg :party-type :initform
                         common-lisp:nil :type
                         (common-lisp:or party-type common-lisp:null) :accessor
                         struct-shape-create-profile-request-party-type :shape
                         "PartyType" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (business-name :initarg :business-name :initform
                         common-lisp:nil :type
                         (common-lisp:or |sensitiveString1To255|
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-profile-request-business-name
                         :shape "sensitiveString1To255" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (first-name :initarg :first-name :initform
                         common-lisp:nil :type
                         (common-lisp:or |sensitiveString1To255|
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-profile-request-first-name :shape
                         "sensitiveString1To255" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (middle-name :initarg :middle-name :initform
                         common-lisp:nil :type
                         (common-lisp:or |sensitiveString1To255|
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-profile-request-middle-name :shape
                         "sensitiveString1To255" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-name :initarg :last-name :initform
                         common-lisp:nil :type
                         (common-lisp:or |sensitiveString1To255|
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-profile-request-last-name :shape
                         "sensitiveString1To255" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (birth-date :initarg :birth-date :initform
                         common-lisp:nil :type
                         (common-lisp:or |sensitiveString1To255|
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-profile-request-birth-date :shape
                         "sensitiveString1To255" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (gender :initarg :gender :initform common-lisp:nil
                         :type (common-lisp:or gender common-lisp:null)
                         :accessor struct-shape-create-profile-request-gender
                         :shape "Gender" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (phone-number :initarg :phone-number :initform
                         common-lisp:nil :type
                         (common-lisp:or |sensitiveString1To255|
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-profile-request-phone-number
                         :shape "sensitiveString1To255" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (mobile-phone-number :initarg :mobile-phone-number
                         :initform common-lisp:nil :type
                         (common-lisp:or |sensitiveString1To255|
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-profile-request-mobile-phone-number
                         :shape "sensitiveString1To255" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (home-phone-number :initarg :home-phone-number
                         :initform common-lisp:nil :type
                         (common-lisp:or |sensitiveString1To255|
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-profile-request-home-phone-number
                         :shape "sensitiveString1To255" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (business-phone-number :initarg :business-phone-number
                         :initform common-lisp:nil :type
                         (common-lisp:or |sensitiveString1To255|
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-profile-request-business-phone-number
                         :shape "sensitiveString1To255" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (email-address :initarg :email-address :initform
                         common-lisp:nil :type
                         (common-lisp:or |sensitiveString1To255|
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-profile-request-email-address
                         :shape "sensitiveString1To255" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (personal-email-address :initarg
                         :personal-email-address :initform common-lisp:nil
                         :type
                         (common-lisp:or |sensitiveString1To255|
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-profile-request-personal-email-address
                         :shape "sensitiveString1To255" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (business-email-address :initarg
                         :business-email-address :initform common-lisp:nil
                         :type
                         (common-lisp:or |sensitiveString1To255|
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-profile-request-business-email-address
                         :shape "sensitiveString1To255" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (address :initarg :address :initform common-lisp:nil
                         :type (common-lisp:or address common-lisp:null)
                         :accessor struct-shape-create-profile-request-address
                         :shape "Address" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (shipping-address :initarg :shipping-address :initform
                         common-lisp:nil :type
                         (common-lisp:or address common-lisp:null) :accessor
                         struct-shape-create-profile-request-shipping-address
                         :shape "Address" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (mailing-address :initarg :mailing-address :initform
                         common-lisp:nil :type
                         (common-lisp:or address common-lisp:null) :accessor
                         struct-shape-create-profile-request-mailing-address
                         :shape "Address" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (billing-address :initarg :billing-address :initform
                         common-lisp:nil :type
                         (common-lisp:or address common-lisp:null) :accessor
                         struct-shape-create-profile-request-billing-address
                         :shape "Address" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (attributes :initarg :attributes :initform
                         common-lisp:nil :type
                         (common-lisp:or attributes common-lisp:null) :accessor
                         struct-shape-create-profile-request-attributes :shape
                         "Attributes" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (party-type-string :initarg :party-type-string
                         :initform common-lisp:nil :type
                         (common-lisp:or |sensitiveString1To255|
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-profile-request-party-type-string
                         :shape "sensitiveString1To255" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (gender-string :initarg :gender-string :initform
                         common-lisp:nil :type
                         (common-lisp:or |sensitiveString1To255|
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-profile-request-gender-string
                         :shape "sensitiveString1To255" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-profile-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-profile-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-profile-request 'make-create-profile-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-profile-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-profile-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-number))
      (common-lisp:list
       (common-lisp:cons "AccountNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'additional-information))
      (common-lisp:list
       (common-lisp:cons "AdditionalInformation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'party-type))
      (common-lisp:list
       (common-lisp:cons "PartyType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'business-name))
      (common-lisp:list
       (common-lisp:cons "BusinessName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'first-name))
      (common-lisp:list
       (common-lisp:cons "FirstName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'middle-name))
      (common-lisp:list
       (common-lisp:cons "MiddleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-name))
      (common-lisp:list
       (common-lisp:cons "LastName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'birth-date))
      (common-lisp:list
       (common-lisp:cons "BirthDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gender))
      (common-lisp:list
       (common-lisp:cons "Gender"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'phone-number))
      (common-lisp:list
       (common-lisp:cons "PhoneNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mobile-phone-number))
      (common-lisp:list
       (common-lisp:cons "MobilePhoneNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'home-phone-number))
      (common-lisp:list
       (common-lisp:cons "HomePhoneNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'business-phone-number))
      (common-lisp:list
       (common-lisp:cons "BusinessPhoneNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'email-address))
      (common-lisp:list
       (common-lisp:cons "EmailAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'personal-email-address))
      (common-lisp:list
       (common-lisp:cons "PersonalEmailAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'business-email-address))
      (common-lisp:list
       (common-lisp:cons "BusinessEmailAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'address))
      (common-lisp:list
       (common-lisp:cons "Address"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'shipping-address))
      (common-lisp:list
       (common-lisp:cons "ShippingAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mailing-address))
      (common-lisp:list
       (common-lisp:cons "MailingAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'billing-address))
      (common-lisp:list
       (common-lisp:cons "BillingAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attributes))
      (common-lisp:list
       (common-lisp:cons "Attributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'party-type-string))
      (common-lisp:list
       (common-lisp:cons "PartyTypeString"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gender-string))
      (common-lisp:list
       (common-lisp:cons "GenderString"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-profile-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-profile-response common-lisp:nil
                       ((profile-id :initarg :profile-id :initform
                         (common-lisp:error ":profile-id is required") :type
                         (common-lisp:or |uuid| common-lisp:null) :accessor
                         struct-shape-create-profile-response-profile-id :shape
                         "uuid" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-profile-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-profile-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-profile-response 'make-create-profile-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-profile-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-profile-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'profile-id))
      (common-lisp:list
       (common-lisp:cons "ProfileId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-profile-response))
   common-lisp:nil))
(common-lisp:deftype data-pull-mode () 'common-lisp:string)
(common-lisp:deftype date () 'common-lisp:string)
(common-lisp:deftype datetime-type-field-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass delete-calculated-attribute-definition-request
                       common-lisp:nil
                       ((domain-name :initarg :domain-name :initform
                         (common-lisp:error ":domain-name is required") :type
                         (common-lisp:or |name| common-lisp:null) :accessor
                         struct-shape-delete-calculated-attribute-definition-request-domain-name
                         :shape "name" :location "uri" :location-name
                         "DomainName")
                        (calculated-attribute-name :initarg
                         :calculated-attribute-name :initform
                         (common-lisp:error
                          ":calculated-attribute-name is required")
                         :type (common-lisp:or |typeName| common-lisp:null)
                         :accessor
                         struct-shape-delete-calculated-attribute-definition-request-calculated-attribute-name
                         :shape "typeName" :location "uri" :location-name
                         "CalculatedAttributeName"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-calculated-attribute-definition-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-calculated-attribute-definition-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-calculated-attribute-definition-request
                    'make-delete-calculated-attribute-definition-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-calculated-attribute-definition-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-calculated-attribute-definition-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-calculated-attribute-definition-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-calculated-attribute-definition-response
                       common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-calculated-attribute-definition-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-calculated-attribute-definition-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-calculated-attribute-definition-response
                    'make-delete-calculated-attribute-definition-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-calculated-attribute-definition-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-calculated-attribute-definition-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-calculated-attribute-definition-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-domain-request common-lisp:nil
                       ((domain-name :initarg :domain-name :initform
                         (common-lisp:error ":domain-name is required") :type
                         (common-lisp:or |name| common-lisp:null) :accessor
                         struct-shape-delete-domain-request-domain-name :shape
                         "name" :location "uri" :location-name "DomainName"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-domain-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-domain-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-domain-request 'make-delete-domain-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-domain-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-domain-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-domain-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-domain-response common-lisp:nil
                       ((message :initarg :message :initform
                         (common-lisp:error ":message is required") :type
                         (common-lisp:or |message| common-lisp:null) :accessor
                         struct-shape-delete-domain-response-message :shape
                         "message" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-domain-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-domain-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-domain-response 'make-delete-domain-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-domain-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-domain-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-domain-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-event-stream-request common-lisp:nil
                       ((domain-name :initarg :domain-name :initform
                         (common-lisp:error ":domain-name is required") :type
                         (common-lisp:or |name| common-lisp:null) :accessor
                         struct-shape-delete-event-stream-request-domain-name
                         :shape "name" :location "uri" :location-name
                         "DomainName")
                        (event-stream-name :initarg :event-stream-name
                         :initform
                         (common-lisp:error ":event-stream-name is required")
                         :type (common-lisp:or |name| common-lisp:null)
                         :accessor
                         struct-shape-delete-event-stream-request-event-stream-name
                         :shape "name" :location "uri" :location-name
                         "EventStreamName"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-event-stream-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-event-stream-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-event-stream-request
                    'make-delete-event-stream-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-event-stream-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-event-stream-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-event-stream-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-event-stream-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-event-stream-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-event-stream-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-event-stream-response
                    'make-delete-event-stream-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-event-stream-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-event-stream-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-event-stream-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-integration-request common-lisp:nil
                       ((domain-name :initarg :domain-name :initform
                         (common-lisp:error ":domain-name is required") :type
                         (common-lisp:or |name| common-lisp:null) :accessor
                         struct-shape-delete-integration-request-domain-name
                         :shape "name" :location "uri" :location-name
                         "DomainName")
                        (uri :initarg :uri :initform
                         (common-lisp:error ":uri is required") :type
                         (common-lisp:or |string1To255| common-lisp:null)
                         :accessor struct-shape-delete-integration-request-uri
                         :shape "string1To255" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-integration-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-integration-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-integration-request
                    'make-delete-integration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-integration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-integration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'uri))
      (common-lisp:list
       (common-lisp:cons "Uri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-integration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-integration-response common-lisp:nil
                       ((message :initarg :message :initform
                         (common-lisp:error ":message is required") :type
                         (common-lisp:or |message| common-lisp:null) :accessor
                         struct-shape-delete-integration-response-message
                         :shape "message" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-integration-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-integration-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-integration-response
                    'make-delete-integration-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-integration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-integration-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-integration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-profile-key-request common-lisp:nil
                       ((profile-id :initarg :profile-id :initform
                         (common-lisp:error ":profile-id is required") :type
                         (common-lisp:or |uuid| common-lisp:null) :accessor
                         struct-shape-delete-profile-key-request-profile-id
                         :shape "uuid" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (key-name :initarg :key-name :initform
                         (common-lisp:error ":key-name is required") :type
                         (common-lisp:or |name| common-lisp:null) :accessor
                         struct-shape-delete-profile-key-request-key-name
                         :shape "name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (values :initarg :values :initform
                         (common-lisp:error ":values is required") :type
                         (common-lisp:or |requestValueList| common-lisp:null)
                         :accessor
                         struct-shape-delete-profile-key-request-values :shape
                         "requestValueList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (domain-name :initarg :domain-name :initform
                         (common-lisp:error ":domain-name is required") :type
                         (common-lisp:or |name| common-lisp:null) :accessor
                         struct-shape-delete-profile-key-request-domain-name
                         :shape "name" :location "uri" :location-name
                         "DomainName"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-profile-key-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-profile-key-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-profile-key-request
                    'make-delete-profile-key-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-profile-key-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-profile-key-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'profile-id))
      (common-lisp:list
       (common-lisp:cons "ProfileId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-name))
      (common-lisp:list
       (common-lisp:cons "KeyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "Values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-profile-key-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-profile-key-response common-lisp:nil
                       ((message :initarg :message :initform common-lisp:nil
                         :type (common-lisp:or |message| common-lisp:null)
                         :accessor
                         struct-shape-delete-profile-key-response-message
                         :shape "message" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-profile-key-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-profile-key-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-profile-key-response
                    'make-delete-profile-key-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-profile-key-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-profile-key-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-profile-key-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-profile-object-request common-lisp:nil
                       ((profile-id :initarg :profile-id :initform
                         (common-lisp:error ":profile-id is required") :type
                         (common-lisp:or |uuid| common-lisp:null) :accessor
                         struct-shape-delete-profile-object-request-profile-id
                         :shape "uuid" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (profile-object-unique-key :initarg
                         :profile-object-unique-key :initform
                         (common-lisp:error
                          ":profile-object-unique-key is required")
                         :type (common-lisp:or |string1To255| common-lisp:null)
                         :accessor
                         struct-shape-delete-profile-object-request-profile-object-unique-key
                         :shape "string1To255" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (object-type-name :initarg :object-type-name :initform
                         (common-lisp:error ":object-type-name is required")
                         :type (common-lisp:or |typeName| common-lisp:null)
                         :accessor
                         struct-shape-delete-profile-object-request-object-type-name
                         :shape "typeName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (domain-name :initarg :domain-name :initform
                         (common-lisp:error ":domain-name is required") :type
                         (common-lisp:or |name| common-lisp:null) :accessor
                         struct-shape-delete-profile-object-request-domain-name
                         :shape "name" :location "uri" :location-name
                         "DomainName"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-profile-object-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-profile-object-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-profile-object-request
                    'make-delete-profile-object-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-profile-object-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-profile-object-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'profile-id))
      (common-lisp:list
       (common-lisp:cons "ProfileId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'profile-object-unique-key))
      (common-lisp:list
       (common-lisp:cons "ProfileObjectUniqueKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'object-type-name))
      (common-lisp:list
       (common-lisp:cons "ObjectTypeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-profile-object-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-profile-object-response common-lisp:nil
                       ((message :initarg :message :initform common-lisp:nil
                         :type (common-lisp:or |message| common-lisp:null)
                         :accessor
                         struct-shape-delete-profile-object-response-message
                         :shape "message" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-profile-object-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-profile-object-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-profile-object-response
                    'make-delete-profile-object-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-profile-object-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-profile-object-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-profile-object-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-profile-object-type-request common-lisp:nil
                       ((domain-name :initarg :domain-name :initform
                         (common-lisp:error ":domain-name is required") :type
                         (common-lisp:or |name| common-lisp:null) :accessor
                         struct-shape-delete-profile-object-type-request-domain-name
                         :shape "name" :location "uri" :location-name
                         "DomainName")
                        (object-type-name :initarg :object-type-name :initform
                         (common-lisp:error ":object-type-name is required")
                         :type (common-lisp:or |typeName| common-lisp:null)
                         :accessor
                         struct-shape-delete-profile-object-type-request-object-type-name
                         :shape "typeName" :location "uri" :location-name
                         "ObjectTypeName"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-profile-object-type-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-profile-object-type-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-profile-object-type-request
                    'make-delete-profile-object-type-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-profile-object-type-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-profile-object-type-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-profile-object-type-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-profile-object-type-response common-lisp:nil
                       ((message :initarg :message :initform
                         (common-lisp:error ":message is required") :type
                         (common-lisp:or |message| common-lisp:null) :accessor
                         struct-shape-delete-profile-object-type-response-message
                         :shape "message" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-profile-object-type-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-profile-object-type-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-profile-object-type-response
                    'make-delete-profile-object-type-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-profile-object-type-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-profile-object-type-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-profile-object-type-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-profile-request common-lisp:nil
                       ((profile-id :initarg :profile-id :initform
                         (common-lisp:error ":profile-id is required") :type
                         (common-lisp:or |uuid| common-lisp:null) :accessor
                         struct-shape-delete-profile-request-profile-id :shape
                         "uuid" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (domain-name :initarg :domain-name :initform
                         (common-lisp:error ":domain-name is required") :type
                         (common-lisp:or |name| common-lisp:null) :accessor
                         struct-shape-delete-profile-request-domain-name :shape
                         "name" :location "uri" :location-name "DomainName"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-profile-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-profile-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-profile-request 'make-delete-profile-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-profile-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-profile-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'profile-id))
      (common-lisp:list
       (common-lisp:cons "ProfileId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-profile-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-profile-response common-lisp:nil
                       ((message :initarg :message :initform common-lisp:nil
                         :type (common-lisp:or |message| common-lisp:null)
                         :accessor struct-shape-delete-profile-response-message
                         :shape "message" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-profile-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-profile-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-profile-response 'make-delete-profile-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-profile-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-profile-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-profile-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-workflow-request common-lisp:nil
                       ((domain-name :initarg :domain-name :initform
                         (common-lisp:error ":domain-name is required") :type
                         (common-lisp:or |name| common-lisp:null) :accessor
                         struct-shape-delete-workflow-request-domain-name
                         :shape "name" :location "uri" :location-name
                         "DomainName")
                        (workflow-id :initarg :workflow-id :initform
                         (common-lisp:error ":workflow-id is required") :type
                         (common-lisp:or |string1To255| common-lisp:null)
                         :accessor
                         struct-shape-delete-workflow-request-workflow-id
                         :shape "string1To255" :location "uri" :location-name
                         "WorkflowId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-workflow-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-workflow-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-workflow-request 'make-delete-workflow-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-workflow-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-workflow-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-workflow-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-workflow-response common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-workflow-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-workflow-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-workflow-response 'make-delete-workflow-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-workflow-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-workflow-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-workflow-response))
   common-lisp:nil))
(common-lisp:deftype destination-field () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass destination-summary common-lisp:nil
                       ((uri :initarg :uri :initform
                         (common-lisp:error ":uri is required") :type
                         (common-lisp:or |string1To255| common-lisp:null)
                         :accessor struct-shape-destination-summary-uri :shape
                         "string1To255" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform
                         (common-lisp:error ":status is required") :type
                         (common-lisp:or event-stream-destination-status
                                         common-lisp:null)
                         :accessor struct-shape-destination-summary-status
                         :shape "EventStreamDestinationStatus" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (unhealthy-since :initarg :unhealthy-since :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         struct-shape-destination-summary-unhealthy-since
                         :shape "timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-destination-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'destination-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'destination-summary 'make-destination-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input destination-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input destination-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'uri))
      (common-lisp:list
       (common-lisp:cons "Uri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'unhealthy-since))
      (common-lisp:list
       (common-lisp:cons "UnhealthySince"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input destination-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass detect-profile-object-type-request common-lisp:nil
                       ((objects :initarg :objects :initform
                         (common-lisp:error ":objects is required") :type
                         (common-lisp:or objects common-lisp:null) :accessor
                         struct-shape-detect-profile-object-type-request-objects
                         :shape "Objects" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (domain-name :initarg :domain-name :initform
                         (common-lisp:error ":domain-name is required") :type
                         (common-lisp:or |name| common-lisp:null) :accessor
                         struct-shape-detect-profile-object-type-request-domain-name
                         :shape "name" :location "uri" :location-name
                         "DomainName"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-detect-profile-object-type-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'detect-profile-object-type-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'detect-profile-object-type-request
                    'make-detect-profile-object-type-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          detect-profile-object-type-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          detect-profile-object-type-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'objects))
      (common-lisp:list
       (common-lisp:cons "Objects"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          detect-profile-object-type-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass detect-profile-object-type-response common-lisp:nil
                       ((detected-profile-object-types :initarg
                         :detected-profile-object-types :initform
                         common-lisp:nil :type
                         (common-lisp:or detected-profile-object-types
                                         common-lisp:null)
                         :accessor
                         struct-shape-detect-profile-object-type-response-detected-profile-object-types
                         :shape "DetectedProfileObjectTypes" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-detect-profile-object-type-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'detect-profile-object-type-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'detect-profile-object-type-response
                    'make-detect-profile-object-type-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          detect-profile-object-type-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          detect-profile-object-type-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'detected-profile-object-types))
      (common-lisp:list
       (common-lisp:cons "DetectedProfileObjectTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          detect-profile-object-type-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass detected-profile-object-type common-lisp:nil
                       ((source-last-updated-timestamp-format :initarg
                         :source-last-updated-timestamp-format :initform
                         common-lisp:nil :type
                         (common-lisp:or |string1To255| common-lisp:null)
                         :accessor
                         struct-shape-detected-profile-object-type-source-last-updated-timestamp-format
                         :shape "string1To255" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (fields :initarg :fields :initform common-lisp:nil
                         :type (common-lisp:or field-map common-lisp:null)
                         :accessor
                         struct-shape-detected-profile-object-type-fields
                         :shape "FieldMap" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (keys :initarg :keys :initform common-lisp:nil :type
                         (common-lisp:or key-map common-lisp:null) :accessor
                         struct-shape-detected-profile-object-type-keys :shape
                         "KeyMap" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-detected-profile-object-type
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'detected-profile-object-type
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'detected-profile-object-type
                    'make-detected-profile-object-type))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          detected-profile-object-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          detected-profile-object-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-last-updated-timestamp-format))
      (common-lisp:list
       (common-lisp:cons "SourceLastUpdatedTimestampFormat"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fields))
      (common-lisp:list
       (common-lisp:cons "Fields"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'keys))
      (common-lisp:list
       (common-lisp:cons "Keys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          detected-profile-object-type))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype detected-profile-object-types ()
   '(trivial-types:proper-list detected-profile-object-type))
 (common-lisp:defun make-detected-profile-object-types
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            detected-profile-object-type))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype domain-list ()
   '(trivial-types:proper-list list-domain-item))
 (common-lisp:defun make-domain-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list list-domain-item))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass domain-stats common-lisp:nil
                       ((profile-count :initarg :profile-count :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:integer common-lisp:null)
                         :accessor struct-shape-domain-stats-profile-count
                         :shape "long" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (metering-profile-count :initarg
                         :metering-profile-count :initform common-lisp:nil
                         :type
                         (common-lisp:or common-lisp:integer common-lisp:null)
                         :accessor
                         struct-shape-domain-stats-metering-profile-count
                         :shape "long" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (object-count :initarg :object-count :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:integer common-lisp:null)
                         :accessor struct-shape-domain-stats-object-count
                         :shape "long" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (total-size :initarg :total-size :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:integer common-lisp:null)
                         :accessor struct-shape-domain-stats-total-size :shape
                         "long" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-domain-stats
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'domain-stats
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'domain-stats 'make-domain-stats))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input domain-stats))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input domain-stats))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'profile-count))
      (common-lisp:list
       (common-lisp:cons "ProfileCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'metering-profile-count))
      (common-lisp:list
       (common-lisp:cons "MeteringProfileCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'object-count))
      (common-lisp:list
       (common-lisp:cons "ObjectCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total-size))
      (common-lisp:list
       (common-lisp:cons "TotalSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input domain-stats))
   common-lisp:nil))
(common-lisp:deftype double () 'common-lisp:double-float)
(common-lisp:deftype double0to1 () 'common-lisp:double-float)
(common-lisp:progn
 (common-lisp:deftype email-list ()
   '(trivial-types:proper-list |string1To255|))
 (common-lisp:defun make-email-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list |string1To255|))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass event-stream-destination-details common-lisp:nil
                       ((uri :initarg :uri :initform
                         (common-lisp:error ":uri is required") :type
                         (common-lisp:or |string1To255| common-lisp:null)
                         :accessor
                         struct-shape-event-stream-destination-details-uri
                         :shape "string1To255" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform
                         (common-lisp:error ":status is required") :type
                         (common-lisp:or event-stream-destination-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-event-stream-destination-details-status
                         :shape "EventStreamDestinationStatus" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (unhealthy-since :initarg :unhealthy-since :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         struct-shape-event-stream-destination-details-unhealthy-since
                         :shape "timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (message :initarg :message :initform common-lisp:nil
                         :type
                         (common-lisp:or |string1To1000| common-lisp:null)
                         :accessor
                         struct-shape-event-stream-destination-details-message
                         :shape "string1To1000" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-event-stream-destination-details
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'event-stream-destination-details
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'event-stream-destination-details
                    'make-event-stream-destination-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          event-stream-destination-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          event-stream-destination-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'uri))
      (common-lisp:list
       (common-lisp:cons "Uri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'unhealthy-since))
      (common-lisp:list
       (common-lisp:cons "UnhealthySince"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          event-stream-destination-details))
   common-lisp:nil))
(common-lisp:deftype event-stream-destination-status () 'common-lisp:string)
(common-lisp:deftype event-stream-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass event-stream-summary common-lisp:nil
                       ((domain-name :initarg :domain-name :initform
                         (common-lisp:error ":domain-name is required") :type
                         (common-lisp:or |name| common-lisp:null) :accessor
                         struct-shape-event-stream-summary-domain-name :shape
                         "name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (event-stream-name :initarg :event-stream-name
                         :initform
                         (common-lisp:error ":event-stream-name is required")
                         :type (common-lisp:or |name| common-lisp:null)
                         :accessor
                         struct-shape-event-stream-summary-event-stream-name
                         :shape "name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (event-stream-arn :initarg :event-stream-arn :initform
                         (common-lisp:error ":event-stream-arn is required")
                         :type (common-lisp:or |string1To255| common-lisp:null)
                         :accessor
                         struct-shape-event-stream-summary-event-stream-arn
                         :shape "string1To255" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (state :initarg :state :initform
                         (common-lisp:error ":state is required") :type
                         (common-lisp:or event-stream-state common-lisp:null)
                         :accessor struct-shape-event-stream-summary-state
                         :shape "EventStreamState" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (stopped-since :initarg :stopped-since :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         struct-shape-event-stream-summary-stopped-since :shape
                         "timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (destination-summary :initarg :destination-summary
                         :initform common-lisp:nil :type
                         (common-lisp:or destination-summary common-lisp:null)
                         :accessor
                         struct-shape-event-stream-summary-destination-summary
                         :shape "DestinationSummary" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         struct-shape-event-stream-summary-tags :shape "TagMap"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-event-stream-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'event-stream-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'event-stream-summary 'make-event-stream-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input event-stream-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input event-stream-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-name))
      (common-lisp:list
       (common-lisp:cons "DomainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-stream-name))
      (common-lisp:list
       (common-lisp:cons "EventStreamName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-stream-arn))
      (common-lisp:list
       (common-lisp:cons "EventStreamArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stopped-since))
      (common-lisp:list
       (common-lisp:cons "StoppedSince"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination-summary))
      (common-lisp:list
       (common-lisp:cons "DestinationSummary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input event-stream-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype event-stream-summary-list ()
   '(trivial-types:proper-list event-stream-summary))
 (common-lisp:defun make-event-stream-summary-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list event-stream-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass exporting-config common-lisp:nil
                       ((s3exporting :initarg :s3exporting :initform
                         common-lisp:nil :type
                         (common-lisp:or s3exporting-config common-lisp:null)
                         :accessor struct-shape-exporting-config-s3exporting
                         :shape "S3ExportingConfig" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-exporting-config
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'exporting-config
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'exporting-config 'make-exporting-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input exporting-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input exporting-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3exporting))
      (common-lisp:list
       (common-lisp:cons "S3Exporting"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input exporting-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass exporting-location common-lisp:nil
                       ((s3exporting :initarg :s3exporting :initform
                         common-lisp:nil :type
                         (common-lisp:or s3exporting-location common-lisp:null)
                         :accessor struct-shape-exporting-location-s3exporting
                         :shape "S3ExportingLocation" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-exporting-location
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'exporting-location
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'exporting-location 'make-exporting-location))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input exporting-location))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input exporting-location))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3exporting))
      (common-lisp:list
       (common-lisp:cons "S3Exporting"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input exporting-location))
   common-lisp:nil))
(common-lisp:deftype field-content-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype field-map () 'common-lisp:hash-table)
 (common-lisp:defun make-field-map (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:deftype field-name-list () '(trivial-types:proper-list |name|))
 (common-lisp:defun make-field-name-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list |name|))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass field-source-profile-ids common-lisp:nil
                       ((account-number :initarg :account-number :initform
                         common-lisp:nil :type
                         (common-lisp:or |uuid| common-lisp:null) :accessor
                         struct-shape-field-source-profile-ids-account-number
                         :shape "uuid" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (additional-information :initarg
                         :additional-information :initform common-lisp:nil
                         :type (common-lisp:or |uuid| common-lisp:null)
                         :accessor
                         struct-shape-field-source-profile-ids-additional-information
                         :shape "uuid" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (party-type :initarg :party-type :initform
                         common-lisp:nil :type
                         (common-lisp:or |uuid| common-lisp:null) :accessor
                         struct-shape-field-source-profile-ids-party-type
                         :shape "uuid" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (business-name :initarg :business-name :initform
                         common-lisp:nil :type
                         (common-lisp:or |uuid| common-lisp:null) :accessor
                         struct-shape-field-source-profile-ids-business-name
                         :shape "uuid" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (first-name :initarg :first-name :initform
                         common-lisp:nil :type
                         (common-lisp:or |uuid| common-lisp:null) :accessor
                         struct-shape-field-source-profile-ids-first-name
                         :shape "uuid" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (middle-name :initarg :middle-name :initform
                         common-lisp:nil :type
                         (common-lisp:or |uuid| common-lisp:null) :accessor
                         struct-shape-field-source-profile-ids-middle-name
                         :shape "uuid" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (last-name :initarg :last-name :initform
                         common-lisp:nil :type
                         (common-lisp:or |uuid| common-lisp:null) :accessor
                         struct-shape-field-source-profile-ids-last-name :shape
                         "uuid" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (birth-date :initarg :birth-date :initform
                         common-lisp:nil :type
                         (common-lisp:or |uuid| common-lisp:null) :accessor
                         struct-shape-field-source-profile-ids-birth-date
                         :shape "uuid" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (gender :initarg :gender :initform common-lisp:nil
                         :type (common-lisp:or |uuid| common-lisp:null)
                         :accessor struct-shape-field-source-profile-ids-gender
                         :shape "uuid" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (phone-number :initarg :phone-number :initform
                         common-lisp:nil :type
                         (common-lisp:or |uuid| common-lisp:null) :accessor
                         struct-shape-field-source-profile-ids-phone-number
                         :shape "uuid" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (mobile-phone-number :initarg :mobile-phone-number
                         :initform common-lisp:nil :type
                         (common-lisp:or |uuid| common-lisp:null) :accessor
                         struct-shape-field-source-profile-ids-mobile-phone-number
                         :shape "uuid" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (home-phone-number :initarg :home-phone-number
                         :initform common-lisp:nil :type
                         (common-lisp:or |uuid| common-lisp:null) :accessor
                         struct-shape-field-source-profile-ids-home-phone-number
                         :shape "uuid" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (business-phone-number :initarg :business-phone-number
                         :initform common-lisp:nil :type
                         (common-lisp:or |uuid| common-lisp:null) :accessor
                         struct-shape-field-source-profile-ids-business-phone-number
                         :shape "uuid" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (email-address :initarg :email-address :initform
                         common-lisp:nil :type
                         (common-lisp:or |uuid| common-lisp:null) :accessor
                         struct-shape-field-source-profile-ids-email-address
                         :shape "uuid" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (personal-email-address :initarg
                         :personal-email-address :initform common-lisp:nil
                         :type (common-lisp:or |uuid| common-lisp:null)
                         :accessor
                         struct-shape-field-source-profile-ids-personal-email-address
                         :shape "uuid" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (business-email-address :initarg
                         :business-email-address :initform common-lisp:nil
                         :type (common-lisp:or |uuid| common-lisp:null)
                         :accessor
                         struct-shape-field-source-profile-ids-business-email-address
                         :shape "uuid" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (address :initarg :address :initform common-lisp:nil
                         :type (common-lisp:or |uuid| common-lisp:null)
                         :accessor
                         struct-shape-field-source-profile-ids-address :shape
                         "uuid" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (shipping-address :initarg :shipping-address :initform
                         common-lisp:nil :type
                         (common-lisp:or |uuid| common-lisp:null) :accessor
                         struct-shape-field-source-profile-ids-shipping-address
                         :shape "uuid" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (mailing-address :initarg :mailing-address :initform
                         common-lisp:nil :type
                         (common-lisp:or |uuid| common-lisp:null) :accessor
                         struct-shape-field-source-profile-ids-mailing-address
                         :shape "uuid" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (billing-address :initarg :billing-address :initform
                         common-lisp:nil :type
                         (common-lisp:or |uuid| common-lisp:null) :accessor
                         struct-shape-field-source-profile-ids-billing-address
                         :shape "uuid" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (attributes :initarg :attributes :initform
                         common-lisp:nil :type
                         (common-lisp:or attribute-source-id-map
                                         common-lisp:null)
                         :accessor
                         struct-shape-field-source-profile-ids-attributes
                         :shape "AttributeSourceIdMap" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-field-source-profile-ids
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'field-source-profile-ids
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'field-source-profile-ids 'make-field-source-profile-ids))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          field-source-profile-ids))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          field-source-profile-ids))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-number))
      (common-lisp:list
       (common-lisp:cons "AccountNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'additional-information))
      (common-lisp:list
       (common-lisp:cons "AdditionalInformation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'party-type))
      (common-lisp:list
       (common-lisp:cons "PartyType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'business-name))
      (common-lisp:list
       (common-lisp:cons "BusinessName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'first-name))
      (common-lisp:list
       (common-lisp:cons "FirstName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'middle-name))
      (common-lisp:list
       (common-lisp:cons "MiddleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-name))
      (common-lisp:list
       (common-lisp:cons "LastName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'birth-date))
      (common-lisp:list
       (common-lisp:cons "BirthDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gender))
      (common-lisp:list
       (common-lisp:cons "Gender"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'phone-number))
      (common-lisp:list
       (common-lisp:cons "PhoneNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mobile-phone-number))
      (common-lisp:list
       (common-lisp:cons "MobilePhoneNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'home-phone-number))
      (common-lisp:list
       (common-lisp:cons "HomePhoneNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'business-phone-number))
      (common-lisp:list
       (common-lisp:cons "BusinessPhoneNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'email-address))
      (common-lisp:list
       (common-lisp:cons "EmailAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'personal-email-address))
      (common-lisp:list
       (common-lisp:cons "PersonalEmailAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'business-email-address))
      (common-lisp:list
       (common-lisp:cons "BusinessEmailAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'address))
      (common-lisp:list
       (common-lisp:cons "Address"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'shipping-address))
      (common-lisp:list
       (common-lisp:cons "ShippingAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mailing-address))
      (common-lisp:list
       (common-lisp:cons "MailingAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'billing-address))
      (common-lisp:list
       (common-lisp:cons "BillingAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attributes))
      (common-lisp:list
       (common-lisp:cons "Attributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          field-source-profile-ids))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass flow-definition common-lisp:nil
                       ((description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or flow-description common-lisp:null)
                         :accessor struct-shape-flow-definition-description
                         :shape "FlowDescription" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (flow-name :initarg :flow-name :initform
                         (common-lisp:error ":flow-name is required") :type
                         (common-lisp:or flow-name common-lisp:null) :accessor
                         struct-shape-flow-definition-flow-name :shape
                         "FlowName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (kms-arn :initarg :kms-arn :initform
                         (common-lisp:error ":kms-arn is required") :type
                         (common-lisp:or kms-arn common-lisp:null) :accessor
                         struct-shape-flow-definition-kms-arn :shape "KmsArn"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (source-flow-config :initarg :source-flow-config
                         :initform
                         (common-lisp:error ":source-flow-config is required")
                         :type
                         (common-lisp:or source-flow-config common-lisp:null)
                         :accessor
                         struct-shape-flow-definition-source-flow-config :shape
                         "SourceFlowConfig" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tasks :initarg :tasks :initform
                         (common-lisp:error ":tasks is required") :type
                         (common-lisp:or tasks common-lisp:null) :accessor
                         struct-shape-flow-definition-tasks :shape "Tasks"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (trigger-config :initarg :trigger-config :initform
                         (common-lisp:error ":trigger-config is required")
                         :type (common-lisp:or trigger-config common-lisp:null)
                         :accessor struct-shape-flow-definition-trigger-config
                         :shape "TriggerConfig" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-flow-definition
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'flow-definition
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'flow-definition 'make-flow-definition))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input flow-definition))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input flow-definition))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'flow-name))
      (common-lisp:list
       (common-lisp:cons "FlowName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-arn))
      (common-lisp:list
       (common-lisp:cons "KmsArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-flow-config))
      (common-lisp:list
       (common-lisp:cons "SourceFlowConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tasks))
      (common-lisp:list
       (common-lisp:cons "Tasks"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trigger-config))
      (common-lisp:list
       (common-lisp:cons "TriggerConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input flow-definition))
   common-lisp:nil))
(common-lisp:deftype flow-description () 'common-lisp:string)
(common-lisp:deftype flow-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass found-by-key-value common-lisp:nil
                       ((key-name :initarg :key-name :initform common-lisp:nil
                         :type (common-lisp:or |name| common-lisp:null)
                         :accessor struct-shape-found-by-key-value-key-name
                         :shape "name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (values :initarg :values :initform common-lisp:nil
                         :type
                         (common-lisp:or |requestValueList| common-lisp:null)
                         :accessor struct-shape-found-by-key-value-values
                         :shape "requestValueList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-found-by-key-value
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'found-by-key-value
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'found-by-key-value 'make-found-by-key-value))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input found-by-key-value))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input found-by-key-value))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-name))
      (common-lisp:list
       (common-lisp:cons "KeyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "Values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input found-by-key-value))
   common-lisp:nil))
(common-lisp:deftype gender () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass get-auto-merging-preview-request common-lisp:nil
                       ((domain-name :initarg :domain-name :initform
                         (common-lisp:error ":domain-name is required") :type
                         (common-lisp:or |name| common-lisp:null) :accessor
                         struct-shape-get-auto-merging-preview-request-domain-name
                         :shape "name" :location "uri" :location-name
                         "DomainName")
                        (consolidation :initarg :consolidation :initform
                         (common-lisp:error ":consolidation is required") :type
                         (common-lisp:or consolidation common-lisp:null)
                         :accessor
                         struct-shape-get-auto-merging-preview-request-consolidation
                         :shape "Consolidation" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (conflict-resolution :initarg :conflict-resolution
                         :initform
                         (common-lisp:error ":conflict-resolution is required")
                         :type
                         (common-lisp:or conflict-resolution common-lisp:null)
                         :accessor
                         struct-shape-get-auto-merging-preview-request-conflict-resolution
                         :shape "ConflictResolution" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (min-allowed-confidence-score-for-merging :initarg
                         :min-allowed-confidence-score-for-merging :initform
                         common-lisp:nil :type
                         (common-lisp:or double0to1 common-lisp:null) :accessor
                         struct-shape-get-auto-merging-preview-request-min-allowed-confidence-score-for-merging
                         :shape "Double0To1" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-auto-merging-preview-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-auto-merging-preview-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-auto-merging-preview-request
                    'make-get-auto-merging-preview-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-auto-merging-preview-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-auto-merging-preview-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'consolidation))
      (common-lisp:list
       (common-lisp:cons "Consolidation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'conflict-resolution))
      (common-lisp:list
       (common-lisp:cons "ConflictResolution"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'min-allowed-confidence-score-for-merging))
      (common-lisp:list
       (common-lisp:cons "MinAllowedConfidenceScoreForMerging"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-auto-merging-preview-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-auto-merging-preview-response common-lisp:nil
                       ((domain-name :initarg :domain-name :initform
                         (common-lisp:error ":domain-name is required") :type
                         (common-lisp:or |name| common-lisp:null) :accessor
                         struct-shape-get-auto-merging-preview-response-domain-name
                         :shape "name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (number-of-matches-in-sample :initarg
                         :number-of-matches-in-sample :initform common-lisp:nil
                         :type
                         (common-lisp:or common-lisp:integer common-lisp:null)
                         :accessor
                         struct-shape-get-auto-merging-preview-response-number-of-matches-in-sample
                         :shape "long" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (number-of-profiles-in-sample :initarg
                         :number-of-profiles-in-sample :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:integer common-lisp:null)
                         :accessor
                         struct-shape-get-auto-merging-preview-response-number-of-profiles-in-sample
                         :shape "long" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (number-of-profiles-will-be-merged :initarg
                         :number-of-profiles-will-be-merged :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:integer common-lisp:null)
                         :accessor
                         struct-shape-get-auto-merging-preview-response-number-of-profiles-will-be-merged
                         :shape "long" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-auto-merging-preview-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-auto-merging-preview-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-auto-merging-preview-response
                    'make-get-auto-merging-preview-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-auto-merging-preview-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-auto-merging-preview-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-name))
      (common-lisp:list
       (common-lisp:cons "DomainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'number-of-matches-in-sample))
      (common-lisp:list
       (common-lisp:cons "NumberOfMatchesInSample"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'number-of-profiles-in-sample))
      (common-lisp:list
       (common-lisp:cons "NumberOfProfilesInSample"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'number-of-profiles-will-be-merged))
      (common-lisp:list
       (common-lisp:cons "NumberOfProfilesWillBeMerged"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-auto-merging-preview-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-calculated-attribute-definition-request
                       common-lisp:nil
                       ((domain-name :initarg :domain-name :initform
                         (common-lisp:error ":domain-name is required") :type
                         (common-lisp:or |name| common-lisp:null) :accessor
                         struct-shape-get-calculated-attribute-definition-request-domain-name
                         :shape "name" :location "uri" :location-name
                         "DomainName")
                        (calculated-attribute-name :initarg
                         :calculated-attribute-name :initform
                         (common-lisp:error
                          ":calculated-attribute-name is required")
                         :type (common-lisp:or |typeName| common-lisp:null)
                         :accessor
                         struct-shape-get-calculated-attribute-definition-request-calculated-attribute-name
                         :shape "typeName" :location "uri" :location-name
                         "CalculatedAttributeName"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-calculated-attribute-definition-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-calculated-attribute-definition-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-calculated-attribute-definition-request
                    'make-get-calculated-attribute-definition-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-calculated-attribute-definition-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-calculated-attribute-definition-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-calculated-attribute-definition-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-calculated-attribute-definition-response
                       common-lisp:nil
                       ((calculated-attribute-name :initarg
                         :calculated-attribute-name :initform common-lisp:nil
                         :type (common-lisp:or |typeName| common-lisp:null)
                         :accessor
                         struct-shape-get-calculated-attribute-definition-response-calculated-attribute-name
                         :shape "typeName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (display-name :initarg :display-name :initform
                         common-lisp:nil :type
                         (common-lisp:or |displayName| common-lisp:null)
                         :accessor
                         struct-shape-get-calculated-attribute-definition-response-display-name
                         :shape "displayName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or |sensitiveText| common-lisp:null)
                         :accessor
                         struct-shape-get-calculated-attribute-definition-response-description
                         :shape "sensitiveText" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (created-at :initarg :created-at :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         struct-shape-get-calculated-attribute-definition-response-created-at
                         :shape "timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-updated-at :initarg :last-updated-at :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         struct-shape-get-calculated-attribute-definition-response-last-updated-at
                         :shape "timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (statistic :initarg :statistic :initform
                         common-lisp:nil :type
                         (common-lisp:or statistic common-lisp:null) :accessor
                         struct-shape-get-calculated-attribute-definition-response-statistic
                         :shape "Statistic" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (conditions :initarg :conditions :initform
                         common-lisp:nil :type
                         (common-lisp:or conditions common-lisp:null) :accessor
                         struct-shape-get-calculated-attribute-definition-response-conditions
                         :shape "Conditions" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (attribute-details :initarg :attribute-details
                         :initform common-lisp:nil :type
                         (common-lisp:or attribute-details common-lisp:null)
                         :accessor
                         struct-shape-get-calculated-attribute-definition-response-attribute-details
                         :shape "AttributeDetails" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         struct-shape-get-calculated-attribute-definition-response-tags
                         :shape "TagMap" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-calculated-attribute-definition-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-calculated-attribute-definition-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-calculated-attribute-definition-response
                    'make-get-calculated-attribute-definition-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-calculated-attribute-definition-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-calculated-attribute-definition-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'calculated-attribute-name))
      (common-lisp:list
       (common-lisp:cons "CalculatedAttributeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-name))
      (common-lisp:list
       (common-lisp:cons "DisplayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "CreatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-at))
      (common-lisp:list
       (common-lisp:cons "LastUpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'statistic))
      (common-lisp:list
       (common-lisp:cons "Statistic"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'conditions))
      (common-lisp:list
       (common-lisp:cons "Conditions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attribute-details))
      (common-lisp:list
       (common-lisp:cons "AttributeDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-calculated-attribute-definition-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-calculated-attribute-for-profile-request
                       common-lisp:nil
                       ((domain-name :initarg :domain-name :initform
                         (common-lisp:error ":domain-name is required") :type
                         (common-lisp:or |name| common-lisp:null) :accessor
                         struct-shape-get-calculated-attribute-for-profile-request-domain-name
                         :shape "name" :location "uri" :location-name
                         "DomainName")
                        (profile-id :initarg :profile-id :initform
                         (common-lisp:error ":profile-id is required") :type
                         (common-lisp:or |uuid| common-lisp:null) :accessor
                         struct-shape-get-calculated-attribute-for-profile-request-profile-id
                         :shape "uuid" :location "uri" :location-name
                         "ProfileId")
                        (calculated-attribute-name :initarg
                         :calculated-attribute-name :initform
                         (common-lisp:error
                          ":calculated-attribute-name is required")
                         :type (common-lisp:or |typeName| common-lisp:null)
                         :accessor
                         struct-shape-get-calculated-attribute-for-profile-request-calculated-attribute-name
                         :shape "typeName" :location "uri" :location-name
                         "CalculatedAttributeName"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-calculated-attribute-for-profile-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-calculated-attribute-for-profile-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-calculated-attribute-for-profile-request
                    'make-get-calculated-attribute-for-profile-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-calculated-attribute-for-profile-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-calculated-attribute-for-profile-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-calculated-attribute-for-profile-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-calculated-attribute-for-profile-response
                       common-lisp:nil
                       ((calculated-attribute-name :initarg
                         :calculated-attribute-name :initform common-lisp:nil
                         :type (common-lisp:or |typeName| common-lisp:null)
                         :accessor
                         struct-shape-get-calculated-attribute-for-profile-response-calculated-attribute-name
                         :shape "typeName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (display-name :initarg :display-name :initform
                         common-lisp:nil :type
                         (common-lisp:or |displayName| common-lisp:null)
                         :accessor
                         struct-shape-get-calculated-attribute-for-profile-response-display-name
                         :shape "displayName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (is-data-partial :initarg :is-data-partial :initform
                         common-lisp:nil :type
                         (common-lisp:or |string1To255| common-lisp:null)
                         :accessor
                         struct-shape-get-calculated-attribute-for-profile-response-is-data-partial
                         :shape "string1To255" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (value :initarg :value :initform common-lisp:nil :type
                         (common-lisp:or |string1To255| common-lisp:null)
                         :accessor
                         struct-shape-get-calculated-attribute-for-profile-response-value
                         :shape "string1To255" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-calculated-attribute-for-profile-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-calculated-attribute-for-profile-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-calculated-attribute-for-profile-response
                    'make-get-calculated-attribute-for-profile-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-calculated-attribute-for-profile-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-calculated-attribute-for-profile-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'calculated-attribute-name))
      (common-lisp:list
       (common-lisp:cons "CalculatedAttributeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-name))
      (common-lisp:list
       (common-lisp:cons "DisplayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-data-partial))
      (common-lisp:list
       (common-lisp:cons "IsDataPartial"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-calculated-attribute-for-profile-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-domain-request common-lisp:nil
                       ((domain-name :initarg :domain-name :initform
                         (common-lisp:error ":domain-name is required") :type
                         (common-lisp:or |name| common-lisp:null) :accessor
                         struct-shape-get-domain-request-domain-name :shape
                         "name" :location "uri" :location-name "DomainName"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-domain-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-domain-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-domain-request 'make-get-domain-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-domain-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-domain-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-domain-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-domain-response common-lisp:nil
                       ((domain-name :initarg :domain-name :initform
                         (common-lisp:error ":domain-name is required") :type
                         (common-lisp:or |name| common-lisp:null) :accessor
                         struct-shape-get-domain-response-domain-name :shape
                         "name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (default-expiration-days :initarg
                         :default-expiration-days :initform common-lisp:nil
                         :type
                         (common-lisp:or |expirationDaysInteger|
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-domain-response-default-expiration-days
                         :shape "expirationDaysInteger" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (default-encryption-key :initarg
                         :default-encryption-key :initform common-lisp:nil
                         :type
                         (common-lisp:or |encryptionKey| common-lisp:null)
                         :accessor
                         struct-shape-get-domain-response-default-encryption-key
                         :shape "encryptionKey" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dead-letter-queue-url :initarg :dead-letter-queue-url
                         :initform common-lisp:nil :type
                         (common-lisp:or |sqsQueueUrl| common-lisp:null)
                         :accessor
                         struct-shape-get-domain-response-dead-letter-queue-url
                         :shape "sqsQueueUrl" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (stats :initarg :stats :initform common-lisp:nil :type
                         (common-lisp:or domain-stats common-lisp:null)
                         :accessor struct-shape-get-domain-response-stats
                         :shape "DomainStats" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (matching :initarg :matching :initform common-lisp:nil
                         :type
                         (common-lisp:or matching-response common-lisp:null)
                         :accessor struct-shape-get-domain-response-matching
                         :shape "MatchingResponse" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (rule-based-matching :initarg :rule-based-matching
                         :initform common-lisp:nil :type
                         (common-lisp:or rule-based-matching-response
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-domain-response-rule-based-matching
                         :shape "RuleBasedMatchingResponse" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (created-at :initarg :created-at :initform
                         (common-lisp:error ":created-at is required") :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor struct-shape-get-domain-response-created-at
                         :shape "timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-updated-at :initarg :last-updated-at :initform
                         (common-lisp:error ":last-updated-at is required")
                         :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         struct-shape-get-domain-response-last-updated-at
                         :shape "timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         struct-shape-get-domain-response-tags :shape "TagMap"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-domain-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-domain-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-domain-response 'make-get-domain-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-domain-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-domain-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-name))
      (common-lisp:list
       (common-lisp:cons "DomainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-expiration-days))
      (common-lisp:list
       (common-lisp:cons "DefaultExpirationDays"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-encryption-key))
      (common-lisp:list
       (common-lisp:cons "DefaultEncryptionKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dead-letter-queue-url))
      (common-lisp:list
       (common-lisp:cons "DeadLetterQueueUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stats))
      (common-lisp:list
       (common-lisp:cons "Stats"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'matching))
      (common-lisp:list
       (common-lisp:cons "Matching"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-based-matching))
      (common-lisp:list
       (common-lisp:cons "RuleBasedMatching"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "CreatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-at))
      (common-lisp:list
       (common-lisp:cons "LastUpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-domain-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-event-stream-request common-lisp:nil
                       ((domain-name :initarg :domain-name :initform
                         (common-lisp:error ":domain-name is required") :type
                         (common-lisp:or |name| common-lisp:null) :accessor
                         struct-shape-get-event-stream-request-domain-name
                         :shape "name" :location "uri" :location-name
                         "DomainName")
                        (event-stream-name :initarg :event-stream-name
                         :initform
                         (common-lisp:error ":event-stream-name is required")
                         :type (common-lisp:or |name| common-lisp:null)
                         :accessor
                         struct-shape-get-event-stream-request-event-stream-name
                         :shape "name" :location "uri" :location-name
                         "EventStreamName"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-event-stream-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-event-stream-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-event-stream-request 'make-get-event-stream-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-event-stream-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-event-stream-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-event-stream-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-event-stream-response common-lisp:nil
                       ((domain-name :initarg :domain-name :initform
                         (common-lisp:error ":domain-name is required") :type
                         (common-lisp:or |name| common-lisp:null) :accessor
                         struct-shape-get-event-stream-response-domain-name
                         :shape "name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (event-stream-arn :initarg :event-stream-arn :initform
                         (common-lisp:error ":event-stream-arn is required")
                         :type (common-lisp:or |string1To255| common-lisp:null)
                         :accessor
                         struct-shape-get-event-stream-response-event-stream-arn
                         :shape "string1To255" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (created-at :initarg :created-at :initform
                         (common-lisp:error ":created-at is required") :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         struct-shape-get-event-stream-response-created-at
                         :shape "timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (state :initarg :state :initform
                         (common-lisp:error ":state is required") :type
                         (common-lisp:or event-stream-state common-lisp:null)
                         :accessor struct-shape-get-event-stream-response-state
                         :shape "EventStreamState" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (stopped-since :initarg :stopped-since :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         struct-shape-get-event-stream-response-stopped-since
                         :shape "timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (destination-details :initarg :destination-details
                         :initform
                         (common-lisp:error ":destination-details is required")
                         :type
                         (common-lisp:or event-stream-destination-details
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-event-stream-response-destination-details
                         :shape "EventStreamDestinationDetails" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         struct-shape-get-event-stream-response-tags :shape
                         "TagMap" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-event-stream-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-event-stream-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-event-stream-response
                    'make-get-event-stream-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-event-stream-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-event-stream-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-name))
      (common-lisp:list
       (common-lisp:cons "DomainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-stream-arn))
      (common-lisp:list
       (common-lisp:cons "EventStreamArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "CreatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stopped-since))
      (common-lisp:list
       (common-lisp:cons "StoppedSince"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination-details))
      (common-lisp:list
       (common-lisp:cons "DestinationDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-event-stream-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-identity-resolution-job-request common-lisp:nil
                       ((domain-name :initarg :domain-name :initform
                         (common-lisp:error ":domain-name is required") :type
                         (common-lisp:or |name| common-lisp:null) :accessor
                         struct-shape-get-identity-resolution-job-request-domain-name
                         :shape "name" :location "uri" :location-name
                         "DomainName")
                        (job-id :initarg :job-id :initform
                         (common-lisp:error ":job-id is required") :type
                         (common-lisp:or |uuid| common-lisp:null) :accessor
                         struct-shape-get-identity-resolution-job-request-job-id
                         :shape "uuid" :location "uri" :location-name "JobId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-identity-resolution-job-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-identity-resolution-job-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-identity-resolution-job-request
                    'make-get-identity-resolution-job-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-identity-resolution-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-identity-resolution-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-identity-resolution-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-identity-resolution-job-response common-lisp:nil
                       ((domain-name :initarg :domain-name :initform
                         common-lisp:nil :type
                         (common-lisp:or |name| common-lisp:null) :accessor
                         struct-shape-get-identity-resolution-job-response-domain-name
                         :shape "name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (job-id :initarg :job-id :initform common-lisp:nil
                         :type (common-lisp:or |uuid| common-lisp:null)
                         :accessor
                         struct-shape-get-identity-resolution-job-response-job-id
                         :shape "uuid" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or identity-resolution-job-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-identity-resolution-job-response-status
                         :shape "IdentityResolutionJobStatus" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (message :initarg :message :initform common-lisp:nil
                         :type (common-lisp:or |stringTo2048| common-lisp:null)
                         :accessor
                         struct-shape-get-identity-resolution-job-response-message
                         :shape "stringTo2048" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (job-start-time :initarg :job-start-time :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         struct-shape-get-identity-resolution-job-response-job-start-time
                         :shape "timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (job-end-time :initarg :job-end-time :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         struct-shape-get-identity-resolution-job-response-job-end-time
                         :shape "timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-updated-at :initarg :last-updated-at :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         struct-shape-get-identity-resolution-job-response-last-updated-at
                         :shape "timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (job-expiration-time :initarg :job-expiration-time
                         :initform common-lisp:nil :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         struct-shape-get-identity-resolution-job-response-job-expiration-time
                         :shape "timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (auto-merging :initarg :auto-merging :initform
                         common-lisp:nil :type
                         (common-lisp:or auto-merging common-lisp:null)
                         :accessor
                         struct-shape-get-identity-resolution-job-response-auto-merging
                         :shape "AutoMerging" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (exporting-location :initarg :exporting-location
                         :initform common-lisp:nil :type
                         (common-lisp:or exporting-location common-lisp:null)
                         :accessor
                         struct-shape-get-identity-resolution-job-response-exporting-location
                         :shape "ExportingLocation" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (job-stats :initarg :job-stats :initform
                         common-lisp:nil :type
                         (common-lisp:or job-stats common-lisp:null) :accessor
                         struct-shape-get-identity-resolution-job-response-job-stats
                         :shape "JobStats" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-identity-resolution-job-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-identity-resolution-job-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-identity-resolution-job-response
                    'make-get-identity-resolution-job-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-identity-resolution-job-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-identity-resolution-job-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-name))
      (common-lisp:list
       (common-lisp:cons "DomainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "JobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-start-time))
      (common-lisp:list
       (common-lisp:cons "JobStartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-end-time))
      (common-lisp:list
       (common-lisp:cons "JobEndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-at))
      (common-lisp:list
       (common-lisp:cons "LastUpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-expiration-time))
      (common-lisp:list
       (common-lisp:cons "JobExpirationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auto-merging))
      (common-lisp:list
       (common-lisp:cons "AutoMerging"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'exporting-location))
      (common-lisp:list
       (common-lisp:cons "ExportingLocation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-stats))
      (common-lisp:list
       (common-lisp:cons "JobStats"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-identity-resolution-job-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-integration-request common-lisp:nil
                       ((domain-name :initarg :domain-name :initform
                         (common-lisp:error ":domain-name is required") :type
                         (common-lisp:or |name| common-lisp:null) :accessor
                         struct-shape-get-integration-request-domain-name
                         :shape "name" :location "uri" :location-name
                         "DomainName")
                        (uri :initarg :uri :initform
                         (common-lisp:error ":uri is required") :type
                         (common-lisp:or |string1To255| common-lisp:null)
                         :accessor struct-shape-get-integration-request-uri
                         :shape "string1To255" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-integration-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-integration-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-integration-request 'make-get-integration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-integration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-integration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'uri))
      (common-lisp:list
       (common-lisp:cons "Uri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-integration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-integration-response common-lisp:nil
                       ((domain-name :initarg :domain-name :initform
                         (common-lisp:error ":domain-name is required") :type
                         (common-lisp:or |name| common-lisp:null) :accessor
                         struct-shape-get-integration-response-domain-name
                         :shape "name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (uri :initarg :uri :initform
                         (common-lisp:error ":uri is required") :type
                         (common-lisp:or |string1To255| common-lisp:null)
                         :accessor struct-shape-get-integration-response-uri
                         :shape "string1To255" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (object-type-name :initarg :object-type-name :initform
                         common-lisp:nil :type
                         (common-lisp:or |typeName| common-lisp:null) :accessor
                         struct-shape-get-integration-response-object-type-name
                         :shape "typeName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (created-at :initarg :created-at :initform
                         (common-lisp:error ":created-at is required") :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         struct-shape-get-integration-response-created-at
                         :shape "timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-updated-at :initarg :last-updated-at :initform
                         (common-lisp:error ":last-updated-at is required")
                         :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         struct-shape-get-integration-response-last-updated-at
                         :shape "timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         struct-shape-get-integration-response-tags :shape
                         "TagMap" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (object-type-names :initarg :object-type-names
                         :initform common-lisp:nil :type
                         (common-lisp:or object-type-names common-lisp:null)
                         :accessor
                         struct-shape-get-integration-response-object-type-names
                         :shape "ObjectTypeNames" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (workflow-id :initarg :workflow-id :initform
                         common-lisp:nil :type
                         (common-lisp:or |string1To255| common-lisp:null)
                         :accessor
                         struct-shape-get-integration-response-workflow-id
                         :shape "string1To255" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (is-unstructured :initarg :is-unstructured :initform
                         common-lisp:nil :type
                         (common-lisp:or |optionalBoolean| common-lisp:null)
                         :accessor
                         struct-shape-get-integration-response-is-unstructured
                         :shape "optionalBoolean" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-integration-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-integration-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-integration-response 'make-get-integration-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-integration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-integration-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-name))
      (common-lisp:list
       (common-lisp:cons "DomainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'uri))
      (common-lisp:list
       (common-lisp:cons "Uri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'object-type-name))
      (common-lisp:list
       (common-lisp:cons "ObjectTypeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "CreatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-at))
      (common-lisp:list
       (common-lisp:cons "LastUpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'object-type-names))
      (common-lisp:list
       (common-lisp:cons "ObjectTypeNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workflow-id))
      (common-lisp:list
       (common-lisp:cons "WorkflowId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-unstructured))
      (common-lisp:list
       (common-lisp:cons "IsUnstructured"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-integration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-matches-request common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or |token| common-lisp:null) :accessor
                         struct-shape-get-matches-request-next-token :shape
                         "token" :location "querystring" :location-name
                         "next-token")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or |maxSize100| common-lisp:null)
                         :accessor struct-shape-get-matches-request-max-results
                         :shape "maxSize100" :location "querystring"
                         :location-name "max-results")
                        (domain-name :initarg :domain-name :initform
                         (common-lisp:error ":domain-name is required") :type
                         (common-lisp:or |name| common-lisp:null) :accessor
                         struct-shape-get-matches-request-domain-name :shape
                         "name" :location "uri" :location-name "DomainName"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-matches-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-matches-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-matches-request 'make-get-matches-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-matches-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-matches-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-matches-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-matches-response common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or |token| common-lisp:null) :accessor
                         struct-shape-get-matches-response-next-token :shape
                         "token" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (match-generation-date :initarg :match-generation-date
                         :initform common-lisp:nil :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         struct-shape-get-matches-response-match-generation-date
                         :shape "timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (potential-matches :initarg :potential-matches
                         :initform common-lisp:nil :type
                         (common-lisp:or |matchesNumber| common-lisp:null)
                         :accessor
                         struct-shape-get-matches-response-potential-matches
                         :shape "matchesNumber" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (matches :initarg :matches :initform common-lisp:nil
                         :type (common-lisp:or matches-list common-lisp:null)
                         :accessor struct-shape-get-matches-response-matches
                         :shape "MatchesList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-matches-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-matches-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-matches-response 'make-get-matches-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-matches-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-matches-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'match-generation-date))
      (common-lisp:list
       (common-lisp:cons "MatchGenerationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'potential-matches))
      (common-lisp:list
       (common-lisp:cons "PotentialMatches"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'matches))
      (common-lisp:list
       (common-lisp:cons "Matches"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-matches-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-profile-object-type-request common-lisp:nil
                       ((domain-name :initarg :domain-name :initform
                         (common-lisp:error ":domain-name is required") :type
                         (common-lisp:or |name| common-lisp:null) :accessor
                         struct-shape-get-profile-object-type-request-domain-name
                         :shape "name" :location "uri" :location-name
                         "DomainName")
                        (object-type-name :initarg :object-type-name :initform
                         (common-lisp:error ":object-type-name is required")
                         :type (common-lisp:or |typeName| common-lisp:null)
                         :accessor
                         struct-shape-get-profile-object-type-request-object-type-name
                         :shape "typeName" :location "uri" :location-name
                         "ObjectTypeName"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-profile-object-type-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-profile-object-type-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-profile-object-type-request
                    'make-get-profile-object-type-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-profile-object-type-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-profile-object-type-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-profile-object-type-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-profile-object-type-response common-lisp:nil
                       ((object-type-name :initarg :object-type-name :initform
                         (common-lisp:error ":object-type-name is required")
                         :type (common-lisp:or |typeName| common-lisp:null)
                         :accessor
                         struct-shape-get-profile-object-type-response-object-type-name
                         :shape "typeName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         (common-lisp:error ":description is required") :type
                         (common-lisp:or |sensitiveText| common-lisp:null)
                         :accessor
                         struct-shape-get-profile-object-type-response-description
                         :shape "sensitiveText" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (template-id :initarg :template-id :initform
                         common-lisp:nil :type
                         (common-lisp:or |name| common-lisp:null) :accessor
                         struct-shape-get-profile-object-type-response-template-id
                         :shape "name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (expiration-days :initarg :expiration-days :initform
                         common-lisp:nil :type
                         (common-lisp:or |expirationDaysInteger|
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-profile-object-type-response-expiration-days
                         :shape "expirationDaysInteger" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (encryption-key :initarg :encryption-key :initform
                         common-lisp:nil :type
                         (common-lisp:or |encryptionKey| common-lisp:null)
                         :accessor
                         struct-shape-get-profile-object-type-response-encryption-key
                         :shape "encryptionKey" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (allow-profile-creation :initarg
                         :allow-profile-creation :initform common-lisp:nil
                         :type
                         (common-lisp:or common-lisp:boolean common-lisp:null)
                         :accessor
                         struct-shape-get-profile-object-type-response-allow-profile-creation
                         :shape "boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (source-last-updated-timestamp-format :initarg
                         :source-last-updated-timestamp-format :initform
                         common-lisp:nil :type
                         (common-lisp:or |string1To255| common-lisp:null)
                         :accessor
                         struct-shape-get-profile-object-type-response-source-last-updated-timestamp-format
                         :shape "string1To255" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (fields :initarg :fields :initform common-lisp:nil
                         :type (common-lisp:or field-map common-lisp:null)
                         :accessor
                         struct-shape-get-profile-object-type-response-fields
                         :shape "FieldMap" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (keys :initarg :keys :initform common-lisp:nil :type
                         (common-lisp:or key-map common-lisp:null) :accessor
                         struct-shape-get-profile-object-type-response-keys
                         :shape "KeyMap" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (created-at :initarg :created-at :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         struct-shape-get-profile-object-type-response-created-at
                         :shape "timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-updated-at :initarg :last-updated-at :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         struct-shape-get-profile-object-type-response-last-updated-at
                         :shape "timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         struct-shape-get-profile-object-type-response-tags
                         :shape "TagMap" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-profile-object-type-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-profile-object-type-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-profile-object-type-response
                    'make-get-profile-object-type-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-profile-object-type-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-profile-object-type-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'object-type-name))
      (common-lisp:list
       (common-lisp:cons "ObjectTypeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-id))
      (common-lisp:list
       (common-lisp:cons "TemplateId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expiration-days))
      (common-lisp:list
       (common-lisp:cons "ExpirationDays"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encryption-key))
      (common-lisp:list
       (common-lisp:cons "EncryptionKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'allow-profile-creation))
      (common-lisp:list
       (common-lisp:cons "AllowProfileCreation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-last-updated-timestamp-format))
      (common-lisp:list
       (common-lisp:cons "SourceLastUpdatedTimestampFormat"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fields))
      (common-lisp:list
       (common-lisp:cons "Fields"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'keys))
      (common-lisp:list
       (common-lisp:cons "Keys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "CreatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-at))
      (common-lisp:list
       (common-lisp:cons "LastUpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-profile-object-type-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-profile-object-type-template-request common-lisp:nil
                       ((template-id :initarg :template-id :initform
                         (common-lisp:error ":template-id is required") :type
                         (common-lisp:or |name| common-lisp:null) :accessor
                         struct-shape-get-profile-object-type-template-request-template-id
                         :shape "name" :location "uri" :location-name
                         "TemplateId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-profile-object-type-template-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-profile-object-type-template-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-profile-object-type-template-request
                    'make-get-profile-object-type-template-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-profile-object-type-template-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-profile-object-type-template-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-profile-object-type-template-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-profile-object-type-template-response
                       common-lisp:nil
                       ((template-id :initarg :template-id :initform
                         common-lisp:nil :type
                         (common-lisp:or |name| common-lisp:null) :accessor
                         struct-shape-get-profile-object-type-template-response-template-id
                         :shape "name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (source-name :initarg :source-name :initform
                         common-lisp:nil :type
                         (common-lisp:or |name| common-lisp:null) :accessor
                         struct-shape-get-profile-object-type-template-response-source-name
                         :shape "name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (source-object :initarg :source-object :initform
                         common-lisp:nil :type
                         (common-lisp:or |name| common-lisp:null) :accessor
                         struct-shape-get-profile-object-type-template-response-source-object
                         :shape "name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (allow-profile-creation :initarg
                         :allow-profile-creation :initform common-lisp:nil
                         :type
                         (common-lisp:or common-lisp:boolean common-lisp:null)
                         :accessor
                         struct-shape-get-profile-object-type-template-response-allow-profile-creation
                         :shape "boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (source-last-updated-timestamp-format :initarg
                         :source-last-updated-timestamp-format :initform
                         common-lisp:nil :type
                         (common-lisp:or |string1To255| common-lisp:null)
                         :accessor
                         struct-shape-get-profile-object-type-template-response-source-last-updated-timestamp-format
                         :shape "string1To255" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (fields :initarg :fields :initform common-lisp:nil
                         :type (common-lisp:or field-map common-lisp:null)
                         :accessor
                         struct-shape-get-profile-object-type-template-response-fields
                         :shape "FieldMap" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (keys :initarg :keys :initform common-lisp:nil :type
                         (common-lisp:or key-map common-lisp:null) :accessor
                         struct-shape-get-profile-object-type-template-response-keys
                         :shape "KeyMap" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-profile-object-type-template-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-profile-object-type-template-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-profile-object-type-template-response
                    'make-get-profile-object-type-template-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-profile-object-type-template-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-profile-object-type-template-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-id))
      (common-lisp:list
       (common-lisp:cons "TemplateId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-name))
      (common-lisp:list
       (common-lisp:cons "SourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-object))
      (common-lisp:list
       (common-lisp:cons "SourceObject"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'allow-profile-creation))
      (common-lisp:list
       (common-lisp:cons "AllowProfileCreation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-last-updated-timestamp-format))
      (common-lisp:list
       (common-lisp:cons "SourceLastUpdatedTimestampFormat"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fields))
      (common-lisp:list
       (common-lisp:cons "Fields"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'keys))
      (common-lisp:list
       (common-lisp:cons "Keys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-profile-object-type-template-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-similar-profiles-request common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or |token| common-lisp:null) :accessor
                         struct-shape-get-similar-profiles-request-next-token
                         :shape "token" :location "querystring" :location-name
                         "next-token")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or |maxSize100| common-lisp:null)
                         :accessor
                         struct-shape-get-similar-profiles-request-max-results
                         :shape "maxSize100" :location "querystring"
                         :location-name "max-results")
                        (domain-name :initarg :domain-name :initform
                         (common-lisp:error ":domain-name is required") :type
                         (common-lisp:or |name| common-lisp:null) :accessor
                         struct-shape-get-similar-profiles-request-domain-name
                         :shape "name" :location "uri" :location-name
                         "DomainName")
                        (match-type :initarg :match-type :initform
                         (common-lisp:error ":match-type is required") :type
                         (common-lisp:or match-type common-lisp:null) :accessor
                         struct-shape-get-similar-profiles-request-match-type
                         :shape "MatchType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (search-key :initarg :search-key :initform
                         (common-lisp:error ":search-key is required") :type
                         (common-lisp:or |string1To255| common-lisp:null)
                         :accessor
                         struct-shape-get-similar-profiles-request-search-key
                         :shape "string1To255" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (search-value :initarg :search-value :initform
                         (common-lisp:error ":search-value is required") :type
                         (common-lisp:or |string1To255| common-lisp:null)
                         :accessor
                         struct-shape-get-similar-profiles-request-search-value
                         :shape "string1To255" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-similar-profiles-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-similar-profiles-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-similar-profiles-request
                    'make-get-similar-profiles-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-similar-profiles-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-similar-profiles-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'match-type))
      (common-lisp:list
       (common-lisp:cons "MatchType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'search-key))
      (common-lisp:list
       (common-lisp:cons "SearchKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'search-value))
      (common-lisp:list
       (common-lisp:cons "SearchValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-similar-profiles-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-similar-profiles-response common-lisp:nil
                       ((profile-ids :initarg :profile-ids :initform
                         common-lisp:nil :type
                         (common-lisp:or profile-id-list common-lisp:null)
                         :accessor
                         struct-shape-get-similar-profiles-response-profile-ids
                         :shape "ProfileIdList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (match-id :initarg :match-id :initform common-lisp:nil
                         :type (common-lisp:or |string1To255| common-lisp:null)
                         :accessor
                         struct-shape-get-similar-profiles-response-match-id
                         :shape "string1To255" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (match-type :initarg :match-type :initform
                         common-lisp:nil :type
                         (common-lisp:or match-type common-lisp:null) :accessor
                         struct-shape-get-similar-profiles-response-match-type
                         :shape "MatchType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (rule-level :initarg :rule-level :initform
                         common-lisp:nil :type
                         (common-lisp:or rule-level common-lisp:null) :accessor
                         struct-shape-get-similar-profiles-response-rule-level
                         :shape "RuleLevel" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (confidence-score :initarg :confidence-score :initform
                         common-lisp:nil :type
                         (common-lisp:or double common-lisp:null) :accessor
                         struct-shape-get-similar-profiles-response-confidence-score
                         :shape "Double" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or |token| common-lisp:null) :accessor
                         struct-shape-get-similar-profiles-response-next-token
                         :shape "token" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-similar-profiles-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-similar-profiles-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-similar-profiles-response
                    'make-get-similar-profiles-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-similar-profiles-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-similar-profiles-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'profile-ids))
      (common-lisp:list
       (common-lisp:cons "ProfileIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'match-id))
      (common-lisp:list
       (common-lisp:cons "MatchId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'match-type))
      (common-lisp:list
       (common-lisp:cons "MatchType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-level))
      (common-lisp:list
       (common-lisp:cons "RuleLevel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'confidence-score))
      (common-lisp:list
       (common-lisp:cons "ConfidenceScore"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-similar-profiles-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-workflow-request common-lisp:nil
                       ((domain-name :initarg :domain-name :initform
                         (common-lisp:error ":domain-name is required") :type
                         (common-lisp:or |name| common-lisp:null) :accessor
                         struct-shape-get-workflow-request-domain-name :shape
                         "name" :location "uri" :location-name "DomainName")
                        (workflow-id :initarg :workflow-id :initform
                         (common-lisp:error ":workflow-id is required") :type
                         (common-lisp:or |uuid| common-lisp:null) :accessor
                         struct-shape-get-workflow-request-workflow-id :shape
                         "uuid" :location "uri" :location-name "WorkflowId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-workflow-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-workflow-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-workflow-request 'make-get-workflow-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-workflow-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-workflow-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-workflow-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-workflow-response common-lisp:nil
                       ((workflow-id :initarg :workflow-id :initform
                         common-lisp:nil :type
                         (common-lisp:or |uuid| common-lisp:null) :accessor
                         struct-shape-get-workflow-response-workflow-id :shape
                         "uuid" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (workflow-type :initarg :workflow-type :initform
                         common-lisp:nil :type
                         (common-lisp:or workflow-type common-lisp:null)
                         :accessor
                         struct-shape-get-workflow-response-workflow-type
                         :shape "WorkflowType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or status common-lisp:null)
                         :accessor struct-shape-get-workflow-response-status
                         :shape "Status" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (error-description :initarg :error-description
                         :initform common-lisp:nil :type
                         (common-lisp:or |string1To255| common-lisp:null)
                         :accessor
                         struct-shape-get-workflow-response-error-description
                         :shape "string1To255" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (start-date :initarg :start-date :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         struct-shape-get-workflow-response-start-date :shape
                         "timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (last-updated-at :initarg :last-updated-at :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         struct-shape-get-workflow-response-last-updated-at
                         :shape "timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (attributes :initarg :attributes :initform
                         common-lisp:nil :type
                         (common-lisp:or workflow-attributes common-lisp:null)
                         :accessor
                         struct-shape-get-workflow-response-attributes :shape
                         "WorkflowAttributes" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (metrics :initarg :metrics :initform common-lisp:nil
                         :type
                         (common-lisp:or workflow-metrics common-lisp:null)
                         :accessor struct-shape-get-workflow-response-metrics
                         :shape "WorkflowMetrics" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-workflow-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-workflow-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-workflow-response 'make-get-workflow-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-workflow-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-workflow-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workflow-id))
      (common-lisp:list
       (common-lisp:cons "WorkflowId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workflow-type))
      (common-lisp:list
       (common-lisp:cons "WorkflowType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-description))
      (common-lisp:list
       (common-lisp:cons "ErrorDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-date))
      (common-lisp:list
       (common-lisp:cons "StartDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-at))
      (common-lisp:list
       (common-lisp:cons "LastUpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attributes))
      (common-lisp:list
       (common-lisp:cons "Attributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metrics))
      (common-lisp:list
       (common-lisp:cons "Metrics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-workflow-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-workflow-steps-request common-lisp:nil
                       ((domain-name :initarg :domain-name :initform
                         (common-lisp:error ":domain-name is required") :type
                         (common-lisp:or |name| common-lisp:null) :accessor
                         struct-shape-get-workflow-steps-request-domain-name
                         :shape "name" :location "uri" :location-name
                         "DomainName")
                        (workflow-id :initarg :workflow-id :initform
                         (common-lisp:error ":workflow-id is required") :type
                         (common-lisp:or |uuid| common-lisp:null) :accessor
                         struct-shape-get-workflow-steps-request-workflow-id
                         :shape "uuid" :location "uri" :location-name
                         "WorkflowId")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or |token| common-lisp:null) :accessor
                         struct-shape-get-workflow-steps-request-next-token
                         :shape "token" :location "querystring" :location-name
                         "next-token")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or |maxSize100| common-lisp:null)
                         :accessor
                         struct-shape-get-workflow-steps-request-max-results
                         :shape "maxSize100" :location "querystring"
                         :location-name "max-results"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-workflow-steps-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-workflow-steps-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-workflow-steps-request
                    'make-get-workflow-steps-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-workflow-steps-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-workflow-steps-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-workflow-steps-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-workflow-steps-response common-lisp:nil
                       ((workflow-id :initarg :workflow-id :initform
                         common-lisp:nil :type
                         (common-lisp:or |uuid| common-lisp:null) :accessor
                         struct-shape-get-workflow-steps-response-workflow-id
                         :shape "uuid" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (workflow-type :initarg :workflow-type :initform
                         common-lisp:nil :type
                         (common-lisp:or workflow-type common-lisp:null)
                         :accessor
                         struct-shape-get-workflow-steps-response-workflow-type
                         :shape "WorkflowType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (items :initarg :items :initform common-lisp:nil :type
                         (common-lisp:or workflow-steps-list common-lisp:null)
                         :accessor
                         struct-shape-get-workflow-steps-response-items :shape
                         "WorkflowStepsList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or |token| common-lisp:null) :accessor
                         struct-shape-get-workflow-steps-response-next-token
                         :shape "token" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-workflow-steps-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-workflow-steps-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-workflow-steps-response
                    'make-get-workflow-steps-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-workflow-steps-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-workflow-steps-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workflow-id))
      (common-lisp:list
       (common-lisp:cons "WorkflowId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workflow-type))
      (common-lisp:list
       (common-lisp:cons "WorkflowType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'items))
      (common-lisp:list
       (common-lisp:cons "Items"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-workflow-steps-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass identity-resolution-job common-lisp:nil
                       ((domain-name :initarg :domain-name :initform
                         common-lisp:nil :type
                         (common-lisp:or |name| common-lisp:null) :accessor
                         struct-shape-identity-resolution-job-domain-name
                         :shape "name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (job-id :initarg :job-id :initform common-lisp:nil
                         :type (common-lisp:or |uuid| common-lisp:null)
                         :accessor struct-shape-identity-resolution-job-job-id
                         :shape "uuid" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or identity-resolution-job-status
                                         common-lisp:null)
                         :accessor struct-shape-identity-resolution-job-status
                         :shape "IdentityResolutionJobStatus" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (job-start-time :initarg :job-start-time :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         struct-shape-identity-resolution-job-job-start-time
                         :shape "timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (job-end-time :initarg :job-end-time :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         struct-shape-identity-resolution-job-job-end-time
                         :shape "timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (job-stats :initarg :job-stats :initform
                         common-lisp:nil :type
                         (common-lisp:or job-stats common-lisp:null) :accessor
                         struct-shape-identity-resolution-job-job-stats :shape
                         "JobStats" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (exporting-location :initarg :exporting-location
                         :initform common-lisp:nil :type
                         (common-lisp:or exporting-location common-lisp:null)
                         :accessor
                         struct-shape-identity-resolution-job-exporting-location
                         :shape "ExportingLocation" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (message :initarg :message :initform common-lisp:nil
                         :type (common-lisp:or |stringTo2048| common-lisp:null)
                         :accessor struct-shape-identity-resolution-job-message
                         :shape "stringTo2048" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-identity-resolution-job
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'identity-resolution-job
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'identity-resolution-job 'make-identity-resolution-job))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          identity-resolution-job))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          identity-resolution-job))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-name))
      (common-lisp:list
       (common-lisp:cons "DomainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "JobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-start-time))
      (common-lisp:list
       (common-lisp:cons "JobStartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-end-time))
      (common-lisp:list
       (common-lisp:cons "JobEndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-stats))
      (common-lisp:list
       (common-lisp:cons "JobStats"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'exporting-location))
      (common-lisp:list
       (common-lisp:cons "ExportingLocation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          identity-resolution-job))
   common-lisp:nil))
(common-lisp:deftype identity-resolution-job-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype identity-resolution-jobs-list ()
   '(trivial-types:proper-list identity-resolution-job))
 (common-lisp:defun make-identity-resolution-jobs-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list identity-resolution-job))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass incremental-pull-config common-lisp:nil
                       ((datetime-type-field-name :initarg
                         :datetime-type-field-name :initform common-lisp:nil
                         :type
                         (common-lisp:or datetime-type-field-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-incremental-pull-config-datetime-type-field-name
                         :shape "DatetimeTypeFieldName" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-incremental-pull-config
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'incremental-pull-config
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'incremental-pull-config 'make-incremental-pull-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          incremental-pull-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          incremental-pull-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'datetime-type-field-name))
      (common-lisp:list
       (common-lisp:cons "DatetimeTypeFieldName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          incremental-pull-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass integration-config common-lisp:nil
                       ((appflow-integration :initarg :appflow-integration
                         :initform common-lisp:nil :type
                         (common-lisp:or appflow-integration common-lisp:null)
                         :accessor
                         struct-shape-integration-config-appflow-integration
                         :shape "AppflowIntegration" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-integration-config
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'integration-config
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'integration-config 'make-integration-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input integration-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input integration-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'appflow-integration))
      (common-lisp:list
       (common-lisp:cons "AppflowIntegration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input integration-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype integration-list ()
   '(trivial-types:proper-list list-integration-item))
 (common-lisp:defun make-integration-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list list-integration-item))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition internal-server-exception
     (customer-profiles-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       internal-server-exception-message)))
 (common-lisp:export
  (common-lisp:list 'internal-server-exception
                    'internal-server-exception-message)))
(common-lisp:progn
 (common-lisp:defclass job-schedule common-lisp:nil
                       ((day-of-the-week :initarg :day-of-the-week :initform
                         (common-lisp:error ":day-of-the-week is required")
                         :type
                         (common-lisp:or job-schedule-day-of-the-week
                                         common-lisp:null)
                         :accessor struct-shape-job-schedule-day-of-the-week
                         :shape "JobScheduleDayOfTheWeek" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (time :initarg :time :initform
                         (common-lisp:error ":time is required") :type
                         (common-lisp:or job-schedule-time common-lisp:null)
                         :accessor struct-shape-job-schedule-time :shape
                         "JobScheduleTime" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-job-schedule
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'job-schedule
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'job-schedule 'make-job-schedule))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input job-schedule))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input job-schedule))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'day-of-the-week))
      (common-lisp:list
       (common-lisp:cons "DayOfTheWeek"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'time))
      (common-lisp:list
       (common-lisp:cons "Time"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input job-schedule))
   common-lisp:nil))
(common-lisp:deftype job-schedule-day-of-the-week () 'common-lisp:string)
(common-lisp:deftype job-schedule-time () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass job-stats common-lisp:nil
                       ((number-of-profiles-reviewed :initarg
                         :number-of-profiles-reviewed :initform common-lisp:nil
                         :type
                         (common-lisp:or common-lisp:integer common-lisp:null)
                         :accessor
                         struct-shape-job-stats-number-of-profiles-reviewed
                         :shape "long" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (number-of-matches-found :initarg
                         :number-of-matches-found :initform common-lisp:nil
                         :type
                         (common-lisp:or common-lisp:integer common-lisp:null)
                         :accessor
                         struct-shape-job-stats-number-of-matches-found :shape
                         "long" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (number-of-merges-done :initarg :number-of-merges-done
                         :initform common-lisp:nil :type
                         (common-lisp:or common-lisp:integer common-lisp:null)
                         :accessor struct-shape-job-stats-number-of-merges-done
                         :shape "long" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-job-stats
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'job-stats
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'job-stats 'make-job-stats))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input job-stats))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input job-stats))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'number-of-profiles-reviewed))
      (common-lisp:list
       (common-lisp:cons "NumberOfProfilesReviewed"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'number-of-matches-found))
      (common-lisp:list
       (common-lisp:cons "NumberOfMatchesFound"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'number-of-merges-done))
      (common-lisp:list
       (common-lisp:cons "NumberOfMergesDone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input job-stats))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype key-map () 'common-lisp:hash-table)
 (common-lisp:defun make-key-map (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype kms-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass list-account-integrations-request common-lisp:nil
                       ((uri :initarg :uri :initform
                         (common-lisp:error ":uri is required") :type
                         (common-lisp:or |string1To255| common-lisp:null)
                         :accessor
                         struct-shape-list-account-integrations-request-uri
                         :shape "string1To255" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or |token| common-lisp:null) :accessor
                         struct-shape-list-account-integrations-request-next-token
                         :shape "token" :location "querystring" :location-name
                         "next-token")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or |maxSize100| common-lisp:null)
                         :accessor
                         struct-shape-list-account-integrations-request-max-results
                         :shape "maxSize100" :location "querystring"
                         :location-name "max-results")
                        (include-hidden :initarg :include-hidden :initform
                         common-lisp:nil :type
                         (common-lisp:or |optionalBoolean| common-lisp:null)
                         :accessor
                         struct-shape-list-account-integrations-request-include-hidden
                         :shape "optionalBoolean" :location "querystring"
                         :location-name "include-hidden"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-account-integrations-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-account-integrations-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-account-integrations-request
                    'make-list-account-integrations-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-account-integrations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-account-integrations-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'uri))
      (common-lisp:list
       (common-lisp:cons "Uri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-account-integrations-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-account-integrations-response common-lisp:nil
                       ((items :initarg :items :initform common-lisp:nil :type
                         (common-lisp:or integration-list common-lisp:null)
                         :accessor
                         struct-shape-list-account-integrations-response-items
                         :shape "IntegrationList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or |token| common-lisp:null) :accessor
                         struct-shape-list-account-integrations-response-next-token
                         :shape "token" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-account-integrations-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-account-integrations-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-account-integrations-response
                    'make-list-account-integrations-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-account-integrations-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-account-integrations-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'items))
      (common-lisp:list
       (common-lisp:cons "Items"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-account-integrations-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-calculated-attribute-definition-item
                       common-lisp:nil
                       ((calculated-attribute-name :initarg
                         :calculated-attribute-name :initform common-lisp:nil
                         :type (common-lisp:or |typeName| common-lisp:null)
                         :accessor
                         struct-shape-list-calculated-attribute-definition-item-calculated-attribute-name
                         :shape "typeName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (display-name :initarg :display-name :initform
                         common-lisp:nil :type
                         (common-lisp:or |displayName| common-lisp:null)
                         :accessor
                         struct-shape-list-calculated-attribute-definition-item-display-name
                         :shape "displayName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or |sensitiveText| common-lisp:null)
                         :accessor
                         struct-shape-list-calculated-attribute-definition-item-description
                         :shape "sensitiveText" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (created-at :initarg :created-at :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         struct-shape-list-calculated-attribute-definition-item-created-at
                         :shape "timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-updated-at :initarg :last-updated-at :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         struct-shape-list-calculated-attribute-definition-item-last-updated-at
                         :shape "timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         struct-shape-list-calculated-attribute-definition-item-tags
                         :shape "TagMap" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-calculated-attribute-definition-item
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-calculated-attribute-definition-item
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-calculated-attribute-definition-item
                    'make-list-calculated-attribute-definition-item))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-calculated-attribute-definition-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-calculated-attribute-definition-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'calculated-attribute-name))
      (common-lisp:list
       (common-lisp:cons "CalculatedAttributeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-name))
      (common-lisp:list
       (common-lisp:cons "DisplayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "CreatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-at))
      (common-lisp:list
       (common-lisp:cons "LastUpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-calculated-attribute-definition-item))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-calculated-attribute-definitions-request
                       common-lisp:nil
                       ((domain-name :initarg :domain-name :initform
                         (common-lisp:error ":domain-name is required") :type
                         (common-lisp:or |name| common-lisp:null) :accessor
                         struct-shape-list-calculated-attribute-definitions-request-domain-name
                         :shape "name" :location "uri" :location-name
                         "DomainName")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or |token| common-lisp:null) :accessor
                         struct-shape-list-calculated-attribute-definitions-request-next-token
                         :shape "token" :location "querystring" :location-name
                         "next-token")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or |maxSize100| common-lisp:null)
                         :accessor
                         struct-shape-list-calculated-attribute-definitions-request-max-results
                         :shape "maxSize100" :location "querystring"
                         :location-name "max-results"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-calculated-attribute-definitions-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-calculated-attribute-definitions-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-calculated-attribute-definitions-request
                    'make-list-calculated-attribute-definitions-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-calculated-attribute-definitions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-calculated-attribute-definitions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-calculated-attribute-definitions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-calculated-attribute-definitions-response
                       common-lisp:nil
                       ((items :initarg :items :initform common-lisp:nil :type
                         (common-lisp:or calculated-attribute-definitions-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-calculated-attribute-definitions-response-items
                         :shape "CalculatedAttributeDefinitionsList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or |token| common-lisp:null) :accessor
                         struct-shape-list-calculated-attribute-definitions-response-next-token
                         :shape "token" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-calculated-attribute-definitions-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-calculated-attribute-definitions-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-calculated-attribute-definitions-response
                    'make-list-calculated-attribute-definitions-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-calculated-attribute-definitions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-calculated-attribute-definitions-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'items))
      (common-lisp:list
       (common-lisp:cons "Items"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-calculated-attribute-definitions-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-calculated-attribute-for-profile-item
                       common-lisp:nil
                       ((calculated-attribute-name :initarg
                         :calculated-attribute-name :initform common-lisp:nil
                         :type (common-lisp:or |typeName| common-lisp:null)
                         :accessor
                         struct-shape-list-calculated-attribute-for-profile-item-calculated-attribute-name
                         :shape "typeName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (display-name :initarg :display-name :initform
                         common-lisp:nil :type
                         (common-lisp:or |displayName| common-lisp:null)
                         :accessor
                         struct-shape-list-calculated-attribute-for-profile-item-display-name
                         :shape "displayName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (is-data-partial :initarg :is-data-partial :initform
                         common-lisp:nil :type
                         (common-lisp:or |string1To255| common-lisp:null)
                         :accessor
                         struct-shape-list-calculated-attribute-for-profile-item-is-data-partial
                         :shape "string1To255" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (value :initarg :value :initform common-lisp:nil :type
                         (common-lisp:or |string1To255| common-lisp:null)
                         :accessor
                         struct-shape-list-calculated-attribute-for-profile-item-value
                         :shape "string1To255" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-calculated-attribute-for-profile-item
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-calculated-attribute-for-profile-item
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-calculated-attribute-for-profile-item
                    'make-list-calculated-attribute-for-profile-item))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-calculated-attribute-for-profile-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-calculated-attribute-for-profile-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'calculated-attribute-name))
      (common-lisp:list
       (common-lisp:cons "CalculatedAttributeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-name))
      (common-lisp:list
       (common-lisp:cons "DisplayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-data-partial))
      (common-lisp:list
       (common-lisp:cons "IsDataPartial"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-calculated-attribute-for-profile-item))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-calculated-attributes-for-profile-request
                       common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or |token| common-lisp:null) :accessor
                         struct-shape-list-calculated-attributes-for-profile-request-next-token
                         :shape "token" :location "querystring" :location-name
                         "next-token")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or |maxSize100| common-lisp:null)
                         :accessor
                         struct-shape-list-calculated-attributes-for-profile-request-max-results
                         :shape "maxSize100" :location "querystring"
                         :location-name "max-results")
                        (domain-name :initarg :domain-name :initform
                         (common-lisp:error ":domain-name is required") :type
                         (common-lisp:or |name| common-lisp:null) :accessor
                         struct-shape-list-calculated-attributes-for-profile-request-domain-name
                         :shape "name" :location "uri" :location-name
                         "DomainName")
                        (profile-id :initarg :profile-id :initform
                         (common-lisp:error ":profile-id is required") :type
                         (common-lisp:or |uuid| common-lisp:null) :accessor
                         struct-shape-list-calculated-attributes-for-profile-request-profile-id
                         :shape "uuid" :location "uri" :location-name
                         "ProfileId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-calculated-attributes-for-profile-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-calculated-attributes-for-profile-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-calculated-attributes-for-profile-request
                    'make-list-calculated-attributes-for-profile-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-calculated-attributes-for-profile-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-calculated-attributes-for-profile-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-calculated-attributes-for-profile-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-calculated-attributes-for-profile-response
                       common-lisp:nil
                       ((items :initarg :items :initform common-lisp:nil :type
                         (common-lisp:or calculated-attributes-for-profile-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-calculated-attributes-for-profile-response-items
                         :shape "CalculatedAttributesForProfileList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or |token| common-lisp:null) :accessor
                         struct-shape-list-calculated-attributes-for-profile-response-next-token
                         :shape "token" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-calculated-attributes-for-profile-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-calculated-attributes-for-profile-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-calculated-attributes-for-profile-response
                    'make-list-calculated-attributes-for-profile-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-calculated-attributes-for-profile-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-calculated-attributes-for-profile-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'items))
      (common-lisp:list
       (common-lisp:cons "Items"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-calculated-attributes-for-profile-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-domain-item common-lisp:nil
                       ((domain-name :initarg :domain-name :initform
                         (common-lisp:error ":domain-name is required") :type
                         (common-lisp:or |name| common-lisp:null) :accessor
                         struct-shape-list-domain-item-domain-name :shape
                         "name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (created-at :initarg :created-at :initform
                         (common-lisp:error ":created-at is required") :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor struct-shape-list-domain-item-created-at
                         :shape "timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-updated-at :initarg :last-updated-at :initform
                         (common-lisp:error ":last-updated-at is required")
                         :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         struct-shape-list-domain-item-last-updated-at :shape
                         "timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         struct-shape-list-domain-item-tags :shape "TagMap"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-domain-item
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-domain-item
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-domain-item 'make-list-domain-item))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-domain-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-domain-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-name))
      (common-lisp:list
       (common-lisp:cons "DomainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "CreatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-at))
      (common-lisp:list
       (common-lisp:cons "LastUpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-domain-item))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-domains-request common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or |token| common-lisp:null) :accessor
                         struct-shape-list-domains-request-next-token :shape
                         "token" :location "querystring" :location-name
                         "next-token")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or |maxSize100| common-lisp:null)
                         :accessor
                         struct-shape-list-domains-request-max-results :shape
                         "maxSize100" :location "querystring" :location-name
                         "max-results"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-domains-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-domains-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-domains-request 'make-list-domains-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-domains-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-domains-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-domains-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-domains-response common-lisp:nil
                       ((items :initarg :items :initform common-lisp:nil :type
                         (common-lisp:or domain-list common-lisp:null)
                         :accessor struct-shape-list-domains-response-items
                         :shape "DomainList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or |token| common-lisp:null) :accessor
                         struct-shape-list-domains-response-next-token :shape
                         "token" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-domains-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-domains-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-domains-response 'make-list-domains-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-domains-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-domains-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'items))
      (common-lisp:list
       (common-lisp:cons "Items"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-domains-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-event-streams-request common-lisp:nil
                       ((domain-name :initarg :domain-name :initform
                         (common-lisp:error ":domain-name is required") :type
                         (common-lisp:or |name| common-lisp:null) :accessor
                         struct-shape-list-event-streams-request-domain-name
                         :shape "name" :location "uri" :location-name
                         "DomainName")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or |token| common-lisp:null) :accessor
                         struct-shape-list-event-streams-request-next-token
                         :shape "token" :location "querystring" :location-name
                         "next-token")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or |maxSize100| common-lisp:null)
                         :accessor
                         struct-shape-list-event-streams-request-max-results
                         :shape "maxSize100" :location "querystring"
                         :location-name "max-results"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-event-streams-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-event-streams-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-event-streams-request
                    'make-list-event-streams-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-event-streams-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-event-streams-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-event-streams-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-event-streams-response common-lisp:nil
                       ((items :initarg :items :initform common-lisp:nil :type
                         (common-lisp:or event-stream-summary-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-event-streams-response-items :shape
                         "EventStreamSummaryList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or |token| common-lisp:null) :accessor
                         struct-shape-list-event-streams-response-next-token
                         :shape "token" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-event-streams-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-event-streams-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-event-streams-response
                    'make-list-event-streams-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-event-streams-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-event-streams-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'items))
      (common-lisp:list
       (common-lisp:cons "Items"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-event-streams-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-identity-resolution-jobs-request common-lisp:nil
                       ((domain-name :initarg :domain-name :initform
                         (common-lisp:error ":domain-name is required") :type
                         (common-lisp:or |name| common-lisp:null) :accessor
                         struct-shape-list-identity-resolution-jobs-request-domain-name
                         :shape "name" :location "uri" :location-name
                         "DomainName")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or |token| common-lisp:null) :accessor
                         struct-shape-list-identity-resolution-jobs-request-next-token
                         :shape "token" :location "querystring" :location-name
                         "next-token")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or |maxSize100| common-lisp:null)
                         :accessor
                         struct-shape-list-identity-resolution-jobs-request-max-results
                         :shape "maxSize100" :location "querystring"
                         :location-name "max-results"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-identity-resolution-jobs-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-identity-resolution-jobs-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-identity-resolution-jobs-request
                    'make-list-identity-resolution-jobs-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-identity-resolution-jobs-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-identity-resolution-jobs-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-identity-resolution-jobs-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-identity-resolution-jobs-response common-lisp:nil
                       ((identity-resolution-jobs-list :initarg
                         :identity-resolution-jobs-list :initform
                         common-lisp:nil :type
                         (common-lisp:or identity-resolution-jobs-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-identity-resolution-jobs-response-identity-resolution-jobs-list
                         :shape "IdentityResolutionJobsList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or |token| common-lisp:null) :accessor
                         struct-shape-list-identity-resolution-jobs-response-next-token
                         :shape "token" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-identity-resolution-jobs-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-identity-resolution-jobs-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-identity-resolution-jobs-response
                    'make-list-identity-resolution-jobs-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-identity-resolution-jobs-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-identity-resolution-jobs-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'identity-resolution-jobs-list))
      (common-lisp:list
       (common-lisp:cons "IdentityResolutionJobsList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-identity-resolution-jobs-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-integration-item common-lisp:nil
                       ((domain-name :initarg :domain-name :initform
                         (common-lisp:error ":domain-name is required") :type
                         (common-lisp:or |name| common-lisp:null) :accessor
                         struct-shape-list-integration-item-domain-name :shape
                         "name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (uri :initarg :uri :initform
                         (common-lisp:error ":uri is required") :type
                         (common-lisp:or |string1To255| common-lisp:null)
                         :accessor struct-shape-list-integration-item-uri
                         :shape "string1To255" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (object-type-name :initarg :object-type-name :initform
                         common-lisp:nil :type
                         (common-lisp:or |typeName| common-lisp:null) :accessor
                         struct-shape-list-integration-item-object-type-name
                         :shape "typeName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (created-at :initarg :created-at :initform
                         (common-lisp:error ":created-at is required") :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         struct-shape-list-integration-item-created-at :shape
                         "timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (last-updated-at :initarg :last-updated-at :initform
                         (common-lisp:error ":last-updated-at is required")
                         :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         struct-shape-list-integration-item-last-updated-at
                         :shape "timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         struct-shape-list-integration-item-tags :shape
                         "TagMap" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (object-type-names :initarg :object-type-names
                         :initform common-lisp:nil :type
                         (common-lisp:or object-type-names common-lisp:null)
                         :accessor
                         struct-shape-list-integration-item-object-type-names
                         :shape "ObjectTypeNames" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (workflow-id :initarg :workflow-id :initform
                         common-lisp:nil :type
                         (common-lisp:or |string1To255| common-lisp:null)
                         :accessor
                         struct-shape-list-integration-item-workflow-id :shape
                         "string1To255" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (is-unstructured :initarg :is-unstructured :initform
                         common-lisp:nil :type
                         (common-lisp:or |optionalBoolean| common-lisp:null)
                         :accessor
                         struct-shape-list-integration-item-is-unstructured
                         :shape "optionalBoolean" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-integration-item
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-integration-item
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-integration-item 'make-list-integration-item))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-integration-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-integration-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-name))
      (common-lisp:list
       (common-lisp:cons "DomainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'uri))
      (common-lisp:list
       (common-lisp:cons "Uri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'object-type-name))
      (common-lisp:list
       (common-lisp:cons "ObjectTypeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "CreatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-at))
      (common-lisp:list
       (common-lisp:cons "LastUpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'object-type-names))
      (common-lisp:list
       (common-lisp:cons "ObjectTypeNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workflow-id))
      (common-lisp:list
       (common-lisp:cons "WorkflowId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-unstructured))
      (common-lisp:list
       (common-lisp:cons "IsUnstructured"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-integration-item))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-integrations-request common-lisp:nil
                       ((domain-name :initarg :domain-name :initform
                         (common-lisp:error ":domain-name is required") :type
                         (common-lisp:or |name| common-lisp:null) :accessor
                         struct-shape-list-integrations-request-domain-name
                         :shape "name" :location "uri" :location-name
                         "DomainName")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or |token| common-lisp:null) :accessor
                         struct-shape-list-integrations-request-next-token
                         :shape "token" :location "querystring" :location-name
                         "next-token")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or |maxSize100| common-lisp:null)
                         :accessor
                         struct-shape-list-integrations-request-max-results
                         :shape "maxSize100" :location "querystring"
                         :location-name "max-results")
                        (include-hidden :initarg :include-hidden :initform
                         common-lisp:nil :type
                         (common-lisp:or |optionalBoolean| common-lisp:null)
                         :accessor
                         struct-shape-list-integrations-request-include-hidden
                         :shape "optionalBoolean" :location "querystring"
                         :location-name "include-hidden"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-integrations-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-integrations-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-integrations-request
                    'make-list-integrations-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-integrations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-integrations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-integrations-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-integrations-response common-lisp:nil
                       ((items :initarg :items :initform common-lisp:nil :type
                         (common-lisp:or integration-list common-lisp:null)
                         :accessor
                         struct-shape-list-integrations-response-items :shape
                         "IntegrationList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or |token| common-lisp:null) :accessor
                         struct-shape-list-integrations-response-next-token
                         :shape "token" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-integrations-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-integrations-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-integrations-response
                    'make-list-integrations-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-integrations-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-integrations-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'items))
      (common-lisp:list
       (common-lisp:cons "Items"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-integrations-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-profile-object-type-item common-lisp:nil
                       ((object-type-name :initarg :object-type-name :initform
                         (common-lisp:error ":object-type-name is required")
                         :type (common-lisp:or |typeName| common-lisp:null)
                         :accessor
                         struct-shape-list-profile-object-type-item-object-type-name
                         :shape "typeName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         (common-lisp:error ":description is required") :type
                         (common-lisp:or |text| common-lisp:null) :accessor
                         struct-shape-list-profile-object-type-item-description
                         :shape "text" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (created-at :initarg :created-at :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         struct-shape-list-profile-object-type-item-created-at
                         :shape "timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-updated-at :initarg :last-updated-at :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         struct-shape-list-profile-object-type-item-last-updated-at
                         :shape "timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         struct-shape-list-profile-object-type-item-tags :shape
                         "TagMap" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-profile-object-type-item
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-profile-object-type-item
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-profile-object-type-item
                    'make-list-profile-object-type-item))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-profile-object-type-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-profile-object-type-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'object-type-name))
      (common-lisp:list
       (common-lisp:cons "ObjectTypeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "CreatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-at))
      (common-lisp:list
       (common-lisp:cons "LastUpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-profile-object-type-item))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-profile-object-type-template-item common-lisp:nil
                       ((template-id :initarg :template-id :initform
                         common-lisp:nil :type
                         (common-lisp:or |name| common-lisp:null) :accessor
                         struct-shape-list-profile-object-type-template-item-template-id
                         :shape "name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (source-name :initarg :source-name :initform
                         common-lisp:nil :type
                         (common-lisp:or |name| common-lisp:null) :accessor
                         struct-shape-list-profile-object-type-template-item-source-name
                         :shape "name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (source-object :initarg :source-object :initform
                         common-lisp:nil :type
                         (common-lisp:or |name| common-lisp:null) :accessor
                         struct-shape-list-profile-object-type-template-item-source-object
                         :shape "name" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-profile-object-type-template-item
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-profile-object-type-template-item
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-profile-object-type-template-item
                    'make-list-profile-object-type-template-item))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-profile-object-type-template-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-profile-object-type-template-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-id))
      (common-lisp:list
       (common-lisp:cons "TemplateId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-name))
      (common-lisp:list
       (common-lisp:cons "SourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-object))
      (common-lisp:list
       (common-lisp:cons "SourceObject"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-profile-object-type-template-item))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-profile-object-type-templates-request
                       common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or |token| common-lisp:null) :accessor
                         struct-shape-list-profile-object-type-templates-request-next-token
                         :shape "token" :location "querystring" :location-name
                         "next-token")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or |maxSize100| common-lisp:null)
                         :accessor
                         struct-shape-list-profile-object-type-templates-request-max-results
                         :shape "maxSize100" :location "querystring"
                         :location-name "max-results"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-profile-object-type-templates-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-profile-object-type-templates-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-profile-object-type-templates-request
                    'make-list-profile-object-type-templates-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-profile-object-type-templates-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-profile-object-type-templates-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-profile-object-type-templates-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-profile-object-type-templates-response
                       common-lisp:nil
                       ((items :initarg :items :initform common-lisp:nil :type
                         (common-lisp:or profile-object-type-template-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-profile-object-type-templates-response-items
                         :shape "ProfileObjectTypeTemplateList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or |token| common-lisp:null) :accessor
                         struct-shape-list-profile-object-type-templates-response-next-token
                         :shape "token" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-profile-object-type-templates-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-profile-object-type-templates-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-profile-object-type-templates-response
                    'make-list-profile-object-type-templates-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-profile-object-type-templates-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-profile-object-type-templates-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'items))
      (common-lisp:list
       (common-lisp:cons "Items"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-profile-object-type-templates-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-profile-object-types-request common-lisp:nil
                       ((domain-name :initarg :domain-name :initform
                         (common-lisp:error ":domain-name is required") :type
                         (common-lisp:or |name| common-lisp:null) :accessor
                         struct-shape-list-profile-object-types-request-domain-name
                         :shape "name" :location "uri" :location-name
                         "DomainName")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or |token| common-lisp:null) :accessor
                         struct-shape-list-profile-object-types-request-next-token
                         :shape "token" :location "querystring" :location-name
                         "next-token")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or |maxSize100| common-lisp:null)
                         :accessor
                         struct-shape-list-profile-object-types-request-max-results
                         :shape "maxSize100" :location "querystring"
                         :location-name "max-results"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-profile-object-types-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-profile-object-types-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-profile-object-types-request
                    'make-list-profile-object-types-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-profile-object-types-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-profile-object-types-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-profile-object-types-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-profile-object-types-response common-lisp:nil
                       ((items :initarg :items :initform common-lisp:nil :type
                         (common-lisp:or profile-object-type-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-profile-object-types-response-items
                         :shape "ProfileObjectTypeList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or |token| common-lisp:null) :accessor
                         struct-shape-list-profile-object-types-response-next-token
                         :shape "token" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-profile-object-types-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-profile-object-types-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-profile-object-types-response
                    'make-list-profile-object-types-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-profile-object-types-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-profile-object-types-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'items))
      (common-lisp:list
       (common-lisp:cons "Items"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-profile-object-types-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-profile-objects-item common-lisp:nil
                       ((object-type-name :initarg :object-type-name :initform
                         common-lisp:nil :type
                         (common-lisp:or |typeName| common-lisp:null) :accessor
                         struct-shape-list-profile-objects-item-object-type-name
                         :shape "typeName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (profile-object-unique-key :initarg
                         :profile-object-unique-key :initform common-lisp:nil
                         :type (common-lisp:or |string1To255| common-lisp:null)
                         :accessor
                         struct-shape-list-profile-objects-item-profile-object-unique-key
                         :shape "string1To255" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (object :initarg :object :initform common-lisp:nil
                         :type
                         (common-lisp:or |stringifiedJson| common-lisp:null)
                         :accessor
                         struct-shape-list-profile-objects-item-object :shape
                         "stringifiedJson" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-profile-objects-item
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-profile-objects-item
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-profile-objects-item
                    'make-list-profile-objects-item))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-profile-objects-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-profile-objects-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'object-type-name))
      (common-lisp:list
       (common-lisp:cons "ObjectTypeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'profile-object-unique-key))
      (common-lisp:list
       (common-lisp:cons "ProfileObjectUniqueKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'object))
      (common-lisp:list
       (common-lisp:cons "Object"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-profile-objects-item))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-profile-objects-request common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or |token| common-lisp:null) :accessor
                         struct-shape-list-profile-objects-request-next-token
                         :shape "token" :location "querystring" :location-name
                         "next-token")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or |maxSize100| common-lisp:null)
                         :accessor
                         struct-shape-list-profile-objects-request-max-results
                         :shape "maxSize100" :location "querystring"
                         :location-name "max-results")
                        (domain-name :initarg :domain-name :initform
                         (common-lisp:error ":domain-name is required") :type
                         (common-lisp:or |name| common-lisp:null) :accessor
                         struct-shape-list-profile-objects-request-domain-name
                         :shape "name" :location "uri" :location-name
                         "DomainName")
                        (object-type-name :initarg :object-type-name :initform
                         (common-lisp:error ":object-type-name is required")
                         :type (common-lisp:or |typeName| common-lisp:null)
                         :accessor
                         struct-shape-list-profile-objects-request-object-type-name
                         :shape "typeName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (profile-id :initarg :profile-id :initform
                         (common-lisp:error ":profile-id is required") :type
                         (common-lisp:or |uuid| common-lisp:null) :accessor
                         struct-shape-list-profile-objects-request-profile-id
                         :shape "uuid" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (object-filter :initarg :object-filter :initform
                         common-lisp:nil :type
                         (common-lisp:or object-filter common-lisp:null)
                         :accessor
                         struct-shape-list-profile-objects-request-object-filter
                         :shape "ObjectFilter" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-profile-objects-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-profile-objects-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-profile-objects-request
                    'make-list-profile-objects-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-profile-objects-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-profile-objects-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'object-type-name))
      (common-lisp:list
       (common-lisp:cons "ObjectTypeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'profile-id))
      (common-lisp:list
       (common-lisp:cons "ProfileId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'object-filter))
      (common-lisp:list
       (common-lisp:cons "ObjectFilter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-profile-objects-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-profile-objects-response common-lisp:nil
                       ((items :initarg :items :initform common-lisp:nil :type
                         (common-lisp:or profile-object-list common-lisp:null)
                         :accessor
                         struct-shape-list-profile-objects-response-items
                         :shape "ProfileObjectList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or |token| common-lisp:null) :accessor
                         struct-shape-list-profile-objects-response-next-token
                         :shape "token" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-profile-objects-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-profile-objects-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-profile-objects-response
                    'make-list-profile-objects-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-profile-objects-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-profile-objects-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'items))
      (common-lisp:list
       (common-lisp:cons "Items"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-profile-objects-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-rule-based-matches-request common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or |token| common-lisp:null) :accessor
                         struct-shape-list-rule-based-matches-request-next-token
                         :shape "token" :location "querystring" :location-name
                         "next-token")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or |maxSize100| common-lisp:null)
                         :accessor
                         struct-shape-list-rule-based-matches-request-max-results
                         :shape "maxSize100" :location "querystring"
                         :location-name "max-results")
                        (domain-name :initarg :domain-name :initform
                         (common-lisp:error ":domain-name is required") :type
                         (common-lisp:or |name| common-lisp:null) :accessor
                         struct-shape-list-rule-based-matches-request-domain-name
                         :shape "name" :location "uri" :location-name
                         "DomainName"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-rule-based-matches-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-rule-based-matches-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-rule-based-matches-request
                    'make-list-rule-based-matches-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-rule-based-matches-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-rule-based-matches-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-rule-based-matches-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-rule-based-matches-response common-lisp:nil
                       ((match-ids :initarg :match-ids :initform
                         common-lisp:nil :type
                         (common-lisp:or match-id-list common-lisp:null)
                         :accessor
                         struct-shape-list-rule-based-matches-response-match-ids
                         :shape "MatchIdList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or |token| common-lisp:null) :accessor
                         struct-shape-list-rule-based-matches-response-next-token
                         :shape "token" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-rule-based-matches-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-rule-based-matches-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-rule-based-matches-response
                    'make-list-rule-based-matches-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-rule-based-matches-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-rule-based-matches-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'match-ids))
      (common-lisp:list
       (common-lisp:cons "MatchIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-rule-based-matches-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-request common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resourcearn is required") :type
                         (common-lisp:or tag-arn common-lisp:null) :accessor
                         struct-shape-list-tags-for-resource-request-resource-arn
                         :shape "TagArn" :location "uri" :location-name
                         "resourceArn"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-tags-for-resource-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-request
                    'make-list-tags-for-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-response common-lisp:nil
                       ((tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         struct-shape-list-tags-for-resource-response-tags
                         :shape "TagMap" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-tags-for-resource-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-response
                    'make-list-tags-for-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-workflows-item common-lisp:nil
                       ((workflow-type :initarg :workflow-type :initform
                         (common-lisp:error ":workflow-type is required") :type
                         (common-lisp:or workflow-type common-lisp:null)
                         :accessor
                         struct-shape-list-workflows-item-workflow-type :shape
                         "WorkflowType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (workflow-id :initarg :workflow-id :initform
                         (common-lisp:error ":workflow-id is required") :type
                         (common-lisp:or |string1To255| common-lisp:null)
                         :accessor struct-shape-list-workflows-item-workflow-id
                         :shape "string1To255" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform
                         (common-lisp:error ":status is required") :type
                         (common-lisp:or status common-lisp:null) :accessor
                         struct-shape-list-workflows-item-status :shape
                         "Status" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (status-description :initarg :status-description
                         :initform
                         (common-lisp:error ":status-description is required")
                         :type (common-lisp:or |string1To255| common-lisp:null)
                         :accessor
                         struct-shape-list-workflows-item-status-description
                         :shape "string1To255" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (created-at :initarg :created-at :initform
                         (common-lisp:error ":created-at is required") :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor struct-shape-list-workflows-item-created-at
                         :shape "timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-updated-at :initarg :last-updated-at :initform
                         (common-lisp:error ":last-updated-at is required")
                         :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         struct-shape-list-workflows-item-last-updated-at
                         :shape "timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-workflows-item
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-workflows-item
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-workflows-item 'make-list-workflows-item))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-workflows-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-workflows-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workflow-type))
      (common-lisp:list
       (common-lisp:cons "WorkflowType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workflow-id))
      (common-lisp:list
       (common-lisp:cons "WorkflowId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-description))
      (common-lisp:list
       (common-lisp:cons "StatusDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "CreatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-at))
      (common-lisp:list
       (common-lisp:cons "LastUpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-workflows-item))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-workflows-request common-lisp:nil
                       ((domain-name :initarg :domain-name :initform
                         (common-lisp:error ":domain-name is required") :type
                         (common-lisp:or |name| common-lisp:null) :accessor
                         struct-shape-list-workflows-request-domain-name :shape
                         "name" :location "uri" :location-name "DomainName")
                        (workflow-type :initarg :workflow-type :initform
                         common-lisp:nil :type
                         (common-lisp:or workflow-type common-lisp:null)
                         :accessor
                         struct-shape-list-workflows-request-workflow-type
                         :shape "WorkflowType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or status common-lisp:null)
                         :accessor struct-shape-list-workflows-request-status
                         :shape "Status" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (query-start-date :initarg :query-start-date :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         struct-shape-list-workflows-request-query-start-date
                         :shape "timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (query-end-date :initarg :query-end-date :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         struct-shape-list-workflows-request-query-end-date
                         :shape "timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or |token| common-lisp:null) :accessor
                         struct-shape-list-workflows-request-next-token :shape
                         "token" :location "querystring" :location-name
                         "next-token")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or |maxSize100| common-lisp:null)
                         :accessor
                         struct-shape-list-workflows-request-max-results :shape
                         "maxSize100" :location "querystring" :location-name
                         "max-results"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-workflows-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-workflows-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-workflows-request 'make-list-workflows-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-workflows-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-workflows-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workflow-type))
      (common-lisp:list
       (common-lisp:cons "WorkflowType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-start-date))
      (common-lisp:list
       (common-lisp:cons "QueryStartDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-end-date))
      (common-lisp:list
       (common-lisp:cons "QueryEndDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-workflows-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-workflows-response common-lisp:nil
                       ((items :initarg :items :initform common-lisp:nil :type
                         (common-lisp:or workflow-list common-lisp:null)
                         :accessor struct-shape-list-workflows-response-items
                         :shape "WorkflowList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or |token| common-lisp:null) :accessor
                         struct-shape-list-workflows-response-next-token :shape
                         "token" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-workflows-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-workflows-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-workflows-response 'make-list-workflows-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-workflows-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-workflows-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'items))
      (common-lisp:list
       (common-lisp:cons "Items"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-workflows-response))
   common-lisp:nil))
(common-lisp:deftype marketo-connector-operator () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass marketo-source-properties common-lisp:nil
                       ((object :initarg :object :initform
                         (common-lisp:error ":object is required") :type
                         (common-lisp:or object common-lisp:null) :accessor
                         struct-shape-marketo-source-properties-object :shape
                         "Object" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-marketo-source-properties
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'marketo-source-properties
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'marketo-source-properties
                    'make-marketo-source-properties))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          marketo-source-properties))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          marketo-source-properties))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'object))
      (common-lisp:list
       (common-lisp:cons "Object"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          marketo-source-properties))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype match-id-list ()
   '(trivial-types:proper-list |string1To255|))
 (common-lisp:defun make-match-id-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list |string1To255|))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass match-item common-lisp:nil
                       ((match-id :initarg :match-id :initform common-lisp:nil
                         :type (common-lisp:or |string1To255| common-lisp:null)
                         :accessor struct-shape-match-item-match-id :shape
                         "string1To255" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (profile-ids :initarg :profile-ids :initform
                         common-lisp:nil :type
                         (common-lisp:or profile-id-list common-lisp:null)
                         :accessor struct-shape-match-item-profile-ids :shape
                         "ProfileIdList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (confidence-score :initarg :confidence-score :initform
                         common-lisp:nil :type
                         (common-lisp:or double common-lisp:null) :accessor
                         struct-shape-match-item-confidence-score :shape
                         "Double" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-match-item
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'match-item
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'match-item 'make-match-item))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input match-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input match-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'match-id))
      (common-lisp:list
       (common-lisp:cons "MatchId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'profile-ids))
      (common-lisp:list
       (common-lisp:cons "ProfileIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'confidence-score))
      (common-lisp:list
       (common-lisp:cons "ConfidenceScore"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input match-item))
   common-lisp:nil))
(common-lisp:deftype match-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype matches-list () '(trivial-types:proper-list match-item))
 (common-lisp:defun make-matches-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list match-item))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype matching-attributes ()
   '(trivial-types:proper-list |string1To255|))
 (common-lisp:defun make-matching-attributes
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list |string1To255|))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype matching-attributes-list ()
   '(trivial-types:proper-list matching-attributes))
 (common-lisp:defun make-matching-attributes-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list matching-attributes))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass matching-request common-lisp:nil
                       ((enabled :initarg :enabled :initform
                         (common-lisp:error ":enabled is required") :type
                         (common-lisp:or |optionalBoolean| common-lisp:null)
                         :accessor struct-shape-matching-request-enabled :shape
                         "optionalBoolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (job-schedule :initarg :job-schedule :initform
                         common-lisp:nil :type
                         (common-lisp:or job-schedule common-lisp:null)
                         :accessor struct-shape-matching-request-job-schedule
                         :shape "JobSchedule" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (auto-merging :initarg :auto-merging :initform
                         common-lisp:nil :type
                         (common-lisp:or auto-merging common-lisp:null)
                         :accessor struct-shape-matching-request-auto-merging
                         :shape "AutoMerging" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (exporting-config :initarg :exporting-config :initform
                         common-lisp:nil :type
                         (common-lisp:or exporting-config common-lisp:null)
                         :accessor
                         struct-shape-matching-request-exporting-config :shape
                         "ExportingConfig" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-matching-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'matching-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'matching-request 'make-matching-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input matching-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input matching-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "Enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-schedule))
      (common-lisp:list
       (common-lisp:cons "JobSchedule"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auto-merging))
      (common-lisp:list
       (common-lisp:cons "AutoMerging"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'exporting-config))
      (common-lisp:list
       (common-lisp:cons "ExportingConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input matching-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass matching-response common-lisp:nil
                       ((enabled :initarg :enabled :initform common-lisp:nil
                         :type
                         (common-lisp:or |optionalBoolean| common-lisp:null)
                         :accessor struct-shape-matching-response-enabled
                         :shape "optionalBoolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (job-schedule :initarg :job-schedule :initform
                         common-lisp:nil :type
                         (common-lisp:or job-schedule common-lisp:null)
                         :accessor struct-shape-matching-response-job-schedule
                         :shape "JobSchedule" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (auto-merging :initarg :auto-merging :initform
                         common-lisp:nil :type
                         (common-lisp:or auto-merging common-lisp:null)
                         :accessor struct-shape-matching-response-auto-merging
                         :shape "AutoMerging" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (exporting-config :initarg :exporting-config :initform
                         common-lisp:nil :type
                         (common-lisp:or exporting-config common-lisp:null)
                         :accessor
                         struct-shape-matching-response-exporting-config :shape
                         "ExportingConfig" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-matching-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'matching-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'matching-response 'make-matching-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input matching-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input matching-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "Enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-schedule))
      (common-lisp:list
       (common-lisp:cons "JobSchedule"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auto-merging))
      (common-lisp:list
       (common-lisp:cons "AutoMerging"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'exporting-config))
      (common-lisp:list
       (common-lisp:cons "ExportingConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input matching-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass matching-rule common-lisp:nil
                       ((rule :initarg :rule :initform
                         (common-lisp:error ":rule is required") :type
                         (common-lisp:or matching-rule-attribute-list
                                         common-lisp:null)
                         :accessor struct-shape-matching-rule-rule :shape
                         "MatchingRuleAttributeList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-matching-rule
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'matching-rule
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'matching-rule 'make-matching-rule))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input matching-rule))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input matching-rule))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule))
      (common-lisp:list
       (common-lisp:cons "Rule"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input matching-rule))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype matching-rule-attribute-list ()
   '(trivial-types:proper-list |string1To255|))
 (common-lisp:defun make-matching-rule-attribute-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list |string1To255|))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype matching-rules ()
   '(trivial-types:proper-list matching-rule))
 (common-lisp:defun make-matching-rules
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list matching-rule))
   aws-sdk/generator/shape::members))
(common-lisp:deftype max-allowed-rule-level-for-matching ()
  'common-lisp:integer)
(common-lisp:deftype max-allowed-rule-level-for-merging () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass merge-profiles-request common-lisp:nil
                       ((domain-name :initarg :domain-name :initform
                         (common-lisp:error ":domain-name is required") :type
                         (common-lisp:or |name| common-lisp:null) :accessor
                         struct-shape-merge-profiles-request-domain-name :shape
                         "name" :location "uri" :location-name "DomainName")
                        (main-profile-id :initarg :main-profile-id :initform
                         (common-lisp:error ":main-profile-id is required")
                         :type (common-lisp:or |uuid| common-lisp:null)
                         :accessor
                         struct-shape-merge-profiles-request-main-profile-id
                         :shape "uuid" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (profile-ids-to-be-merged :initarg
                         :profile-ids-to-be-merged :initform
                         (common-lisp:error
                          ":profile-ids-to-be-merged is required")
                         :type
                         (common-lisp:or profile-id-to-be-merged-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-merge-profiles-request-profile-ids-to-be-merged
                         :shape "ProfileIdToBeMergedList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (field-source-profile-ids :initarg
                         :field-source-profile-ids :initform common-lisp:nil
                         :type
                         (common-lisp:or field-source-profile-ids
                                         common-lisp:null)
                         :accessor
                         struct-shape-merge-profiles-request-field-source-profile-ids
                         :shape "FieldSourceProfileIds" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-merge-profiles-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'merge-profiles-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'merge-profiles-request 'make-merge-profiles-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          merge-profiles-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          merge-profiles-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'main-profile-id))
      (common-lisp:list
       (common-lisp:cons "MainProfileId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'profile-ids-to-be-merged))
      (common-lisp:list
       (common-lisp:cons "ProfileIdsToBeMerged"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'field-source-profile-ids))
      (common-lisp:list
       (common-lisp:cons "FieldSourceProfileIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          merge-profiles-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass merge-profiles-response common-lisp:nil
                       ((message :initarg :message :initform common-lisp:nil
                         :type (common-lisp:or |message| common-lisp:null)
                         :accessor struct-shape-merge-profiles-response-message
                         :shape "message" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-merge-profiles-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'merge-profiles-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'merge-profiles-response 'make-merge-profiles-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          merge-profiles-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          merge-profiles-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          merge-profiles-response))
   common-lisp:nil))
(common-lisp:deftype object () 'common-lisp:string)
(common-lisp:deftype object-count () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass object-filter common-lisp:nil
                       ((key-name :initarg :key-name :initform
                         (common-lisp:error ":key-name is required") :type
                         (common-lisp:or |name| common-lisp:null) :accessor
                         struct-shape-object-filter-key-name :shape "name"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (values :initarg :values :initform
                         (common-lisp:error ":values is required") :type
                         (common-lisp:or |requestValueList| common-lisp:null)
                         :accessor struct-shape-object-filter-values :shape
                         "requestValueList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-object-filter
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'object-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'object-filter 'make-object-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input object-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input object-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-name))
      (common-lisp:list
       (common-lisp:cons "KeyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "Values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input object-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass object-type-field common-lisp:nil
                       ((source :initarg :source :initform common-lisp:nil
                         :type (common-lisp:or |text| common-lisp:null)
                         :accessor struct-shape-object-type-field-source :shape
                         "text" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (target :initarg :target :initform common-lisp:nil
                         :type (common-lisp:or |text| common-lisp:null)
                         :accessor struct-shape-object-type-field-target :shape
                         "text" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (content-type :initarg :content-type :initform
                         common-lisp:nil :type
                         (common-lisp:or field-content-type common-lisp:null)
                         :accessor struct-shape-object-type-field-content-type
                         :shape "FieldContentType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-object-type-field
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'object-type-field
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'object-type-field 'make-object-type-field))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input object-type-field))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input object-type-field))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source))
      (common-lisp:list
       (common-lisp:cons "Source"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target))
      (common-lisp:list
       (common-lisp:cons "Target"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-type))
      (common-lisp:list
       (common-lisp:cons "ContentType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input object-type-field))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass object-type-key common-lisp:nil
                       ((standard-identifiers :initarg :standard-identifiers
                         :initform common-lisp:nil :type
                         (common-lisp:or standard-identifier-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-object-type-key-standard-identifiers
                         :shape "StandardIdentifierList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (field-names :initarg :field-names :initform
                         common-lisp:nil :type
                         (common-lisp:or field-name-list common-lisp:null)
                         :accessor struct-shape-object-type-key-field-names
                         :shape "FieldNameList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-object-type-key
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'object-type-key
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'object-type-key 'make-object-type-key))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input object-type-key))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input object-type-key))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'standard-identifiers))
      (common-lisp:list
       (common-lisp:cons "StandardIdentifiers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field-names))
      (common-lisp:list
       (common-lisp:cons "FieldNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input object-type-key))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype object-type-key-list ()
   '(trivial-types:proper-list object-type-key))
 (common-lisp:defun make-object-type-key-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list object-type-key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype object-type-names () 'common-lisp:hash-table)
 (common-lisp:defun make-object-type-names
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:deftype objects ()
   '(trivial-types:proper-list |stringifiedJson|))
 (common-lisp:defun make-objects
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list |stringifiedJson|))
   aws-sdk/generator/shape::members))
(common-lisp:deftype operator () 'common-lisp:string)
(common-lisp:deftype operator-properties-keys () 'common-lisp:string)
(common-lisp:deftype party-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype phone-number-list ()
   '(trivial-types:proper-list |string1To255|))
 (common-lisp:defun make-phone-number-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list |string1To255|))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass profile common-lisp:nil
                       ((profile-id :initarg :profile-id :initform
                         common-lisp:nil :type
                         (common-lisp:or |uuid| common-lisp:null) :accessor
                         struct-shape-profile-profile-id :shape "uuid"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (account-number :initarg :account-number :initform
                         common-lisp:nil :type
                         (common-lisp:or |sensitiveString1To255|
                                         common-lisp:null)
                         :accessor struct-shape-profile-account-number :shape
                         "sensitiveString1To255" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (additional-information :initarg
                         :additional-information :initform common-lisp:nil
                         :type
                         (common-lisp:or |sensitiveString1To1000|
                                         common-lisp:null)
                         :accessor struct-shape-profile-additional-information
                         :shape "sensitiveString1To1000" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (party-type :initarg :party-type :initform
                         common-lisp:nil :type
                         (common-lisp:or party-type common-lisp:null) :accessor
                         struct-shape-profile-party-type :shape "PartyType"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (business-name :initarg :business-name :initform
                         common-lisp:nil :type
                         (common-lisp:or |sensitiveString1To255|
                                         common-lisp:null)
                         :accessor struct-shape-profile-business-name :shape
                         "sensitiveString1To255" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (first-name :initarg :first-name :initform
                         common-lisp:nil :type
                         (common-lisp:or |sensitiveString1To255|
                                         common-lisp:null)
                         :accessor struct-shape-profile-first-name :shape
                         "sensitiveString1To255" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (middle-name :initarg :middle-name :initform
                         common-lisp:nil :type
                         (common-lisp:or |sensitiveString1To255|
                                         common-lisp:null)
                         :accessor struct-shape-profile-middle-name :shape
                         "sensitiveString1To255" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-name :initarg :last-name :initform
                         common-lisp:nil :type
                         (common-lisp:or |sensitiveString1To255|
                                         common-lisp:null)
                         :accessor struct-shape-profile-last-name :shape
                         "sensitiveString1To255" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (birth-date :initarg :birth-date :initform
                         common-lisp:nil :type
                         (common-lisp:or |sensitiveString1To255|
                                         common-lisp:null)
                         :accessor struct-shape-profile-birth-date :shape
                         "sensitiveString1To255" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (gender :initarg :gender :initform common-lisp:nil
                         :type (common-lisp:or gender common-lisp:null)
                         :accessor struct-shape-profile-gender :shape "Gender"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (phone-number :initarg :phone-number :initform
                         common-lisp:nil :type
                         (common-lisp:or |sensitiveString1To255|
                                         common-lisp:null)
                         :accessor struct-shape-profile-phone-number :shape
                         "sensitiveString1To255" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (mobile-phone-number :initarg :mobile-phone-number
                         :initform common-lisp:nil :type
                         (common-lisp:or |sensitiveString1To255|
                                         common-lisp:null)
                         :accessor struct-shape-profile-mobile-phone-number
                         :shape "sensitiveString1To255" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (home-phone-number :initarg :home-phone-number
                         :initform common-lisp:nil :type
                         (common-lisp:or |sensitiveString1To255|
                                         common-lisp:null)
                         :accessor struct-shape-profile-home-phone-number
                         :shape "sensitiveString1To255" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (business-phone-number :initarg :business-phone-number
                         :initform common-lisp:nil :type
                         (common-lisp:or |sensitiveString1To255|
                                         common-lisp:null)
                         :accessor struct-shape-profile-business-phone-number
                         :shape "sensitiveString1To255" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (email-address :initarg :email-address :initform
                         common-lisp:nil :type
                         (common-lisp:or |sensitiveString1To255|
                                         common-lisp:null)
                         :accessor struct-shape-profile-email-address :shape
                         "sensitiveString1To255" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (personal-email-address :initarg
                         :personal-email-address :initform common-lisp:nil
                         :type
                         (common-lisp:or |sensitiveString1To255|
                                         common-lisp:null)
                         :accessor struct-shape-profile-personal-email-address
                         :shape "sensitiveString1To255" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (business-email-address :initarg
                         :business-email-address :initform common-lisp:nil
                         :type
                         (common-lisp:or |sensitiveString1To255|
                                         common-lisp:null)
                         :accessor struct-shape-profile-business-email-address
                         :shape "sensitiveString1To255" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (address :initarg :address :initform common-lisp:nil
                         :type (common-lisp:or address common-lisp:null)
                         :accessor struct-shape-profile-address :shape
                         "Address" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (shipping-address :initarg :shipping-address :initform
                         common-lisp:nil :type
                         (common-lisp:or address common-lisp:null) :accessor
                         struct-shape-profile-shipping-address :shape "Address"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (mailing-address :initarg :mailing-address :initform
                         common-lisp:nil :type
                         (common-lisp:or address common-lisp:null) :accessor
                         struct-shape-profile-mailing-address :shape "Address"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (billing-address :initarg :billing-address :initform
                         common-lisp:nil :type
                         (common-lisp:or address common-lisp:null) :accessor
                         struct-shape-profile-billing-address :shape "Address"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (attributes :initarg :attributes :initform
                         common-lisp:nil :type
                         (common-lisp:or attributes common-lisp:null) :accessor
                         struct-shape-profile-attributes :shape "Attributes"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (found-by-items :initarg :found-by-items :initform
                         common-lisp:nil :type
                         (common-lisp:or |foundByList| common-lisp:null)
                         :accessor struct-shape-profile-found-by-items :shape
                         "foundByList" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (party-type-string :initarg :party-type-string
                         :initform common-lisp:nil :type
                         (common-lisp:or |sensitiveString1To255|
                                         common-lisp:null)
                         :accessor struct-shape-profile-party-type-string
                         :shape "sensitiveString1To255" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (gender-string :initarg :gender-string :initform
                         common-lisp:nil :type
                         (common-lisp:or |sensitiveString1To255|
                                         common-lisp:null)
                         :accessor struct-shape-profile-gender-string :shape
                         "sensitiveString1To255" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-profile
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'profile
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'profile 'make-profile))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input profile))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input profile))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'profile-id))
      (common-lisp:list
       (common-lisp:cons "ProfileId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-number))
      (common-lisp:list
       (common-lisp:cons "AccountNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'additional-information))
      (common-lisp:list
       (common-lisp:cons "AdditionalInformation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'party-type))
      (common-lisp:list
       (common-lisp:cons "PartyType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'business-name))
      (common-lisp:list
       (common-lisp:cons "BusinessName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'first-name))
      (common-lisp:list
       (common-lisp:cons "FirstName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'middle-name))
      (common-lisp:list
       (common-lisp:cons "MiddleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-name))
      (common-lisp:list
       (common-lisp:cons "LastName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'birth-date))
      (common-lisp:list
       (common-lisp:cons "BirthDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gender))
      (common-lisp:list
       (common-lisp:cons "Gender"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'phone-number))
      (common-lisp:list
       (common-lisp:cons "PhoneNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mobile-phone-number))
      (common-lisp:list
       (common-lisp:cons "MobilePhoneNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'home-phone-number))
      (common-lisp:list
       (common-lisp:cons "HomePhoneNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'business-phone-number))
      (common-lisp:list
       (common-lisp:cons "BusinessPhoneNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'email-address))
      (common-lisp:list
       (common-lisp:cons "EmailAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'personal-email-address))
      (common-lisp:list
       (common-lisp:cons "PersonalEmailAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'business-email-address))
      (common-lisp:list
       (common-lisp:cons "BusinessEmailAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'address))
      (common-lisp:list
       (common-lisp:cons "Address"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'shipping-address))
      (common-lisp:list
       (common-lisp:cons "ShippingAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mailing-address))
      (common-lisp:list
       (common-lisp:cons "MailingAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'billing-address))
      (common-lisp:list
       (common-lisp:cons "BillingAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attributes))
      (common-lisp:list
       (common-lisp:cons "Attributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'found-by-items))
      (common-lisp:list
       (common-lisp:cons "FoundByItems"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'party-type-string))
      (common-lisp:list
       (common-lisp:cons "PartyTypeString"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gender-string))
      (common-lisp:list
       (common-lisp:cons "GenderString"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input profile))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype profile-id-list () '(trivial-types:proper-list |uuid|))
 (common-lisp:defun make-profile-id-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list |uuid|))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype profile-id-to-be-merged-list ()
   '(trivial-types:proper-list |uuid|))
 (common-lisp:defun make-profile-id-to-be-merged-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list |uuid|))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype profile-list () '(trivial-types:proper-list profile))
 (common-lisp:defun make-profile-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list profile))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype profile-object-list ()
   '(trivial-types:proper-list list-profile-objects-item))
 (common-lisp:defun make-profile-object-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            list-profile-objects-item))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype profile-object-type-list ()
   '(trivial-types:proper-list list-profile-object-type-item))
 (common-lisp:defun make-profile-object-type-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            list-profile-object-type-item))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype profile-object-type-template-list ()
   '(trivial-types:proper-list list-profile-object-type-template-item))
 (common-lisp:defun make-profile-object-type-template-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            list-profile-object-type-template-item))
   aws-sdk/generator/shape::members))
(common-lisp:deftype property () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass put-integration-request common-lisp:nil
                       ((domain-name :initarg :domain-name :initform
                         (common-lisp:error ":domain-name is required") :type
                         (common-lisp:or |name| common-lisp:null) :accessor
                         struct-shape-put-integration-request-domain-name
                         :shape "name" :location "uri" :location-name
                         "DomainName")
                        (uri :initarg :uri :initform common-lisp:nil :type
                         (common-lisp:or |string1To255| common-lisp:null)
                         :accessor struct-shape-put-integration-request-uri
                         :shape "string1To255" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (object-type-name :initarg :object-type-name :initform
                         common-lisp:nil :type
                         (common-lisp:or |typeName| common-lisp:null) :accessor
                         struct-shape-put-integration-request-object-type-name
                         :shape "typeName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         struct-shape-put-integration-request-tags :shape
                         "TagMap" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (flow-definition :initarg :flow-definition :initform
                         common-lisp:nil :type
                         (common-lisp:or flow-definition common-lisp:null)
                         :accessor
                         struct-shape-put-integration-request-flow-definition
                         :shape "FlowDefinition" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (object-type-names :initarg :object-type-names
                         :initform common-lisp:nil :type
                         (common-lisp:or object-type-names common-lisp:null)
                         :accessor
                         struct-shape-put-integration-request-object-type-names
                         :shape "ObjectTypeNames" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-integration-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'put-integration-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-integration-request 'make-put-integration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-integration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-integration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'uri))
      (common-lisp:list
       (common-lisp:cons "Uri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'object-type-name))
      (common-lisp:list
       (common-lisp:cons "ObjectTypeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'flow-definition))
      (common-lisp:list
       (common-lisp:cons "FlowDefinition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'object-type-names))
      (common-lisp:list
       (common-lisp:cons "ObjectTypeNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-integration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-integration-response common-lisp:nil
                       ((domain-name :initarg :domain-name :initform
                         (common-lisp:error ":domain-name is required") :type
                         (common-lisp:or |name| common-lisp:null) :accessor
                         struct-shape-put-integration-response-domain-name
                         :shape "name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (uri :initarg :uri :initform
                         (common-lisp:error ":uri is required") :type
                         (common-lisp:or |string1To255| common-lisp:null)
                         :accessor struct-shape-put-integration-response-uri
                         :shape "string1To255" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (object-type-name :initarg :object-type-name :initform
                         common-lisp:nil :type
                         (common-lisp:or |typeName| common-lisp:null) :accessor
                         struct-shape-put-integration-response-object-type-name
                         :shape "typeName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (created-at :initarg :created-at :initform
                         (common-lisp:error ":created-at is required") :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         struct-shape-put-integration-response-created-at
                         :shape "timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-updated-at :initarg :last-updated-at :initform
                         (common-lisp:error ":last-updated-at is required")
                         :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         struct-shape-put-integration-response-last-updated-at
                         :shape "timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         struct-shape-put-integration-response-tags :shape
                         "TagMap" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (object-type-names :initarg :object-type-names
                         :initform common-lisp:nil :type
                         (common-lisp:or object-type-names common-lisp:null)
                         :accessor
                         struct-shape-put-integration-response-object-type-names
                         :shape "ObjectTypeNames" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (workflow-id :initarg :workflow-id :initform
                         common-lisp:nil :type
                         (common-lisp:or |string1To255| common-lisp:null)
                         :accessor
                         struct-shape-put-integration-response-workflow-id
                         :shape "string1To255" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (is-unstructured :initarg :is-unstructured :initform
                         common-lisp:nil :type
                         (common-lisp:or |optionalBoolean| common-lisp:null)
                         :accessor
                         struct-shape-put-integration-response-is-unstructured
                         :shape "optionalBoolean" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-integration-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'put-integration-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-integration-response 'make-put-integration-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-integration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-integration-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-name))
      (common-lisp:list
       (common-lisp:cons "DomainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'uri))
      (common-lisp:list
       (common-lisp:cons "Uri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'object-type-name))
      (common-lisp:list
       (common-lisp:cons "ObjectTypeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "CreatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-at))
      (common-lisp:list
       (common-lisp:cons "LastUpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'object-type-names))
      (common-lisp:list
       (common-lisp:cons "ObjectTypeNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workflow-id))
      (common-lisp:list
       (common-lisp:cons "WorkflowId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-unstructured))
      (common-lisp:list
       (common-lisp:cons "IsUnstructured"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-integration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-profile-object-request common-lisp:nil
                       ((object-type-name :initarg :object-type-name :initform
                         (common-lisp:error ":object-type-name is required")
                         :type (common-lisp:or |typeName| common-lisp:null)
                         :accessor
                         struct-shape-put-profile-object-request-object-type-name
                         :shape "typeName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (object :initarg :object :initform
                         (common-lisp:error ":object is required") :type
                         (common-lisp:or |stringifiedJson| common-lisp:null)
                         :accessor
                         struct-shape-put-profile-object-request-object :shape
                         "stringifiedJson" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (domain-name :initarg :domain-name :initform
                         (common-lisp:error ":domain-name is required") :type
                         (common-lisp:or |name| common-lisp:null) :accessor
                         struct-shape-put-profile-object-request-domain-name
                         :shape "name" :location "uri" :location-name
                         "DomainName"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-profile-object-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'put-profile-object-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-profile-object-request
                    'make-put-profile-object-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-profile-object-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-profile-object-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'object-type-name))
      (common-lisp:list
       (common-lisp:cons "ObjectTypeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'object))
      (common-lisp:list
       (common-lisp:cons "Object"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-profile-object-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-profile-object-response common-lisp:nil
                       ((profile-object-unique-key :initarg
                         :profile-object-unique-key :initform common-lisp:nil
                         :type (common-lisp:or |string1To255| common-lisp:null)
                         :accessor
                         struct-shape-put-profile-object-response-profile-object-unique-key
                         :shape "string1To255" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-profile-object-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'put-profile-object-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-profile-object-response
                    'make-put-profile-object-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-profile-object-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-profile-object-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'profile-object-unique-key))
      (common-lisp:list
       (common-lisp:cons "ProfileObjectUniqueKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-profile-object-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-profile-object-type-request common-lisp:nil
                       ((domain-name :initarg :domain-name :initform
                         (common-lisp:error ":domain-name is required") :type
                         (common-lisp:or |name| common-lisp:null) :accessor
                         struct-shape-put-profile-object-type-request-domain-name
                         :shape "name" :location "uri" :location-name
                         "DomainName")
                        (object-type-name :initarg :object-type-name :initform
                         (common-lisp:error ":object-type-name is required")
                         :type (common-lisp:or |typeName| common-lisp:null)
                         :accessor
                         struct-shape-put-profile-object-type-request-object-type-name
                         :shape "typeName" :location "uri" :location-name
                         "ObjectTypeName")
                        (description :initarg :description :initform
                         (common-lisp:error ":description is required") :type
                         (common-lisp:or |sensitiveText| common-lisp:null)
                         :accessor
                         struct-shape-put-profile-object-type-request-description
                         :shape "sensitiveText" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (template-id :initarg :template-id :initform
                         common-lisp:nil :type
                         (common-lisp:or |name| common-lisp:null) :accessor
                         struct-shape-put-profile-object-type-request-template-id
                         :shape "name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (expiration-days :initarg :expiration-days :initform
                         common-lisp:nil :type
                         (common-lisp:or |expirationDaysInteger|
                                         common-lisp:null)
                         :accessor
                         struct-shape-put-profile-object-type-request-expiration-days
                         :shape "expirationDaysInteger" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (encryption-key :initarg :encryption-key :initform
                         common-lisp:nil :type
                         (common-lisp:or |encryptionKey| common-lisp:null)
                         :accessor
                         struct-shape-put-profile-object-type-request-encryption-key
                         :shape "encryptionKey" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (allow-profile-creation :initarg
                         :allow-profile-creation :initform common-lisp:nil
                         :type
                         (common-lisp:or common-lisp:boolean common-lisp:null)
                         :accessor
                         struct-shape-put-profile-object-type-request-allow-profile-creation
                         :shape "boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (source-last-updated-timestamp-format :initarg
                         :source-last-updated-timestamp-format :initform
                         common-lisp:nil :type
                         (common-lisp:or |string1To255| common-lisp:null)
                         :accessor
                         struct-shape-put-profile-object-type-request-source-last-updated-timestamp-format
                         :shape "string1To255" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (fields :initarg :fields :initform common-lisp:nil
                         :type (common-lisp:or field-map common-lisp:null)
                         :accessor
                         struct-shape-put-profile-object-type-request-fields
                         :shape "FieldMap" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (keys :initarg :keys :initform common-lisp:nil :type
                         (common-lisp:or key-map common-lisp:null) :accessor
                         struct-shape-put-profile-object-type-request-keys
                         :shape "KeyMap" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         struct-shape-put-profile-object-type-request-tags
                         :shape "TagMap" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-profile-object-type-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-profile-object-type-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-profile-object-type-request
                    'make-put-profile-object-type-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-profile-object-type-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-profile-object-type-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-id))
      (common-lisp:list
       (common-lisp:cons "TemplateId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expiration-days))
      (common-lisp:list
       (common-lisp:cons "ExpirationDays"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encryption-key))
      (common-lisp:list
       (common-lisp:cons "EncryptionKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'allow-profile-creation))
      (common-lisp:list
       (common-lisp:cons "AllowProfileCreation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-last-updated-timestamp-format))
      (common-lisp:list
       (common-lisp:cons "SourceLastUpdatedTimestampFormat"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fields))
      (common-lisp:list
       (common-lisp:cons "Fields"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'keys))
      (common-lisp:list
       (common-lisp:cons "Keys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-profile-object-type-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-profile-object-type-response common-lisp:nil
                       ((object-type-name :initarg :object-type-name :initform
                         (common-lisp:error ":object-type-name is required")
                         :type (common-lisp:or |typeName| common-lisp:null)
                         :accessor
                         struct-shape-put-profile-object-type-response-object-type-name
                         :shape "typeName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         (common-lisp:error ":description is required") :type
                         (common-lisp:or |sensitiveText| common-lisp:null)
                         :accessor
                         struct-shape-put-profile-object-type-response-description
                         :shape "sensitiveText" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (template-id :initarg :template-id :initform
                         common-lisp:nil :type
                         (common-lisp:or |name| common-lisp:null) :accessor
                         struct-shape-put-profile-object-type-response-template-id
                         :shape "name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (expiration-days :initarg :expiration-days :initform
                         common-lisp:nil :type
                         (common-lisp:or |expirationDaysInteger|
                                         common-lisp:null)
                         :accessor
                         struct-shape-put-profile-object-type-response-expiration-days
                         :shape "expirationDaysInteger" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (encryption-key :initarg :encryption-key :initform
                         common-lisp:nil :type
                         (common-lisp:or |encryptionKey| common-lisp:null)
                         :accessor
                         struct-shape-put-profile-object-type-response-encryption-key
                         :shape "encryptionKey" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (allow-profile-creation :initarg
                         :allow-profile-creation :initform common-lisp:nil
                         :type
                         (common-lisp:or common-lisp:boolean common-lisp:null)
                         :accessor
                         struct-shape-put-profile-object-type-response-allow-profile-creation
                         :shape "boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (source-last-updated-timestamp-format :initarg
                         :source-last-updated-timestamp-format :initform
                         common-lisp:nil :type
                         (common-lisp:or |string1To255| common-lisp:null)
                         :accessor
                         struct-shape-put-profile-object-type-response-source-last-updated-timestamp-format
                         :shape "string1To255" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (fields :initarg :fields :initform common-lisp:nil
                         :type (common-lisp:or field-map common-lisp:null)
                         :accessor
                         struct-shape-put-profile-object-type-response-fields
                         :shape "FieldMap" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (keys :initarg :keys :initform common-lisp:nil :type
                         (common-lisp:or key-map common-lisp:null) :accessor
                         struct-shape-put-profile-object-type-response-keys
                         :shape "KeyMap" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (created-at :initarg :created-at :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         struct-shape-put-profile-object-type-response-created-at
                         :shape "timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-updated-at :initarg :last-updated-at :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         struct-shape-put-profile-object-type-response-last-updated-at
                         :shape "timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         struct-shape-put-profile-object-type-response-tags
                         :shape "TagMap" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-profile-object-type-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-profile-object-type-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-profile-object-type-response
                    'make-put-profile-object-type-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-profile-object-type-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-profile-object-type-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'object-type-name))
      (common-lisp:list
       (common-lisp:cons "ObjectTypeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-id))
      (common-lisp:list
       (common-lisp:cons "TemplateId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expiration-days))
      (common-lisp:list
       (common-lisp:cons "ExpirationDays"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encryption-key))
      (common-lisp:list
       (common-lisp:cons "EncryptionKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'allow-profile-creation))
      (common-lisp:list
       (common-lisp:cons "AllowProfileCreation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-last-updated-timestamp-format))
      (common-lisp:list
       (common-lisp:cons "SourceLastUpdatedTimestampFormat"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fields))
      (common-lisp:list
       (common-lisp:cons "Fields"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'keys))
      (common-lisp:list
       (common-lisp:cons "Keys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "CreatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-at))
      (common-lisp:list
       (common-lisp:cons "LastUpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-profile-object-type-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass range common-lisp:nil
                       ((value :initarg :value :initform
                         (common-lisp:error ":value is required") :type
                         (common-lisp:or value common-lisp:null) :accessor
                         struct-shape-range-value :shape "Value" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (unit :initarg :unit :initform
                         (common-lisp:error ":unit is required") :type
                         (common-lisp:or unit common-lisp:null) :accessor
                         struct-shape-range-unit :shape "Unit" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-range
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'range
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'range 'make-range))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input range))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input range))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'unit))
      (common-lisp:list
       (common-lisp:cons "Unit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input range))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-exception
     (customer-profiles-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'resource-not-found-exception
                    'resource-not-found-exception-message)))
(common-lisp:deftype role-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass rule-based-matching-request common-lisp:nil
                       ((enabled :initarg :enabled :initform
                         (common-lisp:error ":enabled is required") :type
                         (common-lisp:or |optionalBoolean| common-lisp:null)
                         :accessor
                         struct-shape-rule-based-matching-request-enabled
                         :shape "optionalBoolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (matching-rules :initarg :matching-rules :initform
                         common-lisp:nil :type
                         (common-lisp:or matching-rules common-lisp:null)
                         :accessor
                         struct-shape-rule-based-matching-request-matching-rules
                         :shape "MatchingRules" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-allowed-rule-level-for-merging :initarg
                         :max-allowed-rule-level-for-merging :initform
                         common-lisp:nil :type
                         (common-lisp:or max-allowed-rule-level-for-merging
                                         common-lisp:null)
                         :accessor
                         struct-shape-rule-based-matching-request-max-allowed-rule-level-for-merging
                         :shape "MaxAllowedRuleLevelForMerging" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (max-allowed-rule-level-for-matching :initarg
                         :max-allowed-rule-level-for-matching :initform
                         common-lisp:nil :type
                         (common-lisp:or max-allowed-rule-level-for-matching
                                         common-lisp:null)
                         :accessor
                         struct-shape-rule-based-matching-request-max-allowed-rule-level-for-matching
                         :shape "MaxAllowedRuleLevelForMatching" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (attribute-types-selector :initarg
                         :attribute-types-selector :initform common-lisp:nil
                         :type
                         (common-lisp:or attribute-types-selector
                                         common-lisp:null)
                         :accessor
                         struct-shape-rule-based-matching-request-attribute-types-selector
                         :shape "AttributeTypesSelector" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (conflict-resolution :initarg :conflict-resolution
                         :initform common-lisp:nil :type
                         (common-lisp:or conflict-resolution common-lisp:null)
                         :accessor
                         struct-shape-rule-based-matching-request-conflict-resolution
                         :shape "ConflictResolution" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (exporting-config :initarg :exporting-config :initform
                         common-lisp:nil :type
                         (common-lisp:or exporting-config common-lisp:null)
                         :accessor
                         struct-shape-rule-based-matching-request-exporting-config
                         :shape "ExportingConfig" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-rule-based-matching-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'rule-based-matching-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'rule-based-matching-request
                    'make-rule-based-matching-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          rule-based-matching-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          rule-based-matching-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "Enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'matching-rules))
      (common-lisp:list
       (common-lisp:cons "MatchingRules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'max-allowed-rule-level-for-merging))
      (common-lisp:list
       (common-lisp:cons "MaxAllowedRuleLevelForMerging"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'max-allowed-rule-level-for-matching))
      (common-lisp:list
       (common-lisp:cons "MaxAllowedRuleLevelForMatching"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'attribute-types-selector))
      (common-lisp:list
       (common-lisp:cons "AttributeTypesSelector"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'conflict-resolution))
      (common-lisp:list
       (common-lisp:cons "ConflictResolution"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'exporting-config))
      (common-lisp:list
       (common-lisp:cons "ExportingConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          rule-based-matching-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass rule-based-matching-response common-lisp:nil
                       ((enabled :initarg :enabled :initform common-lisp:nil
                         :type
                         (common-lisp:or |optionalBoolean| common-lisp:null)
                         :accessor
                         struct-shape-rule-based-matching-response-enabled
                         :shape "optionalBoolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (matching-rules :initarg :matching-rules :initform
                         common-lisp:nil :type
                         (common-lisp:or matching-rules common-lisp:null)
                         :accessor
                         struct-shape-rule-based-matching-response-matching-rules
                         :shape "MatchingRules" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or rule-based-matching-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-rule-based-matching-response-status
                         :shape "RuleBasedMatchingStatus" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (max-allowed-rule-level-for-merging :initarg
                         :max-allowed-rule-level-for-merging :initform
                         common-lisp:nil :type
                         (common-lisp:or max-allowed-rule-level-for-merging
                                         common-lisp:null)
                         :accessor
                         struct-shape-rule-based-matching-response-max-allowed-rule-level-for-merging
                         :shape "MaxAllowedRuleLevelForMerging" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (max-allowed-rule-level-for-matching :initarg
                         :max-allowed-rule-level-for-matching :initform
                         common-lisp:nil :type
                         (common-lisp:or max-allowed-rule-level-for-matching
                                         common-lisp:null)
                         :accessor
                         struct-shape-rule-based-matching-response-max-allowed-rule-level-for-matching
                         :shape "MaxAllowedRuleLevelForMatching" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (attribute-types-selector :initarg
                         :attribute-types-selector :initform common-lisp:nil
                         :type
                         (common-lisp:or attribute-types-selector
                                         common-lisp:null)
                         :accessor
                         struct-shape-rule-based-matching-response-attribute-types-selector
                         :shape "AttributeTypesSelector" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (conflict-resolution :initarg :conflict-resolution
                         :initform common-lisp:nil :type
                         (common-lisp:or conflict-resolution common-lisp:null)
                         :accessor
                         struct-shape-rule-based-matching-response-conflict-resolution
                         :shape "ConflictResolution" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (exporting-config :initarg :exporting-config :initform
                         common-lisp:nil :type
                         (common-lisp:or exporting-config common-lisp:null)
                         :accessor
                         struct-shape-rule-based-matching-response-exporting-config
                         :shape "ExportingConfig" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-rule-based-matching-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'rule-based-matching-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'rule-based-matching-response
                    'make-rule-based-matching-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          rule-based-matching-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          rule-based-matching-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "Enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'matching-rules))
      (common-lisp:list
       (common-lisp:cons "MatchingRules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'max-allowed-rule-level-for-merging))
      (common-lisp:list
       (common-lisp:cons "MaxAllowedRuleLevelForMerging"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'max-allowed-rule-level-for-matching))
      (common-lisp:list
       (common-lisp:cons "MaxAllowedRuleLevelForMatching"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'attribute-types-selector))
      (common-lisp:list
       (common-lisp:cons "AttributeTypesSelector"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'conflict-resolution))
      (common-lisp:list
       (common-lisp:cons "ConflictResolution"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'exporting-config))
      (common-lisp:list
       (common-lisp:cons "ExportingConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          rule-based-matching-response))
   common-lisp:nil))
(common-lisp:deftype rule-based-matching-status () 'common-lisp:string)
(common-lisp:deftype rule-level () 'common-lisp:integer)
(common-lisp:deftype s3connector-operator () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass s3exporting-config common-lisp:nil
                       ((s3bucket-name :initarg :s3bucket-name :initform
                         (common-lisp:error ":s3bucket-name is required") :type
                         (common-lisp:or |s3BucketName| common-lisp:null)
                         :accessor
                         struct-shape-s3exporting-config-s3bucket-name :shape
                         "s3BucketName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (s3key-name :initarg :s3key-name :initform
                         common-lisp:nil :type
                         (common-lisp:or |s3KeyNameCustomerOutputConfig|
                                         common-lisp:null)
                         :accessor struct-shape-s3exporting-config-s3key-name
                         :shape "s3KeyNameCustomerOutputConfig" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-s3exporting-config
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 's3exporting-config
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 's3exporting-config 'make-s3exporting-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input s3exporting-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input s3exporting-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3bucket-name))
      (common-lisp:list
       (common-lisp:cons "S3BucketName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3key-name))
      (common-lisp:list
       (common-lisp:cons "S3KeyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input s3exporting-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass s3exporting-location common-lisp:nil
                       ((s3bucket-name :initarg :s3bucket-name :initform
                         common-lisp:nil :type
                         (common-lisp:or |s3BucketName| common-lisp:null)
                         :accessor
                         struct-shape-s3exporting-location-s3bucket-name :shape
                         "s3BucketName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (s3key-name :initarg :s3key-name :initform
                         common-lisp:nil :type
                         (common-lisp:or |s3KeyName| common-lisp:null)
                         :accessor struct-shape-s3exporting-location-s3key-name
                         :shape "s3KeyName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-s3exporting-location
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 's3exporting-location
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 's3exporting-location 'make-s3exporting-location))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input s3exporting-location))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input s3exporting-location))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3bucket-name))
      (common-lisp:list
       (common-lisp:cons "S3BucketName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3key-name))
      (common-lisp:list
       (common-lisp:cons "S3KeyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input s3exporting-location))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass s3source-properties common-lisp:nil
                       ((bucket-name :initarg :bucket-name :initform
                         (common-lisp:error ":bucket-name is required") :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor struct-shape-s3source-properties-bucket-name
                         :shape "BucketName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (bucket-prefix :initarg :bucket-prefix :initform
                         common-lisp:nil :type
                         (common-lisp:or bucket-prefix common-lisp:null)
                         :accessor
                         struct-shape-s3source-properties-bucket-prefix :shape
                         "BucketPrefix" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-s3source-properties
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 's3source-properties
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 's3source-properties 'make-s3source-properties))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input s3source-properties))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input s3source-properties))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket-name))
      (common-lisp:list
       (common-lisp:cons "BucketName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket-prefix))
      (common-lisp:list
       (common-lisp:cons "BucketPrefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input s3source-properties))
   common-lisp:nil))
(common-lisp:deftype salesforce-connector-operator () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass salesforce-source-properties common-lisp:nil
                       ((object :initarg :object :initform
                         (common-lisp:error ":object is required") :type
                         (common-lisp:or object common-lisp:null) :accessor
                         struct-shape-salesforce-source-properties-object
                         :shape "Object" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (enable-dynamic-field-update :initarg
                         :enable-dynamic-field-update :initform common-lisp:nil
                         :type
                         (common-lisp:or common-lisp:boolean common-lisp:null)
                         :accessor
                         struct-shape-salesforce-source-properties-enable-dynamic-field-update
                         :shape "boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (include-deleted-records :initarg
                         :include-deleted-records :initform common-lisp:nil
                         :type
                         (common-lisp:or common-lisp:boolean common-lisp:null)
                         :accessor
                         struct-shape-salesforce-source-properties-include-deleted-records
                         :shape "boolean" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-salesforce-source-properties
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'salesforce-source-properties
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'salesforce-source-properties
                    'make-salesforce-source-properties))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          salesforce-source-properties))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          salesforce-source-properties))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'object))
      (common-lisp:list
       (common-lisp:cons "Object"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-dynamic-field-update))
      (common-lisp:list
       (common-lisp:cons "EnableDynamicFieldUpdate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'include-deleted-records))
      (common-lisp:list
       (common-lisp:cons "IncludeDeletedRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          salesforce-source-properties))
   common-lisp:nil))
(common-lisp:deftype schedule-expression () 'common-lisp:string)
(common-lisp:deftype schedule-offset () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass scheduled-trigger-properties common-lisp:nil
                       ((schedule-expression :initarg :schedule-expression
                         :initform
                         (common-lisp:error ":schedule-expression is required")
                         :type
                         (common-lisp:or schedule-expression common-lisp:null)
                         :accessor
                         struct-shape-scheduled-trigger-properties-schedule-expression
                         :shape "ScheduleExpression" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (data-pull-mode :initarg :data-pull-mode :initform
                         common-lisp:nil :type
                         (common-lisp:or data-pull-mode common-lisp:null)
                         :accessor
                         struct-shape-scheduled-trigger-properties-data-pull-mode
                         :shape "DataPullMode" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (schedule-start-time :initarg :schedule-start-time
                         :initform common-lisp:nil :type
                         (common-lisp:or date common-lisp:null) :accessor
                         struct-shape-scheduled-trigger-properties-schedule-start-time
                         :shape "Date" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (schedule-end-time :initarg :schedule-end-time
                         :initform common-lisp:nil :type
                         (common-lisp:or date common-lisp:null) :accessor
                         struct-shape-scheduled-trigger-properties-schedule-end-time
                         :shape "Date" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (timezone :initarg :timezone :initform common-lisp:nil
                         :type (common-lisp:or timezone common-lisp:null)
                         :accessor
                         struct-shape-scheduled-trigger-properties-timezone
                         :shape "Timezone" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (schedule-offset :initarg :schedule-offset :initform
                         common-lisp:nil :type
                         (common-lisp:or schedule-offset common-lisp:null)
                         :accessor
                         struct-shape-scheduled-trigger-properties-schedule-offset
                         :shape "ScheduleOffset" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (first-execution-from :initarg :first-execution-from
                         :initform common-lisp:nil :type
                         (common-lisp:or date common-lisp:null) :accessor
                         struct-shape-scheduled-trigger-properties-first-execution-from
                         :shape "Date" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-scheduled-trigger-properties
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'scheduled-trigger-properties
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'scheduled-trigger-properties
                    'make-scheduled-trigger-properties))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          scheduled-trigger-properties))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          scheduled-trigger-properties))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schedule-expression))
      (common-lisp:list
       (common-lisp:cons "ScheduleExpression"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-pull-mode))
      (common-lisp:list
       (common-lisp:cons "DataPullMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schedule-start-time))
      (common-lisp:list
       (common-lisp:cons "ScheduleStartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schedule-end-time))
      (common-lisp:list
       (common-lisp:cons "ScheduleEndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timezone))
      (common-lisp:list
       (common-lisp:cons "Timezone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schedule-offset))
      (common-lisp:list
       (common-lisp:cons "ScheduleOffset"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'first-execution-from))
      (common-lisp:list
       (common-lisp:cons "FirstExecutionFrom"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          scheduled-trigger-properties))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass search-profiles-request common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or |token| common-lisp:null) :accessor
                         struct-shape-search-profiles-request-next-token :shape
                         "token" :location "querystring" :location-name
                         "next-token")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or |maxSize100| common-lisp:null)
                         :accessor
                         struct-shape-search-profiles-request-max-results
                         :shape "maxSize100" :location "querystring"
                         :location-name "max-results")
                        (domain-name :initarg :domain-name :initform
                         (common-lisp:error ":domain-name is required") :type
                         (common-lisp:or |name| common-lisp:null) :accessor
                         struct-shape-search-profiles-request-domain-name
                         :shape "name" :location "uri" :location-name
                         "DomainName")
                        (key-name :initarg :key-name :initform
                         (common-lisp:error ":key-name is required") :type
                         (common-lisp:or |name| common-lisp:null) :accessor
                         struct-shape-search-profiles-request-key-name :shape
                         "name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (values :initarg :values :initform
                         (common-lisp:error ":values is required") :type
                         (common-lisp:or |requestValueList| common-lisp:null)
                         :accessor struct-shape-search-profiles-request-values
                         :shape "requestValueList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (additional-search-keys :initarg
                         :additional-search-keys :initform common-lisp:nil
                         :type
                         (common-lisp:or |additionalSearchKeysList|
                                         common-lisp:null)
                         :accessor
                         struct-shape-search-profiles-request-additional-search-keys
                         :shape "additionalSearchKeysList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (logical-operator :initarg :logical-operator :initform
                         common-lisp:nil :type
                         (common-lisp:or |logicalOperator| common-lisp:null)
                         :accessor
                         struct-shape-search-profiles-request-logical-operator
                         :shape "logicalOperator" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-search-profiles-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'search-profiles-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'search-profiles-request 'make-search-profiles-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          search-profiles-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          search-profiles-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-name))
      (common-lisp:list
       (common-lisp:cons "KeyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "Values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'additional-search-keys))
      (common-lisp:list
       (common-lisp:cons "AdditionalSearchKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'logical-operator))
      (common-lisp:list
       (common-lisp:cons "LogicalOperator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          search-profiles-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass search-profiles-response common-lisp:nil
                       ((items :initarg :items :initform common-lisp:nil :type
                         (common-lisp:or profile-list common-lisp:null)
                         :accessor struct-shape-search-profiles-response-items
                         :shape "ProfileList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or |token| common-lisp:null) :accessor
                         struct-shape-search-profiles-response-next-token
                         :shape "token" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-search-profiles-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'search-profiles-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'search-profiles-response 'make-search-profiles-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          search-profiles-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          search-profiles-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'items))
      (common-lisp:list
       (common-lisp:cons "Items"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          search-profiles-response))
   common-lisp:nil))
(common-lisp:deftype service-now-connector-operator () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass service-now-source-properties common-lisp:nil
                       ((object :initarg :object :initform
                         (common-lisp:error ":object is required") :type
                         (common-lisp:or object common-lisp:null) :accessor
                         struct-shape-service-now-source-properties-object
                         :shape "Object" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-service-now-source-properties
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'service-now-source-properties
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'service-now-source-properties
                    'make-service-now-source-properties))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          service-now-source-properties))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          service-now-source-properties))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'object))
      (common-lisp:list
       (common-lisp:cons "Object"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          service-now-source-properties))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass source-connector-properties common-lisp:nil
                       ((marketo :initarg :marketo :initform common-lisp:nil
                         :type
                         (common-lisp:or marketo-source-properties
                                         common-lisp:null)
                         :accessor
                         struct-shape-source-connector-properties-marketo
                         :shape "MarketoSourceProperties" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (s3 :initarg :s3 :initform common-lisp:nil :type
                         (common-lisp:or s3source-properties common-lisp:null)
                         :accessor struct-shape-source-connector-properties-s3
                         :shape "S3SourceProperties" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (salesforce :initarg :salesforce :initform
                         common-lisp:nil :type
                         (common-lisp:or salesforce-source-properties
                                         common-lisp:null)
                         :accessor
                         struct-shape-source-connector-properties-salesforce
                         :shape "SalesforceSourceProperties" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (service-now :initarg :service-now :initform
                         common-lisp:nil :type
                         (common-lisp:or service-now-source-properties
                                         common-lisp:null)
                         :accessor
                         struct-shape-source-connector-properties-service-now
                         :shape "ServiceNowSourceProperties" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (zendesk :initarg :zendesk :initform common-lisp:nil
                         :type
                         (common-lisp:or zendesk-source-properties
                                         common-lisp:null)
                         :accessor
                         struct-shape-source-connector-properties-zendesk
                         :shape "ZendeskSourceProperties" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-source-connector-properties
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'source-connector-properties
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'source-connector-properties
                    'make-source-connector-properties))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          source-connector-properties))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          source-connector-properties))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marketo))
      (common-lisp:list
       (common-lisp:cons "Marketo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3))
      (common-lisp:list
       (common-lisp:cons "S3"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'salesforce))
      (common-lisp:list
       (common-lisp:cons "Salesforce"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-now))
      (common-lisp:list
       (common-lisp:cons "ServiceNow"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'zendesk))
      (common-lisp:list
       (common-lisp:cons "Zendesk"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          source-connector-properties))
   common-lisp:nil))
(common-lisp:deftype source-connector-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype source-fields ()
   '(trivial-types:proper-list |stringTo2048|))
 (common-lisp:defun make-source-fields
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list |stringTo2048|))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass source-flow-config common-lisp:nil
                       ((connector-profile-name :initarg
                         :connector-profile-name :initform common-lisp:nil
                         :type
                         (common-lisp:or connector-profile-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-source-flow-config-connector-profile-name
                         :shape "ConnectorProfileName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (connector-type :initarg :connector-type :initform
                         (common-lisp:error ":connector-type is required")
                         :type
                         (common-lisp:or source-connector-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-source-flow-config-connector-type :shape
                         "SourceConnectorType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (incremental-pull-config :initarg
                         :incremental-pull-config :initform common-lisp:nil
                         :type
                         (common-lisp:or incremental-pull-config
                                         common-lisp:null)
                         :accessor
                         struct-shape-source-flow-config-incremental-pull-config
                         :shape "IncrementalPullConfig" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (source-connector-properties :initarg
                         :source-connector-properties :initform
                         (common-lisp:error
                          ":source-connector-properties is required")
                         :type
                         (common-lisp:or source-connector-properties
                                         common-lisp:null)
                         :accessor
                         struct-shape-source-flow-config-source-connector-properties
                         :shape "SourceConnectorProperties" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-source-flow-config
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'source-flow-config
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'source-flow-config 'make-source-flow-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input source-flow-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input source-flow-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'connector-profile-name))
      (common-lisp:list
       (common-lisp:cons "ConnectorProfileName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connector-type))
      (common-lisp:list
       (common-lisp:cons "ConnectorType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'incremental-pull-config))
      (common-lisp:list
       (common-lisp:cons "IncrementalPullConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-connector-properties))
      (common-lisp:list
       (common-lisp:cons "SourceConnectorProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input source-flow-config))
   common-lisp:nil))
(common-lisp:deftype standard-identifier () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype standard-identifier-list ()
   '(trivial-types:proper-list standard-identifier))
 (common-lisp:defun make-standard-identifier-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list standard-identifier))
   aws-sdk/generator/shape::members))
(common-lisp:deftype statistic () 'common-lisp:string)
(common-lisp:deftype status () 'common-lisp:string)
(common-lisp:deftype tag-arn () 'common-lisp:string)
(common-lisp:deftype tag-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tag-key-list () '(trivial-types:proper-list tag-key))
 (common-lisp:defun make-tag-key-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype tag-map () 'common-lisp:hash-table)
 (common-lisp:defun make-tag-map (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defclass tag-resource-request common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resourcearn is required") :type
                         (common-lisp:or tag-arn common-lisp:null) :accessor
                         struct-shape-tag-resource-request-resource-arn :shape
                         "TagArn" :location "uri" :location-name "resourceArn")
                        (tags :initarg :tags :initform
                         (common-lisp:error ":tags is required") :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         struct-shape-tag-resource-request-tags :shape "TagMap"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tag-resource-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'tag-resource-request 'make-tag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass tag-resource-response common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tag-resource-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'tag-resource-response 'make-tag-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   common-lisp:nil))
(common-lisp:deftype tag-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass task common-lisp:nil
                       ((connector-operator :initarg :connector-operator
                         :initform common-lisp:nil :type
                         (common-lisp:or connector-operator common-lisp:null)
                         :accessor struct-shape-task-connector-operator :shape
                         "ConnectorOperator" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (destination-field :initarg :destination-field
                         :initform common-lisp:nil :type
                         (common-lisp:or destination-field common-lisp:null)
                         :accessor struct-shape-task-destination-field :shape
                         "DestinationField" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (source-fields :initarg :source-fields :initform
                         (common-lisp:error ":source-fields is required") :type
                         (common-lisp:or source-fields common-lisp:null)
                         :accessor struct-shape-task-source-fields :shape
                         "SourceFields" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (task-properties :initarg :task-properties :initform
                         common-lisp:nil :type
                         (common-lisp:or task-properties-map common-lisp:null)
                         :accessor struct-shape-task-task-properties :shape
                         "TaskPropertiesMap" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (task-type :initarg :task-type :initform
                         (common-lisp:error ":task-type is required") :type
                         (common-lisp:or task-type common-lisp:null) :accessor
                         struct-shape-task-task-type :shape "TaskType"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-task (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'task
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'task 'make-task))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input task))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input task))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connector-operator))
      (common-lisp:list
       (common-lisp:cons "ConnectorOperator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination-field))
      (common-lisp:list
       (common-lisp:cons "DestinationField"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-fields))
      (common-lisp:list
       (common-lisp:cons "SourceFields"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-properties))
      (common-lisp:list
       (common-lisp:cons "TaskProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-type))
      (common-lisp:list
       (common-lisp:cons "TaskType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input task))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype task-properties-map () 'common-lisp:hash-table)
 (common-lisp:defun make-task-properties-map
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype task-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tasks () '(trivial-types:proper-list task))
 (common-lisp:defun make-tasks
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list task))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass threshold common-lisp:nil
                       ((value :initarg :value :initform
                         (common-lisp:error ":value is required") :type
                         (common-lisp:or |string1To255| common-lisp:null)
                         :accessor struct-shape-threshold-value :shape
                         "string1To255" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (operator :initarg :operator :initform
                         (common-lisp:error ":operator is required") :type
                         (common-lisp:or operator common-lisp:null) :accessor
                         struct-shape-threshold-operator :shape "Operator"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-threshold
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'threshold
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'threshold 'make-threshold))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input threshold))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input threshold))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operator))
      (common-lisp:list
       (common-lisp:cons "Operator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input threshold))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition throttling-exception
     (customer-profiles-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       throttling-exception-message)))
 (common-lisp:export
  (common-lisp:list 'throttling-exception 'throttling-exception-message)))
(common-lisp:deftype timezone () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass trigger-config common-lisp:nil
                       ((trigger-type :initarg :trigger-type :initform
                         (common-lisp:error ":trigger-type is required") :type
                         (common-lisp:or trigger-type common-lisp:null)
                         :accessor struct-shape-trigger-config-trigger-type
                         :shape "TriggerType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (trigger-properties :initarg :trigger-properties
                         :initform common-lisp:nil :type
                         (common-lisp:or trigger-properties common-lisp:null)
                         :accessor
                         struct-shape-trigger-config-trigger-properties :shape
                         "TriggerProperties" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-trigger-config
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'trigger-config
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'trigger-config 'make-trigger-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input trigger-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input trigger-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trigger-type))
      (common-lisp:list
       (common-lisp:cons "TriggerType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trigger-properties))
      (common-lisp:list
       (common-lisp:cons "TriggerProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input trigger-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass trigger-properties common-lisp:nil
                       ((scheduled :initarg :scheduled :initform
                         common-lisp:nil :type
                         (common-lisp:or scheduled-trigger-properties
                                         common-lisp:null)
                         :accessor struct-shape-trigger-properties-scheduled
                         :shape "ScheduledTriggerProperties" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-trigger-properties
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'trigger-properties
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'trigger-properties 'make-trigger-properties))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input trigger-properties))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input trigger-properties))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scheduled))
      (common-lisp:list
       (common-lisp:cons "Scheduled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input trigger-properties))
   common-lisp:nil))
(common-lisp:deftype trigger-type () 'common-lisp:string)
(common-lisp:deftype unit () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass untag-resource-request common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resourcearn is required") :type
                         (common-lisp:or tag-arn common-lisp:null) :accessor
                         struct-shape-untag-resource-request-resource-arn
                         :shape "TagArn" :location "uri" :location-name
                         "resourceArn")
                        (tag-keys :initarg :tag-keys :initform
                         (common-lisp:error ":tagkeys is required") :type
                         (common-lisp:or tag-key-list common-lisp:null)
                         :accessor struct-shape-untag-resource-request-tag-keys
                         :shape "TagKeyList" :location "querystring"
                         :location-name "tagKeys"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-untag-resource-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'untag-resource-request 'make-untag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass untag-resource-response common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-untag-resource-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'untag-resource-response 'make-untag-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-address common-lisp:nil
                       ((address1 :initarg :address1 :initform common-lisp:nil
                         :type (common-lisp:or |string0To255| common-lisp:null)
                         :accessor struct-shape-update-address-address1 :shape
                         "string0To255" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (address2 :initarg :address2 :initform common-lisp:nil
                         :type (common-lisp:or |string0To255| common-lisp:null)
                         :accessor struct-shape-update-address-address2 :shape
                         "string0To255" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (address3 :initarg :address3 :initform common-lisp:nil
                         :type (common-lisp:or |string0To255| common-lisp:null)
                         :accessor struct-shape-update-address-address3 :shape
                         "string0To255" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (address4 :initarg :address4 :initform common-lisp:nil
                         :type (common-lisp:or |string0To255| common-lisp:null)
                         :accessor struct-shape-update-address-address4 :shape
                         "string0To255" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (city :initarg :city :initform common-lisp:nil :type
                         (common-lisp:or |string0To255| common-lisp:null)
                         :accessor struct-shape-update-address-city :shape
                         "string0To255" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (county :initarg :county :initform common-lisp:nil
                         :type (common-lisp:or |string0To255| common-lisp:null)
                         :accessor struct-shape-update-address-county :shape
                         "string0To255" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (state :initarg :state :initform common-lisp:nil :type
                         (common-lisp:or |string0To255| common-lisp:null)
                         :accessor struct-shape-update-address-state :shape
                         "string0To255" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (province :initarg :province :initform common-lisp:nil
                         :type (common-lisp:or |string0To255| common-lisp:null)
                         :accessor struct-shape-update-address-province :shape
                         "string0To255" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (country :initarg :country :initform common-lisp:nil
                         :type (common-lisp:or |string0To255| common-lisp:null)
                         :accessor struct-shape-update-address-country :shape
                         "string0To255" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (postal-code :initarg :postal-code :initform
                         common-lisp:nil :type
                         (common-lisp:or |string0To255| common-lisp:null)
                         :accessor struct-shape-update-address-postal-code
                         :shape "string0To255" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-address
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-address
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'update-address 'make-update-address))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-address))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-address))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'address1))
      (common-lisp:list
       (common-lisp:cons "Address1"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'address2))
      (common-lisp:list
       (common-lisp:cons "Address2"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'address3))
      (common-lisp:list
       (common-lisp:cons "Address3"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'address4))
      (common-lisp:list
       (common-lisp:cons "Address4"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'city))
      (common-lisp:list
       (common-lisp:cons "City"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'county))
      (common-lisp:list
       (common-lisp:cons "County"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'province))
      (common-lisp:list
       (common-lisp:cons "Province"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'country))
      (common-lisp:list
       (common-lisp:cons "Country"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'postal-code))
      (common-lisp:list
       (common-lisp:cons "PostalCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-address))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype update-attributes () 'common-lisp:hash-table)
 (common-lisp:defun make-update-attributes
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defclass update-calculated-attribute-definition-request
                       common-lisp:nil
                       ((domain-name :initarg :domain-name :initform
                         (common-lisp:error ":domain-name is required") :type
                         (common-lisp:or |name| common-lisp:null) :accessor
                         struct-shape-update-calculated-attribute-definition-request-domain-name
                         :shape "name" :location "uri" :location-name
                         "DomainName")
                        (calculated-attribute-name :initarg
                         :calculated-attribute-name :initform
                         (common-lisp:error
                          ":calculated-attribute-name is required")
                         :type (common-lisp:or |typeName| common-lisp:null)
                         :accessor
                         struct-shape-update-calculated-attribute-definition-request-calculated-attribute-name
                         :shape "typeName" :location "uri" :location-name
                         "CalculatedAttributeName")
                        (display-name :initarg :display-name :initform
                         common-lisp:nil :type
                         (common-lisp:or |displayName| common-lisp:null)
                         :accessor
                         struct-shape-update-calculated-attribute-definition-request-display-name
                         :shape "displayName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or |sensitiveText| common-lisp:null)
                         :accessor
                         struct-shape-update-calculated-attribute-definition-request-description
                         :shape "sensitiveText" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (conditions :initarg :conditions :initform
                         common-lisp:nil :type
                         (common-lisp:or conditions common-lisp:null) :accessor
                         struct-shape-update-calculated-attribute-definition-request-conditions
                         :shape "Conditions" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-calculated-attribute-definition-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-calculated-attribute-definition-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-calculated-attribute-definition-request
                    'make-update-calculated-attribute-definition-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-calculated-attribute-definition-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-calculated-attribute-definition-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-name))
      (common-lisp:list
       (common-lisp:cons "DisplayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'conditions))
      (common-lisp:list
       (common-lisp:cons "Conditions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-calculated-attribute-definition-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-calculated-attribute-definition-response
                       common-lisp:nil
                       ((calculated-attribute-name :initarg
                         :calculated-attribute-name :initform common-lisp:nil
                         :type (common-lisp:or |typeName| common-lisp:null)
                         :accessor
                         struct-shape-update-calculated-attribute-definition-response-calculated-attribute-name
                         :shape "typeName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (display-name :initarg :display-name :initform
                         common-lisp:nil :type
                         (common-lisp:or |displayName| common-lisp:null)
                         :accessor
                         struct-shape-update-calculated-attribute-definition-response-display-name
                         :shape "displayName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or |sensitiveText| common-lisp:null)
                         :accessor
                         struct-shape-update-calculated-attribute-definition-response-description
                         :shape "sensitiveText" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (created-at :initarg :created-at :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         struct-shape-update-calculated-attribute-definition-response-created-at
                         :shape "timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-updated-at :initarg :last-updated-at :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         struct-shape-update-calculated-attribute-definition-response-last-updated-at
                         :shape "timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (statistic :initarg :statistic :initform
                         common-lisp:nil :type
                         (common-lisp:or statistic common-lisp:null) :accessor
                         struct-shape-update-calculated-attribute-definition-response-statistic
                         :shape "Statistic" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (conditions :initarg :conditions :initform
                         common-lisp:nil :type
                         (common-lisp:or conditions common-lisp:null) :accessor
                         struct-shape-update-calculated-attribute-definition-response-conditions
                         :shape "Conditions" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (attribute-details :initarg :attribute-details
                         :initform common-lisp:nil :type
                         (common-lisp:or attribute-details common-lisp:null)
                         :accessor
                         struct-shape-update-calculated-attribute-definition-response-attribute-details
                         :shape "AttributeDetails" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         struct-shape-update-calculated-attribute-definition-response-tags
                         :shape "TagMap" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-calculated-attribute-definition-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-calculated-attribute-definition-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-calculated-attribute-definition-response
                    'make-update-calculated-attribute-definition-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-calculated-attribute-definition-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-calculated-attribute-definition-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'calculated-attribute-name))
      (common-lisp:list
       (common-lisp:cons "CalculatedAttributeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-name))
      (common-lisp:list
       (common-lisp:cons "DisplayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "CreatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-at))
      (common-lisp:list
       (common-lisp:cons "LastUpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'statistic))
      (common-lisp:list
       (common-lisp:cons "Statistic"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'conditions))
      (common-lisp:list
       (common-lisp:cons "Conditions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attribute-details))
      (common-lisp:list
       (common-lisp:cons "AttributeDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-calculated-attribute-definition-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-domain-request common-lisp:nil
                       ((domain-name :initarg :domain-name :initform
                         (common-lisp:error ":domain-name is required") :type
                         (common-lisp:or |name| common-lisp:null) :accessor
                         struct-shape-update-domain-request-domain-name :shape
                         "name" :location "uri" :location-name "DomainName")
                        (default-expiration-days :initarg
                         :default-expiration-days :initform common-lisp:nil
                         :type
                         (common-lisp:or |expirationDaysInteger|
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-domain-request-default-expiration-days
                         :shape "expirationDaysInteger" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (default-encryption-key :initarg
                         :default-encryption-key :initform common-lisp:nil
                         :type
                         (common-lisp:or |encryptionKey| common-lisp:null)
                         :accessor
                         struct-shape-update-domain-request-default-encryption-key
                         :shape "encryptionKey" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dead-letter-queue-url :initarg :dead-letter-queue-url
                         :initform common-lisp:nil :type
                         (common-lisp:or |sqsQueueUrl| common-lisp:null)
                         :accessor
                         struct-shape-update-domain-request-dead-letter-queue-url
                         :shape "sqsQueueUrl" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (matching :initarg :matching :initform common-lisp:nil
                         :type
                         (common-lisp:or matching-request common-lisp:null)
                         :accessor struct-shape-update-domain-request-matching
                         :shape "MatchingRequest" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (rule-based-matching :initarg :rule-based-matching
                         :initform common-lisp:nil :type
                         (common-lisp:or rule-based-matching-request
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-domain-request-rule-based-matching
                         :shape "RuleBasedMatchingRequest" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         struct-shape-update-domain-request-tags :shape
                         "TagMap" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-domain-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-domain-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-domain-request 'make-update-domain-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-domain-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-domain-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-expiration-days))
      (common-lisp:list
       (common-lisp:cons "DefaultExpirationDays"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-encryption-key))
      (common-lisp:list
       (common-lisp:cons "DefaultEncryptionKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dead-letter-queue-url))
      (common-lisp:list
       (common-lisp:cons "DeadLetterQueueUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'matching))
      (common-lisp:list
       (common-lisp:cons "Matching"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-based-matching))
      (common-lisp:list
       (common-lisp:cons "RuleBasedMatching"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-domain-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-domain-response common-lisp:nil
                       ((domain-name :initarg :domain-name :initform
                         (common-lisp:error ":domain-name is required") :type
                         (common-lisp:or |name| common-lisp:null) :accessor
                         struct-shape-update-domain-response-domain-name :shape
                         "name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (default-expiration-days :initarg
                         :default-expiration-days :initform common-lisp:nil
                         :type
                         (common-lisp:or |expirationDaysInteger|
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-domain-response-default-expiration-days
                         :shape "expirationDaysInteger" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (default-encryption-key :initarg
                         :default-encryption-key :initform common-lisp:nil
                         :type
                         (common-lisp:or |encryptionKey| common-lisp:null)
                         :accessor
                         struct-shape-update-domain-response-default-encryption-key
                         :shape "encryptionKey" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dead-letter-queue-url :initarg :dead-letter-queue-url
                         :initform common-lisp:nil :type
                         (common-lisp:or |sqsQueueUrl| common-lisp:null)
                         :accessor
                         struct-shape-update-domain-response-dead-letter-queue-url
                         :shape "sqsQueueUrl" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (matching :initarg :matching :initform common-lisp:nil
                         :type
                         (common-lisp:or matching-response common-lisp:null)
                         :accessor struct-shape-update-domain-response-matching
                         :shape "MatchingResponse" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (rule-based-matching :initarg :rule-based-matching
                         :initform common-lisp:nil :type
                         (common-lisp:or rule-based-matching-response
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-domain-response-rule-based-matching
                         :shape "RuleBasedMatchingResponse" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (created-at :initarg :created-at :initform
                         (common-lisp:error ":created-at is required") :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         struct-shape-update-domain-response-created-at :shape
                         "timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (last-updated-at :initarg :last-updated-at :initform
                         (common-lisp:error ":last-updated-at is required")
                         :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         struct-shape-update-domain-response-last-updated-at
                         :shape "timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         struct-shape-update-domain-response-tags :shape
                         "TagMap" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-domain-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-domain-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-domain-response 'make-update-domain-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-domain-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-domain-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-name))
      (common-lisp:list
       (common-lisp:cons "DomainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-expiration-days))
      (common-lisp:list
       (common-lisp:cons "DefaultExpirationDays"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-encryption-key))
      (common-lisp:list
       (common-lisp:cons "DefaultEncryptionKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dead-letter-queue-url))
      (common-lisp:list
       (common-lisp:cons "DeadLetterQueueUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'matching))
      (common-lisp:list
       (common-lisp:cons "Matching"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-based-matching))
      (common-lisp:list
       (common-lisp:cons "RuleBasedMatching"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "CreatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-at))
      (common-lisp:list
       (common-lisp:cons "LastUpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-domain-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-profile-request common-lisp:nil
                       ((domain-name :initarg :domain-name :initform
                         (common-lisp:error ":domain-name is required") :type
                         (common-lisp:or |name| common-lisp:null) :accessor
                         struct-shape-update-profile-request-domain-name :shape
                         "name" :location "uri" :location-name "DomainName")
                        (profile-id :initarg :profile-id :initform
                         (common-lisp:error ":profile-id is required") :type
                         (common-lisp:or |uuid| common-lisp:null) :accessor
                         struct-shape-update-profile-request-profile-id :shape
                         "uuid" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (additional-information :initarg
                         :additional-information :initform common-lisp:nil
                         :type
                         (common-lisp:or |sensitiveString0To1000|
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-profile-request-additional-information
                         :shape "sensitiveString0To1000" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (account-number :initarg :account-number :initform
                         common-lisp:nil :type
                         (common-lisp:or |sensitiveString0To255|
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-profile-request-account-number
                         :shape "sensitiveString0To255" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (party-type :initarg :party-type :initform
                         common-lisp:nil :type
                         (common-lisp:or party-type common-lisp:null) :accessor
                         struct-shape-update-profile-request-party-type :shape
                         "PartyType" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (business-name :initarg :business-name :initform
                         common-lisp:nil :type
                         (common-lisp:or |sensitiveString0To255|
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-profile-request-business-name
                         :shape "sensitiveString0To255" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (first-name :initarg :first-name :initform
                         common-lisp:nil :type
                         (common-lisp:or |sensitiveString0To255|
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-profile-request-first-name :shape
                         "sensitiveString0To255" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (middle-name :initarg :middle-name :initform
                         common-lisp:nil :type
                         (common-lisp:or |sensitiveString0To255|
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-profile-request-middle-name :shape
                         "sensitiveString0To255" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-name :initarg :last-name :initform
                         common-lisp:nil :type
                         (common-lisp:or |sensitiveString0To255|
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-profile-request-last-name :shape
                         "sensitiveString0To255" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (birth-date :initarg :birth-date :initform
                         common-lisp:nil :type
                         (common-lisp:or |sensitiveString0To255|
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-profile-request-birth-date :shape
                         "sensitiveString0To255" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (gender :initarg :gender :initform common-lisp:nil
                         :type (common-lisp:or gender common-lisp:null)
                         :accessor struct-shape-update-profile-request-gender
                         :shape "Gender" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (phone-number :initarg :phone-number :initform
                         common-lisp:nil :type
                         (common-lisp:or |sensitiveString0To255|
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-profile-request-phone-number
                         :shape "sensitiveString0To255" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (mobile-phone-number :initarg :mobile-phone-number
                         :initform common-lisp:nil :type
                         (common-lisp:or |sensitiveString0To255|
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-profile-request-mobile-phone-number
                         :shape "sensitiveString0To255" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (home-phone-number :initarg :home-phone-number
                         :initform common-lisp:nil :type
                         (common-lisp:or |sensitiveString0To255|
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-profile-request-home-phone-number
                         :shape "sensitiveString0To255" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (business-phone-number :initarg :business-phone-number
                         :initform common-lisp:nil :type
                         (common-lisp:or |sensitiveString0To255|
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-profile-request-business-phone-number
                         :shape "sensitiveString0To255" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (email-address :initarg :email-address :initform
                         common-lisp:nil :type
                         (common-lisp:or |sensitiveString0To255|
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-profile-request-email-address
                         :shape "sensitiveString0To255" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (personal-email-address :initarg
                         :personal-email-address :initform common-lisp:nil
                         :type
                         (common-lisp:or |sensitiveString0To255|
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-profile-request-personal-email-address
                         :shape "sensitiveString0To255" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (business-email-address :initarg
                         :business-email-address :initform common-lisp:nil
                         :type
                         (common-lisp:or |sensitiveString0To255|
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-profile-request-business-email-address
                         :shape "sensitiveString0To255" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (address :initarg :address :initform common-lisp:nil
                         :type (common-lisp:or update-address common-lisp:null)
                         :accessor struct-shape-update-profile-request-address
                         :shape "UpdateAddress" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (shipping-address :initarg :shipping-address :initform
                         common-lisp:nil :type
                         (common-lisp:or update-address common-lisp:null)
                         :accessor
                         struct-shape-update-profile-request-shipping-address
                         :shape "UpdateAddress" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (mailing-address :initarg :mailing-address :initform
                         common-lisp:nil :type
                         (common-lisp:or update-address common-lisp:null)
                         :accessor
                         struct-shape-update-profile-request-mailing-address
                         :shape "UpdateAddress" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (billing-address :initarg :billing-address :initform
                         common-lisp:nil :type
                         (common-lisp:or update-address common-lisp:null)
                         :accessor
                         struct-shape-update-profile-request-billing-address
                         :shape "UpdateAddress" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (attributes :initarg :attributes :initform
                         common-lisp:nil :type
                         (common-lisp:or update-attributes common-lisp:null)
                         :accessor
                         struct-shape-update-profile-request-attributes :shape
                         "UpdateAttributes" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (party-type-string :initarg :party-type-string
                         :initform common-lisp:nil :type
                         (common-lisp:or |sensitiveString0To255|
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-profile-request-party-type-string
                         :shape "sensitiveString0To255" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (gender-string :initarg :gender-string :initform
                         common-lisp:nil :type
                         (common-lisp:or |sensitiveString0To255|
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-profile-request-gender-string
                         :shape "sensitiveString0To255" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-profile-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-profile-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-profile-request 'make-update-profile-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-profile-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-profile-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'profile-id))
      (common-lisp:list
       (common-lisp:cons "ProfileId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'additional-information))
      (common-lisp:list
       (common-lisp:cons "AdditionalInformation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-number))
      (common-lisp:list
       (common-lisp:cons "AccountNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'party-type))
      (common-lisp:list
       (common-lisp:cons "PartyType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'business-name))
      (common-lisp:list
       (common-lisp:cons "BusinessName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'first-name))
      (common-lisp:list
       (common-lisp:cons "FirstName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'middle-name))
      (common-lisp:list
       (common-lisp:cons "MiddleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-name))
      (common-lisp:list
       (common-lisp:cons "LastName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'birth-date))
      (common-lisp:list
       (common-lisp:cons "BirthDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gender))
      (common-lisp:list
       (common-lisp:cons "Gender"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'phone-number))
      (common-lisp:list
       (common-lisp:cons "PhoneNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mobile-phone-number))
      (common-lisp:list
       (common-lisp:cons "MobilePhoneNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'home-phone-number))
      (common-lisp:list
       (common-lisp:cons "HomePhoneNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'business-phone-number))
      (common-lisp:list
       (common-lisp:cons "BusinessPhoneNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'email-address))
      (common-lisp:list
       (common-lisp:cons "EmailAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'personal-email-address))
      (common-lisp:list
       (common-lisp:cons "PersonalEmailAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'business-email-address))
      (common-lisp:list
       (common-lisp:cons "BusinessEmailAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'address))
      (common-lisp:list
       (common-lisp:cons "Address"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'shipping-address))
      (common-lisp:list
       (common-lisp:cons "ShippingAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mailing-address))
      (common-lisp:list
       (common-lisp:cons "MailingAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'billing-address))
      (common-lisp:list
       (common-lisp:cons "BillingAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attributes))
      (common-lisp:list
       (common-lisp:cons "Attributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'party-type-string))
      (common-lisp:list
       (common-lisp:cons "PartyTypeString"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gender-string))
      (common-lisp:list
       (common-lisp:cons "GenderString"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-profile-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-profile-response common-lisp:nil
                       ((profile-id :initarg :profile-id :initform
                         (common-lisp:error ":profile-id is required") :type
                         (common-lisp:or |uuid| common-lisp:null) :accessor
                         struct-shape-update-profile-response-profile-id :shape
                         "uuid" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-profile-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-profile-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-profile-response 'make-update-profile-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-profile-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-profile-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'profile-id))
      (common-lisp:list
       (common-lisp:cons "ProfileId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-profile-response))
   common-lisp:nil))
(common-lisp:deftype value () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass workflow-attributes common-lisp:nil
                       ((appflow-integration :initarg :appflow-integration
                         :initform common-lisp:nil :type
                         (common-lisp:or
                          appflow-integration-workflow-attributes
                          common-lisp:null)
                         :accessor
                         struct-shape-workflow-attributes-appflow-integration
                         :shape "AppflowIntegrationWorkflowAttributes"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-workflow-attributes
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'workflow-attributes
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'workflow-attributes 'make-workflow-attributes))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input workflow-attributes))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input workflow-attributes))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'appflow-integration))
      (common-lisp:list
       (common-lisp:cons "AppflowIntegration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input workflow-attributes))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype workflow-list ()
   '(trivial-types:proper-list list-workflows-item))
 (common-lisp:defun make-workflow-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list list-workflows-item))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass workflow-metrics common-lisp:nil
                       ((appflow-integration :initarg :appflow-integration
                         :initform common-lisp:nil :type
                         (common-lisp:or appflow-integration-workflow-metrics
                                         common-lisp:null)
                         :accessor
                         struct-shape-workflow-metrics-appflow-integration
                         :shape "AppflowIntegrationWorkflowMetrics" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-workflow-metrics
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'workflow-metrics
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'workflow-metrics 'make-workflow-metrics))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input workflow-metrics))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input workflow-metrics))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'appflow-integration))
      (common-lisp:list
       (common-lisp:cons "AppflowIntegration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input workflow-metrics))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass workflow-step-item common-lisp:nil
                       ((appflow-integration :initarg :appflow-integration
                         :initform common-lisp:nil :type
                         (common-lisp:or appflow-integration-workflow-step
                                         common-lisp:null)
                         :accessor
                         struct-shape-workflow-step-item-appflow-integration
                         :shape "AppflowIntegrationWorkflowStep" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-workflow-step-item
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'workflow-step-item
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'workflow-step-item 'make-workflow-step-item))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input workflow-step-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input workflow-step-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'appflow-integration))
      (common-lisp:list
       (common-lisp:cons "AppflowIntegration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input workflow-step-item))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype workflow-steps-list ()
   '(trivial-types:proper-list workflow-step-item))
 (common-lisp:defun make-workflow-steps-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list workflow-step-item))
   aws-sdk/generator/shape::members))
(common-lisp:deftype workflow-type () 'common-lisp:string)
(common-lisp:deftype zendesk-connector-operator () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass zendesk-source-properties common-lisp:nil
                       ((object :initarg :object :initform
                         (common-lisp:error ":object is required") :type
                         (common-lisp:or object common-lisp:null) :accessor
                         struct-shape-zendesk-source-properties-object :shape
                         "Object" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-zendesk-source-properties
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'zendesk-source-properties
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'zendesk-source-properties
                    'make-zendesk-source-properties))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          zendesk-source-properties))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          zendesk-source-properties))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'object))
      (common-lisp:list
       (common-lisp:cons "Object"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          zendesk-source-properties))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype |additionalSearchKeysList| ()
   '(trivial-types:proper-list additional-search-key))
 (common-lisp:defun make-additionalsearchkeyslist
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list additional-search-key))
   aws-sdk/generator/shape::members))
(common-lisp:deftype |attributeName| () 'common-lisp:string)
common-lisp:nil
(common-lisp:deftype |displayName| () 'common-lisp:string)
(common-lisp:deftype |encryptionKey| () 'common-lisp:string)
(common-lisp:deftype |expirationDaysInteger| () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:deftype |foundByList| ()
   '(trivial-types:proper-list found-by-key-value))
 (common-lisp:defun make-foundbylist
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list found-by-key-value))
   aws-sdk/generator/shape::members))
(common-lisp:deftype |logicalOperator| () 'common-lisp:string)
common-lisp:nil
(common-lisp:deftype |matchesNumber| () 'common-lisp:integer)
(common-lisp:deftype |maxSize100| () 'common-lisp:integer)
(common-lisp:deftype |message| () 'common-lisp:string)
(common-lisp:deftype |optionalBoolean| () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:deftype |requestValueList| ()
   '(trivial-types:proper-list |string1To255|))
 (common-lisp:defun make-requestvaluelist
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list |string1To255|))
   aws-sdk/generator/shape::members))
(common-lisp:deftype |s3BucketName| () 'common-lisp:string)
(common-lisp:deftype |s3KeyName| () 'common-lisp:string)
(common-lisp:deftype |s3KeyNameCustomerOutputConfig| () 'common-lisp:string)
(common-lisp:deftype |sensitiveString0To1000| () 'common-lisp:string)
(common-lisp:deftype |sensitiveString0To255| () 'common-lisp:string)
(common-lisp:deftype |sensitiveString1To1000| () 'common-lisp:string)
(common-lisp:deftype |sensitiveString1To255| () 'common-lisp:string)
(common-lisp:deftype |sensitiveText| () 'common-lisp:string)
(common-lisp:deftype |sqsQueueUrl| () 'common-lisp:string)
(common-lisp:deftype |string0To255| () 'common-lisp:string)
(common-lisp:deftype |string1To1000| () 'common-lisp:string)
(common-lisp:deftype |string1To255| () 'common-lisp:string)
(common-lisp:deftype |stringTo2048| () 'common-lisp:string)
(common-lisp:deftype |stringifiedJson| () 'common-lisp:string)
(common-lisp:deftype |text| () 'common-lisp:string)
common-lisp:nil
(common-lisp:deftype |token| () 'common-lisp:string)
(common-lisp:deftype |typeName| () 'common-lisp:string)
(common-lisp:deftype |uuid| () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defun add-profile-key
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key profile-id key-name values domain-name)
   (common-lisp:declare
    (common-lisp:ignorable profile-id key-name values domain-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-add-profile-key-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'customer-profiles-request aws-sdk/generator/operation::input "POST"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/domains/~A/profiles/keys"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'domain-name))))
        "AddProfileKey"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'add-profile-key))
(common-lisp:progn
 (common-lisp:defun create-calculated-attribute-definition
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-name calculated-attribute-name
                     display-name description attribute-details conditions
                     statistic tags)
   (common-lisp:declare
    (common-lisp:ignorable domain-name calculated-attribute-name display-name
     description attribute-details conditions statistic tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-calculated-attribute-definition-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'customer-profiles-request aws-sdk/generator/operation::input "POST"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil
                              "/domains/~A/calculated-attributes/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'domain-name))
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'calculated-attribute-name))))
        "CreateCalculatedAttributeDefinition"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-calculated-attribute-definition))
(common-lisp:progn
 (common-lisp:defun create-domain
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-name default-expiration-days
                     default-encryption-key dead-letter-queue-url matching
                     rule-based-matching tags)
   (common-lisp:declare
    (common-lisp:ignorable domain-name default-expiration-days
     default-encryption-key dead-letter-queue-url matching rule-based-matching
     tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-domain-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'customer-profiles-request aws-sdk/generator/operation::input "POST"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/domains/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'domain-name))))
        "CreateDomain"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-domain))
(common-lisp:progn
 (common-lisp:defun create-event-stream
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-name uri event-stream-name tags)
   (common-lisp:declare
    (common-lisp:ignorable domain-name uri event-stream-name tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-event-stream-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'customer-profiles-request aws-sdk/generator/operation::input "POST"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/domains/~A/event-streams/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'domain-name))
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'event-stream-name))))
        "CreateEventStream"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-event-stream))
(common-lisp:progn
 (common-lisp:defun create-integration-workflow
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-name workflow-type
                     integration-config object-type-name role-arn tags)
   (common-lisp:declare
    (common-lisp:ignorable domain-name workflow-type integration-config
     object-type-name role-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-integration-workflow-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'customer-profiles-request aws-sdk/generator/operation::input "POST"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil
                              "/domains/~A/workflows/integrations"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'domain-name))))
        "CreateIntegrationWorkflow"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-integration-workflow))
(common-lisp:progn
 (common-lisp:defun create-profile
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-name account-number
                     additional-information party-type business-name first-name
                     middle-name last-name birth-date gender phone-number
                     mobile-phone-number home-phone-number
                     business-phone-number email-address personal-email-address
                     business-email-address address shipping-address
                     mailing-address billing-address attributes
                     party-type-string gender-string)
   (common-lisp:declare
    (common-lisp:ignorable domain-name account-number additional-information
     party-type business-name first-name middle-name last-name birth-date
     gender phone-number mobile-phone-number home-phone-number
     business-phone-number email-address personal-email-address
     business-email-address address shipping-address mailing-address
     billing-address attributes party-type-string gender-string))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-profile-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'customer-profiles-request aws-sdk/generator/operation::input "POST"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/domains/~A/profiles"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'domain-name))))
        "CreateProfile"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-profile))
(common-lisp:progn
 (common-lisp:defun delete-calculated-attribute-definition
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-name calculated-attribute-name)
   (common-lisp:declare
    (common-lisp:ignorable domain-name calculated-attribute-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-calculated-attribute-definition-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'customer-profiles-request aws-sdk/generator/operation::input "DELETE"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil
                              "/domains/~A/calculated-attributes/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'domain-name))
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'calculated-attribute-name))))
        "DeleteCalculatedAttributeDefinition"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-calculated-attribute-definition))
(common-lisp:progn
 (common-lisp:defun delete-domain
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-name)
   (common-lisp:declare (common-lisp:ignorable domain-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-domain-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'customer-profiles-request aws-sdk/generator/operation::input "DELETE"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/domains/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'domain-name))))
        "DeleteDomain"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-domain))
(common-lisp:progn
 (common-lisp:defun delete-event-stream
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-name event-stream-name)
   (common-lisp:declare (common-lisp:ignorable domain-name event-stream-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-event-stream-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'customer-profiles-request aws-sdk/generator/operation::input "DELETE"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/domains/~A/event-streams/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'domain-name))
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'event-stream-name))))
        "DeleteEventStream"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-event-stream))
(common-lisp:progn
 (common-lisp:defun delete-integration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-name uri)
   (common-lisp:declare (common-lisp:ignorable domain-name uri))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-integration-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'customer-profiles-request aws-sdk/generator/operation::input "POST"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/domains/~A/integrations/delete"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'domain-name))))
        "DeleteIntegration"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-integration))
(common-lisp:progn
 (common-lisp:defun delete-profile
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key profile-id domain-name)
   (common-lisp:declare (common-lisp:ignorable profile-id domain-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-profile-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'customer-profiles-request aws-sdk/generator/operation::input "POST"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/domains/~A/profiles/delete"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'domain-name))))
        "DeleteProfile"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-profile))
(common-lisp:progn
 (common-lisp:defun delete-profile-key
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key profile-id key-name values domain-name)
   (common-lisp:declare
    (common-lisp:ignorable profile-id key-name values domain-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-profile-key-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'customer-profiles-request aws-sdk/generator/operation::input "POST"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil
                              "/domains/~A/profiles/keys/delete"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'domain-name))))
        "DeleteProfileKey"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-profile-key))
(common-lisp:progn
 (common-lisp:defun delete-profile-object
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key profile-id profile-object-unique-key
                     object-type-name domain-name)
   (common-lisp:declare
    (common-lisp:ignorable profile-id profile-object-unique-key
     object-type-name domain-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-profile-object-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'customer-profiles-request aws-sdk/generator/operation::input "POST"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil
                              "/domains/~A/profiles/objects/delete"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'domain-name))))
        "DeleteProfileObject"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-profile-object))
(common-lisp:progn
 (common-lisp:defun delete-profile-object-type
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-name object-type-name)
   (common-lisp:declare (common-lisp:ignorable domain-name object-type-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-profile-object-type-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'customer-profiles-request aws-sdk/generator/operation::input "DELETE"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/domains/~A/object-types/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'domain-name))
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'object-type-name))))
        "DeleteProfileObjectType"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-profile-object-type))
(common-lisp:progn
 (common-lisp:defun delete-workflow
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-name workflow-id)
   (common-lisp:declare (common-lisp:ignorable domain-name workflow-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-workflow-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'customer-profiles-request aws-sdk/generator/operation::input "DELETE"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/domains/~A/workflows/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'domain-name))
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'workflow-id))))
        "DeleteWorkflow"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-workflow))
(common-lisp:progn
 (common-lisp:defun detect-profile-object-type
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key objects domain-name)
   (common-lisp:declare (common-lisp:ignorable objects domain-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-detect-profile-object-type-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'customer-profiles-request aws-sdk/generator/operation::input "POST"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/domains/~A/detect/object-types"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'domain-name))))
        "DetectProfileObjectType"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'detect-profile-object-type))
(common-lisp:progn
 (common-lisp:defun get-auto-merging-preview
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-name consolidation
                     conflict-resolution
                     min-allowed-confidence-score-for-merging)
   (common-lisp:declare
    (common-lisp:ignorable domain-name consolidation conflict-resolution
     min-allowed-confidence-score-for-merging))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-auto-merging-preview-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'customer-profiles-request aws-sdk/generator/operation::input "POST"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil
                              "/domains/~A/identity-resolution-jobs/auto-merging-preview"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'domain-name))))
        "GetAutoMergingPreview"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-auto-merging-preview))
(common-lisp:progn
 (common-lisp:defun get-calculated-attribute-definition
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-name calculated-attribute-name)
   (common-lisp:declare
    (common-lisp:ignorable domain-name calculated-attribute-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-calculated-attribute-definition-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'customer-profiles-request aws-sdk/generator/operation::input "GET"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil
                              "/domains/~A/calculated-attributes/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'domain-name))
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'calculated-attribute-name))))
        "GetCalculatedAttributeDefinition"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-calculated-attribute-definition))
(common-lisp:progn
 (common-lisp:defun get-calculated-attribute-for-profile
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-name profile-id
                     calculated-attribute-name)
   (common-lisp:declare
    (common-lisp:ignorable domain-name profile-id calculated-attribute-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-calculated-attribute-for-profile-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'customer-profiles-request aws-sdk/generator/operation::input "GET"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil
                              "/domains/~A/profile/~A/calculated-attributes/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'domain-name))
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'profile-id))
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'calculated-attribute-name))))
        "GetCalculatedAttributeForProfile"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-calculated-attribute-for-profile))
(common-lisp:progn
 (common-lisp:defun get-domain
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-name)
   (common-lisp:declare (common-lisp:ignorable domain-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-domain-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'customer-profiles-request aws-sdk/generator/operation::input "GET"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/domains/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'domain-name))))
        "GetDomain"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-domain))
(common-lisp:progn
 (common-lisp:defun get-event-stream
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-name event-stream-name)
   (common-lisp:declare (common-lisp:ignorable domain-name event-stream-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-event-stream-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'customer-profiles-request aws-sdk/generator/operation::input "GET"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/domains/~A/event-streams/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'domain-name))
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'event-stream-name))))
        "GetEventStream"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-event-stream))
(common-lisp:progn
 (common-lisp:defun get-identity-resolution-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-name job-id)
   (common-lisp:declare (common-lisp:ignorable domain-name job-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-identity-resolution-job-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'customer-profiles-request aws-sdk/generator/operation::input "GET"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil
                              "/domains/~A/identity-resolution-jobs/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'domain-name))
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input 'job-id))))
        "GetIdentityResolutionJob"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-identity-resolution-job))
(common-lisp:progn
 (common-lisp:defun get-integration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-name uri)
   (common-lisp:declare (common-lisp:ignorable domain-name uri))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-integration-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'customer-profiles-request aws-sdk/generator/operation::input "POST"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/domains/~A/integrations"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'domain-name))))
        "GetIntegration"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-integration))
(common-lisp:progn
 (common-lisp:defun get-matches
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results domain-name)
   (common-lisp:declare
    (common-lisp:ignorable next-token max-results domain-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-matches-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'customer-profiles-request aws-sdk/generator/operation::input "GET"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/domains/~A/matches"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'domain-name))))
        "GetMatches"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-matches))
(common-lisp:progn
 (common-lisp:defun get-profile-object-type
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-name object-type-name)
   (common-lisp:declare (common-lisp:ignorable domain-name object-type-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-profile-object-type-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'customer-profiles-request aws-sdk/generator/operation::input "GET"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/domains/~A/object-types/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'domain-name))
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'object-type-name))))
        "GetProfileObjectType"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-profile-object-type))
(common-lisp:progn
 (common-lisp:defun get-profile-object-type-template
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key template-id)
   (common-lisp:declare (common-lisp:ignorable template-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-profile-object-type-template-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'customer-profiles-request aws-sdk/generator/operation::input "GET"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/templates/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'template-id))))
        "GetProfileObjectTypeTemplate"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-profile-object-type-template))
(common-lisp:progn
 (common-lisp:defun get-similar-profiles
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results domain-name
                     match-type search-key search-value)
   (common-lisp:declare
    (common-lisp:ignorable next-token max-results domain-name match-type
     search-key search-value))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-similar-profiles-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'customer-profiles-request aws-sdk/generator/operation::input "POST"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/domains/~A/matches"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'domain-name))))
        "GetSimilarProfiles"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-similar-profiles))
(common-lisp:progn
 (common-lisp:defun get-workflow
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-name workflow-id)
   (common-lisp:declare (common-lisp:ignorable domain-name workflow-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-workflow-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'customer-profiles-request aws-sdk/generator/operation::input "GET"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/domains/~A/workflows/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'domain-name))
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'workflow-id))))
        "GetWorkflow"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-workflow))
(common-lisp:progn
 (common-lisp:defun get-workflow-steps
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-name workflow-id next-token
                     max-results)
   (common-lisp:declare
    (common-lisp:ignorable domain-name workflow-id next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-workflow-steps-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'customer-profiles-request aws-sdk/generator/operation::input "GET"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/domains/~A/workflows/~A/steps"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'domain-name))
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'workflow-id))))
        "GetWorkflowSteps"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-workflow-steps))
(common-lisp:progn
 (common-lisp:defun list-account-integrations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key uri next-token max-results
                     include-hidden)
   (common-lisp:declare
    (common-lisp:ignorable uri next-token max-results include-hidden))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-account-integrations-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'customer-profiles-request aws-sdk/generator/operation::input "POST"
        "/integrations" "ListAccountIntegrations"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-account-integrations))
(common-lisp:progn
 (common-lisp:defun list-calculated-attribute-definitions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-name next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable domain-name next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-calculated-attribute-definitions-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'customer-profiles-request aws-sdk/generator/operation::input "GET"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil
                              "/domains/~A/calculated-attributes"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'domain-name))))
        "ListCalculatedAttributeDefinitions"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-calculated-attribute-definitions))
(common-lisp:progn
 (common-lisp:defun list-calculated-attributes-for-profile
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results domain-name
                     profile-id)
   (common-lisp:declare
    (common-lisp:ignorable next-token max-results domain-name profile-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-calculated-attributes-for-profile-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'customer-profiles-request aws-sdk/generator/operation::input "GET"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil
                              "/domains/~A/profile/~A/calculated-attributes"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'domain-name))
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'profile-id))))
        "ListCalculatedAttributesForProfile"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-calculated-attributes-for-profile))
(common-lisp:progn
 (common-lisp:defun list-domains
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results)
   (common-lisp:declare (common-lisp:ignorable next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-domains-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'customer-profiles-request aws-sdk/generator/operation::input "GET"
        "/domains" "ListDomains"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-domains))
(common-lisp:progn
 (common-lisp:defun list-event-streams
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-name next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable domain-name next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-event-streams-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'customer-profiles-request aws-sdk/generator/operation::input "GET"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/domains/~A/event-streams"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'domain-name))))
        "ListEventStreams"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-event-streams))
(common-lisp:progn
 (common-lisp:defun list-identity-resolution-jobs
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-name next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable domain-name next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-identity-resolution-jobs-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'customer-profiles-request aws-sdk/generator/operation::input "GET"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil
                              "/domains/~A/identity-resolution-jobs"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'domain-name))))
        "ListIdentityResolutionJobs"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-identity-resolution-jobs))
(common-lisp:progn
 (common-lisp:defun list-integrations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-name next-token max-results
                     include-hidden)
   (common-lisp:declare
    (common-lisp:ignorable domain-name next-token max-results include-hidden))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-integrations-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'customer-profiles-request aws-sdk/generator/operation::input "GET"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/domains/~A/integrations"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'domain-name))))
        "ListIntegrations"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-integrations))
(common-lisp:progn
 (common-lisp:defun list-profile-object-type-templates
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results)
   (common-lisp:declare (common-lisp:ignorable next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-profile-object-type-templates-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'customer-profiles-request aws-sdk/generator/operation::input "GET"
        "/templates" "ListProfileObjectTypeTemplates"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-profile-object-type-templates))
(common-lisp:progn
 (common-lisp:defun list-profile-object-types
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-name next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable domain-name next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-profile-object-types-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'customer-profiles-request aws-sdk/generator/operation::input "GET"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/domains/~A/object-types"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'domain-name))))
        "ListProfileObjectTypes"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-profile-object-types))
(common-lisp:progn
 (common-lisp:defun list-profile-objects
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results domain-name
                     object-type-name profile-id object-filter)
   (common-lisp:declare
    (common-lisp:ignorable next-token max-results domain-name object-type-name
     profile-id object-filter))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-profile-objects-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'customer-profiles-request aws-sdk/generator/operation::input "POST"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/domains/~A/profiles/objects"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'domain-name))))
        "ListProfileObjects"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-profile-objects))
(common-lisp:progn
 (common-lisp:defun list-rule-based-matches
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results domain-name)
   (common-lisp:declare
    (common-lisp:ignorable next-token max-results domain-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-rule-based-matches-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'customer-profiles-request aws-sdk/generator/operation::input "GET"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil
                              "/domains/~A/profiles/ruleBasedMatches"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'domain-name))))
        "ListRuleBasedMatches"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-rule-based-matches))
(common-lisp:progn
 (common-lisp:defun list-tags-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn)
   (common-lisp:declare (common-lisp:ignorable resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-for-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'customer-profiles-request aws-sdk/generator/operation::input "GET"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/tags/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'resource-arn))))
        "ListTagsForResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-tags-for-resource))
(common-lisp:progn
 (common-lisp:defun list-workflows
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-name workflow-type status
                     query-start-date query-end-date next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable domain-name workflow-type status query-start-date
     query-end-date next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-workflows-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'customer-profiles-request aws-sdk/generator/operation::input "POST"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/domains/~A/workflows"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'domain-name))))
        "ListWorkflows"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-workflows))
(common-lisp:progn
 (common-lisp:defun merge-profiles
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-name main-profile-id
                     profile-ids-to-be-merged field-source-profile-ids)
   (common-lisp:declare
    (common-lisp:ignorable domain-name main-profile-id profile-ids-to-be-merged
     field-source-profile-ids))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-merge-profiles-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'customer-profiles-request aws-sdk/generator/operation::input "POST"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil
                              "/domains/~A/profiles/objects/merge"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'domain-name))))
        "MergeProfiles"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'merge-profiles))
(common-lisp:progn
 (common-lisp:defun put-integration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-name uri object-type-name tags
                     flow-definition object-type-names)
   (common-lisp:declare
    (common-lisp:ignorable domain-name uri object-type-name tags
     flow-definition object-type-names))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-integration-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'customer-profiles-request aws-sdk/generator/operation::input "PUT"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/domains/~A/integrations"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'domain-name))))
        "PutIntegration"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'put-integration))
(common-lisp:progn
 (common-lisp:defun put-profile-object
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key object-type-name object domain-name)
   (common-lisp:declare
    (common-lisp:ignorable object-type-name object domain-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-profile-object-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'customer-profiles-request aws-sdk/generator/operation::input "PUT"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/domains/~A/profiles/objects"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'domain-name))))
        "PutProfileObject"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'put-profile-object))
(common-lisp:progn
 (common-lisp:defun put-profile-object-type
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-name object-type-name description
                     template-id expiration-days encryption-key
                     allow-profile-creation
                     source-last-updated-timestamp-format fields keys tags)
   (common-lisp:declare
    (common-lisp:ignorable domain-name object-type-name description template-id
     expiration-days encryption-key allow-profile-creation
     source-last-updated-timestamp-format fields keys tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-profile-object-type-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'customer-profiles-request aws-sdk/generator/operation::input "PUT"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/domains/~A/object-types/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'domain-name))
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'object-type-name))))
        "PutProfileObjectType"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'put-profile-object-type))
(common-lisp:progn
 (common-lisp:defun search-profiles
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results domain-name
                     key-name values additional-search-keys logical-operator)
   (common-lisp:declare
    (common-lisp:ignorable next-token max-results domain-name key-name values
     additional-search-keys logical-operator))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-search-profiles-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'customer-profiles-request aws-sdk/generator/operation::input "POST"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/domains/~A/profiles/search"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'domain-name))))
        "SearchProfiles"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'search-profiles))
(common-lisp:progn
 (common-lisp:defun tag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tags)
   (common-lisp:declare (common-lisp:ignorable resource-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'customer-profiles-request aws-sdk/generator/operation::input "POST"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/tags/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'resource-arn))))
        "TagResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'tag-resource))
(common-lisp:progn
 (common-lisp:defun untag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tag-keys)
   (common-lisp:declare (common-lisp:ignorable resource-arn tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'customer-profiles-request aws-sdk/generator/operation::input "DELETE"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/tags/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'resource-arn))))
        "UntagResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'untag-resource))
(common-lisp:progn
 (common-lisp:defun update-calculated-attribute-definition
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-name calculated-attribute-name
                     display-name description conditions)
   (common-lisp:declare
    (common-lisp:ignorable domain-name calculated-attribute-name display-name
     description conditions))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-calculated-attribute-definition-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'customer-profiles-request aws-sdk/generator/operation::input "PUT"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil
                              "/domains/~A/calculated-attributes/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'domain-name))
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'calculated-attribute-name))))
        "UpdateCalculatedAttributeDefinition"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-calculated-attribute-definition))
(common-lisp:progn
 (common-lisp:defun update-domain
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-name default-expiration-days
                     default-encryption-key dead-letter-queue-url matching
                     rule-based-matching tags)
   (common-lisp:declare
    (common-lisp:ignorable domain-name default-expiration-days
     default-encryption-key dead-letter-queue-url matching rule-based-matching
     tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-domain-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'customer-profiles-request aws-sdk/generator/operation::input "PUT"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/domains/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'domain-name))))
        "UpdateDomain"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-domain))
(common-lisp:progn
 (common-lisp:defun update-profile
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-name profile-id
                     additional-information account-number party-type
                     business-name first-name middle-name last-name birth-date
                     gender phone-number mobile-phone-number home-phone-number
                     business-phone-number email-address personal-email-address
                     business-email-address address shipping-address
                     mailing-address billing-address attributes
                     party-type-string gender-string)
   (common-lisp:declare
    (common-lisp:ignorable domain-name profile-id additional-information
     account-number party-type business-name first-name middle-name last-name
     birth-date gender phone-number mobile-phone-number home-phone-number
     business-phone-number email-address personal-email-address
     business-email-address address shipping-address mailing-address
     billing-address attributes party-type-string gender-string))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-profile-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'customer-profiles-request aws-sdk/generator/operation::input "PUT"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/domains/~A/profiles"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'domain-name))))
        "UpdateProfile"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-profile))
