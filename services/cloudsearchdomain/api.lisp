;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(uiop/package:define-package #:aws-sdk/services/cloudsearchdomain/api (:use)
                             (:nicknames #:aws/cloudsearchdomain)
                             (:import-from #:aws-sdk/generator/shape)
                             (:import-from #:aws-sdk/generator/operation)
                             (:import-from #:aws-sdk/api)
                             (:import-from #:aws-sdk/request)
                             (:import-from #:aws-sdk/json-request)
                             (:import-from #:aws-sdk/rest-json-request)
                             (:import-from #:aws-sdk/rest-xml-request)
                             (:import-from #:aws-sdk/query-request)
                             (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/cloudsearchdomain/api)
(common-lisp:progn
 (common-lisp:define-condition cloudsearchdomain-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'cloudsearchdomain-error))
(common-lisp:progn
 (common-lisp:defclass cloudsearchdomain-request
                       (aws-sdk/generator/service::rest-json-request)
                       common-lisp:nil
                       (:default-initargs :service "cloudsearchdomain"
                        :api-version "2013-01-01" :host-prefix
                        "cloudsearchdomain" :signing-name "cloudsearch"
                        :global-host common-lisp:nil))
 (common-lisp:export 'cloudsearchdomain-request))
(common-lisp:defvar *error-map*
  '(("DocumentServiceException" . document-service-exception)
    ("SearchException" . search-exception)))
(common-lisp:deftype adds () 'common-lisp:integer)
(common-lisp:deftype blob ()
  '(common-lisp:simple-array (common-lisp:unsigned-byte 8) (common-lisp:*)))
(common-lisp:progn
 (common-lisp:defclass bucket common-lisp:nil
                       ((value :initarg :value :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-bucket-value :shape "String" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (count :initarg :count :initform common-lisp:nil :type
                         (common-lisp:or long common-lisp:null) :accessor
                         struct-shape-bucket-count :shape "Long" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-bucket
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'bucket
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'bucket 'make-bucket))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input bucket))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input bucket))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'count))
      (common-lisp:list
       (common-lisp:cons "count"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input bucket))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass bucket-info common-lisp:nil
                       ((buckets :initarg :buckets :initform common-lisp:nil
                         :type (common-lisp:or bucket-list common-lisp:null)
                         :accessor struct-shape-bucket-info-buckets :shape
                         "BucketList" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-bucket-info
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'bucket-info
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'bucket-info 'make-bucket-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input bucket-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input bucket-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'buckets))
      (common-lisp:list
       (common-lisp:cons "buckets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input bucket-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype bucket-list () '(trivial-types:proper-list bucket))
 (common-lisp:defun make-bucket-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list bucket))
   aws-sdk/generator/shape::members))
(common-lisp:deftype content-type () 'common-lisp:string)
(common-lisp:deftype cursor () 'common-lisp:string)
(common-lisp:deftype deletes () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition document-service-exception
     (cloudsearchdomain-error)
     ((status :initarg :status :initform common-lisp:nil :reader
       document-service-exception-status)
      (message :initarg :message :initform common-lisp:nil :reader
       document-service-exception-message)))
 (common-lisp:export
  (common-lisp:list 'document-service-exception
                    'document-service-exception-status
                    'document-service-exception-message)))
(common-lisp:progn
 (common-lisp:defclass document-service-warning common-lisp:nil
                       ((message :initarg :message :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-document-service-warning-message :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-document-service-warning
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'document-service-warning
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'document-service-warning 'make-document-service-warning))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          document-service-warning))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          document-service-warning))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          document-service-warning))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype document-service-warnings ()
   '(trivial-types:proper-list document-service-warning))
 (common-lisp:defun make-document-service-warnings
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            document-service-warning))
   aws-sdk/generator/shape::members))
(common-lisp:deftype double () 'common-lisp:double-float)
(common-lisp:deftype expr () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype exprs () 'common-lisp:hash-table)
 (common-lisp:defun make-exprs (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype facet () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype facets () 'common-lisp:hash-table)
 (common-lisp:defun make-facets (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defclass field-stats common-lisp:nil
                       ((min :initarg :min :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-field-stats-min :shape "String" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (max :initarg :max :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-field-stats-max :shape "String" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (count :initarg :count :initform common-lisp:nil :type
                         (common-lisp:or long common-lisp:null) :accessor
                         struct-shape-field-stats-count :shape "Long" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (missing :initarg :missing :initform common-lisp:nil
                         :type (common-lisp:or long common-lisp:null) :accessor
                         struct-shape-field-stats-missing :shape "Long"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (sum :initarg :sum :initform common-lisp:nil :type
                         (common-lisp:or double common-lisp:null) :accessor
                         struct-shape-field-stats-sum :shape "Double" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (sum-of-squares :initarg :sum-of-squares :initform
                         common-lisp:nil :type
                         (common-lisp:or double common-lisp:null) :accessor
                         struct-shape-field-stats-sum-of-squares :shape
                         "Double" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (mean :initarg :mean :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-field-stats-mean :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (stddev :initarg :stddev :initform common-lisp:nil
                         :type (common-lisp:or double common-lisp:null)
                         :accessor struct-shape-field-stats-stddev :shape
                         "Double" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-field-stats
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'field-stats
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'field-stats 'make-field-stats))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input field-stats))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input field-stats))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'min))
      (common-lisp:list
       (common-lisp:cons "min"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max))
      (common-lisp:list
       (common-lisp:cons "max"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'count))
      (common-lisp:list
       (common-lisp:cons "count"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'missing))
      (common-lisp:list
       (common-lisp:cons "missing"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sum))
      (common-lisp:list
       (common-lisp:cons "sum"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sum-of-squares))
      (common-lisp:list
       (common-lisp:cons "sumOfSquares"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mean))
      (common-lisp:list
       (common-lisp:cons "mean"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stddev))
      (common-lisp:list
       (common-lisp:cons "stddev"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input field-stats))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype field-value () '(trivial-types:proper-list string))
 (common-lisp:defun make-field-value
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype fields () 'common-lisp:hash-table)
 (common-lisp:defun make-fields (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype filter-query () 'common-lisp:string)
(common-lisp:deftype highlight () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype highlights () 'common-lisp:hash-table)
 (common-lisp:defun make-highlights (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defclass hit common-lisp:nil
                       ((id :initarg :id :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-hit-id :shape "String" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (fields :initarg :fields :initform common-lisp:nil
                         :type (common-lisp:or fields common-lisp:null)
                         :accessor struct-shape-hit-fields :shape "Fields"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (exprs :initarg :exprs :initform common-lisp:nil :type
                         (common-lisp:or exprs common-lisp:null) :accessor
                         struct-shape-hit-exprs :shape "Exprs" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (highlights :initarg :highlights :initform
                         common-lisp:nil :type
                         (common-lisp:or highlights common-lisp:null) :accessor
                         struct-shape-hit-highlights :shape "Highlights"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-hit (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'hit
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'hit 'make-hit))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input hit))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input hit))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fields))
      (common-lisp:list
       (common-lisp:cons "fields"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'exprs))
      (common-lisp:list
       (common-lisp:cons "exprs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'highlights))
      (common-lisp:list
       (common-lisp:cons "highlights"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input hit))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype hit-list () '(trivial-types:proper-list hit))
 (common-lisp:defun make-hit-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list hit))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass hits common-lisp:nil
                       ((found :initarg :found :initform common-lisp:nil :type
                         (common-lisp:or long common-lisp:null) :accessor
                         struct-shape-hits-found :shape "Long" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (start :initarg :start :initform common-lisp:nil :type
                         (common-lisp:or long common-lisp:null) :accessor
                         struct-shape-hits-start :shape "Long" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (cursor :initarg :cursor :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-hits-cursor :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (hit :initarg :hit :initform common-lisp:nil :type
                         (common-lisp:or hit-list common-lisp:null) :accessor
                         struct-shape-hits-hit :shape "HitList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-hits (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'hits
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'hits 'make-hits))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input hits))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input hits))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'found))
      (common-lisp:list
       (common-lisp:cons "found"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start))
      (common-lisp:list
       (common-lisp:cons "start"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cursor))
      (common-lisp:list
       (common-lisp:cons "cursor"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hit))
      (common-lisp:list
       (common-lisp:cons "hit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input hits))
   common-lisp:nil))
(common-lisp:deftype long () 'common-lisp:integer)
(common-lisp:deftype partial () 'common-lisp:boolean)
(common-lisp:deftype query () 'common-lisp:string)
(common-lisp:deftype query-options () 'common-lisp:string)
(common-lisp:deftype query-parser () 'common-lisp:string)
(common-lisp:deftype return () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition search-exception
     (cloudsearchdomain-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       search-exception-message)))
 (common-lisp:export
  (common-lisp:list 'search-exception 'search-exception-message)))
(common-lisp:progn
 (common-lisp:defclass search-request common-lisp:nil
                       ((cursor :initarg :cursor :initform common-lisp:nil
                         :type (common-lisp:or cursor common-lisp:null)
                         :accessor struct-shape-search-request-cursor :shape
                         "Cursor" :location "querystring" :location-name
                         "cursor")
                        (expr :initarg :expr :initform common-lisp:nil :type
                         (common-lisp:or expr common-lisp:null) :accessor
                         struct-shape-search-request-expr :shape "Expr"
                         :location "querystring" :location-name "expr")
                        (facet :initarg :facet :initform common-lisp:nil :type
                         (common-lisp:or facet common-lisp:null) :accessor
                         struct-shape-search-request-facet :shape "Facet"
                         :location "querystring" :location-name "facet")
                        (filter-query :initarg :filter-query :initform
                         common-lisp:nil :type
                         (common-lisp:or filter-query common-lisp:null)
                         :accessor struct-shape-search-request-filter-query
                         :shape "FilterQuery" :location "querystring"
                         :location-name "fq")
                        (highlight :initarg :highlight :initform
                         common-lisp:nil :type
                         (common-lisp:or highlight common-lisp:null) :accessor
                         struct-shape-search-request-highlight :shape
                         "Highlight" :location "querystring" :location-name
                         "highlight")
                        (partial :initarg :partial :initform common-lisp:nil
                         :type (common-lisp:or partial common-lisp:null)
                         :accessor struct-shape-search-request-partial :shape
                         "Partial" :location "querystring" :location-name
                         "partial")
                        (query :initarg :query :initform
                         (common-lisp:error ":query is required") :type
                         (common-lisp:or query common-lisp:null) :accessor
                         struct-shape-search-request-query :shape "Query"
                         :location "querystring" :location-name "q")
                        (query-options :initarg :query-options :initform
                         common-lisp:nil :type
                         (common-lisp:or query-options common-lisp:null)
                         :accessor struct-shape-search-request-query-options
                         :shape "QueryOptions" :location "querystring"
                         :location-name "q.options")
                        (query-parser :initarg :query-parser :initform
                         common-lisp:nil :type
                         (common-lisp:or query-parser common-lisp:null)
                         :accessor struct-shape-search-request-query-parser
                         :shape "QueryParser" :location "querystring"
                         :location-name "q.parser")
                        (return :initarg :return :initform common-lisp:nil
                         :type (common-lisp:or return common-lisp:null)
                         :accessor struct-shape-search-request-return :shape
                         "Return" :location "querystring" :location-name
                         "return")
                        (size :initarg :size :initform common-lisp:nil :type
                         (common-lisp:or size common-lisp:null) :accessor
                         struct-shape-search-request-size :shape "Size"
                         :location "querystring" :location-name "size")
                        (sort :initarg :sort :initform common-lisp:nil :type
                         (common-lisp:or sort common-lisp:null) :accessor
                         struct-shape-search-request-sort :shape "Sort"
                         :location "querystring" :location-name "sort")
                        (start :initarg :start :initform common-lisp:nil :type
                         (common-lisp:or start common-lisp:null) :accessor
                         struct-shape-search-request-start :shape "Start"
                         :location "querystring" :location-name "start")
                        (stats :initarg :stats :initform common-lisp:nil :type
                         (common-lisp:or stat common-lisp:null) :accessor
                         struct-shape-search-request-stats :shape "Stat"
                         :location "querystring" :location-name "stats"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-search-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'search-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'search-request 'make-search-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input search-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input search-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input search-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass search-response common-lisp:nil
                       ((status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or search-status common-lisp:null)
                         :accessor struct-shape-search-response-status :shape
                         "SearchStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (hits :initarg :hits :initform common-lisp:nil :type
                         (common-lisp:or hits common-lisp:null) :accessor
                         struct-shape-search-response-hits :shape "Hits"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (facets :initarg :facets :initform common-lisp:nil
                         :type (common-lisp:or facets common-lisp:null)
                         :accessor struct-shape-search-response-facets :shape
                         "Facets" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (stats :initarg :stats :initform common-lisp:nil :type
                         (common-lisp:or stats common-lisp:null) :accessor
                         struct-shape-search-response-stats :shape "Stats"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-search-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'search-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'search-response 'make-search-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input search-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input search-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hits))
      (common-lisp:list
       (common-lisp:cons "hits"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'facets))
      (common-lisp:list
       (common-lisp:cons "facets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stats))
      (common-lisp:list
       (common-lisp:cons "stats"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input search-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass search-status common-lisp:nil
                       ((timems :initarg :timems :initform common-lisp:nil
                         :type (common-lisp:or long common-lisp:null) :accessor
                         struct-shape-search-status-timems :shape "Long"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (rid :initarg :rid :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-search-status-rid :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-search-status
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'search-status
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'search-status 'make-search-status))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input search-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input search-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timems))
      (common-lisp:list
       (common-lisp:cons "timems"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rid))
      (common-lisp:list
       (common-lisp:cons "rid"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input search-status))
   common-lisp:nil))
(common-lisp:deftype size () 'common-lisp:integer)
(common-lisp:deftype sort () 'common-lisp:string)
(common-lisp:deftype start () 'common-lisp:integer)
(common-lisp:deftype stat () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype stats () 'common-lisp:hash-table)
 (common-lisp:defun make-stats (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass suggest-model common-lisp:nil
                       ((query :initarg :query :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-suggest-model-query :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (found :initarg :found :initform common-lisp:nil :type
                         (common-lisp:or long common-lisp:null) :accessor
                         struct-shape-suggest-model-found :shape "Long"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (suggestions :initarg :suggestions :initform
                         common-lisp:nil :type
                         (common-lisp:or suggestions common-lisp:null)
                         :accessor struct-shape-suggest-model-suggestions
                         :shape "Suggestions" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-suggest-model
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'suggest-model
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'suggest-model 'make-suggest-model))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input suggest-model))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input suggest-model))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query))
      (common-lisp:list
       (common-lisp:cons "query"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'found))
      (common-lisp:list
       (common-lisp:cons "found"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'suggestions))
      (common-lisp:list
       (common-lisp:cons "suggestions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input suggest-model))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass suggest-request common-lisp:nil
                       ((query :initarg :query :initform
                         (common-lisp:error ":query is required") :type
                         (common-lisp:or query common-lisp:null) :accessor
                         struct-shape-suggest-request-query :shape "Query"
                         :location "querystring" :location-name "q")
                        (suggester :initarg :suggester :initform
                         (common-lisp:error ":suggester is required") :type
                         (common-lisp:or suggester common-lisp:null) :accessor
                         struct-shape-suggest-request-suggester :shape
                         "Suggester" :location "querystring" :location-name
                         "suggester")
                        (size :initarg :size :initform common-lisp:nil :type
                         (common-lisp:or suggestions-size common-lisp:null)
                         :accessor struct-shape-suggest-request-size :shape
                         "SuggestionsSize" :location "querystring"
                         :location-name "size"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-suggest-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'suggest-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'suggest-request 'make-suggest-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input suggest-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input suggest-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input suggest-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass suggest-response common-lisp:nil
                       ((status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or suggest-status common-lisp:null)
                         :accessor struct-shape-suggest-response-status :shape
                         "SuggestStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (suggest :initarg :suggest :initform common-lisp:nil
                         :type (common-lisp:or suggest-model common-lisp:null)
                         :accessor struct-shape-suggest-response-suggest :shape
                         "SuggestModel" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-suggest-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'suggest-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'suggest-response 'make-suggest-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input suggest-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input suggest-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'suggest))
      (common-lisp:list
       (common-lisp:cons "suggest"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input suggest-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass suggest-status common-lisp:nil
                       ((timems :initarg :timems :initform common-lisp:nil
                         :type (common-lisp:or long common-lisp:null) :accessor
                         struct-shape-suggest-status-timems :shape "Long"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (rid :initarg :rid :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-suggest-status-rid :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-suggest-status
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'suggest-status
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'suggest-status 'make-suggest-status))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input suggest-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input suggest-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timems))
      (common-lisp:list
       (common-lisp:cons "timems"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rid))
      (common-lisp:list
       (common-lisp:cons "rid"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input suggest-status))
   common-lisp:nil))
(common-lisp:deftype suggester () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass suggestion-match common-lisp:nil
                       ((suggestion :initarg :suggestion :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-suggestion-match-suggestion :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (score :initarg :score :initform common-lisp:nil :type
                         (common-lisp:or long common-lisp:null) :accessor
                         struct-shape-suggestion-match-score :shape "Long"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (id :initarg :id :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-suggestion-match-id :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-suggestion-match
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'suggestion-match
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'suggestion-match 'make-suggestion-match))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input suggestion-match))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input suggestion-match))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'suggestion))
      (common-lisp:list
       (common-lisp:cons "suggestion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'score))
      (common-lisp:list
       (common-lisp:cons "score"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input suggestion-match))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype suggestions ()
   '(trivial-types:proper-list suggestion-match))
 (common-lisp:defun make-suggestions
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list suggestion-match))
   aws-sdk/generator/shape::members))
(common-lisp:deftype suggestions-size () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass upload-documents-request common-lisp:nil
                       ((documents :initarg :documents :initform
                         (common-lisp:error ":documents is required") :type
                         (common-lisp:or blob common-lisp:null) :accessor
                         struct-shape-upload-documents-request-documents :shape
                         "Blob" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (content-type :initarg :content-type :initform
                         (common-lisp:error ":contenttype is required") :type
                         (common-lisp:or content-type common-lisp:null)
                         :accessor
                         struct-shape-upload-documents-request-content-type
                         :shape "ContentType" :location "header" :location-name
                         "Content-Type"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-upload-documents-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'upload-documents-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'upload-documents-request 'make-upload-documents-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          upload-documents-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-type))
      (common-lisp:cons "Content-Type" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          upload-documents-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'documents))
      (common-lisp:list
       (common-lisp:cons "documents"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          upload-documents-request))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'documents))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload-properties
                        (
                         (aws-sdk/generator/shape::input
                          upload-documents-request))
   (common-lisp:declare (common-lisp:ignore aws-sdk/generator/shape::input))
   (common-lisp:list)))
(common-lisp:progn
 (common-lisp:defclass upload-documents-response common-lisp:nil
                       ((status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-upload-documents-response-status :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (adds :initarg :adds :initform common-lisp:nil :type
                         (common-lisp:or adds common-lisp:null) :accessor
                         struct-shape-upload-documents-response-adds :shape
                         "Adds" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (deletes :initarg :deletes :initform common-lisp:nil
                         :type (common-lisp:or deletes common-lisp:null)
                         :accessor
                         struct-shape-upload-documents-response-deletes :shape
                         "Deletes" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (warnings :initarg :warnings :initform common-lisp:nil
                         :type
                         (common-lisp:or document-service-warnings
                                         common-lisp:null)
                         :accessor
                         struct-shape-upload-documents-response-warnings :shape
                         "DocumentServiceWarnings" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-upload-documents-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'upload-documents-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'upload-documents-response
                    'make-upload-documents-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          upload-documents-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          upload-documents-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'adds))
      (common-lisp:list
       (common-lisp:cons "adds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deletes))
      (common-lisp:list
       (common-lisp:cons "deletes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'warnings))
      (common-lisp:list
       (common-lisp:cons "warnings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          upload-documents-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defun search
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cursor expr facet filter-query highlight
                     partial query query-options query-parser return size sort
                     start stats)
   (common-lisp:declare
    (common-lisp:ignorable cursor expr facet filter-query highlight partial
     query query-options query-parser return size sort start stats))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-search-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'cloudsearchdomain-request aws-sdk/generator/operation::input "GET"
        "/2013-01-01/search?format=sdk&pretty=true" "Search"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'search))
(common-lisp:progn
 (common-lisp:defun suggest
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key query suggester size)
   (common-lisp:declare (common-lisp:ignorable query suggester size))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-suggest-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'cloudsearchdomain-request aws-sdk/generator/operation::input "GET"
        "/2013-01-01/suggest?format=sdk&pretty=true" "Suggest"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'suggest))
(common-lisp:progn
 (common-lisp:defun upload-documents
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key documents content-type)
   (common-lisp:declare (common-lisp:ignorable documents content-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-upload-documents-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'cloudsearchdomain-request aws-sdk/generator/operation::input "POST"
        "/2013-01-01/documents/batch?format=sdk" "UploadDocuments"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'upload-documents))
