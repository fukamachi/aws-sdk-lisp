;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(uiop/package:define-package #:aws-sdk/services/braket/api (:use)
                             (:nicknames #:aws/braket)
                             (:import-from #:aws-sdk/generator/shape)
                             (:import-from #:aws-sdk/generator/operation)
                             (:import-from #:aws-sdk/api)
                             (:import-from #:aws-sdk/request)
                             (:import-from #:aws-sdk/json-request)
                             (:import-from #:aws-sdk/rest-json-request)
                             (:import-from #:aws-sdk/rest-xml-request)
                             (:import-from #:aws-sdk/query-request)
                             (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/braket/api)
(common-lisp:progn
 (common-lisp:define-condition braket-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'braket-error))
(common-lisp:progn
 (common-lisp:defclass braket-request
                       (aws-sdk/generator/service::rest-json-request)
                       common-lisp:nil
                       (:default-initargs :service "braket" :api-version
                        "2019-09-01" :host-prefix "braket" :signing-name
                        "braket" :global-host common-lisp:nil))
 (common-lisp:export 'braket-request))
(common-lisp:defvar *error-map*
  '(("AccessDeniedException" . access-denied-exception)
    ("ConflictException" . conflict-exception)
    ("DeviceOfflineException" . device-offline-exception)
    ("DeviceRetiredException" . device-retired-exception)
    ("InternalServiceException" . internal-service-exception)
    ("ResourceNotFoundException" . resource-not-found-exception)
    ("ServiceQuotaExceededException" . service-quota-exceeded-exception)
    ("ThrottlingException" . throttling-exception)
    ("ValidationException" . validation-exception)))
(common-lisp:progn
 (common-lisp:define-condition access-denied-exception
     (braket-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       access-denied-exception-message)))
 (common-lisp:export
  (common-lisp:list 'access-denied-exception 'access-denied-exception-message)))
(common-lisp:progn
 (common-lisp:defclass algorithm-specification common-lisp:nil
                       ((container-image :initarg :container-image :initform
                         common-lisp:nil :type
                         (common-lisp:or container-image common-lisp:null)
                         :accessor
                         struct-shape-algorithm-specification-container-image
                         :shape "ContainerImage" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (script-mode-config :initarg :script-mode-config
                         :initform common-lisp:nil :type
                         (common-lisp:or script-mode-config common-lisp:null)
                         :accessor
                         struct-shape-algorithm-specification-script-mode-config
                         :shape "ScriptModeConfig" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-algorithm-specification
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'algorithm-specification
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'algorithm-specification 'make-algorithm-specification))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          algorithm-specification))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          algorithm-specification))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'container-image))
      (common-lisp:list
       (common-lisp:cons "containerImage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'script-mode-config))
      (common-lisp:list
       (common-lisp:cons "scriptModeConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          algorithm-specification))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass association common-lisp:nil
                       ((arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or braket-resource-arn common-lisp:null)
                         :accessor struct-shape-association-arn :shape
                         "BraketResourceArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (type :initarg :type :initform
                         (common-lisp:error ":type is required") :type
                         (common-lisp:or association-type common-lisp:null)
                         :accessor struct-shape-association-type :shape
                         "AssociationType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-association
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'association
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'association 'make-association))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input association))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input association))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input association))
   common-lisp:nil))
(common-lisp:deftype association-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype associations () '(trivial-types:proper-list association))
 (common-lisp:defun make-associations
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list association))
   aws-sdk/generator/shape::members))
(common-lisp:deftype braket-resource-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass cancel-job-request common-lisp:nil
                       ((job-arn :initarg :job-arn :initform
                         (common-lisp:error ":jobarn is required") :type
                         (common-lisp:or job-arn common-lisp:null) :accessor
                         struct-shape-cancel-job-request-job-arn :shape
                         "JobArn" :location "uri" :location-name "jobArn"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-cancel-job-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'cancel-job-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'cancel-job-request 'make-cancel-job-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input cancel-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input cancel-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input cancel-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass cancel-job-response common-lisp:nil
                       ((cancellation-status :initarg :cancellation-status
                         :initform
                         (common-lisp:error ":cancellationstatus is required")
                         :type
                         (common-lisp:or cancellation-status common-lisp:null)
                         :accessor
                         struct-shape-cancel-job-response-cancellation-status
                         :shape "CancellationStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (job-arn :initarg :job-arn :initform
                         (common-lisp:error ":jobarn is required") :type
                         (common-lisp:or job-arn common-lisp:null) :accessor
                         struct-shape-cancel-job-response-job-arn :shape
                         "JobArn" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-cancel-job-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'cancel-job-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'cancel-job-response 'make-cancel-job-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input cancel-job-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input cancel-job-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cancellation-status))
      (common-lisp:list
       (common-lisp:cons "cancellationStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-arn))
      (common-lisp:list
       (common-lisp:cons "jobArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input cancel-job-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass cancel-quantum-task-request common-lisp:nil
                       ((client-token :initarg :client-token :initform
                         (common-lisp:error ":clienttoken is required") :type
                         (common-lisp:or string64 common-lisp:null) :accessor
                         struct-shape-cancel-quantum-task-request-client-token
                         :shape "String64" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (quantum-task-arn :initarg :quantum-task-arn :initform
                         (common-lisp:error ":quantumtaskarn is required")
                         :type
                         (common-lisp:or quantum-task-arn common-lisp:null)
                         :accessor
                         struct-shape-cancel-quantum-task-request-quantum-task-arn
                         :shape "QuantumTaskArn" :location "uri" :location-name
                         "quantumTaskArn"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-cancel-quantum-task-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'cancel-quantum-task-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'cancel-quantum-task-request
                    'make-cancel-quantum-task-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cancel-quantum-task-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cancel-quantum-task-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cancel-quantum-task-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass cancel-quantum-task-response common-lisp:nil
                       ((cancellation-status :initarg :cancellation-status
                         :initform
                         (common-lisp:error ":cancellationstatus is required")
                         :type
                         (common-lisp:or cancellation-status common-lisp:null)
                         :accessor
                         struct-shape-cancel-quantum-task-response-cancellation-status
                         :shape "CancellationStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (quantum-task-arn :initarg :quantum-task-arn :initform
                         (common-lisp:error ":quantumtaskarn is required")
                         :type
                         (common-lisp:or quantum-task-arn common-lisp:null)
                         :accessor
                         struct-shape-cancel-quantum-task-response-quantum-task-arn
                         :shape "QuantumTaskArn" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-cancel-quantum-task-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'cancel-quantum-task-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'cancel-quantum-task-response
                    'make-cancel-quantum-task-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cancel-quantum-task-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cancel-quantum-task-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cancellation-status))
      (common-lisp:list
       (common-lisp:cons "cancellationStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'quantum-task-arn))
      (common-lisp:list
       (common-lisp:cons "quantumTaskArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cancel-quantum-task-response))
   common-lisp:nil))
(common-lisp:deftype cancellation-status () 'common-lisp:string)
(common-lisp:deftype compression-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition conflict-exception
     (braket-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       conflict-exception-message)))
 (common-lisp:export
  (common-lisp:list 'conflict-exception 'conflict-exception-message)))
(common-lisp:progn
 (common-lisp:defclass container-image common-lisp:nil
                       ((uri :initarg :uri :initform
                         (common-lisp:error ":uri is required") :type
                         (common-lisp:or uri common-lisp:null) :accessor
                         struct-shape-container-image-uri :shape "Uri"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-container-image
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'container-image
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'container-image 'make-container-image))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input container-image))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input container-image))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'uri))
      (common-lisp:list
       (common-lisp:cons "uri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input container-image))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-job-request common-lisp:nil
                       ((algorithm-specification :initarg
                         :algorithm-specification :initform
                         (common-lisp:error
                          ":algorithmspecification is required")
                         :type
                         (common-lisp:or algorithm-specification
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-job-request-algorithm-specification
                         :shape "AlgorithmSpecification" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (associations :initarg :associations :initform
                         common-lisp:nil :type
                         (common-lisp:or create-job-request-associations-list
                                         common-lisp:null)
                         :accessor struct-shape-create-job-request-associations
                         :shape "CreateJobRequestAssociationsList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (checkpoint-config :initarg :checkpoint-config
                         :initform common-lisp:nil :type
                         (common-lisp:or job-checkpoint-config
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-job-request-checkpoint-config
                         :shape "JobCheckpointConfig" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (client-token :initarg :client-token :initform
                         (common-lisp:error ":clienttoken is required") :type
                         (common-lisp:or string64 common-lisp:null) :accessor
                         struct-shape-create-job-request-client-token :shape
                         "String64" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (device-config :initarg :device-config :initform
                         (common-lisp:error ":deviceconfig is required") :type
                         (common-lisp:or device-config common-lisp:null)
                         :accessor
                         struct-shape-create-job-request-device-config :shape
                         "DeviceConfig" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (hyper-parameters :initarg :hyper-parameters :initform
                         common-lisp:nil :type
                         (common-lisp:or hyper-parameters common-lisp:null)
                         :accessor
                         struct-shape-create-job-request-hyper-parameters
                         :shape "HyperParameters" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (input-data-config :initarg :input-data-config
                         :initform common-lisp:nil :type
                         (common-lisp:or
                          create-job-request-input-data-config-list
                          common-lisp:null)
                         :accessor
                         struct-shape-create-job-request-input-data-config
                         :shape "CreateJobRequestInputDataConfigList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (instance-config :initarg :instance-config :initform
                         (common-lisp:error ":instanceconfig is required")
                         :type
                         (common-lisp:or instance-config common-lisp:null)
                         :accessor
                         struct-shape-create-job-request-instance-config :shape
                         "InstanceConfig" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (job-name :initarg :job-name :initform
                         (common-lisp:error ":jobname is required") :type
                         (common-lisp:or create-job-request-job-name-string
                                         common-lisp:null)
                         :accessor struct-shape-create-job-request-job-name
                         :shape "CreateJobRequestJobNameString" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (output-data-config :initarg :output-data-config
                         :initform
                         (common-lisp:error ":outputdataconfig is required")
                         :type
                         (common-lisp:or job-output-data-config
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-job-request-output-data-config
                         :shape "JobOutputDataConfig" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (role-arn :initarg :role-arn :initform
                         (common-lisp:error ":rolearn is required") :type
                         (common-lisp:or role-arn common-lisp:null) :accessor
                         struct-shape-create-job-request-role-arn :shape
                         "RoleArn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (stopping-condition :initarg :stopping-condition
                         :initform common-lisp:nil :type
                         (common-lisp:or job-stopping-condition
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-job-request-stopping-condition
                         :shape "JobStoppingCondition" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tags-map common-lisp:null) :accessor
                         struct-shape-create-job-request-tags :shape "TagsMap"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-job-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-job-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-job-request 'make-create-job-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-job-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'algorithm-specification))
      (common-lisp:list
       (common-lisp:cons "algorithmSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'associations))
      (common-lisp:list
       (common-lisp:cons "associations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checkpoint-config))
      (common-lisp:list
       (common-lisp:cons "checkpointConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-config))
      (common-lisp:list
       (common-lisp:cons "deviceConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hyper-parameters))
      (common-lisp:list
       (common-lisp:cons "hyperParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-data-config))
      (common-lisp:list
       (common-lisp:cons "inputDataConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-config))
      (common-lisp:list
       (common-lisp:cons "instanceConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-name))
      (common-lisp:list
       (common-lisp:cons "jobName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-data-config))
      (common-lisp:list
       (common-lisp:cons "outputDataConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stopping-condition))
      (common-lisp:list
       (common-lisp:cons "stoppingCondition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype create-job-request-associations-list ()
   '(trivial-types:proper-list association))
 (common-lisp:defun make-create-job-request-associations-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list association))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype create-job-request-input-data-config-list ()
   '(trivial-types:proper-list input-file-config))
 (common-lisp:defun make-create-job-request-input-data-config-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list input-file-config))
   aws-sdk/generator/shape::members))
(common-lisp:deftype create-job-request-job-name-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass create-job-response common-lisp:nil
                       ((job-arn :initarg :job-arn :initform
                         (common-lisp:error ":jobarn is required") :type
                         (common-lisp:or job-arn common-lisp:null) :accessor
                         struct-shape-create-job-response-job-arn :shape
                         "JobArn" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-job-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-job-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-job-response 'make-create-job-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-job-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-job-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-arn))
      (common-lisp:list
       (common-lisp:cons "jobArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-job-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-quantum-task-request common-lisp:nil
                       ((action :initarg :action :initform
                         (common-lisp:error ":action is required") :type
                         (common-lisp:or json-value common-lisp:null) :accessor
                         struct-shape-create-quantum-task-request-action :shape
                         "JsonValue" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (associations :initarg :associations :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          create-quantum-task-request-associations-list
                          common-lisp:null)
                         :accessor
                         struct-shape-create-quantum-task-request-associations
                         :shape "CreateQuantumTaskRequestAssociationsList"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (client-token :initarg :client-token :initform
                         (common-lisp:error ":clienttoken is required") :type
                         (common-lisp:or string64 common-lisp:null) :accessor
                         struct-shape-create-quantum-task-request-client-token
                         :shape "String64" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (device-arn :initarg :device-arn :initform
                         (common-lisp:error ":devicearn is required") :type
                         (common-lisp:or device-arn common-lisp:null) :accessor
                         struct-shape-create-quantum-task-request-device-arn
                         :shape "DeviceArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (device-parameters :initarg :device-parameters
                         :initform common-lisp:nil :type
                         (common-lisp:or
                          create-quantum-task-request-device-parameters-string
                          common-lisp:null)
                         :accessor
                         struct-shape-create-quantum-task-request-device-parameters
                         :shape
                         "CreateQuantumTaskRequestDeviceParametersString"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (job-token :initarg :job-token :initform
                         common-lisp:nil :type
                         (common-lisp:or job-token common-lisp:null) :accessor
                         struct-shape-create-quantum-task-request-job-token
                         :shape "JobToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (output-s3bucket :initarg :output-s3bucket :initform
                         (common-lisp:error ":outputs3bucket is required")
                         :type
                         (common-lisp:or
                          create-quantum-task-request-output-s3bucket-string
                          common-lisp:null)
                         :accessor
                         struct-shape-create-quantum-task-request-output-s3bucket
                         :shape "CreateQuantumTaskRequestOutputS3BucketString"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (output-s3key-prefix :initarg :output-s3key-prefix
                         :initform
                         (common-lisp:error ":outputs3keyprefix is required")
                         :type
                         (common-lisp:or
                          create-quantum-task-request-output-s3key-prefix-string
                          common-lisp:null)
                         :accessor
                         struct-shape-create-quantum-task-request-output-s3key-prefix
                         :shape
                         "CreateQuantumTaskRequestOutputS3KeyPrefixString"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (shots :initarg :shots :initform
                         (common-lisp:error ":shots is required") :type
                         (common-lisp:or create-quantum-task-request-shots-long
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-quantum-task-request-shots :shape
                         "CreateQuantumTaskRequestShotsLong" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tags-map common-lisp:null) :accessor
                         struct-shape-create-quantum-task-request-tags :shape
                         "TagsMap" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-quantum-task-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-quantum-task-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-quantum-task-request
                    'make-create-quantum-task-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-quantum-task-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-quantum-task-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action))
      (common-lisp:list
       (common-lisp:cons "action"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'associations))
      (common-lisp:list
       (common-lisp:cons "associations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-arn))
      (common-lisp:list
       (common-lisp:cons "deviceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-parameters))
      (common-lisp:list
       (common-lisp:cons "deviceParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-token))
      (common-lisp:list
       (common-lisp:cons "jobToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-s3bucket))
      (common-lisp:list
       (common-lisp:cons "outputS3Bucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-s3key-prefix))
      (common-lisp:list
       (common-lisp:cons "outputS3KeyPrefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'shots))
      (common-lisp:list
       (common-lisp:cons "shots"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-quantum-task-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype create-quantum-task-request-associations-list ()
   '(trivial-types:proper-list association))
 (common-lisp:defun make-create-quantum-task-request-associations-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list association))
   aws-sdk/generator/shape::members))
(common-lisp:deftype create-quantum-task-request-device-parameters-string ()
  'common-lisp:string)
(common-lisp:deftype create-quantum-task-request-output-s3bucket-string ()
  'common-lisp:string)
(common-lisp:deftype create-quantum-task-request-output-s3key-prefix-string ()
  'common-lisp:string)
(common-lisp:deftype create-quantum-task-request-shots-long ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass create-quantum-task-response common-lisp:nil
                       ((quantum-task-arn :initarg :quantum-task-arn :initform
                         (common-lisp:error ":quantumtaskarn is required")
                         :type
                         (common-lisp:or quantum-task-arn common-lisp:null)
                         :accessor
                         struct-shape-create-quantum-task-response-quantum-task-arn
                         :shape "QuantumTaskArn" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-quantum-task-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-quantum-task-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-quantum-task-response
                    'make-create-quantum-task-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-quantum-task-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-quantum-task-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'quantum-task-arn))
      (common-lisp:list
       (common-lisp:cons "quantumTaskArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-quantum-task-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass data-source common-lisp:nil
                       ((s3data-source :initarg :s3data-source :initform
                         (common-lisp:error ":s3datasource is required") :type
                         (common-lisp:or s3data-source common-lisp:null)
                         :accessor struct-shape-data-source-s3data-source
                         :shape "S3DataSource" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-data-source
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'data-source
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'data-source 'make-data-source))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input data-source))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input data-source))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3data-source))
      (common-lisp:list
       (common-lisp:cons "s3DataSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input data-source))
   common-lisp:nil))
(common-lisp:deftype device-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass device-config common-lisp:nil
                       ((device :initarg :device :initform
                         (common-lisp:error ":device is required") :type
                         (common-lisp:or string256 common-lisp:null) :accessor
                         struct-shape-device-config-device :shape "String256"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-device-config
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'device-config
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'device-config 'make-device-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input device-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input device-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device))
      (common-lisp:list
       (common-lisp:cons "device"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input device-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition device-offline-exception
     (braket-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       device-offline-exception-message)))
 (common-lisp:export
  (common-lisp:list 'device-offline-exception
                    'device-offline-exception-message)))
(common-lisp:progn
 (common-lisp:defclass device-queue-info common-lisp:nil
                       ((queue :initarg :queue :initform
                         (common-lisp:error ":queue is required") :type
                         (common-lisp:or queue-name common-lisp:null) :accessor
                         struct-shape-device-queue-info-queue :shape
                         "QueueName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (queue-priority :initarg :queue-priority :initform
                         common-lisp:nil :type
                         (common-lisp:or queue-priority common-lisp:null)
                         :accessor
                         struct-shape-device-queue-info-queue-priority :shape
                         "QueuePriority" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (queue-size :initarg :queue-size :initform
                         (common-lisp:error ":queuesize is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-device-queue-info-queue-size :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-device-queue-info
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'device-queue-info
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'device-queue-info 'make-device-queue-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input device-queue-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input device-queue-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'queue))
      (common-lisp:list
       (common-lisp:cons "queue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'queue-priority))
      (common-lisp:list
       (common-lisp:cons "queuePriority"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'queue-size))
      (common-lisp:list
       (common-lisp:cons "queueSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input device-queue-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype device-queue-info-list ()
   '(trivial-types:proper-list device-queue-info))
 (common-lisp:defun make-device-queue-info-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list device-queue-info))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition device-retired-exception
     (braket-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       device-retired-exception-message)))
 (common-lisp:export
  (common-lisp:list 'device-retired-exception
                    'device-retired-exception-message)))
(common-lisp:deftype device-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass device-summary common-lisp:nil
                       ((device-arn :initarg :device-arn :initform
                         (common-lisp:error ":devicearn is required") :type
                         (common-lisp:or device-arn common-lisp:null) :accessor
                         struct-shape-device-summary-device-arn :shape
                         "DeviceArn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (device-name :initarg :device-name :initform
                         (common-lisp:error ":devicename is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-device-summary-device-name :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (device-status :initarg :device-status :initform
                         (common-lisp:error ":devicestatus is required") :type
                         (common-lisp:or device-status common-lisp:null)
                         :accessor struct-shape-device-summary-device-status
                         :shape "DeviceStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (device-type :initarg :device-type :initform
                         (common-lisp:error ":devicetype is required") :type
                         (common-lisp:or device-type common-lisp:null)
                         :accessor struct-shape-device-summary-device-type
                         :shape "DeviceType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (provider-name :initarg :provider-name :initform
                         (common-lisp:error ":providername is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-device-summary-provider-name :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-device-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'device-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'device-summary 'make-device-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input device-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input device-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-arn))
      (common-lisp:list
       (common-lisp:cons "deviceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-name))
      (common-lisp:list
       (common-lisp:cons "deviceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-status))
      (common-lisp:list
       (common-lisp:cons "deviceStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-type))
      (common-lisp:list
       (common-lisp:cons "deviceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'provider-name))
      (common-lisp:list
       (common-lisp:cons "providerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input device-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype device-summary-list ()
   '(trivial-types:proper-list device-summary))
 (common-lisp:defun make-device-summary-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list device-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype device-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass get-device-request common-lisp:nil
                       ((device-arn :initarg :device-arn :initform
                         (common-lisp:error ":devicearn is required") :type
                         (common-lisp:or device-arn common-lisp:null) :accessor
                         struct-shape-get-device-request-device-arn :shape
                         "DeviceArn" :location "uri" :location-name
                         "deviceArn"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-device-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-device-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-device-request 'make-get-device-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-device-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-device-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-device-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-device-response common-lisp:nil
                       ((device-arn :initarg :device-arn :initform
                         (common-lisp:error ":devicearn is required") :type
                         (common-lisp:or device-arn common-lisp:null) :accessor
                         struct-shape-get-device-response-device-arn :shape
                         "DeviceArn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (device-capabilities :initarg :device-capabilities
                         :initform
                         (common-lisp:error ":devicecapabilities is required")
                         :type (common-lisp:or json-value common-lisp:null)
                         :accessor
                         struct-shape-get-device-response-device-capabilities
                         :shape "JsonValue" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (device-name :initarg :device-name :initform
                         (common-lisp:error ":devicename is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-get-device-response-device-name :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (device-queue-info :initarg :device-queue-info
                         :initform common-lisp:nil :type
                         (common-lisp:or device-queue-info-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-device-response-device-queue-info
                         :shape "DeviceQueueInfoList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (device-status :initarg :device-status :initform
                         (common-lisp:error ":devicestatus is required") :type
                         (common-lisp:or device-status common-lisp:null)
                         :accessor
                         struct-shape-get-device-response-device-status :shape
                         "DeviceStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (device-type :initarg :device-type :initform
                         (common-lisp:error ":devicetype is required") :type
                         (common-lisp:or device-type common-lisp:null)
                         :accessor struct-shape-get-device-response-device-type
                         :shape "DeviceType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (provider-name :initarg :provider-name :initform
                         (common-lisp:error ":providername is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-get-device-response-provider-name :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-device-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-device-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-device-response 'make-get-device-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-device-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-device-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-arn))
      (common-lisp:list
       (common-lisp:cons "deviceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-capabilities))
      (common-lisp:list
       (common-lisp:cons "deviceCapabilities"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-name))
      (common-lisp:list
       (common-lisp:cons "deviceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-queue-info))
      (common-lisp:list
       (common-lisp:cons "deviceQueueInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-status))
      (common-lisp:list
       (common-lisp:cons "deviceStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-type))
      (common-lisp:list
       (common-lisp:cons "deviceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'provider-name))
      (common-lisp:list
       (common-lisp:cons "providerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-device-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-job-request common-lisp:nil
                       ((additional-attribute-names :initarg
                         :additional-attribute-names :initform common-lisp:nil
                         :type
                         (common-lisp:or
                          hybrid-job-additional-attribute-names-list
                          common-lisp:null)
                         :accessor
                         struct-shape-get-job-request-additional-attribute-names
                         :shape "HybridJobAdditionalAttributeNamesList"
                         :location "querystring" :location-name
                         "additionalAttributeNames")
                        (job-arn :initarg :job-arn :initform
                         (common-lisp:error ":jobarn is required") :type
                         (common-lisp:or job-arn common-lisp:null) :accessor
                         struct-shape-get-job-request-job-arn :shape "JobArn"
                         :location "uri" :location-name "jobArn"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-job-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-job-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'get-job-request 'make-get-job-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-job-response common-lisp:nil
                       ((algorithm-specification :initarg
                         :algorithm-specification :initform
                         (common-lisp:error
                          ":algorithmspecification is required")
                         :type
                         (common-lisp:or algorithm-specification
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-job-response-algorithm-specification
                         :shape "AlgorithmSpecification" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (associations :initarg :associations :initform
                         common-lisp:nil :type
                         (common-lisp:or associations common-lisp:null)
                         :accessor struct-shape-get-job-response-associations
                         :shape "Associations" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (billable-duration :initarg :billable-duration
                         :initform common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-get-job-response-billable-duration :shape
                         "Integer" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (checkpoint-config :initarg :checkpoint-config
                         :initform common-lisp:nil :type
                         (common-lisp:or job-checkpoint-config
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-job-response-checkpoint-config :shape
                         "JobCheckpointConfig" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (created-at :initarg :created-at :initform
                         (common-lisp:error ":createdat is required") :type
                         (common-lisp:or synthetic-timestamp-date-time
                                         common-lisp:null)
                         :accessor struct-shape-get-job-response-created-at
                         :shape "SyntheticTimestamp_date_time" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (device-config :initarg :device-config :initform
                         common-lisp:nil :type
                         (common-lisp:or device-config common-lisp:null)
                         :accessor struct-shape-get-job-response-device-config
                         :shape "DeviceConfig" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (ended-at :initarg :ended-at :initform common-lisp:nil
                         :type
                         (common-lisp:or synthetic-timestamp-date-time
                                         common-lisp:null)
                         :accessor struct-shape-get-job-response-ended-at
                         :shape "SyntheticTimestamp_date_time" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (events :initarg :events :initform common-lisp:nil
                         :type (common-lisp:or job-events common-lisp:null)
                         :accessor struct-shape-get-job-response-events :shape
                         "JobEvents" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (failure-reason :initarg :failure-reason :initform
                         common-lisp:nil :type
                         (common-lisp:or string1024 common-lisp:null) :accessor
                         struct-shape-get-job-response-failure-reason :shape
                         "String1024" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (hyper-parameters :initarg :hyper-parameters :initform
                         common-lisp:nil :type
                         (common-lisp:or hyper-parameters common-lisp:null)
                         :accessor
                         struct-shape-get-job-response-hyper-parameters :shape
                         "HyperParameters" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (input-data-config :initarg :input-data-config
                         :initform common-lisp:nil :type
                         (common-lisp:or input-config-list common-lisp:null)
                         :accessor
                         struct-shape-get-job-response-input-data-config :shape
                         "InputConfigList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (instance-config :initarg :instance-config :initform
                         (common-lisp:error ":instanceconfig is required")
                         :type
                         (common-lisp:or instance-config common-lisp:null)
                         :accessor
                         struct-shape-get-job-response-instance-config :shape
                         "InstanceConfig" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (job-arn :initarg :job-arn :initform
                         (common-lisp:error ":jobarn is required") :type
                         (common-lisp:or job-arn common-lisp:null) :accessor
                         struct-shape-get-job-response-job-arn :shape "JobArn"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (job-name :initarg :job-name :initform
                         (common-lisp:error ":jobname is required") :type
                         (common-lisp:or get-job-response-job-name-string
                                         common-lisp:null)
                         :accessor struct-shape-get-job-response-job-name
                         :shape "GetJobResponseJobNameString" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (output-data-config :initarg :output-data-config
                         :initform
                         (common-lisp:error ":outputdataconfig is required")
                         :type
                         (common-lisp:or job-output-data-config
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-job-response-output-data-config
                         :shape "JobOutputDataConfig" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (queue-info :initarg :queue-info :initform
                         common-lisp:nil :type
                         (common-lisp:or hybrid-job-queue-info
                                         common-lisp:null)
                         :accessor struct-shape-get-job-response-queue-info
                         :shape "HybridJobQueueInfo" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (role-arn :initarg :role-arn :initform
                         (common-lisp:error ":rolearn is required") :type
                         (common-lisp:or role-arn common-lisp:null) :accessor
                         struct-shape-get-job-response-role-arn :shape
                         "RoleArn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (started-at :initarg :started-at :initform
                         common-lisp:nil :type
                         (common-lisp:or synthetic-timestamp-date-time
                                         common-lisp:null)
                         :accessor struct-shape-get-job-response-started-at
                         :shape "SyntheticTimestamp_date_time" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (status :initarg :status :initform
                         (common-lisp:error ":status is required") :type
                         (common-lisp:or job-primary-status common-lisp:null)
                         :accessor struct-shape-get-job-response-status :shape
                         "JobPrimaryStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (stopping-condition :initarg :stopping-condition
                         :initform common-lisp:nil :type
                         (common-lisp:or job-stopping-condition
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-job-response-stopping-condition
                         :shape "JobStoppingCondition" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tags-map common-lisp:null) :accessor
                         struct-shape-get-job-response-tags :shape "TagsMap"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-job-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-job-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-job-response 'make-get-job-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-job-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-job-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'algorithm-specification))
      (common-lisp:list
       (common-lisp:cons "algorithmSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'associations))
      (common-lisp:list
       (common-lisp:cons "associations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'billable-duration))
      (common-lisp:list
       (common-lisp:cons "billableDuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checkpoint-config))
      (common-lisp:list
       (common-lisp:cons "checkpointConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-config))
      (common-lisp:list
       (common-lisp:cons "deviceConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ended-at))
      (common-lisp:list
       (common-lisp:cons "endedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'events))
      (common-lisp:list
       (common-lisp:cons "events"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-reason))
      (common-lisp:list
       (common-lisp:cons "failureReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hyper-parameters))
      (common-lisp:list
       (common-lisp:cons "hyperParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-data-config))
      (common-lisp:list
       (common-lisp:cons "inputDataConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-config))
      (common-lisp:list
       (common-lisp:cons "instanceConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-arn))
      (common-lisp:list
       (common-lisp:cons "jobArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-name))
      (common-lisp:list
       (common-lisp:cons "jobName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-data-config))
      (common-lisp:list
       (common-lisp:cons "outputDataConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'queue-info))
      (common-lisp:list
       (common-lisp:cons "queueInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'started-at))
      (common-lisp:list
       (common-lisp:cons "startedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stopping-condition))
      (common-lisp:list
       (common-lisp:cons "stoppingCondition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-job-response))
   common-lisp:nil))
(common-lisp:deftype get-job-response-job-name-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass get-quantum-task-request common-lisp:nil
                       ((additional-attribute-names :initarg
                         :additional-attribute-names :initform common-lisp:nil
                         :type
                         (common-lisp:or
                          quantum-task-additional-attribute-names-list
                          common-lisp:null)
                         :accessor
                         struct-shape-get-quantum-task-request-additional-attribute-names
                         :shape "QuantumTaskAdditionalAttributeNamesList"
                         :location "querystring" :location-name
                         "additionalAttributeNames")
                        (quantum-task-arn :initarg :quantum-task-arn :initform
                         (common-lisp:error ":quantumtaskarn is required")
                         :type
                         (common-lisp:or quantum-task-arn common-lisp:null)
                         :accessor
                         struct-shape-get-quantum-task-request-quantum-task-arn
                         :shape "QuantumTaskArn" :location "uri" :location-name
                         "quantumTaskArn"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-quantum-task-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-quantum-task-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-quantum-task-request 'make-get-quantum-task-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-quantum-task-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-quantum-task-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-quantum-task-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-quantum-task-response common-lisp:nil
                       ((associations :initarg :associations :initform
                         common-lisp:nil :type
                         (common-lisp:or associations common-lisp:null)
                         :accessor
                         struct-shape-get-quantum-task-response-associations
                         :shape "Associations" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (created-at :initarg :created-at :initform
                         (common-lisp:error ":createdat is required") :type
                         (common-lisp:or synthetic-timestamp-date-time
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-quantum-task-response-created-at
                         :shape "SyntheticTimestamp_date_time" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (device-arn :initarg :device-arn :initform
                         (common-lisp:error ":devicearn is required") :type
                         (common-lisp:or device-arn common-lisp:null) :accessor
                         struct-shape-get-quantum-task-response-device-arn
                         :shape "DeviceArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (device-parameters :initarg :device-parameters
                         :initform
                         (common-lisp:error ":deviceparameters is required")
                         :type (common-lisp:or json-value common-lisp:null)
                         :accessor
                         struct-shape-get-quantum-task-response-device-parameters
                         :shape "JsonValue" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (ended-at :initarg :ended-at :initform common-lisp:nil
                         :type
                         (common-lisp:or synthetic-timestamp-date-time
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-quantum-task-response-ended-at :shape
                         "SyntheticTimestamp_date_time" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (failure-reason :initarg :failure-reason :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-get-quantum-task-response-failure-reason
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (job-arn :initarg :job-arn :initform common-lisp:nil
                         :type (common-lisp:or job-arn common-lisp:null)
                         :accessor
                         struct-shape-get-quantum-task-response-job-arn :shape
                         "JobArn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (output-s3bucket :initarg :output-s3bucket :initform
                         (common-lisp:error ":outputs3bucket is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-get-quantum-task-response-output-s3bucket
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (output-s3directory :initarg :output-s3directory
                         :initform
                         (common-lisp:error ":outputs3directory is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-get-quantum-task-response-output-s3directory
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (quantum-task-arn :initarg :quantum-task-arn :initform
                         (common-lisp:error ":quantumtaskarn is required")
                         :type
                         (common-lisp:or quantum-task-arn common-lisp:null)
                         :accessor
                         struct-shape-get-quantum-task-response-quantum-task-arn
                         :shape "QuantumTaskArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (queue-info :initarg :queue-info :initform
                         common-lisp:nil :type
                         (common-lisp:or quantum-task-queue-info
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-quantum-task-response-queue-info
                         :shape "QuantumTaskQueueInfo" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (shots :initarg :shots :initform
                         (common-lisp:error ":shots is required") :type
                         (common-lisp:or long common-lisp:null) :accessor
                         struct-shape-get-quantum-task-response-shots :shape
                         "Long" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (status :initarg :status :initform
                         (common-lisp:error ":status is required") :type
                         (common-lisp:or quantum-task-status common-lisp:null)
                         :accessor
                         struct-shape-get-quantum-task-response-status :shape
                         "QuantumTaskStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tags-map common-lisp:null) :accessor
                         struct-shape-get-quantum-task-response-tags :shape
                         "TagsMap" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-quantum-task-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-quantum-task-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-quantum-task-response
                    'make-get-quantum-task-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-quantum-task-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-quantum-task-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'associations))
      (common-lisp:list
       (common-lisp:cons "associations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-arn))
      (common-lisp:list
       (common-lisp:cons "deviceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-parameters))
      (common-lisp:list
       (common-lisp:cons "deviceParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ended-at))
      (common-lisp:list
       (common-lisp:cons "endedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-reason))
      (common-lisp:list
       (common-lisp:cons "failureReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-arn))
      (common-lisp:list
       (common-lisp:cons "jobArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-s3bucket))
      (common-lisp:list
       (common-lisp:cons "outputS3Bucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-s3directory))
      (common-lisp:list
       (common-lisp:cons "outputS3Directory"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'quantum-task-arn))
      (common-lisp:list
       (common-lisp:cons "quantumTaskArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'queue-info))
      (common-lisp:list
       (common-lisp:cons "queueInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'shots))
      (common-lisp:list
       (common-lisp:cons "shots"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-quantum-task-response))
   common-lisp:nil))
(common-lisp:deftype hybrid-job-additional-attribute-name ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype hybrid-job-additional-attribute-names-list ()
   '(trivial-types:proper-list hybrid-job-additional-attribute-name))
 (common-lisp:defun make-hybrid-job-additional-attribute-names-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            hybrid-job-additional-attribute-name))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass hybrid-job-queue-info common-lisp:nil
                       ((message :initarg :message :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-hybrid-job-queue-info-message
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (position :initarg :position :initform
                         (common-lisp:error ":position is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-hybrid-job-queue-info-position :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (queue :initarg :queue :initform
                         (common-lisp:error ":queue is required") :type
                         (common-lisp:or queue-name common-lisp:null) :accessor
                         struct-shape-hybrid-job-queue-info-queue :shape
                         "QueueName" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-hybrid-job-queue-info
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'hybrid-job-queue-info
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'hybrid-job-queue-info 'make-hybrid-job-queue-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          hybrid-job-queue-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          hybrid-job-queue-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'position))
      (common-lisp:list
       (common-lisp:cons "position"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'queue))
      (common-lisp:list
       (common-lisp:cons "queue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          hybrid-job-queue-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype hyper-parameters () 'common-lisp:hash-table)
 (common-lisp:defun make-hyper-parameters (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype hyper-parameters-value-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype input-config-list ()
   '(trivial-types:proper-list input-file-config))
 (common-lisp:defun make-input-config-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list input-file-config))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass input-file-config common-lisp:nil
                       ((channel-name :initarg :channel-name :initform
                         (common-lisp:error ":channelname is required") :type
                         (common-lisp:or input-file-config-channel-name-string
                                         common-lisp:null)
                         :accessor struct-shape-input-file-config-channel-name
                         :shape "InputFileConfigChannelNameString" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (content-type :initarg :content-type :initform
                         common-lisp:nil :type
                         (common-lisp:or string256 common-lisp:null) :accessor
                         struct-shape-input-file-config-content-type :shape
                         "String256" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (data-source :initarg :data-source :initform
                         (common-lisp:error ":datasource is required") :type
                         (common-lisp:or data-source common-lisp:null)
                         :accessor struct-shape-input-file-config-data-source
                         :shape "DataSource" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-input-file-config
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'input-file-config
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'input-file-config 'make-input-file-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input input-file-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input input-file-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channel-name))
      (common-lisp:list
       (common-lisp:cons "channelName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-type))
      (common-lisp:list
       (common-lisp:cons "contentType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-source))
      (common-lisp:list
       (common-lisp:cons "dataSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input input-file-config))
   common-lisp:nil))
(common-lisp:deftype input-file-config-channel-name-string ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass instance-config common-lisp:nil
                       ((instance-count :initarg :instance-count :initform
                         common-lisp:nil :type
                         (common-lisp:or instance-config-instance-count-integer
                                         common-lisp:null)
                         :accessor struct-shape-instance-config-instance-count
                         :shape "InstanceConfigInstanceCountInteger" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (instance-type :initarg :instance-type :initform
                         (common-lisp:error ":instancetype is required") :type
                         (common-lisp:or instance-type common-lisp:null)
                         :accessor struct-shape-instance-config-instance-type
                         :shape "InstanceType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (volume-size-in-gb :initarg :volume-size-in-gb
                         :initform
                         (common-lisp:error ":volumesizeingb is required")
                         :type
                         (common-lisp:or
                          instance-config-volume-size-in-gb-integer
                          common-lisp:null)
                         :accessor
                         struct-shape-instance-config-volume-size-in-gb :shape
                         "InstanceConfigVolumeSizeInGbInteger" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-instance-config
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'instance-config
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'instance-config 'make-instance-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input instance-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input instance-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-count))
      (common-lisp:list
       (common-lisp:cons "instanceCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-type))
      (common-lisp:list
       (common-lisp:cons "instanceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'volume-size-in-gb))
      (common-lisp:list
       (common-lisp:cons "volumeSizeInGb"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input instance-config))
   common-lisp:nil))
(common-lisp:deftype instance-config-instance-count-integer ()
  'common-lisp:integer)
(common-lisp:deftype instance-config-volume-size-in-gb-integer ()
  'common-lisp:integer)
(common-lisp:deftype instance-type () 'common-lisp:string)
(common-lisp:deftype integer () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition internal-service-exception
     (braket-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       internal-service-exception-message)))
 (common-lisp:export
  (common-lisp:list 'internal-service-exception
                    'internal-service-exception-message)))
(common-lisp:deftype job-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass job-checkpoint-config common-lisp:nil
                       ((local-path :initarg :local-path :initform
                         common-lisp:nil :type
                         (common-lisp:or string4096 common-lisp:null) :accessor
                         struct-shape-job-checkpoint-config-local-path :shape
                         "String4096" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (s3uri :initarg :s3uri :initform
                         (common-lisp:error ":s3uri is required") :type
                         (common-lisp:or s3path common-lisp:null) :accessor
                         struct-shape-job-checkpoint-config-s3uri :shape
                         "S3Path" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-job-checkpoint-config
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'job-checkpoint-config
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'job-checkpoint-config 'make-job-checkpoint-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          job-checkpoint-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          job-checkpoint-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'local-path))
      (common-lisp:list
       (common-lisp:cons "localPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3uri))
      (common-lisp:list
       (common-lisp:cons "s3Uri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          job-checkpoint-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass job-event-details common-lisp:nil
                       ((event-type :initarg :event-type :initform
                         common-lisp:nil :type
                         (common-lisp:or job-event-type common-lisp:null)
                         :accessor struct-shape-job-event-details-event-type
                         :shape "JobEventType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (message :initarg :message :initform common-lisp:nil
                         :type
                         (common-lisp:or job-event-details-message-string
                                         common-lisp:null)
                         :accessor struct-shape-job-event-details-message
                         :shape "JobEventDetailsMessageString" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (time-of-event :initarg :time-of-event :initform
                         common-lisp:nil :type
                         (common-lisp:or synthetic-timestamp-date-time
                                         common-lisp:null)
                         :accessor struct-shape-job-event-details-time-of-event
                         :shape "SyntheticTimestamp_date_time" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-job-event-details
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'job-event-details
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'job-event-details 'make-job-event-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input job-event-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input job-event-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-type))
      (common-lisp:list
       (common-lisp:cons "eventType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'time-of-event))
      (common-lisp:list
       (common-lisp:cons "timeOfEvent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input job-event-details))
   common-lisp:nil))
(common-lisp:deftype job-event-details-message-string () 'common-lisp:string)
(common-lisp:deftype job-event-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype job-events ()
   '(trivial-types:proper-list job-event-details))
 (common-lisp:defun make-job-events
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list job-event-details))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass job-output-data-config common-lisp:nil
                       ((kms-key-id :initarg :kms-key-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string2048 common-lisp:null) :accessor
                         struct-shape-job-output-data-config-kms-key-id :shape
                         "String2048" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (s3path :initarg :s3path :initform
                         (common-lisp:error ":s3path is required") :type
                         (common-lisp:or s3path common-lisp:null) :accessor
                         struct-shape-job-output-data-config-s3path :shape
                         "S3Path" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-job-output-data-config
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'job-output-data-config
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'job-output-data-config 'make-job-output-data-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          job-output-data-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          job-output-data-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "kmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3path))
      (common-lisp:list
       (common-lisp:cons "s3Path"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          job-output-data-config))
   common-lisp:nil))
(common-lisp:deftype job-primary-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass job-stopping-condition common-lisp:nil
                       ((max-runtime-in-seconds :initarg
                         :max-runtime-in-seconds :initform common-lisp:nil
                         :type
                         (common-lisp:or
                          job-stopping-condition-max-runtime-in-seconds-integer
                          common-lisp:null)
                         :accessor
                         struct-shape-job-stopping-condition-max-runtime-in-seconds
                         :shape
                         "JobStoppingConditionMaxRuntimeInSecondsInteger"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-job-stopping-condition
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'job-stopping-condition
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'job-stopping-condition 'make-job-stopping-condition))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          job-stopping-condition))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          job-stopping-condition))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'max-runtime-in-seconds))
      (common-lisp:list
       (common-lisp:cons "maxRuntimeInSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          job-stopping-condition))
   common-lisp:nil))
(common-lisp:deftype job-stopping-condition-max-runtime-in-seconds-integer ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass job-summary common-lisp:nil
                       ((created-at :initarg :created-at :initform
                         (common-lisp:error ":createdat is required") :type
                         (common-lisp:or synthetic-timestamp-date-time
                                         common-lisp:null)
                         :accessor struct-shape-job-summary-created-at :shape
                         "SyntheticTimestamp_date_time" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (device :initarg :device :initform
                         (common-lisp:error ":device is required") :type
                         (common-lisp:or string256 common-lisp:null) :accessor
                         struct-shape-job-summary-device :shape "String256"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (ended-at :initarg :ended-at :initform common-lisp:nil
                         :type
                         (common-lisp:or synthetic-timestamp-date-time
                                         common-lisp:null)
                         :accessor struct-shape-job-summary-ended-at :shape
                         "SyntheticTimestamp_date_time" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (job-arn :initarg :job-arn :initform
                         (common-lisp:error ":jobarn is required") :type
                         (common-lisp:or job-arn common-lisp:null) :accessor
                         struct-shape-job-summary-job-arn :shape "JobArn"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (job-name :initarg :job-name :initform
                         (common-lisp:error ":jobname is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-job-summary-job-name :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (started-at :initarg :started-at :initform
                         common-lisp:nil :type
                         (common-lisp:or synthetic-timestamp-date-time
                                         common-lisp:null)
                         :accessor struct-shape-job-summary-started-at :shape
                         "SyntheticTimestamp_date_time" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (status :initarg :status :initform
                         (common-lisp:error ":status is required") :type
                         (common-lisp:or job-primary-status common-lisp:null)
                         :accessor struct-shape-job-summary-status :shape
                         "JobPrimaryStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tags-map common-lisp:null) :accessor
                         struct-shape-job-summary-tags :shape "TagsMap"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-job-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'job-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'job-summary 'make-job-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input job-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input job-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device))
      (common-lisp:list
       (common-lisp:cons "device"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ended-at))
      (common-lisp:list
       (common-lisp:cons "endedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-arn))
      (common-lisp:list
       (common-lisp:cons "jobArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-name))
      (common-lisp:list
       (common-lisp:cons "jobName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'started-at))
      (common-lisp:list
       (common-lisp:cons "startedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input job-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype job-summary-list ()
   '(trivial-types:proper-list job-summary))
 (common-lisp:defun make-job-summary-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list job-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype job-token () 'common-lisp:string)
(common-lisp:deftype json-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-request common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resourcearn is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-tags-for-resource-request-resource-arn
                         :shape "String" :location "uri" :location-name
                         "resourceArn"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-tags-for-resource-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-request
                    'make-list-tags-for-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-response common-lisp:nil
                       ((tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tags-map common-lisp:null) :accessor
                         struct-shape-list-tags-for-resource-response-tags
                         :shape "TagsMap" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-tags-for-resource-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-response
                    'make-list-tags-for-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   common-lisp:nil))
(common-lisp:deftype long () 'common-lisp:integer)
(common-lisp:deftype quantum-task-additional-attribute-name ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype quantum-task-additional-attribute-names-list ()
   '(trivial-types:proper-list quantum-task-additional-attribute-name))
 (common-lisp:defun make-quantum-task-additional-attribute-names-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            quantum-task-additional-attribute-name))
   aws-sdk/generator/shape::members))
(common-lisp:deftype quantum-task-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass quantum-task-queue-info common-lisp:nil
                       ((message :initarg :message :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-quantum-task-queue-info-message
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (position :initarg :position :initform
                         (common-lisp:error ":position is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-quantum-task-queue-info-position :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (queue :initarg :queue :initform
                         (common-lisp:error ":queue is required") :type
                         (common-lisp:or queue-name common-lisp:null) :accessor
                         struct-shape-quantum-task-queue-info-queue :shape
                         "QueueName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (queue-priority :initarg :queue-priority :initform
                         common-lisp:nil :type
                         (common-lisp:or queue-priority common-lisp:null)
                         :accessor
                         struct-shape-quantum-task-queue-info-queue-priority
                         :shape "QueuePriority" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-quantum-task-queue-info
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'quantum-task-queue-info
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'quantum-task-queue-info 'make-quantum-task-queue-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          quantum-task-queue-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          quantum-task-queue-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'position))
      (common-lisp:list
       (common-lisp:cons "position"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'queue))
      (common-lisp:list
       (common-lisp:cons "queue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'queue-priority))
      (common-lisp:list
       (common-lisp:cons "queuePriority"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          quantum-task-queue-info))
   common-lisp:nil))
(common-lisp:deftype quantum-task-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass quantum-task-summary common-lisp:nil
                       ((created-at :initarg :created-at :initform
                         (common-lisp:error ":createdat is required") :type
                         (common-lisp:or synthetic-timestamp-date-time
                                         common-lisp:null)
                         :accessor struct-shape-quantum-task-summary-created-at
                         :shape "SyntheticTimestamp_date_time" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (device-arn :initarg :device-arn :initform
                         (common-lisp:error ":devicearn is required") :type
                         (common-lisp:or device-arn common-lisp:null) :accessor
                         struct-shape-quantum-task-summary-device-arn :shape
                         "DeviceArn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (ended-at :initarg :ended-at :initform common-lisp:nil
                         :type
                         (common-lisp:or synthetic-timestamp-date-time
                                         common-lisp:null)
                         :accessor struct-shape-quantum-task-summary-ended-at
                         :shape "SyntheticTimestamp_date_time" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (output-s3bucket :initarg :output-s3bucket :initform
                         (common-lisp:error ":outputs3bucket is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-quantum-task-summary-output-s3bucket
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (output-s3directory :initarg :output-s3directory
                         :initform
                         (common-lisp:error ":outputs3directory is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-quantum-task-summary-output-s3directory
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (quantum-task-arn :initarg :quantum-task-arn :initform
                         (common-lisp:error ":quantumtaskarn is required")
                         :type
                         (common-lisp:or quantum-task-arn common-lisp:null)
                         :accessor
                         struct-shape-quantum-task-summary-quantum-task-arn
                         :shape "QuantumTaskArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (shots :initarg :shots :initform
                         (common-lisp:error ":shots is required") :type
                         (common-lisp:or long common-lisp:null) :accessor
                         struct-shape-quantum-task-summary-shots :shape "Long"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (status :initarg :status :initform
                         (common-lisp:error ":status is required") :type
                         (common-lisp:or quantum-task-status common-lisp:null)
                         :accessor struct-shape-quantum-task-summary-status
                         :shape "QuantumTaskStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tags-map common-lisp:null) :accessor
                         struct-shape-quantum-task-summary-tags :shape
                         "TagsMap" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-quantum-task-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'quantum-task-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'quantum-task-summary 'make-quantum-task-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input quantum-task-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input quantum-task-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-arn))
      (common-lisp:list
       (common-lisp:cons "deviceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ended-at))
      (common-lisp:list
       (common-lisp:cons "endedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-s3bucket))
      (common-lisp:list
       (common-lisp:cons "outputS3Bucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-s3directory))
      (common-lisp:list
       (common-lisp:cons "outputS3Directory"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'quantum-task-arn))
      (common-lisp:list
       (common-lisp:cons "quantumTaskArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'shots))
      (common-lisp:list
       (common-lisp:cons "shots"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input quantum-task-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype quantum-task-summary-list ()
   '(trivial-types:proper-list quantum-task-summary))
 (common-lisp:defun make-quantum-task-summary-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list quantum-task-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype queue-name () 'common-lisp:string)
(common-lisp:deftype queue-priority () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-exception
     (braket-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'resource-not-found-exception
                    'resource-not-found-exception-message)))
(common-lisp:deftype role-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass s3data-source common-lisp:nil
                       ((s3uri :initarg :s3uri :initform
                         (common-lisp:error ":s3uri is required") :type
                         (common-lisp:or s3path common-lisp:null) :accessor
                         struct-shape-s3data-source-s3uri :shape "S3Path"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-s3data-source
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 's3data-source
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 's3data-source 'make-s3data-source))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input s3data-source))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input s3data-source))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3uri))
      (common-lisp:list
       (common-lisp:cons "s3Uri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input s3data-source))
   common-lisp:nil))
(common-lisp:deftype s3path () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass script-mode-config common-lisp:nil
                       ((compression-type :initarg :compression-type :initform
                         common-lisp:nil :type
                         (common-lisp:or compression-type common-lisp:null)
                         :accessor
                         struct-shape-script-mode-config-compression-type
                         :shape "CompressionType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (entry-point :initarg :entry-point :initform
                         (common-lisp:error ":entrypoint is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-script-mode-config-entry-point :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (s3uri :initarg :s3uri :initform
                         (common-lisp:error ":s3uri is required") :type
                         (common-lisp:or s3path common-lisp:null) :accessor
                         struct-shape-script-mode-config-s3uri :shape "S3Path"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-script-mode-config
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'script-mode-config
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'script-mode-config 'make-script-mode-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input script-mode-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input script-mode-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compression-type))
      (common-lisp:list
       (common-lisp:cons "compressionType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entry-point))
      (common-lisp:list
       (common-lisp:cons "entryPoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3uri))
      (common-lisp:list
       (common-lisp:cons "s3Uri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input script-mode-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass search-devices-filter common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or search-devices-filter-name-string
                                         common-lisp:null)
                         :accessor struct-shape-search-devices-filter-name
                         :shape "SearchDevicesFilterNameString" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (values :initarg :values :initform
                         (common-lisp:error ":values is required") :type
                         (common-lisp:or search-devices-filter-values-list
                                         common-lisp:null)
                         :accessor struct-shape-search-devices-filter-values
                         :shape "SearchDevicesFilterValuesList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-search-devices-filter
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'search-devices-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'search-devices-filter 'make-search-devices-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          search-devices-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          search-devices-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          search-devices-filter))
   common-lisp:nil))
(common-lisp:deftype search-devices-filter-name-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype search-devices-filter-values-list ()
   '(trivial-types:proper-list string256))
 (common-lisp:defun make-search-devices-filter-values-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string256))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass search-devices-request common-lisp:nil
                       ((filters :initarg :filters :initform
                         (common-lisp:error ":filters is required") :type
                         (common-lisp:or search-devices-request-filters-list
                                         common-lisp:null)
                         :accessor struct-shape-search-devices-request-filters
                         :shape "SearchDevicesRequestFiltersList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          search-devices-request-max-results-integer
                          common-lisp:null)
                         :accessor
                         struct-shape-search-devices-request-max-results :shape
                         "SearchDevicesRequestMaxResultsInteger" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-search-devices-request-next-token :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-search-devices-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'search-devices-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'search-devices-request 'make-search-devices-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          search-devices-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          search-devices-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          search-devices-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype search-devices-request-filters-list ()
   '(trivial-types:proper-list search-devices-filter))
 (common-lisp:defun make-search-devices-request-filters-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list search-devices-filter))
   aws-sdk/generator/shape::members))
(common-lisp:deftype search-devices-request-max-results-integer ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass search-devices-response common-lisp:nil
                       ((devices :initarg :devices :initform
                         (common-lisp:error ":devices is required") :type
                         (common-lisp:or device-summary-list common-lisp:null)
                         :accessor struct-shape-search-devices-response-devices
                         :shape "DeviceSummaryList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-search-devices-response-next-token :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-search-devices-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'search-devices-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'search-devices-response 'make-search-devices-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          search-devices-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          search-devices-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'devices))
      (common-lisp:list
       (common-lisp:cons "devices"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          search-devices-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass search-jobs-filter common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or string64 common-lisp:null) :accessor
                         struct-shape-search-jobs-filter-name :shape "String64"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (operator :initarg :operator :initform
                         (common-lisp:error ":operator is required") :type
                         (common-lisp:or search-jobs-filter-operator
                                         common-lisp:null)
                         :accessor struct-shape-search-jobs-filter-operator
                         :shape "SearchJobsFilterOperator" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (values :initarg :values :initform
                         (common-lisp:error ":values is required") :type
                         (common-lisp:or search-jobs-filter-values-list
                                         common-lisp:null)
                         :accessor struct-shape-search-jobs-filter-values
                         :shape "SearchJobsFilterValuesList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-search-jobs-filter
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'search-jobs-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'search-jobs-filter 'make-search-jobs-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input search-jobs-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input search-jobs-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operator))
      (common-lisp:list
       (common-lisp:cons "operator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input search-jobs-filter))
   common-lisp:nil))
(common-lisp:deftype search-jobs-filter-operator () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype search-jobs-filter-values-list ()
   '(trivial-types:proper-list string256))
 (common-lisp:defun make-search-jobs-filter-values-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string256))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass search-jobs-request common-lisp:nil
                       ((filters :initarg :filters :initform
                         (common-lisp:error ":filters is required") :type
                         (common-lisp:or search-jobs-request-filters-list
                                         common-lisp:null)
                         :accessor struct-shape-search-jobs-request-filters
                         :shape "SearchJobsRequestFiltersList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          search-jobs-request-max-results-integer
                          common-lisp:null)
                         :accessor struct-shape-search-jobs-request-max-results
                         :shape "SearchJobsRequestMaxResultsInteger" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-search-jobs-request-next-token :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-search-jobs-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'search-jobs-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'search-jobs-request 'make-search-jobs-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input search-jobs-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input search-jobs-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input search-jobs-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype search-jobs-request-filters-list ()
   '(trivial-types:proper-list search-jobs-filter))
 (common-lisp:defun make-search-jobs-request-filters-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list search-jobs-filter))
   aws-sdk/generator/shape::members))
(common-lisp:deftype search-jobs-request-max-results-integer ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass search-jobs-response common-lisp:nil
                       ((jobs :initarg :jobs :initform
                         (common-lisp:error ":jobs is required") :type
                         (common-lisp:or job-summary-list common-lisp:null)
                         :accessor struct-shape-search-jobs-response-jobs
                         :shape "JobSummaryList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-search-jobs-response-next-token :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-search-jobs-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'search-jobs-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'search-jobs-response 'make-search-jobs-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input search-jobs-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input search-jobs-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'jobs))
      (common-lisp:list
       (common-lisp:cons "jobs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input search-jobs-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass search-quantum-tasks-filter common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or string64 common-lisp:null) :accessor
                         struct-shape-search-quantum-tasks-filter-name :shape
                         "String64" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (operator :initarg :operator :initform
                         (common-lisp:error ":operator is required") :type
                         (common-lisp:or search-quantum-tasks-filter-operator
                                         common-lisp:null)
                         :accessor
                         struct-shape-search-quantum-tasks-filter-operator
                         :shape "SearchQuantumTasksFilterOperator" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (values :initarg :values :initform
                         (common-lisp:error ":values is required") :type
                         (common-lisp:or
                          search-quantum-tasks-filter-values-list
                          common-lisp:null)
                         :accessor
                         struct-shape-search-quantum-tasks-filter-values :shape
                         "SearchQuantumTasksFilterValuesList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-search-quantum-tasks-filter
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'search-quantum-tasks-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'search-quantum-tasks-filter
                    'make-search-quantum-tasks-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          search-quantum-tasks-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          search-quantum-tasks-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operator))
      (common-lisp:list
       (common-lisp:cons "operator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          search-quantum-tasks-filter))
   common-lisp:nil))
(common-lisp:deftype search-quantum-tasks-filter-operator ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype search-quantum-tasks-filter-values-list ()
   '(trivial-types:proper-list string256))
 (common-lisp:defun make-search-quantum-tasks-filter-values-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string256))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass search-quantum-tasks-request common-lisp:nil
                       ((filters :initarg :filters :initform
                         (common-lisp:error ":filters is required") :type
                         (common-lisp:or
                          search-quantum-tasks-request-filters-list
                          common-lisp:null)
                         :accessor
                         struct-shape-search-quantum-tasks-request-filters
                         :shape "SearchQuantumTasksRequestFiltersList"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          search-quantum-tasks-request-max-results-integer
                          common-lisp:null)
                         :accessor
                         struct-shape-search-quantum-tasks-request-max-results
                         :shape "SearchQuantumTasksRequestMaxResultsInteger"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-search-quantum-tasks-request-next-token
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-search-quantum-tasks-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'search-quantum-tasks-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'search-quantum-tasks-request
                    'make-search-quantum-tasks-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          search-quantum-tasks-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          search-quantum-tasks-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          search-quantum-tasks-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype search-quantum-tasks-request-filters-list ()
   '(trivial-types:proper-list search-quantum-tasks-filter))
 (common-lisp:defun make-search-quantum-tasks-request-filters-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            search-quantum-tasks-filter))
   aws-sdk/generator/shape::members))
(common-lisp:deftype search-quantum-tasks-request-max-results-integer ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass search-quantum-tasks-response common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-search-quantum-tasks-response-next-token
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (quantum-tasks :initarg :quantum-tasks :initform
                         (common-lisp:error ":quantumtasks is required") :type
                         (common-lisp:or quantum-task-summary-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-search-quantum-tasks-response-quantum-tasks
                         :shape "QuantumTaskSummaryList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-search-quantum-tasks-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'search-quantum-tasks-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'search-quantum-tasks-response
                    'make-search-quantum-tasks-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          search-quantum-tasks-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          search-quantum-tasks-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'quantum-tasks))
      (common-lisp:list
       (common-lisp:cons "quantumTasks"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          search-quantum-tasks-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition service-quota-exceeded-exception
     (braket-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       service-quota-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'service-quota-exceeded-exception
                    'service-quota-exceeded-exception-message)))
(common-lisp:deftype string () 'common-lisp:string)
(common-lisp:deftype string1024 () 'common-lisp:string)
(common-lisp:deftype string2048 () 'common-lisp:string)
(common-lisp:deftype string256 () 'common-lisp:string)
(common-lisp:deftype string4096 () 'common-lisp:string)
(common-lisp:deftype string64 () 'common-lisp:string)
(common-lisp:deftype synthetic-timestamp-date-time () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tag-keys () '(trivial-types:proper-list string))
 (common-lisp:defun make-tag-keys
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass tag-resource-request common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resourcearn is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-tag-resource-request-resource-arn :shape
                         "String" :location "uri" :location-name "resourceArn")
                        (tags :initarg :tags :initform
                         (common-lisp:error ":tags is required") :type
                         (common-lisp:or tags-map common-lisp:null) :accessor
                         struct-shape-tag-resource-request-tags :shape
                         "TagsMap" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tag-resource-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'tag-resource-request 'make-tag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass tag-resource-response common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tag-resource-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'tag-resource-response 'make-tag-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype tags-map () 'common-lisp:hash-table)
 (common-lisp:defun make-tags-map (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:define-condition throttling-exception
     (braket-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       throttling-exception-message)))
 (common-lisp:export
  (common-lisp:list 'throttling-exception 'throttling-exception-message)))
(common-lisp:progn
 (common-lisp:defclass untag-resource-request common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resourcearn is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-untag-resource-request-resource-arn
                         :shape "String" :location "uri" :location-name
                         "resourceArn")
                        (tag-keys :initarg :tag-keys :initform
                         (common-lisp:error ":tagkeys is required") :type
                         (common-lisp:or tag-keys common-lisp:null) :accessor
                         struct-shape-untag-resource-request-tag-keys :shape
                         "TagKeys" :location "querystring" :location-name
                         "tagKeys"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-untag-resource-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'untag-resource-request 'make-untag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass untag-resource-response common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-untag-resource-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'untag-resource-response 'make-untag-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   common-lisp:nil))
(common-lisp:deftype uri () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition validation-exception
     (braket-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       validation-exception-message)))
 (common-lisp:export
  (common-lisp:list 'validation-exception 'validation-exception-message)))
(common-lisp:progn
 (common-lisp:defun cancel-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job-arn)
   (common-lisp:declare (common-lisp:ignorable job-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-cancel-job-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'braket-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/job/~A/cancel"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'job-arn))))
                                                        "CancelJob"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'cancel-job))
(common-lisp:progn
 (common-lisp:defun cancel-quantum-task
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token quantum-task-arn)
   (common-lisp:declare (common-lisp:ignorable client-token quantum-task-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-cancel-quantum-task-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'braket-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/quantum-task/~A/cancel"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'quantum-task-arn))))
                                                        "CancelQuantumTask"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'cancel-quantum-task))
(common-lisp:progn
 (common-lisp:defun create-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key algorithm-specification associations
                     checkpoint-config client-token device-config
                     hyper-parameters input-data-config instance-config
                     job-name output-data-config role-arn stopping-condition
                     tags)
   (common-lisp:declare
    (common-lisp:ignorable algorithm-specification associations
     checkpoint-config client-token device-config hyper-parameters
     input-data-config instance-config job-name output-data-config role-arn
     stopping-condition tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-job-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'braket-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/job"
                                                        "CreateJob"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-job))
(common-lisp:progn
 (common-lisp:defun create-quantum-task
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key action associations client-token
                     device-arn device-parameters job-token output-s3bucket
                     output-s3key-prefix shots tags)
   (common-lisp:declare
    (common-lisp:ignorable action associations client-token device-arn
     device-parameters job-token output-s3bucket output-s3key-prefix shots
     tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-quantum-task-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'braket-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/quantum-task"
                                                        "CreateQuantumTask"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-quantum-task))
(common-lisp:progn
 (common-lisp:defun get-device
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key device-arn)
   (common-lisp:declare (common-lisp:ignorable device-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-device-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'braket-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/device/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'device-arn))))
                                                        "GetDevice"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-device))
(common-lisp:progn
 (common-lisp:defun get-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key additional-attribute-names job-arn)
   (common-lisp:declare
    (common-lisp:ignorable additional-attribute-names job-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-job-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'braket-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/job/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'job-arn))))
                                                        "GetJob"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-job))
(common-lisp:progn
 (common-lisp:defun get-quantum-task
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key additional-attribute-names
                     quantum-task-arn)
   (common-lisp:declare
    (common-lisp:ignorable additional-attribute-names quantum-task-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-quantum-task-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'braket-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/quantum-task/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'quantum-task-arn))))
                                                        "GetQuantumTask"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-quantum-task))
(common-lisp:progn
 (common-lisp:defun list-tags-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn)
   (common-lisp:declare (common-lisp:ignorable resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-for-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'braket-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "ListTagsForResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-tags-for-resource))
(common-lisp:progn
 (common-lisp:defun search-devices
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key filters max-results next-token)
   (common-lisp:declare (common-lisp:ignorable filters max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-search-devices-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'braket-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/devices"
                                                        "SearchDevices"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'search-devices))
(common-lisp:progn
 (common-lisp:defun search-jobs
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key filters max-results next-token)
   (common-lisp:declare (common-lisp:ignorable filters max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-search-jobs-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'braket-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/jobs"
                                                        "SearchJobs"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'search-jobs))
(common-lisp:progn
 (common-lisp:defun search-quantum-tasks
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key filters max-results next-token)
   (common-lisp:declare (common-lisp:ignorable filters max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-search-quantum-tasks-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'braket-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/quantum-tasks"
                                                        "SearchQuantumTasks"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'search-quantum-tasks))
(common-lisp:progn
 (common-lisp:defun tag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tags)
   (common-lisp:declare (common-lisp:ignorable resource-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'braket-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "TagResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'tag-resource))
(common-lisp:progn
 (common-lisp:defun untag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tag-keys)
   (common-lisp:declare (common-lisp:ignorable resource-arn tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'braket-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "UntagResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'untag-resource))
