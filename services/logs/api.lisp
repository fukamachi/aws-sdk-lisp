;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(uiop/package:define-package #:aws-sdk/services/logs/api (:use)
                             (:nicknames #:aws/logs)
                             (:import-from #:aws-sdk/generator/shape)
                             (:import-from #:aws-sdk/generator/operation)
                             (:import-from #:aws-sdk/api)
                             (:import-from #:aws-sdk/request)
                             (:import-from #:aws-sdk/json-request)
                             (:import-from #:aws-sdk/rest-json-request)
                             (:import-from #:aws-sdk/rest-xml-request)
                             (:import-from #:aws-sdk/query-request)
                             (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/logs/api)
(common-lisp:progn
 (common-lisp:define-condition logs-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'logs-error))
(common-lisp:progn
 (common-lisp:defclass logs-request (aws-sdk/json-request:json-request)
                       common-lisp:nil
                       (:default-initargs :service "logs" :api-version
                        "2014-03-28" :host-prefix "logs" :signing-name
                        common-lisp:nil :global-host common-lisp:nil
                        :target-prefix "Logs_20140328" :json-version "1.1"))
 (common-lisp:export 'logs-request))
(common-lisp:defvar *error-map*
  '(("AccessDeniedException" . access-denied-exception)
    ("ConflictException" . conflict-exception)
    ("DataAlreadyAcceptedException" . data-already-accepted-exception)
    ("InvalidOperationException" . invalid-operation-exception)
    ("InvalidParameterException" . invalid-parameter-exception)
    ("InvalidSequenceTokenException" . invalid-sequence-token-exception)
    ("LimitExceededException" . limit-exceeded-exception)
    ("MalformedQueryException" . malformed-query-exception)
    ("OperationAbortedException" . operation-aborted-exception)
    ("ResourceAlreadyExistsException" . resource-already-exists-exception)
    ("ResourceNotFoundException" . resource-not-found-exception)
    ("ServiceQuotaExceededException" . service-quota-exceeded-exception)
    ("ServiceUnavailableException" . service-unavailable-exception)
    ("SessionStreamingException" . session-streaming-exception)
    ("SessionTimeoutException" . session-timeout-exception)
    ("ThrottlingException" . throttling-exception)
    ("TooManyTagsException" . too-many-tags-exception)
    ("UnrecognizedClientException" . unrecognized-client-exception)
    ("ValidationException" . validation-exception)))
(common-lisp:progn
 (common-lisp:define-condition access-denied-exception
     (logs-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'access-denied-exception)))
(common-lisp:deftype access-policy () 'common-lisp:string)
(common-lisp:deftype account-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype account-ids () '(trivial-types:proper-list account-id))
 (common-lisp:defun make-account-ids
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list account-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype account-policies ()
   '(trivial-types:proper-list account-policy))
 (common-lisp:defun make-account-policies
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list account-policy))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass account-policy common-lisp:nil
                       ((policy-name :initarg :policy-name :initform
                         common-lisp:nil :type
                         (common-lisp:or policy-name common-lisp:null)
                         :accessor struct-shape-account-policy-policy-name
                         :shape "PolicyName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (policy-document :initarg :policy-document :initform
                         common-lisp:nil :type
                         (common-lisp:or account-policy-document
                                         common-lisp:null)
                         :accessor struct-shape-account-policy-policy-document
                         :shape "AccountPolicyDocument" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (last-updated-time :initarg :last-updated-time
                         :initform common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-account-policy-last-updated-time :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (policy-type :initarg :policy-type :initform
                         common-lisp:nil :type
                         (common-lisp:or policy-type common-lisp:null)
                         :accessor struct-shape-account-policy-policy-type
                         :shape "PolicyType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (scope :initarg :scope :initform common-lisp:nil :type
                         (common-lisp:or scope common-lisp:null) :accessor
                         struct-shape-account-policy-scope :shape "Scope"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (selection-criteria :initarg :selection-criteria
                         :initform common-lisp:nil :type
                         (common-lisp:or selection-criteria common-lisp:null)
                         :accessor
                         struct-shape-account-policy-selection-criteria :shape
                         "SelectionCriteria" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (account-id :initarg :account-id :initform
                         common-lisp:nil :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-account-policy-account-id :shape
                         "AccountId" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-account-policy
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'account-policy
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'account-policy 'make-account-policy))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input account-policy))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input account-policy))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-name))
      (common-lisp:list
       (common-lisp:cons "policyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-document))
      (common-lisp:list
       (common-lisp:cons "policyDocument"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-time))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-type))
      (common-lisp:list
       (common-lisp:cons "policyType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scope))
      (common-lisp:list
       (common-lisp:cons "scope"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'selection-criteria))
      (common-lisp:list
       (common-lisp:cons "selectionCriteria"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "accountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input account-policy))
   common-lisp:nil))
(common-lisp:deftype account-policy-document () 'common-lisp:string)
(common-lisp:deftype amazon-resource-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype anomalies () '(trivial-types:proper-list anomaly))
 (common-lisp:defun make-anomalies
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list anomaly))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass anomaly common-lisp:nil
                       ((anomaly-id :initarg :anomaly-id :initform
                         (common-lisp:error ":anomalyid is required") :type
                         (common-lisp:or anomaly-id common-lisp:null) :accessor
                         struct-shape-anomaly-anomaly-id :shape "AnomalyId"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (pattern-id :initarg :pattern-id :initform
                         (common-lisp:error ":patternid is required") :type
                         (common-lisp:or pattern-id common-lisp:null) :accessor
                         struct-shape-anomaly-pattern-id :shape "PatternId"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (anomaly-detector-arn :initarg :anomaly-detector-arn
                         :initform
                         (common-lisp:error ":anomalydetectorarn is required")
                         :type
                         (common-lisp:or anomaly-detector-arn common-lisp:null)
                         :accessor struct-shape-anomaly-anomaly-detector-arn
                         :shape "AnomalyDetectorArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (pattern-string :initarg :pattern-string :initform
                         (common-lisp:error ":patternstring is required") :type
                         (common-lisp:or pattern-string common-lisp:null)
                         :accessor struct-shape-anomaly-pattern-string :shape
                         "PatternString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (pattern-regex :initarg :pattern-regex :initform
                         common-lisp:nil :type
                         (common-lisp:or pattern-regex common-lisp:null)
                         :accessor struct-shape-anomaly-pattern-regex :shape
                         "PatternRegex" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (priority :initarg :priority :initform common-lisp:nil
                         :type (common-lisp:or priority common-lisp:null)
                         :accessor struct-shape-anomaly-priority :shape
                         "Priority" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (first-seen :initarg :first-seen :initform
                         (common-lisp:error ":firstseen is required") :type
                         (common-lisp:or epoch-millis common-lisp:null)
                         :accessor struct-shape-anomaly-first-seen :shape
                         "EpochMillis" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (last-seen :initarg :last-seen :initform
                         (common-lisp:error ":lastseen is required") :type
                         (common-lisp:or epoch-millis common-lisp:null)
                         :accessor struct-shape-anomaly-last-seen :shape
                         "EpochMillis" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (description :initarg :description :initform
                         (common-lisp:error ":description is required") :type
                         (common-lisp:or description common-lisp:null)
                         :accessor struct-shape-anomaly-description :shape
                         "Description" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (active :initarg :active :initform
                         (common-lisp:error ":active is required") :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-anomaly-active :shape "Boolean" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (state :initarg :state :initform
                         (common-lisp:error ":state is required") :type
                         (common-lisp:or state common-lisp:null) :accessor
                         struct-shape-anomaly-state :shape "State" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (histogram :initarg :histogram :initform
                         (common-lisp:error ":histogram is required") :type
                         (common-lisp:or histogram common-lisp:null) :accessor
                         struct-shape-anomaly-histogram :shape "Histogram"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (log-samples :initarg :log-samples :initform
                         (common-lisp:error ":logsamples is required") :type
                         (common-lisp:or log-samples common-lisp:null)
                         :accessor struct-shape-anomaly-log-samples :shape
                         "LogSamples" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (pattern-tokens :initarg :pattern-tokens :initform
                         (common-lisp:error ":patterntokens is required") :type
                         (common-lisp:or pattern-tokens common-lisp:null)
                         :accessor struct-shape-anomaly-pattern-tokens :shape
                         "PatternTokens" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (log-group-arn-list :initarg :log-group-arn-list
                         :initform
                         (common-lisp:error ":loggrouparnlist is required")
                         :type
                         (common-lisp:or log-group-arn-list common-lisp:null)
                         :accessor struct-shape-anomaly-log-group-arn-list
                         :shape "LogGroupArnList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (suppressed :initarg :suppressed :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-anomaly-suppressed :shape "Boolean"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (suppressed-date :initarg :suppressed-date :initform
                         common-lisp:nil :type
                         (common-lisp:or epoch-millis common-lisp:null)
                         :accessor struct-shape-anomaly-suppressed-date :shape
                         "EpochMillis" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (suppressed-until :initarg :suppressed-until :initform
                         common-lisp:nil :type
                         (common-lisp:or epoch-millis common-lisp:null)
                         :accessor struct-shape-anomaly-suppressed-until :shape
                         "EpochMillis" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (is-pattern-level-suppression :initarg
                         :is-pattern-level-suppression :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-anomaly-is-pattern-level-suppression
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-anomaly
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'anomaly
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'anomaly 'make-anomaly))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input anomaly))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input anomaly))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'anomaly-id))
      (common-lisp:list
       (common-lisp:cons "anomalyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pattern-id))
      (common-lisp:list
       (common-lisp:cons "patternId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'anomaly-detector-arn))
      (common-lisp:list
       (common-lisp:cons "anomalyDetectorArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pattern-string))
      (common-lisp:list
       (common-lisp:cons "patternString"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pattern-regex))
      (common-lisp:list
       (common-lisp:cons "patternRegex"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'priority))
      (common-lisp:list
       (common-lisp:cons "priority"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'first-seen))
      (common-lisp:list
       (common-lisp:cons "firstSeen"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-seen))
      (common-lisp:list
       (common-lisp:cons "lastSeen"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'active))
      (common-lisp:list
       (common-lisp:cons "active"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "state"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'histogram))
      (common-lisp:list
       (common-lisp:cons "histogram"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-samples))
      (common-lisp:list
       (common-lisp:cons "logSamples"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pattern-tokens))
      (common-lisp:list
       (common-lisp:cons "patternTokens"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-group-arn-list))
      (common-lisp:list
       (common-lisp:cons "logGroupArnList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'suppressed))
      (common-lisp:list
       (common-lisp:cons "suppressed"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'suppressed-date))
      (common-lisp:list
       (common-lisp:cons "suppressedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'suppressed-until))
      (common-lisp:list
       (common-lisp:cons "suppressedUntil"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'is-pattern-level-suppression))
      (common-lisp:list
       (common-lisp:cons "isPatternLevelSuppression"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input anomaly))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass anomaly-detector common-lisp:nil
                       ((anomaly-detector-arn :initarg :anomaly-detector-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or anomaly-detector-arn common-lisp:null)
                         :accessor
                         struct-shape-anomaly-detector-anomaly-detector-arn
                         :shape "AnomalyDetectorArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (detector-name :initarg :detector-name :initform
                         common-lisp:nil :type
                         (common-lisp:or detector-name common-lisp:null)
                         :accessor struct-shape-anomaly-detector-detector-name
                         :shape "DetectorName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (log-group-arn-list :initarg :log-group-arn-list
                         :initform common-lisp:nil :type
                         (common-lisp:or log-group-arn-list common-lisp:null)
                         :accessor
                         struct-shape-anomaly-detector-log-group-arn-list
                         :shape "LogGroupArnList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (evaluation-frequency :initarg :evaluation-frequency
                         :initform common-lisp:nil :type
                         (common-lisp:or evaluation-frequency common-lisp:null)
                         :accessor
                         struct-shape-anomaly-detector-evaluation-frequency
                         :shape "EvaluationFrequency" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (filter-pattern :initarg :filter-pattern :initform
                         common-lisp:nil :type
                         (common-lisp:or filter-pattern common-lisp:null)
                         :accessor struct-shape-anomaly-detector-filter-pattern
                         :shape "FilterPattern" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (anomaly-detector-status :initarg
                         :anomaly-detector-status :initform common-lisp:nil
                         :type
                         (common-lisp:or anomaly-detector-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-anomaly-detector-anomaly-detector-status
                         :shape "AnomalyDetectorStatus" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (kms-key-id :initarg :kms-key-id :initform
                         common-lisp:nil :type
                         (common-lisp:or kms-key-id common-lisp:null) :accessor
                         struct-shape-anomaly-detector-kms-key-id :shape
                         "KmsKeyId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (creation-time-stamp :initarg :creation-time-stamp
                         :initform common-lisp:nil :type
                         (common-lisp:or epoch-millis common-lisp:null)
                         :accessor
                         struct-shape-anomaly-detector-creation-time-stamp
                         :shape "EpochMillis" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-modified-time-stamp :initarg
                         :last-modified-time-stamp :initform common-lisp:nil
                         :type (common-lisp:or epoch-millis common-lisp:null)
                         :accessor
                         struct-shape-anomaly-detector-last-modified-time-stamp
                         :shape "EpochMillis" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (anomaly-visibility-time :initarg
                         :anomaly-visibility-time :initform common-lisp:nil
                         :type
                         (common-lisp:or anomaly-visibility-time
                                         common-lisp:null)
                         :accessor
                         struct-shape-anomaly-detector-anomaly-visibility-time
                         :shape "AnomalyVisibilityTime" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-anomaly-detector
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'anomaly-detector
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'anomaly-detector 'make-anomaly-detector))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input anomaly-detector))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input anomaly-detector))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'anomaly-detector-arn))
      (common-lisp:list
       (common-lisp:cons "anomalyDetectorArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'detector-name))
      (common-lisp:list
       (common-lisp:cons "detectorName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-group-arn-list))
      (common-lisp:list
       (common-lisp:cons "logGroupArnList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'evaluation-frequency))
      (common-lisp:list
       (common-lisp:cons "evaluationFrequency"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter-pattern))
      (common-lisp:list
       (common-lisp:cons "filterPattern"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'anomaly-detector-status))
      (common-lisp:list
       (common-lisp:cons "anomalyDetectorStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "kmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time-stamp))
      (common-lisp:list
       (common-lisp:cons "creationTimeStamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-modified-time-stamp))
      (common-lisp:list
       (common-lisp:cons "lastModifiedTimeStamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'anomaly-visibility-time))
      (common-lisp:list
       (common-lisp:cons "anomalyVisibilityTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input anomaly-detector))
   common-lisp:nil))
(common-lisp:deftype anomaly-detector-arn () 'common-lisp:string)
(common-lisp:deftype anomaly-detector-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype anomaly-detectors ()
   '(trivial-types:proper-list anomaly-detector))
 (common-lisp:defun make-anomaly-detectors
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list anomaly-detector))
   aws-sdk/generator/shape::members))
(common-lisp:deftype anomaly-id () 'common-lisp:string)
(common-lisp:deftype anomaly-visibility-time () 'common-lisp:integer)
(common-lisp:deftype arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass associate-kms-key-request common-lisp:nil
                       ((log-group-name :initarg :log-group-name :initform
                         common-lisp:nil :type
                         (common-lisp:or log-group-name common-lisp:null)
                         :accessor
                         struct-shape-associate-kms-key-request-log-group-name
                         :shape "LogGroupName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (kms-key-id :initarg :kms-key-id :initform
                         (common-lisp:error ":kmskeyid is required") :type
                         (common-lisp:or kms-key-id common-lisp:null) :accessor
                         struct-shape-associate-kms-key-request-kms-key-id
                         :shape "KmsKeyId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (resource-identifier :initarg :resource-identifier
                         :initform common-lisp:nil :type
                         (common-lisp:or resource-identifier common-lisp:null)
                         :accessor
                         struct-shape-associate-kms-key-request-resource-identifier
                         :shape "ResourceIdentifier" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-associate-kms-key-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'associate-kms-key-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'associate-kms-key-request
                    'make-associate-kms-key-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-kms-key-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-kms-key-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-group-name))
      (common-lisp:list
       (common-lisp:cons "logGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "kmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-identifier))
      (common-lisp:list
       (common-lisp:cons "resourceIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-kms-key-request))
   common-lisp:nil))
(common-lisp:deftype boolean () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defclass cancel-export-task-request common-lisp:nil
                       ((task-id :initarg :task-id :initform
                         (common-lisp:error ":taskid is required") :type
                         (common-lisp:or export-task-id common-lisp:null)
                         :accessor
                         struct-shape-cancel-export-task-request-task-id :shape
                         "ExportTaskId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-cancel-export-task-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'cancel-export-task-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'cancel-export-task-request
                    'make-cancel-export-task-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cancel-export-task-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cancel-export-task-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-id))
      (common-lisp:list
       (common-lisp:cons "taskId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cancel-export-task-request))
   common-lisp:nil))
(common-lisp:deftype client-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition conflict-exception
     (logs-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'conflict-exception)))
(common-lisp:deftype count () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass create-delivery-request common-lisp:nil
                       ((delivery-source-name :initarg :delivery-source-name
                         :initform
                         (common-lisp:error ":deliverysourcename is required")
                         :type
                         (common-lisp:or delivery-source-name common-lisp:null)
                         :accessor
                         struct-shape-create-delivery-request-delivery-source-name
                         :shape "DeliverySourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (delivery-destination-arn :initarg
                         :delivery-destination-arn :initform
                         (common-lisp:error
                          ":deliverydestinationarn is required")
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-create-delivery-request-delivery-destination-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         struct-shape-create-delivery-request-tags :shape
                         "Tags" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-delivery-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-delivery-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-delivery-request 'make-create-delivery-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-delivery-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-delivery-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'delivery-source-name))
      (common-lisp:list
       (common-lisp:cons "deliverySourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'delivery-destination-arn))
      (common-lisp:list
       (common-lisp:cons "deliveryDestinationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-delivery-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-delivery-response common-lisp:nil
                       ((delivery :initarg :delivery :initform common-lisp:nil
                         :type (common-lisp:or delivery common-lisp:null)
                         :accessor
                         struct-shape-create-delivery-response-delivery :shape
                         "Delivery" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-delivery-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-delivery-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-delivery-response 'make-create-delivery-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-delivery-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-delivery-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'delivery))
      (common-lisp:list
       (common-lisp:cons "delivery"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-delivery-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-export-task-request common-lisp:nil
                       ((task-name :initarg :task-name :initform
                         common-lisp:nil :type
                         (common-lisp:or export-task-name common-lisp:null)
                         :accessor
                         struct-shape-create-export-task-request-task-name
                         :shape "ExportTaskName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (log-group-name :initarg :log-group-name :initform
                         (common-lisp:error ":loggroupname is required") :type
                         (common-lisp:or log-group-name common-lisp:null)
                         :accessor
                         struct-shape-create-export-task-request-log-group-name
                         :shape "LogGroupName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (log-stream-name-prefix :initarg
                         :log-stream-name-prefix :initform common-lisp:nil
                         :type
                         (common-lisp:or log-stream-name common-lisp:null)
                         :accessor
                         struct-shape-create-export-task-request-log-stream-name-prefix
                         :shape "LogStreamName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (from :initarg :from :initform
                         (common-lisp:error ":from is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-create-export-task-request-from :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (to :initarg :to :initform
                         (common-lisp:error ":to is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-create-export-task-request-to :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (destination :initarg :destination :initform
                         (common-lisp:error ":destination is required") :type
                         (common-lisp:or export-destination-bucket
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-export-task-request-destination
                         :shape "ExportDestinationBucket" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (destination-prefix :initarg :destination-prefix
                         :initform common-lisp:nil :type
                         (common-lisp:or export-destination-prefix
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-export-task-request-destination-prefix
                         :shape "ExportDestinationPrefix" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-export-task-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-export-task-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-export-task-request
                    'make-create-export-task-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-export-task-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-export-task-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-name))
      (common-lisp:list
       (common-lisp:cons "taskName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-group-name))
      (common-lisp:list
       (common-lisp:cons "logGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'log-stream-name-prefix))
      (common-lisp:list
       (common-lisp:cons "logStreamNamePrefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'from))
      (common-lisp:list
       (common-lisp:cons "from"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'to))
      (common-lisp:list
       (common-lisp:cons "to"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination))
      (common-lisp:list
       (common-lisp:cons "destination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination-prefix))
      (common-lisp:list
       (common-lisp:cons "destinationPrefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-export-task-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-export-task-response common-lisp:nil
                       ((task-id :initarg :task-id :initform common-lisp:nil
                         :type (common-lisp:or export-task-id common-lisp:null)
                         :accessor
                         struct-shape-create-export-task-response-task-id
                         :shape "ExportTaskId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-export-task-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-export-task-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-export-task-response
                    'make-create-export-task-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-export-task-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-export-task-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-id))
      (common-lisp:list
       (common-lisp:cons "taskId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-export-task-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-log-anomaly-detector-request common-lisp:nil
                       ((log-group-arn-list :initarg :log-group-arn-list
                         :initform
                         (common-lisp:error ":loggrouparnlist is required")
                         :type
                         (common-lisp:or log-group-arn-list common-lisp:null)
                         :accessor
                         struct-shape-create-log-anomaly-detector-request-log-group-arn-list
                         :shape "LogGroupArnList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (detector-name :initarg :detector-name :initform
                         common-lisp:nil :type
                         (common-lisp:or detector-name common-lisp:null)
                         :accessor
                         struct-shape-create-log-anomaly-detector-request-detector-name
                         :shape "DetectorName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (evaluation-frequency :initarg :evaluation-frequency
                         :initform common-lisp:nil :type
                         (common-lisp:or evaluation-frequency common-lisp:null)
                         :accessor
                         struct-shape-create-log-anomaly-detector-request-evaluation-frequency
                         :shape "EvaluationFrequency" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (filter-pattern :initarg :filter-pattern :initform
                         common-lisp:nil :type
                         (common-lisp:or filter-pattern common-lisp:null)
                         :accessor
                         struct-shape-create-log-anomaly-detector-request-filter-pattern
                         :shape "FilterPattern" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (kms-key-id :initarg :kms-key-id :initform
                         common-lisp:nil :type
                         (common-lisp:or kms-key-id common-lisp:null) :accessor
                         struct-shape-create-log-anomaly-detector-request-kms-key-id
                         :shape "KmsKeyId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (anomaly-visibility-time :initarg
                         :anomaly-visibility-time :initform common-lisp:nil
                         :type
                         (common-lisp:or anomaly-visibility-time
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-log-anomaly-detector-request-anomaly-visibility-time
                         :shape "AnomalyVisibilityTime" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         struct-shape-create-log-anomaly-detector-request-tags
                         :shape "Tags" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-log-anomaly-detector-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-log-anomaly-detector-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-log-anomaly-detector-request
                    'make-create-log-anomaly-detector-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-log-anomaly-detector-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-log-anomaly-detector-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-group-arn-list))
      (common-lisp:list
       (common-lisp:cons "logGroupArnList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'detector-name))
      (common-lisp:list
       (common-lisp:cons "detectorName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'evaluation-frequency))
      (common-lisp:list
       (common-lisp:cons "evaluationFrequency"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter-pattern))
      (common-lisp:list
       (common-lisp:cons "filterPattern"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "kmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'anomaly-visibility-time))
      (common-lisp:list
       (common-lisp:cons "anomalyVisibilityTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-log-anomaly-detector-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-log-anomaly-detector-response common-lisp:nil
                       ((anomaly-detector-arn :initarg :anomaly-detector-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or anomaly-detector-arn common-lisp:null)
                         :accessor
                         struct-shape-create-log-anomaly-detector-response-anomaly-detector-arn
                         :shape "AnomalyDetectorArn" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-log-anomaly-detector-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-log-anomaly-detector-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-log-anomaly-detector-response
                    'make-create-log-anomaly-detector-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-log-anomaly-detector-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-log-anomaly-detector-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'anomaly-detector-arn))
      (common-lisp:list
       (common-lisp:cons "anomalyDetectorArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-log-anomaly-detector-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-log-group-request common-lisp:nil
                       ((log-group-name :initarg :log-group-name :initform
                         (common-lisp:error ":loggroupname is required") :type
                         (common-lisp:or log-group-name common-lisp:null)
                         :accessor
                         struct-shape-create-log-group-request-log-group-name
                         :shape "LogGroupName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (kms-key-id :initarg :kms-key-id :initform
                         common-lisp:nil :type
                         (common-lisp:or kms-key-id common-lisp:null) :accessor
                         struct-shape-create-log-group-request-kms-key-id
                         :shape "KmsKeyId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         struct-shape-create-log-group-request-tags :shape
                         "Tags" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (log-group-class :initarg :log-group-class :initform
                         common-lisp:nil :type
                         (common-lisp:or log-group-class common-lisp:null)
                         :accessor
                         struct-shape-create-log-group-request-log-group-class
                         :shape "LogGroupClass" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-log-group-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-log-group-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-log-group-request 'make-create-log-group-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-log-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-log-group-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-group-name))
      (common-lisp:list
       (common-lisp:cons "logGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "kmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-group-class))
      (common-lisp:list
       (common-lisp:cons "logGroupClass"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-log-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-log-stream-request common-lisp:nil
                       ((log-group-name :initarg :log-group-name :initform
                         (common-lisp:error ":loggroupname is required") :type
                         (common-lisp:or log-group-name common-lisp:null)
                         :accessor
                         struct-shape-create-log-stream-request-log-group-name
                         :shape "LogGroupName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (log-stream-name :initarg :log-stream-name :initform
                         (common-lisp:error ":logstreamname is required") :type
                         (common-lisp:or log-stream-name common-lisp:null)
                         :accessor
                         struct-shape-create-log-stream-request-log-stream-name
                         :shape "LogStreamName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-log-stream-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-log-stream-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-log-stream-request
                    'make-create-log-stream-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-log-stream-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-log-stream-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-group-name))
      (common-lisp:list
       (common-lisp:cons "logGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-stream-name))
      (common-lisp:list
       (common-lisp:cons "logStreamName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-log-stream-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition data-already-accepted-exception
     (logs-error)
     ((expected-sequence-token :initarg :expected-sequence-token :initform
       common-lisp:nil :reader
       data-already-accepted-exception-expected-sequence-token)))
 (common-lisp:export
  (common-lisp:list 'data-already-accepted-exception
                    'data-already-accepted-exception-expected-sequence-token)))
(common-lisp:deftype data-protection-policy-document () 'common-lisp:string)
(common-lisp:deftype data-protection-status () 'common-lisp:string)
(common-lisp:deftype days () 'common-lisp:integer)
(common-lisp:deftype default-value () 'common-lisp:double-float)
(common-lisp:progn
 (common-lisp:defclass delete-account-policy-request common-lisp:nil
                       ((policy-name :initarg :policy-name :initform
                         (common-lisp:error ":policyname is required") :type
                         (common-lisp:or policy-name common-lisp:null)
                         :accessor
                         struct-shape-delete-account-policy-request-policy-name
                         :shape "PolicyName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (policy-type :initarg :policy-type :initform
                         (common-lisp:error ":policytype is required") :type
                         (common-lisp:or policy-type common-lisp:null)
                         :accessor
                         struct-shape-delete-account-policy-request-policy-type
                         :shape "PolicyType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-account-policy-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-account-policy-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-account-policy-request
                    'make-delete-account-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-account-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-account-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-name))
      (common-lisp:list
       (common-lisp:cons "policyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-type))
      (common-lisp:list
       (common-lisp:cons "policyType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-account-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-data-protection-policy-request common-lisp:nil
                       ((log-group-identifier :initarg :log-group-identifier
                         :initform
                         (common-lisp:error ":loggroupidentifier is required")
                         :type
                         (common-lisp:or log-group-identifier common-lisp:null)
                         :accessor
                         struct-shape-delete-data-protection-policy-request-log-group-identifier
                         :shape "LogGroupIdentifier" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-data-protection-policy-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-data-protection-policy-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-data-protection-policy-request
                    'make-delete-data-protection-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-data-protection-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-data-protection-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'log-group-identifier))
      (common-lisp:list
       (common-lisp:cons "logGroupIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-data-protection-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-delivery-destination-policy-request
                       common-lisp:nil
                       ((delivery-destination-name :initarg
                         :delivery-destination-name :initform
                         (common-lisp:error
                          ":deliverydestinationname is required")
                         :type
                         (common-lisp:or delivery-destination-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-delete-delivery-destination-policy-request-delivery-destination-name
                         :shape "DeliveryDestinationName" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-delivery-destination-policy-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-delivery-destination-policy-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-delivery-destination-policy-request
                    'make-delete-delivery-destination-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-delivery-destination-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-delivery-destination-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'delivery-destination-name))
      (common-lisp:list
       (common-lisp:cons "deliveryDestinationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-delivery-destination-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-delivery-destination-request common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or delivery-destination-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-delete-delivery-destination-request-name
                         :shape "DeliveryDestinationName" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-delivery-destination-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-delivery-destination-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-delivery-destination-request
                    'make-delete-delivery-destination-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-delivery-destination-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-delivery-destination-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-delivery-destination-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-delivery-request common-lisp:nil
                       ((id :initarg :id :initform
                         (common-lisp:error ":id is required") :type
                         (common-lisp:or delivery-id common-lisp:null)
                         :accessor struct-shape-delete-delivery-request-id
                         :shape "DeliveryId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-delivery-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-delivery-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-delivery-request 'make-delete-delivery-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-delivery-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-delivery-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-delivery-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-delivery-source-request common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or delivery-source-name common-lisp:null)
                         :accessor
                         struct-shape-delete-delivery-source-request-name
                         :shape "DeliverySourceName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-delivery-source-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-delivery-source-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-delivery-source-request
                    'make-delete-delivery-source-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-delivery-source-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-delivery-source-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-delivery-source-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-destination-request common-lisp:nil
                       ((destination-name :initarg :destination-name :initform
                         (common-lisp:error ":destinationname is required")
                         :type
                         (common-lisp:or destination-name common-lisp:null)
                         :accessor
                         struct-shape-delete-destination-request-destination-name
                         :shape "DestinationName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-destination-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-destination-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-destination-request
                    'make-delete-destination-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-destination-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-destination-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination-name))
      (common-lisp:list
       (common-lisp:cons "destinationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-destination-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-log-anomaly-detector-request common-lisp:nil
                       ((anomaly-detector-arn :initarg :anomaly-detector-arn
                         :initform
                         (common-lisp:error ":anomalydetectorarn is required")
                         :type
                         (common-lisp:or anomaly-detector-arn common-lisp:null)
                         :accessor
                         struct-shape-delete-log-anomaly-detector-request-anomaly-detector-arn
                         :shape "AnomalyDetectorArn" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-log-anomaly-detector-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-log-anomaly-detector-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-log-anomaly-detector-request
                    'make-delete-log-anomaly-detector-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-log-anomaly-detector-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-log-anomaly-detector-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'anomaly-detector-arn))
      (common-lisp:list
       (common-lisp:cons "anomalyDetectorArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-log-anomaly-detector-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-log-group-request common-lisp:nil
                       ((log-group-name :initarg :log-group-name :initform
                         (common-lisp:error ":loggroupname is required") :type
                         (common-lisp:or log-group-name common-lisp:null)
                         :accessor
                         struct-shape-delete-log-group-request-log-group-name
                         :shape "LogGroupName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-log-group-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-log-group-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-log-group-request 'make-delete-log-group-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-log-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-log-group-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-group-name))
      (common-lisp:list
       (common-lisp:cons "logGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-log-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-log-stream-request common-lisp:nil
                       ((log-group-name :initarg :log-group-name :initform
                         (common-lisp:error ":loggroupname is required") :type
                         (common-lisp:or log-group-name common-lisp:null)
                         :accessor
                         struct-shape-delete-log-stream-request-log-group-name
                         :shape "LogGroupName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (log-stream-name :initarg :log-stream-name :initform
                         (common-lisp:error ":logstreamname is required") :type
                         (common-lisp:or log-stream-name common-lisp:null)
                         :accessor
                         struct-shape-delete-log-stream-request-log-stream-name
                         :shape "LogStreamName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-log-stream-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-log-stream-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-log-stream-request
                    'make-delete-log-stream-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-log-stream-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-log-stream-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-group-name))
      (common-lisp:list
       (common-lisp:cons "logGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-stream-name))
      (common-lisp:list
       (common-lisp:cons "logStreamName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-log-stream-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-metric-filter-request common-lisp:nil
                       ((log-group-name :initarg :log-group-name :initform
                         (common-lisp:error ":loggroupname is required") :type
                         (common-lisp:or log-group-name common-lisp:null)
                         :accessor
                         struct-shape-delete-metric-filter-request-log-group-name
                         :shape "LogGroupName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (filter-name :initarg :filter-name :initform
                         (common-lisp:error ":filtername is required") :type
                         (common-lisp:or filter-name common-lisp:null)
                         :accessor
                         struct-shape-delete-metric-filter-request-filter-name
                         :shape "FilterName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-metric-filter-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-metric-filter-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-metric-filter-request
                    'make-delete-metric-filter-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-metric-filter-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-metric-filter-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-group-name))
      (common-lisp:list
       (common-lisp:cons "logGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter-name))
      (common-lisp:list
       (common-lisp:cons "filterName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-metric-filter-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-query-definition-request common-lisp:nil
                       ((query-definition-id :initarg :query-definition-id
                         :initform
                         (common-lisp:error ":querydefinitionid is required")
                         :type (common-lisp:or query-id common-lisp:null)
                         :accessor
                         struct-shape-delete-query-definition-request-query-definition-id
                         :shape "QueryId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-query-definition-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-query-definition-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-query-definition-request
                    'make-delete-query-definition-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-query-definition-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-query-definition-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-definition-id))
      (common-lisp:list
       (common-lisp:cons "queryDefinitionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-query-definition-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-query-definition-response common-lisp:nil
                       ((success :initarg :success :initform common-lisp:nil
                         :type (common-lisp:or success common-lisp:null)
                         :accessor
                         struct-shape-delete-query-definition-response-success
                         :shape "Success" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-query-definition-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-query-definition-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-query-definition-response
                    'make-delete-query-definition-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-query-definition-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-query-definition-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'success))
      (common-lisp:list
       (common-lisp:cons "success"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-query-definition-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-resource-policy-request common-lisp:nil
                       ((policy-name :initarg :policy-name :initform
                         common-lisp:nil :type
                         (common-lisp:or policy-name common-lisp:null)
                         :accessor
                         struct-shape-delete-resource-policy-request-policy-name
                         :shape "PolicyName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-resource-policy-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-resource-policy-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-resource-policy-request
                    'make-delete-resource-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-resource-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-resource-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-name))
      (common-lisp:list
       (common-lisp:cons "policyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-resource-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-retention-policy-request common-lisp:nil
                       ((log-group-name :initarg :log-group-name :initform
                         (common-lisp:error ":loggroupname is required") :type
                         (common-lisp:or log-group-name common-lisp:null)
                         :accessor
                         struct-shape-delete-retention-policy-request-log-group-name
                         :shape "LogGroupName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-retention-policy-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-retention-policy-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-retention-policy-request
                    'make-delete-retention-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-retention-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-retention-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-group-name))
      (common-lisp:list
       (common-lisp:cons "logGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-retention-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-subscription-filter-request common-lisp:nil
                       ((log-group-name :initarg :log-group-name :initform
                         (common-lisp:error ":loggroupname is required") :type
                         (common-lisp:or log-group-name common-lisp:null)
                         :accessor
                         struct-shape-delete-subscription-filter-request-log-group-name
                         :shape "LogGroupName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (filter-name :initarg :filter-name :initform
                         (common-lisp:error ":filtername is required") :type
                         (common-lisp:or filter-name common-lisp:null)
                         :accessor
                         struct-shape-delete-subscription-filter-request-filter-name
                         :shape "FilterName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-subscription-filter-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-subscription-filter-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-subscription-filter-request
                    'make-delete-subscription-filter-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-subscription-filter-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-subscription-filter-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-group-name))
      (common-lisp:list
       (common-lisp:cons "logGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter-name))
      (common-lisp:list
       (common-lisp:cons "filterName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-subscription-filter-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype deliveries () '(trivial-types:proper-list delivery))
 (common-lisp:defun make-deliveries
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list delivery))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass delivery common-lisp:nil
                       ((id :initarg :id :initform common-lisp:nil :type
                         (common-lisp:or delivery-id common-lisp:null)
                         :accessor struct-shape-delivery-id :shape "DeliveryId"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-delivery-arn :shape "Arn" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (delivery-source-name :initarg :delivery-source-name
                         :initform common-lisp:nil :type
                         (common-lisp:or delivery-source-name common-lisp:null)
                         :accessor struct-shape-delivery-delivery-source-name
                         :shape "DeliverySourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (delivery-destination-arn :initarg
                         :delivery-destination-arn :initform common-lisp:nil
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-delivery-delivery-destination-arn :shape
                         "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (delivery-destination-type :initarg
                         :delivery-destination-type :initform common-lisp:nil
                         :type
                         (common-lisp:or delivery-destination-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-delivery-delivery-destination-type :shape
                         "DeliveryDestinationType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         struct-shape-delivery-tags :shape "Tags" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delivery
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delivery
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'delivery 'make-delivery))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delivery))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delivery))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'delivery-source-name))
      (common-lisp:list
       (common-lisp:cons "deliverySourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'delivery-destination-arn))
      (common-lisp:list
       (common-lisp:cons "deliveryDestinationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'delivery-destination-type))
      (common-lisp:list
       (common-lisp:cons "deliveryDestinationType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delivery))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delivery-destination common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or delivery-destination-name
                                         common-lisp:null)
                         :accessor struct-shape-delivery-destination-name
                         :shape "DeliveryDestinationName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-delivery-destination-arn :shape "Arn"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (delivery-destination-type :initarg
                         :delivery-destination-type :initform common-lisp:nil
                         :type
                         (common-lisp:or delivery-destination-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-delivery-destination-delivery-destination-type
                         :shape "DeliveryDestinationType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (output-format :initarg :output-format :initform
                         common-lisp:nil :type
                         (common-lisp:or output-format common-lisp:null)
                         :accessor
                         struct-shape-delivery-destination-output-format :shape
                         "OutputFormat" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (delivery-destination-configuration :initarg
                         :delivery-destination-configuration :initform
                         common-lisp:nil :type
                         (common-lisp:or delivery-destination-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-delivery-destination-delivery-destination-configuration
                         :shape "DeliveryDestinationConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         struct-shape-delivery-destination-tags :shape "Tags"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delivery-destination
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delivery-destination
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delivery-destination 'make-delivery-destination))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delivery-destination))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delivery-destination))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'delivery-destination-type))
      (common-lisp:list
       (common-lisp:cons "deliveryDestinationType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-format))
      (common-lisp:list
       (common-lisp:cons "outputFormat"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'delivery-destination-configuration))
      (common-lisp:list
       (common-lisp:cons "deliveryDestinationConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delivery-destination))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delivery-destination-configuration common-lisp:nil
                       ((destination-resource-arn :initarg
                         :destination-resource-arn :initform
                         (common-lisp:error
                          ":destinationresourcearn is required")
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-delivery-destination-configuration-destination-resource-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delivery-destination-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delivery-destination-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delivery-destination-configuration
                    'make-delivery-destination-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delivery-destination-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delivery-destination-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'destination-resource-arn))
      (common-lisp:list
       (common-lisp:cons "destinationResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delivery-destination-configuration))
   common-lisp:nil))
(common-lisp:deftype delivery-destination-name () 'common-lisp:string)
(common-lisp:deftype delivery-destination-policy () 'common-lisp:string)
(common-lisp:deftype delivery-destination-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype delivery-destinations ()
   '(trivial-types:proper-list delivery-destination))
 (common-lisp:defun make-delivery-destinations
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list delivery-destination))
   aws-sdk/generator/shape::members))
(common-lisp:deftype delivery-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass delivery-source common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or delivery-source-name common-lisp:null)
                         :accessor struct-shape-delivery-source-name :shape
                         "DeliverySourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-delivery-source-arn :shape "Arn"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (resource-arns :initarg :resource-arns :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-arns common-lisp:null)
                         :accessor struct-shape-delivery-source-resource-arns
                         :shape "ResourceArns" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (service :initarg :service :initform common-lisp:nil
                         :type (common-lisp:or service common-lisp:null)
                         :accessor struct-shape-delivery-source-service :shape
                         "Service" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (log-type :initarg :log-type :initform common-lisp:nil
                         :type (common-lisp:or log-type common-lisp:null)
                         :accessor struct-shape-delivery-source-log-type :shape
                         "LogType" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         struct-shape-delivery-source-tags :shape "Tags"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delivery-source
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delivery-source
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'delivery-source 'make-delivery-source))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delivery-source))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delivery-source))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arns))
      (common-lisp:list
       (common-lisp:cons "resourceArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service))
      (common-lisp:list
       (common-lisp:cons "service"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-type))
      (common-lisp:list
       (common-lisp:cons "logType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delivery-source))
   common-lisp:nil))
(common-lisp:deftype delivery-source-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype delivery-sources ()
   '(trivial-types:proper-list delivery-source))
 (common-lisp:defun make-delivery-sources
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list delivery-source))
   aws-sdk/generator/shape::members))
(common-lisp:deftype descending () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defclass describe-account-policies-request common-lisp:nil
                       ((policy-type :initarg :policy-type :initform
                         (common-lisp:error ":policytype is required") :type
                         (common-lisp:or policy-type common-lisp:null)
                         :accessor
                         struct-shape-describe-account-policies-request-policy-type
                         :shape "PolicyType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (policy-name :initarg :policy-name :initform
                         common-lisp:nil :type
                         (common-lisp:or policy-name common-lisp:null)
                         :accessor
                         struct-shape-describe-account-policies-request-policy-name
                         :shape "PolicyName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (account-identifiers :initarg :account-identifiers
                         :initform common-lisp:nil :type
                         (common-lisp:or account-ids common-lisp:null)
                         :accessor
                         struct-shape-describe-account-policies-request-account-identifiers
                         :shape "AccountIds" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-account-policies-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-account-policies-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-account-policies-request
                    'make-describe-account-policies-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-account-policies-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-account-policies-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-type))
      (common-lisp:list
       (common-lisp:cons "policyType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-name))
      (common-lisp:list
       (common-lisp:cons "policyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-identifiers))
      (common-lisp:list
       (common-lisp:cons "accountIdentifiers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-account-policies-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-account-policies-response common-lisp:nil
                       ((account-policies :initarg :account-policies :initform
                         common-lisp:nil :type
                         (common-lisp:or account-policies common-lisp:null)
                         :accessor
                         struct-shape-describe-account-policies-response-account-policies
                         :shape "AccountPolicies" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-account-policies-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-account-policies-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-account-policies-response
                    'make-describe-account-policies-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-account-policies-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-account-policies-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-policies))
      (common-lisp:list
       (common-lisp:cons "accountPolicies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-account-policies-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-deliveries-request common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-describe-deliveries-request-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (limit :initarg :limit :initform common-lisp:nil :type
                         (common-lisp:or describe-limit common-lisp:null)
                         :accessor
                         struct-shape-describe-deliveries-request-limit :shape
                         "DescribeLimit" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-deliveries-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-deliveries-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-deliveries-request
                    'make-describe-deliveries-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-deliveries-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-deliveries-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'limit))
      (common-lisp:list
       (common-lisp:cons "limit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-deliveries-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-deliveries-response common-lisp:nil
                       ((deliveries :initarg :deliveries :initform
                         common-lisp:nil :type
                         (common-lisp:or deliveries common-lisp:null) :accessor
                         struct-shape-describe-deliveries-response-deliveries
                         :shape "Deliveries" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-describe-deliveries-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-deliveries-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-deliveries-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-deliveries-response
                    'make-describe-deliveries-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-deliveries-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-deliveries-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deliveries))
      (common-lisp:list
       (common-lisp:cons "deliveries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-deliveries-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-delivery-destinations-request common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-describe-delivery-destinations-request-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (limit :initarg :limit :initform common-lisp:nil :type
                         (common-lisp:or describe-limit common-lisp:null)
                         :accessor
                         struct-shape-describe-delivery-destinations-request-limit
                         :shape "DescribeLimit" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-delivery-destinations-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-delivery-destinations-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-delivery-destinations-request
                    'make-describe-delivery-destinations-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-delivery-destinations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-delivery-destinations-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'limit))
      (common-lisp:list
       (common-lisp:cons "limit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-delivery-destinations-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-delivery-destinations-response common-lisp:nil
                       ((delivery-destinations :initarg :delivery-destinations
                         :initform common-lisp:nil :type
                         (common-lisp:or delivery-destinations
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-delivery-destinations-response-delivery-destinations
                         :shape "DeliveryDestinations" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-describe-delivery-destinations-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-delivery-destinations-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-delivery-destinations-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-delivery-destinations-response
                    'make-describe-delivery-destinations-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-delivery-destinations-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-delivery-destinations-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'delivery-destinations))
      (common-lisp:list
       (common-lisp:cons "deliveryDestinations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-delivery-destinations-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-delivery-sources-request common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-describe-delivery-sources-request-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (limit :initarg :limit :initform common-lisp:nil :type
                         (common-lisp:or describe-limit common-lisp:null)
                         :accessor
                         struct-shape-describe-delivery-sources-request-limit
                         :shape "DescribeLimit" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-delivery-sources-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-delivery-sources-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-delivery-sources-request
                    'make-describe-delivery-sources-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-delivery-sources-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-delivery-sources-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'limit))
      (common-lisp:list
       (common-lisp:cons "limit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-delivery-sources-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-delivery-sources-response common-lisp:nil
                       ((delivery-sources :initarg :delivery-sources :initform
                         common-lisp:nil :type
                         (common-lisp:or delivery-sources common-lisp:null)
                         :accessor
                         struct-shape-describe-delivery-sources-response-delivery-sources
                         :shape "DeliverySources" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-describe-delivery-sources-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-delivery-sources-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-delivery-sources-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-delivery-sources-response
                    'make-describe-delivery-sources-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-delivery-sources-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-delivery-sources-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'delivery-sources))
      (common-lisp:list
       (common-lisp:cons "deliverySources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-delivery-sources-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-destinations-request common-lisp:nil
                       ((destination-name-prefix :initarg
                         :destination-name-prefix :initform common-lisp:nil
                         :type
                         (common-lisp:or destination-name common-lisp:null)
                         :accessor
                         struct-shape-describe-destinations-request-destination-name-prefix
                         :shape "DestinationName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-describe-destinations-request-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (limit :initarg :limit :initform common-lisp:nil :type
                         (common-lisp:or describe-limit common-lisp:null)
                         :accessor
                         struct-shape-describe-destinations-request-limit
                         :shape "DescribeLimit" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-destinations-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-destinations-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-destinations-request
                    'make-describe-destinations-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-destinations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-destinations-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'destination-name-prefix))
      (common-lisp:list
       (common-lisp:cons "DestinationNamePrefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'limit))
      (common-lisp:list
       (common-lisp:cons "limit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-destinations-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-destinations-response common-lisp:nil
                       ((destinations :initarg :destinations :initform
                         common-lisp:nil :type
                         (common-lisp:or destinations common-lisp:null)
                         :accessor
                         struct-shape-describe-destinations-response-destinations
                         :shape "Destinations" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-describe-destinations-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-destinations-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-destinations-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-destinations-response
                    'make-describe-destinations-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-destinations-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-destinations-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destinations))
      (common-lisp:list
       (common-lisp:cons "destinations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-destinations-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-export-tasks-request common-lisp:nil
                       ((task-id :initarg :task-id :initform common-lisp:nil
                         :type (common-lisp:or export-task-id common-lisp:null)
                         :accessor
                         struct-shape-describe-export-tasks-request-task-id
                         :shape "ExportTaskId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status-code :initarg :status-code :initform
                         common-lisp:nil :type
                         (common-lisp:or export-task-status-code
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-export-tasks-request-status-code
                         :shape "ExportTaskStatusCode" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-describe-export-tasks-request-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (limit :initarg :limit :initform common-lisp:nil :type
                         (common-lisp:or describe-limit common-lisp:null)
                         :accessor
                         struct-shape-describe-export-tasks-request-limit
                         :shape "DescribeLimit" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-export-tasks-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-export-tasks-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-export-tasks-request
                    'make-describe-export-tasks-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-export-tasks-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-export-tasks-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-id))
      (common-lisp:list
       (common-lisp:cons "taskId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-code))
      (common-lisp:list
       (common-lisp:cons "statusCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'limit))
      (common-lisp:list
       (common-lisp:cons "limit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-export-tasks-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-export-tasks-response common-lisp:nil
                       ((export-tasks :initarg :export-tasks :initform
                         common-lisp:nil :type
                         (common-lisp:or export-tasks common-lisp:null)
                         :accessor
                         struct-shape-describe-export-tasks-response-export-tasks
                         :shape "ExportTasks" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-describe-export-tasks-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-export-tasks-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-export-tasks-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-export-tasks-response
                    'make-describe-export-tasks-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-export-tasks-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-export-tasks-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'export-tasks))
      (common-lisp:list
       (common-lisp:cons "exportTasks"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-export-tasks-response))
   common-lisp:nil))
(common-lisp:deftype describe-limit () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass describe-log-groups-request common-lisp:nil
                       ((account-identifiers :initarg :account-identifiers
                         :initform common-lisp:nil :type
                         (common-lisp:or account-ids common-lisp:null)
                         :accessor
                         struct-shape-describe-log-groups-request-account-identifiers
                         :shape "AccountIds" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (log-group-name-prefix :initarg :log-group-name-prefix
                         :initform common-lisp:nil :type
                         (common-lisp:or log-group-name common-lisp:null)
                         :accessor
                         struct-shape-describe-log-groups-request-log-group-name-prefix
                         :shape "LogGroupName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (log-group-name-pattern :initarg
                         :log-group-name-pattern :initform common-lisp:nil
                         :type
                         (common-lisp:or log-group-name-pattern
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-log-groups-request-log-group-name-pattern
                         :shape "LogGroupNamePattern" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-describe-log-groups-request-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (limit :initarg :limit :initform common-lisp:nil :type
                         (common-lisp:or describe-limit common-lisp:null)
                         :accessor
                         struct-shape-describe-log-groups-request-limit :shape
                         "DescribeLimit" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (include-linked-accounts :initarg
                         :include-linked-accounts :initform common-lisp:nil
                         :type
                         (common-lisp:or include-linked-accounts
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-log-groups-request-include-linked-accounts
                         :shape "IncludeLinkedAccounts" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (log-group-class :initarg :log-group-class :initform
                         common-lisp:nil :type
                         (common-lisp:or log-group-class common-lisp:null)
                         :accessor
                         struct-shape-describe-log-groups-request-log-group-class
                         :shape "LogGroupClass" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-log-groups-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-log-groups-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-log-groups-request
                    'make-describe-log-groups-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-log-groups-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-log-groups-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-identifiers))
      (common-lisp:list
       (common-lisp:cons "accountIdentifiers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'log-group-name-prefix))
      (common-lisp:list
       (common-lisp:cons "logGroupNamePrefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'log-group-name-pattern))
      (common-lisp:list
       (common-lisp:cons "logGroupNamePattern"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'limit))
      (common-lisp:list
       (common-lisp:cons "limit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'include-linked-accounts))
      (common-lisp:list
       (common-lisp:cons "includeLinkedAccounts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-group-class))
      (common-lisp:list
       (common-lisp:cons "logGroupClass"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-log-groups-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-log-groups-response common-lisp:nil
                       ((log-groups :initarg :log-groups :initform
                         common-lisp:nil :type
                         (common-lisp:or log-groups common-lisp:null) :accessor
                         struct-shape-describe-log-groups-response-log-groups
                         :shape "LogGroups" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-describe-log-groups-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-log-groups-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-log-groups-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-log-groups-response
                    'make-describe-log-groups-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-log-groups-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-log-groups-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-groups))
      (common-lisp:list
       (common-lisp:cons "logGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-log-groups-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-log-streams-request common-lisp:nil
                       ((log-group-name :initarg :log-group-name :initform
                         common-lisp:nil :type
                         (common-lisp:or log-group-name common-lisp:null)
                         :accessor
                         struct-shape-describe-log-streams-request-log-group-name
                         :shape "LogGroupName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (log-group-identifier :initarg :log-group-identifier
                         :initform common-lisp:nil :type
                         (common-lisp:or log-group-identifier common-lisp:null)
                         :accessor
                         struct-shape-describe-log-streams-request-log-group-identifier
                         :shape "LogGroupIdentifier" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (log-stream-name-prefix :initarg
                         :log-stream-name-prefix :initform common-lisp:nil
                         :type
                         (common-lisp:or log-stream-name common-lisp:null)
                         :accessor
                         struct-shape-describe-log-streams-request-log-stream-name-prefix
                         :shape "LogStreamName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (order-by :initarg :order-by :initform common-lisp:nil
                         :type (common-lisp:or order-by common-lisp:null)
                         :accessor
                         struct-shape-describe-log-streams-request-order-by
                         :shape "OrderBy" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (descending :initarg :descending :initform
                         common-lisp:nil :type
                         (common-lisp:or descending common-lisp:null) :accessor
                         struct-shape-describe-log-streams-request-descending
                         :shape "Descending" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-describe-log-streams-request-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (limit :initarg :limit :initform common-lisp:nil :type
                         (common-lisp:or describe-limit common-lisp:null)
                         :accessor
                         struct-shape-describe-log-streams-request-limit :shape
                         "DescribeLimit" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-log-streams-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-log-streams-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-log-streams-request
                    'make-describe-log-streams-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-log-streams-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-log-streams-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-group-name))
      (common-lisp:list
       (common-lisp:cons "logGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'log-group-identifier))
      (common-lisp:list
       (common-lisp:cons "logGroupIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'log-stream-name-prefix))
      (common-lisp:list
       (common-lisp:cons "logStreamNamePrefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'order-by))
      (common-lisp:list
       (common-lisp:cons "orderBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'descending))
      (common-lisp:list
       (common-lisp:cons "descending"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'limit))
      (common-lisp:list
       (common-lisp:cons "limit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-log-streams-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-log-streams-response common-lisp:nil
                       ((log-streams :initarg :log-streams :initform
                         common-lisp:nil :type
                         (common-lisp:or log-streams common-lisp:null)
                         :accessor
                         struct-shape-describe-log-streams-response-log-streams
                         :shape "LogStreams" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-describe-log-streams-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-log-streams-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-log-streams-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-log-streams-response
                    'make-describe-log-streams-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-log-streams-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-log-streams-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-streams))
      (common-lisp:list
       (common-lisp:cons "logStreams"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-log-streams-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-metric-filters-request common-lisp:nil
                       ((log-group-name :initarg :log-group-name :initform
                         common-lisp:nil :type
                         (common-lisp:or log-group-name common-lisp:null)
                         :accessor
                         struct-shape-describe-metric-filters-request-log-group-name
                         :shape "LogGroupName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (filter-name-prefix :initarg :filter-name-prefix
                         :initform common-lisp:nil :type
                         (common-lisp:or filter-name common-lisp:null)
                         :accessor
                         struct-shape-describe-metric-filters-request-filter-name-prefix
                         :shape "FilterName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-describe-metric-filters-request-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (limit :initarg :limit :initform common-lisp:nil :type
                         (common-lisp:or describe-limit common-lisp:null)
                         :accessor
                         struct-shape-describe-metric-filters-request-limit
                         :shape "DescribeLimit" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (metric-name :initarg :metric-name :initform
                         common-lisp:nil :type
                         (common-lisp:or metric-name common-lisp:null)
                         :accessor
                         struct-shape-describe-metric-filters-request-metric-name
                         :shape "MetricName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (metric-namespace :initarg :metric-namespace :initform
                         common-lisp:nil :type
                         (common-lisp:or metric-namespace common-lisp:null)
                         :accessor
                         struct-shape-describe-metric-filters-request-metric-namespace
                         :shape "MetricNamespace" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-metric-filters-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-metric-filters-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-metric-filters-request
                    'make-describe-metric-filters-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-metric-filters-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-metric-filters-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-group-name))
      (common-lisp:list
       (common-lisp:cons "logGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter-name-prefix))
      (common-lisp:list
       (common-lisp:cons "filterNamePrefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'limit))
      (common-lisp:list
       (common-lisp:cons "limit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-name))
      (common-lisp:list
       (common-lisp:cons "metricName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-namespace))
      (common-lisp:list
       (common-lisp:cons "metricNamespace"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-metric-filters-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-metric-filters-response common-lisp:nil
                       ((metric-filters :initarg :metric-filters :initform
                         common-lisp:nil :type
                         (common-lisp:or metric-filters common-lisp:null)
                         :accessor
                         struct-shape-describe-metric-filters-response-metric-filters
                         :shape "MetricFilters" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-describe-metric-filters-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-metric-filters-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-metric-filters-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-metric-filters-response
                    'make-describe-metric-filters-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-metric-filters-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-metric-filters-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-filters))
      (common-lisp:list
       (common-lisp:cons "metricFilters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-metric-filters-response))
   common-lisp:nil))
(common-lisp:deftype describe-queries-max-results () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass describe-queries-request common-lisp:nil
                       ((log-group-name :initarg :log-group-name :initform
                         common-lisp:nil :type
                         (common-lisp:or log-group-name common-lisp:null)
                         :accessor
                         struct-shape-describe-queries-request-log-group-name
                         :shape "LogGroupName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or query-status common-lisp:null)
                         :accessor struct-shape-describe-queries-request-status
                         :shape "QueryStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or describe-queries-max-results
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-queries-request-max-results
                         :shape "DescribeQueriesMaxResults" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-describe-queries-request-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-queries-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-queries-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-queries-request 'make-describe-queries-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-queries-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-queries-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-group-name))
      (common-lisp:list
       (common-lisp:cons "logGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-queries-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-queries-response common-lisp:nil
                       ((queries :initarg :queries :initform common-lisp:nil
                         :type
                         (common-lisp:or query-info-list common-lisp:null)
                         :accessor
                         struct-shape-describe-queries-response-queries :shape
                         "QueryInfoList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-describe-queries-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-queries-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-queries-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-queries-response
                    'make-describe-queries-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-queries-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-queries-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'queries))
      (common-lisp:list
       (common-lisp:cons "queries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-queries-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-query-definitions-request common-lisp:nil
                       ((query-definition-name-prefix :initarg
                         :query-definition-name-prefix :initform
                         common-lisp:nil :type
                         (common-lisp:or query-definition-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-query-definitions-request-query-definition-name-prefix
                         :shape "QueryDefinitionName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or query-list-max-results
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-query-definitions-request-max-results
                         :shape "QueryListMaxResults" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-describe-query-definitions-request-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-query-definitions-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-query-definitions-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-query-definitions-request
                    'make-describe-query-definitions-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-query-definitions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-query-definitions-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'query-definition-name-prefix))
      (common-lisp:list
       (common-lisp:cons "queryDefinitionNamePrefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-query-definitions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-query-definitions-response common-lisp:nil
                       ((query-definitions :initarg :query-definitions
                         :initform common-lisp:nil :type
                         (common-lisp:or query-definition-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-query-definitions-response-query-definitions
                         :shape "QueryDefinitionList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-describe-query-definitions-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-query-definitions-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-query-definitions-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-query-definitions-response
                    'make-describe-query-definitions-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-query-definitions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-query-definitions-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-definitions))
      (common-lisp:list
       (common-lisp:cons "queryDefinitions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-query-definitions-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-resource-policies-request common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-describe-resource-policies-request-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (limit :initarg :limit :initform common-lisp:nil :type
                         (common-lisp:or describe-limit common-lisp:null)
                         :accessor
                         struct-shape-describe-resource-policies-request-limit
                         :shape "DescribeLimit" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-resource-policies-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-resource-policies-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-resource-policies-request
                    'make-describe-resource-policies-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-resource-policies-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-resource-policies-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'limit))
      (common-lisp:list
       (common-lisp:cons "limit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-resource-policies-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-resource-policies-response common-lisp:nil
                       ((resource-policies :initarg :resource-policies
                         :initform common-lisp:nil :type
                         (common-lisp:or resource-policies common-lisp:null)
                         :accessor
                         struct-shape-describe-resource-policies-response-resource-policies
                         :shape "ResourcePolicies" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-describe-resource-policies-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-resource-policies-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-resource-policies-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-resource-policies-response
                    'make-describe-resource-policies-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-resource-policies-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-resource-policies-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-policies))
      (common-lisp:list
       (common-lisp:cons "resourcePolicies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-resource-policies-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-subscription-filters-request common-lisp:nil
                       ((log-group-name :initarg :log-group-name :initform
                         (common-lisp:error ":loggroupname is required") :type
                         (common-lisp:or log-group-name common-lisp:null)
                         :accessor
                         struct-shape-describe-subscription-filters-request-log-group-name
                         :shape "LogGroupName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (filter-name-prefix :initarg :filter-name-prefix
                         :initform common-lisp:nil :type
                         (common-lisp:or filter-name common-lisp:null)
                         :accessor
                         struct-shape-describe-subscription-filters-request-filter-name-prefix
                         :shape "FilterName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-describe-subscription-filters-request-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (limit :initarg :limit :initform common-lisp:nil :type
                         (common-lisp:or describe-limit common-lisp:null)
                         :accessor
                         struct-shape-describe-subscription-filters-request-limit
                         :shape "DescribeLimit" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-subscription-filters-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-subscription-filters-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-subscription-filters-request
                    'make-describe-subscription-filters-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-subscription-filters-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-subscription-filters-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-group-name))
      (common-lisp:list
       (common-lisp:cons "logGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter-name-prefix))
      (common-lisp:list
       (common-lisp:cons "filterNamePrefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'limit))
      (common-lisp:list
       (common-lisp:cons "limit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-subscription-filters-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-subscription-filters-response common-lisp:nil
                       ((subscription-filters :initarg :subscription-filters
                         :initform common-lisp:nil :type
                         (common-lisp:or subscription-filters common-lisp:null)
                         :accessor
                         struct-shape-describe-subscription-filters-response-subscription-filters
                         :shape "SubscriptionFilters" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-describe-subscription-filters-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-subscription-filters-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-subscription-filters-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-subscription-filters-response
                    'make-describe-subscription-filters-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-subscription-filters-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-subscription-filters-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'subscription-filters))
      (common-lisp:list
       (common-lisp:cons "subscriptionFilters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-subscription-filters-response))
   common-lisp:nil))
(common-lisp:deftype description () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass destination common-lisp:nil
                       ((destination-name :initarg :destination-name :initform
                         common-lisp:nil :type
                         (common-lisp:or destination-name common-lisp:null)
                         :accessor struct-shape-destination-destination-name
                         :shape "DestinationName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (target-arn :initarg :target-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or target-arn common-lisp:null) :accessor
                         struct-shape-destination-target-arn :shape "TargetArn"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (role-arn :initarg :role-arn :initform common-lisp:nil
                         :type (common-lisp:or role-arn common-lisp:null)
                         :accessor struct-shape-destination-role-arn :shape
                         "RoleArn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (access-policy :initarg :access-policy :initform
                         common-lisp:nil :type
                         (common-lisp:or access-policy common-lisp:null)
                         :accessor struct-shape-destination-access-policy
                         :shape "AccessPolicy" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-destination-arn :shape "Arn" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (creation-time :initarg :creation-time :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-destination-creation-time :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-destination
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'destination
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'destination 'make-destination))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input destination))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input destination))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination-name))
      (common-lisp:list
       (common-lisp:cons "destinationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-arn))
      (common-lisp:list
       (common-lisp:cons "targetArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-policy))
      (common-lisp:list
       (common-lisp:cons "accessPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "creationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input destination))
   common-lisp:nil))
(common-lisp:deftype destination-arn () 'common-lisp:string)
(common-lisp:deftype destination-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype destinations () '(trivial-types:proper-list destination))
 (common-lisp:defun make-destinations
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list destination))
   aws-sdk/generator/shape::members))
(common-lisp:deftype detector-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype dimensions () 'common-lisp:hash-table)
 (common-lisp:defun make-dimensions (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype dimensions-key () 'common-lisp:string)
(common-lisp:deftype dimensions-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass disassociate-kms-key-request common-lisp:nil
                       ((log-group-name :initarg :log-group-name :initform
                         common-lisp:nil :type
                         (common-lisp:or log-group-name common-lisp:null)
                         :accessor
                         struct-shape-disassociate-kms-key-request-log-group-name
                         :shape "LogGroupName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (resource-identifier :initarg :resource-identifier
                         :initform common-lisp:nil :type
                         (common-lisp:or resource-identifier common-lisp:null)
                         :accessor
                         struct-shape-disassociate-kms-key-request-resource-identifier
                         :shape "ResourceIdentifier" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-disassociate-kms-key-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'disassociate-kms-key-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'disassociate-kms-key-request
                    'make-disassociate-kms-key-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-kms-key-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-kms-key-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-group-name))
      (common-lisp:list
       (common-lisp:cons "logGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-identifier))
      (common-lisp:list
       (common-lisp:cons "resourceIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-kms-key-request))
   common-lisp:nil))
(common-lisp:deftype distribution () 'common-lisp:string)
(common-lisp:deftype dynamic-token-position () 'common-lisp:integer)
(common-lisp:deftype encryption-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype enumerations () 'common-lisp:hash-table)
 (common-lisp:defun make-enumerations (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype epoch-millis () 'common-lisp:integer)
(common-lisp:deftype evaluation-frequency () 'common-lisp:string)
(common-lisp:deftype event-id () 'common-lisp:string)
(common-lisp:deftype event-message () 'common-lisp:string)
(common-lisp:deftype event-number () 'common-lisp:integer)
(common-lisp:deftype events-limit () 'common-lisp:integer)
(common-lisp:deftype export-destination-bucket () 'common-lisp:string)
(common-lisp:deftype export-destination-prefix () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass export-task common-lisp:nil
                       ((task-id :initarg :task-id :initform common-lisp:nil
                         :type (common-lisp:or export-task-id common-lisp:null)
                         :accessor struct-shape-export-task-task-id :shape
                         "ExportTaskId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (task-name :initarg :task-name :initform
                         common-lisp:nil :type
                         (common-lisp:or export-task-name common-lisp:null)
                         :accessor struct-shape-export-task-task-name :shape
                         "ExportTaskName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (log-group-name :initarg :log-group-name :initform
                         common-lisp:nil :type
                         (common-lisp:or log-group-name common-lisp:null)
                         :accessor struct-shape-export-task-log-group-name
                         :shape "LogGroupName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (from :initarg :from :initform common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-export-task-from :shape "Timestamp"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (to :initarg :to :initform common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-export-task-to :shape "Timestamp"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (destination :initarg :destination :initform
                         common-lisp:nil :type
                         (common-lisp:or export-destination-bucket
                                         common-lisp:null)
                         :accessor struct-shape-export-task-destination :shape
                         "ExportDestinationBucket" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (destination-prefix :initarg :destination-prefix
                         :initform common-lisp:nil :type
                         (common-lisp:or export-destination-prefix
                                         common-lisp:null)
                         :accessor struct-shape-export-task-destination-prefix
                         :shape "ExportDestinationPrefix" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or export-task-status common-lisp:null)
                         :accessor struct-shape-export-task-status :shape
                         "ExportTaskStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (execution-info :initarg :execution-info :initform
                         common-lisp:nil :type
                         (common-lisp:or export-task-execution-info
                                         common-lisp:null)
                         :accessor struct-shape-export-task-execution-info
                         :shape "ExportTaskExecutionInfo" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-export-task
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'export-task
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'export-task 'make-export-task))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input export-task))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input export-task))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-id))
      (common-lisp:list
       (common-lisp:cons "taskId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-name))
      (common-lisp:list
       (common-lisp:cons "taskName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-group-name))
      (common-lisp:list
       (common-lisp:cons "logGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'from))
      (common-lisp:list
       (common-lisp:cons "from"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'to))
      (common-lisp:list
       (common-lisp:cons "to"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination))
      (common-lisp:list
       (common-lisp:cons "destination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination-prefix))
      (common-lisp:list
       (common-lisp:cons "destinationPrefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execution-info))
      (common-lisp:list
       (common-lisp:cons "executionInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input export-task))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass export-task-execution-info common-lisp:nil
                       ((creation-time :initarg :creation-time :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-export-task-execution-info-creation-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (completion-time :initarg :completion-time :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-export-task-execution-info-completion-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-export-task-execution-info
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'export-task-execution-info
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'export-task-execution-info
                    'make-export-task-execution-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          export-task-execution-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          export-task-execution-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "creationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'completion-time))
      (common-lisp:list
       (common-lisp:cons "completionTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          export-task-execution-info))
   common-lisp:nil))
(common-lisp:deftype export-task-id () 'common-lisp:string)
(common-lisp:deftype export-task-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass export-task-status common-lisp:nil
                       ((code :initarg :code :initform common-lisp:nil :type
                         (common-lisp:or export-task-status-code
                                         common-lisp:null)
                         :accessor struct-shape-export-task-status-code :shape
                         "ExportTaskStatusCode" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (message :initarg :message :initform common-lisp:nil
                         :type
                         (common-lisp:or export-task-status-message
                                         common-lisp:null)
                         :accessor struct-shape-export-task-status-message
                         :shape "ExportTaskStatusMessage" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-export-task-status
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'export-task-status
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'export-task-status 'make-export-task-status))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input export-task-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input export-task-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code))
      (common-lisp:list
       (common-lisp:cons "code"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input export-task-status))
   common-lisp:nil))
(common-lisp:deftype export-task-status-code () 'common-lisp:string)
(common-lisp:deftype export-task-status-message () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype export-tasks () '(trivial-types:proper-list export-task))
 (common-lisp:defun make-export-tasks
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list export-task))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype extracted-values () 'common-lisp:hash-table)
 (common-lisp:defun make-extracted-values (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype field () 'common-lisp:string)
(common-lisp:deftype filter-count () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass filter-log-events-request common-lisp:nil
                       ((log-group-name :initarg :log-group-name :initform
                         common-lisp:nil :type
                         (common-lisp:or log-group-name common-lisp:null)
                         :accessor
                         struct-shape-filter-log-events-request-log-group-name
                         :shape "LogGroupName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (log-group-identifier :initarg :log-group-identifier
                         :initform common-lisp:nil :type
                         (common-lisp:or log-group-identifier common-lisp:null)
                         :accessor
                         struct-shape-filter-log-events-request-log-group-identifier
                         :shape "LogGroupIdentifier" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (log-stream-names :initarg :log-stream-names :initform
                         common-lisp:nil :type
                         (common-lisp:or input-log-stream-names
                                         common-lisp:null)
                         :accessor
                         struct-shape-filter-log-events-request-log-stream-names
                         :shape "InputLogStreamNames" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (log-stream-name-prefix :initarg
                         :log-stream-name-prefix :initform common-lisp:nil
                         :type
                         (common-lisp:or log-stream-name common-lisp:null)
                         :accessor
                         struct-shape-filter-log-events-request-log-stream-name-prefix
                         :shape "LogStreamName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (start-time :initarg :start-time :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-filter-log-events-request-start-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (end-time :initarg :end-time :initform common-lisp:nil
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         struct-shape-filter-log-events-request-end-time :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (filter-pattern :initarg :filter-pattern :initform
                         common-lisp:nil :type
                         (common-lisp:or filter-pattern common-lisp:null)
                         :accessor
                         struct-shape-filter-log-events-request-filter-pattern
                         :shape "FilterPattern" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-filter-log-events-request-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (limit :initarg :limit :initform common-lisp:nil :type
                         (common-lisp:or events-limit common-lisp:null)
                         :accessor struct-shape-filter-log-events-request-limit
                         :shape "EventsLimit" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (interleaved :initarg :interleaved :initform
                         common-lisp:nil :type
                         (common-lisp:or interleaved common-lisp:null)
                         :accessor
                         struct-shape-filter-log-events-request-interleaved
                         :shape "Interleaved" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (unmask :initarg :unmask :initform common-lisp:nil
                         :type (common-lisp:or unmask common-lisp:null)
                         :accessor
                         struct-shape-filter-log-events-request-unmask :shape
                         "Unmask" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-filter-log-events-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'filter-log-events-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'filter-log-events-request
                    'make-filter-log-events-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          filter-log-events-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          filter-log-events-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-group-name))
      (common-lisp:list
       (common-lisp:cons "logGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'log-group-identifier))
      (common-lisp:list
       (common-lisp:cons "logGroupIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-stream-names))
      (common-lisp:list
       (common-lisp:cons "logStreamNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'log-stream-name-prefix))
      (common-lisp:list
       (common-lisp:cons "logStreamNamePrefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "startTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "endTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter-pattern))
      (common-lisp:list
       (common-lisp:cons "filterPattern"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'limit))
      (common-lisp:list
       (common-lisp:cons "limit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'interleaved))
      (common-lisp:list
       (common-lisp:cons "interleaved"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'unmask))
      (common-lisp:list
       (common-lisp:cons "unmask"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          filter-log-events-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass filter-log-events-response common-lisp:nil
                       ((events :initarg :events :initform common-lisp:nil
                         :type
                         (common-lisp:or filtered-log-events common-lisp:null)
                         :accessor
                         struct-shape-filter-log-events-response-events :shape
                         "FilteredLogEvents" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (searched-log-streams :initarg :searched-log-streams
                         :initform common-lisp:nil :type
                         (common-lisp:or searched-log-streams common-lisp:null)
                         :accessor
                         struct-shape-filter-log-events-response-searched-log-streams
                         :shape "SearchedLogStreams" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-filter-log-events-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-filter-log-events-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'filter-log-events-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'filter-log-events-response
                    'make-filter-log-events-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          filter-log-events-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          filter-log-events-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'events))
      (common-lisp:list
       (common-lisp:cons "events"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'searched-log-streams))
      (common-lisp:list
       (common-lisp:cons "searchedLogStreams"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          filter-log-events-response))
   common-lisp:nil))
(common-lisp:deftype filter-name () 'common-lisp:string)
(common-lisp:deftype filter-pattern () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass filtered-log-event common-lisp:nil
                       ((log-stream-name :initarg :log-stream-name :initform
                         common-lisp:nil :type
                         (common-lisp:or log-stream-name common-lisp:null)
                         :accessor
                         struct-shape-filtered-log-event-log-stream-name :shape
                         "LogStreamName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (timestamp :initarg :timestamp :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-filtered-log-event-timestamp :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (message :initarg :message :initform common-lisp:nil
                         :type (common-lisp:or event-message common-lisp:null)
                         :accessor struct-shape-filtered-log-event-message
                         :shape "EventMessage" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (ingestion-time :initarg :ingestion-time :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-filtered-log-event-ingestion-time :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (event-id :initarg :event-id :initform common-lisp:nil
                         :type (common-lisp:or event-id common-lisp:null)
                         :accessor struct-shape-filtered-log-event-event-id
                         :shape "EventId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-filtered-log-event
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'filtered-log-event
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'filtered-log-event 'make-filtered-log-event))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input filtered-log-event))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input filtered-log-event))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-stream-name))
      (common-lisp:list
       (common-lisp:cons "logStreamName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timestamp))
      (common-lisp:list
       (common-lisp:cons "timestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ingestion-time))
      (common-lisp:list
       (common-lisp:cons "ingestionTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-id))
      (common-lisp:list
       (common-lisp:cons "eventId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input filtered-log-event))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype filtered-log-events ()
   '(trivial-types:proper-list filtered-log-event))
 (common-lisp:defun make-filtered-log-events
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list filtered-log-event))
   aws-sdk/generator/shape::members))
(common-lisp:deftype force-update () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defclass get-data-protection-policy-request common-lisp:nil
                       ((log-group-identifier :initarg :log-group-identifier
                         :initform
                         (common-lisp:error ":loggroupidentifier is required")
                         :type
                         (common-lisp:or log-group-identifier common-lisp:null)
                         :accessor
                         struct-shape-get-data-protection-policy-request-log-group-identifier
                         :shape "LogGroupIdentifier" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-data-protection-policy-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-data-protection-policy-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-data-protection-policy-request
                    'make-get-data-protection-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-data-protection-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-data-protection-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'log-group-identifier))
      (common-lisp:list
       (common-lisp:cons "logGroupIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-data-protection-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-data-protection-policy-response common-lisp:nil
                       ((log-group-identifier :initarg :log-group-identifier
                         :initform common-lisp:nil :type
                         (common-lisp:or log-group-identifier common-lisp:null)
                         :accessor
                         struct-shape-get-data-protection-policy-response-log-group-identifier
                         :shape "LogGroupIdentifier" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (policy-document :initarg :policy-document :initform
                         common-lisp:nil :type
                         (common-lisp:or data-protection-policy-document
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-data-protection-policy-response-policy-document
                         :shape "DataProtectionPolicyDocument" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (last-updated-time :initarg :last-updated-time
                         :initform common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-get-data-protection-policy-response-last-updated-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-data-protection-policy-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-data-protection-policy-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-data-protection-policy-response
                    'make-get-data-protection-policy-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-data-protection-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-data-protection-policy-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'log-group-identifier))
      (common-lisp:list
       (common-lisp:cons "logGroupIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-document))
      (common-lisp:list
       (common-lisp:cons "policyDocument"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-time))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-data-protection-policy-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-delivery-destination-policy-request common-lisp:nil
                       ((delivery-destination-name :initarg
                         :delivery-destination-name :initform
                         (common-lisp:error
                          ":deliverydestinationname is required")
                         :type
                         (common-lisp:or delivery-destination-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-delivery-destination-policy-request-delivery-destination-name
                         :shape "DeliveryDestinationName" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-delivery-destination-policy-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-delivery-destination-policy-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-delivery-destination-policy-request
                    'make-get-delivery-destination-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-delivery-destination-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-delivery-destination-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'delivery-destination-name))
      (common-lisp:list
       (common-lisp:cons "deliveryDestinationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-delivery-destination-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-delivery-destination-policy-response common-lisp:nil
                       ((policy :initarg :policy :initform common-lisp:nil
                         :type (common-lisp:or policy common-lisp:null)
                         :accessor
                         struct-shape-get-delivery-destination-policy-response-policy
                         :shape "Policy" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-delivery-destination-policy-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-delivery-destination-policy-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-delivery-destination-policy-response
                    'make-get-delivery-destination-policy-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-delivery-destination-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-delivery-destination-policy-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy))
      (common-lisp:list
       (common-lisp:cons "policy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-delivery-destination-policy-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-delivery-destination-request common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or delivery-destination-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-delivery-destination-request-name
                         :shape "DeliveryDestinationName" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-delivery-destination-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-delivery-destination-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-delivery-destination-request
                    'make-get-delivery-destination-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-delivery-destination-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-delivery-destination-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-delivery-destination-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-delivery-destination-response common-lisp:nil
                       ((delivery-destination :initarg :delivery-destination
                         :initform common-lisp:nil :type
                         (common-lisp:or delivery-destination common-lisp:null)
                         :accessor
                         struct-shape-get-delivery-destination-response-delivery-destination
                         :shape "DeliveryDestination" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-delivery-destination-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-delivery-destination-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-delivery-destination-response
                    'make-get-delivery-destination-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-delivery-destination-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-delivery-destination-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'delivery-destination))
      (common-lisp:list
       (common-lisp:cons "deliveryDestination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-delivery-destination-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-delivery-request common-lisp:nil
                       ((id :initarg :id :initform
                         (common-lisp:error ":id is required") :type
                         (common-lisp:or delivery-id common-lisp:null)
                         :accessor struct-shape-get-delivery-request-id :shape
                         "DeliveryId" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-delivery-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-delivery-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-delivery-request 'make-get-delivery-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-delivery-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-delivery-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-delivery-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-delivery-response common-lisp:nil
                       ((delivery :initarg :delivery :initform common-lisp:nil
                         :type (common-lisp:or delivery common-lisp:null)
                         :accessor struct-shape-get-delivery-response-delivery
                         :shape "Delivery" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-delivery-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-delivery-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-delivery-response 'make-get-delivery-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-delivery-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-delivery-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'delivery))
      (common-lisp:list
       (common-lisp:cons "delivery"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-delivery-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-delivery-source-request common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or delivery-source-name common-lisp:null)
                         :accessor
                         struct-shape-get-delivery-source-request-name :shape
                         "DeliverySourceName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-delivery-source-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-delivery-source-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-delivery-source-request
                    'make-get-delivery-source-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-delivery-source-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-delivery-source-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-delivery-source-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-delivery-source-response common-lisp:nil
                       ((delivery-source :initarg :delivery-source :initform
                         common-lisp:nil :type
                         (common-lisp:or delivery-source common-lisp:null)
                         :accessor
                         struct-shape-get-delivery-source-response-delivery-source
                         :shape "DeliverySource" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-delivery-source-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-delivery-source-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-delivery-source-response
                    'make-get-delivery-source-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-delivery-source-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-delivery-source-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'delivery-source))
      (common-lisp:list
       (common-lisp:cons "deliverySource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-delivery-source-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-log-anomaly-detector-request common-lisp:nil
                       ((anomaly-detector-arn :initarg :anomaly-detector-arn
                         :initform
                         (common-lisp:error ":anomalydetectorarn is required")
                         :type
                         (common-lisp:or anomaly-detector-arn common-lisp:null)
                         :accessor
                         struct-shape-get-log-anomaly-detector-request-anomaly-detector-arn
                         :shape "AnomalyDetectorArn" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-log-anomaly-detector-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-log-anomaly-detector-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-log-anomaly-detector-request
                    'make-get-log-anomaly-detector-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-log-anomaly-detector-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-log-anomaly-detector-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'anomaly-detector-arn))
      (common-lisp:list
       (common-lisp:cons "anomalyDetectorArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-log-anomaly-detector-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-log-anomaly-detector-response common-lisp:nil
                       ((detector-name :initarg :detector-name :initform
                         common-lisp:nil :type
                         (common-lisp:or detector-name common-lisp:null)
                         :accessor
                         struct-shape-get-log-anomaly-detector-response-detector-name
                         :shape "DetectorName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (log-group-arn-list :initarg :log-group-arn-list
                         :initform common-lisp:nil :type
                         (common-lisp:or log-group-arn-list common-lisp:null)
                         :accessor
                         struct-shape-get-log-anomaly-detector-response-log-group-arn-list
                         :shape "LogGroupArnList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (evaluation-frequency :initarg :evaluation-frequency
                         :initform common-lisp:nil :type
                         (common-lisp:or evaluation-frequency common-lisp:null)
                         :accessor
                         struct-shape-get-log-anomaly-detector-response-evaluation-frequency
                         :shape "EvaluationFrequency" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (filter-pattern :initarg :filter-pattern :initform
                         common-lisp:nil :type
                         (common-lisp:or filter-pattern common-lisp:null)
                         :accessor
                         struct-shape-get-log-anomaly-detector-response-filter-pattern
                         :shape "FilterPattern" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (anomaly-detector-status :initarg
                         :anomaly-detector-status :initform common-lisp:nil
                         :type
                         (common-lisp:or anomaly-detector-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-log-anomaly-detector-response-anomaly-detector-status
                         :shape "AnomalyDetectorStatus" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (kms-key-id :initarg :kms-key-id :initform
                         common-lisp:nil :type
                         (common-lisp:or kms-key-id common-lisp:null) :accessor
                         struct-shape-get-log-anomaly-detector-response-kms-key-id
                         :shape "KmsKeyId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (creation-time-stamp :initarg :creation-time-stamp
                         :initform common-lisp:nil :type
                         (common-lisp:or epoch-millis common-lisp:null)
                         :accessor
                         struct-shape-get-log-anomaly-detector-response-creation-time-stamp
                         :shape "EpochMillis" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-modified-time-stamp :initarg
                         :last-modified-time-stamp :initform common-lisp:nil
                         :type (common-lisp:or epoch-millis common-lisp:null)
                         :accessor
                         struct-shape-get-log-anomaly-detector-response-last-modified-time-stamp
                         :shape "EpochMillis" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (anomaly-visibility-time :initarg
                         :anomaly-visibility-time :initform common-lisp:nil
                         :type
                         (common-lisp:or anomaly-visibility-time
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-log-anomaly-detector-response-anomaly-visibility-time
                         :shape "AnomalyVisibilityTime" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-log-anomaly-detector-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-log-anomaly-detector-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-log-anomaly-detector-response
                    'make-get-log-anomaly-detector-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-log-anomaly-detector-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-log-anomaly-detector-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'detector-name))
      (common-lisp:list
       (common-lisp:cons "detectorName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-group-arn-list))
      (common-lisp:list
       (common-lisp:cons "logGroupArnList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'evaluation-frequency))
      (common-lisp:list
       (common-lisp:cons "evaluationFrequency"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter-pattern))
      (common-lisp:list
       (common-lisp:cons "filterPattern"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'anomaly-detector-status))
      (common-lisp:list
       (common-lisp:cons "anomalyDetectorStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "kmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time-stamp))
      (common-lisp:list
       (common-lisp:cons "creationTimeStamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-modified-time-stamp))
      (common-lisp:list
       (common-lisp:cons "lastModifiedTimeStamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'anomaly-visibility-time))
      (common-lisp:list
       (common-lisp:cons "anomalyVisibilityTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-log-anomaly-detector-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-log-events-request common-lisp:nil
                       ((log-group-name :initarg :log-group-name :initform
                         common-lisp:nil :type
                         (common-lisp:or log-group-name common-lisp:null)
                         :accessor
                         struct-shape-get-log-events-request-log-group-name
                         :shape "LogGroupName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (log-group-identifier :initarg :log-group-identifier
                         :initform common-lisp:nil :type
                         (common-lisp:or log-group-identifier common-lisp:null)
                         :accessor
                         struct-shape-get-log-events-request-log-group-identifier
                         :shape "LogGroupIdentifier" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (log-stream-name :initarg :log-stream-name :initform
                         (common-lisp:error ":logstreamname is required") :type
                         (common-lisp:or log-stream-name common-lisp:null)
                         :accessor
                         struct-shape-get-log-events-request-log-stream-name
                         :shape "LogStreamName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (start-time :initarg :start-time :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-get-log-events-request-start-time :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (end-time :initarg :end-time :initform common-lisp:nil
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor struct-shape-get-log-events-request-end-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-get-log-events-request-next-token :shape
                         "NextToken" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (limit :initarg :limit :initform common-lisp:nil :type
                         (common-lisp:or events-limit common-lisp:null)
                         :accessor struct-shape-get-log-events-request-limit
                         :shape "EventsLimit" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (start-from-head :initarg :start-from-head :initform
                         common-lisp:nil :type
                         (common-lisp:or start-from-head common-lisp:null)
                         :accessor
                         struct-shape-get-log-events-request-start-from-head
                         :shape "StartFromHead" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (unmask :initarg :unmask :initform common-lisp:nil
                         :type (common-lisp:or unmask common-lisp:null)
                         :accessor struct-shape-get-log-events-request-unmask
                         :shape "Unmask" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-log-events-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-log-events-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-log-events-request 'make-get-log-events-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-log-events-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-log-events-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-group-name))
      (common-lisp:list
       (common-lisp:cons "logGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'log-group-identifier))
      (common-lisp:list
       (common-lisp:cons "logGroupIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-stream-name))
      (common-lisp:list
       (common-lisp:cons "logStreamName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "startTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "endTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'limit))
      (common-lisp:list
       (common-lisp:cons "limit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-from-head))
      (common-lisp:list
       (common-lisp:cons "startFromHead"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'unmask))
      (common-lisp:list
       (common-lisp:cons "unmask"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-log-events-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-log-events-response common-lisp:nil
                       ((events :initarg :events :initform common-lisp:nil
                         :type
                         (common-lisp:or output-log-events common-lisp:null)
                         :accessor struct-shape-get-log-events-response-events
                         :shape "OutputLogEvents" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-forward-token :initarg :next-forward-token
                         :initform common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-get-log-events-response-next-forward-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-backward-token :initarg :next-backward-token
                         :initform common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-get-log-events-response-next-backward-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-log-events-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-log-events-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-log-events-response 'make-get-log-events-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-log-events-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-log-events-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'events))
      (common-lisp:list
       (common-lisp:cons "events"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-forward-token))
      (common-lisp:list
       (common-lisp:cons "nextForwardToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-backward-token))
      (common-lisp:list
       (common-lisp:cons "nextBackwardToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-log-events-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-log-group-fields-request common-lisp:nil
                       ((log-group-name :initarg :log-group-name :initform
                         common-lisp:nil :type
                         (common-lisp:or log-group-name common-lisp:null)
                         :accessor
                         struct-shape-get-log-group-fields-request-log-group-name
                         :shape "LogGroupName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (time :initarg :time :initform common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-get-log-group-fields-request-time :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (log-group-identifier :initarg :log-group-identifier
                         :initform common-lisp:nil :type
                         (common-lisp:or log-group-identifier common-lisp:null)
                         :accessor
                         struct-shape-get-log-group-fields-request-log-group-identifier
                         :shape "LogGroupIdentifier" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-log-group-fields-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-log-group-fields-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-log-group-fields-request
                    'make-get-log-group-fields-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-log-group-fields-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-log-group-fields-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-group-name))
      (common-lisp:list
       (common-lisp:cons "logGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'time))
      (common-lisp:list
       (common-lisp:cons "time"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'log-group-identifier))
      (common-lisp:list
       (common-lisp:cons "logGroupIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-log-group-fields-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-log-group-fields-response common-lisp:nil
                       ((log-group-fields :initarg :log-group-fields :initform
                         common-lisp:nil :type
                         (common-lisp:or log-group-field-list common-lisp:null)
                         :accessor
                         struct-shape-get-log-group-fields-response-log-group-fields
                         :shape "LogGroupFieldList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-log-group-fields-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-log-group-fields-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-log-group-fields-response
                    'make-get-log-group-fields-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-log-group-fields-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-log-group-fields-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-group-fields))
      (common-lisp:list
       (common-lisp:cons "logGroupFields"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-log-group-fields-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-log-record-request common-lisp:nil
                       ((log-record-pointer :initarg :log-record-pointer
                         :initform
                         (common-lisp:error ":logrecordpointer is required")
                         :type
                         (common-lisp:or log-record-pointer common-lisp:null)
                         :accessor
                         struct-shape-get-log-record-request-log-record-pointer
                         :shape "LogRecordPointer" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (unmask :initarg :unmask :initform common-lisp:nil
                         :type (common-lisp:or unmask common-lisp:null)
                         :accessor struct-shape-get-log-record-request-unmask
                         :shape "Unmask" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-log-record-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-log-record-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-log-record-request 'make-get-log-record-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-log-record-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-log-record-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-record-pointer))
      (common-lisp:list
       (common-lisp:cons "logRecordPointer"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'unmask))
      (common-lisp:list
       (common-lisp:cons "unmask"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-log-record-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-log-record-response common-lisp:nil
                       ((log-record :initarg :log-record :initform
                         common-lisp:nil :type
                         (common-lisp:or log-record common-lisp:null) :accessor
                         struct-shape-get-log-record-response-log-record :shape
                         "LogRecord" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-log-record-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-log-record-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-log-record-response 'make-get-log-record-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-log-record-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-log-record-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-record))
      (common-lisp:list
       (common-lisp:cons "logRecord"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-log-record-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-query-results-request common-lisp:nil
                       ((query-id :initarg :query-id :initform
                         (common-lisp:error ":queryid is required") :type
                         (common-lisp:or query-id common-lisp:null) :accessor
                         struct-shape-get-query-results-request-query-id :shape
                         "QueryId" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-query-results-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-query-results-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-query-results-request
                    'make-get-query-results-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-query-results-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-query-results-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-id))
      (common-lisp:list
       (common-lisp:cons "queryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-query-results-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-query-results-response common-lisp:nil
                       ((results :initarg :results :initform common-lisp:nil
                         :type (common-lisp:or query-results common-lisp:null)
                         :accessor
                         struct-shape-get-query-results-response-results :shape
                         "QueryResults" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (statistics :initarg :statistics :initform
                         common-lisp:nil :type
                         (common-lisp:or query-statistics common-lisp:null)
                         :accessor
                         struct-shape-get-query-results-response-statistics
                         :shape "QueryStatistics" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or query-status common-lisp:null)
                         :accessor
                         struct-shape-get-query-results-response-status :shape
                         "QueryStatus" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (encryption-key :initarg :encryption-key :initform
                         common-lisp:nil :type
                         (common-lisp:or encryption-key common-lisp:null)
                         :accessor
                         struct-shape-get-query-results-response-encryption-key
                         :shape "EncryptionKey" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-query-results-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-query-results-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-query-results-response
                    'make-get-query-results-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-query-results-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-query-results-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'results))
      (common-lisp:list
       (common-lisp:cons "results"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'statistics))
      (common-lisp:list
       (common-lisp:cons "statistics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encryption-key))
      (common-lisp:list
       (common-lisp:cons "encryptionKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-query-results-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype histogram () 'common-lisp:hash-table)
 (common-lisp:defun make-histogram (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype include-linked-accounts () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:deftype inherited-properties ()
   '(trivial-types:proper-list inherited-property))
 (common-lisp:defun make-inherited-properties
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list inherited-property))
   aws-sdk/generator/shape::members))
(common-lisp:deftype inherited-property () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass input-log-event common-lisp:nil
                       ((timestamp :initarg :timestamp :initform
                         (common-lisp:error ":string is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-input-log-event-timestamp :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (message :initarg :message :initform
                         (common-lisp:error ":message is required") :type
                         (common-lisp:or event-message common-lisp:null)
                         :accessor struct-shape-input-log-event-message :shape
                         "EventMessage" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-input-log-event
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'input-log-event
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'input-log-event 'make-input-log-event))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input input-log-event))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input input-log-event))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timestamp))
      (common-lisp:list
       (common-lisp:cons "timestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input input-log-event))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype input-log-events ()
   '(trivial-types:proper-list input-log-event))
 (common-lisp:defun make-input-log-events
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list input-log-event))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype input-log-stream-names ()
   '(trivial-types:proper-list log-stream-name))
 (common-lisp:defun make-input-log-stream-names
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list log-stream-name))
   aws-sdk/generator/shape::members))
(common-lisp:deftype integer () 'common-lisp:integer)
(common-lisp:deftype interleaved () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:define-condition invalid-operation-exception
     (logs-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-operation-exception)))
(common-lisp:progn
 (common-lisp:define-condition invalid-parameter-exception
     (logs-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-parameter-exception)))
(common-lisp:progn
 (common-lisp:define-condition invalid-sequence-token-exception
     (logs-error)
     ((expected-sequence-token :initarg :expected-sequence-token :initform
       common-lisp:nil :reader
       invalid-sequence-token-exception-expected-sequence-token)))
 (common-lisp:export
  (common-lisp:list 'invalid-sequence-token-exception
                    'invalid-sequence-token-exception-expected-sequence-token)))
(common-lisp:deftype is-sampled () 'common-lisp:boolean)
(common-lisp:deftype kms-key-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition limit-exceeded-exception
     (logs-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'limit-exceeded-exception)))
(common-lisp:deftype list-anomalies-limit () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass list-anomalies-request common-lisp:nil
                       ((anomaly-detector-arn :initarg :anomaly-detector-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or anomaly-detector-arn common-lisp:null)
                         :accessor
                         struct-shape-list-anomalies-request-anomaly-detector-arn
                         :shape "AnomalyDetectorArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (suppression-state :initarg :suppression-state
                         :initform common-lisp:nil :type
                         (common-lisp:or suppression-state common-lisp:null)
                         :accessor
                         struct-shape-list-anomalies-request-suppression-state
                         :shape "SuppressionState" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (limit :initarg :limit :initform common-lisp:nil :type
                         (common-lisp:or list-anomalies-limit common-lisp:null)
                         :accessor struct-shape-list-anomalies-request-limit
                         :shape "ListAnomaliesLimit" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-anomalies-request-next-token :shape
                         "NextToken" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-anomalies-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-anomalies-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-anomalies-request 'make-list-anomalies-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-anomalies-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-anomalies-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'anomaly-detector-arn))
      (common-lisp:list
       (common-lisp:cons "anomalyDetectorArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'suppression-state))
      (common-lisp:list
       (common-lisp:cons "suppressionState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'limit))
      (common-lisp:list
       (common-lisp:cons "limit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-anomalies-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-anomalies-response common-lisp:nil
                       ((anomalies :initarg :anomalies :initform
                         common-lisp:nil :type
                         (common-lisp:or anomalies common-lisp:null) :accessor
                         struct-shape-list-anomalies-response-anomalies :shape
                         "Anomalies" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-anomalies-response-next-token :shape
                         "NextToken" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-anomalies-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-anomalies-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-anomalies-response 'make-list-anomalies-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-anomalies-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-anomalies-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'anomalies))
      (common-lisp:list
       (common-lisp:cons "anomalies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-anomalies-response))
   common-lisp:nil))
(common-lisp:deftype list-log-anomaly-detectors-limit () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass list-log-anomaly-detectors-request common-lisp:nil
                       ((filter-log-group-arn :initarg :filter-log-group-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or log-group-arn common-lisp:null)
                         :accessor
                         struct-shape-list-log-anomaly-detectors-request-filter-log-group-arn
                         :shape "LogGroupArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (limit :initarg :limit :initform common-lisp:nil :type
                         (common-lisp:or list-log-anomaly-detectors-limit
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-log-anomaly-detectors-request-limit
                         :shape "ListLogAnomalyDetectorsLimit" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-log-anomaly-detectors-request-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-log-anomaly-detectors-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-log-anomaly-detectors-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-log-anomaly-detectors-request
                    'make-list-log-anomaly-detectors-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-log-anomaly-detectors-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-log-anomaly-detectors-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'filter-log-group-arn))
      (common-lisp:list
       (common-lisp:cons "filterLogGroupArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'limit))
      (common-lisp:list
       (common-lisp:cons "limit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-log-anomaly-detectors-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-log-anomaly-detectors-response common-lisp:nil
                       ((anomaly-detectors :initarg :anomaly-detectors
                         :initform common-lisp:nil :type
                         (common-lisp:or anomaly-detectors common-lisp:null)
                         :accessor
                         struct-shape-list-log-anomaly-detectors-response-anomaly-detectors
                         :shape "AnomalyDetectors" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-log-anomaly-detectors-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-log-anomaly-detectors-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-log-anomaly-detectors-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-log-anomaly-detectors-response
                    'make-list-log-anomaly-detectors-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-log-anomaly-detectors-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-log-anomaly-detectors-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'anomaly-detectors))
      (common-lisp:list
       (common-lisp:cons "anomalyDetectors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-log-anomaly-detectors-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-request common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resourcearn is required") :type
                         (common-lisp:or amazon-resource-name common-lisp:null)
                         :accessor
                         struct-shape-list-tags-for-resource-request-resource-arn
                         :shape "AmazonResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-tags-for-resource-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-request
                    'make-list-tags-for-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "resourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-response common-lisp:nil
                       ((tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         struct-shape-list-tags-for-resource-response-tags
                         :shape "Tags" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-tags-for-resource-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-response
                    'make-list-tags-for-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-log-group-request common-lisp:nil
                       ((log-group-name :initarg :log-group-name :initform
                         (common-lisp:error ":loggroupname is required") :type
                         (common-lisp:or log-group-name common-lisp:null)
                         :accessor
                         struct-shape-list-tags-log-group-request-log-group-name
                         :shape "LogGroupName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-tags-log-group-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-tags-log-group-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-tags-log-group-request
                    'make-list-tags-log-group-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-log-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-log-group-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-group-name))
      (common-lisp:list
       (common-lisp:cons "logGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-log-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-log-group-response common-lisp:nil
                       ((tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         struct-shape-list-tags-log-group-response-tags :shape
                         "Tags" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-tags-log-group-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-tags-log-group-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-tags-log-group-response
                    'make-list-tags-log-group-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-log-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-log-group-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-log-group-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass live-tail-session-log-event common-lisp:nil
                       ((log-stream-name :initarg :log-stream-name :initform
                         common-lisp:nil :type
                         (common-lisp:or log-stream-name common-lisp:null)
                         :accessor
                         struct-shape-live-tail-session-log-event-log-stream-name
                         :shape "LogStreamName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (log-group-identifier :initarg :log-group-identifier
                         :initform common-lisp:nil :type
                         (common-lisp:or log-group-identifier common-lisp:null)
                         :accessor
                         struct-shape-live-tail-session-log-event-log-group-identifier
                         :shape "LogGroupIdentifier" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (message :initarg :message :initform common-lisp:nil
                         :type (common-lisp:or event-message common-lisp:null)
                         :accessor
                         struct-shape-live-tail-session-log-event-message
                         :shape "EventMessage" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (timestamp :initarg :timestamp :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-live-tail-session-log-event-timestamp
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (ingestion-time :initarg :ingestion-time :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-live-tail-session-log-event-ingestion-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-live-tail-session-log-event
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'live-tail-session-log-event
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'live-tail-session-log-event
                    'make-live-tail-session-log-event))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          live-tail-session-log-event))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          live-tail-session-log-event))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-stream-name))
      (common-lisp:list
       (common-lisp:cons "logStreamName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'log-group-identifier))
      (common-lisp:list
       (common-lisp:cons "logGroupIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timestamp))
      (common-lisp:list
       (common-lisp:cons "timestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ingestion-time))
      (common-lisp:list
       (common-lisp:cons "ingestionTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          live-tail-session-log-event))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass live-tail-session-metadata common-lisp:nil
                       ((sampled :initarg :sampled :initform common-lisp:nil
                         :type (common-lisp:or is-sampled common-lisp:null)
                         :accessor
                         struct-shape-live-tail-session-metadata-sampled :shape
                         "IsSampled" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-live-tail-session-metadata
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'live-tail-session-metadata
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'live-tail-session-metadata
                    'make-live-tail-session-metadata))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          live-tail-session-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          live-tail-session-metadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sampled))
      (common-lisp:list
       (common-lisp:cons "sampled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          live-tail-session-metadata))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype live-tail-session-results ()
   '(trivial-types:proper-list live-tail-session-log-event))
 (common-lisp:defun make-live-tail-session-results
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            live-tail-session-log-event))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass live-tail-session-start common-lisp:nil
                       ((request-id :initarg :request-id :initform
                         common-lisp:nil :type
                         (common-lisp:or request-id common-lisp:null) :accessor
                         struct-shape-live-tail-session-start-request-id :shape
                         "RequestId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (session-id :initarg :session-id :initform
                         common-lisp:nil :type
                         (common-lisp:or session-id common-lisp:null) :accessor
                         struct-shape-live-tail-session-start-session-id :shape
                         "SessionId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (log-group-identifiers :initarg :log-group-identifiers
                         :initform common-lisp:nil :type
                         (common-lisp:or start-live-tail-log-group-identifiers
                                         common-lisp:null)
                         :accessor
                         struct-shape-live-tail-session-start-log-group-identifiers
                         :shape "StartLiveTailLogGroupIdentifiers" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (log-stream-names :initarg :log-stream-names :initform
                         common-lisp:nil :type
                         (common-lisp:or input-log-stream-names
                                         common-lisp:null)
                         :accessor
                         struct-shape-live-tail-session-start-log-stream-names
                         :shape "InputLogStreamNames" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (log-stream-name-prefixes :initarg
                         :log-stream-name-prefixes :initform common-lisp:nil
                         :type
                         (common-lisp:or input-log-stream-names
                                         common-lisp:null)
                         :accessor
                         struct-shape-live-tail-session-start-log-stream-name-prefixes
                         :shape "InputLogStreamNames" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (log-event-filter-pattern :initarg
                         :log-event-filter-pattern :initform common-lisp:nil
                         :type (common-lisp:or filter-pattern common-lisp:null)
                         :accessor
                         struct-shape-live-tail-session-start-log-event-filter-pattern
                         :shape "FilterPattern" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-live-tail-session-start
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'live-tail-session-start
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'live-tail-session-start 'make-live-tail-session-start))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          live-tail-session-start))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          live-tail-session-start))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "requestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session-id))
      (common-lisp:list
       (common-lisp:cons "sessionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'log-group-identifiers))
      (common-lisp:list
       (common-lisp:cons "logGroupIdentifiers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-stream-names))
      (common-lisp:list
       (common-lisp:cons "logStreamNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'log-stream-name-prefixes))
      (common-lisp:list
       (common-lisp:cons "logStreamNamePrefixes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'log-event-filter-pattern))
      (common-lisp:list
       (common-lisp:cons "logEventFilterPattern"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          live-tail-session-start))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass live-tail-session-update common-lisp:nil
                       ((session-metadata :initarg :session-metadata :initform
                         common-lisp:nil :type
                         (common-lisp:or live-tail-session-metadata
                                         common-lisp:null)
                         :accessor
                         struct-shape-live-tail-session-update-session-metadata
                         :shape "LiveTailSessionMetadata" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (session-results :initarg :session-results :initform
                         common-lisp:nil :type
                         (common-lisp:or live-tail-session-results
                                         common-lisp:null)
                         :accessor
                         struct-shape-live-tail-session-update-session-results
                         :shape "LiveTailSessionResults" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-live-tail-session-update
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'live-tail-session-update
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'live-tail-session-update 'make-live-tail-session-update))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          live-tail-session-update))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          live-tail-session-update))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session-metadata))
      (common-lisp:list
       (common-lisp:cons "sessionMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session-results))
      (common-lisp:list
       (common-lisp:cons "sessionResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          live-tail-session-update))
   common-lisp:nil))
(common-lisp:deftype log-event () 'common-lisp:string)
(common-lisp:deftype log-event-index () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass log-group common-lisp:nil
                       ((log-group-name :initarg :log-group-name :initform
                         common-lisp:nil :type
                         (common-lisp:or log-group-name common-lisp:null)
                         :accessor struct-shape-log-group-log-group-name :shape
                         "LogGroupName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (creation-time :initarg :creation-time :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-log-group-creation-time :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (retention-in-days :initarg :retention-in-days
                         :initform common-lisp:nil :type
                         (common-lisp:or days common-lisp:null) :accessor
                         struct-shape-log-group-retention-in-days :shape "Days"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (metric-filter-count :initarg :metric-filter-count
                         :initform common-lisp:nil :type
                         (common-lisp:or filter-count common-lisp:null)
                         :accessor struct-shape-log-group-metric-filter-count
                         :shape "FilterCount" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-log-group-arn :shape "Arn" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (stored-bytes :initarg :stored-bytes :initform
                         common-lisp:nil :type
                         (common-lisp:or stored-bytes common-lisp:null)
                         :accessor struct-shape-log-group-stored-bytes :shape
                         "StoredBytes" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (kms-key-id :initarg :kms-key-id :initform
                         common-lisp:nil :type
                         (common-lisp:or kms-key-id common-lisp:null) :accessor
                         struct-shape-log-group-kms-key-id :shape "KmsKeyId"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (data-protection-status :initarg
                         :data-protection-status :initform common-lisp:nil
                         :type
                         (common-lisp:or data-protection-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-log-group-data-protection-status :shape
                         "DataProtectionStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (inherited-properties :initarg :inherited-properties
                         :initform common-lisp:nil :type
                         (common-lisp:or inherited-properties common-lisp:null)
                         :accessor struct-shape-log-group-inherited-properties
                         :shape "InheritedProperties" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (log-group-class :initarg :log-group-class :initform
                         common-lisp:nil :type
                         (common-lisp:or log-group-class common-lisp:null)
                         :accessor struct-shape-log-group-log-group-class
                         :shape "LogGroupClass" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (log-group-arn :initarg :log-group-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-log-group-log-group-arn :shape "Arn"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-log-group
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'log-group
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'log-group 'make-log-group))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input log-group))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input log-group))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-group-name))
      (common-lisp:list
       (common-lisp:cons "logGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "creationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'retention-in-days))
      (common-lisp:list
       (common-lisp:cons "retentionInDays"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-filter-count))
      (common-lisp:list
       (common-lisp:cons "metricFilterCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stored-bytes))
      (common-lisp:list
       (common-lisp:cons "storedBytes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "kmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-protection-status))
      (common-lisp:list
       (common-lisp:cons "dataProtectionStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'inherited-properties))
      (common-lisp:list
       (common-lisp:cons "inheritedProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-group-class))
      (common-lisp:list
       (common-lisp:cons "logGroupClass"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-group-arn))
      (common-lisp:list
       (common-lisp:cons "logGroupArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input log-group))
   common-lisp:nil))
(common-lisp:deftype log-group-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype log-group-arn-list ()
   '(trivial-types:proper-list log-group-arn))
 (common-lisp:defun make-log-group-arn-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list log-group-arn))
   aws-sdk/generator/shape::members))
(common-lisp:deftype log-group-class () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass log-group-field common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or field common-lisp:null) :accessor
                         struct-shape-log-group-field-name :shape "Field"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (percent :initarg :percent :initform common-lisp:nil
                         :type (common-lisp:or percentage common-lisp:null)
                         :accessor struct-shape-log-group-field-percent :shape
                         "Percentage" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-log-group-field
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'log-group-field
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'log-group-field 'make-log-group-field))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input log-group-field))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input log-group-field))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'percent))
      (common-lisp:list
       (common-lisp:cons "percent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input log-group-field))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype log-group-field-list ()
   '(trivial-types:proper-list log-group-field))
 (common-lisp:defun make-log-group-field-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list log-group-field))
   aws-sdk/generator/shape::members))
(common-lisp:deftype log-group-identifier () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype log-group-identifiers ()
   '(trivial-types:proper-list log-group-identifier))
 (common-lisp:defun make-log-group-identifiers
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list log-group-identifier))
   aws-sdk/generator/shape::members))
(common-lisp:deftype log-group-name () 'common-lisp:string)
(common-lisp:deftype log-group-name-pattern () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype log-group-names ()
   '(trivial-types:proper-list log-group-name))
 (common-lisp:defun make-log-group-names
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list log-group-name))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype log-groups () '(trivial-types:proper-list log-group))
 (common-lisp:defun make-log-groups
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list log-group))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype log-record () 'common-lisp:hash-table)
 (common-lisp:defun make-log-record (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype log-record-pointer () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype log-samples () '(trivial-types:proper-list log-event))
 (common-lisp:defun make-log-samples
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list log-event))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass log-stream common-lisp:nil
                       ((log-stream-name :initarg :log-stream-name :initform
                         common-lisp:nil :type
                         (common-lisp:or log-stream-name common-lisp:null)
                         :accessor struct-shape-log-stream-log-stream-name
                         :shape "LogStreamName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (creation-time :initarg :creation-time :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-log-stream-creation-time :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (first-event-timestamp :initarg :first-event-timestamp
                         :initform common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-log-stream-first-event-timestamp :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (last-event-timestamp :initarg :last-event-timestamp
                         :initform common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-log-stream-last-event-timestamp :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (last-ingestion-time :initarg :last-ingestion-time
                         :initform common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-log-stream-last-ingestion-time :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (upload-sequence-token :initarg :upload-sequence-token
                         :initform common-lisp:nil :type
                         (common-lisp:or sequence-token common-lisp:null)
                         :accessor
                         struct-shape-log-stream-upload-sequence-token :shape
                         "SequenceToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-log-stream-arn :shape "Arn" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (stored-bytes :initarg :stored-bytes :initform
                         common-lisp:nil :type
                         (common-lisp:or stored-bytes common-lisp:null)
                         :accessor struct-shape-log-stream-stored-bytes :shape
                         "StoredBytes" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-log-stream
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'log-stream
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'log-stream 'make-log-stream))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input log-stream))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input log-stream))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-stream-name))
      (common-lisp:list
       (common-lisp:cons "logStreamName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "creationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'first-event-timestamp))
      (common-lisp:list
       (common-lisp:cons "firstEventTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-event-timestamp))
      (common-lisp:list
       (common-lisp:cons "lastEventTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-ingestion-time))
      (common-lisp:list
       (common-lisp:cons "lastIngestionTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'upload-sequence-token))
      (common-lisp:list
       (common-lisp:cons "uploadSequenceToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stored-bytes))
      (common-lisp:list
       (common-lisp:cons "storedBytes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input log-stream))
   common-lisp:nil))
(common-lisp:deftype log-stream-name () 'common-lisp:string)
(common-lisp:deftype log-stream-searched-completely () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:deftype log-streams () '(trivial-types:proper-list log-stream))
 (common-lisp:defun make-log-streams
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list log-stream))
   aws-sdk/generator/shape::members))
(common-lisp:deftype log-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition malformed-query-exception
     (logs-error)
     ((query-compile-error :initarg :query-compile-error :initform
       common-lisp:nil :reader malformed-query-exception-query-compile-error)))
 (common-lisp:export
  (common-lisp:list 'malformed-query-exception
                    'malformed-query-exception-query-compile-error)))
(common-lisp:deftype message () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass metric-filter common-lisp:nil
                       ((filter-name :initarg :filter-name :initform
                         common-lisp:nil :type
                         (common-lisp:or filter-name common-lisp:null)
                         :accessor struct-shape-metric-filter-filter-name
                         :shape "FilterName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (filter-pattern :initarg :filter-pattern :initform
                         common-lisp:nil :type
                         (common-lisp:or filter-pattern common-lisp:null)
                         :accessor struct-shape-metric-filter-filter-pattern
                         :shape "FilterPattern" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (metric-transformations :initarg
                         :metric-transformations :initform common-lisp:nil
                         :type
                         (common-lisp:or metric-transformations
                                         common-lisp:null)
                         :accessor
                         struct-shape-metric-filter-metric-transformations
                         :shape "MetricTransformations" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (creation-time :initarg :creation-time :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-metric-filter-creation-time :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (log-group-name :initarg :log-group-name :initform
                         common-lisp:nil :type
                         (common-lisp:or log-group-name common-lisp:null)
                         :accessor struct-shape-metric-filter-log-group-name
                         :shape "LogGroupName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-metric-filter
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'metric-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'metric-filter 'make-metric-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input metric-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input metric-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter-name))
      (common-lisp:list
       (common-lisp:cons "filterName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter-pattern))
      (common-lisp:list
       (common-lisp:cons "filterPattern"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'metric-transformations))
      (common-lisp:list
       (common-lisp:cons "metricTransformations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "creationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-group-name))
      (common-lisp:list
       (common-lisp:cons "logGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input metric-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass metric-filter-match-record common-lisp:nil
                       ((event-number :initarg :event-number :initform
                         common-lisp:nil :type
                         (common-lisp:or event-number common-lisp:null)
                         :accessor
                         struct-shape-metric-filter-match-record-event-number
                         :shape "EventNumber" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (event-message :initarg :event-message :initform
                         common-lisp:nil :type
                         (common-lisp:or event-message common-lisp:null)
                         :accessor
                         struct-shape-metric-filter-match-record-event-message
                         :shape "EventMessage" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (extracted-values :initarg :extracted-values :initform
                         common-lisp:nil :type
                         (common-lisp:or extracted-values common-lisp:null)
                         :accessor
                         struct-shape-metric-filter-match-record-extracted-values
                         :shape "ExtractedValues" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-metric-filter-match-record
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'metric-filter-match-record
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'metric-filter-match-record
                    'make-metric-filter-match-record))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          metric-filter-match-record))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          metric-filter-match-record))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-number))
      (common-lisp:list
       (common-lisp:cons "eventNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-message))
      (common-lisp:list
       (common-lisp:cons "eventMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'extracted-values))
      (common-lisp:list
       (common-lisp:cons "extractedValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          metric-filter-match-record))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype metric-filter-matches ()
   '(trivial-types:proper-list metric-filter-match-record))
 (common-lisp:defun make-metric-filter-matches
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            metric-filter-match-record))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype metric-filters ()
   '(trivial-types:proper-list metric-filter))
 (common-lisp:defun make-metric-filters
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list metric-filter))
   aws-sdk/generator/shape::members))
(common-lisp:deftype metric-name () 'common-lisp:string)
(common-lisp:deftype metric-namespace () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass metric-transformation common-lisp:nil
                       ((metric-name :initarg :metric-name :initform
                         (common-lisp:error ":metricname is required") :type
                         (common-lisp:or metric-name common-lisp:null)
                         :accessor
                         struct-shape-metric-transformation-metric-name :shape
                         "MetricName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (metric-namespace :initarg :metric-namespace :initform
                         (common-lisp:error ":metricnamespace is required")
                         :type
                         (common-lisp:or metric-namespace common-lisp:null)
                         :accessor
                         struct-shape-metric-transformation-metric-namespace
                         :shape "MetricNamespace" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (metric-value :initarg :metric-value :initform
                         (common-lisp:error ":metricvalue is required") :type
                         (common-lisp:or metric-value common-lisp:null)
                         :accessor
                         struct-shape-metric-transformation-metric-value :shape
                         "MetricValue" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (default-value :initarg :default-value :initform
                         common-lisp:nil :type
                         (common-lisp:or default-value common-lisp:null)
                         :accessor
                         struct-shape-metric-transformation-default-value
                         :shape "DefaultValue" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dimensions :initarg :dimensions :initform
                         common-lisp:nil :type
                         (common-lisp:or dimensions common-lisp:null) :accessor
                         struct-shape-metric-transformation-dimensions :shape
                         "Dimensions" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (unit :initarg :unit :initform common-lisp:nil :type
                         (common-lisp:or standard-unit common-lisp:null)
                         :accessor struct-shape-metric-transformation-unit
                         :shape "StandardUnit" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-metric-transformation
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'metric-transformation
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'metric-transformation 'make-metric-transformation))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          metric-transformation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          metric-transformation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-name))
      (common-lisp:list
       (common-lisp:cons "metricName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-namespace))
      (common-lisp:list
       (common-lisp:cons "metricNamespace"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-value))
      (common-lisp:list
       (common-lisp:cons "metricValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-value))
      (common-lisp:list
       (common-lisp:cons "defaultValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dimensions))
      (common-lisp:list
       (common-lisp:cons "dimensions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'unit))
      (common-lisp:list
       (common-lisp:cons "unit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          metric-transformation))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype metric-transformations ()
   '(trivial-types:proper-list metric-transformation))
 (common-lisp:defun make-metric-transformations
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list metric-transformation))
   aws-sdk/generator/shape::members))
(common-lisp:deftype metric-value () 'common-lisp:string)
(common-lisp:deftype next-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition operation-aborted-exception
     (logs-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'operation-aborted-exception)))
(common-lisp:deftype order-by () 'common-lisp:string)
(common-lisp:deftype output-format () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass output-log-event common-lisp:nil
                       ((timestamp :initarg :timestamp :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-output-log-event-timestamp :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (message :initarg :message :initform common-lisp:nil
                         :type (common-lisp:or event-message common-lisp:null)
                         :accessor struct-shape-output-log-event-message :shape
                         "EventMessage" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (ingestion-time :initarg :ingestion-time :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-output-log-event-ingestion-time :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-output-log-event
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'output-log-event
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'output-log-event 'make-output-log-event))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input output-log-event))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input output-log-event))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timestamp))
      (common-lisp:list
       (common-lisp:cons "timestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ingestion-time))
      (common-lisp:list
       (common-lisp:cons "ingestionTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input output-log-event))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype output-log-events ()
   '(trivial-types:proper-list output-log-event))
 (common-lisp:defun make-output-log-events
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list output-log-event))
   aws-sdk/generator/shape::members))
(common-lisp:deftype pattern-id () 'common-lisp:string)
(common-lisp:deftype pattern-regex () 'common-lisp:string)
(common-lisp:deftype pattern-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass pattern-token common-lisp:nil
                       ((dynamic-token-position :initarg
                         :dynamic-token-position :initform common-lisp:nil
                         :type
                         (common-lisp:or dynamic-token-position
                                         common-lisp:null)
                         :accessor
                         struct-shape-pattern-token-dynamic-token-position
                         :shape "DynamicTokenPosition" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (is-dynamic :initarg :is-dynamic :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-pattern-token-is-dynamic :shape "Boolean"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (token-string :initarg :token-string :initform
                         common-lisp:nil :type
                         (common-lisp:or token-string common-lisp:null)
                         :accessor struct-shape-pattern-token-token-string
                         :shape "TokenString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (enumerations :initarg :enumerations :initform
                         common-lisp:nil :type
                         (common-lisp:or enumerations common-lisp:null)
                         :accessor struct-shape-pattern-token-enumerations
                         :shape "Enumerations" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-pattern-token
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'pattern-token
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'pattern-token 'make-pattern-token))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input pattern-token))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input pattern-token))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dynamic-token-position))
      (common-lisp:list
       (common-lisp:cons "dynamicTokenPosition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-dynamic))
      (common-lisp:list
       (common-lisp:cons "isDynamic"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'token-string))
      (common-lisp:list
       (common-lisp:cons "tokenString"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enumerations))
      (common-lisp:list
       (common-lisp:cons "enumerations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input pattern-token))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype pattern-tokens ()
   '(trivial-types:proper-list pattern-token))
 (common-lisp:defun make-pattern-tokens
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list pattern-token))
   aws-sdk/generator/shape::members))
(common-lisp:deftype percentage () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass policy common-lisp:nil
                       ((delivery-destination-policy :initarg
                         :delivery-destination-policy :initform common-lisp:nil
                         :type
                         (common-lisp:or delivery-destination-policy
                                         common-lisp:null)
                         :accessor
                         struct-shape-policy-delivery-destination-policy :shape
                         "DeliveryDestinationPolicy" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-policy
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'policy
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'policy 'make-policy))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input policy))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input policy))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'delivery-destination-policy))
      (common-lisp:list
       (common-lisp:cons "deliveryDestinationPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input policy))
   common-lisp:nil))
(common-lisp:deftype policy-document () 'common-lisp:string)
(common-lisp:deftype policy-name () 'common-lisp:string)
(common-lisp:deftype policy-type () 'common-lisp:string)
(common-lisp:deftype priority () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass put-account-policy-request common-lisp:nil
                       ((policy-name :initarg :policy-name :initform
                         (common-lisp:error ":policyname is required") :type
                         (common-lisp:or policy-name common-lisp:null)
                         :accessor
                         struct-shape-put-account-policy-request-policy-name
                         :shape "PolicyName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (policy-document :initarg :policy-document :initform
                         (common-lisp:error ":policydocument is required")
                         :type
                         (common-lisp:or account-policy-document
                                         common-lisp:null)
                         :accessor
                         struct-shape-put-account-policy-request-policy-document
                         :shape "AccountPolicyDocument" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (policy-type :initarg :policy-type :initform
                         (common-lisp:error ":policytype is required") :type
                         (common-lisp:or policy-type common-lisp:null)
                         :accessor
                         struct-shape-put-account-policy-request-policy-type
                         :shape "PolicyType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (scope :initarg :scope :initform common-lisp:nil :type
                         (common-lisp:or scope common-lisp:null) :accessor
                         struct-shape-put-account-policy-request-scope :shape
                         "Scope" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (selection-criteria :initarg :selection-criteria
                         :initform common-lisp:nil :type
                         (common-lisp:or selection-criteria common-lisp:null)
                         :accessor
                         struct-shape-put-account-policy-request-selection-criteria
                         :shape "SelectionCriteria" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-account-policy-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'put-account-policy-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-account-policy-request
                    'make-put-account-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-account-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-account-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-name))
      (common-lisp:list
       (common-lisp:cons "policyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-document))
      (common-lisp:list
       (common-lisp:cons "policyDocument"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-type))
      (common-lisp:list
       (common-lisp:cons "policyType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scope))
      (common-lisp:list
       (common-lisp:cons "scope"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'selection-criteria))
      (common-lisp:list
       (common-lisp:cons "selectionCriteria"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-account-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-account-policy-response common-lisp:nil
                       ((account-policy :initarg :account-policy :initform
                         common-lisp:nil :type
                         (common-lisp:or account-policy common-lisp:null)
                         :accessor
                         struct-shape-put-account-policy-response-account-policy
                         :shape "AccountPolicy" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-account-policy-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'put-account-policy-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-account-policy-response
                    'make-put-account-policy-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-account-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-account-policy-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-policy))
      (common-lisp:list
       (common-lisp:cons "accountPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-account-policy-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-data-protection-policy-request common-lisp:nil
                       ((log-group-identifier :initarg :log-group-identifier
                         :initform
                         (common-lisp:error ":loggroupidentifier is required")
                         :type
                         (common-lisp:or log-group-identifier common-lisp:null)
                         :accessor
                         struct-shape-put-data-protection-policy-request-log-group-identifier
                         :shape "LogGroupIdentifier" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (policy-document :initarg :policy-document :initform
                         (common-lisp:error ":policydocument is required")
                         :type
                         (common-lisp:or data-protection-policy-document
                                         common-lisp:null)
                         :accessor
                         struct-shape-put-data-protection-policy-request-policy-document
                         :shape "DataProtectionPolicyDocument" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-data-protection-policy-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-data-protection-policy-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-data-protection-policy-request
                    'make-put-data-protection-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-data-protection-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-data-protection-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'log-group-identifier))
      (common-lisp:list
       (common-lisp:cons "logGroupIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-document))
      (common-lisp:list
       (common-lisp:cons "policyDocument"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-data-protection-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-data-protection-policy-response common-lisp:nil
                       ((log-group-identifier :initarg :log-group-identifier
                         :initform common-lisp:nil :type
                         (common-lisp:or log-group-identifier common-lisp:null)
                         :accessor
                         struct-shape-put-data-protection-policy-response-log-group-identifier
                         :shape "LogGroupIdentifier" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (policy-document :initarg :policy-document :initform
                         common-lisp:nil :type
                         (common-lisp:or data-protection-policy-document
                                         common-lisp:null)
                         :accessor
                         struct-shape-put-data-protection-policy-response-policy-document
                         :shape "DataProtectionPolicyDocument" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (last-updated-time :initarg :last-updated-time
                         :initform common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-put-data-protection-policy-response-last-updated-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-data-protection-policy-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-data-protection-policy-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-data-protection-policy-response
                    'make-put-data-protection-policy-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-data-protection-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-data-protection-policy-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'log-group-identifier))
      (common-lisp:list
       (common-lisp:cons "logGroupIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-document))
      (common-lisp:list
       (common-lisp:cons "policyDocument"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-time))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-data-protection-policy-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-delivery-destination-policy-request common-lisp:nil
                       ((delivery-destination-name :initarg
                         :delivery-destination-name :initform
                         (common-lisp:error
                          ":deliverydestinationname is required")
                         :type
                         (common-lisp:or delivery-destination-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-put-delivery-destination-policy-request-delivery-destination-name
                         :shape "DeliveryDestinationName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (delivery-destination-policy :initarg
                         :delivery-destination-policy :initform
                         (common-lisp:error
                          ":deliverydestinationpolicy is required")
                         :type
                         (common-lisp:or delivery-destination-policy
                                         common-lisp:null)
                         :accessor
                         struct-shape-put-delivery-destination-policy-request-delivery-destination-policy
                         :shape "DeliveryDestinationPolicy" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-delivery-destination-policy-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-delivery-destination-policy-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-delivery-destination-policy-request
                    'make-put-delivery-destination-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-delivery-destination-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-delivery-destination-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'delivery-destination-name))
      (common-lisp:list
       (common-lisp:cons "deliveryDestinationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'delivery-destination-policy))
      (common-lisp:list
       (common-lisp:cons "deliveryDestinationPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-delivery-destination-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-delivery-destination-policy-response common-lisp:nil
                       ((policy :initarg :policy :initform common-lisp:nil
                         :type (common-lisp:or policy common-lisp:null)
                         :accessor
                         struct-shape-put-delivery-destination-policy-response-policy
                         :shape "Policy" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-delivery-destination-policy-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-delivery-destination-policy-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-delivery-destination-policy-response
                    'make-put-delivery-destination-policy-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-delivery-destination-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-delivery-destination-policy-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy))
      (common-lisp:list
       (common-lisp:cons "policy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-delivery-destination-policy-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-delivery-destination-request common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or delivery-destination-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-put-delivery-destination-request-name
                         :shape "DeliveryDestinationName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (output-format :initarg :output-format :initform
                         common-lisp:nil :type
                         (common-lisp:or output-format common-lisp:null)
                         :accessor
                         struct-shape-put-delivery-destination-request-output-format
                         :shape "OutputFormat" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (delivery-destination-configuration :initarg
                         :delivery-destination-configuration :initform
                         (common-lisp:error
                          ":deliverydestinationconfiguration is required")
                         :type
                         (common-lisp:or delivery-destination-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-put-delivery-destination-request-delivery-destination-configuration
                         :shape "DeliveryDestinationConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         struct-shape-put-delivery-destination-request-tags
                         :shape "Tags" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-delivery-destination-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-delivery-destination-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-delivery-destination-request
                    'make-put-delivery-destination-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-delivery-destination-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-delivery-destination-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-format))
      (common-lisp:list
       (common-lisp:cons "outputFormat"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'delivery-destination-configuration))
      (common-lisp:list
       (common-lisp:cons "deliveryDestinationConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-delivery-destination-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-delivery-destination-response common-lisp:nil
                       ((delivery-destination :initarg :delivery-destination
                         :initform common-lisp:nil :type
                         (common-lisp:or delivery-destination common-lisp:null)
                         :accessor
                         struct-shape-put-delivery-destination-response-delivery-destination
                         :shape "DeliveryDestination" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-delivery-destination-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-delivery-destination-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-delivery-destination-response
                    'make-put-delivery-destination-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-delivery-destination-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-delivery-destination-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'delivery-destination))
      (common-lisp:list
       (common-lisp:cons "deliveryDestination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-delivery-destination-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-delivery-source-request common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or delivery-source-name common-lisp:null)
                         :accessor
                         struct-shape-put-delivery-source-request-name :shape
                         "DeliverySourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resourcearn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-put-delivery-source-request-resource-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (log-type :initarg :log-type :initform
                         (common-lisp:error ":logtype is required") :type
                         (common-lisp:or log-type common-lisp:null) :accessor
                         struct-shape-put-delivery-source-request-log-type
                         :shape "LogType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         struct-shape-put-delivery-source-request-tags :shape
                         "Tags" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-delivery-source-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'put-delivery-source-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-delivery-source-request
                    'make-put-delivery-source-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-delivery-source-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-delivery-source-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "resourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-type))
      (common-lisp:list
       (common-lisp:cons "logType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-delivery-source-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-delivery-source-response common-lisp:nil
                       ((delivery-source :initarg :delivery-source :initform
                         common-lisp:nil :type
                         (common-lisp:or delivery-source common-lisp:null)
                         :accessor
                         struct-shape-put-delivery-source-response-delivery-source
                         :shape "DeliverySource" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-delivery-source-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'put-delivery-source-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-delivery-source-response
                    'make-put-delivery-source-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-delivery-source-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-delivery-source-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'delivery-source))
      (common-lisp:list
       (common-lisp:cons "deliverySource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-delivery-source-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-destination-policy-request common-lisp:nil
                       ((destination-name :initarg :destination-name :initform
                         (common-lisp:error ":destinationname is required")
                         :type
                         (common-lisp:or destination-name common-lisp:null)
                         :accessor
                         struct-shape-put-destination-policy-request-destination-name
                         :shape "DestinationName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (access-policy :initarg :access-policy :initform
                         (common-lisp:error ":accesspolicy is required") :type
                         (common-lisp:or access-policy common-lisp:null)
                         :accessor
                         struct-shape-put-destination-policy-request-access-policy
                         :shape "AccessPolicy" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (force-update :initarg :force-update :initform
                         common-lisp:nil :type
                         (common-lisp:or force-update common-lisp:null)
                         :accessor
                         struct-shape-put-destination-policy-request-force-update
                         :shape "ForceUpdate" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-destination-policy-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-destination-policy-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-destination-policy-request
                    'make-put-destination-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-destination-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-destination-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination-name))
      (common-lisp:list
       (common-lisp:cons "destinationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-policy))
      (common-lisp:list
       (common-lisp:cons "accessPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'force-update))
      (common-lisp:list
       (common-lisp:cons "forceUpdate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-destination-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-destination-request common-lisp:nil
                       ((destination-name :initarg :destination-name :initform
                         (common-lisp:error ":destinationname is required")
                         :type
                         (common-lisp:or destination-name common-lisp:null)
                         :accessor
                         struct-shape-put-destination-request-destination-name
                         :shape "DestinationName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (target-arn :initarg :target-arn :initform
                         (common-lisp:error ":targetarn is required") :type
                         (common-lisp:or target-arn common-lisp:null) :accessor
                         struct-shape-put-destination-request-target-arn :shape
                         "TargetArn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (role-arn :initarg :role-arn :initform
                         (common-lisp:error ":rolearn is required") :type
                         (common-lisp:or role-arn common-lisp:null) :accessor
                         struct-shape-put-destination-request-role-arn :shape
                         "RoleArn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         struct-shape-put-destination-request-tags :shape
                         "Tags" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-destination-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'put-destination-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-destination-request 'make-put-destination-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-destination-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-destination-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination-name))
      (common-lisp:list
       (common-lisp:cons "destinationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-arn))
      (common-lisp:list
       (common-lisp:cons "targetArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-destination-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-destination-response common-lisp:nil
                       ((destination :initarg :destination :initform
                         common-lisp:nil :type
                         (common-lisp:or destination common-lisp:null)
                         :accessor
                         struct-shape-put-destination-response-destination
                         :shape "Destination" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-destination-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'put-destination-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-destination-response 'make-put-destination-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-destination-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-destination-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination))
      (common-lisp:list
       (common-lisp:cons "destination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-destination-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-log-events-request common-lisp:nil
                       ((log-group-name :initarg :log-group-name :initform
                         (common-lisp:error ":loggroupname is required") :type
                         (common-lisp:or log-group-name common-lisp:null)
                         :accessor
                         struct-shape-put-log-events-request-log-group-name
                         :shape "LogGroupName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (log-stream-name :initarg :log-stream-name :initform
                         (common-lisp:error ":logstreamname is required") :type
                         (common-lisp:or log-stream-name common-lisp:null)
                         :accessor
                         struct-shape-put-log-events-request-log-stream-name
                         :shape "LogStreamName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (log-events :initarg :log-events :initform
                         (common-lisp:error ":logevents is required") :type
                         (common-lisp:or input-log-events common-lisp:null)
                         :accessor
                         struct-shape-put-log-events-request-log-events :shape
                         "InputLogEvents" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (sequence-token :initarg :sequence-token :initform
                         common-lisp:nil :type
                         (common-lisp:or sequence-token common-lisp:null)
                         :accessor
                         struct-shape-put-log-events-request-sequence-token
                         :shape "SequenceToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-log-events-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'put-log-events-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-log-events-request 'make-put-log-events-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-log-events-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-log-events-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-group-name))
      (common-lisp:list
       (common-lisp:cons "logGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-stream-name))
      (common-lisp:list
       (common-lisp:cons "logStreamName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-events))
      (common-lisp:list
       (common-lisp:cons "logEvents"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sequence-token))
      (common-lisp:list
       (common-lisp:cons "sequenceToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-log-events-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-log-events-response common-lisp:nil
                       ((next-sequence-token :initarg :next-sequence-token
                         :initform common-lisp:nil :type
                         (common-lisp:or sequence-token common-lisp:null)
                         :accessor
                         struct-shape-put-log-events-response-next-sequence-token
                         :shape "SequenceToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (rejected-log-events-info :initarg
                         :rejected-log-events-info :initform common-lisp:nil
                         :type
                         (common-lisp:or rejected-log-events-info
                                         common-lisp:null)
                         :accessor
                         struct-shape-put-log-events-response-rejected-log-events-info
                         :shape "RejectedLogEventsInfo" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-log-events-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'put-log-events-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-log-events-response 'make-put-log-events-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-log-events-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-log-events-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-sequence-token))
      (common-lisp:list
       (common-lisp:cons "nextSequenceToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'rejected-log-events-info))
      (common-lisp:list
       (common-lisp:cons "rejectedLogEventsInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-log-events-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-metric-filter-request common-lisp:nil
                       ((log-group-name :initarg :log-group-name :initform
                         (common-lisp:error ":loggroupname is required") :type
                         (common-lisp:or log-group-name common-lisp:null)
                         :accessor
                         struct-shape-put-metric-filter-request-log-group-name
                         :shape "LogGroupName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (filter-name :initarg :filter-name :initform
                         (common-lisp:error ":filtername is required") :type
                         (common-lisp:or filter-name common-lisp:null)
                         :accessor
                         struct-shape-put-metric-filter-request-filter-name
                         :shape "FilterName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (filter-pattern :initarg :filter-pattern :initform
                         (common-lisp:error ":filterpattern is required") :type
                         (common-lisp:or filter-pattern common-lisp:null)
                         :accessor
                         struct-shape-put-metric-filter-request-filter-pattern
                         :shape "FilterPattern" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (metric-transformations :initarg
                         :metric-transformations :initform
                         (common-lisp:error
                          ":metrictransformations is required")
                         :type
                         (common-lisp:or metric-transformations
                                         common-lisp:null)
                         :accessor
                         struct-shape-put-metric-filter-request-metric-transformations
                         :shape "MetricTransformations" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-metric-filter-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'put-metric-filter-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-metric-filter-request
                    'make-put-metric-filter-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-metric-filter-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-metric-filter-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-group-name))
      (common-lisp:list
       (common-lisp:cons "logGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter-name))
      (common-lisp:list
       (common-lisp:cons "filterName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter-pattern))
      (common-lisp:list
       (common-lisp:cons "filterPattern"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'metric-transformations))
      (common-lisp:list
       (common-lisp:cons "metricTransformations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-metric-filter-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-query-definition-request common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or query-definition-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-put-query-definition-request-name :shape
                         "QueryDefinitionName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (query-definition-id :initarg :query-definition-id
                         :initform common-lisp:nil :type
                         (common-lisp:or query-id common-lisp:null) :accessor
                         struct-shape-put-query-definition-request-query-definition-id
                         :shape "QueryId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (log-group-names :initarg :log-group-names :initform
                         common-lisp:nil :type
                         (common-lisp:or log-group-names common-lisp:null)
                         :accessor
                         struct-shape-put-query-definition-request-log-group-names
                         :shape "LogGroupNames" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (query-string :initarg :query-string :initform
                         (common-lisp:error ":querystring is required") :type
                         (common-lisp:or query-definition-string
                                         common-lisp:null)
                         :accessor
                         struct-shape-put-query-definition-request-query-string
                         :shape "QueryDefinitionString" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor
                         struct-shape-put-query-definition-request-client-token
                         :shape "ClientToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-query-definition-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'put-query-definition-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-query-definition-request
                    'make-put-query-definition-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-query-definition-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-query-definition-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-definition-id))
      (common-lisp:list
       (common-lisp:cons "queryDefinitionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-group-names))
      (common-lisp:list
       (common-lisp:cons "logGroupNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-string))
      (common-lisp:list
       (common-lisp:cons "queryString"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-query-definition-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-query-definition-response common-lisp:nil
                       ((query-definition-id :initarg :query-definition-id
                         :initform common-lisp:nil :type
                         (common-lisp:or query-id common-lisp:null) :accessor
                         struct-shape-put-query-definition-response-query-definition-id
                         :shape "QueryId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-query-definition-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-query-definition-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-query-definition-response
                    'make-put-query-definition-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-query-definition-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-query-definition-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-definition-id))
      (common-lisp:list
       (common-lisp:cons "queryDefinitionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-query-definition-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-resource-policy-request common-lisp:nil
                       ((policy-name :initarg :policy-name :initform
                         common-lisp:nil :type
                         (common-lisp:or policy-name common-lisp:null)
                         :accessor
                         struct-shape-put-resource-policy-request-policy-name
                         :shape "PolicyName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (policy-document :initarg :policy-document :initform
                         common-lisp:nil :type
                         (common-lisp:or policy-document common-lisp:null)
                         :accessor
                         struct-shape-put-resource-policy-request-policy-document
                         :shape "PolicyDocument" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-resource-policy-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'put-resource-policy-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-resource-policy-request
                    'make-put-resource-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-resource-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-resource-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-name))
      (common-lisp:list
       (common-lisp:cons "policyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-document))
      (common-lisp:list
       (common-lisp:cons "policyDocument"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-resource-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-resource-policy-response common-lisp:nil
                       ((resource-policy :initarg :resource-policy :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-policy common-lisp:null)
                         :accessor
                         struct-shape-put-resource-policy-response-resource-policy
                         :shape "ResourcePolicy" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-resource-policy-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'put-resource-policy-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-resource-policy-response
                    'make-put-resource-policy-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-resource-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-resource-policy-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-policy))
      (common-lisp:list
       (common-lisp:cons "resourcePolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-resource-policy-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-retention-policy-request common-lisp:nil
                       ((log-group-name :initarg :log-group-name :initform
                         (common-lisp:error ":loggroupname is required") :type
                         (common-lisp:or log-group-name common-lisp:null)
                         :accessor
                         struct-shape-put-retention-policy-request-log-group-name
                         :shape "LogGroupName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (retention-in-days :initarg :retention-in-days
                         :initform
                         (common-lisp:error ":retentionindays is required")
                         :type (common-lisp:or days common-lisp:null) :accessor
                         struct-shape-put-retention-policy-request-retention-in-days
                         :shape "Days" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-retention-policy-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'put-retention-policy-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-retention-policy-request
                    'make-put-retention-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-retention-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-retention-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-group-name))
      (common-lisp:list
       (common-lisp:cons "logGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'retention-in-days))
      (common-lisp:list
       (common-lisp:cons "retentionInDays"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-retention-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-subscription-filter-request common-lisp:nil
                       ((log-group-name :initarg :log-group-name :initform
                         (common-lisp:error ":loggroupname is required") :type
                         (common-lisp:or log-group-name common-lisp:null)
                         :accessor
                         struct-shape-put-subscription-filter-request-log-group-name
                         :shape "LogGroupName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (filter-name :initarg :filter-name :initform
                         (common-lisp:error ":filtername is required") :type
                         (common-lisp:or filter-name common-lisp:null)
                         :accessor
                         struct-shape-put-subscription-filter-request-filter-name
                         :shape "FilterName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (filter-pattern :initarg :filter-pattern :initform
                         (common-lisp:error ":filterpattern is required") :type
                         (common-lisp:or filter-pattern common-lisp:null)
                         :accessor
                         struct-shape-put-subscription-filter-request-filter-pattern
                         :shape "FilterPattern" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (destination-arn :initarg :destination-arn :initform
                         (common-lisp:error ":destinationarn is required")
                         :type
                         (common-lisp:or destination-arn common-lisp:null)
                         :accessor
                         struct-shape-put-subscription-filter-request-destination-arn
                         :shape "DestinationArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (role-arn :initarg :role-arn :initform common-lisp:nil
                         :type (common-lisp:or role-arn common-lisp:null)
                         :accessor
                         struct-shape-put-subscription-filter-request-role-arn
                         :shape "RoleArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (distribution :initarg :distribution :initform
                         common-lisp:nil :type
                         (common-lisp:or distribution common-lisp:null)
                         :accessor
                         struct-shape-put-subscription-filter-request-distribution
                         :shape "Distribution" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-subscription-filter-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-subscription-filter-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-subscription-filter-request
                    'make-put-subscription-filter-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-subscription-filter-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-subscription-filter-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-group-name))
      (common-lisp:list
       (common-lisp:cons "logGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter-name))
      (common-lisp:list
       (common-lisp:cons "filterName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter-pattern))
      (common-lisp:list
       (common-lisp:cons "filterPattern"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination-arn))
      (common-lisp:list
       (common-lisp:cons "destinationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'distribution))
      (common-lisp:list
       (common-lisp:cons "distribution"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-subscription-filter-request))
   common-lisp:nil))
(common-lisp:deftype query-char-offset () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass query-compile-error common-lisp:nil
                       ((location :initarg :location :initform common-lisp:nil
                         :type
                         (common-lisp:or query-compile-error-location
                                         common-lisp:null)
                         :accessor struct-shape-query-compile-error-location
                         :shape "QueryCompileErrorLocation" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (message :initarg :message :initform common-lisp:nil
                         :type (common-lisp:or message common-lisp:null)
                         :accessor struct-shape-query-compile-error-message
                         :shape "Message" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-query-compile-error
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'query-compile-error
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'query-compile-error 'make-query-compile-error))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input query-compile-error))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input query-compile-error))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'location))
      (common-lisp:list
       (common-lisp:cons "location"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input query-compile-error))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass query-compile-error-location common-lisp:nil
                       ((start-char-offset :initarg :start-char-offset
                         :initform common-lisp:nil :type
                         (common-lisp:or query-char-offset common-lisp:null)
                         :accessor
                         struct-shape-query-compile-error-location-start-char-offset
                         :shape "QueryCharOffset" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (end-char-offset :initarg :end-char-offset :initform
                         common-lisp:nil :type
                         (common-lisp:or query-char-offset common-lisp:null)
                         :accessor
                         struct-shape-query-compile-error-location-end-char-offset
                         :shape "QueryCharOffset" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-query-compile-error-location
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'query-compile-error-location
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'query-compile-error-location
                    'make-query-compile-error-location))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          query-compile-error-location))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          query-compile-error-location))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-char-offset))
      (common-lisp:list
       (common-lisp:cons "startCharOffset"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-char-offset))
      (common-lisp:list
       (common-lisp:cons "endCharOffset"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          query-compile-error-location))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass query-definition common-lisp:nil
                       ((query-definition-id :initarg :query-definition-id
                         :initform common-lisp:nil :type
                         (common-lisp:or query-id common-lisp:null) :accessor
                         struct-shape-query-definition-query-definition-id
                         :shape "QueryId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or query-definition-name
                                         common-lisp:null)
                         :accessor struct-shape-query-definition-name :shape
                         "QueryDefinitionName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (query-string :initarg :query-string :initform
                         common-lisp:nil :type
                         (common-lisp:or query-definition-string
                                         common-lisp:null)
                         :accessor struct-shape-query-definition-query-string
                         :shape "QueryDefinitionString" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (last-modified :initarg :last-modified :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-query-definition-last-modified :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (log-group-names :initarg :log-group-names :initform
                         common-lisp:nil :type
                         (common-lisp:or log-group-names common-lisp:null)
                         :accessor
                         struct-shape-query-definition-log-group-names :shape
                         "LogGroupNames" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-query-definition
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'query-definition
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'query-definition 'make-query-definition))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input query-definition))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input query-definition))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-definition-id))
      (common-lisp:list
       (common-lisp:cons "queryDefinitionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-string))
      (common-lisp:list
       (common-lisp:cons "queryString"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified))
      (common-lisp:list
       (common-lisp:cons "lastModified"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-group-names))
      (common-lisp:list
       (common-lisp:cons "logGroupNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input query-definition))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype query-definition-list ()
   '(trivial-types:proper-list query-definition))
 (common-lisp:defun make-query-definition-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list query-definition))
   aws-sdk/generator/shape::members))
(common-lisp:deftype query-definition-name () 'common-lisp:string)
(common-lisp:deftype query-definition-string () 'common-lisp:string)
(common-lisp:deftype query-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass query-info common-lisp:nil
                       ((query-id :initarg :query-id :initform common-lisp:nil
                         :type (common-lisp:or query-id common-lisp:null)
                         :accessor struct-shape-query-info-query-id :shape
                         "QueryId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (query-string :initarg :query-string :initform
                         common-lisp:nil :type
                         (common-lisp:or query-string common-lisp:null)
                         :accessor struct-shape-query-info-query-string :shape
                         "QueryString" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or query-status common-lisp:null)
                         :accessor struct-shape-query-info-status :shape
                         "QueryStatus" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (create-time :initarg :create-time :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-query-info-create-time :shape "Timestamp"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (log-group-name :initarg :log-group-name :initform
                         common-lisp:nil :type
                         (common-lisp:or log-group-name common-lisp:null)
                         :accessor struct-shape-query-info-log-group-name
                         :shape "LogGroupName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-query-info
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'query-info
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'query-info 'make-query-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input query-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input query-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-id))
      (common-lisp:list
       (common-lisp:cons "queryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-string))
      (common-lisp:list
       (common-lisp:cons "queryString"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-time))
      (common-lisp:list
       (common-lisp:cons "createTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-group-name))
      (common-lisp:list
       (common-lisp:cons "logGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input query-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype query-info-list ()
   '(trivial-types:proper-list query-info))
 (common-lisp:defun make-query-info-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list query-info))
   aws-sdk/generator/shape::members))
(common-lisp:deftype query-list-max-results () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:deftype query-results ()
   '(trivial-types:proper-list result-rows))
 (common-lisp:defun make-query-results
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list result-rows))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass query-statistics common-lisp:nil
                       ((records-matched :initarg :records-matched :initform
                         common-lisp:nil :type
                         (common-lisp:or stats-value common-lisp:null)
                         :accessor
                         struct-shape-query-statistics-records-matched :shape
                         "StatsValue" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (records-scanned :initarg :records-scanned :initform
                         common-lisp:nil :type
                         (common-lisp:or stats-value common-lisp:null)
                         :accessor
                         struct-shape-query-statistics-records-scanned :shape
                         "StatsValue" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (bytes-scanned :initarg :bytes-scanned :initform
                         common-lisp:nil :type
                         (common-lisp:or stats-value common-lisp:null)
                         :accessor struct-shape-query-statistics-bytes-scanned
                         :shape "StatsValue" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-query-statistics
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'query-statistics
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'query-statistics 'make-query-statistics))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input query-statistics))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input query-statistics))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'records-matched))
      (common-lisp:list
       (common-lisp:cons "recordsMatched"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'records-scanned))
      (common-lisp:list
       (common-lisp:cons "recordsScanned"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bytes-scanned))
      (common-lisp:list
       (common-lisp:cons "bytesScanned"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input query-statistics))
   common-lisp:nil))
(common-lisp:deftype query-status () 'common-lisp:string)
(common-lisp:deftype query-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass rejected-log-events-info common-lisp:nil
                       ((too-new-log-event-start-index :initarg
                         :too-new-log-event-start-index :initform
                         common-lisp:nil :type
                         (common-lisp:or log-event-index common-lisp:null)
                         :accessor
                         struct-shape-rejected-log-events-info-too-new-log-event-start-index
                         :shape "LogEventIndex" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (too-old-log-event-end-index :initarg
                         :too-old-log-event-end-index :initform common-lisp:nil
                         :type
                         (common-lisp:or log-event-index common-lisp:null)
                         :accessor
                         struct-shape-rejected-log-events-info-too-old-log-event-end-index
                         :shape "LogEventIndex" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (expired-log-event-end-index :initarg
                         :expired-log-event-end-index :initform common-lisp:nil
                         :type
                         (common-lisp:or log-event-index common-lisp:null)
                         :accessor
                         struct-shape-rejected-log-events-info-expired-log-event-end-index
                         :shape "LogEventIndex" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-rejected-log-events-info
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'rejected-log-events-info
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'rejected-log-events-info 'make-rejected-log-events-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          rejected-log-events-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          rejected-log-events-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'too-new-log-event-start-index))
      (common-lisp:list
       (common-lisp:cons "tooNewLogEventStartIndex"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'too-old-log-event-end-index))
      (common-lisp:list
       (common-lisp:cons "tooOldLogEventEndIndex"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expired-log-event-end-index))
      (common-lisp:list
       (common-lisp:cons "expiredLogEventEndIndex"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          rejected-log-events-info))
   common-lisp:nil))
(common-lisp:deftype request-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition resource-already-exists-exception
     (logs-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'resource-already-exists-exception)))
(common-lisp:progn
 (common-lisp:deftype resource-arns () '(trivial-types:proper-list arn))
 (common-lisp:defun make-resource-arns
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list arn))
   aws-sdk/generator/shape::members))
(common-lisp:deftype resource-identifier () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-exception
     (logs-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'resource-not-found-exception)))
(common-lisp:progn
 (common-lisp:deftype resource-policies ()
   '(trivial-types:proper-list resource-policy))
 (common-lisp:defun make-resource-policies
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list resource-policy))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass resource-policy common-lisp:nil
                       ((policy-name :initarg :policy-name :initform
                         common-lisp:nil :type
                         (common-lisp:or policy-name common-lisp:null)
                         :accessor struct-shape-resource-policy-policy-name
                         :shape "PolicyName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (policy-document :initarg :policy-document :initform
                         common-lisp:nil :type
                         (common-lisp:or policy-document common-lisp:null)
                         :accessor struct-shape-resource-policy-policy-document
                         :shape "PolicyDocument" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-updated-time :initarg :last-updated-time
                         :initform common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-resource-policy-last-updated-time :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-resource-policy
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'resource-policy
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'resource-policy 'make-resource-policy))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input resource-policy))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input resource-policy))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-name))
      (common-lisp:list
       (common-lisp:cons "policyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-document))
      (common-lisp:list
       (common-lisp:cons "policyDocument"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-time))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input resource-policy))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass result-field common-lisp:nil
                       ((field :initarg :field :initform common-lisp:nil :type
                         (common-lisp:or field common-lisp:null) :accessor
                         struct-shape-result-field-field :shape "Field"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (value :initarg :value :initform common-lisp:nil :type
                         (common-lisp:or value common-lisp:null) :accessor
                         struct-shape-result-field-value :shape "Value"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-result-field
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'result-field
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'result-field 'make-result-field))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input result-field))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input result-field))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field))
      (common-lisp:list
       (common-lisp:cons "field"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input result-field))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype result-rows () '(trivial-types:proper-list result-field))
 (common-lisp:defun make-result-rows
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list result-field))
   aws-sdk/generator/shape::members))
(common-lisp:deftype role-arn () 'common-lisp:string)
(common-lisp:deftype scope () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass searched-log-stream common-lisp:nil
                       ((log-stream-name :initarg :log-stream-name :initform
                         common-lisp:nil :type
                         (common-lisp:or log-stream-name common-lisp:null)
                         :accessor
                         struct-shape-searched-log-stream-log-stream-name
                         :shape "LogStreamName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (searched-completely :initarg :searched-completely
                         :initform common-lisp:nil :type
                         (common-lisp:or log-stream-searched-completely
                                         common-lisp:null)
                         :accessor
                         struct-shape-searched-log-stream-searched-completely
                         :shape "LogStreamSearchedCompletely" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-searched-log-stream
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'searched-log-stream
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'searched-log-stream 'make-searched-log-stream))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input searched-log-stream))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input searched-log-stream))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-stream-name))
      (common-lisp:list
       (common-lisp:cons "logStreamName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'searched-completely))
      (common-lisp:list
       (common-lisp:cons "searchedCompletely"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input searched-log-stream))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype searched-log-streams ()
   '(trivial-types:proper-list searched-log-stream))
 (common-lisp:defun make-searched-log-streams
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list searched-log-stream))
   aws-sdk/generator/shape::members))
(common-lisp:deftype selection-criteria () 'common-lisp:string)
(common-lisp:deftype sequence-token () 'common-lisp:string)
(common-lisp:deftype service () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition service-quota-exceeded-exception
     (logs-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'service-quota-exceeded-exception)))
(common-lisp:progn
 (common-lisp:define-condition service-unavailable-exception
     (logs-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'service-unavailable-exception)))
(common-lisp:deftype session-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition session-streaming-exception
     (logs-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       session-streaming-exception-message)))
 (common-lisp:export
  (common-lisp:list 'session-streaming-exception
                    'session-streaming-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition session-timeout-exception
     (logs-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       session-timeout-exception-message)))
 (common-lisp:export
  (common-lisp:list 'session-timeout-exception
                    'session-timeout-exception-message)))
(common-lisp:deftype standard-unit () 'common-lisp:string)
(common-lisp:deftype start-from-head () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:deftype start-live-tail-log-group-identifiers ()
   '(trivial-types:proper-list log-group-identifier))
 (common-lisp:defun make-start-live-tail-log-group-identifiers
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list log-group-identifier))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass start-live-tail-request common-lisp:nil
                       ((log-group-identifiers :initarg :log-group-identifiers
                         :initform
                         (common-lisp:error ":loggroupidentifiers is required")
                         :type
                         (common-lisp:or start-live-tail-log-group-identifiers
                                         common-lisp:null)
                         :accessor
                         struct-shape-start-live-tail-request-log-group-identifiers
                         :shape "StartLiveTailLogGroupIdentifiers" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (log-stream-names :initarg :log-stream-names :initform
                         common-lisp:nil :type
                         (common-lisp:or input-log-stream-names
                                         common-lisp:null)
                         :accessor
                         struct-shape-start-live-tail-request-log-stream-names
                         :shape "InputLogStreamNames" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (log-stream-name-prefixes :initarg
                         :log-stream-name-prefixes :initform common-lisp:nil
                         :type
                         (common-lisp:or input-log-stream-names
                                         common-lisp:null)
                         :accessor
                         struct-shape-start-live-tail-request-log-stream-name-prefixes
                         :shape "InputLogStreamNames" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (log-event-filter-pattern :initarg
                         :log-event-filter-pattern :initform common-lisp:nil
                         :type (common-lisp:or filter-pattern common-lisp:null)
                         :accessor
                         struct-shape-start-live-tail-request-log-event-filter-pattern
                         :shape "FilterPattern" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-live-tail-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'start-live-tail-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-live-tail-request 'make-start-live-tail-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-live-tail-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-live-tail-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'log-group-identifiers))
      (common-lisp:list
       (common-lisp:cons "logGroupIdentifiers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-stream-names))
      (common-lisp:list
       (common-lisp:cons "logStreamNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'log-stream-name-prefixes))
      (common-lisp:list
       (common-lisp:cons "logStreamNamePrefixes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'log-event-filter-pattern))
      (common-lisp:list
       (common-lisp:cons "logEventFilterPattern"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-live-tail-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-live-tail-response common-lisp:nil
                       ((response-stream :initarg :response-stream :initform
                         common-lisp:nil :type
                         (common-lisp:or start-live-tail-response-stream
                                         common-lisp:null)
                         :accessor
                         struct-shape-start-live-tail-response-response-stream
                         :shape "StartLiveTailResponseStream" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-live-tail-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'start-live-tail-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-live-tail-response 'make-start-live-tail-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-live-tail-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-live-tail-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'response-stream))
      (common-lisp:list
       (common-lisp:cons "responseStream"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-live-tail-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-live-tail-response-stream common-lisp:nil
                       ((session-start :initarg :session-start :initform
                         common-lisp:nil :type
                         (common-lisp:or live-tail-session-start
                                         common-lisp:null)
                         :accessor
                         struct-shape-start-live-tail-response-stream-session-start
                         :shape "LiveTailSessionStart" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (session-update :initarg :session-update :initform
                         common-lisp:nil :type
                         (common-lisp:or live-tail-session-update
                                         common-lisp:null)
                         :accessor
                         struct-shape-start-live-tail-response-stream-session-update
                         :shape "LiveTailSessionUpdate" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (session-timeout-exception :initarg
                         :session-timeout-exception :initform common-lisp:nil
                         :type
                         (common-lisp:or session-timeout-exception
                                         common-lisp:null)
                         :accessor
                         struct-shape-start-live-tail-response-stream-session-timeout-exception
                         :shape "SessionTimeoutException" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (session-streaming-exception :initarg
                         :session-streaming-exception :initform common-lisp:nil
                         :type
                         (common-lisp:or session-streaming-exception
                                         common-lisp:null)
                         :accessor
                         struct-shape-start-live-tail-response-stream-session-streaming-exception
                         :shape "SessionStreamingException" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-live-tail-response-stream
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-live-tail-response-stream
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-live-tail-response-stream
                    'make-start-live-tail-response-stream))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-live-tail-response-stream))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-live-tail-response-stream))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session-start))
      (common-lisp:list
       (common-lisp:cons "sessionStart"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session-update))
      (common-lisp:list
       (common-lisp:cons "sessionUpdate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'session-timeout-exception))
      (common-lisp:list
       (common-lisp:cons "SessionTimeoutException"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'session-streaming-exception))
      (common-lisp:list
       (common-lisp:cons "SessionStreamingException"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-live-tail-response-stream))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-query-request common-lisp:nil
                       ((log-group-name :initarg :log-group-name :initform
                         common-lisp:nil :type
                         (common-lisp:or log-group-name common-lisp:null)
                         :accessor
                         struct-shape-start-query-request-log-group-name :shape
                         "LogGroupName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (log-group-names :initarg :log-group-names :initform
                         common-lisp:nil :type
                         (common-lisp:or log-group-names common-lisp:null)
                         :accessor
                         struct-shape-start-query-request-log-group-names
                         :shape "LogGroupNames" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (log-group-identifiers :initarg :log-group-identifiers
                         :initform common-lisp:nil :type
                         (common-lisp:or log-group-identifiers
                                         common-lisp:null)
                         :accessor
                         struct-shape-start-query-request-log-group-identifiers
                         :shape "LogGroupIdentifiers" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (start-time :initarg :start-time :initform
                         (common-lisp:error ":starttime is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-start-query-request-start-time :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (end-time :initarg :end-time :initform
                         (common-lisp:error ":endtime is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-start-query-request-end-time :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (query-string :initarg :query-string :initform
                         (common-lisp:error ":querystring is required") :type
                         (common-lisp:or query-string common-lisp:null)
                         :accessor
                         struct-shape-start-query-request-query-string :shape
                         "QueryString" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (limit :initarg :limit :initform common-lisp:nil :type
                         (common-lisp:or events-limit common-lisp:null)
                         :accessor struct-shape-start-query-request-limit
                         :shape "EventsLimit" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-query-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'start-query-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-query-request 'make-start-query-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input start-query-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input start-query-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-group-name))
      (common-lisp:list
       (common-lisp:cons "logGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-group-names))
      (common-lisp:list
       (common-lisp:cons "logGroupNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'log-group-identifiers))
      (common-lisp:list
       (common-lisp:cons "logGroupIdentifiers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "startTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "endTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-string))
      (common-lisp:list
       (common-lisp:cons "queryString"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'limit))
      (common-lisp:list
       (common-lisp:cons "limit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input start-query-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-query-response common-lisp:nil
                       ((query-id :initarg :query-id :initform common-lisp:nil
                         :type (common-lisp:or query-id common-lisp:null)
                         :accessor struct-shape-start-query-response-query-id
                         :shape "QueryId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-query-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'start-query-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-query-response 'make-start-query-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input start-query-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input start-query-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-id))
      (common-lisp:list
       (common-lisp:cons "queryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input start-query-response))
   common-lisp:nil))
(common-lisp:deftype state () 'common-lisp:string)
(common-lisp:deftype stats-value () 'common-lisp:double-float)
(common-lisp:progn
 (common-lisp:defclass stop-query-request common-lisp:nil
                       ((query-id :initarg :query-id :initform
                         (common-lisp:error ":queryid is required") :type
                         (common-lisp:or query-id common-lisp:null) :accessor
                         struct-shape-stop-query-request-query-id :shape
                         "QueryId" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-stop-query-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'stop-query-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'stop-query-request 'make-stop-query-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input stop-query-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input stop-query-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-id))
      (common-lisp:list
       (common-lisp:cons "queryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input stop-query-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass stop-query-response common-lisp:nil
                       ((success :initarg :success :initform common-lisp:nil
                         :type (common-lisp:or success common-lisp:null)
                         :accessor struct-shape-stop-query-response-success
                         :shape "Success" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-stop-query-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'stop-query-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'stop-query-response 'make-stop-query-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input stop-query-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input stop-query-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'success))
      (common-lisp:list
       (common-lisp:cons "success"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input stop-query-response))
   common-lisp:nil))
(common-lisp:deftype stored-bytes () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass subscription-filter common-lisp:nil
                       ((filter-name :initarg :filter-name :initform
                         common-lisp:nil :type
                         (common-lisp:or filter-name common-lisp:null)
                         :accessor struct-shape-subscription-filter-filter-name
                         :shape "FilterName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (log-group-name :initarg :log-group-name :initform
                         common-lisp:nil :type
                         (common-lisp:or log-group-name common-lisp:null)
                         :accessor
                         struct-shape-subscription-filter-log-group-name :shape
                         "LogGroupName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (filter-pattern :initarg :filter-pattern :initform
                         common-lisp:nil :type
                         (common-lisp:or filter-pattern common-lisp:null)
                         :accessor
                         struct-shape-subscription-filter-filter-pattern :shape
                         "FilterPattern" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (destination-arn :initarg :destination-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or destination-arn common-lisp:null)
                         :accessor
                         struct-shape-subscription-filter-destination-arn
                         :shape "DestinationArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (role-arn :initarg :role-arn :initform common-lisp:nil
                         :type (common-lisp:or role-arn common-lisp:null)
                         :accessor struct-shape-subscription-filter-role-arn
                         :shape "RoleArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (distribution :initarg :distribution :initform
                         common-lisp:nil :type
                         (common-lisp:or distribution common-lisp:null)
                         :accessor
                         struct-shape-subscription-filter-distribution :shape
                         "Distribution" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (creation-time :initarg :creation-time :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-subscription-filter-creation-time :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-subscription-filter
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'subscription-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'subscription-filter 'make-subscription-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input subscription-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input subscription-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter-name))
      (common-lisp:list
       (common-lisp:cons "filterName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-group-name))
      (common-lisp:list
       (common-lisp:cons "logGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter-pattern))
      (common-lisp:list
       (common-lisp:cons "filterPattern"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination-arn))
      (common-lisp:list
       (common-lisp:cons "destinationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'distribution))
      (common-lisp:list
       (common-lisp:cons "distribution"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "creationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input subscription-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype subscription-filters ()
   '(trivial-types:proper-list subscription-filter))
 (common-lisp:defun make-subscription-filters
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list subscription-filter))
   aws-sdk/generator/shape::members))
(common-lisp:deftype success () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defclass suppression-period common-lisp:nil
                       ((value :initarg :value :initform common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-suppression-period-value :shape "Integer"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (suppression-unit :initarg :suppression-unit :initform
                         common-lisp:nil :type
                         (common-lisp:or suppression-unit common-lisp:null)
                         :accessor
                         struct-shape-suppression-period-suppression-unit
                         :shape "SuppressionUnit" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-suppression-period
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'suppression-period
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'suppression-period 'make-suppression-period))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input suppression-period))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input suppression-period))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'suppression-unit))
      (common-lisp:list
       (common-lisp:cons "suppressionUnit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input suppression-period))
   common-lisp:nil))
(common-lisp:deftype suppression-state () 'common-lisp:string)
(common-lisp:deftype suppression-type () 'common-lisp:string)
(common-lisp:deftype suppression-unit () 'common-lisp:string)
(common-lisp:deftype tag-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tag-key-list () '(trivial-types:proper-list tag-key))
 (common-lisp:defun make-tag-key-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype tag-list () '(trivial-types:proper-list tag-key))
 (common-lisp:defun make-tag-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass tag-log-group-request common-lisp:nil
                       ((log-group-name :initarg :log-group-name :initform
                         (common-lisp:error ":loggroupname is required") :type
                         (common-lisp:or log-group-name common-lisp:null)
                         :accessor
                         struct-shape-tag-log-group-request-log-group-name
                         :shape "LogGroupName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform
                         (common-lisp:error ":tags is required") :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         struct-shape-tag-log-group-request-tags :shape "Tags"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tag-log-group-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'tag-log-group-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'tag-log-group-request 'make-tag-log-group-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          tag-log-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          tag-log-group-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-group-name))
      (common-lisp:list
       (common-lisp:cons "logGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          tag-log-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass tag-resource-request common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resourcearn is required") :type
                         (common-lisp:or amazon-resource-name common-lisp:null)
                         :accessor
                         struct-shape-tag-resource-request-resource-arn :shape
                         "AmazonResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform
                         (common-lisp:error ":tags is required") :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         struct-shape-tag-resource-request-tags :shape "Tags"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tag-resource-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'tag-resource-request 'make-tag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "resourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-request))
   common-lisp:nil))
(common-lisp:deftype tag-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tags () 'common-lisp:hash-table)
 (common-lisp:defun make-tags (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype target-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype test-event-messages ()
   '(trivial-types:proper-list event-message))
 (common-lisp:defun make-test-event-messages
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list event-message))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass test-metric-filter-request common-lisp:nil
                       ((filter-pattern :initarg :filter-pattern :initform
                         (common-lisp:error ":filterpattern is required") :type
                         (common-lisp:or filter-pattern common-lisp:null)
                         :accessor
                         struct-shape-test-metric-filter-request-filter-pattern
                         :shape "FilterPattern" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (log-event-messages :initarg :log-event-messages
                         :initform
                         (common-lisp:error ":logeventmessages is required")
                         :type
                         (common-lisp:or test-event-messages common-lisp:null)
                         :accessor
                         struct-shape-test-metric-filter-request-log-event-messages
                         :shape "TestEventMessages" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-test-metric-filter-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'test-metric-filter-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'test-metric-filter-request
                    'make-test-metric-filter-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          test-metric-filter-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          test-metric-filter-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter-pattern))
      (common-lisp:list
       (common-lisp:cons "filterPattern"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-event-messages))
      (common-lisp:list
       (common-lisp:cons "logEventMessages"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          test-metric-filter-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass test-metric-filter-response common-lisp:nil
                       ((matches :initarg :matches :initform common-lisp:nil
                         :type
                         (common-lisp:or metric-filter-matches
                                         common-lisp:null)
                         :accessor
                         struct-shape-test-metric-filter-response-matches
                         :shape "MetricFilterMatches" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-test-metric-filter-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'test-metric-filter-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'test-metric-filter-response
                    'make-test-metric-filter-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          test-metric-filter-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          test-metric-filter-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'matches))
      (common-lisp:list
       (common-lisp:cons "matches"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          test-metric-filter-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition throttling-exception
     (logs-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'throttling-exception)))
(common-lisp:deftype time () 'common-lisp:string)
(common-lisp:deftype timestamp () 'common-lisp:integer)
(common-lisp:deftype token () 'common-lisp:string)
(common-lisp:deftype token-string () 'common-lisp:string)
(common-lisp:deftype token-value () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition too-many-tags-exception
     (logs-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       too-many-tags-exception-message)
      (resource-name :initarg :resource-name :initform common-lisp:nil :reader
       too-many-tags-exception-resource-name)))
 (common-lisp:export
  (common-lisp:list 'too-many-tags-exception 'too-many-tags-exception-message
                    'too-many-tags-exception-resource-name)))
(common-lisp:deftype unmask () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:define-condition unrecognized-client-exception
     (logs-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'unrecognized-client-exception)))
(common-lisp:progn
 (common-lisp:defclass untag-log-group-request common-lisp:nil
                       ((log-group-name :initarg :log-group-name :initform
                         (common-lisp:error ":loggroupname is required") :type
                         (common-lisp:or log-group-name common-lisp:null)
                         :accessor
                         struct-shape-untag-log-group-request-log-group-name
                         :shape "LogGroupName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform
                         (common-lisp:error ":tags is required") :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-untag-log-group-request-tags :shape
                         "TagList" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-untag-log-group-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'untag-log-group-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'untag-log-group-request 'make-untag-log-group-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-log-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-log-group-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-group-name))
      (common-lisp:list
       (common-lisp:cons "logGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-log-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass untag-resource-request common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resourcearn is required") :type
                         (common-lisp:or amazon-resource-name common-lisp:null)
                         :accessor
                         struct-shape-untag-resource-request-resource-arn
                         :shape "AmazonResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tag-keys :initarg :tag-keys :initform
                         (common-lisp:error ":tagkeys is required") :type
                         (common-lisp:or tag-key-list common-lisp:null)
                         :accessor struct-shape-untag-resource-request-tag-keys
                         :shape "TagKeyList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-untag-resource-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'untag-resource-request 'make-untag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "resourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-keys))
      (common-lisp:list
       (common-lisp:cons "tagKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-anomaly-request common-lisp:nil
                       ((anomaly-id :initarg :anomaly-id :initform
                         common-lisp:nil :type
                         (common-lisp:or anomaly-id common-lisp:null) :accessor
                         struct-shape-update-anomaly-request-anomaly-id :shape
                         "AnomalyId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (pattern-id :initarg :pattern-id :initform
                         common-lisp:nil :type
                         (common-lisp:or pattern-id common-lisp:null) :accessor
                         struct-shape-update-anomaly-request-pattern-id :shape
                         "PatternId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (anomaly-detector-arn :initarg :anomaly-detector-arn
                         :initform
                         (common-lisp:error ":anomalydetectorarn is required")
                         :type
                         (common-lisp:or anomaly-detector-arn common-lisp:null)
                         :accessor
                         struct-shape-update-anomaly-request-anomaly-detector-arn
                         :shape "AnomalyDetectorArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (suppression-type :initarg :suppression-type :initform
                         common-lisp:nil :type
                         (common-lisp:or suppression-type common-lisp:null)
                         :accessor
                         struct-shape-update-anomaly-request-suppression-type
                         :shape "SuppressionType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (suppression-period :initarg :suppression-period
                         :initform common-lisp:nil :type
                         (common-lisp:or suppression-period common-lisp:null)
                         :accessor
                         struct-shape-update-anomaly-request-suppression-period
                         :shape "SuppressionPeriod" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-anomaly-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-anomaly-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-anomaly-request 'make-update-anomaly-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-anomaly-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-anomaly-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'anomaly-id))
      (common-lisp:list
       (common-lisp:cons "anomalyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pattern-id))
      (common-lisp:list
       (common-lisp:cons "patternId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'anomaly-detector-arn))
      (common-lisp:list
       (common-lisp:cons "anomalyDetectorArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'suppression-type))
      (common-lisp:list
       (common-lisp:cons "suppressionType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'suppression-period))
      (common-lisp:list
       (common-lisp:cons "suppressionPeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-anomaly-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-log-anomaly-detector-request common-lisp:nil
                       ((anomaly-detector-arn :initarg :anomaly-detector-arn
                         :initform
                         (common-lisp:error ":anomalydetectorarn is required")
                         :type
                         (common-lisp:or anomaly-detector-arn common-lisp:null)
                         :accessor
                         struct-shape-update-log-anomaly-detector-request-anomaly-detector-arn
                         :shape "AnomalyDetectorArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (evaluation-frequency :initarg :evaluation-frequency
                         :initform common-lisp:nil :type
                         (common-lisp:or evaluation-frequency common-lisp:null)
                         :accessor
                         struct-shape-update-log-anomaly-detector-request-evaluation-frequency
                         :shape "EvaluationFrequency" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (filter-pattern :initarg :filter-pattern :initform
                         common-lisp:nil :type
                         (common-lisp:or filter-pattern common-lisp:null)
                         :accessor
                         struct-shape-update-log-anomaly-detector-request-filter-pattern
                         :shape "FilterPattern" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (anomaly-visibility-time :initarg
                         :anomaly-visibility-time :initform common-lisp:nil
                         :type
                         (common-lisp:or anomaly-visibility-time
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-log-anomaly-detector-request-anomaly-visibility-time
                         :shape "AnomalyVisibilityTime" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (enabled :initarg :enabled :initform
                         (common-lisp:error ":enabled is required") :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-update-log-anomaly-detector-request-enabled
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-log-anomaly-detector-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-log-anomaly-detector-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-log-anomaly-detector-request
                    'make-update-log-anomaly-detector-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-log-anomaly-detector-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-log-anomaly-detector-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'anomaly-detector-arn))
      (common-lisp:list
       (common-lisp:cons "anomalyDetectorArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'evaluation-frequency))
      (common-lisp:list
       (common-lisp:cons "evaluationFrequency"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter-pattern))
      (common-lisp:list
       (common-lisp:cons "filterPattern"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'anomaly-visibility-time))
      (common-lisp:list
       (common-lisp:cons "anomalyVisibilityTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-log-anomaly-detector-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition validation-exception
     (logs-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'validation-exception)))
(common-lisp:deftype value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defun associate-kms-key
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key log-group-name kms-key-id
                     resource-identifier)
   (common-lisp:declare
    (common-lisp:ignorable log-group-name kms-key-id resource-identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-associate-kms-key-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'logs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "AssociateKmsKey"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'associate-kms-key))
(common-lisp:progn
 (common-lisp:defun cancel-export-task
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key task-id)
   (common-lisp:declare (common-lisp:ignorable task-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-cancel-export-task-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'logs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CancelExportTask"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'cancel-export-task))
(common-lisp:progn
 (common-lisp:defun create-delivery
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key delivery-source-name
                     delivery-destination-arn tags)
   (common-lisp:declare
    (common-lisp:ignorable delivery-source-name delivery-destination-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-delivery-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'logs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateDelivery"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-delivery))
(common-lisp:progn
 (common-lisp:defun create-export-task
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key task-name log-group-name
                     log-stream-name-prefix from to destination
                     destination-prefix)
   (common-lisp:declare
    (common-lisp:ignorable task-name log-group-name log-stream-name-prefix from
     to destination destination-prefix))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-export-task-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'logs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateExportTask"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-export-task))
(common-lisp:progn
 (common-lisp:defun create-log-anomaly-detector
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key log-group-arn-list detector-name
                     evaluation-frequency filter-pattern kms-key-id
                     anomaly-visibility-time tags)
   (common-lisp:declare
    (common-lisp:ignorable log-group-arn-list detector-name
     evaluation-frequency filter-pattern kms-key-id anomaly-visibility-time
     tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-log-anomaly-detector-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'logs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateLogAnomalyDetector"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-log-anomaly-detector))
(common-lisp:progn
 (common-lisp:defun create-log-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key log-group-name kms-key-id tags
                     log-group-class)
   (common-lisp:declare
    (common-lisp:ignorable log-group-name kms-key-id tags log-group-class))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-log-group-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'logs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateLogGroup"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-log-group))
(common-lisp:progn
 (common-lisp:defun create-log-stream
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key log-group-name log-stream-name)
   (common-lisp:declare (common-lisp:ignorable log-group-name log-stream-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-log-stream-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'logs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateLogStream"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-log-stream))
(common-lisp:progn
 (common-lisp:defun delete-account-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key policy-name policy-type)
   (common-lisp:declare (common-lisp:ignorable policy-name policy-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-account-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'logs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteAccountPolicy"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-account-policy))
(common-lisp:progn
 (common-lisp:defun delete-data-protection-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key log-group-identifier)
   (common-lisp:declare (common-lisp:ignorable log-group-identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-data-protection-policy-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'logs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteDataProtectionPolicy"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-data-protection-policy))
(common-lisp:progn
 (common-lisp:defun delete-delivery
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id)
   (common-lisp:declare (common-lisp:ignorable id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-delivery-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'logs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteDelivery"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-delivery))
(common-lisp:progn
 (common-lisp:defun delete-delivery-destination
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name)
   (common-lisp:declare (common-lisp:ignorable name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-delivery-destination-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'logs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteDeliveryDestination"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-delivery-destination))
(common-lisp:progn
 (common-lisp:defun delete-delivery-destination-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key delivery-destination-name)
   (common-lisp:declare (common-lisp:ignorable delivery-destination-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-delivery-destination-policy-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'logs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteDeliveryDestinationPolicy"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-delivery-destination-policy))
(common-lisp:progn
 (common-lisp:defun delete-delivery-source
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name)
   (common-lisp:declare (common-lisp:ignorable name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-delivery-source-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'logs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteDeliverySource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-delivery-source))
(common-lisp:progn
 (common-lisp:defun delete-destination
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key destination-name)
   (common-lisp:declare (common-lisp:ignorable destination-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-destination-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'logs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteDestination"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-destination))
(common-lisp:progn
 (common-lisp:defun delete-log-anomaly-detector
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key anomaly-detector-arn)
   (common-lisp:declare (common-lisp:ignorable anomaly-detector-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-log-anomaly-detector-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'logs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteLogAnomalyDetector"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-log-anomaly-detector))
(common-lisp:progn
 (common-lisp:defun delete-log-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key log-group-name)
   (common-lisp:declare (common-lisp:ignorable log-group-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-log-group-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'logs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteLogGroup"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-log-group))
(common-lisp:progn
 (common-lisp:defun delete-log-stream
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key log-group-name log-stream-name)
   (common-lisp:declare (common-lisp:ignorable log-group-name log-stream-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-log-stream-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'logs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteLogStream"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-log-stream))
(common-lisp:progn
 (common-lisp:defun delete-metric-filter
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key log-group-name filter-name)
   (common-lisp:declare (common-lisp:ignorable log-group-name filter-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-metric-filter-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'logs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteMetricFilter"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-metric-filter))
(common-lisp:progn
 (common-lisp:defun delete-query-definition
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key query-definition-id)
   (common-lisp:declare (common-lisp:ignorable query-definition-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-query-definition-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'logs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteQueryDefinition"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-query-definition))
(common-lisp:progn
 (common-lisp:defun delete-resource-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key policy-name)
   (common-lisp:declare (common-lisp:ignorable policy-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-resource-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'logs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteResourcePolicy"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-resource-policy))
(common-lisp:progn
 (common-lisp:defun delete-retention-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key log-group-name)
   (common-lisp:declare (common-lisp:ignorable log-group-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-retention-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'logs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteRetentionPolicy"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-retention-policy))
(common-lisp:progn
 (common-lisp:defun delete-subscription-filter
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key log-group-name filter-name)
   (common-lisp:declare (common-lisp:ignorable log-group-name filter-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-subscription-filter-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'logs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteSubscriptionFilter"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-subscription-filter))
(common-lisp:progn
 (common-lisp:defun describe-account-policies
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key policy-type policy-name
                     account-identifiers)
   (common-lisp:declare
    (common-lisp:ignorable policy-type policy-name account-identifiers))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-account-policies-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'logs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeAccountPolicies"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-account-policies))
(common-lisp:progn
 (common-lisp:defun describe-deliveries
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token limit)
   (common-lisp:declare (common-lisp:ignorable next-token limit))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-deliveries-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'logs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeDeliveries"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-deliveries))
(common-lisp:progn
 (common-lisp:defun describe-delivery-destinations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token limit)
   (common-lisp:declare (common-lisp:ignorable next-token limit))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-delivery-destinations-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'logs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeDeliveryDestinations"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-delivery-destinations))
(common-lisp:progn
 (common-lisp:defun describe-delivery-sources
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token limit)
   (common-lisp:declare (common-lisp:ignorable next-token limit))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-delivery-sources-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'logs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeDeliverySources"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-delivery-sources))
(common-lisp:progn
 (common-lisp:defun describe-destinations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key destination-name-prefix next-token limit)
   (common-lisp:declare
    (common-lisp:ignorable destination-name-prefix next-token limit))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-destinations-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'logs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeDestinations"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-destinations))
(common-lisp:progn
 (common-lisp:defun describe-export-tasks
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key task-id status-code next-token limit)
   (common-lisp:declare
    (common-lisp:ignorable task-id status-code next-token limit))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-export-tasks-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'logs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeExportTasks"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-export-tasks))
(common-lisp:progn
 (common-lisp:defun describe-log-groups
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-identifiers log-group-name-prefix
                     log-group-name-pattern next-token limit
                     include-linked-accounts log-group-class)
   (common-lisp:declare
    (common-lisp:ignorable account-identifiers log-group-name-prefix
     log-group-name-pattern next-token limit include-linked-accounts
     log-group-class))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-log-groups-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'logs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeLogGroups"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-log-groups))
(common-lisp:progn
 (common-lisp:defun describe-log-streams
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key log-group-name log-group-identifier
                     log-stream-name-prefix order-by descending next-token
                     limit)
   (common-lisp:declare
    (common-lisp:ignorable log-group-name log-group-identifier
     log-stream-name-prefix order-by descending next-token limit))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-log-streams-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'logs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeLogStreams"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-log-streams))
(common-lisp:progn
 (common-lisp:defun describe-metric-filters
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key log-group-name filter-name-prefix
                     next-token limit metric-name metric-namespace)
   (common-lisp:declare
    (common-lisp:ignorable log-group-name filter-name-prefix next-token limit
     metric-name metric-namespace))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-metric-filters-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'logs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeMetricFilters"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-metric-filters))
(common-lisp:progn
 (common-lisp:defun describe-queries
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key log-group-name status max-results
                     next-token)
   (common-lisp:declare
    (common-lisp:ignorable log-group-name status max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-queries-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'logs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeQueries"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-queries))
(common-lisp:progn
 (common-lisp:defun describe-query-definitions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key query-definition-name-prefix max-results
                     next-token)
   (common-lisp:declare
    (common-lisp:ignorable query-definition-name-prefix max-results
     next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-query-definitions-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'logs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeQueryDefinitions"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-query-definitions))
(common-lisp:progn
 (common-lisp:defun describe-resource-policies
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token limit)
   (common-lisp:declare (common-lisp:ignorable next-token limit))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-resource-policies-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'logs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeResourcePolicies"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-resource-policies))
(common-lisp:progn
 (common-lisp:defun describe-subscription-filters
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key log-group-name filter-name-prefix
                     next-token limit)
   (common-lisp:declare
    (common-lisp:ignorable log-group-name filter-name-prefix next-token limit))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-subscription-filters-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'logs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeSubscriptionFilters"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-subscription-filters))
(common-lisp:progn
 (common-lisp:defun disassociate-kms-key
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key log-group-name resource-identifier)
   (common-lisp:declare
    (common-lisp:ignorable log-group-name resource-identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-disassociate-kms-key-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'logs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DisassociateKmsKey"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'disassociate-kms-key))
(common-lisp:progn
 (common-lisp:defun filter-log-events
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key log-group-name log-group-identifier
                     log-stream-names log-stream-name-prefix start-time
                     end-time filter-pattern next-token limit interleaved
                     unmask)
   (common-lisp:declare
    (common-lisp:ignorable log-group-name log-group-identifier log-stream-names
     log-stream-name-prefix start-time end-time filter-pattern next-token limit
     interleaved unmask))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-filter-log-events-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'logs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "FilterLogEvents"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'filter-log-events))
(common-lisp:progn
 (common-lisp:defun get-data-protection-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key log-group-identifier)
   (common-lisp:declare (common-lisp:ignorable log-group-identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-data-protection-policy-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'logs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetDataProtectionPolicy"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-data-protection-policy))
(common-lisp:progn
 (common-lisp:defun get-delivery
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id)
   (common-lisp:declare (common-lisp:ignorable id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-delivery-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'logs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetDelivery"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-delivery))
(common-lisp:progn
 (common-lisp:defun get-delivery-destination
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name)
   (common-lisp:declare (common-lisp:ignorable name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-delivery-destination-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'logs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetDeliveryDestination"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-delivery-destination))
(common-lisp:progn
 (common-lisp:defun get-delivery-destination-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key delivery-destination-name)
   (common-lisp:declare (common-lisp:ignorable delivery-destination-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-delivery-destination-policy-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'logs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetDeliveryDestinationPolicy"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-delivery-destination-policy))
(common-lisp:progn
 (common-lisp:defun get-delivery-source
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name)
   (common-lisp:declare (common-lisp:ignorable name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-delivery-source-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'logs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetDeliverySource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-delivery-source))
(common-lisp:progn
 (common-lisp:defun get-log-anomaly-detector
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key anomaly-detector-arn)
   (common-lisp:declare (common-lisp:ignorable anomaly-detector-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-log-anomaly-detector-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'logs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetLogAnomalyDetector"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-log-anomaly-detector))
(common-lisp:progn
 (common-lisp:defun get-log-events
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key log-group-name log-group-identifier
                     log-stream-name start-time end-time next-token limit
                     start-from-head unmask)
   (common-lisp:declare
    (common-lisp:ignorable log-group-name log-group-identifier log-stream-name
     start-time end-time next-token limit start-from-head unmask))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-log-events-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'logs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetLogEvents"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-log-events))
(common-lisp:progn
 (common-lisp:defun get-log-group-fields
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key log-group-name time log-group-identifier)
   (common-lisp:declare
    (common-lisp:ignorable log-group-name time log-group-identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-log-group-fields-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'logs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetLogGroupFields"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-log-group-fields))
(common-lisp:progn
 (common-lisp:defun get-log-record
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key log-record-pointer unmask)
   (common-lisp:declare (common-lisp:ignorable log-record-pointer unmask))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-log-record-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'logs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetLogRecord"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-log-record))
(common-lisp:progn
 (common-lisp:defun get-query-results
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key query-id)
   (common-lisp:declare (common-lisp:ignorable query-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-query-results-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'logs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetQueryResults"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-query-results))
(common-lisp:progn
 (common-lisp:defun list-anomalies
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key anomaly-detector-arn suppression-state
                     limit next-token)
   (common-lisp:declare
    (common-lisp:ignorable anomaly-detector-arn suppression-state limit
     next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-anomalies-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'logs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListAnomalies"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-anomalies))
(common-lisp:progn
 (common-lisp:defun list-log-anomaly-detectors
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key filter-log-group-arn limit next-token)
   (common-lisp:declare
    (common-lisp:ignorable filter-log-group-arn limit next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-log-anomaly-detectors-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'logs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListLogAnomalyDetectors"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-log-anomaly-detectors))
(common-lisp:progn
 (common-lisp:defun list-tags-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn)
   (common-lisp:declare (common-lisp:ignorable resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-for-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'logs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListTagsForResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-tags-for-resource))
(common-lisp:progn
 (common-lisp:defun list-tags-log-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key log-group-name)
   (common-lisp:declare (common-lisp:ignorable log-group-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-log-group-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'logs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListTagsLogGroup"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-tags-log-group))
(common-lisp:progn
 (common-lisp:defun put-account-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key policy-name policy-document policy-type
                     scope selection-criteria)
   (common-lisp:declare
    (common-lisp:ignorable policy-name policy-document policy-type scope
     selection-criteria))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-account-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'logs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "PutAccountPolicy"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'put-account-policy))
(common-lisp:progn
 (common-lisp:defun put-data-protection-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key log-group-identifier policy-document)
   (common-lisp:declare
    (common-lisp:ignorable log-group-identifier policy-document))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-put-data-protection-policy-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'logs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "PutDataProtectionPolicy"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'put-data-protection-policy))
(common-lisp:progn
 (common-lisp:defun put-delivery-destination
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name output-format
                     delivery-destination-configuration tags)
   (common-lisp:declare
    (common-lisp:ignorable name output-format
     delivery-destination-configuration tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-delivery-destination-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'logs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "PutDeliveryDestination"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'put-delivery-destination))
(common-lisp:progn
 (common-lisp:defun put-delivery-destination-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key delivery-destination-name
                     delivery-destination-policy)
   (common-lisp:declare
    (common-lisp:ignorable delivery-destination-name
     delivery-destination-policy))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-put-delivery-destination-policy-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'logs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "PutDeliveryDestinationPolicy"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'put-delivery-destination-policy))
(common-lisp:progn
 (common-lisp:defun put-delivery-source
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name resource-arn log-type tags)
   (common-lisp:declare
    (common-lisp:ignorable name resource-arn log-type tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-delivery-source-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'logs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "PutDeliverySource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'put-delivery-source))
(common-lisp:progn
 (common-lisp:defun put-destination
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key destination-name target-arn role-arn
                     tags)
   (common-lisp:declare
    (common-lisp:ignorable destination-name target-arn role-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-destination-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'logs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "PutDestination"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'put-destination))
(common-lisp:progn
 (common-lisp:defun put-destination-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key destination-name access-policy
                     force-update)
   (common-lisp:declare
    (common-lisp:ignorable destination-name access-policy force-update))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-destination-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'logs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "PutDestinationPolicy"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'put-destination-policy))
(common-lisp:progn
 (common-lisp:defun put-log-events
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key log-group-name log-stream-name log-events
                     sequence-token)
   (common-lisp:declare
    (common-lisp:ignorable log-group-name log-stream-name log-events
     sequence-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-log-events-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'logs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "PutLogEvents"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'put-log-events))
(common-lisp:progn
 (common-lisp:defun put-metric-filter
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key log-group-name filter-name filter-pattern
                     metric-transformations)
   (common-lisp:declare
    (common-lisp:ignorable log-group-name filter-name filter-pattern
     metric-transformations))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-metric-filter-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'logs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "PutMetricFilter"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'put-metric-filter))
(common-lisp:progn
 (common-lisp:defun put-query-definition
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name query-definition-id log-group-names
                     query-string client-token)
   (common-lisp:declare
    (common-lisp:ignorable name query-definition-id log-group-names
     query-string client-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-query-definition-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'logs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "PutQueryDefinition"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'put-query-definition))
(common-lisp:progn
 (common-lisp:defun put-resource-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key policy-name policy-document)
   (common-lisp:declare (common-lisp:ignorable policy-name policy-document))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-resource-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'logs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "PutResourcePolicy"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'put-resource-policy))
(common-lisp:progn
 (common-lisp:defun put-retention-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key log-group-name retention-in-days)
   (common-lisp:declare
    (common-lisp:ignorable log-group-name retention-in-days))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-retention-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'logs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "PutRetentionPolicy"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'put-retention-policy))
(common-lisp:progn
 (common-lisp:defun put-subscription-filter
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key log-group-name filter-name filter-pattern
                     destination-arn role-arn distribution)
   (common-lisp:declare
    (common-lisp:ignorable log-group-name filter-name filter-pattern
     destination-arn role-arn distribution))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-subscription-filter-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'logs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "PutSubscriptionFilter"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'put-subscription-filter))
(common-lisp:progn
 (common-lisp:defun start-live-tail
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key log-group-identifiers log-stream-names
                     log-stream-name-prefixes log-event-filter-pattern)
   (common-lisp:declare
    (common-lisp:ignorable log-group-identifiers log-stream-names
     log-stream-name-prefixes log-event-filter-pattern))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-start-live-tail-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'logs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "StartLiveTail"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'start-live-tail))
(common-lisp:progn
 (common-lisp:defun start-query
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key log-group-name log-group-names
                     log-group-identifiers start-time end-time query-string
                     limit)
   (common-lisp:declare
    (common-lisp:ignorable log-group-name log-group-names log-group-identifiers
     start-time end-time query-string limit))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-start-query-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'logs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "StartQuery"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'start-query))
(common-lisp:progn
 (common-lisp:defun stop-query
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key query-id)
   (common-lisp:declare (common-lisp:ignorable query-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-stop-query-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'logs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "StopQuery"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'stop-query))
(common-lisp:progn
 (common-lisp:defun tag-log-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key log-group-name tags)
   (common-lisp:declare (common-lisp:ignorable log-group-name tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-log-group-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'logs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "TagLogGroup"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'tag-log-group))
(common-lisp:progn
 (common-lisp:defun tag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tags)
   (common-lisp:declare (common-lisp:ignorable resource-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'logs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "TagResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'tag-resource))
(common-lisp:progn
 (common-lisp:defun test-metric-filter
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key filter-pattern log-event-messages)
   (common-lisp:declare
    (common-lisp:ignorable filter-pattern log-event-messages))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-test-metric-filter-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'logs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "TestMetricFilter"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'test-metric-filter))
(common-lisp:progn
 (common-lisp:defun untag-log-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key log-group-name tags)
   (common-lisp:declare (common-lisp:ignorable log-group-name tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-log-group-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'logs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UntagLogGroup"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'untag-log-group))
(common-lisp:progn
 (common-lisp:defun untag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tag-keys)
   (common-lisp:declare (common-lisp:ignorable resource-arn tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'logs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UntagResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'untag-resource))
(common-lisp:progn
 (common-lisp:defun update-anomaly
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key anomaly-id pattern-id
                     anomaly-detector-arn suppression-type suppression-period)
   (common-lisp:declare
    (common-lisp:ignorable anomaly-id pattern-id anomaly-detector-arn
     suppression-type suppression-period))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-anomaly-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'logs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateAnomaly"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-anomaly))
(common-lisp:progn
 (common-lisp:defun update-log-anomaly-detector
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key anomaly-detector-arn evaluation-frequency
                     filter-pattern anomaly-visibility-time enabled)
   (common-lisp:declare
    (common-lisp:ignorable anomaly-detector-arn evaluation-frequency
     filter-pattern anomaly-visibility-time enabled))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-log-anomaly-detector-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'logs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateLogAnomalyDetector"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-log-anomaly-detector))
