;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(uiop/package:define-package #:aws-sdk/services/athena/api (:use)
                             (:nicknames #:aws/athena)
                             (:import-from #:aws-sdk/generator/shape)
                             (:import-from #:aws-sdk/generator/operation)
                             (:import-from #:aws-sdk/api)
                             (:import-from #:aws-sdk/request)
                             (:import-from #:aws-sdk/json-request)
                             (:import-from #:aws-sdk/rest-json-request)
                             (:import-from #:aws-sdk/rest-xml-request)
                             (:import-from #:aws-sdk/query-request)
                             (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/athena/api)
(common-lisp:progn
 (common-lisp:define-condition athena-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'athena-error))
(common-lisp:progn
 (common-lisp:defclass athena-request (aws-sdk/json-request:json-request)
                       common-lisp:nil
                       (:default-initargs :service "athena" :api-version
                        "2017-05-18" :host-prefix "athena" :signing-name
                        common-lisp:nil :global-host common-lisp:nil
                        :target-prefix "AmazonAthena" :json-version "1.1"))
 (common-lisp:export 'athena-request))
(common-lisp:defvar *error-map*
  '(("InternalServerException" . internal-server-exception)
    ("InvalidRequestException" . invalid-request-exception)
    ("MetadataException" . metadata-exception)
    ("ResourceNotFoundException" . resource-not-found-exception)
    ("SessionAlreadyExistsException" . session-already-exists-exception)
    ("TooManyRequestsException" . too-many-requests-exception)))
(common-lisp:progn
 (common-lisp:defclass acl-configuration common-lisp:nil
                       ((s3acl-option :initarg :s3acl-option :initform
                         (common-lisp:error ":s3acl-option is required") :type
                         (common-lisp:or s3acl-option common-lisp:null)
                         :accessor struct-shape-acl-configuration-s3acl-option
                         :shape "S3AclOption" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-acl-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'acl-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'acl-configuration 'make-acl-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input acl-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input acl-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3acl-option))
      (common-lisp:list
       (common-lisp:cons "S3AclOption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input acl-configuration))
   common-lisp:nil))
(common-lisp:deftype age () 'common-lisp:integer)
(common-lisp:deftype allocated-dpus-integer () 'common-lisp:integer)
(common-lisp:deftype amazon-resource-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass application-dpusizes common-lisp:nil
                       ((application-runtime-id :initarg
                         :application-runtime-id :initform common-lisp:nil
                         :type (common-lisp:or name-string common-lisp:null)
                         :accessor
                         struct-shape-application-dpusizes-application-runtime-id
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (supported-dpusizes :initarg :supported-dpusizes
                         :initform common-lisp:nil :type
                         (common-lisp:or supported-dpusize-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-application-dpusizes-supported-dpusizes
                         :shape "SupportedDPUSizeList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-application-dpusizes
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'application-dpusizes
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'application-dpusizes 'make-application-dpusizes))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input application-dpusizes))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input application-dpusizes))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'application-runtime-id))
      (common-lisp:list
       (common-lisp:cons "ApplicationRuntimeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'supported-dpusizes))
      (common-lisp:list
       (common-lisp:cons "SupportedDPUSizes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input application-dpusizes))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype application-dpusizes-list ()
   '(trivial-types:proper-list application-dpusizes))
 (common-lisp:defun make-application-dpusizes-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list application-dpusizes))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass athena-error common-lisp:nil
                       ((error-category :initarg :error-category :initform
                         common-lisp:nil :type
                         (common-lisp:or error-category common-lisp:null)
                         :accessor struct-shape-athena-error-error-category
                         :shape "ErrorCategory" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (error-type :initarg :error-type :initform
                         common-lisp:nil :type
                         (common-lisp:or error-type common-lisp:null) :accessor
                         struct-shape-athena-error-error-type :shape
                         "ErrorType" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (retryable :initarg :retryable :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-athena-error-retryable :shape "Boolean"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (error-message :initarg :error-message :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-athena-error-error-message :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-athena-error
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'athena-error
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'athena-error 'make-athena-error))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input athena-error))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input athena-error))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-category))
      (common-lisp:list
       (common-lisp:cons "ErrorCategory"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-type))
      (common-lisp:list
       (common-lisp:cons "ErrorType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'retryable))
      (common-lisp:list
       (common-lisp:cons "Retryable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-message))
      (common-lisp:list
       (common-lisp:cons "ErrorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input athena-error))
   common-lisp:nil))
(common-lisp:deftype auth-token () 'common-lisp:string)
(common-lisp:deftype authentication-type () 'common-lisp:string)
(common-lisp:deftype aws-account-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass batch-get-named-query-input common-lisp:nil
                       ((named-query-ids :initarg :named-query-ids :initform
                         (common-lisp:error ":named-query-ids is required")
                         :type
                         (common-lisp:or named-query-id-list common-lisp:null)
                         :accessor
                         struct-shape-batch-get-named-query-input-named-query-ids
                         :shape "NamedQueryIdList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-batch-get-named-query-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'batch-get-named-query-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'batch-get-named-query-input
                    'make-batch-get-named-query-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-named-query-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-named-query-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'named-query-ids))
      (common-lisp:list
       (common-lisp:cons "NamedQueryIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-named-query-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass batch-get-named-query-output common-lisp:nil
                       ((named-queries :initarg :named-queries :initform
                         common-lisp:nil :type
                         (common-lisp:or named-query-list common-lisp:null)
                         :accessor
                         struct-shape-batch-get-named-query-output-named-queries
                         :shape "NamedQueryList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (unprocessed-named-query-ids :initarg
                         :unprocessed-named-query-ids :initform common-lisp:nil
                         :type
                         (common-lisp:or unprocessed-named-query-id-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-batch-get-named-query-output-unprocessed-named-query-ids
                         :shape "UnprocessedNamedQueryIdList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-batch-get-named-query-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'batch-get-named-query-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'batch-get-named-query-output
                    'make-batch-get-named-query-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-named-query-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-named-query-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'named-queries))
      (common-lisp:list
       (common-lisp:cons "NamedQueries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'unprocessed-named-query-ids))
      (common-lisp:list
       (common-lisp:cons "UnprocessedNamedQueryIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-named-query-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass batch-get-prepared-statement-input common-lisp:nil
                       ((prepared-statement-names :initarg
                         :prepared-statement-names :initform
                         (common-lisp:error
                          ":prepared-statement-names is required")
                         :type
                         (common-lisp:or prepared-statement-name-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-batch-get-prepared-statement-input-prepared-statement-names
                         :shape "PreparedStatementNameList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (work-group :initarg :work-group :initform
                         (common-lisp:error ":work-group is required") :type
                         (common-lisp:or work-group-name common-lisp:null)
                         :accessor
                         struct-shape-batch-get-prepared-statement-input-work-group
                         :shape "WorkGroupName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-batch-get-prepared-statement-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'batch-get-prepared-statement-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'batch-get-prepared-statement-input
                    'make-batch-get-prepared-statement-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-prepared-statement-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-prepared-statement-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'prepared-statement-names))
      (common-lisp:list
       (common-lisp:cons "PreparedStatementNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'work-group))
      (common-lisp:list
       (common-lisp:cons "WorkGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-prepared-statement-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass batch-get-prepared-statement-output common-lisp:nil
                       ((prepared-statements :initarg :prepared-statements
                         :initform common-lisp:nil :type
                         (common-lisp:or prepared-statement-details-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-batch-get-prepared-statement-output-prepared-statements
                         :shape "PreparedStatementDetailsList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (unprocessed-prepared-statement-names :initarg
                         :unprocessed-prepared-statement-names :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          unprocessed-prepared-statement-name-list
                          common-lisp:null)
                         :accessor
                         struct-shape-batch-get-prepared-statement-output-unprocessed-prepared-statement-names
                         :shape "UnprocessedPreparedStatementNameList"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-batch-get-prepared-statement-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'batch-get-prepared-statement-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'batch-get-prepared-statement-output
                    'make-batch-get-prepared-statement-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-prepared-statement-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-prepared-statement-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'prepared-statements))
      (common-lisp:list
       (common-lisp:cons "PreparedStatements"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'unprocessed-prepared-statement-names))
      (common-lisp:list
       (common-lisp:cons "UnprocessedPreparedStatementNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-prepared-statement-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass batch-get-query-execution-input common-lisp:nil
                       ((query-execution-ids :initarg :query-execution-ids
                         :initform
                         (common-lisp:error ":query-execution-ids is required")
                         :type
                         (common-lisp:or query-execution-id-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-batch-get-query-execution-input-query-execution-ids
                         :shape "QueryExecutionIdList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-batch-get-query-execution-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'batch-get-query-execution-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'batch-get-query-execution-input
                    'make-batch-get-query-execution-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-query-execution-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-query-execution-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-execution-ids))
      (common-lisp:list
       (common-lisp:cons "QueryExecutionIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-query-execution-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass batch-get-query-execution-output common-lisp:nil
                       ((query-executions :initarg :query-executions :initform
                         common-lisp:nil :type
                         (common-lisp:or query-execution-list common-lisp:null)
                         :accessor
                         struct-shape-batch-get-query-execution-output-query-executions
                         :shape "QueryExecutionList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (unprocessed-query-execution-ids :initarg
                         :unprocessed-query-execution-ids :initform
                         common-lisp:nil :type
                         (common-lisp:or unprocessed-query-execution-id-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-batch-get-query-execution-output-unprocessed-query-execution-ids
                         :shape "UnprocessedQueryExecutionIdList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-batch-get-query-execution-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'batch-get-query-execution-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'batch-get-query-execution-output
                    'make-batch-get-query-execution-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-query-execution-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-query-execution-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-executions))
      (common-lisp:list
       (common-lisp:cons "QueryExecutions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'unprocessed-query-execution-ids))
      (common-lisp:list
       (common-lisp:cons "UnprocessedQueryExecutionIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-query-execution-output))
   common-lisp:nil))
(common-lisp:deftype boolean () 'common-lisp:boolean)
(common-lisp:deftype boxed-boolean () 'common-lisp:boolean)
(common-lisp:deftype bytes-scanned-cutoff-value () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass calculation-configuration common-lisp:nil
                       ((code-block :initarg :code-block :initform
                         common-lisp:nil :type
                         (common-lisp:or code-block common-lisp:null) :accessor
                         struct-shape-calculation-configuration-code-block
                         :shape "CodeBlock" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-calculation-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'calculation-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'calculation-configuration
                    'make-calculation-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          calculation-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          calculation-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code-block))
      (common-lisp:list
       (common-lisp:cons "CodeBlock"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          calculation-configuration))
   common-lisp:nil))
(common-lisp:deftype calculation-execution-id () 'common-lisp:string)
(common-lisp:deftype calculation-execution-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass calculation-result common-lisp:nil
                       ((std-out-s3uri :initarg :std-out-s3uri :initform
                         common-lisp:nil :type
                         (common-lisp:or s3uri common-lisp:null) :accessor
                         struct-shape-calculation-result-std-out-s3uri :shape
                         "S3Uri" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (std-error-s3uri :initarg :std-error-s3uri :initform
                         common-lisp:nil :type
                         (common-lisp:or s3uri common-lisp:null) :accessor
                         struct-shape-calculation-result-std-error-s3uri :shape
                         "S3Uri" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (result-s3uri :initarg :result-s3uri :initform
                         common-lisp:nil :type
                         (common-lisp:or s3uri common-lisp:null) :accessor
                         struct-shape-calculation-result-result-s3uri :shape
                         "S3Uri" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (result-type :initarg :result-type :initform
                         common-lisp:nil :type
                         (common-lisp:or calculation-result-type
                                         common-lisp:null)
                         :accessor struct-shape-calculation-result-result-type
                         :shape "CalculationResultType" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-calculation-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'calculation-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'calculation-result 'make-calculation-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input calculation-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input calculation-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'std-out-s3uri))
      (common-lisp:list
       (common-lisp:cons "StdOutS3Uri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'std-error-s3uri))
      (common-lisp:list
       (common-lisp:cons "StdErrorS3Uri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'result-s3uri))
      (common-lisp:list
       (common-lisp:cons "ResultS3Uri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'result-type))
      (common-lisp:list
       (common-lisp:cons "ResultType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input calculation-result))
   common-lisp:nil))
(common-lisp:deftype calculation-result-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass calculation-statistics common-lisp:nil
                       ((dpu-execution-in-millis :initarg
                         :dpu-execution-in-millis :initform common-lisp:nil
                         :type (common-lisp:or long common-lisp:null) :accessor
                         struct-shape-calculation-statistics-dpu-execution-in-millis
                         :shape "Long" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (progress :initarg :progress :initform common-lisp:nil
                         :type
                         (common-lisp:or description-string common-lisp:null)
                         :accessor struct-shape-calculation-statistics-progress
                         :shape "DescriptionString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-calculation-statistics
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'calculation-statistics
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'calculation-statistics 'make-calculation-statistics))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          calculation-statistics))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          calculation-statistics))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dpu-execution-in-millis))
      (common-lisp:list
       (common-lisp:cons "DpuExecutionInMillis"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'progress))
      (common-lisp:list
       (common-lisp:cons "Progress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          calculation-statistics))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass calculation-status common-lisp:nil
                       ((submission-date-time :initarg :submission-date-time
                         :initform common-lisp:nil :type
                         (common-lisp:or date common-lisp:null) :accessor
                         struct-shape-calculation-status-submission-date-time
                         :shape "Date" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (completion-date-time :initarg :completion-date-time
                         :initform common-lisp:nil :type
                         (common-lisp:or date common-lisp:null) :accessor
                         struct-shape-calculation-status-completion-date-time
                         :shape "Date" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (state :initarg :state :initform common-lisp:nil :type
                         (common-lisp:or calculation-execution-state
                                         common-lisp:null)
                         :accessor struct-shape-calculation-status-state :shape
                         "CalculationExecutionState" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (state-change-reason :initarg :state-change-reason
                         :initform common-lisp:nil :type
                         (common-lisp:or description-string common-lisp:null)
                         :accessor
                         struct-shape-calculation-status-state-change-reason
                         :shape "DescriptionString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-calculation-status
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'calculation-status
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'calculation-status 'make-calculation-status))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input calculation-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input calculation-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'submission-date-time))
      (common-lisp:list
       (common-lisp:cons "SubmissionDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'completion-date-time))
      (common-lisp:list
       (common-lisp:cons "CompletionDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state-change-reason))
      (common-lisp:list
       (common-lisp:cons "StateChangeReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input calculation-status))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass calculation-summary common-lisp:nil
                       ((calculation-execution-id :initarg
                         :calculation-execution-id :initform common-lisp:nil
                         :type
                         (common-lisp:or calculation-execution-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-calculation-summary-calculation-execution-id
                         :shape "CalculationExecutionId" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description-string common-lisp:null)
                         :accessor struct-shape-calculation-summary-description
                         :shape "DescriptionString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or calculation-status common-lisp:null)
                         :accessor struct-shape-calculation-summary-status
                         :shape "CalculationStatus" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-calculation-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'calculation-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'calculation-summary 'make-calculation-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input calculation-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input calculation-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'calculation-execution-id))
      (common-lisp:list
       (common-lisp:cons "CalculationExecutionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input calculation-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype calculations-list ()
   '(trivial-types:proper-list calculation-summary))
 (common-lisp:defun make-calculations-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list calculation-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass cancel-capacity-reservation-input common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or capacity-reservation-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-cancel-capacity-reservation-input-name
                         :shape "CapacityReservationName" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-cancel-capacity-reservation-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'cancel-capacity-reservation-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'cancel-capacity-reservation-input
                    'make-cancel-capacity-reservation-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cancel-capacity-reservation-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cancel-capacity-reservation-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cancel-capacity-reservation-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass cancel-capacity-reservation-output common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-cancel-capacity-reservation-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'cancel-capacity-reservation-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'cancel-capacity-reservation-output
                    'make-cancel-capacity-reservation-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cancel-capacity-reservation-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cancel-capacity-reservation-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cancel-capacity-reservation-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass capacity-allocation common-lisp:nil
                       ((status :initarg :status :initform
                         (common-lisp:error ":status is required") :type
                         (common-lisp:or capacity-allocation-status
                                         common-lisp:null)
                         :accessor struct-shape-capacity-allocation-status
                         :shape "CapacityAllocationStatus" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (status-message :initarg :status-message :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-capacity-allocation-status-message :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (request-time :initarg :request-time :initform
                         (common-lisp:error ":request-time is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-capacity-allocation-request-time :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (request-completion-time :initarg
                         :request-completion-time :initform common-lisp:nil
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         struct-shape-capacity-allocation-request-completion-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-capacity-allocation
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'capacity-allocation
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'capacity-allocation 'make-capacity-allocation))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input capacity-allocation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input capacity-allocation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-message))
      (common-lisp:list
       (common-lisp:cons "StatusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-time))
      (common-lisp:list
       (common-lisp:cons "RequestTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'request-completion-time))
      (common-lisp:list
       (common-lisp:cons "RequestCompletionTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input capacity-allocation))
   common-lisp:nil))
(common-lisp:deftype capacity-allocation-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass capacity-assignment common-lisp:nil
                       ((work-group-names :initarg :work-group-names :initform
                         common-lisp:nil :type
                         (common-lisp:or work-group-names-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-capacity-assignment-work-group-names
                         :shape "WorkGroupNamesList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-capacity-assignment
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'capacity-assignment
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'capacity-assignment 'make-capacity-assignment))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input capacity-assignment))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input capacity-assignment))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'work-group-names))
      (common-lisp:list
       (common-lisp:cons "WorkGroupNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input capacity-assignment))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass capacity-assignment-configuration common-lisp:nil
                       ((capacity-reservation-name :initarg
                         :capacity-reservation-name :initform common-lisp:nil
                         :type
                         (common-lisp:or capacity-reservation-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-capacity-assignment-configuration-capacity-reservation-name
                         :shape "CapacityReservationName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (capacity-assignments :initarg :capacity-assignments
                         :initform common-lisp:nil :type
                         (common-lisp:or capacity-assignments-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-capacity-assignment-configuration-capacity-assignments
                         :shape "CapacityAssignmentsList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-capacity-assignment-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'capacity-assignment-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'capacity-assignment-configuration
                    'make-capacity-assignment-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          capacity-assignment-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          capacity-assignment-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'capacity-reservation-name))
      (common-lisp:list
       (common-lisp:cons "CapacityReservationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'capacity-assignments))
      (common-lisp:list
       (common-lisp:cons "CapacityAssignments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          capacity-assignment-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype capacity-assignments-list ()
   '(trivial-types:proper-list capacity-assignment))
 (common-lisp:defun make-capacity-assignments-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list capacity-assignment))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass capacity-reservation common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or capacity-reservation-name
                                         common-lisp:null)
                         :accessor struct-shape-capacity-reservation-name
                         :shape "CapacityReservationName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (status :initarg :status :initform
                         (common-lisp:error ":status is required") :type
                         (common-lisp:or capacity-reservation-status
                                         common-lisp:null)
                         :accessor struct-shape-capacity-reservation-status
                         :shape "CapacityReservationStatus" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (target-dpus :initarg :target-dpus :initform
                         (common-lisp:error ":target-dpus is required") :type
                         (common-lisp:or target-dpus-integer common-lisp:null)
                         :accessor
                         struct-shape-capacity-reservation-target-dpus :shape
                         "TargetDpusInteger" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (allocated-dpus :initarg :allocated-dpus :initform
                         (common-lisp:error ":allocated-dpus is required")
                         :type
                         (common-lisp:or allocated-dpus-integer
                                         common-lisp:null)
                         :accessor
                         struct-shape-capacity-reservation-allocated-dpus
                         :shape "AllocatedDpusInteger" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (last-allocation :initarg :last-allocation :initform
                         common-lisp:nil :type
                         (common-lisp:or capacity-allocation common-lisp:null)
                         :accessor
                         struct-shape-capacity-reservation-last-allocation
                         :shape "CapacityAllocation" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-successful-allocation-time :initarg
                         :last-successful-allocation-time :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-capacity-reservation-last-successful-allocation-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (creation-time :initarg :creation-time :initform
                         (common-lisp:error ":creation-time is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-capacity-reservation-creation-time :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-capacity-reservation
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'capacity-reservation
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'capacity-reservation 'make-capacity-reservation))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input capacity-reservation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input capacity-reservation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-dpus))
      (common-lisp:list
       (common-lisp:cons "TargetDpus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allocated-dpus))
      (common-lisp:list
       (common-lisp:cons "AllocatedDpus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-allocation))
      (common-lisp:list
       (common-lisp:cons "LastAllocation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-successful-allocation-time))
      (common-lisp:list
       (common-lisp:cons "LastSuccessfulAllocationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input capacity-reservation))
   common-lisp:nil))
(common-lisp:deftype capacity-reservation-name () 'common-lisp:string)
(common-lisp:deftype capacity-reservation-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype capacity-reservations-list ()
   '(trivial-types:proper-list capacity-reservation))
 (common-lisp:defun make-capacity-reservations-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list capacity-reservation))
   aws-sdk/generator/shape::members))
(common-lisp:deftype catalog-name-string () 'common-lisp:string)
(common-lisp:deftype client-request-token () 'common-lisp:string)
(common-lisp:deftype code-block () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass column common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor struct-shape-column-name :shape "NameString"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or type-string common-lisp:null)
                         :accessor struct-shape-column-type :shape "TypeString"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (comment :initarg :comment :initform common-lisp:nil
                         :type (common-lisp:or comment-string common-lisp:null)
                         :accessor struct-shape-column-comment :shape
                         "CommentString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-column
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'column
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'column 'make-column))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input column))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input column))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'comment))
      (common-lisp:list
       (common-lisp:cons "Comment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input column))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass column-info common-lisp:nil
                       ((catalog-name :initarg :catalog-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-column-info-catalog-name :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (schema-name :initarg :schema-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-column-info-schema-name :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (table-name :initarg :table-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-column-info-table-name :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-column-info-name :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (label :initarg :label :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-column-info-label :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (type :initarg :type :initform
                         (common-lisp:error ":type is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-column-info-type :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (precision :initarg :precision :initform
                         common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-column-info-precision :shape "Integer"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (scale :initarg :scale :initform common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-column-info-scale :shape "Integer"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (nullable :initarg :nullable :initform common-lisp:nil
                         :type
                         (common-lisp:or column-nullable common-lisp:null)
                         :accessor struct-shape-column-info-nullable :shape
                         "ColumnNullable" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (case-sensitive :initarg :case-sensitive :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-column-info-case-sensitive :shape
                         "Boolean" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-column-info
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'column-info
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'column-info 'make-column-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input column-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input column-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog-name))
      (common-lisp:list
       (common-lisp:cons "CatalogName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema-name))
      (common-lisp:list
       (common-lisp:cons "SchemaName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-name))
      (common-lisp:list
       (common-lisp:cons "TableName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'label))
      (common-lisp:list
       (common-lisp:cons "Label"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'precision))
      (common-lisp:list
       (common-lisp:cons "Precision"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scale))
      (common-lisp:list
       (common-lisp:cons "Scale"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'nullable))
      (common-lisp:list
       (common-lisp:cons "Nullable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'case-sensitive))
      (common-lisp:list
       (common-lisp:cons "CaseSensitive"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input column-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype column-info-list ()
   '(trivial-types:proper-list column-info))
 (common-lisp:defun make-column-info-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list column-info))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype column-list () '(trivial-types:proper-list column))
 (common-lisp:defun make-column-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list column))
   aws-sdk/generator/shape::members))
(common-lisp:deftype column-nullable () 'common-lisp:string)
(common-lisp:deftype comment-string () 'common-lisp:string)
(common-lisp:deftype coordinator-dpu-size () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass create-capacity-reservation-input common-lisp:nil
                       ((target-dpus :initarg :target-dpus :initform
                         (common-lisp:error ":target-dpus is required") :type
                         (common-lisp:or target-dpus-integer common-lisp:null)
                         :accessor
                         struct-shape-create-capacity-reservation-input-target-dpus
                         :shape "TargetDpusInteger" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or capacity-reservation-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-capacity-reservation-input-name
                         :shape "CapacityReservationName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-create-capacity-reservation-input-tags
                         :shape "TagList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-capacity-reservation-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-capacity-reservation-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-capacity-reservation-input
                    'make-create-capacity-reservation-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-capacity-reservation-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-capacity-reservation-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-dpus))
      (common-lisp:list
       (common-lisp:cons "TargetDpus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-capacity-reservation-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-capacity-reservation-output common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-capacity-reservation-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-capacity-reservation-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-capacity-reservation-output
                    'make-create-capacity-reservation-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-capacity-reservation-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-capacity-reservation-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-capacity-reservation-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-data-catalog-input common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or catalog-name-string common-lisp:null)
                         :accessor struct-shape-create-data-catalog-input-name
                         :shape "CatalogNameString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (type :initarg :type :initform
                         (common-lisp:error ":type is required") :type
                         (common-lisp:or data-catalog-type common-lisp:null)
                         :accessor struct-shape-create-data-catalog-input-type
                         :shape "DataCatalogType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description-string common-lisp:null)
                         :accessor
                         struct-shape-create-data-catalog-input-description
                         :shape "DescriptionString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (parameters :initarg :parameters :initform
                         common-lisp:nil :type
                         (common-lisp:or parameters-map common-lisp:null)
                         :accessor
                         struct-shape-create-data-catalog-input-parameters
                         :shape "ParametersMap" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-create-data-catalog-input-tags :shape
                         "TagList" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-data-catalog-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-data-catalog-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-data-catalog-input
                    'make-create-data-catalog-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-data-catalog-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-data-catalog-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameters))
      (common-lisp:list
       (common-lisp:cons "Parameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-data-catalog-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-data-catalog-output common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-data-catalog-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-data-catalog-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-data-catalog-output
                    'make-create-data-catalog-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-data-catalog-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-data-catalog-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-data-catalog-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-named-query-input common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor struct-shape-create-named-query-input-name
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description-string common-lisp:null)
                         :accessor
                         struct-shape-create-named-query-input-description
                         :shape "DescriptionString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (database :initarg :database :initform
                         (common-lisp:error ":database is required") :type
                         (common-lisp:or database-string common-lisp:null)
                         :accessor
                         struct-shape-create-named-query-input-database :shape
                         "DatabaseString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (query-string :initarg :query-string :initform
                         (common-lisp:error ":query-string is required") :type
                         (common-lisp:or query-string common-lisp:null)
                         :accessor
                         struct-shape-create-named-query-input-query-string
                         :shape "QueryString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (client-request-token :initarg :client-request-token
                         :initform common-lisp:nil :type
                         (common-lisp:or idempotency-token common-lisp:null)
                         :accessor
                         struct-shape-create-named-query-input-client-request-token
                         :shape "IdempotencyToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (work-group :initarg :work-group :initform
                         common-lisp:nil :type
                         (common-lisp:or work-group-name common-lisp:null)
                         :accessor
                         struct-shape-create-named-query-input-work-group
                         :shape "WorkGroupName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-named-query-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-named-query-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-named-query-input 'make-create-named-query-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-named-query-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-named-query-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database))
      (common-lisp:list
       (common-lisp:cons "Database"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-string))
      (common-lisp:list
       (common-lisp:cons "QueryString"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "ClientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'work-group))
      (common-lisp:list
       (common-lisp:cons "WorkGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-named-query-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-named-query-output common-lisp:nil
                       ((named-query-id :initarg :named-query-id :initform
                         common-lisp:nil :type
                         (common-lisp:or named-query-id common-lisp:null)
                         :accessor
                         struct-shape-create-named-query-output-named-query-id
                         :shape "NamedQueryId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-named-query-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-named-query-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-named-query-output
                    'make-create-named-query-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-named-query-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-named-query-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'named-query-id))
      (common-lisp:list
       (common-lisp:cons "NamedQueryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-named-query-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-notebook-input common-lisp:nil
                       ((work-group :initarg :work-group :initform
                         (common-lisp:error ":work-group is required") :type
                         (common-lisp:or work-group-name common-lisp:null)
                         :accessor
                         struct-shape-create-notebook-input-work-group :shape
                         "WorkGroupName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or notebook-name common-lisp:null)
                         :accessor struct-shape-create-notebook-input-name
                         :shape "NotebookName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (client-request-token :initarg :client-request-token
                         :initform common-lisp:nil :type
                         (common-lisp:or client-request-token common-lisp:null)
                         :accessor
                         struct-shape-create-notebook-input-client-request-token
                         :shape "ClientRequestToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-notebook-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-notebook-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-notebook-input 'make-create-notebook-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-notebook-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-notebook-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'work-group))
      (common-lisp:list
       (common-lisp:cons "WorkGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "ClientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-notebook-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-notebook-output common-lisp:nil
                       ((notebook-id :initarg :notebook-id :initform
                         common-lisp:nil :type
                         (common-lisp:or notebook-id common-lisp:null)
                         :accessor
                         struct-shape-create-notebook-output-notebook-id :shape
                         "NotebookId" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-notebook-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-notebook-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-notebook-output 'make-create-notebook-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-notebook-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-notebook-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'notebook-id))
      (common-lisp:list
       (common-lisp:cons "NotebookId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-notebook-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-prepared-statement-input common-lisp:nil
                       ((statement-name :initarg :statement-name :initform
                         (common-lisp:error ":statement-name is required")
                         :type (common-lisp:or statement-name common-lisp:null)
                         :accessor
                         struct-shape-create-prepared-statement-input-statement-name
                         :shape "StatementName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (work-group :initarg :work-group :initform
                         (common-lisp:error ":work-group is required") :type
                         (common-lisp:or work-group-name common-lisp:null)
                         :accessor
                         struct-shape-create-prepared-statement-input-work-group
                         :shape "WorkGroupName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (query-statement :initarg :query-statement :initform
                         (common-lisp:error ":query-statement is required")
                         :type (common-lisp:or query-string common-lisp:null)
                         :accessor
                         struct-shape-create-prepared-statement-input-query-statement
                         :shape "QueryString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description-string common-lisp:null)
                         :accessor
                         struct-shape-create-prepared-statement-input-description
                         :shape "DescriptionString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-prepared-statement-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-prepared-statement-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-prepared-statement-input
                    'make-create-prepared-statement-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-prepared-statement-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-prepared-statement-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'statement-name))
      (common-lisp:list
       (common-lisp:cons "StatementName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'work-group))
      (common-lisp:list
       (common-lisp:cons "WorkGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-statement))
      (common-lisp:list
       (common-lisp:cons "QueryStatement"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-prepared-statement-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-prepared-statement-output common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-prepared-statement-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-prepared-statement-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-prepared-statement-output
                    'make-create-prepared-statement-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-prepared-statement-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-prepared-statement-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-prepared-statement-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-presigned-notebook-url-request common-lisp:nil
                       ((session-id :initarg :session-id :initform
                         (common-lisp:error ":session-id is required") :type
                         (common-lisp:or session-id common-lisp:null) :accessor
                         struct-shape-create-presigned-notebook-url-request-session-id
                         :shape "SessionId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-presigned-notebook-url-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-presigned-notebook-url-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-presigned-notebook-url-request
                    'make-create-presigned-notebook-url-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-presigned-notebook-url-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-presigned-notebook-url-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session-id))
      (common-lisp:list
       (common-lisp:cons "SessionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-presigned-notebook-url-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-presigned-notebook-url-response common-lisp:nil
                       ((notebook-url :initarg :notebook-url :initform
                         (common-lisp:error ":notebook-url is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-presigned-notebook-url-response-notebook-url
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (auth-token :initarg :auth-token :initform
                         (common-lisp:error ":auth-token is required") :type
                         (common-lisp:or auth-token common-lisp:null) :accessor
                         struct-shape-create-presigned-notebook-url-response-auth-token
                         :shape "AuthToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (auth-token-expiration-time :initarg
                         :auth-token-expiration-time :initform
                         (common-lisp:error
                          ":auth-token-expiration-time is required")
                         :type (common-lisp:or long common-lisp:null) :accessor
                         struct-shape-create-presigned-notebook-url-response-auth-token-expiration-time
                         :shape "Long" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-presigned-notebook-url-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-presigned-notebook-url-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-presigned-notebook-url-response
                    'make-create-presigned-notebook-url-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-presigned-notebook-url-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-presigned-notebook-url-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'notebook-url))
      (common-lisp:list
       (common-lisp:cons "NotebookUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auth-token))
      (common-lisp:list
       (common-lisp:cons "AuthToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auth-token-expiration-time))
      (common-lisp:list
       (common-lisp:cons "AuthTokenExpirationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-presigned-notebook-url-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-work-group-input common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or work-group-name common-lisp:null)
                         :accessor struct-shape-create-work-group-input-name
                         :shape "WorkGroupName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (configuration :initarg :configuration :initform
                         common-lisp:nil :type
                         (common-lisp:or work-group-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-work-group-input-configuration
                         :shape "WorkGroupConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or work-group-description-string
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-work-group-input-description
                         :shape "WorkGroupDescriptionString" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-create-work-group-input-tags :shape
                         "TagList" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-work-group-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-work-group-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-work-group-input 'make-create-work-group-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-work-group-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-work-group-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration))
      (common-lisp:list
       (common-lisp:cons "Configuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-work-group-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-work-group-output common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-work-group-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-work-group-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-work-group-output 'make-create-work-group-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-work-group-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-work-group-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-work-group-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass customer-content-encryption-configuration
                       common-lisp:nil
                       ((kms-key :initarg :kms-key :initform
                         (common-lisp:error ":kms-key is required") :type
                         (common-lisp:or kms-key common-lisp:null) :accessor
                         struct-shape-customer-content-encryption-configuration-kms-key
                         :shape "KmsKey" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-customer-content-encryption-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'customer-content-encryption-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'customer-content-encryption-configuration
                    'make-customer-content-encryption-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          customer-content-encryption-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          customer-content-encryption-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key))
      (common-lisp:list
       (common-lisp:cons "KmsKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          customer-content-encryption-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass data-catalog common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or catalog-name-string common-lisp:null)
                         :accessor struct-shape-data-catalog-name :shape
                         "CatalogNameString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description-string common-lisp:null)
                         :accessor struct-shape-data-catalog-description :shape
                         "DescriptionString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (type :initarg :type :initform
                         (common-lisp:error ":type is required") :type
                         (common-lisp:or data-catalog-type common-lisp:null)
                         :accessor struct-shape-data-catalog-type :shape
                         "DataCatalogType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (parameters :initarg :parameters :initform
                         common-lisp:nil :type
                         (common-lisp:or parameters-map common-lisp:null)
                         :accessor struct-shape-data-catalog-parameters :shape
                         "ParametersMap" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-data-catalog
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'data-catalog
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'data-catalog 'make-data-catalog))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input data-catalog))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input data-catalog))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameters))
      (common-lisp:list
       (common-lisp:cons "Parameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input data-catalog))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass data-catalog-summary common-lisp:nil
                       ((catalog-name :initarg :catalog-name :initform
                         common-lisp:nil :type
                         (common-lisp:or catalog-name-string common-lisp:null)
                         :accessor
                         struct-shape-data-catalog-summary-catalog-name :shape
                         "CatalogNameString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or data-catalog-type common-lisp:null)
                         :accessor struct-shape-data-catalog-summary-type
                         :shape "DataCatalogType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-data-catalog-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'data-catalog-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'data-catalog-summary 'make-data-catalog-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input data-catalog-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input data-catalog-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog-name))
      (common-lisp:list
       (common-lisp:cons "CatalogName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input data-catalog-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype data-catalog-summary-list ()
   '(trivial-types:proper-list data-catalog-summary))
 (common-lisp:defun make-data-catalog-summary-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list data-catalog-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype data-catalog-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass database common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor struct-shape-database-name :shape
                         "NameString" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description-string common-lisp:null)
                         :accessor struct-shape-database-description :shape
                         "DescriptionString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (parameters :initarg :parameters :initform
                         common-lisp:nil :type
                         (common-lisp:or parameters-map common-lisp:null)
                         :accessor struct-shape-database-parameters :shape
                         "ParametersMap" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-database
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'database
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'database 'make-database))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input database))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input database))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameters))
      (common-lisp:list
       (common-lisp:cons "Parameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input database))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype database-list () '(trivial-types:proper-list database))
 (common-lisp:defun make-database-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list database))
   aws-sdk/generator/shape::members))
(common-lisp:deftype database-string () 'common-lisp:string)
(common-lisp:deftype date () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass datum common-lisp:nil
                       ((var-char-value :initarg :var-char-value :initform
                         common-lisp:nil :type
                         (common-lisp:or |datumString| common-lisp:null)
                         :accessor struct-shape-datum-var-char-value :shape
                         "datumString" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-datum
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'datum
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'datum 'make-datum))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input datum))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input datum))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'var-char-value))
      (common-lisp:list
       (common-lisp:cons "VarCharValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input datum))
   common-lisp:nil))
(common-lisp:deftype default-executor-dpu-size () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass delete-capacity-reservation-input common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or capacity-reservation-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-delete-capacity-reservation-input-name
                         :shape "CapacityReservationName" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-capacity-reservation-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-capacity-reservation-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-capacity-reservation-input
                    'make-delete-capacity-reservation-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-capacity-reservation-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-capacity-reservation-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-capacity-reservation-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-capacity-reservation-output common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-capacity-reservation-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-capacity-reservation-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-capacity-reservation-output
                    'make-delete-capacity-reservation-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-capacity-reservation-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-capacity-reservation-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-capacity-reservation-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-data-catalog-input common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or catalog-name-string common-lisp:null)
                         :accessor struct-shape-delete-data-catalog-input-name
                         :shape "CatalogNameString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-data-catalog-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-data-catalog-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-data-catalog-input
                    'make-delete-data-catalog-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-data-catalog-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-data-catalog-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-data-catalog-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-data-catalog-output common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-data-catalog-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-data-catalog-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-data-catalog-output
                    'make-delete-data-catalog-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-data-catalog-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-data-catalog-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-data-catalog-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-named-query-input common-lisp:nil
                       ((named-query-id :initarg :named-query-id :initform
                         (common-lisp:error ":named-query-id is required")
                         :type (common-lisp:or named-query-id common-lisp:null)
                         :accessor
                         struct-shape-delete-named-query-input-named-query-id
                         :shape "NamedQueryId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-named-query-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-named-query-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-named-query-input 'make-delete-named-query-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-named-query-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-named-query-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'named-query-id))
      (common-lisp:list
       (common-lisp:cons "NamedQueryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-named-query-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-named-query-output common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-named-query-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-named-query-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-named-query-output
                    'make-delete-named-query-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-named-query-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-named-query-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-named-query-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-notebook-input common-lisp:nil
                       ((notebook-id :initarg :notebook-id :initform
                         (common-lisp:error ":notebook-id is required") :type
                         (common-lisp:or notebook-id common-lisp:null)
                         :accessor
                         struct-shape-delete-notebook-input-notebook-id :shape
                         "NotebookId" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-notebook-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-notebook-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-notebook-input 'make-delete-notebook-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-notebook-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-notebook-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'notebook-id))
      (common-lisp:list
       (common-lisp:cons "NotebookId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-notebook-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-notebook-output common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-notebook-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-notebook-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-notebook-output 'make-delete-notebook-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-notebook-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-notebook-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-notebook-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-prepared-statement-input common-lisp:nil
                       ((statement-name :initarg :statement-name :initform
                         (common-lisp:error ":statement-name is required")
                         :type (common-lisp:or statement-name common-lisp:null)
                         :accessor
                         struct-shape-delete-prepared-statement-input-statement-name
                         :shape "StatementName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (work-group :initarg :work-group :initform
                         (common-lisp:error ":work-group is required") :type
                         (common-lisp:or work-group-name common-lisp:null)
                         :accessor
                         struct-shape-delete-prepared-statement-input-work-group
                         :shape "WorkGroupName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-prepared-statement-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-prepared-statement-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-prepared-statement-input
                    'make-delete-prepared-statement-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-prepared-statement-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-prepared-statement-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'statement-name))
      (common-lisp:list
       (common-lisp:cons "StatementName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'work-group))
      (common-lisp:list
       (common-lisp:cons "WorkGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-prepared-statement-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-prepared-statement-output common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-prepared-statement-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-prepared-statement-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-prepared-statement-output
                    'make-delete-prepared-statement-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-prepared-statement-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-prepared-statement-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-prepared-statement-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-work-group-input common-lisp:nil
                       ((work-group :initarg :work-group :initform
                         (common-lisp:error ":work-group is required") :type
                         (common-lisp:or work-group-name common-lisp:null)
                         :accessor
                         struct-shape-delete-work-group-input-work-group :shape
                         "WorkGroupName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (recursive-delete-option :initarg
                         :recursive-delete-option :initform common-lisp:nil
                         :type (common-lisp:or boxed-boolean common-lisp:null)
                         :accessor
                         struct-shape-delete-work-group-input-recursive-delete-option
                         :shape "BoxedBoolean" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-work-group-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-work-group-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-work-group-input 'make-delete-work-group-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-work-group-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-work-group-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'work-group))
      (common-lisp:list
       (common-lisp:cons "WorkGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'recursive-delete-option))
      (common-lisp:list
       (common-lisp:cons "RecursiveDeleteOption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-work-group-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-work-group-output common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-work-group-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-work-group-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-work-group-output 'make-delete-work-group-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-work-group-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-work-group-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-work-group-output))
   common-lisp:nil))
(common-lisp:deftype description-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass encryption-configuration common-lisp:nil
                       ((encryption-option :initarg :encryption-option
                         :initform
                         (common-lisp:error ":encryption-option is required")
                         :type
                         (common-lisp:or encryption-option common-lisp:null)
                         :accessor
                         struct-shape-encryption-configuration-encryption-option
                         :shape "EncryptionOption" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (kms-key :initarg :kms-key :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-encryption-configuration-kms-key :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-encryption-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'encryption-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'encryption-configuration 'make-encryption-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          encryption-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          encryption-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encryption-option))
      (common-lisp:list
       (common-lisp:cons "EncryptionOption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key))
      (common-lisp:list
       (common-lisp:cons "KmsKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          encryption-configuration))
   common-lisp:nil))
(common-lisp:deftype encryption-option () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass engine-configuration common-lisp:nil
                       ((coordinator-dpu-size :initarg :coordinator-dpu-size
                         :initform common-lisp:nil :type
                         (common-lisp:or coordinator-dpu-size common-lisp:null)
                         :accessor
                         struct-shape-engine-configuration-coordinator-dpu-size
                         :shape "CoordinatorDpuSize" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-concurrent-dpus :initarg :max-concurrent-dpus
                         :initform
                         (common-lisp:error ":max-concurrent-dpus is required")
                         :type
                         (common-lisp:or max-concurrent-dpus common-lisp:null)
                         :accessor
                         struct-shape-engine-configuration-max-concurrent-dpus
                         :shape "MaxConcurrentDpus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (default-executor-dpu-size :initarg
                         :default-executor-dpu-size :initform common-lisp:nil
                         :type
                         (common-lisp:or default-executor-dpu-size
                                         common-lisp:null)
                         :accessor
                         struct-shape-engine-configuration-default-executor-dpu-size
                         :shape "DefaultExecutorDpuSize" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (additional-configs :initarg :additional-configs
                         :initform common-lisp:nil :type
                         (common-lisp:or parameters-map common-lisp:null)
                         :accessor
                         struct-shape-engine-configuration-additional-configs
                         :shape "ParametersMap" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (spark-properties :initarg :spark-properties :initform
                         common-lisp:nil :type
                         (common-lisp:or parameters-map common-lisp:null)
                         :accessor
                         struct-shape-engine-configuration-spark-properties
                         :shape "ParametersMap" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-engine-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'engine-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'engine-configuration 'make-engine-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input engine-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input engine-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'coordinator-dpu-size))
      (common-lisp:list
       (common-lisp:cons "CoordinatorDpuSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-concurrent-dpus))
      (common-lisp:list
       (common-lisp:cons "MaxConcurrentDpus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-executor-dpu-size))
      (common-lisp:list
       (common-lisp:cons "DefaultExecutorDpuSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'additional-configs))
      (common-lisp:list
       (common-lisp:cons "AdditionalConfigs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'spark-properties))
      (common-lisp:list
       (common-lisp:cons "SparkProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input engine-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass engine-version common-lisp:nil
                       ((selected-engine-version :initarg
                         :selected-engine-version :initform common-lisp:nil
                         :type (common-lisp:or name-string common-lisp:null)
                         :accessor
                         struct-shape-engine-version-selected-engine-version
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (effective-engine-version :initarg
                         :effective-engine-version :initform common-lisp:nil
                         :type (common-lisp:or name-string common-lisp:null)
                         :accessor
                         struct-shape-engine-version-effective-engine-version
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-engine-version
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'engine-version
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'engine-version 'make-engine-version))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input engine-version))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input engine-version))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'selected-engine-version))
      (common-lisp:list
       (common-lisp:cons "SelectedEngineVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'effective-engine-version))
      (common-lisp:list
       (common-lisp:cons "EffectiveEngineVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input engine-version))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype engine-versions-list ()
   '(trivial-types:proper-list engine-version))
 (common-lisp:defun make-engine-versions-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list engine-version))
   aws-sdk/generator/shape::members))
(common-lisp:deftype error-category () 'common-lisp:integer)
(common-lisp:deftype error-code () 'common-lisp:string)
(common-lisp:deftype error-message () 'common-lisp:string)
(common-lisp:deftype error-type () 'common-lisp:integer)
(common-lisp:deftype execution-parameter () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype execution-parameters ()
   '(trivial-types:proper-list execution-parameter))
 (common-lisp:defun make-execution-parameters
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list execution-parameter))
   aws-sdk/generator/shape::members))
(common-lisp:deftype executor-id () 'common-lisp:string)
(common-lisp:deftype executor-state () 'common-lisp:string)
(common-lisp:deftype executor-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass executors-summary common-lisp:nil
                       ((executor-id :initarg :executor-id :initform
                         (common-lisp:error ":executor-id is required") :type
                         (common-lisp:or executor-id common-lisp:null)
                         :accessor struct-shape-executors-summary-executor-id
                         :shape "ExecutorId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (executor-type :initarg :executor-type :initform
                         common-lisp:nil :type
                         (common-lisp:or executor-type common-lisp:null)
                         :accessor struct-shape-executors-summary-executor-type
                         :shape "ExecutorType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (start-date-time :initarg :start-date-time :initform
                         common-lisp:nil :type
                         (common-lisp:or long common-lisp:null) :accessor
                         struct-shape-executors-summary-start-date-time :shape
                         "Long" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (termination-date-time :initarg :termination-date-time
                         :initform common-lisp:nil :type
                         (common-lisp:or long common-lisp:null) :accessor
                         struct-shape-executors-summary-termination-date-time
                         :shape "Long" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (executor-state :initarg :executor-state :initform
                         common-lisp:nil :type
                         (common-lisp:or executor-state common-lisp:null)
                         :accessor
                         struct-shape-executors-summary-executor-state :shape
                         "ExecutorState" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (executor-size :initarg :executor-size :initform
                         common-lisp:nil :type
                         (common-lisp:or long common-lisp:null) :accessor
                         struct-shape-executors-summary-executor-size :shape
                         "Long" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-executors-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'executors-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'executors-summary 'make-executors-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input executors-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input executors-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'executor-id))
      (common-lisp:list
       (common-lisp:cons "ExecutorId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'executor-type))
      (common-lisp:list
       (common-lisp:cons "ExecutorType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-date-time))
      (common-lisp:list
       (common-lisp:cons "StartDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'termination-date-time))
      (common-lisp:list
       (common-lisp:cons "TerminationDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'executor-state))
      (common-lisp:list
       (common-lisp:cons "ExecutorState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'executor-size))
      (common-lisp:list
       (common-lisp:cons "ExecutorSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input executors-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype executors-summary-list ()
   '(trivial-types:proper-list executors-summary))
 (common-lisp:defun make-executors-summary-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list executors-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass export-notebook-input common-lisp:nil
                       ((notebook-id :initarg :notebook-id :initform
                         (common-lisp:error ":notebook-id is required") :type
                         (common-lisp:or notebook-id common-lisp:null)
                         :accessor
                         struct-shape-export-notebook-input-notebook-id :shape
                         "NotebookId" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-export-notebook-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'export-notebook-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'export-notebook-input 'make-export-notebook-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          export-notebook-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          export-notebook-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'notebook-id))
      (common-lisp:list
       (common-lisp:cons "NotebookId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          export-notebook-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass export-notebook-output common-lisp:nil
                       ((notebook-metadata :initarg :notebook-metadata
                         :initform common-lisp:nil :type
                         (common-lisp:or notebook-metadata common-lisp:null)
                         :accessor
                         struct-shape-export-notebook-output-notebook-metadata
                         :shape "NotebookMetadata" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (payload :initarg :payload :initform common-lisp:nil
                         :type (common-lisp:or payload common-lisp:null)
                         :accessor struct-shape-export-notebook-output-payload
                         :shape "Payload" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-export-notebook-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'export-notebook-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'export-notebook-output 'make-export-notebook-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          export-notebook-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          export-notebook-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'notebook-metadata))
      (common-lisp:list
       (common-lisp:cons "NotebookMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'payload))
      (common-lisp:list
       (common-lisp:cons "Payload"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          export-notebook-output))
   common-lisp:nil))
(common-lisp:deftype expression-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass filter-definition common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or notebook-name common-lisp:null)
                         :accessor struct-shape-filter-definition-name :shape
                         "NotebookName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-filter-definition
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'filter-definition
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'filter-definition 'make-filter-definition))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input filter-definition))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input filter-definition))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input filter-definition))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-calculation-execution-code-request common-lisp:nil
                       ((calculation-execution-id :initarg
                         :calculation-execution-id :initform
                         (common-lisp:error
                          ":calculation-execution-id is required")
                         :type
                         (common-lisp:or calculation-execution-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-calculation-execution-code-request-calculation-execution-id
                         :shape "CalculationExecutionId" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-calculation-execution-code-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-calculation-execution-code-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-calculation-execution-code-request
                    'make-get-calculation-execution-code-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-calculation-execution-code-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-calculation-execution-code-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'calculation-execution-id))
      (common-lisp:list
       (common-lisp:cons "CalculationExecutionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-calculation-execution-code-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-calculation-execution-code-response common-lisp:nil
                       ((code-block :initarg :code-block :initform
                         common-lisp:nil :type
                         (common-lisp:or code-block common-lisp:null) :accessor
                         struct-shape-get-calculation-execution-code-response-code-block
                         :shape "CodeBlock" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-calculation-execution-code-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-calculation-execution-code-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-calculation-execution-code-response
                    'make-get-calculation-execution-code-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-calculation-execution-code-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-calculation-execution-code-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code-block))
      (common-lisp:list
       (common-lisp:cons "CodeBlock"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-calculation-execution-code-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-calculation-execution-request common-lisp:nil
                       ((calculation-execution-id :initarg
                         :calculation-execution-id :initform
                         (common-lisp:error
                          ":calculation-execution-id is required")
                         :type
                         (common-lisp:or calculation-execution-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-calculation-execution-request-calculation-execution-id
                         :shape "CalculationExecutionId" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-calculation-execution-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-calculation-execution-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-calculation-execution-request
                    'make-get-calculation-execution-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-calculation-execution-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-calculation-execution-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'calculation-execution-id))
      (common-lisp:list
       (common-lisp:cons "CalculationExecutionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-calculation-execution-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-calculation-execution-response common-lisp:nil
                       ((calculation-execution-id :initarg
                         :calculation-execution-id :initform common-lisp:nil
                         :type
                         (common-lisp:or calculation-execution-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-calculation-execution-response-calculation-execution-id
                         :shape "CalculationExecutionId" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (session-id :initarg :session-id :initform
                         common-lisp:nil :type
                         (common-lisp:or session-id common-lisp:null) :accessor
                         struct-shape-get-calculation-execution-response-session-id
                         :shape "SessionId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description-string common-lisp:null)
                         :accessor
                         struct-shape-get-calculation-execution-response-description
                         :shape "DescriptionString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (working-directory :initarg :working-directory
                         :initform common-lisp:nil :type
                         (common-lisp:or s3uri common-lisp:null) :accessor
                         struct-shape-get-calculation-execution-response-working-directory
                         :shape "S3Uri" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or calculation-status common-lisp:null)
                         :accessor
                         struct-shape-get-calculation-execution-response-status
                         :shape "CalculationStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (statistics :initarg :statistics :initform
                         common-lisp:nil :type
                         (common-lisp:or calculation-statistics
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-calculation-execution-response-statistics
                         :shape "CalculationStatistics" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (result :initarg :result :initform common-lisp:nil
                         :type
                         (common-lisp:or calculation-result common-lisp:null)
                         :accessor
                         struct-shape-get-calculation-execution-response-result
                         :shape "CalculationResult" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-calculation-execution-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-calculation-execution-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-calculation-execution-response
                    'make-get-calculation-execution-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-calculation-execution-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-calculation-execution-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'calculation-execution-id))
      (common-lisp:list
       (common-lisp:cons "CalculationExecutionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session-id))
      (common-lisp:list
       (common-lisp:cons "SessionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'working-directory))
      (common-lisp:list
       (common-lisp:cons "WorkingDirectory"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'statistics))
      (common-lisp:list
       (common-lisp:cons "Statistics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'result))
      (common-lisp:list
       (common-lisp:cons "Result"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-calculation-execution-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-calculation-execution-status-request common-lisp:nil
                       ((calculation-execution-id :initarg
                         :calculation-execution-id :initform
                         (common-lisp:error
                          ":calculation-execution-id is required")
                         :type
                         (common-lisp:or calculation-execution-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-calculation-execution-status-request-calculation-execution-id
                         :shape "CalculationExecutionId" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-calculation-execution-status-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-calculation-execution-status-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-calculation-execution-status-request
                    'make-get-calculation-execution-status-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-calculation-execution-status-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-calculation-execution-status-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'calculation-execution-id))
      (common-lisp:list
       (common-lisp:cons "CalculationExecutionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-calculation-execution-status-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-calculation-execution-status-response
                       common-lisp:nil
                       ((status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or calculation-status common-lisp:null)
                         :accessor
                         struct-shape-get-calculation-execution-status-response-status
                         :shape "CalculationStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (statistics :initarg :statistics :initform
                         common-lisp:nil :type
                         (common-lisp:or calculation-statistics
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-calculation-execution-status-response-statistics
                         :shape "CalculationStatistics" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-calculation-execution-status-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-calculation-execution-status-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-calculation-execution-status-response
                    'make-get-calculation-execution-status-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-calculation-execution-status-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-calculation-execution-status-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'statistics))
      (common-lisp:list
       (common-lisp:cons "Statistics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-calculation-execution-status-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-capacity-assignment-configuration-input
                       common-lisp:nil
                       ((capacity-reservation-name :initarg
                         :capacity-reservation-name :initform
                         (common-lisp:error
                          ":capacity-reservation-name is required")
                         :type
                         (common-lisp:or capacity-reservation-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-capacity-assignment-configuration-input-capacity-reservation-name
                         :shape "CapacityReservationName" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-capacity-assignment-configuration-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-capacity-assignment-configuration-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-capacity-assignment-configuration-input
                    'make-get-capacity-assignment-configuration-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-capacity-assignment-configuration-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-capacity-assignment-configuration-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'capacity-reservation-name))
      (common-lisp:list
       (common-lisp:cons "CapacityReservationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-capacity-assignment-configuration-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-capacity-assignment-configuration-output
                       common-lisp:nil
                       ((capacity-assignment-configuration :initarg
                         :capacity-assignment-configuration :initform
                         (common-lisp:error
                          ":capacity-assignment-configuration is required")
                         :type
                         (common-lisp:or capacity-assignment-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-capacity-assignment-configuration-output-capacity-assignment-configuration
                         :shape "CapacityAssignmentConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-capacity-assignment-configuration-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-capacity-assignment-configuration-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-capacity-assignment-configuration-output
                    'make-get-capacity-assignment-configuration-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-capacity-assignment-configuration-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-capacity-assignment-configuration-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'capacity-assignment-configuration))
      (common-lisp:list
       (common-lisp:cons "CapacityAssignmentConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-capacity-assignment-configuration-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-capacity-reservation-input common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or capacity-reservation-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-capacity-reservation-input-name
                         :shape "CapacityReservationName" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-capacity-reservation-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-capacity-reservation-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-capacity-reservation-input
                    'make-get-capacity-reservation-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-capacity-reservation-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-capacity-reservation-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-capacity-reservation-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-capacity-reservation-output common-lisp:nil
                       ((capacity-reservation :initarg :capacity-reservation
                         :initform
                         (common-lisp:error
                          ":capacity-reservation is required")
                         :type
                         (common-lisp:or capacity-reservation common-lisp:null)
                         :accessor
                         struct-shape-get-capacity-reservation-output-capacity-reservation
                         :shape "CapacityReservation" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-capacity-reservation-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-capacity-reservation-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-capacity-reservation-output
                    'make-get-capacity-reservation-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-capacity-reservation-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-capacity-reservation-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'capacity-reservation))
      (common-lisp:list
       (common-lisp:cons "CapacityReservation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-capacity-reservation-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-data-catalog-input common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or catalog-name-string common-lisp:null)
                         :accessor struct-shape-get-data-catalog-input-name
                         :shape "CatalogNameString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (work-group :initarg :work-group :initform
                         common-lisp:nil :type
                         (common-lisp:or work-group-name common-lisp:null)
                         :accessor
                         struct-shape-get-data-catalog-input-work-group :shape
                         "WorkGroupName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-data-catalog-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-data-catalog-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-data-catalog-input 'make-get-data-catalog-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-data-catalog-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-data-catalog-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'work-group))
      (common-lisp:list
       (common-lisp:cons "WorkGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-data-catalog-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-data-catalog-output common-lisp:nil
                       ((data-catalog :initarg :data-catalog :initform
                         common-lisp:nil :type
                         (common-lisp:or data-catalog common-lisp:null)
                         :accessor
                         struct-shape-get-data-catalog-output-data-catalog
                         :shape "DataCatalog" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-data-catalog-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-data-catalog-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-data-catalog-output 'make-get-data-catalog-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-data-catalog-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-data-catalog-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-catalog))
      (common-lisp:list
       (common-lisp:cons "DataCatalog"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-data-catalog-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-database-input common-lisp:nil
                       ((catalog-name :initarg :catalog-name :initform
                         (common-lisp:error ":catalog-name is required") :type
                         (common-lisp:or catalog-name-string common-lisp:null)
                         :accessor struct-shape-get-database-input-catalog-name
                         :shape "CatalogNameString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (database-name :initarg :database-name :initform
                         (common-lisp:error ":database-name is required") :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor
                         struct-shape-get-database-input-database-name :shape
                         "NameString" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (work-group :initarg :work-group :initform
                         common-lisp:nil :type
                         (common-lisp:or work-group-name common-lisp:null)
                         :accessor struct-shape-get-database-input-work-group
                         :shape "WorkGroupName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-database-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-database-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-database-input 'make-get-database-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-database-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-database-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog-name))
      (common-lisp:list
       (common-lisp:cons "CatalogName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-name))
      (common-lisp:list
       (common-lisp:cons "DatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'work-group))
      (common-lisp:list
       (common-lisp:cons "WorkGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-database-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-database-output common-lisp:nil
                       ((database :initarg :database :initform common-lisp:nil
                         :type (common-lisp:or database common-lisp:null)
                         :accessor struct-shape-get-database-output-database
                         :shape "Database" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-database-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-database-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-database-output 'make-get-database-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-database-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-database-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database))
      (common-lisp:list
       (common-lisp:cons "Database"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-database-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-named-query-input common-lisp:nil
                       ((named-query-id :initarg :named-query-id :initform
                         (common-lisp:error ":named-query-id is required")
                         :type (common-lisp:or named-query-id common-lisp:null)
                         :accessor
                         struct-shape-get-named-query-input-named-query-id
                         :shape "NamedQueryId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-named-query-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-named-query-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-named-query-input 'make-get-named-query-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-named-query-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-named-query-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'named-query-id))
      (common-lisp:list
       (common-lisp:cons "NamedQueryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-named-query-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-named-query-output common-lisp:nil
                       ((named-query :initarg :named-query :initform
                         common-lisp:nil :type
                         (common-lisp:or named-query common-lisp:null)
                         :accessor
                         struct-shape-get-named-query-output-named-query :shape
                         "NamedQuery" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-named-query-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-named-query-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-named-query-output 'make-get-named-query-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-named-query-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-named-query-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'named-query))
      (common-lisp:list
       (common-lisp:cons "NamedQuery"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-named-query-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-notebook-metadata-input common-lisp:nil
                       ((notebook-id :initarg :notebook-id :initform
                         (common-lisp:error ":notebook-id is required") :type
                         (common-lisp:or notebook-id common-lisp:null)
                         :accessor
                         struct-shape-get-notebook-metadata-input-notebook-id
                         :shape "NotebookId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-notebook-metadata-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-notebook-metadata-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-notebook-metadata-input
                    'make-get-notebook-metadata-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-notebook-metadata-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-notebook-metadata-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'notebook-id))
      (common-lisp:list
       (common-lisp:cons "NotebookId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-notebook-metadata-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-notebook-metadata-output common-lisp:nil
                       ((notebook-metadata :initarg :notebook-metadata
                         :initform common-lisp:nil :type
                         (common-lisp:or notebook-metadata common-lisp:null)
                         :accessor
                         struct-shape-get-notebook-metadata-output-notebook-metadata
                         :shape "NotebookMetadata" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-notebook-metadata-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-notebook-metadata-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-notebook-metadata-output
                    'make-get-notebook-metadata-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-notebook-metadata-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-notebook-metadata-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'notebook-metadata))
      (common-lisp:list
       (common-lisp:cons "NotebookMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-notebook-metadata-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-prepared-statement-input common-lisp:nil
                       ((statement-name :initarg :statement-name :initform
                         (common-lisp:error ":statement-name is required")
                         :type (common-lisp:or statement-name common-lisp:null)
                         :accessor
                         struct-shape-get-prepared-statement-input-statement-name
                         :shape "StatementName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (work-group :initarg :work-group :initform
                         (common-lisp:error ":work-group is required") :type
                         (common-lisp:or work-group-name common-lisp:null)
                         :accessor
                         struct-shape-get-prepared-statement-input-work-group
                         :shape "WorkGroupName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-prepared-statement-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-prepared-statement-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-prepared-statement-input
                    'make-get-prepared-statement-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-prepared-statement-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-prepared-statement-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'statement-name))
      (common-lisp:list
       (common-lisp:cons "StatementName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'work-group))
      (common-lisp:list
       (common-lisp:cons "WorkGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-prepared-statement-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-prepared-statement-output common-lisp:nil
                       ((prepared-statement :initarg :prepared-statement
                         :initform common-lisp:nil :type
                         (common-lisp:or prepared-statement common-lisp:null)
                         :accessor
                         struct-shape-get-prepared-statement-output-prepared-statement
                         :shape "PreparedStatement" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-prepared-statement-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-prepared-statement-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-prepared-statement-output
                    'make-get-prepared-statement-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-prepared-statement-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-prepared-statement-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'prepared-statement))
      (common-lisp:list
       (common-lisp:cons "PreparedStatement"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-prepared-statement-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-query-execution-input common-lisp:nil
                       ((query-execution-id :initarg :query-execution-id
                         :initform
                         (common-lisp:error ":query-execution-id is required")
                         :type
                         (common-lisp:or query-execution-id common-lisp:null)
                         :accessor
                         struct-shape-get-query-execution-input-query-execution-id
                         :shape "QueryExecutionId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-query-execution-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-query-execution-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-query-execution-input
                    'make-get-query-execution-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-query-execution-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-query-execution-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-execution-id))
      (common-lisp:list
       (common-lisp:cons "QueryExecutionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-query-execution-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-query-execution-output common-lisp:nil
                       ((query-execution :initarg :query-execution :initform
                         common-lisp:nil :type
                         (common-lisp:or query-execution common-lisp:null)
                         :accessor
                         struct-shape-get-query-execution-output-query-execution
                         :shape "QueryExecution" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-query-execution-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-query-execution-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-query-execution-output
                    'make-get-query-execution-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-query-execution-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-query-execution-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-execution))
      (common-lisp:list
       (common-lisp:cons "QueryExecution"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-query-execution-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-query-results-input common-lisp:nil
                       ((query-execution-id :initarg :query-execution-id
                         :initform
                         (common-lisp:error ":query-execution-id is required")
                         :type
                         (common-lisp:or query-execution-id common-lisp:null)
                         :accessor
                         struct-shape-get-query-results-input-query-execution-id
                         :shape "QueryExecutionId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or token common-lisp:null) :accessor
                         struct-shape-get-query-results-input-next-token :shape
                         "Token" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-query-results common-lisp:null)
                         :accessor
                         struct-shape-get-query-results-input-max-results
                         :shape "MaxQueryResults" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-query-results-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-query-results-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-query-results-input 'make-get-query-results-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-query-results-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-query-results-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-execution-id))
      (common-lisp:list
       (common-lisp:cons "QueryExecutionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-query-results-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-query-results-output common-lisp:nil
                       ((update-count :initarg :update-count :initform
                         common-lisp:nil :type
                         (common-lisp:or long common-lisp:null) :accessor
                         struct-shape-get-query-results-output-update-count
                         :shape "Long" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (result-set :initarg :result-set :initform
                         common-lisp:nil :type
                         (common-lisp:or result-set common-lisp:null) :accessor
                         struct-shape-get-query-results-output-result-set
                         :shape "ResultSet" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or token common-lisp:null) :accessor
                         struct-shape-get-query-results-output-next-token
                         :shape "Token" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-query-results-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-query-results-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-query-results-output 'make-get-query-results-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-query-results-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-query-results-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-count))
      (common-lisp:list
       (common-lisp:cons "UpdateCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'result-set))
      (common-lisp:list
       (common-lisp:cons "ResultSet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-query-results-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-query-runtime-statistics-input common-lisp:nil
                       ((query-execution-id :initarg :query-execution-id
                         :initform
                         (common-lisp:error ":query-execution-id is required")
                         :type
                         (common-lisp:or query-execution-id common-lisp:null)
                         :accessor
                         struct-shape-get-query-runtime-statistics-input-query-execution-id
                         :shape "QueryExecutionId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-query-runtime-statistics-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-query-runtime-statistics-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-query-runtime-statistics-input
                    'make-get-query-runtime-statistics-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-query-runtime-statistics-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-query-runtime-statistics-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-execution-id))
      (common-lisp:list
       (common-lisp:cons "QueryExecutionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-query-runtime-statistics-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-query-runtime-statistics-output common-lisp:nil
                       ((query-runtime-statistics :initarg
                         :query-runtime-statistics :initform common-lisp:nil
                         :type
                         (common-lisp:or query-runtime-statistics
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-query-runtime-statistics-output-query-runtime-statistics
                         :shape "QueryRuntimeStatistics" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-query-runtime-statistics-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-query-runtime-statistics-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-query-runtime-statistics-output
                    'make-get-query-runtime-statistics-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-query-runtime-statistics-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-query-runtime-statistics-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'query-runtime-statistics))
      (common-lisp:list
       (common-lisp:cons "QueryRuntimeStatistics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-query-runtime-statistics-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-session-request common-lisp:nil
                       ((session-id :initarg :session-id :initform
                         (common-lisp:error ":session-id is required") :type
                         (common-lisp:or session-id common-lisp:null) :accessor
                         struct-shape-get-session-request-session-id :shape
                         "SessionId" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-session-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-session-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-session-request 'make-get-session-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-session-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-session-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session-id))
      (common-lisp:list
       (common-lisp:cons "SessionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-session-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-session-response common-lisp:nil
                       ((session-id :initarg :session-id :initform
                         common-lisp:nil :type
                         (common-lisp:or session-id common-lisp:null) :accessor
                         struct-shape-get-session-response-session-id :shape
                         "SessionId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description-string common-lisp:null)
                         :accessor
                         struct-shape-get-session-response-description :shape
                         "DescriptionString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (work-group :initarg :work-group :initform
                         common-lisp:nil :type
                         (common-lisp:or work-group-name common-lisp:null)
                         :accessor struct-shape-get-session-response-work-group
                         :shape "WorkGroupName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (engine-version :initarg :engine-version :initform
                         common-lisp:nil :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor
                         struct-shape-get-session-response-engine-version
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (engine-configuration :initarg :engine-configuration
                         :initform common-lisp:nil :type
                         (common-lisp:or engine-configuration common-lisp:null)
                         :accessor
                         struct-shape-get-session-response-engine-configuration
                         :shape "EngineConfiguration" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (notebook-version :initarg :notebook-version :initform
                         common-lisp:nil :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor
                         struct-shape-get-session-response-notebook-version
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (session-configuration :initarg :session-configuration
                         :initform common-lisp:nil :type
                         (common-lisp:or session-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-session-response-session-configuration
                         :shape "SessionConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or session-status common-lisp:null)
                         :accessor struct-shape-get-session-response-status
                         :shape "SessionStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (statistics :initarg :statistics :initform
                         common-lisp:nil :type
                         (common-lisp:or session-statistics common-lisp:null)
                         :accessor struct-shape-get-session-response-statistics
                         :shape "SessionStatistics" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-session-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-session-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-session-response 'make-get-session-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-session-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-session-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session-id))
      (common-lisp:list
       (common-lisp:cons "SessionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'work-group))
      (common-lisp:list
       (common-lisp:cons "WorkGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine-version))
      (common-lisp:list
       (common-lisp:cons "EngineVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'engine-configuration))
      (common-lisp:list
       (common-lisp:cons "EngineConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'notebook-version))
      (common-lisp:list
       (common-lisp:cons "NotebookVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'session-configuration))
      (common-lisp:list
       (common-lisp:cons "SessionConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'statistics))
      (common-lisp:list
       (common-lisp:cons "Statistics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-session-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-session-status-request common-lisp:nil
                       ((session-id :initarg :session-id :initform
                         (common-lisp:error ":session-id is required") :type
                         (common-lisp:or session-id common-lisp:null) :accessor
                         struct-shape-get-session-status-request-session-id
                         :shape "SessionId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-session-status-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-session-status-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-session-status-request
                    'make-get-session-status-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-session-status-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-session-status-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session-id))
      (common-lisp:list
       (common-lisp:cons "SessionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-session-status-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-session-status-response common-lisp:nil
                       ((session-id :initarg :session-id :initform
                         common-lisp:nil :type
                         (common-lisp:or session-id common-lisp:null) :accessor
                         struct-shape-get-session-status-response-session-id
                         :shape "SessionId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or session-status common-lisp:null)
                         :accessor
                         struct-shape-get-session-status-response-status :shape
                         "SessionStatus" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-session-status-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-session-status-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-session-status-response
                    'make-get-session-status-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-session-status-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-session-status-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session-id))
      (common-lisp:list
       (common-lisp:cons "SessionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-session-status-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-table-metadata-input common-lisp:nil
                       ((catalog-name :initarg :catalog-name :initform
                         (common-lisp:error ":catalog-name is required") :type
                         (common-lisp:or catalog-name-string common-lisp:null)
                         :accessor
                         struct-shape-get-table-metadata-input-catalog-name
                         :shape "CatalogNameString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (database-name :initarg :database-name :initform
                         (common-lisp:error ":database-name is required") :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor
                         struct-shape-get-table-metadata-input-database-name
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (table-name :initarg :table-name :initform
                         (common-lisp:error ":table-name is required") :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor
                         struct-shape-get-table-metadata-input-table-name
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (work-group :initarg :work-group :initform
                         common-lisp:nil :type
                         (common-lisp:or work-group-name common-lisp:null)
                         :accessor
                         struct-shape-get-table-metadata-input-work-group
                         :shape "WorkGroupName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-table-metadata-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-table-metadata-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-table-metadata-input 'make-get-table-metadata-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-table-metadata-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-table-metadata-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog-name))
      (common-lisp:list
       (common-lisp:cons "CatalogName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-name))
      (common-lisp:list
       (common-lisp:cons "DatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-name))
      (common-lisp:list
       (common-lisp:cons "TableName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'work-group))
      (common-lisp:list
       (common-lisp:cons "WorkGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-table-metadata-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-table-metadata-output common-lisp:nil
                       ((table-metadata :initarg :table-metadata :initform
                         common-lisp:nil :type
                         (common-lisp:or table-metadata common-lisp:null)
                         :accessor
                         struct-shape-get-table-metadata-output-table-metadata
                         :shape "TableMetadata" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-table-metadata-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-table-metadata-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-table-metadata-output
                    'make-get-table-metadata-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-table-metadata-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-table-metadata-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-metadata))
      (common-lisp:list
       (common-lisp:cons "TableMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-table-metadata-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-work-group-input common-lisp:nil
                       ((work-group :initarg :work-group :initform
                         (common-lisp:error ":work-group is required") :type
                         (common-lisp:or work-group-name common-lisp:null)
                         :accessor struct-shape-get-work-group-input-work-group
                         :shape "WorkGroupName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-work-group-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-work-group-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-work-group-input 'make-get-work-group-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-work-group-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-work-group-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'work-group))
      (common-lisp:list
       (common-lisp:cons "WorkGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-work-group-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-work-group-output common-lisp:nil
                       ((work-group :initarg :work-group :initform
                         common-lisp:nil :type
                         (common-lisp:or work-group common-lisp:null) :accessor
                         struct-shape-get-work-group-output-work-group :shape
                         "WorkGroup" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-work-group-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-work-group-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-work-group-output 'make-get-work-group-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-work-group-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-work-group-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'work-group))
      (common-lisp:list
       (common-lisp:cons "WorkGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-work-group-output))
   common-lisp:nil))
(common-lisp:deftype idempotency-token () 'common-lisp:string)
(common-lisp:deftype identity-center-application-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass identity-center-configuration common-lisp:nil
                       ((enable-identity-center :initarg
                         :enable-identity-center :initform common-lisp:nil
                         :type (common-lisp:or boxed-boolean common-lisp:null)
                         :accessor
                         struct-shape-identity-center-configuration-enable-identity-center
                         :shape "BoxedBoolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (identity-center-instance-arn :initarg
                         :identity-center-instance-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or identity-center-instance-arn
                                         common-lisp:null)
                         :accessor
                         struct-shape-identity-center-configuration-identity-center-instance-arn
                         :shape "IdentityCenterInstanceArn" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-identity-center-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'identity-center-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'identity-center-configuration
                    'make-identity-center-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          identity-center-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          identity-center-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-identity-center))
      (common-lisp:list
       (common-lisp:cons "EnableIdentityCenter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'identity-center-instance-arn))
      (common-lisp:list
       (common-lisp:cons "IdentityCenterInstanceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          identity-center-configuration))
   common-lisp:nil))
(common-lisp:deftype identity-center-instance-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass import-notebook-input common-lisp:nil
                       ((work-group :initarg :work-group :initform
                         (common-lisp:error ":work-group is required") :type
                         (common-lisp:or work-group-name common-lisp:null)
                         :accessor
                         struct-shape-import-notebook-input-work-group :shape
                         "WorkGroupName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or notebook-name common-lisp:null)
                         :accessor struct-shape-import-notebook-input-name
                         :shape "NotebookName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (payload :initarg :payload :initform common-lisp:nil
                         :type (common-lisp:or payload common-lisp:null)
                         :accessor struct-shape-import-notebook-input-payload
                         :shape "Payload" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (type :initarg :type :initform
                         (common-lisp:error ":type is required") :type
                         (common-lisp:or notebook-type common-lisp:null)
                         :accessor struct-shape-import-notebook-input-type
                         :shape "NotebookType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (notebook-s3location-uri :initarg
                         :notebook-s3location-uri :initform common-lisp:nil
                         :type (common-lisp:or s3uri common-lisp:null)
                         :accessor
                         struct-shape-import-notebook-input-notebook-s3location-uri
                         :shape "S3Uri" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (client-request-token :initarg :client-request-token
                         :initform common-lisp:nil :type
                         (common-lisp:or client-request-token common-lisp:null)
                         :accessor
                         struct-shape-import-notebook-input-client-request-token
                         :shape "ClientRequestToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-import-notebook-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'import-notebook-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'import-notebook-input 'make-import-notebook-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          import-notebook-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          import-notebook-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'work-group))
      (common-lisp:list
       (common-lisp:cons "WorkGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'payload))
      (common-lisp:list
       (common-lisp:cons "Payload"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'notebook-s3location-uri))
      (common-lisp:list
       (common-lisp:cons "NotebookS3LocationUri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "ClientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          import-notebook-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass import-notebook-output common-lisp:nil
                       ((notebook-id :initarg :notebook-id :initform
                         common-lisp:nil :type
                         (common-lisp:or notebook-id common-lisp:null)
                         :accessor
                         struct-shape-import-notebook-output-notebook-id :shape
                         "NotebookId" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-import-notebook-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'import-notebook-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'import-notebook-output 'make-import-notebook-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          import-notebook-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          import-notebook-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'notebook-id))
      (common-lisp:list
       (common-lisp:cons "NotebookId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          import-notebook-output))
   common-lisp:nil))
(common-lisp:deftype integer () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition internal-server-exception
     (athena-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       internal-server-exception-message)))
 (common-lisp:export
  (common-lisp:list 'internal-server-exception
                    'internal-server-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-request-exception
     (athena-error)
     ((athena-error-code :initarg :athena-error-code :initform common-lisp:nil
       :reader invalid-request-exception-athena-error-code)
      (message :initarg :message :initform common-lisp:nil :reader
       invalid-request-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-request-exception
                    'invalid-request-exception-athena-error-code
                    'invalid-request-exception-message)))
(common-lisp:deftype key-string () 'common-lisp:string)
(common-lisp:deftype kms-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass list-application-dpusizes-input common-lisp:nil
                       ((max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-application-dpusizes-count
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-application-dpusizes-input-max-results
                         :shape "MaxApplicationDPUSizesCount" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or token common-lisp:null) :accessor
                         struct-shape-list-application-dpusizes-input-next-token
                         :shape "Token" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-application-dpusizes-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-application-dpusizes-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-application-dpusizes-input
                    'make-list-application-dpusizes-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-application-dpusizes-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-application-dpusizes-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-application-dpusizes-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-application-dpusizes-output common-lisp:nil
                       ((application-dpusizes :initarg :application-dpusizes
                         :initform common-lisp:nil :type
                         (common-lisp:or application-dpusizes-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-application-dpusizes-output-application-dpusizes
                         :shape "ApplicationDPUSizesList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or token common-lisp:null) :accessor
                         struct-shape-list-application-dpusizes-output-next-token
                         :shape "Token" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-application-dpusizes-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-application-dpusizes-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-application-dpusizes-output
                    'make-list-application-dpusizes-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-application-dpusizes-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-application-dpusizes-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'application-dpusizes))
      (common-lisp:list
       (common-lisp:cons "ApplicationDPUSizes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-application-dpusizes-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-calculation-executions-request common-lisp:nil
                       ((session-id :initarg :session-id :initform
                         (common-lisp:error ":session-id is required") :type
                         (common-lisp:or session-id common-lisp:null) :accessor
                         struct-shape-list-calculation-executions-request-session-id
                         :shape "SessionId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (state-filter :initarg :state-filter :initform
                         common-lisp:nil :type
                         (common-lisp:or calculation-execution-state
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-calculation-executions-request-state-filter
                         :shape "CalculationExecutionState" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-calculations-count
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-calculation-executions-request-max-results
                         :shape "MaxCalculationsCount" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or session-manager-token
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-calculation-executions-request-next-token
                         :shape "SessionManagerToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-calculation-executions-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-calculation-executions-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-calculation-executions-request
                    'make-list-calculation-executions-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-calculation-executions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-calculation-executions-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session-id))
      (common-lisp:list
       (common-lisp:cons "SessionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state-filter))
      (common-lisp:list
       (common-lisp:cons "StateFilter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-calculation-executions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-calculation-executions-response common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or session-manager-token
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-calculation-executions-response-next-token
                         :shape "SessionManagerToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (calculations :initarg :calculations :initform
                         common-lisp:nil :type
                         (common-lisp:or calculations-list common-lisp:null)
                         :accessor
                         struct-shape-list-calculation-executions-response-calculations
                         :shape "CalculationsList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-calculation-executions-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-calculation-executions-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-calculation-executions-response
                    'make-list-calculation-executions-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-calculation-executions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-calculation-executions-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'calculations))
      (common-lisp:list
       (common-lisp:cons "Calculations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-calculation-executions-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-capacity-reservations-input common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or token common-lisp:null) :accessor
                         struct-shape-list-capacity-reservations-input-next-token
                         :shape "Token" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-capacity-reservations-count
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-capacity-reservations-input-max-results
                         :shape "MaxCapacityReservationsCount" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-capacity-reservations-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-capacity-reservations-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-capacity-reservations-input
                    'make-list-capacity-reservations-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-capacity-reservations-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-capacity-reservations-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-capacity-reservations-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-capacity-reservations-output common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or token common-lisp:null) :accessor
                         struct-shape-list-capacity-reservations-output-next-token
                         :shape "Token" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (capacity-reservations :initarg :capacity-reservations
                         :initform
                         (common-lisp:error
                          ":capacity-reservations is required")
                         :type
                         (common-lisp:or capacity-reservations-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-capacity-reservations-output-capacity-reservations
                         :shape "CapacityReservationsList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-capacity-reservations-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-capacity-reservations-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-capacity-reservations-output
                    'make-list-capacity-reservations-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-capacity-reservations-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-capacity-reservations-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'capacity-reservations))
      (common-lisp:list
       (common-lisp:cons "CapacityReservations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-capacity-reservations-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-data-catalogs-input common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or token common-lisp:null) :accessor
                         struct-shape-list-data-catalogs-input-next-token
                         :shape "Token" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-data-catalogs-count
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-data-catalogs-input-max-results
                         :shape "MaxDataCatalogsCount" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (work-group :initarg :work-group :initform
                         common-lisp:nil :type
                         (common-lisp:or work-group-name common-lisp:null)
                         :accessor
                         struct-shape-list-data-catalogs-input-work-group
                         :shape "WorkGroupName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-data-catalogs-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-data-catalogs-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-data-catalogs-input 'make-list-data-catalogs-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-data-catalogs-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-data-catalogs-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'work-group))
      (common-lisp:list
       (common-lisp:cons "WorkGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-data-catalogs-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-data-catalogs-output common-lisp:nil
                       ((data-catalogs-summary :initarg :data-catalogs-summary
                         :initform common-lisp:nil :type
                         (common-lisp:or data-catalog-summary-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-data-catalogs-output-data-catalogs-summary
                         :shape "DataCatalogSummaryList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or token common-lisp:null) :accessor
                         struct-shape-list-data-catalogs-output-next-token
                         :shape "Token" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-data-catalogs-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-data-catalogs-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-data-catalogs-output
                    'make-list-data-catalogs-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-data-catalogs-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-data-catalogs-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-catalogs-summary))
      (common-lisp:list
       (common-lisp:cons "DataCatalogsSummary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-data-catalogs-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-databases-input common-lisp:nil
                       ((catalog-name :initarg :catalog-name :initform
                         (common-lisp:error ":catalog-name is required") :type
                         (common-lisp:or catalog-name-string common-lisp:null)
                         :accessor
                         struct-shape-list-databases-input-catalog-name :shape
                         "CatalogNameString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or token common-lisp:null) :accessor
                         struct-shape-list-databases-input-next-token :shape
                         "Token" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-databases-count common-lisp:null)
                         :accessor
                         struct-shape-list-databases-input-max-results :shape
                         "MaxDatabasesCount" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (work-group :initarg :work-group :initform
                         common-lisp:nil :type
                         (common-lisp:or work-group-name common-lisp:null)
                         :accessor struct-shape-list-databases-input-work-group
                         :shape "WorkGroupName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-databases-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-databases-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-databases-input 'make-list-databases-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-databases-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-databases-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog-name))
      (common-lisp:list
       (common-lisp:cons "CatalogName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'work-group))
      (common-lisp:list
       (common-lisp:cons "WorkGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-databases-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-databases-output common-lisp:nil
                       ((database-list :initarg :database-list :initform
                         common-lisp:nil :type
                         (common-lisp:or database-list common-lisp:null)
                         :accessor
                         struct-shape-list-databases-output-database-list
                         :shape "DatabaseList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or token common-lisp:null) :accessor
                         struct-shape-list-databases-output-next-token :shape
                         "Token" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-databases-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-databases-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-databases-output 'make-list-databases-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-databases-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-databases-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-list))
      (common-lisp:list
       (common-lisp:cons "DatabaseList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-databases-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-engine-versions-input common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or token common-lisp:null) :accessor
                         struct-shape-list-engine-versions-input-next-token
                         :shape "Token" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-engine-versions-count
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-engine-versions-input-max-results
                         :shape "MaxEngineVersionsCount" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-engine-versions-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-engine-versions-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-engine-versions-input
                    'make-list-engine-versions-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-engine-versions-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-engine-versions-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-engine-versions-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-engine-versions-output common-lisp:nil
                       ((engine-versions :initarg :engine-versions :initform
                         common-lisp:nil :type
                         (common-lisp:or engine-versions-list common-lisp:null)
                         :accessor
                         struct-shape-list-engine-versions-output-engine-versions
                         :shape "EngineVersionsList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or token common-lisp:null) :accessor
                         struct-shape-list-engine-versions-output-next-token
                         :shape "Token" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-engine-versions-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-engine-versions-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-engine-versions-output
                    'make-list-engine-versions-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-engine-versions-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-engine-versions-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine-versions))
      (common-lisp:list
       (common-lisp:cons "EngineVersions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-engine-versions-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-executors-request common-lisp:nil
                       ((session-id :initarg :session-id :initform
                         (common-lisp:error ":session-id is required") :type
                         (common-lisp:or session-id common-lisp:null) :accessor
                         struct-shape-list-executors-request-session-id :shape
                         "SessionId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (executor-state-filter :initarg :executor-state-filter
                         :initform common-lisp:nil :type
                         (common-lisp:or executor-state common-lisp:null)
                         :accessor
                         struct-shape-list-executors-request-executor-state-filter
                         :shape "ExecutorState" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-list-executors-count
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-executors-request-max-results :shape
                         "MaxListExecutorsCount" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or session-manager-token
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-executors-request-next-token :shape
                         "SessionManagerToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-executors-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-executors-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-executors-request 'make-list-executors-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-executors-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-executors-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session-id))
      (common-lisp:list
       (common-lisp:cons "SessionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'executor-state-filter))
      (common-lisp:list
       (common-lisp:cons "ExecutorStateFilter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-executors-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-executors-response common-lisp:nil
                       ((session-id :initarg :session-id :initform
                         (common-lisp:error ":session-id is required") :type
                         (common-lisp:or session-id common-lisp:null) :accessor
                         struct-shape-list-executors-response-session-id :shape
                         "SessionId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or session-manager-token
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-executors-response-next-token :shape
                         "SessionManagerToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (executors-summary :initarg :executors-summary
                         :initform common-lisp:nil :type
                         (common-lisp:or executors-summary-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-executors-response-executors-summary
                         :shape "ExecutorsSummaryList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-executors-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-executors-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-executors-response 'make-list-executors-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-executors-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-executors-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session-id))
      (common-lisp:list
       (common-lisp:cons "SessionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'executors-summary))
      (common-lisp:list
       (common-lisp:cons "ExecutorsSummary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-executors-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-named-queries-input common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or token common-lisp:null) :accessor
                         struct-shape-list-named-queries-input-next-token
                         :shape "Token" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-named-queries-count
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-named-queries-input-max-results
                         :shape "MaxNamedQueriesCount" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (work-group :initarg :work-group :initform
                         common-lisp:nil :type
                         (common-lisp:or work-group-name common-lisp:null)
                         :accessor
                         struct-shape-list-named-queries-input-work-group
                         :shape "WorkGroupName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-named-queries-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-named-queries-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-named-queries-input 'make-list-named-queries-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-named-queries-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-named-queries-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'work-group))
      (common-lisp:list
       (common-lisp:cons "WorkGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-named-queries-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-named-queries-output common-lisp:nil
                       ((named-query-ids :initarg :named-query-ids :initform
                         common-lisp:nil :type
                         (common-lisp:or named-query-id-list common-lisp:null)
                         :accessor
                         struct-shape-list-named-queries-output-named-query-ids
                         :shape "NamedQueryIdList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or token common-lisp:null) :accessor
                         struct-shape-list-named-queries-output-next-token
                         :shape "Token" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-named-queries-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-named-queries-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-named-queries-output
                    'make-list-named-queries-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-named-queries-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-named-queries-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'named-query-ids))
      (common-lisp:list
       (common-lisp:cons "NamedQueryIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-named-queries-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-notebook-metadata-input common-lisp:nil
                       ((filters :initarg :filters :initform common-lisp:nil
                         :type
                         (common-lisp:or filter-definition common-lisp:null)
                         :accessor
                         struct-shape-list-notebook-metadata-input-filters
                         :shape "FilterDefinition" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or token common-lisp:null) :accessor
                         struct-shape-list-notebook-metadata-input-next-token
                         :shape "Token" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-notebooks-count common-lisp:null)
                         :accessor
                         struct-shape-list-notebook-metadata-input-max-results
                         :shape "MaxNotebooksCount" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (work-group :initarg :work-group :initform
                         (common-lisp:error ":work-group is required") :type
                         (common-lisp:or work-group-name common-lisp:null)
                         :accessor
                         struct-shape-list-notebook-metadata-input-work-group
                         :shape "WorkGroupName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-notebook-metadata-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-notebook-metadata-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-notebook-metadata-input
                    'make-list-notebook-metadata-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-notebook-metadata-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-notebook-metadata-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'work-group))
      (common-lisp:list
       (common-lisp:cons "WorkGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-notebook-metadata-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-notebook-metadata-output common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or token common-lisp:null) :accessor
                         struct-shape-list-notebook-metadata-output-next-token
                         :shape "Token" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (notebook-metadata-list :initarg
                         :notebook-metadata-list :initform common-lisp:nil
                         :type
                         (common-lisp:or notebook-metadata-array
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-notebook-metadata-output-notebook-metadata-list
                         :shape "NotebookMetadataArray" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-notebook-metadata-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-notebook-metadata-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-notebook-metadata-output
                    'make-list-notebook-metadata-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-notebook-metadata-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-notebook-metadata-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'notebook-metadata-list))
      (common-lisp:list
       (common-lisp:cons "NotebookMetadataList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-notebook-metadata-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-notebook-sessions-request common-lisp:nil
                       ((notebook-id :initarg :notebook-id :initform
                         (common-lisp:error ":notebook-id is required") :type
                         (common-lisp:or notebook-id common-lisp:null)
                         :accessor
                         struct-shape-list-notebook-sessions-request-notebook-id
                         :shape "NotebookId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-sessions-count common-lisp:null)
                         :accessor
                         struct-shape-list-notebook-sessions-request-max-results
                         :shape "MaxSessionsCount" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or token common-lisp:null) :accessor
                         struct-shape-list-notebook-sessions-request-next-token
                         :shape "Token" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-notebook-sessions-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-notebook-sessions-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-notebook-sessions-request
                    'make-list-notebook-sessions-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-notebook-sessions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-notebook-sessions-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'notebook-id))
      (common-lisp:list
       (common-lisp:cons "NotebookId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-notebook-sessions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-notebook-sessions-response common-lisp:nil
                       ((notebook-sessions-list :initarg
                         :notebook-sessions-list :initform
                         (common-lisp:error
                          ":notebook-sessions-list is required")
                         :type
                         (common-lisp:or notebook-sessions-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-notebook-sessions-response-notebook-sessions-list
                         :shape "NotebookSessionsList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or token common-lisp:null) :accessor
                         struct-shape-list-notebook-sessions-response-next-token
                         :shape "Token" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-notebook-sessions-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-notebook-sessions-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-notebook-sessions-response
                    'make-list-notebook-sessions-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-notebook-sessions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-notebook-sessions-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'notebook-sessions-list))
      (common-lisp:list
       (common-lisp:cons "NotebookSessionsList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-notebook-sessions-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-prepared-statements-input common-lisp:nil
                       ((work-group :initarg :work-group :initform
                         (common-lisp:error ":work-group is required") :type
                         (common-lisp:or work-group-name common-lisp:null)
                         :accessor
                         struct-shape-list-prepared-statements-input-work-group
                         :shape "WorkGroupName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or token common-lisp:null) :accessor
                         struct-shape-list-prepared-statements-input-next-token
                         :shape "Token" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-prepared-statements-count
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-prepared-statements-input-max-results
                         :shape "MaxPreparedStatementsCount" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-prepared-statements-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-prepared-statements-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-prepared-statements-input
                    'make-list-prepared-statements-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-prepared-statements-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-prepared-statements-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'work-group))
      (common-lisp:list
       (common-lisp:cons "WorkGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-prepared-statements-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-prepared-statements-output common-lisp:nil
                       ((prepared-statements :initarg :prepared-statements
                         :initform common-lisp:nil :type
                         (common-lisp:or prepared-statements-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-prepared-statements-output-prepared-statements
                         :shape "PreparedStatementsList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or token common-lisp:null) :accessor
                         struct-shape-list-prepared-statements-output-next-token
                         :shape "Token" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-prepared-statements-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-prepared-statements-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-prepared-statements-output
                    'make-list-prepared-statements-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-prepared-statements-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-prepared-statements-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'prepared-statements))
      (common-lisp:list
       (common-lisp:cons "PreparedStatements"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-prepared-statements-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-query-executions-input common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or token common-lisp:null) :accessor
                         struct-shape-list-query-executions-input-next-token
                         :shape "Token" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-query-executions-count
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-query-executions-input-max-results
                         :shape "MaxQueryExecutionsCount" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (work-group :initarg :work-group :initform
                         common-lisp:nil :type
                         (common-lisp:or work-group-name common-lisp:null)
                         :accessor
                         struct-shape-list-query-executions-input-work-group
                         :shape "WorkGroupName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-query-executions-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-query-executions-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-query-executions-input
                    'make-list-query-executions-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-query-executions-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-query-executions-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'work-group))
      (common-lisp:list
       (common-lisp:cons "WorkGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-query-executions-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-query-executions-output common-lisp:nil
                       ((query-execution-ids :initarg :query-execution-ids
                         :initform common-lisp:nil :type
                         (common-lisp:or query-execution-id-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-query-executions-output-query-execution-ids
                         :shape "QueryExecutionIdList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or token common-lisp:null) :accessor
                         struct-shape-list-query-executions-output-next-token
                         :shape "Token" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-query-executions-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-query-executions-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-query-executions-output
                    'make-list-query-executions-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-query-executions-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-query-executions-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-execution-ids))
      (common-lisp:list
       (common-lisp:cons "QueryExecutionIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-query-executions-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-sessions-request common-lisp:nil
                       ((work-group :initarg :work-group :initform
                         (common-lisp:error ":work-group is required") :type
                         (common-lisp:or work-group-name common-lisp:null)
                         :accessor
                         struct-shape-list-sessions-request-work-group :shape
                         "WorkGroupName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (state-filter :initarg :state-filter :initform
                         common-lisp:nil :type
                         (common-lisp:or session-state common-lisp:null)
                         :accessor
                         struct-shape-list-sessions-request-state-filter :shape
                         "SessionState" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-sessions-count common-lisp:null)
                         :accessor
                         struct-shape-list-sessions-request-max-results :shape
                         "MaxSessionsCount" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or session-manager-token
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-sessions-request-next-token :shape
                         "SessionManagerToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-sessions-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-sessions-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-sessions-request 'make-list-sessions-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-sessions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-sessions-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'work-group))
      (common-lisp:list
       (common-lisp:cons "WorkGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state-filter))
      (common-lisp:list
       (common-lisp:cons "StateFilter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-sessions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-sessions-response common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or session-manager-token
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-sessions-response-next-token :shape
                         "SessionManagerToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (sessions :initarg :sessions :initform common-lisp:nil
                         :type (common-lisp:or sessions-list common-lisp:null)
                         :accessor struct-shape-list-sessions-response-sessions
                         :shape "SessionsList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-sessions-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-sessions-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-sessions-response 'make-list-sessions-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-sessions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-sessions-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sessions))
      (common-lisp:list
       (common-lisp:cons "Sessions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-sessions-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-table-metadata-input common-lisp:nil
                       ((catalog-name :initarg :catalog-name :initform
                         (common-lisp:error ":catalog-name is required") :type
                         (common-lisp:or catalog-name-string common-lisp:null)
                         :accessor
                         struct-shape-list-table-metadata-input-catalog-name
                         :shape "CatalogNameString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (database-name :initarg :database-name :initform
                         (common-lisp:error ":database-name is required") :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor
                         struct-shape-list-table-metadata-input-database-name
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (expression :initarg :expression :initform
                         common-lisp:nil :type
                         (common-lisp:or expression-string common-lisp:null)
                         :accessor
                         struct-shape-list-table-metadata-input-expression
                         :shape "ExpressionString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or token common-lisp:null) :accessor
                         struct-shape-list-table-metadata-input-next-token
                         :shape "Token" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-table-metadata-count
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-table-metadata-input-max-results
                         :shape "MaxTableMetadataCount" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (work-group :initarg :work-group :initform
                         common-lisp:nil :type
                         (common-lisp:or work-group-name common-lisp:null)
                         :accessor
                         struct-shape-list-table-metadata-input-work-group
                         :shape "WorkGroupName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-table-metadata-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-table-metadata-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-table-metadata-input
                    'make-list-table-metadata-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-table-metadata-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-table-metadata-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog-name))
      (common-lisp:list
       (common-lisp:cons "CatalogName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-name))
      (common-lisp:list
       (common-lisp:cons "DatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expression))
      (common-lisp:list
       (common-lisp:cons "Expression"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'work-group))
      (common-lisp:list
       (common-lisp:cons "WorkGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-table-metadata-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-table-metadata-output common-lisp:nil
                       ((table-metadata-list :initarg :table-metadata-list
                         :initform common-lisp:nil :type
                         (common-lisp:or table-metadata-list common-lisp:null)
                         :accessor
                         struct-shape-list-table-metadata-output-table-metadata-list
                         :shape "TableMetadataList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or token common-lisp:null) :accessor
                         struct-shape-list-table-metadata-output-next-token
                         :shape "Token" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-table-metadata-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-table-metadata-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-table-metadata-output
                    'make-list-table-metadata-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-table-metadata-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-table-metadata-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-metadata-list))
      (common-lisp:list
       (common-lisp:cons "TableMetadataList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-table-metadata-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-input common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resource-arn is required") :type
                         (common-lisp:or amazon-resource-name common-lisp:null)
                         :accessor
                         struct-shape-list-tags-for-resource-input-resource-arn
                         :shape "AmazonResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or token common-lisp:null) :accessor
                         struct-shape-list-tags-for-resource-input-next-token
                         :shape "Token" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-tags-count common-lisp:null)
                         :accessor
                         struct-shape-list-tags-for-resource-input-max-results
                         :shape "MaxTagsCount" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-tags-for-resource-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-tags-for-resource-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-input
                    'make-list-tags-for-resource-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-output common-lisp:nil
                       ((tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-list-tags-for-resource-output-tags :shape
                         "TagList" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or token common-lisp:null) :accessor
                         struct-shape-list-tags-for-resource-output-next-token
                         :shape "Token" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-tags-for-resource-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-output
                    'make-list-tags-for-resource-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-work-groups-input common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or token common-lisp:null) :accessor
                         struct-shape-list-work-groups-input-next-token :shape
                         "Token" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-work-groups-count
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-work-groups-input-max-results :shape
                         "MaxWorkGroupsCount" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-work-groups-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-work-groups-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-work-groups-input 'make-list-work-groups-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-work-groups-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-work-groups-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-work-groups-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-work-groups-output common-lisp:nil
                       ((work-groups :initarg :work-groups :initform
                         common-lisp:nil :type
                         (common-lisp:or work-groups-list common-lisp:null)
                         :accessor
                         struct-shape-list-work-groups-output-work-groups
                         :shape "WorkGroupsList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or token common-lisp:null) :accessor
                         struct-shape-list-work-groups-output-next-token :shape
                         "Token" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-work-groups-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-work-groups-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-work-groups-output 'make-list-work-groups-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-work-groups-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-work-groups-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'work-groups))
      (common-lisp:list
       (common-lisp:cons "WorkGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-work-groups-output))
   common-lisp:nil))
(common-lisp:deftype long () 'common-lisp:integer)
(common-lisp:deftype max-application-dpusizes-count () 'common-lisp:integer)
(common-lisp:deftype max-calculations-count () 'common-lisp:integer)
(common-lisp:deftype max-capacity-reservations-count () 'common-lisp:integer)
(common-lisp:deftype max-concurrent-dpus () 'common-lisp:integer)
(common-lisp:deftype max-data-catalogs-count () 'common-lisp:integer)
(common-lisp:deftype max-databases-count () 'common-lisp:integer)
(common-lisp:deftype max-engine-versions-count () 'common-lisp:integer)
(common-lisp:deftype max-list-executors-count () 'common-lisp:integer)
(common-lisp:deftype max-named-queries-count () 'common-lisp:integer)
(common-lisp:deftype max-notebooks-count () 'common-lisp:integer)
(common-lisp:deftype max-prepared-statements-count () 'common-lisp:integer)
(common-lisp:deftype max-query-executions-count () 'common-lisp:integer)
(common-lisp:deftype max-query-results () 'common-lisp:integer)
(common-lisp:deftype max-sessions-count () 'common-lisp:integer)
(common-lisp:deftype max-table-metadata-count () 'common-lisp:integer)
(common-lisp:deftype max-tags-count () 'common-lisp:integer)
(common-lisp:deftype max-work-groups-count () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition metadata-exception
     (athena-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       metadata-exception-message)))
 (common-lisp:export
  (common-lisp:list 'metadata-exception 'metadata-exception-message)))
(common-lisp:deftype name-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass named-query common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor struct-shape-named-query-name :shape
                         "NameString" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description-string common-lisp:null)
                         :accessor struct-shape-named-query-description :shape
                         "DescriptionString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (database :initarg :database :initform
                         (common-lisp:error ":database is required") :type
                         (common-lisp:or database-string common-lisp:null)
                         :accessor struct-shape-named-query-database :shape
                         "DatabaseString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (query-string :initarg :query-string :initform
                         (common-lisp:error ":query-string is required") :type
                         (common-lisp:or query-string common-lisp:null)
                         :accessor struct-shape-named-query-query-string :shape
                         "QueryString" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (named-query-id :initarg :named-query-id :initform
                         common-lisp:nil :type
                         (common-lisp:or named-query-id common-lisp:null)
                         :accessor struct-shape-named-query-named-query-id
                         :shape "NamedQueryId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (work-group :initarg :work-group :initform
                         common-lisp:nil :type
                         (common-lisp:or work-group-name common-lisp:null)
                         :accessor struct-shape-named-query-work-group :shape
                         "WorkGroupName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-named-query
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'named-query
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'named-query 'make-named-query))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input named-query))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input named-query))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database))
      (common-lisp:list
       (common-lisp:cons "Database"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-string))
      (common-lisp:list
       (common-lisp:cons "QueryString"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'named-query-id))
      (common-lisp:list
       (common-lisp:cons "NamedQueryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'work-group))
      (common-lisp:list
       (common-lisp:cons "WorkGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input named-query))
   common-lisp:nil))
(common-lisp:deftype named-query-description-string () 'common-lisp:string)
(common-lisp:deftype named-query-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype named-query-id-list ()
   '(trivial-types:proper-list named-query-id))
 (common-lisp:defun make-named-query-id-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list named-query-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype named-query-list ()
   '(trivial-types:proper-list named-query))
 (common-lisp:defun make-named-query-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list named-query))
   aws-sdk/generator/shape::members))
(common-lisp:deftype notebook-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass notebook-metadata common-lisp:nil
                       ((notebook-id :initarg :notebook-id :initform
                         common-lisp:nil :type
                         (common-lisp:or notebook-id common-lisp:null)
                         :accessor struct-shape-notebook-metadata-notebook-id
                         :shape "NotebookId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or notebook-name common-lisp:null)
                         :accessor struct-shape-notebook-metadata-name :shape
                         "NotebookName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (work-group :initarg :work-group :initform
                         common-lisp:nil :type
                         (common-lisp:or work-group-name common-lisp:null)
                         :accessor struct-shape-notebook-metadata-work-group
                         :shape "WorkGroupName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (creation-time :initarg :creation-time :initform
                         common-lisp:nil :type
                         (common-lisp:or date common-lisp:null) :accessor
                         struct-shape-notebook-metadata-creation-time :shape
                         "Date" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or notebook-type common-lisp:null)
                         :accessor struct-shape-notebook-metadata-type :shape
                         "NotebookType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-modified-time :initarg :last-modified-time
                         :initform common-lisp:nil :type
                         (common-lisp:or date common-lisp:null) :accessor
                         struct-shape-notebook-metadata-last-modified-time
                         :shape "Date" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-notebook-metadata
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'notebook-metadata
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'notebook-metadata 'make-notebook-metadata))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input notebook-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input notebook-metadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'notebook-id))
      (common-lisp:list
       (common-lisp:cons "NotebookId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'work-group))
      (common-lisp:list
       (common-lisp:cons "WorkGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-time))
      (common-lisp:list
       (common-lisp:cons "LastModifiedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input notebook-metadata))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype notebook-metadata-array ()
   '(trivial-types:proper-list notebook-metadata))
 (common-lisp:defun make-notebook-metadata-array
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list notebook-metadata))
   aws-sdk/generator/shape::members))
(common-lisp:deftype notebook-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass notebook-session-summary common-lisp:nil
                       ((session-id :initarg :session-id :initform
                         common-lisp:nil :type
                         (common-lisp:or session-id common-lisp:null) :accessor
                         struct-shape-notebook-session-summary-session-id
                         :shape "SessionId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (creation-time :initarg :creation-time :initform
                         common-lisp:nil :type
                         (common-lisp:or date common-lisp:null) :accessor
                         struct-shape-notebook-session-summary-creation-time
                         :shape "Date" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-notebook-session-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'notebook-session-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'notebook-session-summary 'make-notebook-session-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          notebook-session-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          notebook-session-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session-id))
      (common-lisp:list
       (common-lisp:cons "SessionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          notebook-session-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype notebook-sessions-list ()
   '(trivial-types:proper-list notebook-session-summary))
 (common-lisp:defun make-notebook-sessions-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            notebook-session-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype notebook-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype parameters-map () 'common-lisp:hash-table)
 (common-lisp:defun make-parameters-map (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype parameters-map-value () 'common-lisp:string)
(common-lisp:deftype payload () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass prepared-statement common-lisp:nil
                       ((statement-name :initarg :statement-name :initform
                         common-lisp:nil :type
                         (common-lisp:or statement-name common-lisp:null)
                         :accessor
                         struct-shape-prepared-statement-statement-name :shape
                         "StatementName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (query-statement :initarg :query-statement :initform
                         common-lisp:nil :type
                         (common-lisp:or query-string common-lisp:null)
                         :accessor
                         struct-shape-prepared-statement-query-statement :shape
                         "QueryString" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (work-group-name :initarg :work-group-name :initform
                         common-lisp:nil :type
                         (common-lisp:or work-group-name common-lisp:null)
                         :accessor
                         struct-shape-prepared-statement-work-group-name :shape
                         "WorkGroupName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description-string common-lisp:null)
                         :accessor struct-shape-prepared-statement-description
                         :shape "DescriptionString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-modified-time :initarg :last-modified-time
                         :initform common-lisp:nil :type
                         (common-lisp:or date common-lisp:null) :accessor
                         struct-shape-prepared-statement-last-modified-time
                         :shape "Date" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-prepared-statement
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'prepared-statement
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'prepared-statement 'make-prepared-statement))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input prepared-statement))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input prepared-statement))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'statement-name))
      (common-lisp:list
       (common-lisp:cons "StatementName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-statement))
      (common-lisp:list
       (common-lisp:cons "QueryStatement"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'work-group-name))
      (common-lisp:list
       (common-lisp:cons "WorkGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-time))
      (common-lisp:list
       (common-lisp:cons "LastModifiedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input prepared-statement))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype prepared-statement-details-list ()
   '(trivial-types:proper-list prepared-statement))
 (common-lisp:defun make-prepared-statement-details-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list prepared-statement))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype prepared-statement-name-list ()
   '(trivial-types:proper-list statement-name))
 (common-lisp:defun make-prepared-statement-name-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list statement-name))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass prepared-statement-summary common-lisp:nil
                       ((statement-name :initarg :statement-name :initform
                         common-lisp:nil :type
                         (common-lisp:or statement-name common-lisp:null)
                         :accessor
                         struct-shape-prepared-statement-summary-statement-name
                         :shape "StatementName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-modified-time :initarg :last-modified-time
                         :initform common-lisp:nil :type
                         (common-lisp:or date common-lisp:null) :accessor
                         struct-shape-prepared-statement-summary-last-modified-time
                         :shape "Date" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-prepared-statement-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'prepared-statement-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'prepared-statement-summary
                    'make-prepared-statement-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          prepared-statement-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          prepared-statement-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'statement-name))
      (common-lisp:list
       (common-lisp:cons "StatementName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-time))
      (common-lisp:list
       (common-lisp:cons "LastModifiedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          prepared-statement-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype prepared-statements-list ()
   '(trivial-types:proper-list prepared-statement-summary))
 (common-lisp:defun make-prepared-statements-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            prepared-statement-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass put-capacity-assignment-configuration-input
                       common-lisp:nil
                       ((capacity-reservation-name :initarg
                         :capacity-reservation-name :initform
                         (common-lisp:error
                          ":capacity-reservation-name is required")
                         :type
                         (common-lisp:or capacity-reservation-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-put-capacity-assignment-configuration-input-capacity-reservation-name
                         :shape "CapacityReservationName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (capacity-assignments :initarg :capacity-assignments
                         :initform
                         (common-lisp:error
                          ":capacity-assignments is required")
                         :type
                         (common-lisp:or capacity-assignments-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-put-capacity-assignment-configuration-input-capacity-assignments
                         :shape "CapacityAssignmentsList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-capacity-assignment-configuration-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-capacity-assignment-configuration-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-capacity-assignment-configuration-input
                    'make-put-capacity-assignment-configuration-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-capacity-assignment-configuration-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-capacity-assignment-configuration-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'capacity-reservation-name))
      (common-lisp:list
       (common-lisp:cons "CapacityReservationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'capacity-assignments))
      (common-lisp:list
       (common-lisp:cons "CapacityAssignments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-capacity-assignment-configuration-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-capacity-assignment-configuration-output
                       common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-capacity-assignment-configuration-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-capacity-assignment-configuration-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-capacity-assignment-configuration-output
                    'make-put-capacity-assignment-configuration-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-capacity-assignment-configuration-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-capacity-assignment-configuration-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-capacity-assignment-configuration-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass query-execution common-lisp:nil
                       ((query-execution-id :initarg :query-execution-id
                         :initform common-lisp:nil :type
                         (common-lisp:or query-execution-id common-lisp:null)
                         :accessor
                         struct-shape-query-execution-query-execution-id :shape
                         "QueryExecutionId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (query :initarg :query :initform common-lisp:nil :type
                         (common-lisp:or query-string common-lisp:null)
                         :accessor struct-shape-query-execution-query :shape
                         "QueryString" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (statement-type :initarg :statement-type :initform
                         common-lisp:nil :type
                         (common-lisp:or statement-type common-lisp:null)
                         :accessor struct-shape-query-execution-statement-type
                         :shape "StatementType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (result-configuration :initarg :result-configuration
                         :initform common-lisp:nil :type
                         (common-lisp:or result-configuration common-lisp:null)
                         :accessor
                         struct-shape-query-execution-result-configuration
                         :shape "ResultConfiguration" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (result-reuse-configuration :initarg
                         :result-reuse-configuration :initform common-lisp:nil
                         :type
                         (common-lisp:or result-reuse-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-query-execution-result-reuse-configuration
                         :shape "ResultReuseConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (query-execution-context :initarg
                         :query-execution-context :initform common-lisp:nil
                         :type
                         (common-lisp:or query-execution-context
                                         common-lisp:null)
                         :accessor
                         struct-shape-query-execution-query-execution-context
                         :shape "QueryExecutionContext" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or query-execution-status
                                         common-lisp:null)
                         :accessor struct-shape-query-execution-status :shape
                         "QueryExecutionStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (statistics :initarg :statistics :initform
                         common-lisp:nil :type
                         (common-lisp:or query-execution-statistics
                                         common-lisp:null)
                         :accessor struct-shape-query-execution-statistics
                         :shape "QueryExecutionStatistics" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (work-group :initarg :work-group :initform
                         common-lisp:nil :type
                         (common-lisp:or work-group-name common-lisp:null)
                         :accessor struct-shape-query-execution-work-group
                         :shape "WorkGroupName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (engine-version :initarg :engine-version :initform
                         common-lisp:nil :type
                         (common-lisp:or engine-version common-lisp:null)
                         :accessor struct-shape-query-execution-engine-version
                         :shape "EngineVersion" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (execution-parameters :initarg :execution-parameters
                         :initform common-lisp:nil :type
                         (common-lisp:or execution-parameters common-lisp:null)
                         :accessor
                         struct-shape-query-execution-execution-parameters
                         :shape "ExecutionParameters" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (substatement-type :initarg :substatement-type
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-query-execution-substatement-type :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (query-results-s3access-grants-configuration :initarg
                         :query-results-s3access-grants-configuration :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          query-results-s3access-grants-configuration
                          common-lisp:null)
                         :accessor
                         struct-shape-query-execution-query-results-s3access-grants-configuration
                         :shape "QueryResultsS3AccessGrantsConfiguration"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-query-execution
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'query-execution
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'query-execution 'make-query-execution))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input query-execution))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input query-execution))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-execution-id))
      (common-lisp:list
       (common-lisp:cons "QueryExecutionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query))
      (common-lisp:list
       (common-lisp:cons "Query"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'statement-type))
      (common-lisp:list
       (common-lisp:cons "StatementType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'result-configuration))
      (common-lisp:list
       (common-lisp:cons "ResultConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'result-reuse-configuration))
      (common-lisp:list
       (common-lisp:cons "ResultReuseConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'query-execution-context))
      (common-lisp:list
       (common-lisp:cons "QueryExecutionContext"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'statistics))
      (common-lisp:list
       (common-lisp:cons "Statistics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'work-group))
      (common-lisp:list
       (common-lisp:cons "WorkGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine-version))
      (common-lisp:list
       (common-lisp:cons "EngineVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'execution-parameters))
      (common-lisp:list
       (common-lisp:cons "ExecutionParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'substatement-type))
      (common-lisp:list
       (common-lisp:cons "SubstatementType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'query-results-s3access-grants-configuration))
      (common-lisp:list
       (common-lisp:cons "QueryResultsS3AccessGrantsConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input query-execution))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass query-execution-context common-lisp:nil
                       ((database :initarg :database :initform common-lisp:nil
                         :type
                         (common-lisp:or database-string common-lisp:null)
                         :accessor
                         struct-shape-query-execution-context-database :shape
                         "DatabaseString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (catalog :initarg :catalog :initform common-lisp:nil
                         :type
                         (common-lisp:or catalog-name-string common-lisp:null)
                         :accessor struct-shape-query-execution-context-catalog
                         :shape "CatalogNameString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-query-execution-context
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'query-execution-context
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'query-execution-context 'make-query-execution-context))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          query-execution-context))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          query-execution-context))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database))
      (common-lisp:list
       (common-lisp:cons "Database"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog))
      (common-lisp:list
       (common-lisp:cons "Catalog"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          query-execution-context))
   common-lisp:nil))
(common-lisp:deftype query-execution-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype query-execution-id-list ()
   '(trivial-types:proper-list query-execution-id))
 (common-lisp:defun make-query-execution-id-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list query-execution-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype query-execution-list ()
   '(trivial-types:proper-list query-execution))
 (common-lisp:defun make-query-execution-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list query-execution))
   aws-sdk/generator/shape::members))
(common-lisp:deftype query-execution-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass query-execution-statistics common-lisp:nil
                       ((engine-execution-time-in-millis :initarg
                         :engine-execution-time-in-millis :initform
                         common-lisp:nil :type
                         (common-lisp:or long common-lisp:null) :accessor
                         struct-shape-query-execution-statistics-engine-execution-time-in-millis
                         :shape "Long" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (data-scanned-in-bytes :initarg :data-scanned-in-bytes
                         :initform common-lisp:nil :type
                         (common-lisp:or long common-lisp:null) :accessor
                         struct-shape-query-execution-statistics-data-scanned-in-bytes
                         :shape "Long" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (data-manifest-location :initarg
                         :data-manifest-location :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-query-execution-statistics-data-manifest-location
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (total-execution-time-in-millis :initarg
                         :total-execution-time-in-millis :initform
                         common-lisp:nil :type
                         (common-lisp:or long common-lisp:null) :accessor
                         struct-shape-query-execution-statistics-total-execution-time-in-millis
                         :shape "Long" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (query-queue-time-in-millis :initarg
                         :query-queue-time-in-millis :initform common-lisp:nil
                         :type (common-lisp:or long common-lisp:null) :accessor
                         struct-shape-query-execution-statistics-query-queue-time-in-millis
                         :shape "Long" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (service-pre-processing-time-in-millis :initarg
                         :service-pre-processing-time-in-millis :initform
                         common-lisp:nil :type
                         (common-lisp:or long common-lisp:null) :accessor
                         struct-shape-query-execution-statistics-service-pre-processing-time-in-millis
                         :shape "Long" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (query-planning-time-in-millis :initarg
                         :query-planning-time-in-millis :initform
                         common-lisp:nil :type
                         (common-lisp:or long common-lisp:null) :accessor
                         struct-shape-query-execution-statistics-query-planning-time-in-millis
                         :shape "Long" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (service-processing-time-in-millis :initarg
                         :service-processing-time-in-millis :initform
                         common-lisp:nil :type
                         (common-lisp:or long common-lisp:null) :accessor
                         struct-shape-query-execution-statistics-service-processing-time-in-millis
                         :shape "Long" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (result-reuse-information :initarg
                         :result-reuse-information :initform common-lisp:nil
                         :type
                         (common-lisp:or result-reuse-information
                                         common-lisp:null)
                         :accessor
                         struct-shape-query-execution-statistics-result-reuse-information
                         :shape "ResultReuseInformation" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-query-execution-statistics
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'query-execution-statistics
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'query-execution-statistics
                    'make-query-execution-statistics))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          query-execution-statistics))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          query-execution-statistics))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'engine-execution-time-in-millis))
      (common-lisp:list
       (common-lisp:cons "EngineExecutionTimeInMillis"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-scanned-in-bytes))
      (common-lisp:list
       (common-lisp:cons "DataScannedInBytes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-manifest-location))
      (common-lisp:list
       (common-lisp:cons "DataManifestLocation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'total-execution-time-in-millis))
      (common-lisp:list
       (common-lisp:cons "TotalExecutionTimeInMillis"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'query-queue-time-in-millis))
      (common-lisp:list
       (common-lisp:cons "QueryQueueTimeInMillis"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'service-pre-processing-time-in-millis))
      (common-lisp:list
       (common-lisp:cons "ServicePreProcessingTimeInMillis"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'query-planning-time-in-millis))
      (common-lisp:list
       (common-lisp:cons "QueryPlanningTimeInMillis"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'service-processing-time-in-millis))
      (common-lisp:list
       (common-lisp:cons "ServiceProcessingTimeInMillis"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'result-reuse-information))
      (common-lisp:list
       (common-lisp:cons "ResultReuseInformation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          query-execution-statistics))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass query-execution-status common-lisp:nil
                       ((state :initarg :state :initform common-lisp:nil :type
                         (common-lisp:or query-execution-state
                                         common-lisp:null)
                         :accessor struct-shape-query-execution-status-state
                         :shape "QueryExecutionState" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (state-change-reason :initarg :state-change-reason
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-query-execution-status-state-change-reason
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (submission-date-time :initarg :submission-date-time
                         :initform common-lisp:nil :type
                         (common-lisp:or date common-lisp:null) :accessor
                         struct-shape-query-execution-status-submission-date-time
                         :shape "Date" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (completion-date-time :initarg :completion-date-time
                         :initform common-lisp:nil :type
                         (common-lisp:or date common-lisp:null) :accessor
                         struct-shape-query-execution-status-completion-date-time
                         :shape "Date" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (athena-error :initarg :athena-error :initform
                         common-lisp:nil :type
                         (common-lisp:or athena-error common-lisp:null)
                         :accessor
                         struct-shape-query-execution-status-athena-error
                         :shape "AthenaError" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-query-execution-status
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'query-execution-status
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'query-execution-status 'make-query-execution-status))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          query-execution-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          query-execution-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state-change-reason))
      (common-lisp:list
       (common-lisp:cons "StateChangeReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'submission-date-time))
      (common-lisp:list
       (common-lisp:cons "SubmissionDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'completion-date-time))
      (common-lisp:list
       (common-lisp:cons "CompletionDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'athena-error))
      (common-lisp:list
       (common-lisp:cons "AthenaError"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          query-execution-status))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass query-results-s3access-grants-configuration
                       common-lisp:nil
                       ((enable-s3access-grants :initarg
                         :enable-s3access-grants :initform
                         (common-lisp:error
                          ":enable-s3access-grants is required")
                         :type (common-lisp:or boxed-boolean common-lisp:null)
                         :accessor
                         struct-shape-query-results-s3access-grants-configuration-enable-s3access-grants
                         :shape "BoxedBoolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (create-user-level-prefix :initarg
                         :create-user-level-prefix :initform common-lisp:nil
                         :type (common-lisp:or boxed-boolean common-lisp:null)
                         :accessor
                         struct-shape-query-results-s3access-grants-configuration-create-user-level-prefix
                         :shape "BoxedBoolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (authentication-type :initarg :authentication-type
                         :initform
                         (common-lisp:error ":authentication-type is required")
                         :type
                         (common-lisp:or authentication-type common-lisp:null)
                         :accessor
                         struct-shape-query-results-s3access-grants-configuration-authentication-type
                         :shape "AuthenticationType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-query-results-s3access-grants-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'query-results-s3access-grants-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'query-results-s3access-grants-configuration
                    'make-query-results-s3access-grants-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          query-results-s3access-grants-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          query-results-s3access-grants-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-s3access-grants))
      (common-lisp:list
       (common-lisp:cons "EnableS3AccessGrants"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'create-user-level-prefix))
      (common-lisp:list
       (common-lisp:cons "CreateUserLevelPrefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'authentication-type))
      (common-lisp:list
       (common-lisp:cons "AuthenticationType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          query-results-s3access-grants-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass query-runtime-statistics common-lisp:nil
                       ((timeline :initarg :timeline :initform common-lisp:nil
                         :type
                         (common-lisp:or query-runtime-statistics-timeline
                                         common-lisp:null)
                         :accessor
                         struct-shape-query-runtime-statistics-timeline :shape
                         "QueryRuntimeStatisticsTimeline" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (rows :initarg :rows :initform common-lisp:nil :type
                         (common-lisp:or query-runtime-statistics-rows
                                         common-lisp:null)
                         :accessor struct-shape-query-runtime-statistics-rows
                         :shape "QueryRuntimeStatisticsRows" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (output-stage :initarg :output-stage :initform
                         common-lisp:nil :type
                         (common-lisp:or query-stage common-lisp:null)
                         :accessor
                         struct-shape-query-runtime-statistics-output-stage
                         :shape "QueryStage" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-query-runtime-statistics
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'query-runtime-statistics
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'query-runtime-statistics 'make-query-runtime-statistics))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          query-runtime-statistics))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          query-runtime-statistics))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timeline))
      (common-lisp:list
       (common-lisp:cons "Timeline"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rows))
      (common-lisp:list
       (common-lisp:cons "Rows"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-stage))
      (common-lisp:list
       (common-lisp:cons "OutputStage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          query-runtime-statistics))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass query-runtime-statistics-rows common-lisp:nil
                       ((input-rows :initarg :input-rows :initform
                         common-lisp:nil :type
                         (common-lisp:or long common-lisp:null) :accessor
                         struct-shape-query-runtime-statistics-rows-input-rows
                         :shape "Long" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (input-bytes :initarg :input-bytes :initform
                         common-lisp:nil :type
                         (common-lisp:or long common-lisp:null) :accessor
                         struct-shape-query-runtime-statistics-rows-input-bytes
                         :shape "Long" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (output-bytes :initarg :output-bytes :initform
                         common-lisp:nil :type
                         (common-lisp:or long common-lisp:null) :accessor
                         struct-shape-query-runtime-statistics-rows-output-bytes
                         :shape "Long" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (output-rows :initarg :output-rows :initform
                         common-lisp:nil :type
                         (common-lisp:or long common-lisp:null) :accessor
                         struct-shape-query-runtime-statistics-rows-output-rows
                         :shape "Long" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-query-runtime-statistics-rows
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'query-runtime-statistics-rows
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'query-runtime-statistics-rows
                    'make-query-runtime-statistics-rows))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          query-runtime-statistics-rows))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          query-runtime-statistics-rows))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-rows))
      (common-lisp:list
       (common-lisp:cons "InputRows"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-bytes))
      (common-lisp:list
       (common-lisp:cons "InputBytes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-bytes))
      (common-lisp:list
       (common-lisp:cons "OutputBytes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-rows))
      (common-lisp:list
       (common-lisp:cons "OutputRows"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          query-runtime-statistics-rows))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass query-runtime-statistics-timeline common-lisp:nil
                       ((query-queue-time-in-millis :initarg
                         :query-queue-time-in-millis :initform common-lisp:nil
                         :type (common-lisp:or long common-lisp:null) :accessor
                         struct-shape-query-runtime-statistics-timeline-query-queue-time-in-millis
                         :shape "Long" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (service-pre-processing-time-in-millis :initarg
                         :service-pre-processing-time-in-millis :initform
                         common-lisp:nil :type
                         (common-lisp:or long common-lisp:null) :accessor
                         struct-shape-query-runtime-statistics-timeline-service-pre-processing-time-in-millis
                         :shape "Long" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (query-planning-time-in-millis :initarg
                         :query-planning-time-in-millis :initform
                         common-lisp:nil :type
                         (common-lisp:or long common-lisp:null) :accessor
                         struct-shape-query-runtime-statistics-timeline-query-planning-time-in-millis
                         :shape "Long" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (engine-execution-time-in-millis :initarg
                         :engine-execution-time-in-millis :initform
                         common-lisp:nil :type
                         (common-lisp:or long common-lisp:null) :accessor
                         struct-shape-query-runtime-statistics-timeline-engine-execution-time-in-millis
                         :shape "Long" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (service-processing-time-in-millis :initarg
                         :service-processing-time-in-millis :initform
                         common-lisp:nil :type
                         (common-lisp:or long common-lisp:null) :accessor
                         struct-shape-query-runtime-statistics-timeline-service-processing-time-in-millis
                         :shape "Long" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (total-execution-time-in-millis :initarg
                         :total-execution-time-in-millis :initform
                         common-lisp:nil :type
                         (common-lisp:or long common-lisp:null) :accessor
                         struct-shape-query-runtime-statistics-timeline-total-execution-time-in-millis
                         :shape "Long" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-query-runtime-statistics-timeline
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'query-runtime-statistics-timeline
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'query-runtime-statistics-timeline
                    'make-query-runtime-statistics-timeline))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          query-runtime-statistics-timeline))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          query-runtime-statistics-timeline))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'query-queue-time-in-millis))
      (common-lisp:list
       (common-lisp:cons "QueryQueueTimeInMillis"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'service-pre-processing-time-in-millis))
      (common-lisp:list
       (common-lisp:cons "ServicePreProcessingTimeInMillis"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'query-planning-time-in-millis))
      (common-lisp:list
       (common-lisp:cons "QueryPlanningTimeInMillis"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'engine-execution-time-in-millis))
      (common-lisp:list
       (common-lisp:cons "EngineExecutionTimeInMillis"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'service-processing-time-in-millis))
      (common-lisp:list
       (common-lisp:cons "ServiceProcessingTimeInMillis"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'total-execution-time-in-millis))
      (common-lisp:list
       (common-lisp:cons "TotalExecutionTimeInMillis"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          query-runtime-statistics-timeline))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass query-stage common-lisp:nil
                       ((stage-id :initarg :stage-id :initform common-lisp:nil
                         :type (common-lisp:or long common-lisp:null) :accessor
                         struct-shape-query-stage-stage-id :shape "Long"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (state :initarg :state :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-query-stage-state :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (output-bytes :initarg :output-bytes :initform
                         common-lisp:nil :type
                         (common-lisp:or long common-lisp:null) :accessor
                         struct-shape-query-stage-output-bytes :shape "Long"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (output-rows :initarg :output-rows :initform
                         common-lisp:nil :type
                         (common-lisp:or long common-lisp:null) :accessor
                         struct-shape-query-stage-output-rows :shape "Long"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (input-bytes :initarg :input-bytes :initform
                         common-lisp:nil :type
                         (common-lisp:or long common-lisp:null) :accessor
                         struct-shape-query-stage-input-bytes :shape "Long"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (input-rows :initarg :input-rows :initform
                         common-lisp:nil :type
                         (common-lisp:or long common-lisp:null) :accessor
                         struct-shape-query-stage-input-rows :shape "Long"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (execution-time :initarg :execution-time :initform
                         common-lisp:nil :type
                         (common-lisp:or long common-lisp:null) :accessor
                         struct-shape-query-stage-execution-time :shape "Long"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (query-stage-plan :initarg :query-stage-plan :initform
                         common-lisp:nil :type
                         (common-lisp:or query-stage-plan-node
                                         common-lisp:null)
                         :accessor struct-shape-query-stage-query-stage-plan
                         :shape "QueryStagePlanNode" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (sub-stages :initarg :sub-stages :initform
                         common-lisp:nil :type
                         (common-lisp:or query-stages common-lisp:null)
                         :accessor struct-shape-query-stage-sub-stages :shape
                         "QueryStages" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-query-stage
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'query-stage
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'query-stage 'make-query-stage))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input query-stage))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input query-stage))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stage-id))
      (common-lisp:list
       (common-lisp:cons "StageId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-bytes))
      (common-lisp:list
       (common-lisp:cons "OutputBytes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-rows))
      (common-lisp:list
       (common-lisp:cons "OutputRows"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-bytes))
      (common-lisp:list
       (common-lisp:cons "InputBytes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-rows))
      (common-lisp:list
       (common-lisp:cons "InputRows"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execution-time))
      (common-lisp:list
       (common-lisp:cons "ExecutionTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-stage-plan))
      (common-lisp:list
       (common-lisp:cons "QueryStagePlan"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sub-stages))
      (common-lisp:list
       (common-lisp:cons "SubStages"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input query-stage))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass query-stage-plan-node common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-query-stage-plan-node-name :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (identifier :initarg :identifier :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-query-stage-plan-node-identifier :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (children :initarg :children :initform common-lisp:nil
                         :type
                         (common-lisp:or query-stage-plan-nodes
                                         common-lisp:null)
                         :accessor struct-shape-query-stage-plan-node-children
                         :shape "QueryStagePlanNodes" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (remote-sources :initarg :remote-sources :initform
                         common-lisp:nil :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor
                         struct-shape-query-stage-plan-node-remote-sources
                         :shape "StringList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-query-stage-plan-node
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'query-stage-plan-node
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'query-stage-plan-node 'make-query-stage-plan-node))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          query-stage-plan-node))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          query-stage-plan-node))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identifier))
      (common-lisp:list
       (common-lisp:cons "Identifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'children))
      (common-lisp:list
       (common-lisp:cons "Children"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'remote-sources))
      (common-lisp:list
       (common-lisp:cons "RemoteSources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          query-stage-plan-node))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype query-stage-plan-nodes ()
   '(trivial-types:proper-list query-stage-plan-node))
 (common-lisp:defun make-query-stage-plan-nodes
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list query-stage-plan-node))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype query-stages () '(trivial-types:proper-list query-stage))
 (common-lisp:defun make-query-stages
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list query-stage))
   aws-sdk/generator/shape::members))
(common-lisp:deftype query-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-exception
     (athena-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-not-found-exception-message)
      (resource-name :initarg :resource-name :initform common-lisp:nil :reader
       resource-not-found-exception-resource-name)))
 (common-lisp:export
  (common-lisp:list 'resource-not-found-exception
                    'resource-not-found-exception-message
                    'resource-not-found-exception-resource-name)))
(common-lisp:progn
 (common-lisp:defclass result-configuration common-lisp:nil
                       ((output-location :initarg :output-location :initform
                         common-lisp:nil :type
                         (common-lisp:or result-output-location
                                         common-lisp:null)
                         :accessor
                         struct-shape-result-configuration-output-location
                         :shape "ResultOutputLocation" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (encryption-configuration :initarg
                         :encryption-configuration :initform common-lisp:nil
                         :type
                         (common-lisp:or encryption-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-result-configuration-encryption-configuration
                         :shape "EncryptionConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (expected-bucket-owner :initarg :expected-bucket-owner
                         :initform common-lisp:nil :type
                         (common-lisp:or aws-account-id common-lisp:null)
                         :accessor
                         struct-shape-result-configuration-expected-bucket-owner
                         :shape "AwsAccountId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (acl-configuration :initarg :acl-configuration
                         :initform common-lisp:nil :type
                         (common-lisp:or acl-configuration common-lisp:null)
                         :accessor
                         struct-shape-result-configuration-acl-configuration
                         :shape "AclConfiguration" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-result-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'result-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'result-configuration 'make-result-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input result-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input result-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-location))
      (common-lisp:list
       (common-lisp:cons "OutputLocation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'encryption-configuration))
      (common-lisp:list
       (common-lisp:cons "EncryptionConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:list
       (common-lisp:cons "ExpectedBucketOwner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'acl-configuration))
      (common-lisp:list
       (common-lisp:cons "AclConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input result-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass result-configuration-updates common-lisp:nil
                       ((output-location :initarg :output-location :initform
                         common-lisp:nil :type
                         (common-lisp:or result-output-location
                                         common-lisp:null)
                         :accessor
                         struct-shape-result-configuration-updates-output-location
                         :shape "ResultOutputLocation" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (remove-output-location :initarg
                         :remove-output-location :initform common-lisp:nil
                         :type (common-lisp:or boxed-boolean common-lisp:null)
                         :accessor
                         struct-shape-result-configuration-updates-remove-output-location
                         :shape "BoxedBoolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (encryption-configuration :initarg
                         :encryption-configuration :initform common-lisp:nil
                         :type
                         (common-lisp:or encryption-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-result-configuration-updates-encryption-configuration
                         :shape "EncryptionConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (remove-encryption-configuration :initarg
                         :remove-encryption-configuration :initform
                         common-lisp:nil :type
                         (common-lisp:or boxed-boolean common-lisp:null)
                         :accessor
                         struct-shape-result-configuration-updates-remove-encryption-configuration
                         :shape "BoxedBoolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (expected-bucket-owner :initarg :expected-bucket-owner
                         :initform common-lisp:nil :type
                         (common-lisp:or aws-account-id common-lisp:null)
                         :accessor
                         struct-shape-result-configuration-updates-expected-bucket-owner
                         :shape "AwsAccountId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (remove-expected-bucket-owner :initarg
                         :remove-expected-bucket-owner :initform
                         common-lisp:nil :type
                         (common-lisp:or boxed-boolean common-lisp:null)
                         :accessor
                         struct-shape-result-configuration-updates-remove-expected-bucket-owner
                         :shape "BoxedBoolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (acl-configuration :initarg :acl-configuration
                         :initform common-lisp:nil :type
                         (common-lisp:or acl-configuration common-lisp:null)
                         :accessor
                         struct-shape-result-configuration-updates-acl-configuration
                         :shape "AclConfiguration" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (remove-acl-configuration :initarg
                         :remove-acl-configuration :initform common-lisp:nil
                         :type (common-lisp:or boxed-boolean common-lisp:null)
                         :accessor
                         struct-shape-result-configuration-updates-remove-acl-configuration
                         :shape "BoxedBoolean" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-result-configuration-updates
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'result-configuration-updates
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'result-configuration-updates
                    'make-result-configuration-updates))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          result-configuration-updates))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          result-configuration-updates))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-location))
      (common-lisp:list
       (common-lisp:cons "OutputLocation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'remove-output-location))
      (common-lisp:list
       (common-lisp:cons "RemoveOutputLocation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'encryption-configuration))
      (common-lisp:list
       (common-lisp:cons "EncryptionConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'remove-encryption-configuration))
      (common-lisp:list
       (common-lisp:cons "RemoveEncryptionConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:list
       (common-lisp:cons "ExpectedBucketOwner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'remove-expected-bucket-owner))
      (common-lisp:list
       (common-lisp:cons "RemoveExpectedBucketOwner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'acl-configuration))
      (common-lisp:list
       (common-lisp:cons "AclConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'remove-acl-configuration))
      (common-lisp:list
       (common-lisp:cons "RemoveAclConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          result-configuration-updates))
   common-lisp:nil))
(common-lisp:deftype result-output-location () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass result-reuse-by-age-configuration common-lisp:nil
                       ((enabled :initarg :enabled :initform
                         (common-lisp:error ":enabled is required") :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-result-reuse-by-age-configuration-enabled
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-age-in-minutes :initarg :max-age-in-minutes
                         :initform common-lisp:nil :type
                         (common-lisp:or age common-lisp:null) :accessor
                         struct-shape-result-reuse-by-age-configuration-max-age-in-minutes
                         :shape "Age" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-result-reuse-by-age-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'result-reuse-by-age-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'result-reuse-by-age-configuration
                    'make-result-reuse-by-age-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          result-reuse-by-age-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          result-reuse-by-age-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "Enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-age-in-minutes))
      (common-lisp:list
       (common-lisp:cons "MaxAgeInMinutes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          result-reuse-by-age-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass result-reuse-configuration common-lisp:nil
                       ((result-reuse-by-age-configuration :initarg
                         :result-reuse-by-age-configuration :initform
                         common-lisp:nil :type
                         (common-lisp:or result-reuse-by-age-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-result-reuse-configuration-result-reuse-by-age-configuration
                         :shape "ResultReuseByAgeConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-result-reuse-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'result-reuse-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'result-reuse-configuration
                    'make-result-reuse-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          result-reuse-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          result-reuse-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'result-reuse-by-age-configuration))
      (common-lisp:list
       (common-lisp:cons "ResultReuseByAgeConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          result-reuse-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass result-reuse-information common-lisp:nil
                       ((reused-previous-result :initarg
                         :reused-previous-result :initform
                         (common-lisp:error
                          ":reused-previous-result is required")
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         struct-shape-result-reuse-information-reused-previous-result
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-result-reuse-information
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'result-reuse-information
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'result-reuse-information 'make-result-reuse-information))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          result-reuse-information))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          result-reuse-information))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'reused-previous-result))
      (common-lisp:list
       (common-lisp:cons "ReusedPreviousResult"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          result-reuse-information))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass result-set common-lisp:nil
                       ((rows :initarg :rows :initform common-lisp:nil :type
                         (common-lisp:or row-list common-lisp:null) :accessor
                         struct-shape-result-set-rows :shape "RowList"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (result-set-metadata :initarg :result-set-metadata
                         :initform common-lisp:nil :type
                         (common-lisp:or result-set-metadata common-lisp:null)
                         :accessor struct-shape-result-set-result-set-metadata
                         :shape "ResultSetMetadata" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-result-set
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'result-set
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'result-set 'make-result-set))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input result-set))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input result-set))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rows))
      (common-lisp:list
       (common-lisp:cons "Rows"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'result-set-metadata))
      (common-lisp:list
       (common-lisp:cons "ResultSetMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input result-set))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass result-set-metadata common-lisp:nil
                       ((column-info :initarg :column-info :initform
                         common-lisp:nil :type
                         (common-lisp:or column-info-list common-lisp:null)
                         :accessor struct-shape-result-set-metadata-column-info
                         :shape "ColumnInfoList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-result-set-metadata
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'result-set-metadata
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'result-set-metadata 'make-result-set-metadata))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input result-set-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input result-set-metadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'column-info))
      (common-lisp:list
       (common-lisp:cons "ColumnInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input result-set-metadata))
   common-lisp:nil))
(common-lisp:deftype role-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass row common-lisp:nil
                       ((data :initarg :data :initform common-lisp:nil :type
                         (common-lisp:or |datumList| common-lisp:null)
                         :accessor struct-shape-row-data :shape "datumList"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-row (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'row
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'row 'make-row))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input row))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input row))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data))
      (common-lisp:list
       (common-lisp:cons "Data"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input row))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype row-list () '(trivial-types:proper-list row))
 (common-lisp:defun make-row-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list row))
   aws-sdk/generator/shape::members))
(common-lisp:deftype s3acl-option () 'common-lisp:string)
(common-lisp:deftype s3uri () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition session-already-exists-exception
     (athena-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       session-already-exists-exception-message)))
 (common-lisp:export
  (common-lisp:list 'session-already-exists-exception
                    'session-already-exists-exception-message)))
(common-lisp:progn
 (common-lisp:defclass session-configuration common-lisp:nil
                       ((execution-role :initarg :execution-role :initform
                         common-lisp:nil :type
                         (common-lisp:or role-arn common-lisp:null) :accessor
                         struct-shape-session-configuration-execution-role
                         :shape "RoleArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (working-directory :initarg :working-directory
                         :initform common-lisp:nil :type
                         (common-lisp:or result-output-location
                                         common-lisp:null)
                         :accessor
                         struct-shape-session-configuration-working-directory
                         :shape "ResultOutputLocation" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (idle-timeout-seconds :initarg :idle-timeout-seconds
                         :initform common-lisp:nil :type
                         (common-lisp:or long common-lisp:null) :accessor
                         struct-shape-session-configuration-idle-timeout-seconds
                         :shape "Long" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (encryption-configuration :initarg
                         :encryption-configuration :initform common-lisp:nil
                         :type
                         (common-lisp:or encryption-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-session-configuration-encryption-configuration
                         :shape "EncryptionConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-session-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'session-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'session-configuration 'make-session-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          session-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          session-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execution-role))
      (common-lisp:list
       (common-lisp:cons "ExecutionRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'working-directory))
      (common-lisp:list
       (common-lisp:cons "WorkingDirectory"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'idle-timeout-seconds))
      (common-lisp:list
       (common-lisp:cons "IdleTimeoutSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'encryption-configuration))
      (common-lisp:list
       (common-lisp:cons "EncryptionConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          session-configuration))
   common-lisp:nil))
(common-lisp:deftype session-id () 'common-lisp:string)
(common-lisp:deftype session-idle-timeout-in-minutes () 'common-lisp:integer)
(common-lisp:deftype session-manager-token () 'common-lisp:string)
(common-lisp:deftype session-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass session-statistics common-lisp:nil
                       ((dpu-execution-in-millis :initarg
                         :dpu-execution-in-millis :initform common-lisp:nil
                         :type (common-lisp:or long common-lisp:null) :accessor
                         struct-shape-session-statistics-dpu-execution-in-millis
                         :shape "Long" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-session-statistics
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'session-statistics
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'session-statistics 'make-session-statistics))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input session-statistics))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input session-statistics))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dpu-execution-in-millis))
      (common-lisp:list
       (common-lisp:cons "DpuExecutionInMillis"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input session-statistics))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass session-status common-lisp:nil
                       ((start-date-time :initarg :start-date-time :initform
                         common-lisp:nil :type
                         (common-lisp:or date common-lisp:null) :accessor
                         struct-shape-session-status-start-date-time :shape
                         "Date" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (last-modified-date-time :initarg
                         :last-modified-date-time :initform common-lisp:nil
                         :type (common-lisp:or date common-lisp:null) :accessor
                         struct-shape-session-status-last-modified-date-time
                         :shape "Date" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (end-date-time :initarg :end-date-time :initform
                         common-lisp:nil :type
                         (common-lisp:or date common-lisp:null) :accessor
                         struct-shape-session-status-end-date-time :shape
                         "Date" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (idle-since-date-time :initarg :idle-since-date-time
                         :initform common-lisp:nil :type
                         (common-lisp:or date common-lisp:null) :accessor
                         struct-shape-session-status-idle-since-date-time
                         :shape "Date" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (state :initarg :state :initform common-lisp:nil :type
                         (common-lisp:or session-state common-lisp:null)
                         :accessor struct-shape-session-status-state :shape
                         "SessionState" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (state-change-reason :initarg :state-change-reason
                         :initform common-lisp:nil :type
                         (common-lisp:or description-string common-lisp:null)
                         :accessor
                         struct-shape-session-status-state-change-reason :shape
                         "DescriptionString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-session-status
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'session-status
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'session-status 'make-session-status))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input session-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input session-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-date-time))
      (common-lisp:list
       (common-lisp:cons "StartDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-modified-date-time))
      (common-lisp:list
       (common-lisp:cons "LastModifiedDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-date-time))
      (common-lisp:list
       (common-lisp:cons "EndDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'idle-since-date-time))
      (common-lisp:list
       (common-lisp:cons "IdleSinceDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state-change-reason))
      (common-lisp:list
       (common-lisp:cons "StateChangeReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input session-status))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass session-summary common-lisp:nil
                       ((session-id :initarg :session-id :initform
                         common-lisp:nil :type
                         (common-lisp:or session-id common-lisp:null) :accessor
                         struct-shape-session-summary-session-id :shape
                         "SessionId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description-string common-lisp:null)
                         :accessor struct-shape-session-summary-description
                         :shape "DescriptionString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (engine-version :initarg :engine-version :initform
                         common-lisp:nil :type
                         (common-lisp:or engine-version common-lisp:null)
                         :accessor struct-shape-session-summary-engine-version
                         :shape "EngineVersion" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (notebook-version :initarg :notebook-version :initform
                         common-lisp:nil :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor
                         struct-shape-session-summary-notebook-version :shape
                         "NameString" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or session-status common-lisp:null)
                         :accessor struct-shape-session-summary-status :shape
                         "SessionStatus" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-session-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'session-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'session-summary 'make-session-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input session-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input session-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session-id))
      (common-lisp:list
       (common-lisp:cons "SessionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine-version))
      (common-lisp:list
       (common-lisp:cons "EngineVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'notebook-version))
      (common-lisp:list
       (common-lisp:cons "NotebookVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input session-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype sessions-list ()
   '(trivial-types:proper-list session-summary))
 (common-lisp:defun make-sessions-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list session-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass start-calculation-execution-request common-lisp:nil
                       ((session-id :initarg :session-id :initform
                         (common-lisp:error ":session-id is required") :type
                         (common-lisp:or session-id common-lisp:null) :accessor
                         struct-shape-start-calculation-execution-request-session-id
                         :shape "SessionId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description-string common-lisp:null)
                         :accessor
                         struct-shape-start-calculation-execution-request-description
                         :shape "DescriptionString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (calculation-configuration :initarg
                         :calculation-configuration :initform common-lisp:nil
                         :type
                         (common-lisp:or calculation-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-start-calculation-execution-request-calculation-configuration
                         :shape "CalculationConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (code-block :initarg :code-block :initform
                         common-lisp:nil :type
                         (common-lisp:or code-block common-lisp:null) :accessor
                         struct-shape-start-calculation-execution-request-code-block
                         :shape "CodeBlock" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (client-request-token :initarg :client-request-token
                         :initform common-lisp:nil :type
                         (common-lisp:or idempotency-token common-lisp:null)
                         :accessor
                         struct-shape-start-calculation-execution-request-client-request-token
                         :shape "IdempotencyToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-calculation-execution-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-calculation-execution-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-calculation-execution-request
                    'make-start-calculation-execution-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-calculation-execution-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-calculation-execution-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session-id))
      (common-lisp:list
       (common-lisp:cons "SessionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'calculation-configuration))
      (common-lisp:list
       (common-lisp:cons "CalculationConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code-block))
      (common-lisp:list
       (common-lisp:cons "CodeBlock"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "ClientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-calculation-execution-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-calculation-execution-response common-lisp:nil
                       ((calculation-execution-id :initarg
                         :calculation-execution-id :initform common-lisp:nil
                         :type
                         (common-lisp:or calculation-execution-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-start-calculation-execution-response-calculation-execution-id
                         :shape "CalculationExecutionId" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (state :initarg :state :initform common-lisp:nil :type
                         (common-lisp:or calculation-execution-state
                                         common-lisp:null)
                         :accessor
                         struct-shape-start-calculation-execution-response-state
                         :shape "CalculationExecutionState" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-calculation-execution-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-calculation-execution-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-calculation-execution-response
                    'make-start-calculation-execution-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-calculation-execution-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-calculation-execution-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'calculation-execution-id))
      (common-lisp:list
       (common-lisp:cons "CalculationExecutionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-calculation-execution-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-query-execution-input common-lisp:nil
                       ((query-string :initarg :query-string :initform
                         (common-lisp:error ":query-string is required") :type
                         (common-lisp:or query-string common-lisp:null)
                         :accessor
                         struct-shape-start-query-execution-input-query-string
                         :shape "QueryString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (client-request-token :initarg :client-request-token
                         :initform common-lisp:nil :type
                         (common-lisp:or idempotency-token common-lisp:null)
                         :accessor
                         struct-shape-start-query-execution-input-client-request-token
                         :shape "IdempotencyToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (query-execution-context :initarg
                         :query-execution-context :initform common-lisp:nil
                         :type
                         (common-lisp:or query-execution-context
                                         common-lisp:null)
                         :accessor
                         struct-shape-start-query-execution-input-query-execution-context
                         :shape "QueryExecutionContext" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (result-configuration :initarg :result-configuration
                         :initform common-lisp:nil :type
                         (common-lisp:or result-configuration common-lisp:null)
                         :accessor
                         struct-shape-start-query-execution-input-result-configuration
                         :shape "ResultConfiguration" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (work-group :initarg :work-group :initform
                         common-lisp:nil :type
                         (common-lisp:or work-group-name common-lisp:null)
                         :accessor
                         struct-shape-start-query-execution-input-work-group
                         :shape "WorkGroupName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (execution-parameters :initarg :execution-parameters
                         :initform common-lisp:nil :type
                         (common-lisp:or execution-parameters common-lisp:null)
                         :accessor
                         struct-shape-start-query-execution-input-execution-parameters
                         :shape "ExecutionParameters" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (result-reuse-configuration :initarg
                         :result-reuse-configuration :initform common-lisp:nil
                         :type
                         (common-lisp:or result-reuse-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-start-query-execution-input-result-reuse-configuration
                         :shape "ResultReuseConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-query-execution-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'start-query-execution-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-query-execution-input
                    'make-start-query-execution-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-query-execution-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-query-execution-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-string))
      (common-lisp:list
       (common-lisp:cons "QueryString"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "ClientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'query-execution-context))
      (common-lisp:list
       (common-lisp:cons "QueryExecutionContext"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'result-configuration))
      (common-lisp:list
       (common-lisp:cons "ResultConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'work-group))
      (common-lisp:list
       (common-lisp:cons "WorkGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'execution-parameters))
      (common-lisp:list
       (common-lisp:cons "ExecutionParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'result-reuse-configuration))
      (common-lisp:list
       (common-lisp:cons "ResultReuseConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-query-execution-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-query-execution-output common-lisp:nil
                       ((query-execution-id :initarg :query-execution-id
                         :initform common-lisp:nil :type
                         (common-lisp:or query-execution-id common-lisp:null)
                         :accessor
                         struct-shape-start-query-execution-output-query-execution-id
                         :shape "QueryExecutionId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-query-execution-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'start-query-execution-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-query-execution-output
                    'make-start-query-execution-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-query-execution-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-query-execution-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-execution-id))
      (common-lisp:list
       (common-lisp:cons "QueryExecutionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-query-execution-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-session-request common-lisp:nil
                       ((description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description-string common-lisp:null)
                         :accessor
                         struct-shape-start-session-request-description :shape
                         "DescriptionString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (work-group :initarg :work-group :initform
                         (common-lisp:error ":work-group is required") :type
                         (common-lisp:or work-group-name common-lisp:null)
                         :accessor
                         struct-shape-start-session-request-work-group :shape
                         "WorkGroupName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (engine-configuration :initarg :engine-configuration
                         :initform
                         (common-lisp:error
                          ":engine-configuration is required")
                         :type
                         (common-lisp:or engine-configuration common-lisp:null)
                         :accessor
                         struct-shape-start-session-request-engine-configuration
                         :shape "EngineConfiguration" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (notebook-version :initarg :notebook-version :initform
                         common-lisp:nil :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor
                         struct-shape-start-session-request-notebook-version
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (session-idle-timeout-in-minutes :initarg
                         :session-idle-timeout-in-minutes :initform
                         common-lisp:nil :type
                         (common-lisp:or session-idle-timeout-in-minutes
                                         common-lisp:null)
                         :accessor
                         struct-shape-start-session-request-session-idle-timeout-in-minutes
                         :shape "SessionIdleTimeoutInMinutes" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (client-request-token :initarg :client-request-token
                         :initform common-lisp:nil :type
                         (common-lisp:or idempotency-token common-lisp:null)
                         :accessor
                         struct-shape-start-session-request-client-request-token
                         :shape "IdempotencyToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-session-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'start-session-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-session-request 'make-start-session-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-session-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-session-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'work-group))
      (common-lisp:list
       (common-lisp:cons "WorkGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'engine-configuration))
      (common-lisp:list
       (common-lisp:cons "EngineConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'notebook-version))
      (common-lisp:list
       (common-lisp:cons "NotebookVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'session-idle-timeout-in-minutes))
      (common-lisp:list
       (common-lisp:cons "SessionIdleTimeoutInMinutes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "ClientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-session-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-session-response common-lisp:nil
                       ((session-id :initarg :session-id :initform
                         common-lisp:nil :type
                         (common-lisp:or session-id common-lisp:null) :accessor
                         struct-shape-start-session-response-session-id :shape
                         "SessionId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (state :initarg :state :initform common-lisp:nil :type
                         (common-lisp:or session-state common-lisp:null)
                         :accessor struct-shape-start-session-response-state
                         :shape "SessionState" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-session-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'start-session-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-session-response 'make-start-session-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-session-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-session-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session-id))
      (common-lisp:list
       (common-lisp:cons "SessionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-session-response))
   common-lisp:nil))
(common-lisp:deftype statement-name () 'common-lisp:string)
(common-lisp:deftype statement-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass stop-calculation-execution-request common-lisp:nil
                       ((calculation-execution-id :initarg
                         :calculation-execution-id :initform
                         (common-lisp:error
                          ":calculation-execution-id is required")
                         :type
                         (common-lisp:or calculation-execution-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-stop-calculation-execution-request-calculation-execution-id
                         :shape "CalculationExecutionId" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-stop-calculation-execution-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'stop-calculation-execution-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'stop-calculation-execution-request
                    'make-stop-calculation-execution-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-calculation-execution-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-calculation-execution-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'calculation-execution-id))
      (common-lisp:list
       (common-lisp:cons "CalculationExecutionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-calculation-execution-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass stop-calculation-execution-response common-lisp:nil
                       ((state :initarg :state :initform common-lisp:nil :type
                         (common-lisp:or calculation-execution-state
                                         common-lisp:null)
                         :accessor
                         struct-shape-stop-calculation-execution-response-state
                         :shape "CalculationExecutionState" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-stop-calculation-execution-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'stop-calculation-execution-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'stop-calculation-execution-response
                    'make-stop-calculation-execution-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-calculation-execution-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-calculation-execution-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-calculation-execution-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass stop-query-execution-input common-lisp:nil
                       ((query-execution-id :initarg :query-execution-id
                         :initform
                         (common-lisp:error ":query-execution-id is required")
                         :type
                         (common-lisp:or query-execution-id common-lisp:null)
                         :accessor
                         struct-shape-stop-query-execution-input-query-execution-id
                         :shape "QueryExecutionId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-stop-query-execution-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'stop-query-execution-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'stop-query-execution-input
                    'make-stop-query-execution-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-query-execution-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-query-execution-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-execution-id))
      (common-lisp:list
       (common-lisp:cons "QueryExecutionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-query-execution-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass stop-query-execution-output common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-stop-query-execution-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'stop-query-execution-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'stop-query-execution-output
                    'make-stop-query-execution-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-query-execution-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-query-execution-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-query-execution-output))
   common-lisp:nil))
(common-lisp:deftype string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype string-list () '(trivial-types:proper-list string))
 (common-lisp:defun make-string-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype supported-dpusize-list ()
   '(trivial-types:proper-list integer))
 (common-lisp:defun make-supported-dpusize-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list integer))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass table-metadata common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor struct-shape-table-metadata-name :shape
                         "NameString" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (create-time :initarg :create-time :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-table-metadata-create-time :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (last-access-time :initarg :last-access-time :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-table-metadata-last-access-time :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (table-type :initarg :table-type :initform
                         common-lisp:nil :type
                         (common-lisp:or table-type-string common-lisp:null)
                         :accessor struct-shape-table-metadata-table-type
                         :shape "TableTypeString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (columns :initarg :columns :initform common-lisp:nil
                         :type (common-lisp:or column-list common-lisp:null)
                         :accessor struct-shape-table-metadata-columns :shape
                         "ColumnList" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (partition-keys :initarg :partition-keys :initform
                         common-lisp:nil :type
                         (common-lisp:or column-list common-lisp:null)
                         :accessor struct-shape-table-metadata-partition-keys
                         :shape "ColumnList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (parameters :initarg :parameters :initform
                         common-lisp:nil :type
                         (common-lisp:or parameters-map common-lisp:null)
                         :accessor struct-shape-table-metadata-parameters
                         :shape "ParametersMap" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-table-metadata
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'table-metadata
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'table-metadata 'make-table-metadata))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input table-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input table-metadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-time))
      (common-lisp:list
       (common-lisp:cons "CreateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-access-time))
      (common-lisp:list
       (common-lisp:cons "LastAccessTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-type))
      (common-lisp:list
       (common-lisp:cons "TableType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'columns))
      (common-lisp:list
       (common-lisp:cons "Columns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'partition-keys))
      (common-lisp:list
       (common-lisp:cons "PartitionKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameters))
      (common-lisp:list
       (common-lisp:cons "Parameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input table-metadata))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype table-metadata-list ()
   '(trivial-types:proper-list table-metadata))
 (common-lisp:defun make-table-metadata-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list table-metadata))
   aws-sdk/generator/shape::members))
(common-lisp:deftype table-type-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass tag common-lisp:nil
                       ((key :initarg :key :initform common-lisp:nil :type
                         (common-lisp:or tag-key common-lisp:null) :accessor
                         struct-shape-tag-key :shape "TagKey" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (value :initarg :value :initform common-lisp:nil :type
                         (common-lisp:or tag-value common-lisp:null) :accessor
                         struct-shape-tag-value :shape "TagValue" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tag (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'tag
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'tag 'make-tag))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag))
   common-lisp:nil))
(common-lisp:deftype tag-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tag-key-list () '(trivial-types:proper-list tag-key))
 (common-lisp:defun make-tag-key-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype tag-list () '(trivial-types:proper-list tag))
 (common-lisp:defun make-tag-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass tag-resource-input common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resource-arn is required") :type
                         (common-lisp:or amazon-resource-name common-lisp:null)
                         :accessor struct-shape-tag-resource-input-resource-arn
                         :shape "AmazonResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform
                         (common-lisp:error ":tags is required") :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-tag-resource-input-tags :shape "TagList"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tag-resource-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'tag-resource-input 'make-tag-resource-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass tag-resource-output common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tag-resource-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'tag-resource-output 'make-tag-resource-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-output))
   common-lisp:nil))
(common-lisp:deftype tag-value () 'common-lisp:string)
(common-lisp:deftype target-dpus-integer () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass terminate-session-request common-lisp:nil
                       ((session-id :initarg :session-id :initform
                         (common-lisp:error ":session-id is required") :type
                         (common-lisp:or session-id common-lisp:null) :accessor
                         struct-shape-terminate-session-request-session-id
                         :shape "SessionId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-terminate-session-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'terminate-session-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'terminate-session-request
                    'make-terminate-session-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          terminate-session-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          terminate-session-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session-id))
      (common-lisp:list
       (common-lisp:cons "SessionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          terminate-session-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass terminate-session-response common-lisp:nil
                       ((state :initarg :state :initform common-lisp:nil :type
                         (common-lisp:or session-state common-lisp:null)
                         :accessor
                         struct-shape-terminate-session-response-state :shape
                         "SessionState" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-terminate-session-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'terminate-session-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'terminate-session-response
                    'make-terminate-session-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          terminate-session-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          terminate-session-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          terminate-session-response))
   common-lisp:nil))
(common-lisp:deftype throttle-reason () 'common-lisp:string)
(common-lisp:deftype timestamp () 'common-lisp:string)
(common-lisp:deftype token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition too-many-requests-exception
     (athena-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       too-many-requests-exception-message)
      (reason :initarg :reason :initform common-lisp:nil :reader
       too-many-requests-exception-reason)))
 (common-lisp:export
  (common-lisp:list 'too-many-requests-exception
                    'too-many-requests-exception-message
                    'too-many-requests-exception-reason)))
(common-lisp:deftype type-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass unprocessed-named-query-id common-lisp:nil
                       ((named-query-id :initarg :named-query-id :initform
                         common-lisp:nil :type
                         (common-lisp:or named-query-id common-lisp:null)
                         :accessor
                         struct-shape-unprocessed-named-query-id-named-query-id
                         :shape "NamedQueryId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (error-code :initarg :error-code :initform
                         common-lisp:nil :type
                         (common-lisp:or error-code common-lisp:null) :accessor
                         struct-shape-unprocessed-named-query-id-error-code
                         :shape "ErrorCode" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (error-message :initarg :error-message :initform
                         common-lisp:nil :type
                         (common-lisp:or error-message common-lisp:null)
                         :accessor
                         struct-shape-unprocessed-named-query-id-error-message
                         :shape "ErrorMessage" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-unprocessed-named-query-id
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'unprocessed-named-query-id
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'unprocessed-named-query-id
                    'make-unprocessed-named-query-id))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          unprocessed-named-query-id))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          unprocessed-named-query-id))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'named-query-id))
      (common-lisp:list
       (common-lisp:cons "NamedQueryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-code))
      (common-lisp:list
       (common-lisp:cons "ErrorCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-message))
      (common-lisp:list
       (common-lisp:cons "ErrorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          unprocessed-named-query-id))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype unprocessed-named-query-id-list ()
   '(trivial-types:proper-list unprocessed-named-query-id))
 (common-lisp:defun make-unprocessed-named-query-id-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            unprocessed-named-query-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass unprocessed-prepared-statement-name common-lisp:nil
                       ((statement-name :initarg :statement-name :initform
                         common-lisp:nil :type
                         (common-lisp:or statement-name common-lisp:null)
                         :accessor
                         struct-shape-unprocessed-prepared-statement-name-statement-name
                         :shape "StatementName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (error-code :initarg :error-code :initform
                         common-lisp:nil :type
                         (common-lisp:or error-code common-lisp:null) :accessor
                         struct-shape-unprocessed-prepared-statement-name-error-code
                         :shape "ErrorCode" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (error-message :initarg :error-message :initform
                         common-lisp:nil :type
                         (common-lisp:or error-message common-lisp:null)
                         :accessor
                         struct-shape-unprocessed-prepared-statement-name-error-message
                         :shape "ErrorMessage" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-unprocessed-prepared-statement-name
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'unprocessed-prepared-statement-name
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'unprocessed-prepared-statement-name
                    'make-unprocessed-prepared-statement-name))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          unprocessed-prepared-statement-name))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          unprocessed-prepared-statement-name))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'statement-name))
      (common-lisp:list
       (common-lisp:cons "StatementName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-code))
      (common-lisp:list
       (common-lisp:cons "ErrorCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-message))
      (common-lisp:list
       (common-lisp:cons "ErrorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          unprocessed-prepared-statement-name))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype unprocessed-prepared-statement-name-list ()
   '(trivial-types:proper-list unprocessed-prepared-statement-name))
 (common-lisp:defun make-unprocessed-prepared-statement-name-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            unprocessed-prepared-statement-name))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass unprocessed-query-execution-id common-lisp:nil
                       ((query-execution-id :initarg :query-execution-id
                         :initform common-lisp:nil :type
                         (common-lisp:or query-execution-id common-lisp:null)
                         :accessor
                         struct-shape-unprocessed-query-execution-id-query-execution-id
                         :shape "QueryExecutionId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (error-code :initarg :error-code :initform
                         common-lisp:nil :type
                         (common-lisp:or error-code common-lisp:null) :accessor
                         struct-shape-unprocessed-query-execution-id-error-code
                         :shape "ErrorCode" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (error-message :initarg :error-message :initform
                         common-lisp:nil :type
                         (common-lisp:or error-message common-lisp:null)
                         :accessor
                         struct-shape-unprocessed-query-execution-id-error-message
                         :shape "ErrorMessage" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-unprocessed-query-execution-id
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'unprocessed-query-execution-id
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'unprocessed-query-execution-id
                    'make-unprocessed-query-execution-id))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          unprocessed-query-execution-id))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          unprocessed-query-execution-id))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-execution-id))
      (common-lisp:list
       (common-lisp:cons "QueryExecutionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-code))
      (common-lisp:list
       (common-lisp:cons "ErrorCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-message))
      (common-lisp:list
       (common-lisp:cons "ErrorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          unprocessed-query-execution-id))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype unprocessed-query-execution-id-list ()
   '(trivial-types:proper-list unprocessed-query-execution-id))
 (common-lisp:defun make-unprocessed-query-execution-id-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            unprocessed-query-execution-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass untag-resource-input common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resource-arn is required") :type
                         (common-lisp:or amazon-resource-name common-lisp:null)
                         :accessor
                         struct-shape-untag-resource-input-resource-arn :shape
                         "AmazonResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tag-keys :initarg :tag-keys :initform
                         (common-lisp:error ":tag-keys is required") :type
                         (common-lisp:or tag-key-list common-lisp:null)
                         :accessor struct-shape-untag-resource-input-tag-keys
                         :shape "TagKeyList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-untag-resource-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'untag-resource-input 'make-untag-resource-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input untag-resource-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input untag-resource-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-keys))
      (common-lisp:list
       (common-lisp:cons "TagKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input untag-resource-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass untag-resource-output common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-untag-resource-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'untag-resource-output 'make-untag-resource-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-capacity-reservation-input common-lisp:nil
                       ((target-dpus :initarg :target-dpus :initform
                         (common-lisp:error ":target-dpus is required") :type
                         (common-lisp:or target-dpus-integer common-lisp:null)
                         :accessor
                         struct-shape-update-capacity-reservation-input-target-dpus
                         :shape "TargetDpusInteger" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or capacity-reservation-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-capacity-reservation-input-name
                         :shape "CapacityReservationName" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-capacity-reservation-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-capacity-reservation-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-capacity-reservation-input
                    'make-update-capacity-reservation-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-capacity-reservation-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-capacity-reservation-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-dpus))
      (common-lisp:list
       (common-lisp:cons "TargetDpus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-capacity-reservation-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-capacity-reservation-output common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-capacity-reservation-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-capacity-reservation-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-capacity-reservation-output
                    'make-update-capacity-reservation-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-capacity-reservation-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-capacity-reservation-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-capacity-reservation-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-data-catalog-input common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or catalog-name-string common-lisp:null)
                         :accessor struct-shape-update-data-catalog-input-name
                         :shape "CatalogNameString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (type :initarg :type :initform
                         (common-lisp:error ":type is required") :type
                         (common-lisp:or data-catalog-type common-lisp:null)
                         :accessor struct-shape-update-data-catalog-input-type
                         :shape "DataCatalogType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description-string common-lisp:null)
                         :accessor
                         struct-shape-update-data-catalog-input-description
                         :shape "DescriptionString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (parameters :initarg :parameters :initform
                         common-lisp:nil :type
                         (common-lisp:or parameters-map common-lisp:null)
                         :accessor
                         struct-shape-update-data-catalog-input-parameters
                         :shape "ParametersMap" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-data-catalog-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-data-catalog-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-data-catalog-input
                    'make-update-data-catalog-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-data-catalog-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-data-catalog-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameters))
      (common-lisp:list
       (common-lisp:cons "Parameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-data-catalog-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-data-catalog-output common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-data-catalog-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-data-catalog-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-data-catalog-output
                    'make-update-data-catalog-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-data-catalog-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-data-catalog-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-data-catalog-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-named-query-input common-lisp:nil
                       ((named-query-id :initarg :named-query-id :initform
                         (common-lisp:error ":named-query-id is required")
                         :type (common-lisp:or named-query-id common-lisp:null)
                         :accessor
                         struct-shape-update-named-query-input-named-query-id
                         :shape "NamedQueryId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor struct-shape-update-named-query-input-name
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or named-query-description-string
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-named-query-input-description
                         :shape "NamedQueryDescriptionString" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (query-string :initarg :query-string :initform
                         (common-lisp:error ":query-string is required") :type
                         (common-lisp:or query-string common-lisp:null)
                         :accessor
                         struct-shape-update-named-query-input-query-string
                         :shape "QueryString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-named-query-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-named-query-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-named-query-input 'make-update-named-query-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-named-query-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-named-query-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'named-query-id))
      (common-lisp:list
       (common-lisp:cons "NamedQueryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-string))
      (common-lisp:list
       (common-lisp:cons "QueryString"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-named-query-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-named-query-output common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-named-query-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-named-query-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-named-query-output
                    'make-update-named-query-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-named-query-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-named-query-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-named-query-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-notebook-input common-lisp:nil
                       ((notebook-id :initarg :notebook-id :initform
                         (common-lisp:error ":notebook-id is required") :type
                         (common-lisp:or notebook-id common-lisp:null)
                         :accessor
                         struct-shape-update-notebook-input-notebook-id :shape
                         "NotebookId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (payload :initarg :payload :initform
                         (common-lisp:error ":payload is required") :type
                         (common-lisp:or payload common-lisp:null) :accessor
                         struct-shape-update-notebook-input-payload :shape
                         "Payload" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (type :initarg :type :initform
                         (common-lisp:error ":type is required") :type
                         (common-lisp:or notebook-type common-lisp:null)
                         :accessor struct-shape-update-notebook-input-type
                         :shape "NotebookType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (session-id :initarg :session-id :initform
                         common-lisp:nil :type
                         (common-lisp:or session-id common-lisp:null) :accessor
                         struct-shape-update-notebook-input-session-id :shape
                         "SessionId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (client-request-token :initarg :client-request-token
                         :initform common-lisp:nil :type
                         (common-lisp:or client-request-token common-lisp:null)
                         :accessor
                         struct-shape-update-notebook-input-client-request-token
                         :shape "ClientRequestToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-notebook-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-notebook-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-notebook-input 'make-update-notebook-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-notebook-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-notebook-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'notebook-id))
      (common-lisp:list
       (common-lisp:cons "NotebookId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'payload))
      (common-lisp:list
       (common-lisp:cons "Payload"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session-id))
      (common-lisp:list
       (common-lisp:cons "SessionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "ClientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-notebook-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-notebook-metadata-input common-lisp:nil
                       ((notebook-id :initarg :notebook-id :initform
                         (common-lisp:error ":notebook-id is required") :type
                         (common-lisp:or notebook-id common-lisp:null)
                         :accessor
                         struct-shape-update-notebook-metadata-input-notebook-id
                         :shape "NotebookId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (client-request-token :initarg :client-request-token
                         :initform common-lisp:nil :type
                         (common-lisp:or client-request-token common-lisp:null)
                         :accessor
                         struct-shape-update-notebook-metadata-input-client-request-token
                         :shape "ClientRequestToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or notebook-name common-lisp:null)
                         :accessor
                         struct-shape-update-notebook-metadata-input-name
                         :shape "NotebookName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-notebook-metadata-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-notebook-metadata-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-notebook-metadata-input
                    'make-update-notebook-metadata-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-notebook-metadata-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-notebook-metadata-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'notebook-id))
      (common-lisp:list
       (common-lisp:cons "NotebookId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "ClientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-notebook-metadata-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-notebook-metadata-output common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-notebook-metadata-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-notebook-metadata-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-notebook-metadata-output
                    'make-update-notebook-metadata-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-notebook-metadata-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-notebook-metadata-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-notebook-metadata-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-notebook-output common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-notebook-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-notebook-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-notebook-output 'make-update-notebook-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-notebook-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-notebook-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-notebook-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-prepared-statement-input common-lisp:nil
                       ((statement-name :initarg :statement-name :initform
                         (common-lisp:error ":statement-name is required")
                         :type (common-lisp:or statement-name common-lisp:null)
                         :accessor
                         struct-shape-update-prepared-statement-input-statement-name
                         :shape "StatementName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (work-group :initarg :work-group :initform
                         (common-lisp:error ":work-group is required") :type
                         (common-lisp:or work-group-name common-lisp:null)
                         :accessor
                         struct-shape-update-prepared-statement-input-work-group
                         :shape "WorkGroupName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (query-statement :initarg :query-statement :initform
                         (common-lisp:error ":query-statement is required")
                         :type (common-lisp:or query-string common-lisp:null)
                         :accessor
                         struct-shape-update-prepared-statement-input-query-statement
                         :shape "QueryString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description-string common-lisp:null)
                         :accessor
                         struct-shape-update-prepared-statement-input-description
                         :shape "DescriptionString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-prepared-statement-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-prepared-statement-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-prepared-statement-input
                    'make-update-prepared-statement-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-prepared-statement-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-prepared-statement-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'statement-name))
      (common-lisp:list
       (common-lisp:cons "StatementName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'work-group))
      (common-lisp:list
       (common-lisp:cons "WorkGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-statement))
      (common-lisp:list
       (common-lisp:cons "QueryStatement"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-prepared-statement-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-prepared-statement-output common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-prepared-statement-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-prepared-statement-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-prepared-statement-output
                    'make-update-prepared-statement-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-prepared-statement-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-prepared-statement-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-prepared-statement-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-work-group-input common-lisp:nil
                       ((work-group :initarg :work-group :initform
                         (common-lisp:error ":work-group is required") :type
                         (common-lisp:or work-group-name common-lisp:null)
                         :accessor
                         struct-shape-update-work-group-input-work-group :shape
                         "WorkGroupName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or work-group-description-string
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-work-group-input-description
                         :shape "WorkGroupDescriptionString" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (configuration-updates :initarg :configuration-updates
                         :initform common-lisp:nil :type
                         (common-lisp:or work-group-configuration-updates
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-work-group-input-configuration-updates
                         :shape "WorkGroupConfigurationUpdates" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (state :initarg :state :initform common-lisp:nil :type
                         (common-lisp:or work-group-state common-lisp:null)
                         :accessor struct-shape-update-work-group-input-state
                         :shape "WorkGroupState" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-work-group-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-work-group-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-work-group-input 'make-update-work-group-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-work-group-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-work-group-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'work-group))
      (common-lisp:list
       (common-lisp:cons "WorkGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'configuration-updates))
      (common-lisp:list
       (common-lisp:cons "ConfigurationUpdates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-work-group-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-work-group-output common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-work-group-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-work-group-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-work-group-output 'make-update-work-group-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-work-group-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-work-group-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-work-group-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass work-group common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or work-group-name common-lisp:null)
                         :accessor struct-shape-work-group-name :shape
                         "WorkGroupName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (state :initarg :state :initform common-lisp:nil :type
                         (common-lisp:or work-group-state common-lisp:null)
                         :accessor struct-shape-work-group-state :shape
                         "WorkGroupState" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (configuration :initarg :configuration :initform
                         common-lisp:nil :type
                         (common-lisp:or work-group-configuration
                                         common-lisp:null)
                         :accessor struct-shape-work-group-configuration :shape
                         "WorkGroupConfiguration" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or work-group-description-string
                                         common-lisp:null)
                         :accessor struct-shape-work-group-description :shape
                         "WorkGroupDescriptionString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (creation-time :initarg :creation-time :initform
                         common-lisp:nil :type
                         (common-lisp:or date common-lisp:null) :accessor
                         struct-shape-work-group-creation-time :shape "Date"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (identity-center-application-arn :initarg
                         :identity-center-application-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or identity-center-application-arn
                                         common-lisp:null)
                         :accessor
                         struct-shape-work-group-identity-center-application-arn
                         :shape "IdentityCenterApplicationArn" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-work-group
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'work-group
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'work-group 'make-work-group))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input work-group))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input work-group))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration))
      (common-lisp:list
       (common-lisp:cons "Configuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'identity-center-application-arn))
      (common-lisp:list
       (common-lisp:cons "IdentityCenterApplicationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input work-group))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass work-group-configuration common-lisp:nil
                       ((result-configuration :initarg :result-configuration
                         :initform common-lisp:nil :type
                         (common-lisp:or result-configuration common-lisp:null)
                         :accessor
                         struct-shape-work-group-configuration-result-configuration
                         :shape "ResultConfiguration" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (enforce-work-group-configuration :initarg
                         :enforce-work-group-configuration :initform
                         common-lisp:nil :type
                         (common-lisp:or boxed-boolean common-lisp:null)
                         :accessor
                         struct-shape-work-group-configuration-enforce-work-group-configuration
                         :shape "BoxedBoolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (publish-cloud-watch-metrics-enabled :initarg
                         :publish-cloud-watch-metrics-enabled :initform
                         common-lisp:nil :type
                         (common-lisp:or boxed-boolean common-lisp:null)
                         :accessor
                         struct-shape-work-group-configuration-publish-cloud-watch-metrics-enabled
                         :shape "BoxedBoolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (bytes-scanned-cutoff-per-query :initarg
                         :bytes-scanned-cutoff-per-query :initform
                         common-lisp:nil :type
                         (common-lisp:or bytes-scanned-cutoff-value
                                         common-lisp:null)
                         :accessor
                         struct-shape-work-group-configuration-bytes-scanned-cutoff-per-query
                         :shape "BytesScannedCutoffValue" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (requester-pays-enabled :initarg
                         :requester-pays-enabled :initform common-lisp:nil
                         :type (common-lisp:or boxed-boolean common-lisp:null)
                         :accessor
                         struct-shape-work-group-configuration-requester-pays-enabled
                         :shape "BoxedBoolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (engine-version :initarg :engine-version :initform
                         common-lisp:nil :type
                         (common-lisp:or engine-version common-lisp:null)
                         :accessor
                         struct-shape-work-group-configuration-engine-version
                         :shape "EngineVersion" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (additional-configuration :initarg
                         :additional-configuration :initform common-lisp:nil
                         :type (common-lisp:or name-string common-lisp:null)
                         :accessor
                         struct-shape-work-group-configuration-additional-configuration
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (execution-role :initarg :execution-role :initform
                         common-lisp:nil :type
                         (common-lisp:or role-arn common-lisp:null) :accessor
                         struct-shape-work-group-configuration-execution-role
                         :shape "RoleArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (customer-content-encryption-configuration :initarg
                         :customer-content-encryption-configuration :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          customer-content-encryption-configuration
                          common-lisp:null)
                         :accessor
                         struct-shape-work-group-configuration-customer-content-encryption-configuration
                         :shape "CustomerContentEncryptionConfiguration"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (enable-minimum-encryption-configuration :initarg
                         :enable-minimum-encryption-configuration :initform
                         common-lisp:nil :type
                         (common-lisp:or boxed-boolean common-lisp:null)
                         :accessor
                         struct-shape-work-group-configuration-enable-minimum-encryption-configuration
                         :shape "BoxedBoolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (identity-center-configuration :initarg
                         :identity-center-configuration :initform
                         common-lisp:nil :type
                         (common-lisp:or identity-center-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-work-group-configuration-identity-center-configuration
                         :shape "IdentityCenterConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (query-results-s3access-grants-configuration :initarg
                         :query-results-s3access-grants-configuration :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          query-results-s3access-grants-configuration
                          common-lisp:null)
                         :accessor
                         struct-shape-work-group-configuration-query-results-s3access-grants-configuration
                         :shape "QueryResultsS3AccessGrantsConfiguration"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-work-group-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'work-group-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'work-group-configuration 'make-work-group-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          work-group-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          work-group-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'result-configuration))
      (common-lisp:list
       (common-lisp:cons "ResultConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enforce-work-group-configuration))
      (common-lisp:list
       (common-lisp:cons "EnforceWorkGroupConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'publish-cloud-watch-metrics-enabled))
      (common-lisp:list
       (common-lisp:cons "PublishCloudWatchMetricsEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'bytes-scanned-cutoff-per-query))
      (common-lisp:list
       (common-lisp:cons "BytesScannedCutoffPerQuery"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'requester-pays-enabled))
      (common-lisp:list
       (common-lisp:cons "RequesterPaysEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine-version))
      (common-lisp:list
       (common-lisp:cons "EngineVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'additional-configuration))
      (common-lisp:list
       (common-lisp:cons "AdditionalConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execution-role))
      (common-lisp:list
       (common-lisp:cons "ExecutionRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'customer-content-encryption-configuration))
      (common-lisp:list
       (common-lisp:cons "CustomerContentEncryptionConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-minimum-encryption-configuration))
      (common-lisp:list
       (common-lisp:cons "EnableMinimumEncryptionConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'identity-center-configuration))
      (common-lisp:list
       (common-lisp:cons "IdentityCenterConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'query-results-s3access-grants-configuration))
      (common-lisp:list
       (common-lisp:cons "QueryResultsS3AccessGrantsConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          work-group-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass work-group-configuration-updates common-lisp:nil
                       ((enforce-work-group-configuration :initarg
                         :enforce-work-group-configuration :initform
                         common-lisp:nil :type
                         (common-lisp:or boxed-boolean common-lisp:null)
                         :accessor
                         struct-shape-work-group-configuration-updates-enforce-work-group-configuration
                         :shape "BoxedBoolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (result-configuration-updates :initarg
                         :result-configuration-updates :initform
                         common-lisp:nil :type
                         (common-lisp:or result-configuration-updates
                                         common-lisp:null)
                         :accessor
                         struct-shape-work-group-configuration-updates-result-configuration-updates
                         :shape "ResultConfigurationUpdates" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (publish-cloud-watch-metrics-enabled :initarg
                         :publish-cloud-watch-metrics-enabled :initform
                         common-lisp:nil :type
                         (common-lisp:or boxed-boolean common-lisp:null)
                         :accessor
                         struct-shape-work-group-configuration-updates-publish-cloud-watch-metrics-enabled
                         :shape "BoxedBoolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (bytes-scanned-cutoff-per-query :initarg
                         :bytes-scanned-cutoff-per-query :initform
                         common-lisp:nil :type
                         (common-lisp:or bytes-scanned-cutoff-value
                                         common-lisp:null)
                         :accessor
                         struct-shape-work-group-configuration-updates-bytes-scanned-cutoff-per-query
                         :shape "BytesScannedCutoffValue" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (remove-bytes-scanned-cutoff-per-query :initarg
                         :remove-bytes-scanned-cutoff-per-query :initform
                         common-lisp:nil :type
                         (common-lisp:or boxed-boolean common-lisp:null)
                         :accessor
                         struct-shape-work-group-configuration-updates-remove-bytes-scanned-cutoff-per-query
                         :shape "BoxedBoolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (requester-pays-enabled :initarg
                         :requester-pays-enabled :initform common-lisp:nil
                         :type (common-lisp:or boxed-boolean common-lisp:null)
                         :accessor
                         struct-shape-work-group-configuration-updates-requester-pays-enabled
                         :shape "BoxedBoolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (engine-version :initarg :engine-version :initform
                         common-lisp:nil :type
                         (common-lisp:or engine-version common-lisp:null)
                         :accessor
                         struct-shape-work-group-configuration-updates-engine-version
                         :shape "EngineVersion" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (remove-customer-content-encryption-configuration
                         :initarg
                         :remove-customer-content-encryption-configuration
                         :initform common-lisp:nil :type
                         (common-lisp:or boxed-boolean common-lisp:null)
                         :accessor
                         struct-shape-work-group-configuration-updates-remove-customer-content-encryption-configuration
                         :shape "BoxedBoolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (additional-configuration :initarg
                         :additional-configuration :initform common-lisp:nil
                         :type (common-lisp:or name-string common-lisp:null)
                         :accessor
                         struct-shape-work-group-configuration-updates-additional-configuration
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (execution-role :initarg :execution-role :initform
                         common-lisp:nil :type
                         (common-lisp:or role-arn common-lisp:null) :accessor
                         struct-shape-work-group-configuration-updates-execution-role
                         :shape "RoleArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (customer-content-encryption-configuration :initarg
                         :customer-content-encryption-configuration :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          customer-content-encryption-configuration
                          common-lisp:null)
                         :accessor
                         struct-shape-work-group-configuration-updates-customer-content-encryption-configuration
                         :shape "CustomerContentEncryptionConfiguration"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (enable-minimum-encryption-configuration :initarg
                         :enable-minimum-encryption-configuration :initform
                         common-lisp:nil :type
                         (common-lisp:or boxed-boolean common-lisp:null)
                         :accessor
                         struct-shape-work-group-configuration-updates-enable-minimum-encryption-configuration
                         :shape "BoxedBoolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (query-results-s3access-grants-configuration :initarg
                         :query-results-s3access-grants-configuration :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          query-results-s3access-grants-configuration
                          common-lisp:null)
                         :accessor
                         struct-shape-work-group-configuration-updates-query-results-s3access-grants-configuration
                         :shape "QueryResultsS3AccessGrantsConfiguration"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-work-group-configuration-updates
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'work-group-configuration-updates
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'work-group-configuration-updates
                    'make-work-group-configuration-updates))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          work-group-configuration-updates))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          work-group-configuration-updates))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enforce-work-group-configuration))
      (common-lisp:list
       (common-lisp:cons "EnforceWorkGroupConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'result-configuration-updates))
      (common-lisp:list
       (common-lisp:cons "ResultConfigurationUpdates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'publish-cloud-watch-metrics-enabled))
      (common-lisp:list
       (common-lisp:cons "PublishCloudWatchMetricsEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'bytes-scanned-cutoff-per-query))
      (common-lisp:list
       (common-lisp:cons "BytesScannedCutoffPerQuery"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'remove-bytes-scanned-cutoff-per-query))
      (common-lisp:list
       (common-lisp:cons "RemoveBytesScannedCutoffPerQuery"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'requester-pays-enabled))
      (common-lisp:list
       (common-lisp:cons "RequesterPaysEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine-version))
      (common-lisp:list
       (common-lisp:cons "EngineVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'remove-customer-content-encryption-configuration))
      (common-lisp:list
       (common-lisp:cons "RemoveCustomerContentEncryptionConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'additional-configuration))
      (common-lisp:list
       (common-lisp:cons "AdditionalConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execution-role))
      (common-lisp:list
       (common-lisp:cons "ExecutionRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'customer-content-encryption-configuration))
      (common-lisp:list
       (common-lisp:cons "CustomerContentEncryptionConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-minimum-encryption-configuration))
      (common-lisp:list
       (common-lisp:cons "EnableMinimumEncryptionConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'query-results-s3access-grants-configuration))
      (common-lisp:list
       (common-lisp:cons "QueryResultsS3AccessGrantsConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          work-group-configuration-updates))
   common-lisp:nil))
(common-lisp:deftype work-group-description-string () 'common-lisp:string)
(common-lisp:deftype work-group-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype work-group-names-list ()
   '(trivial-types:proper-list work-group-name))
 (common-lisp:defun make-work-group-names-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list work-group-name))
   aws-sdk/generator/shape::members))
(common-lisp:deftype work-group-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass work-group-summary common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or work-group-name common-lisp:null)
                         :accessor struct-shape-work-group-summary-name :shape
                         "WorkGroupName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (state :initarg :state :initform common-lisp:nil :type
                         (common-lisp:or work-group-state common-lisp:null)
                         :accessor struct-shape-work-group-summary-state :shape
                         "WorkGroupState" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or work-group-description-string
                                         common-lisp:null)
                         :accessor struct-shape-work-group-summary-description
                         :shape "WorkGroupDescriptionString" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (creation-time :initarg :creation-time :initform
                         common-lisp:nil :type
                         (common-lisp:or date common-lisp:null) :accessor
                         struct-shape-work-group-summary-creation-time :shape
                         "Date" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (engine-version :initarg :engine-version :initform
                         common-lisp:nil :type
                         (common-lisp:or engine-version common-lisp:null)
                         :accessor
                         struct-shape-work-group-summary-engine-version :shape
                         "EngineVersion" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (identity-center-application-arn :initarg
                         :identity-center-application-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or identity-center-application-arn
                                         common-lisp:null)
                         :accessor
                         struct-shape-work-group-summary-identity-center-application-arn
                         :shape "IdentityCenterApplicationArn" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-work-group-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'work-group-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'work-group-summary 'make-work-group-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input work-group-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input work-group-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine-version))
      (common-lisp:list
       (common-lisp:cons "EngineVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'identity-center-application-arn))
      (common-lisp:list
       (common-lisp:cons "IdentityCenterApplicationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input work-group-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype work-groups-list ()
   '(trivial-types:proper-list work-group-summary))
 (common-lisp:defun make-work-groups-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list work-group-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |datumList| () '(trivial-types:proper-list datum))
 (common-lisp:defun make-datumlist
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list datum))
   aws-sdk/generator/shape::members))
(common-lisp:deftype |datumString| () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defun batch-get-named-query
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key named-query-ids)
   (common-lisp:declare (common-lisp:ignorable named-query-ids))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-batch-get-named-query-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'athena-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "BatchGetNamedQuery"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'batch-get-named-query))
(common-lisp:progn
 (common-lisp:defun batch-get-prepared-statement
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key prepared-statement-names work-group)
   (common-lisp:declare
    (common-lisp:ignorable prepared-statement-names work-group))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-batch-get-prepared-statement-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'athena-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "BatchGetPreparedStatement"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'batch-get-prepared-statement))
(common-lisp:progn
 (common-lisp:defun batch-get-query-execution
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key query-execution-ids)
   (common-lisp:declare (common-lisp:ignorable query-execution-ids))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-batch-get-query-execution-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'athena-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "BatchGetQueryExecution"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'batch-get-query-execution))
(common-lisp:progn
 (common-lisp:defun cancel-capacity-reservation
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name)
   (common-lisp:declare (common-lisp:ignorable name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-cancel-capacity-reservation-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'athena-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CancelCapacityReservation"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'cancel-capacity-reservation))
(common-lisp:progn
 (common-lisp:defun create-capacity-reservation
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key target-dpus name tags)
   (common-lisp:declare (common-lisp:ignorable target-dpus name tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-capacity-reservation-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'athena-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateCapacityReservation"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-capacity-reservation))
(common-lisp:progn
 (common-lisp:defun create-data-catalog
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name type description parameters tags)
   (common-lisp:declare
    (common-lisp:ignorable name type description parameters tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-data-catalog-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'athena-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateDataCatalog"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-data-catalog))
(common-lisp:progn
 (common-lisp:defun create-named-query
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name description database query-string
                     client-request-token work-group)
   (common-lisp:declare
    (common-lisp:ignorable name description database query-string
     client-request-token work-group))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-named-query-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'athena-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateNamedQuery"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-named-query))
(common-lisp:progn
 (common-lisp:defun create-notebook
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key work-group name client-request-token)
   (common-lisp:declare
    (common-lisp:ignorable work-group name client-request-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-notebook-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'athena-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateNotebook"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-notebook))
(common-lisp:progn
 (common-lisp:defun create-prepared-statement
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key statement-name work-group query-statement
                     description)
   (common-lisp:declare
    (common-lisp:ignorable statement-name work-group query-statement
     description))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-prepared-statement-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'athena-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreatePreparedStatement"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-prepared-statement))
(common-lisp:progn
 (common-lisp:defun create-presigned-notebook-url
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key session-id)
   (common-lisp:declare (common-lisp:ignorable session-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-presigned-notebook-url-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'athena-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreatePresignedNotebookUrl"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-presigned-notebook-url))
(common-lisp:progn
 (common-lisp:defun create-work-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name configuration description tags)
   (common-lisp:declare
    (common-lisp:ignorable name configuration description tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-work-group-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'athena-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateWorkGroup"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-work-group))
(common-lisp:progn
 (common-lisp:defun delete-capacity-reservation
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name)
   (common-lisp:declare (common-lisp:ignorable name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-capacity-reservation-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'athena-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteCapacityReservation"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-capacity-reservation))
(common-lisp:progn
 (common-lisp:defun delete-data-catalog
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name)
   (common-lisp:declare (common-lisp:ignorable name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-data-catalog-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'athena-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteDataCatalog"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-data-catalog))
(common-lisp:progn
 (common-lisp:defun delete-named-query
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key named-query-id)
   (common-lisp:declare (common-lisp:ignorable named-query-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-named-query-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'athena-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteNamedQuery"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-named-query))
(common-lisp:progn
 (common-lisp:defun delete-notebook
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key notebook-id)
   (common-lisp:declare (common-lisp:ignorable notebook-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-notebook-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'athena-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteNotebook"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-notebook))
(common-lisp:progn
 (common-lisp:defun delete-prepared-statement
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key statement-name work-group)
   (common-lisp:declare (common-lisp:ignorable statement-name work-group))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-prepared-statement-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'athena-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeletePreparedStatement"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-prepared-statement))
(common-lisp:progn
 (common-lisp:defun delete-work-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key work-group recursive-delete-option)
   (common-lisp:declare
    (common-lisp:ignorable work-group recursive-delete-option))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-work-group-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'athena-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteWorkGroup"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-work-group))
(common-lisp:progn
 (common-lisp:defun export-notebook
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key notebook-id)
   (common-lisp:declare (common-lisp:ignorable notebook-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-export-notebook-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'athena-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ExportNotebook"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'export-notebook))
(common-lisp:progn
 (common-lisp:defun get-calculation-execution
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key calculation-execution-id)
   (common-lisp:declare (common-lisp:ignorable calculation-execution-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-calculation-execution-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'athena-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetCalculationExecution"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-calculation-execution))
(common-lisp:progn
 (common-lisp:defun get-calculation-execution-code
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key calculation-execution-id)
   (common-lisp:declare (common-lisp:ignorable calculation-execution-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-calculation-execution-code-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'athena-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetCalculationExecutionCode"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-calculation-execution-code))
(common-lisp:progn
 (common-lisp:defun get-calculation-execution-status
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key calculation-execution-id)
   (common-lisp:declare (common-lisp:ignorable calculation-execution-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-calculation-execution-status-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'athena-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetCalculationExecutionStatus"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-calculation-execution-status))
(common-lisp:progn
 (common-lisp:defun get-capacity-assignment-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key capacity-reservation-name)
   (common-lisp:declare (common-lisp:ignorable capacity-reservation-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-capacity-assignment-configuration-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'athena-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetCapacityAssignmentConfiguration"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-capacity-assignment-configuration))
(common-lisp:progn
 (common-lisp:defun get-capacity-reservation
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name)
   (common-lisp:declare (common-lisp:ignorable name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-capacity-reservation-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'athena-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetCapacityReservation"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-capacity-reservation))
(common-lisp:progn
 (common-lisp:defun get-data-catalog
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name work-group)
   (common-lisp:declare (common-lisp:ignorable name work-group))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-data-catalog-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'athena-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetDataCatalog"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-data-catalog))
(common-lisp:progn
 (common-lisp:defun get-database
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key catalog-name database-name work-group)
   (common-lisp:declare
    (common-lisp:ignorable catalog-name database-name work-group))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-database-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'athena-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetDatabase"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-database))
(common-lisp:progn
 (common-lisp:defun get-named-query
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key named-query-id)
   (common-lisp:declare (common-lisp:ignorable named-query-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-named-query-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'athena-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetNamedQuery"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-named-query))
(common-lisp:progn
 (common-lisp:defun get-notebook-metadata
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key notebook-id)
   (common-lisp:declare (common-lisp:ignorable notebook-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-notebook-metadata-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'athena-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetNotebookMetadata"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-notebook-metadata))
(common-lisp:progn
 (common-lisp:defun get-prepared-statement
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key statement-name work-group)
   (common-lisp:declare (common-lisp:ignorable statement-name work-group))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-prepared-statement-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'athena-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetPreparedStatement"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-prepared-statement))
(common-lisp:progn
 (common-lisp:defun get-query-execution
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key query-execution-id)
   (common-lisp:declare (common-lisp:ignorable query-execution-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-query-execution-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'athena-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetQueryExecution"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-query-execution))
(common-lisp:progn
 (common-lisp:defun get-query-results
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key query-execution-id next-token
                     max-results)
   (common-lisp:declare
    (common-lisp:ignorable query-execution-id next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-query-results-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'athena-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetQueryResults"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-query-results))
(common-lisp:progn
 (common-lisp:defun get-query-runtime-statistics
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key query-execution-id)
   (common-lisp:declare (common-lisp:ignorable query-execution-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-query-runtime-statistics-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'athena-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetQueryRuntimeStatistics"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-query-runtime-statistics))
(common-lisp:progn
 (common-lisp:defun get-session
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key session-id)
   (common-lisp:declare (common-lisp:ignorable session-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-session-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'athena-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetSession"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-session))
(common-lisp:progn
 (common-lisp:defun get-session-status
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key session-id)
   (common-lisp:declare (common-lisp:ignorable session-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-session-status-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'athena-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetSessionStatus"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-session-status))
(common-lisp:progn
 (common-lisp:defun get-table-metadata
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key catalog-name database-name table-name
                     work-group)
   (common-lisp:declare
    (common-lisp:ignorable catalog-name database-name table-name work-group))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-table-metadata-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'athena-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetTableMetadata"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-table-metadata))
(common-lisp:progn
 (common-lisp:defun get-work-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key work-group)
   (common-lisp:declare (common-lisp:ignorable work-group))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-work-group-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'athena-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetWorkGroup"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-work-group))
(common-lisp:progn
 (common-lisp:defun import-notebook
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key work-group name payload type
                     notebook-s3location-uri client-request-token)
   (common-lisp:declare
    (common-lisp:ignorable work-group name payload type notebook-s3location-uri
     client-request-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-import-notebook-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'athena-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ImportNotebook"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'import-notebook))
(common-lisp:progn
 (common-lisp:defun list-application-dpusizes
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-application-dpusizes-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'athena-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListApplicationDPUSizes"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-application-dpusizes))
(common-lisp:progn
 (common-lisp:defun list-calculation-executions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key session-id state-filter max-results
                     next-token)
   (common-lisp:declare
    (common-lisp:ignorable session-id state-filter max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-calculation-executions-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'athena-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListCalculationExecutions"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-calculation-executions))
(common-lisp:progn
 (common-lisp:defun list-capacity-reservations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results)
   (common-lisp:declare (common-lisp:ignorable next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-capacity-reservations-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'athena-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListCapacityReservations"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-capacity-reservations))
(common-lisp:progn
 (common-lisp:defun list-data-catalogs
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results work-group)
   (common-lisp:declare
    (common-lisp:ignorable next-token max-results work-group))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-data-catalogs-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'athena-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListDataCatalogs"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-data-catalogs))
(common-lisp:progn
 (common-lisp:defun list-databases
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key catalog-name next-token max-results
                     work-group)
   (common-lisp:declare
    (common-lisp:ignorable catalog-name next-token max-results work-group))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-databases-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'athena-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListDatabases"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-databases))
(common-lisp:progn
 (common-lisp:defun list-engine-versions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results)
   (common-lisp:declare (common-lisp:ignorable next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-engine-versions-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'athena-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListEngineVersions"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-engine-versions))
(common-lisp:progn
 (common-lisp:defun list-executors
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key session-id executor-state-filter
                     max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable session-id executor-state-filter max-results
     next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-executors-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'athena-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListExecutors"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-executors))
(common-lisp:progn
 (common-lisp:defun list-named-queries
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results work-group)
   (common-lisp:declare
    (common-lisp:ignorable next-token max-results work-group))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-named-queries-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'athena-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListNamedQueries"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-named-queries))
(common-lisp:progn
 (common-lisp:defun list-notebook-metadata
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key filters next-token max-results
                     work-group)
   (common-lisp:declare
    (common-lisp:ignorable filters next-token max-results work-group))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-notebook-metadata-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'athena-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListNotebookMetadata"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-notebook-metadata))
(common-lisp:progn
 (common-lisp:defun list-notebook-sessions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key notebook-id max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable notebook-id max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-notebook-sessions-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'athena-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListNotebookSessions"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-notebook-sessions))
(common-lisp:progn
 (common-lisp:defun list-prepared-statements
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key work-group next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable work-group next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-prepared-statements-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'athena-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListPreparedStatements"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-prepared-statements))
(common-lisp:progn
 (common-lisp:defun list-query-executions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results work-group)
   (common-lisp:declare
    (common-lisp:ignorable next-token max-results work-group))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-query-executions-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'athena-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListQueryExecutions"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-query-executions))
(common-lisp:progn
 (common-lisp:defun list-sessions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key work-group state-filter max-results
                     next-token)
   (common-lisp:declare
    (common-lisp:ignorable work-group state-filter max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-sessions-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'athena-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListSessions"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-sessions))
(common-lisp:progn
 (common-lisp:defun list-table-metadata
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key catalog-name database-name expression
                     next-token max-results work-group)
   (common-lisp:declare
    (common-lisp:ignorable catalog-name database-name expression next-token
     max-results work-group))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-table-metadata-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'athena-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListTableMetadata"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-table-metadata))
(common-lisp:progn
 (common-lisp:defun list-tags-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable resource-arn next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-for-resource-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'athena-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListTagsForResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-tags-for-resource))
(common-lisp:progn
 (common-lisp:defun list-work-groups
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results)
   (common-lisp:declare (common-lisp:ignorable next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-work-groups-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'athena-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListWorkGroups"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-work-groups))
(common-lisp:progn
 (common-lisp:defun put-capacity-assignment-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key capacity-reservation-name
                     capacity-assignments)
   (common-lisp:declare
    (common-lisp:ignorable capacity-reservation-name capacity-assignments))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-put-capacity-assignment-configuration-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'athena-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "PutCapacityAssignmentConfiguration"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'put-capacity-assignment-configuration))
(common-lisp:progn
 (common-lisp:defun start-calculation-execution
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key session-id description
                     calculation-configuration code-block client-request-token)
   (common-lisp:declare
    (common-lisp:ignorable session-id description calculation-configuration
     code-block client-request-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-start-calculation-execution-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'athena-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "StartCalculationExecution"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'start-calculation-execution))
(common-lisp:progn
 (common-lisp:defun start-query-execution
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key query-string client-request-token
                     query-execution-context result-configuration work-group
                     execution-parameters result-reuse-configuration)
   (common-lisp:declare
    (common-lisp:ignorable query-string client-request-token
     query-execution-context result-configuration work-group
     execution-parameters result-reuse-configuration))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-start-query-execution-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'athena-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "StartQueryExecution"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'start-query-execution))
(common-lisp:progn
 (common-lisp:defun start-session
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key description work-group
                     engine-configuration notebook-version
                     session-idle-timeout-in-minutes client-request-token)
   (common-lisp:declare
    (common-lisp:ignorable description work-group engine-configuration
     notebook-version session-idle-timeout-in-minutes client-request-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-start-session-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'athena-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "StartSession"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'start-session))
(common-lisp:progn
 (common-lisp:defun stop-calculation-execution
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key calculation-execution-id)
   (common-lisp:declare (common-lisp:ignorable calculation-execution-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-stop-calculation-execution-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'athena-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "StopCalculationExecution"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'stop-calculation-execution))
(common-lisp:progn
 (common-lisp:defun stop-query-execution
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key query-execution-id)
   (common-lisp:declare (common-lisp:ignorable query-execution-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-stop-query-execution-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'athena-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "StopQueryExecution"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'stop-query-execution))
(common-lisp:progn
 (common-lisp:defun tag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tags)
   (common-lisp:declare (common-lisp:ignorable resource-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-resource-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'athena-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "TagResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'tag-resource))
(common-lisp:progn
 (common-lisp:defun terminate-session
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key session-id)
   (common-lisp:declare (common-lisp:ignorable session-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-terminate-session-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'athena-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "TerminateSession"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'terminate-session))
(common-lisp:progn
 (common-lisp:defun untag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tag-keys)
   (common-lisp:declare (common-lisp:ignorable resource-arn tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-resource-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'athena-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UntagResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'untag-resource))
(common-lisp:progn
 (common-lisp:defun update-capacity-reservation
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key target-dpus name)
   (common-lisp:declare (common-lisp:ignorable target-dpus name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-capacity-reservation-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'athena-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateCapacityReservation"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-capacity-reservation))
(common-lisp:progn
 (common-lisp:defun update-data-catalog
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name type description parameters)
   (common-lisp:declare
    (common-lisp:ignorable name type description parameters))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-data-catalog-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'athena-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateDataCatalog"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-data-catalog))
(common-lisp:progn
 (common-lisp:defun update-named-query
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key named-query-id name description
                     query-string)
   (common-lisp:declare
    (common-lisp:ignorable named-query-id name description query-string))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-named-query-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'athena-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateNamedQuery"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-named-query))
(common-lisp:progn
 (common-lisp:defun update-notebook
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key notebook-id payload type session-id
                     client-request-token)
   (common-lisp:declare
    (common-lisp:ignorable notebook-id payload type session-id
     client-request-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-notebook-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'athena-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateNotebook"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-notebook))
(common-lisp:progn
 (common-lisp:defun update-notebook-metadata
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key notebook-id client-request-token name)
   (common-lisp:declare
    (common-lisp:ignorable notebook-id client-request-token name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-notebook-metadata-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'athena-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateNotebookMetadata"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-notebook-metadata))
(common-lisp:progn
 (common-lisp:defun update-prepared-statement
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key statement-name work-group query-statement
                     description)
   (common-lisp:declare
    (common-lisp:ignorable statement-name work-group query-statement
     description))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-prepared-statement-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'athena-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdatePreparedStatement"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-prepared-statement))
(common-lisp:progn
 (common-lisp:defun update-work-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key work-group description
                     configuration-updates state)
   (common-lisp:declare
    (common-lisp:ignorable work-group description configuration-updates state))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-work-group-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'athena-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateWorkGroup"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-work-group))
