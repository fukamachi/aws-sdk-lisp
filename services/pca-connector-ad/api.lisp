;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/pca-connector-ad/api
  (:use)
  (:nicknames #:aws/pca-connector-ad)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/json-request)
  (:import-from #:aws-sdk/rest-json-request)
  (:import-from #:aws-sdk/rest-xml-request)
  (:import-from #:aws-sdk/query-request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/pca-connector-ad/api)
(common-lisp:progn
 (common-lisp:define-condition pca-connector-ad-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'pca-connector-ad-error))
(common-lisp:progn
 (common-lisp:defclass pca-connector-ad-request
                       (aws-sdk/generator/service::rest-json-request)
                       common-lisp:nil
                       (:default-initargs :service "pca-connector-ad"
                        :api-version "2018-05-10" :host-prefix
                        "pca-connector-ad" :signing-name "pca-connector-ad"
                        :global-host common-lisp:nil))
 (common-lisp:export 'pca-connector-ad-request))
(common-lisp:defvar *error-map*
  '(("AccessDeniedException" . access-denied-exception)
    ("ConflictException" . conflict-exception)
    ("InternalServerException" . internal-server-exception)
    ("ResourceNotFoundException" . resource-not-found-exception)
    ("ServiceQuotaExceededException" . service-quota-exceeded-exception)
    ("ThrottlingException" . throttling-exception)
    ("ValidationException" . validation-exception)))
(common-lisp:progn
 (common-lisp:defclass access-control-entry common-lisp:nil
                       ((access-rights :initarg :access-rights :initform
                         common-lisp:nil :type
                         (common-lisp:or access-rights common-lisp:null)
                         :accessor
                         struct-shape-access-control-entry-access-rights :shape
                         "AccessRights" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (created-at :initarg :created-at :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-access-control-entry-created-at :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (group-display-name :initarg :group-display-name
                         :initform common-lisp:nil :type
                         (common-lisp:or display-name common-lisp:null)
                         :accessor
                         struct-shape-access-control-entry-group-display-name
                         :shape "DisplayName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (group-security-identifier :initarg
                         :group-security-identifier :initform common-lisp:nil
                         :type
                         (common-lisp:or group-security-identifier
                                         common-lisp:null)
                         :accessor
                         struct-shape-access-control-entry-group-security-identifier
                         :shape "GroupSecurityIdentifier" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (template-arn :initarg :template-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or template-arn common-lisp:null)
                         :accessor
                         struct-shape-access-control-entry-template-arn :shape
                         "TemplateArn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (updated-at :initarg :updated-at :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-access-control-entry-updated-at :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-access-control-entry
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'access-control-entry
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'access-control-entry 'make-access-control-entry))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input access-control-entry))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input access-control-entry))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-rights))
      (common-lisp:list
       (common-lisp:cons "AccessRights"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "CreatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-display-name))
      (common-lisp:list
       (common-lisp:cons "GroupDisplayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'group-security-identifier))
      (common-lisp:list
       (common-lisp:cons "GroupSecurityIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-arn))
      (common-lisp:list
       (common-lisp:cons "TemplateArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "UpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input access-control-entry))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype access-control-entry-list ()
   '(trivial-types:proper-list access-control-entry-summary))
 (common-lisp:defun make-access-control-entry-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            access-control-entry-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass access-control-entry-summary common-lisp:nil
                       ((access-rights :initarg :access-rights :initform
                         common-lisp:nil :type
                         (common-lisp:or access-rights common-lisp:null)
                         :accessor
                         struct-shape-access-control-entry-summary-access-rights
                         :shape "AccessRights" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (created-at :initarg :created-at :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-access-control-entry-summary-created-at
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (group-display-name :initarg :group-display-name
                         :initform common-lisp:nil :type
                         (common-lisp:or display-name common-lisp:null)
                         :accessor
                         struct-shape-access-control-entry-summary-group-display-name
                         :shape "DisplayName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (group-security-identifier :initarg
                         :group-security-identifier :initform common-lisp:nil
                         :type
                         (common-lisp:or group-security-identifier
                                         common-lisp:null)
                         :accessor
                         struct-shape-access-control-entry-summary-group-security-identifier
                         :shape "GroupSecurityIdentifier" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (template-arn :initarg :template-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or template-arn common-lisp:null)
                         :accessor
                         struct-shape-access-control-entry-summary-template-arn
                         :shape "TemplateArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (updated-at :initarg :updated-at :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-access-control-entry-summary-updated-at
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-access-control-entry-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'access-control-entry-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'access-control-entry-summary
                    'make-access-control-entry-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          access-control-entry-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          access-control-entry-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-rights))
      (common-lisp:list
       (common-lisp:cons "AccessRights"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "CreatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-display-name))
      (common-lisp:list
       (common-lisp:cons "GroupDisplayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'group-security-identifier))
      (common-lisp:list
       (common-lisp:cons "GroupSecurityIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-arn))
      (common-lisp:list
       (common-lisp:cons "TemplateArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "UpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          access-control-entry-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition access-denied-exception
     (pca-connector-ad-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       access-denied-exception-message)))
 (common-lisp:export
  (common-lisp:list 'access-denied-exception 'access-denied-exception-message)))
(common-lisp:deftype access-right () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass access-rights common-lisp:nil
                       ((auto-enroll :initarg :auto-enroll :initform
                         common-lisp:nil :type
                         (common-lisp:or access-right common-lisp:null)
                         :accessor struct-shape-access-rights-auto-enroll
                         :shape "AccessRight" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (enroll :initarg :enroll :initform common-lisp:nil
                         :type (common-lisp:or access-right common-lisp:null)
                         :accessor struct-shape-access-rights-enroll :shape
                         "AccessRight" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-access-rights
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'access-rights
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'access-rights 'make-access-rights))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input access-rights))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input access-rights))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auto-enroll))
      (common-lisp:list
       (common-lisp:cons "AutoEnroll"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enroll))
      (common-lisp:list
       (common-lisp:cons "Enroll"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input access-rights))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass application-policies common-lisp:nil
                       ((critical :initarg :critical :initform common-lisp:nil
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor struct-shape-application-policies-critical
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (policies :initarg :policies :initform
                         (common-lisp:error ":policies is required") :type
                         (common-lisp:or application-policy-list
                                         common-lisp:null)
                         :accessor struct-shape-application-policies-policies
                         :shape "ApplicationPolicyList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-application-policies
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'application-policies
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'application-policies 'make-application-policies))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input application-policies))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input application-policies))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'critical))
      (common-lisp:list
       (common-lisp:cons "Critical"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policies))
      (common-lisp:list
       (common-lisp:cons "Policies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input application-policies))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass application-policy common-lisp:nil
                       ((policy-object-identifier :initarg
                         :policy-object-identifier :initform common-lisp:nil
                         :type
                         (common-lisp:or custom-object-identifier
                                         common-lisp:null)
                         :accessor
                         struct-shape-application-policy-policy-object-identifier
                         :shape "CustomObjectIdentifier" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (policy-type :initarg :policy-type :initform
                         common-lisp:nil :type
                         (common-lisp:or application-policy-type
                                         common-lisp:null)
                         :accessor struct-shape-application-policy-policy-type
                         :shape "ApplicationPolicyType" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-application-policy
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'application-policy
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'application-policy 'make-application-policy))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input application-policy))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input application-policy))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'policy-object-identifier))
      (common-lisp:list
       (common-lisp:cons "PolicyObjectIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-type))
      (common-lisp:list
       (common-lisp:cons "PolicyType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input application-policy))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype application-policy-list ()
   '(trivial-types:proper-list application-policy))
 (common-lisp:defun make-application-policy-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list application-policy))
   aws-sdk/generator/shape::members))
(common-lisp:deftype application-policy-type () 'common-lisp:string)
(common-lisp:deftype boolean () 'common-lisp:boolean)
(common-lisp:deftype certificate-authority-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass certificate-validity common-lisp:nil
                       ((renewal-period :initarg :renewal-period :initform
                         (common-lisp:error ":renewal-period is required")
                         :type
                         (common-lisp:or validity-period common-lisp:null)
                         :accessor
                         struct-shape-certificate-validity-renewal-period
                         :shape "ValidityPeriod" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (validity-period :initarg :validity-period :initform
                         (common-lisp:error ":validity-period is required")
                         :type
                         (common-lisp:or validity-period common-lisp:null)
                         :accessor
                         struct-shape-certificate-validity-validity-period
                         :shape "ValidityPeriod" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-certificate-validity
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'certificate-validity
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'certificate-validity 'make-certificate-validity))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input certificate-validity))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input certificate-validity))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'renewal-period))
      (common-lisp:list
       (common-lisp:cons "RenewalPeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'validity-period))
      (common-lisp:list
       (common-lisp:cons "ValidityPeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input certificate-validity))
   common-lisp:nil))
(common-lisp:deftype client-compatibility-v2 () 'common-lisp:string)
(common-lisp:deftype client-compatibility-v3 () 'common-lisp:string)
(common-lisp:deftype client-compatibility-v4 () 'common-lisp:string)
(common-lisp:deftype client-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition conflict-exception
     (pca-connector-ad-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       conflict-exception-message)
      (resource-id :initarg :resource-id :initform common-lisp:nil :reader
       conflict-exception-resource-id)
      (resource-type :initarg :resource-type :initform common-lisp:nil :reader
       conflict-exception-resource-type)))
 (common-lisp:export
  (common-lisp:list 'conflict-exception 'conflict-exception-message
                    'conflict-exception-resource-id
                    'conflict-exception-resource-type)))
(common-lisp:progn
 (common-lisp:defclass connector common-lisp:nil
                       ((arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or connector-arn common-lisp:null)
                         :accessor struct-shape-connector-arn :shape
                         "ConnectorArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (certificate-authority-arn :initarg
                         :certificate-authority-arn :initform common-lisp:nil
                         :type
                         (common-lisp:or certificate-authority-arn
                                         common-lisp:null)
                         :accessor
                         struct-shape-connector-certificate-authority-arn
                         :shape "CertificateAuthorityArn" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (certificate-enrollment-policy-server-endpoint :initarg
                         :certificate-enrollment-policy-server-endpoint
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-connector-certificate-enrollment-policy-server-endpoint
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (created-at :initarg :created-at :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-connector-created-at :shape "Timestamp"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (directory-id :initarg :directory-id :initform
                         common-lisp:nil :type
                         (common-lisp:or directory-id common-lisp:null)
                         :accessor struct-shape-connector-directory-id :shape
                         "DirectoryId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or connector-status common-lisp:null)
                         :accessor struct-shape-connector-status :shape
                         "ConnectorStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status-reason :initarg :status-reason :initform
                         common-lisp:nil :type
                         (common-lisp:or connector-status-reason
                                         common-lisp:null)
                         :accessor struct-shape-connector-status-reason :shape
                         "ConnectorStatusReason" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (updated-at :initarg :updated-at :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-connector-updated-at :shape "Timestamp"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (vpc-information :initarg :vpc-information :initform
                         common-lisp:nil :type
                         (common-lisp:or vpc-information common-lisp:null)
                         :accessor struct-shape-connector-vpc-information
                         :shape "VpcInformation" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-connector
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'connector
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'connector 'make-connector))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input connector))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input connector))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'certificate-authority-arn))
      (common-lisp:list
       (common-lisp:cons "CertificateAuthorityArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'certificate-enrollment-policy-server-endpoint))
      (common-lisp:list
       (common-lisp:cons "CertificateEnrollmentPolicyServerEndpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "CreatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directory-id))
      (common-lisp:list
       (common-lisp:cons "DirectoryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-reason))
      (common-lisp:list
       (common-lisp:cons "StatusReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "UpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-information))
      (common-lisp:list
       (common-lisp:cons "VpcInformation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input connector))
   common-lisp:nil))
(common-lisp:deftype connector-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype connector-list ()
   '(trivial-types:proper-list connector-summary))
 (common-lisp:defun make-connector-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list connector-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype connector-status () 'common-lisp:string)
(common-lisp:deftype connector-status-reason () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass connector-summary common-lisp:nil
                       ((arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or connector-arn common-lisp:null)
                         :accessor struct-shape-connector-summary-arn :shape
                         "ConnectorArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (certificate-authority-arn :initarg
                         :certificate-authority-arn :initform common-lisp:nil
                         :type
                         (common-lisp:or certificate-authority-arn
                                         common-lisp:null)
                         :accessor
                         struct-shape-connector-summary-certificate-authority-arn
                         :shape "CertificateAuthorityArn" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (certificate-enrollment-policy-server-endpoint :initarg
                         :certificate-enrollment-policy-server-endpoint
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-connector-summary-certificate-enrollment-policy-server-endpoint
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (created-at :initarg :created-at :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-connector-summary-created-at :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (directory-id :initarg :directory-id :initform
                         common-lisp:nil :type
                         (common-lisp:or directory-id common-lisp:null)
                         :accessor struct-shape-connector-summary-directory-id
                         :shape "DirectoryId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or connector-status common-lisp:null)
                         :accessor struct-shape-connector-summary-status :shape
                         "ConnectorStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status-reason :initarg :status-reason :initform
                         common-lisp:nil :type
                         (common-lisp:or connector-status-reason
                                         common-lisp:null)
                         :accessor struct-shape-connector-summary-status-reason
                         :shape "ConnectorStatusReason" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (updated-at :initarg :updated-at :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-connector-summary-updated-at :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (vpc-information :initarg :vpc-information :initform
                         common-lisp:nil :type
                         (common-lisp:or vpc-information common-lisp:null)
                         :accessor
                         struct-shape-connector-summary-vpc-information :shape
                         "VpcInformation" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-connector-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'connector-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'connector-summary 'make-connector-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input connector-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input connector-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'certificate-authority-arn))
      (common-lisp:list
       (common-lisp:cons "CertificateAuthorityArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'certificate-enrollment-policy-server-endpoint))
      (common-lisp:list
       (common-lisp:cons "CertificateEnrollmentPolicyServerEndpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "CreatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directory-id))
      (common-lisp:list
       (common-lisp:cons "DirectoryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-reason))
      (common-lisp:list
       (common-lisp:cons "StatusReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "UpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-information))
      (common-lisp:list
       (common-lisp:cons "VpcInformation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input connector-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-connector-request common-lisp:nil
                       ((certificate-authority-arn :initarg
                         :certificate-authority-arn :initform
                         (common-lisp:error
                          ":certificate-authority-arn is required")
                         :type
                         (common-lisp:or certificate-authority-arn
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-connector-request-certificate-authority-arn
                         :shape "CertificateAuthorityArn" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor
                         struct-shape-create-connector-request-client-token
                         :shape "ClientToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (directory-id :initarg :directory-id :initform
                         (common-lisp:error ":directory-id is required") :type
                         (common-lisp:or directory-id common-lisp:null)
                         :accessor
                         struct-shape-create-connector-request-directory-id
                         :shape "DirectoryId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         struct-shape-create-connector-request-tags :shape
                         "Tags" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (vpc-information :initarg :vpc-information :initform
                         (common-lisp:error ":vpc-information is required")
                         :type
                         (common-lisp:or vpc-information common-lisp:null)
                         :accessor
                         struct-shape-create-connector-request-vpc-information
                         :shape "VpcInformation" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-connector-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-connector-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-connector-request 'make-create-connector-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-connector-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-connector-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'certificate-authority-arn))
      (common-lisp:list
       (common-lisp:cons "CertificateAuthorityArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "ClientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directory-id))
      (common-lisp:list
       (common-lisp:cons "DirectoryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-information))
      (common-lisp:list
       (common-lisp:cons "VpcInformation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-connector-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-connector-response common-lisp:nil
                       ((connector-arn :initarg :connector-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or connector-arn common-lisp:null)
                         :accessor
                         struct-shape-create-connector-response-connector-arn
                         :shape "ConnectorArn" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-connector-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-connector-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-connector-response
                    'make-create-connector-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-connector-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-connector-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connector-arn))
      (common-lisp:list
       (common-lisp:cons "ConnectorArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-connector-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-directory-registration-request common-lisp:nil
                       ((client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor
                         struct-shape-create-directory-registration-request-client-token
                         :shape "ClientToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (directory-id :initarg :directory-id :initform
                         (common-lisp:error ":directory-id is required") :type
                         (common-lisp:or directory-id common-lisp:null)
                         :accessor
                         struct-shape-create-directory-registration-request-directory-id
                         :shape "DirectoryId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         struct-shape-create-directory-registration-request-tags
                         :shape "Tags" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-directory-registration-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-directory-registration-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-directory-registration-request
                    'make-create-directory-registration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-directory-registration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-directory-registration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "ClientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directory-id))
      (common-lisp:list
       (common-lisp:cons "DirectoryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-directory-registration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-directory-registration-response common-lisp:nil
                       ((directory-registration-arn :initarg
                         :directory-registration-arn :initform common-lisp:nil
                         :type
                         (common-lisp:or directory-registration-arn
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-directory-registration-response-directory-registration-arn
                         :shape "DirectoryRegistrationArn" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-directory-registration-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-directory-registration-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-directory-registration-response
                    'make-create-directory-registration-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-directory-registration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-directory-registration-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'directory-registration-arn))
      (common-lisp:list
       (common-lisp:cons "DirectoryRegistrationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-directory-registration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-service-principal-name-request common-lisp:nil
                       ((client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor
                         struct-shape-create-service-principal-name-request-client-token
                         :shape "ClientToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (connector-arn :initarg :connector-arn :initform
                         (common-lisp:error ":connector-arn is required") :type
                         (common-lisp:or connector-arn common-lisp:null)
                         :accessor
                         struct-shape-create-service-principal-name-request-connector-arn
                         :shape "ConnectorArn" :location "uri" :location-name
                         "ConnectorArn")
                        (directory-registration-arn :initarg
                         :directory-registration-arn :initform
                         (common-lisp:error
                          ":directory-registration-arn is required")
                         :type
                         (common-lisp:or directory-registration-arn
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-service-principal-name-request-directory-registration-arn
                         :shape "DirectoryRegistrationArn" :location "uri"
                         :location-name "DirectoryRegistrationArn"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-service-principal-name-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-service-principal-name-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-service-principal-name-request
                    'make-create-service-principal-name-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-service-principal-name-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-service-principal-name-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "ClientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-service-principal-name-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-template-group-access-control-entry-request
                       common-lisp:nil
                       ((access-rights :initarg :access-rights :initform
                         (common-lisp:error ":access-rights is required") :type
                         (common-lisp:or access-rights common-lisp:null)
                         :accessor
                         struct-shape-create-template-group-access-control-entry-request-access-rights
                         :shape "AccessRights" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor
                         struct-shape-create-template-group-access-control-entry-request-client-token
                         :shape "ClientToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (group-display-name :initarg :group-display-name
                         :initform
                         (common-lisp:error ":group-display-name is required")
                         :type (common-lisp:or display-name common-lisp:null)
                         :accessor
                         struct-shape-create-template-group-access-control-entry-request-group-display-name
                         :shape "DisplayName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (group-security-identifier :initarg
                         :group-security-identifier :initform
                         (common-lisp:error
                          ":group-security-identifier is required")
                         :type
                         (common-lisp:or group-security-identifier
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-template-group-access-control-entry-request-group-security-identifier
                         :shape "GroupSecurityIdentifier" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (template-arn :initarg :template-arn :initform
                         (common-lisp:error ":template-arn is required") :type
                         (common-lisp:or template-arn common-lisp:null)
                         :accessor
                         struct-shape-create-template-group-access-control-entry-request-template-arn
                         :shape "TemplateArn" :location "uri" :location-name
                         "TemplateArn"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-template-group-access-control-entry-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-template-group-access-control-entry-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-template-group-access-control-entry-request
                    'make-create-template-group-access-control-entry-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-template-group-access-control-entry-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-template-group-access-control-entry-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-rights))
      (common-lisp:list
       (common-lisp:cons "AccessRights"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "ClientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-display-name))
      (common-lisp:list
       (common-lisp:cons "GroupDisplayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'group-security-identifier))
      (common-lisp:list
       (common-lisp:cons "GroupSecurityIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-template-group-access-control-entry-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-template-request common-lisp:nil
                       ((client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor
                         struct-shape-create-template-request-client-token
                         :shape "ClientToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (connector-arn :initarg :connector-arn :initform
                         (common-lisp:error ":connector-arn is required") :type
                         (common-lisp:or connector-arn common-lisp:null)
                         :accessor
                         struct-shape-create-template-request-connector-arn
                         :shape "ConnectorArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (definition :initarg :definition :initform
                         (common-lisp:error ":definition is required") :type
                         (common-lisp:or template-definition common-lisp:null)
                         :accessor
                         struct-shape-create-template-request-definition :shape
                         "TemplateDefinition" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or template-name common-lisp:null)
                         :accessor struct-shape-create-template-request-name
                         :shape "TemplateName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         struct-shape-create-template-request-tags :shape
                         "Tags" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-template-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-template-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-template-request 'make-create-template-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-template-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-template-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "ClientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connector-arn))
      (common-lisp:list
       (common-lisp:cons "ConnectorArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'definition))
      (common-lisp:list
       (common-lisp:cons "Definition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-template-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-template-response common-lisp:nil
                       ((template-arn :initarg :template-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or template-arn common-lisp:null)
                         :accessor
                         struct-shape-create-template-response-template-arn
                         :shape "TemplateArn" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-template-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-template-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-template-response 'make-create-template-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-template-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-template-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-arn))
      (common-lisp:list
       (common-lisp:cons "TemplateArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-template-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype crypto-providers-list ()
   '(trivial-types:proper-list crypto-providers-list-member-string))
 (common-lisp:defun make-crypto-providers-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            crypto-providers-list-member-string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype crypto-providers-list-member-string () 'common-lisp:string)
(common-lisp:deftype custom-object-identifier () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass delete-connector-request common-lisp:nil
                       ((connector-arn :initarg :connector-arn :initform
                         (common-lisp:error ":connector-arn is required") :type
                         (common-lisp:or connector-arn common-lisp:null)
                         :accessor
                         struct-shape-delete-connector-request-connector-arn
                         :shape "ConnectorArn" :location "uri" :location-name
                         "ConnectorArn"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-connector-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-connector-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-connector-request 'make-delete-connector-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-connector-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-connector-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-connector-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-directory-registration-request common-lisp:nil
                       ((directory-registration-arn :initarg
                         :directory-registration-arn :initform
                         (common-lisp:error
                          ":directory-registration-arn is required")
                         :type
                         (common-lisp:or directory-registration-arn
                                         common-lisp:null)
                         :accessor
                         struct-shape-delete-directory-registration-request-directory-registration-arn
                         :shape "DirectoryRegistrationArn" :location "uri"
                         :location-name "DirectoryRegistrationArn"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-directory-registration-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-directory-registration-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-directory-registration-request
                    'make-delete-directory-registration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-directory-registration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-directory-registration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-directory-registration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-service-principal-name-request common-lisp:nil
                       ((connector-arn :initarg :connector-arn :initform
                         (common-lisp:error ":connector-arn is required") :type
                         (common-lisp:or connector-arn common-lisp:null)
                         :accessor
                         struct-shape-delete-service-principal-name-request-connector-arn
                         :shape "ConnectorArn" :location "uri" :location-name
                         "ConnectorArn")
                        (directory-registration-arn :initarg
                         :directory-registration-arn :initform
                         (common-lisp:error
                          ":directory-registration-arn is required")
                         :type
                         (common-lisp:or directory-registration-arn
                                         common-lisp:null)
                         :accessor
                         struct-shape-delete-service-principal-name-request-directory-registration-arn
                         :shape "DirectoryRegistrationArn" :location "uri"
                         :location-name "DirectoryRegistrationArn"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-service-principal-name-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-service-principal-name-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-service-principal-name-request
                    'make-delete-service-principal-name-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-service-principal-name-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-service-principal-name-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-service-principal-name-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-template-group-access-control-entry-request
                       common-lisp:nil
                       ((group-security-identifier :initarg
                         :group-security-identifier :initform
                         (common-lisp:error
                          ":group-security-identifier is required")
                         :type
                         (common-lisp:or group-security-identifier
                                         common-lisp:null)
                         :accessor
                         struct-shape-delete-template-group-access-control-entry-request-group-security-identifier
                         :shape "GroupSecurityIdentifier" :location "uri"
                         :location-name "GroupSecurityIdentifier")
                        (template-arn :initarg :template-arn :initform
                         (common-lisp:error ":template-arn is required") :type
                         (common-lisp:or template-arn common-lisp:null)
                         :accessor
                         struct-shape-delete-template-group-access-control-entry-request-template-arn
                         :shape "TemplateArn" :location "uri" :location-name
                         "TemplateArn"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-template-group-access-control-entry-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-template-group-access-control-entry-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-template-group-access-control-entry-request
                    'make-delete-template-group-access-control-entry-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-template-group-access-control-entry-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-template-group-access-control-entry-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-template-group-access-control-entry-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-template-request common-lisp:nil
                       ((template-arn :initarg :template-arn :initform
                         (common-lisp:error ":template-arn is required") :type
                         (common-lisp:or template-arn common-lisp:null)
                         :accessor
                         struct-shape-delete-template-request-template-arn
                         :shape "TemplateArn" :location "uri" :location-name
                         "TemplateArn"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-template-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-template-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-template-request 'make-delete-template-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-template-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-template-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-template-request))
   common-lisp:nil))
(common-lisp:deftype directory-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass directory-registration common-lisp:nil
                       ((arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or directory-registration-arn
                                         common-lisp:null)
                         :accessor struct-shape-directory-registration-arn
                         :shape "DirectoryRegistrationArn" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (created-at :initarg :created-at :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-directory-registration-created-at :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (directory-id :initarg :directory-id :initform
                         common-lisp:nil :type
                         (common-lisp:or directory-id common-lisp:null)
                         :accessor
                         struct-shape-directory-registration-directory-id
                         :shape "DirectoryId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or directory-registration-status
                                         common-lisp:null)
                         :accessor struct-shape-directory-registration-status
                         :shape "DirectoryRegistrationStatus" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (status-reason :initarg :status-reason :initform
                         common-lisp:nil :type
                         (common-lisp:or directory-registration-status-reason
                                         common-lisp:null)
                         :accessor
                         struct-shape-directory-registration-status-reason
                         :shape "DirectoryRegistrationStatusReason" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (updated-at :initarg :updated-at :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-directory-registration-updated-at :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-directory-registration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'directory-registration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'directory-registration 'make-directory-registration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          directory-registration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          directory-registration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "CreatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directory-id))
      (common-lisp:list
       (common-lisp:cons "DirectoryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-reason))
      (common-lisp:list
       (common-lisp:cons "StatusReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "UpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          directory-registration))
   common-lisp:nil))
(common-lisp:deftype directory-registration-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype directory-registration-list ()
   '(trivial-types:proper-list directory-registration-summary))
 (common-lisp:defun make-directory-registration-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            directory-registration-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype directory-registration-status () 'common-lisp:string)
(common-lisp:deftype directory-registration-status-reason ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass directory-registration-summary common-lisp:nil
                       ((arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or directory-registration-arn
                                         common-lisp:null)
                         :accessor
                         struct-shape-directory-registration-summary-arn :shape
                         "DirectoryRegistrationArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (created-at :initarg :created-at :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-directory-registration-summary-created-at
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (directory-id :initarg :directory-id :initform
                         common-lisp:nil :type
                         (common-lisp:or directory-id common-lisp:null)
                         :accessor
                         struct-shape-directory-registration-summary-directory-id
                         :shape "DirectoryId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or directory-registration-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-directory-registration-summary-status
                         :shape "DirectoryRegistrationStatus" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (status-reason :initarg :status-reason :initform
                         common-lisp:nil :type
                         (common-lisp:or directory-registration-status-reason
                                         common-lisp:null)
                         :accessor
                         struct-shape-directory-registration-summary-status-reason
                         :shape "DirectoryRegistrationStatusReason" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (updated-at :initarg :updated-at :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-directory-registration-summary-updated-at
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-directory-registration-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'directory-registration-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'directory-registration-summary
                    'make-directory-registration-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          directory-registration-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          directory-registration-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "CreatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directory-id))
      (common-lisp:list
       (common-lisp:cons "DirectoryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-reason))
      (common-lisp:list
       (common-lisp:cons "StatusReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "UpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          directory-registration-summary))
   common-lisp:nil))
(common-lisp:deftype display-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass enrollment-flags-v2 common-lisp:nil
                       ((enable-key-reuse-on-nt-token-keyset-storage-full
                         :initarg
                         :enable-key-reuse-on-nt-token-keyset-storage-full
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-enrollment-flags-v2-enable-key-reuse-on-nt-token-keyset-storage-full
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (include-symmetric-algorithms :initarg
                         :include-symmetric-algorithms :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-enrollment-flags-v2-include-symmetric-algorithms
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (no-security-extension :initarg :no-security-extension
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-enrollment-flags-v2-no-security-extension
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (remove-invalid-certificate-from-personal-store
                         :initarg
                         :remove-invalid-certificate-from-personal-store
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-enrollment-flags-v2-remove-invalid-certificate-from-personal-store
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (user-interaction-required :initarg
                         :user-interaction-required :initform common-lisp:nil
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         struct-shape-enrollment-flags-v2-user-interaction-required
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-enrollment-flags-v2
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'enrollment-flags-v2
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'enrollment-flags-v2 'make-enrollment-flags-v2))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input enrollment-flags-v2))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input enrollment-flags-v2))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-key-reuse-on-nt-token-keyset-storage-full))
      (common-lisp:list
       (common-lisp:cons "EnableKeyReuseOnNtTokenKeysetStorageFull"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'include-symmetric-algorithms))
      (common-lisp:list
       (common-lisp:cons "IncludeSymmetricAlgorithms"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'no-security-extension))
      (common-lisp:list
       (common-lisp:cons "NoSecurityExtension"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'remove-invalid-certificate-from-personal-store))
      (common-lisp:list
       (common-lisp:cons "RemoveInvalidCertificateFromPersonalStore"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'user-interaction-required))
      (common-lisp:list
       (common-lisp:cons "UserInteractionRequired"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input enrollment-flags-v2))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass enrollment-flags-v3 common-lisp:nil
                       ((enable-key-reuse-on-nt-token-keyset-storage-full
                         :initarg
                         :enable-key-reuse-on-nt-token-keyset-storage-full
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-enrollment-flags-v3-enable-key-reuse-on-nt-token-keyset-storage-full
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (include-symmetric-algorithms :initarg
                         :include-symmetric-algorithms :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-enrollment-flags-v3-include-symmetric-algorithms
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (no-security-extension :initarg :no-security-extension
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-enrollment-flags-v3-no-security-extension
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (remove-invalid-certificate-from-personal-store
                         :initarg
                         :remove-invalid-certificate-from-personal-store
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-enrollment-flags-v3-remove-invalid-certificate-from-personal-store
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (user-interaction-required :initarg
                         :user-interaction-required :initform common-lisp:nil
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         struct-shape-enrollment-flags-v3-user-interaction-required
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-enrollment-flags-v3
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'enrollment-flags-v3
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'enrollment-flags-v3 'make-enrollment-flags-v3))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input enrollment-flags-v3))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input enrollment-flags-v3))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-key-reuse-on-nt-token-keyset-storage-full))
      (common-lisp:list
       (common-lisp:cons "EnableKeyReuseOnNtTokenKeysetStorageFull"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'include-symmetric-algorithms))
      (common-lisp:list
       (common-lisp:cons "IncludeSymmetricAlgorithms"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'no-security-extension))
      (common-lisp:list
       (common-lisp:cons "NoSecurityExtension"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'remove-invalid-certificate-from-personal-store))
      (common-lisp:list
       (common-lisp:cons "RemoveInvalidCertificateFromPersonalStore"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'user-interaction-required))
      (common-lisp:list
       (common-lisp:cons "UserInteractionRequired"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input enrollment-flags-v3))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass enrollment-flags-v4 common-lisp:nil
                       ((enable-key-reuse-on-nt-token-keyset-storage-full
                         :initarg
                         :enable-key-reuse-on-nt-token-keyset-storage-full
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-enrollment-flags-v4-enable-key-reuse-on-nt-token-keyset-storage-full
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (include-symmetric-algorithms :initarg
                         :include-symmetric-algorithms :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-enrollment-flags-v4-include-symmetric-algorithms
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (no-security-extension :initarg :no-security-extension
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-enrollment-flags-v4-no-security-extension
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (remove-invalid-certificate-from-personal-store
                         :initarg
                         :remove-invalid-certificate-from-personal-store
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-enrollment-flags-v4-remove-invalid-certificate-from-personal-store
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (user-interaction-required :initarg
                         :user-interaction-required :initform common-lisp:nil
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         struct-shape-enrollment-flags-v4-user-interaction-required
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-enrollment-flags-v4
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'enrollment-flags-v4
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'enrollment-flags-v4 'make-enrollment-flags-v4))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input enrollment-flags-v4))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input enrollment-flags-v4))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-key-reuse-on-nt-token-keyset-storage-full))
      (common-lisp:list
       (common-lisp:cons "EnableKeyReuseOnNtTokenKeysetStorageFull"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'include-symmetric-algorithms))
      (common-lisp:list
       (common-lisp:cons "IncludeSymmetricAlgorithms"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'no-security-extension))
      (common-lisp:list
       (common-lisp:cons "NoSecurityExtension"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'remove-invalid-certificate-from-personal-store))
      (common-lisp:list
       (common-lisp:cons "RemoveInvalidCertificateFromPersonalStore"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'user-interaction-required))
      (common-lisp:list
       (common-lisp:cons "UserInteractionRequired"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input enrollment-flags-v4))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass extensions-v2 common-lisp:nil
                       ((application-policies :initarg :application-policies
                         :initform common-lisp:nil :type
                         (common-lisp:or application-policies common-lisp:null)
                         :accessor
                         struct-shape-extensions-v2-application-policies :shape
                         "ApplicationPolicies" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (key-usage :initarg :key-usage :initform
                         (common-lisp:error ":key-usage is required") :type
                         (common-lisp:or key-usage common-lisp:null) :accessor
                         struct-shape-extensions-v2-key-usage :shape "KeyUsage"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-extensions-v2
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'extensions-v2
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'extensions-v2 'make-extensions-v2))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input extensions-v2))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input extensions-v2))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'application-policies))
      (common-lisp:list
       (common-lisp:cons "ApplicationPolicies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-usage))
      (common-lisp:list
       (common-lisp:cons "KeyUsage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input extensions-v2))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass extensions-v3 common-lisp:nil
                       ((application-policies :initarg :application-policies
                         :initform common-lisp:nil :type
                         (common-lisp:or application-policies common-lisp:null)
                         :accessor
                         struct-shape-extensions-v3-application-policies :shape
                         "ApplicationPolicies" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (key-usage :initarg :key-usage :initform
                         (common-lisp:error ":key-usage is required") :type
                         (common-lisp:or key-usage common-lisp:null) :accessor
                         struct-shape-extensions-v3-key-usage :shape "KeyUsage"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-extensions-v3
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'extensions-v3
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'extensions-v3 'make-extensions-v3))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input extensions-v3))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input extensions-v3))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'application-policies))
      (common-lisp:list
       (common-lisp:cons "ApplicationPolicies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-usage))
      (common-lisp:list
       (common-lisp:cons "KeyUsage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input extensions-v3))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass extensions-v4 common-lisp:nil
                       ((application-policies :initarg :application-policies
                         :initform common-lisp:nil :type
                         (common-lisp:or application-policies common-lisp:null)
                         :accessor
                         struct-shape-extensions-v4-application-policies :shape
                         "ApplicationPolicies" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (key-usage :initarg :key-usage :initform
                         (common-lisp:error ":key-usage is required") :type
                         (common-lisp:or key-usage common-lisp:null) :accessor
                         struct-shape-extensions-v4-key-usage :shape "KeyUsage"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-extensions-v4
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'extensions-v4
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'extensions-v4 'make-extensions-v4))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input extensions-v4))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input extensions-v4))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'application-policies))
      (common-lisp:list
       (common-lisp:cons "ApplicationPolicies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-usage))
      (common-lisp:list
       (common-lisp:cons "KeyUsage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input extensions-v4))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass general-flags-v2 common-lisp:nil
                       ((auto-enrollment :initarg :auto-enrollment :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-general-flags-v2-auto-enrollment :shape
                         "Boolean" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (machine-type :initarg :machine-type :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-general-flags-v2-machine-type :shape
                         "Boolean" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-general-flags-v2
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'general-flags-v2
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'general-flags-v2 'make-general-flags-v2))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input general-flags-v2))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input general-flags-v2))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auto-enrollment))
      (common-lisp:list
       (common-lisp:cons "AutoEnrollment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'machine-type))
      (common-lisp:list
       (common-lisp:cons "MachineType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input general-flags-v2))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass general-flags-v3 common-lisp:nil
                       ((auto-enrollment :initarg :auto-enrollment :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-general-flags-v3-auto-enrollment :shape
                         "Boolean" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (machine-type :initarg :machine-type :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-general-flags-v3-machine-type :shape
                         "Boolean" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-general-flags-v3
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'general-flags-v3
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'general-flags-v3 'make-general-flags-v3))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input general-flags-v3))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input general-flags-v3))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auto-enrollment))
      (common-lisp:list
       (common-lisp:cons "AutoEnrollment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'machine-type))
      (common-lisp:list
       (common-lisp:cons "MachineType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input general-flags-v3))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass general-flags-v4 common-lisp:nil
                       ((auto-enrollment :initarg :auto-enrollment :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-general-flags-v4-auto-enrollment :shape
                         "Boolean" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (machine-type :initarg :machine-type :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-general-flags-v4-machine-type :shape
                         "Boolean" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-general-flags-v4
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'general-flags-v4
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'general-flags-v4 'make-general-flags-v4))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input general-flags-v4))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input general-flags-v4))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auto-enrollment))
      (common-lisp:list
       (common-lisp:cons "AutoEnrollment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'machine-type))
      (common-lisp:list
       (common-lisp:cons "MachineType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input general-flags-v4))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-connector-request common-lisp:nil
                       ((connector-arn :initarg :connector-arn :initform
                         (common-lisp:error ":connector-arn is required") :type
                         (common-lisp:or connector-arn common-lisp:null)
                         :accessor
                         struct-shape-get-connector-request-connector-arn
                         :shape "ConnectorArn" :location "uri" :location-name
                         "ConnectorArn"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-connector-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-connector-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-connector-request 'make-get-connector-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-connector-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-connector-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-connector-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-connector-response common-lisp:nil
                       ((connector :initarg :connector :initform
                         common-lisp:nil :type
                         (common-lisp:or connector common-lisp:null) :accessor
                         struct-shape-get-connector-response-connector :shape
                         "Connector" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-connector-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-connector-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-connector-response 'make-get-connector-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-connector-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-connector-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connector))
      (common-lisp:list
       (common-lisp:cons "Connector"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-connector-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-directory-registration-request common-lisp:nil
                       ((directory-registration-arn :initarg
                         :directory-registration-arn :initform
                         (common-lisp:error
                          ":directory-registration-arn is required")
                         :type
                         (common-lisp:or directory-registration-arn
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-directory-registration-request-directory-registration-arn
                         :shape "DirectoryRegistrationArn" :location "uri"
                         :location-name "DirectoryRegistrationArn"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-directory-registration-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-directory-registration-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-directory-registration-request
                    'make-get-directory-registration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-directory-registration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-directory-registration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-directory-registration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-directory-registration-response common-lisp:nil
                       ((directory-registration :initarg
                         :directory-registration :initform common-lisp:nil
                         :type
                         (common-lisp:or directory-registration
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-directory-registration-response-directory-registration
                         :shape "DirectoryRegistration" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-directory-registration-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-directory-registration-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-directory-registration-response
                    'make-get-directory-registration-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-directory-registration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-directory-registration-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'directory-registration))
      (common-lisp:list
       (common-lisp:cons "DirectoryRegistration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-directory-registration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-service-principal-name-request common-lisp:nil
                       ((connector-arn :initarg :connector-arn :initform
                         (common-lisp:error ":connector-arn is required") :type
                         (common-lisp:or connector-arn common-lisp:null)
                         :accessor
                         struct-shape-get-service-principal-name-request-connector-arn
                         :shape "ConnectorArn" :location "uri" :location-name
                         "ConnectorArn")
                        (directory-registration-arn :initarg
                         :directory-registration-arn :initform
                         (common-lisp:error
                          ":directory-registration-arn is required")
                         :type
                         (common-lisp:or directory-registration-arn
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-service-principal-name-request-directory-registration-arn
                         :shape "DirectoryRegistrationArn" :location "uri"
                         :location-name "DirectoryRegistrationArn"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-service-principal-name-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-service-principal-name-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-service-principal-name-request
                    'make-get-service-principal-name-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-service-principal-name-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-service-principal-name-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-service-principal-name-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-service-principal-name-response common-lisp:nil
                       ((service-principal-name :initarg
                         :service-principal-name :initform common-lisp:nil
                         :type
                         (common-lisp:or service-principal-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-service-principal-name-response-service-principal-name
                         :shape "ServicePrincipalName" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-service-principal-name-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-service-principal-name-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-service-principal-name-response
                    'make-get-service-principal-name-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-service-principal-name-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-service-principal-name-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'service-principal-name))
      (common-lisp:list
       (common-lisp:cons "ServicePrincipalName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-service-principal-name-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-template-group-access-control-entry-request
                       common-lisp:nil
                       ((group-security-identifier :initarg
                         :group-security-identifier :initform
                         (common-lisp:error
                          ":group-security-identifier is required")
                         :type
                         (common-lisp:or group-security-identifier
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-template-group-access-control-entry-request-group-security-identifier
                         :shape "GroupSecurityIdentifier" :location "uri"
                         :location-name "GroupSecurityIdentifier")
                        (template-arn :initarg :template-arn :initform
                         (common-lisp:error ":template-arn is required") :type
                         (common-lisp:or template-arn common-lisp:null)
                         :accessor
                         struct-shape-get-template-group-access-control-entry-request-template-arn
                         :shape "TemplateArn" :location "uri" :location-name
                         "TemplateArn"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-template-group-access-control-entry-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-template-group-access-control-entry-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-template-group-access-control-entry-request
                    'make-get-template-group-access-control-entry-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-template-group-access-control-entry-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-template-group-access-control-entry-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-template-group-access-control-entry-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-template-group-access-control-entry-response
                       common-lisp:nil
                       ((access-control-entry :initarg :access-control-entry
                         :initform common-lisp:nil :type
                         (common-lisp:or access-control-entry common-lisp:null)
                         :accessor
                         struct-shape-get-template-group-access-control-entry-response-access-control-entry
                         :shape "AccessControlEntry" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-template-group-access-control-entry-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-template-group-access-control-entry-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-template-group-access-control-entry-response
                    'make-get-template-group-access-control-entry-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-template-group-access-control-entry-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-template-group-access-control-entry-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'access-control-entry))
      (common-lisp:list
       (common-lisp:cons "AccessControlEntry"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-template-group-access-control-entry-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-template-request common-lisp:nil
                       ((template-arn :initarg :template-arn :initform
                         (common-lisp:error ":template-arn is required") :type
                         (common-lisp:or template-arn common-lisp:null)
                         :accessor
                         struct-shape-get-template-request-template-arn :shape
                         "TemplateArn" :location "uri" :location-name
                         "TemplateArn"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-template-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-template-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-template-request 'make-get-template-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-template-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-template-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-template-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-template-response common-lisp:nil
                       ((template :initarg :template :initform common-lisp:nil
                         :type (common-lisp:or template common-lisp:null)
                         :accessor struct-shape-get-template-response-template
                         :shape "Template" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-template-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-template-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-template-response 'make-get-template-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-template-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-template-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template))
      (common-lisp:list
       (common-lisp:cons "Template"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-template-response))
   common-lisp:nil))
(common-lisp:deftype group-security-identifier () 'common-lisp:string)
(common-lisp:deftype hash-algorithm () 'common-lisp:string)
(common-lisp:deftype integer () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition internal-server-exception
     (pca-connector-ad-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       internal-server-exception-message)))
 (common-lisp:export
  (common-lisp:list 'internal-server-exception
                    'internal-server-exception-message)))
(common-lisp:deftype key-spec () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass key-usage common-lisp:nil
                       ((critical :initarg :critical :initform common-lisp:nil
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor struct-shape-key-usage-critical :shape
                         "Boolean" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (usage-flags :initarg :usage-flags :initform
                         (common-lisp:error ":usage-flags is required") :type
                         (common-lisp:or key-usage-flags common-lisp:null)
                         :accessor struct-shape-key-usage-usage-flags :shape
                         "KeyUsageFlags" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-key-usage
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'key-usage
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'key-usage 'make-key-usage))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input key-usage))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input key-usage))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'critical))
      (common-lisp:list
       (common-lisp:cons "Critical"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'usage-flags))
      (common-lisp:list
       (common-lisp:cons "UsageFlags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input key-usage))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass key-usage-flags common-lisp:nil
                       ((data-encipherment :initarg :data-encipherment
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-key-usage-flags-data-encipherment :shape
                         "Boolean" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (digital-signature :initarg :digital-signature
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-key-usage-flags-digital-signature :shape
                         "Boolean" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (key-agreement :initarg :key-agreement :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-key-usage-flags-key-agreement :shape
                         "Boolean" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (key-encipherment :initarg :key-encipherment :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-key-usage-flags-key-encipherment :shape
                         "Boolean" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (non-repudiation :initarg :non-repudiation :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-key-usage-flags-non-repudiation :shape
                         "Boolean" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-key-usage-flags
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'key-usage-flags
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'key-usage-flags 'make-key-usage-flags))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input key-usage-flags))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input key-usage-flags))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-encipherment))
      (common-lisp:list
       (common-lisp:cons "DataEncipherment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'digital-signature))
      (common-lisp:list
       (common-lisp:cons "DigitalSignature"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-agreement))
      (common-lisp:list
       (common-lisp:cons "KeyAgreement"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-encipherment))
      (common-lisp:list
       (common-lisp:cons "KeyEncipherment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'non-repudiation))
      (common-lisp:list
       (common-lisp:cons "NonRepudiation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input key-usage-flags))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass key-usage-property common-lisp:nil
                       ((property-flags :initarg :property-flags :initform
                         common-lisp:nil :type
                         (common-lisp:or key-usage-property-flags
                                         common-lisp:null)
                         :accessor
                         struct-shape-key-usage-property-property-flags :shape
                         "KeyUsagePropertyFlags" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (property-type :initarg :property-type :initform
                         common-lisp:nil :type
                         (common-lisp:or key-usage-property-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-key-usage-property-property-type :shape
                         "KeyUsagePropertyType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-key-usage-property
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'key-usage-property
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'key-usage-property 'make-key-usage-property))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input key-usage-property))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input key-usage-property))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'property-flags))
      (common-lisp:list
       (common-lisp:cons "PropertyFlags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'property-type))
      (common-lisp:list
       (common-lisp:cons "PropertyType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input key-usage-property))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass key-usage-property-flags common-lisp:nil
                       ((decrypt :initarg :decrypt :initform common-lisp:nil
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         struct-shape-key-usage-property-flags-decrypt :shape
                         "Boolean" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (key-agreement :initarg :key-agreement :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-key-usage-property-flags-key-agreement
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (sign :initarg :sign :initform common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-key-usage-property-flags-sign :shape
                         "Boolean" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-key-usage-property-flags
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'key-usage-property-flags
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'key-usage-property-flags 'make-key-usage-property-flags))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          key-usage-property-flags))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          key-usage-property-flags))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'decrypt))
      (common-lisp:list
       (common-lisp:cons "Decrypt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-agreement))
      (common-lisp:list
       (common-lisp:cons "KeyAgreement"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sign))
      (common-lisp:list
       (common-lisp:cons "Sign"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          key-usage-property-flags))
   common-lisp:nil))
(common-lisp:deftype key-usage-property-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass list-connectors-request common-lisp:nil
                       ((max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-connectors-request-max-results
                         :shape "MaxResults" :location "querystring"
                         :location-name "MaxResults")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-connectors-request-next-token :shape
                         "NextToken" :location "querystring" :location-name
                         "NextToken"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-connectors-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-connectors-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-connectors-request 'make-list-connectors-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-connectors-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-connectors-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-connectors-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-connectors-response common-lisp:nil
                       ((connectors :initarg :connectors :initform
                         common-lisp:nil :type
                         (common-lisp:or connector-list common-lisp:null)
                         :accessor
                         struct-shape-list-connectors-response-connectors
                         :shape "ConnectorList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-connectors-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-connectors-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-connectors-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-connectors-response 'make-list-connectors-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-connectors-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-connectors-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connectors))
      (common-lisp:list
       (common-lisp:cons "Connectors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-connectors-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-directory-registrations-request common-lisp:nil
                       ((max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-directory-registrations-request-max-results
                         :shape "MaxResults" :location "querystring"
                         :location-name "MaxResults")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-directory-registrations-request-next-token
                         :shape "NextToken" :location "querystring"
                         :location-name "NextToken"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-directory-registrations-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-directory-registrations-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-directory-registrations-request
                    'make-list-directory-registrations-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-directory-registrations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-directory-registrations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-directory-registrations-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-directory-registrations-response common-lisp:nil
                       ((directory-registrations :initarg
                         :directory-registrations :initform common-lisp:nil
                         :type
                         (common-lisp:or directory-registration-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-directory-registrations-response-directory-registrations
                         :shape "DirectoryRegistrationList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-directory-registrations-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-directory-registrations-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-directory-registrations-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-directory-registrations-response
                    'make-list-directory-registrations-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-directory-registrations-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-directory-registrations-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'directory-registrations))
      (common-lisp:list
       (common-lisp:cons "DirectoryRegistrations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-directory-registrations-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-service-principal-names-request common-lisp:nil
                       ((directory-registration-arn :initarg
                         :directory-registration-arn :initform
                         (common-lisp:error
                          ":directory-registration-arn is required")
                         :type
                         (common-lisp:or directory-registration-arn
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-service-principal-names-request-directory-registration-arn
                         :shape "DirectoryRegistrationArn" :location "uri"
                         :location-name "DirectoryRegistrationArn")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-service-principal-names-request-max-results
                         :shape "MaxResults" :location "querystring"
                         :location-name "MaxResults")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-service-principal-names-request-next-token
                         :shape "NextToken" :location "querystring"
                         :location-name "NextToken"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-service-principal-names-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-service-principal-names-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-service-principal-names-request
                    'make-list-service-principal-names-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-service-principal-names-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-service-principal-names-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-service-principal-names-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-service-principal-names-response common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-service-principal-names-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (service-principal-names :initarg
                         :service-principal-names :initform common-lisp:nil
                         :type
                         (common-lisp:or service-principal-name-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-service-principal-names-response-service-principal-names
                         :shape "ServicePrincipalNameList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-service-principal-names-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-service-principal-names-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-service-principal-names-response
                    'make-list-service-principal-names-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-service-principal-names-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-service-principal-names-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'service-principal-names))
      (common-lisp:list
       (common-lisp:cons "ServicePrincipalNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-service-principal-names-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-request common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resource-arn is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-tags-for-resource-request-resource-arn
                         :shape "String" :location "uri" :location-name
                         "ResourceArn"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-tags-for-resource-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-request
                    'make-list-tags-for-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-response common-lisp:nil
                       ((tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         struct-shape-list-tags-for-resource-response-tags
                         :shape "Tags" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-tags-for-resource-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-response
                    'make-list-tags-for-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-template-group-access-control-entries-request
                       common-lisp:nil
                       ((max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-template-group-access-control-entries-request-max-results
                         :shape "MaxResults" :location "querystring"
                         :location-name "MaxResults")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-template-group-access-control-entries-request-next-token
                         :shape "NextToken" :location "querystring"
                         :location-name "NextToken")
                        (template-arn :initarg :template-arn :initform
                         (common-lisp:error ":template-arn is required") :type
                         (common-lisp:or template-arn common-lisp:null)
                         :accessor
                         struct-shape-list-template-group-access-control-entries-request-template-arn
                         :shape "TemplateArn" :location "uri" :location-name
                         "TemplateArn"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-template-group-access-control-entries-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-template-group-access-control-entries-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-template-group-access-control-entries-request
                    'make-list-template-group-access-control-entries-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-template-group-access-control-entries-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-template-group-access-control-entries-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-template-group-access-control-entries-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-template-group-access-control-entries-response
                       common-lisp:nil
                       ((access-control-entries :initarg
                         :access-control-entries :initform common-lisp:nil
                         :type
                         (common-lisp:or access-control-entry-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-template-group-access-control-entries-response-access-control-entries
                         :shape "AccessControlEntryList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-template-group-access-control-entries-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-template-group-access-control-entries-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-template-group-access-control-entries-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-template-group-access-control-entries-response
                    'make-list-template-group-access-control-entries-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-template-group-access-control-entries-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-template-group-access-control-entries-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'access-control-entries))
      (common-lisp:list
       (common-lisp:cons "AccessControlEntries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-template-group-access-control-entries-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-templates-request common-lisp:nil
                       ((connector-arn :initarg :connector-arn :initform
                         (common-lisp:error ":connector-arn is required") :type
                         (common-lisp:or connector-arn common-lisp:null)
                         :accessor
                         struct-shape-list-templates-request-connector-arn
                         :shape "ConnectorArn" :location "querystring"
                         :location-name "ConnectorArn")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-templates-request-max-results :shape
                         "MaxResults" :location "querystring" :location-name
                         "MaxResults")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-templates-request-next-token :shape
                         "NextToken" :location "querystring" :location-name
                         "NextToken"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-templates-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-templates-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-templates-request 'make-list-templates-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-templates-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-templates-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-templates-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-templates-response common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-templates-response-next-token :shape
                         "NextToken" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (templates :initarg :templates :initform
                         common-lisp:nil :type
                         (common-lisp:or template-list common-lisp:null)
                         :accessor
                         struct-shape-list-templates-response-templates :shape
                         "TemplateList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-templates-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-templates-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-templates-response 'make-list-templates-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-templates-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-templates-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'templates))
      (common-lisp:list
       (common-lisp:cons "Templates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-templates-response))
   common-lisp:nil))
(common-lisp:deftype max-results () 'common-lisp:integer)
(common-lisp:deftype next-token () 'common-lisp:string)
(common-lisp:deftype private-key-algorithm () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass private-key-attributes-v2 common-lisp:nil
                       ((crypto-providers :initarg :crypto-providers :initform
                         common-lisp:nil :type
                         (common-lisp:or crypto-providers-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-private-key-attributes-v2-crypto-providers
                         :shape "CryptoProvidersList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (key-spec :initarg :key-spec :initform
                         (common-lisp:error ":key-spec is required") :type
                         (common-lisp:or key-spec common-lisp:null) :accessor
                         struct-shape-private-key-attributes-v2-key-spec :shape
                         "KeySpec" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (minimal-key-length :initarg :minimal-key-length
                         :initform
                         (common-lisp:error ":minimal-key-length is required")
                         :type
                         (common-lisp:or
                          private-key-attributes-v2minimal-key-length-integer
                          common-lisp:null)
                         :accessor
                         struct-shape-private-key-attributes-v2-minimal-key-length
                         :shape "PrivateKeyAttributesV2MinimalKeyLengthInteger"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-private-key-attributes-v2
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'private-key-attributes-v2
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'private-key-attributes-v2
                    'make-private-key-attributes-v2))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          private-key-attributes-v2))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          private-key-attributes-v2))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'crypto-providers))
      (common-lisp:list
       (common-lisp:cons "CryptoProviders"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-spec))
      (common-lisp:list
       (common-lisp:cons "KeySpec"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'minimal-key-length))
      (common-lisp:list
       (common-lisp:cons "MinimalKeyLength"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          private-key-attributes-v2))
   common-lisp:nil))
(common-lisp:deftype private-key-attributes-v2minimal-key-length-integer ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass private-key-attributes-v3 common-lisp:nil
                       ((algorithm :initarg :algorithm :initform
                         (common-lisp:error ":algorithm is required") :type
                         (common-lisp:or private-key-algorithm
                                         common-lisp:null)
                         :accessor
                         struct-shape-private-key-attributes-v3-algorithm
                         :shape "PrivateKeyAlgorithm" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (crypto-providers :initarg :crypto-providers :initform
                         common-lisp:nil :type
                         (common-lisp:or crypto-providers-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-private-key-attributes-v3-crypto-providers
                         :shape "CryptoProvidersList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (key-spec :initarg :key-spec :initform
                         (common-lisp:error ":key-spec is required") :type
                         (common-lisp:or key-spec common-lisp:null) :accessor
                         struct-shape-private-key-attributes-v3-key-spec :shape
                         "KeySpec" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (key-usage-property :initarg :key-usage-property
                         :initform
                         (common-lisp:error ":key-usage-property is required")
                         :type
                         (common-lisp:or key-usage-property common-lisp:null)
                         :accessor
                         struct-shape-private-key-attributes-v3-key-usage-property
                         :shape "KeyUsageProperty" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (minimal-key-length :initarg :minimal-key-length
                         :initform
                         (common-lisp:error ":minimal-key-length is required")
                         :type
                         (common-lisp:or
                          private-key-attributes-v3minimal-key-length-integer
                          common-lisp:null)
                         :accessor
                         struct-shape-private-key-attributes-v3-minimal-key-length
                         :shape "PrivateKeyAttributesV3MinimalKeyLengthInteger"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-private-key-attributes-v3
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'private-key-attributes-v3
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'private-key-attributes-v3
                    'make-private-key-attributes-v3))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          private-key-attributes-v3))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          private-key-attributes-v3))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'algorithm))
      (common-lisp:list
       (common-lisp:cons "Algorithm"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'crypto-providers))
      (common-lisp:list
       (common-lisp:cons "CryptoProviders"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-spec))
      (common-lisp:list
       (common-lisp:cons "KeySpec"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-usage-property))
      (common-lisp:list
       (common-lisp:cons "KeyUsageProperty"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'minimal-key-length))
      (common-lisp:list
       (common-lisp:cons "MinimalKeyLength"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          private-key-attributes-v3))
   common-lisp:nil))
(common-lisp:deftype private-key-attributes-v3minimal-key-length-integer ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass private-key-attributes-v4 common-lisp:nil
                       ((algorithm :initarg :algorithm :initform
                         common-lisp:nil :type
                         (common-lisp:or private-key-algorithm
                                         common-lisp:null)
                         :accessor
                         struct-shape-private-key-attributes-v4-algorithm
                         :shape "PrivateKeyAlgorithm" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (crypto-providers :initarg :crypto-providers :initform
                         common-lisp:nil :type
                         (common-lisp:or crypto-providers-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-private-key-attributes-v4-crypto-providers
                         :shape "CryptoProvidersList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (key-spec :initarg :key-spec :initform
                         (common-lisp:error ":key-spec is required") :type
                         (common-lisp:or key-spec common-lisp:null) :accessor
                         struct-shape-private-key-attributes-v4-key-spec :shape
                         "KeySpec" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (key-usage-property :initarg :key-usage-property
                         :initform common-lisp:nil :type
                         (common-lisp:or key-usage-property common-lisp:null)
                         :accessor
                         struct-shape-private-key-attributes-v4-key-usage-property
                         :shape "KeyUsageProperty" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (minimal-key-length :initarg :minimal-key-length
                         :initform
                         (common-lisp:error ":minimal-key-length is required")
                         :type
                         (common-lisp:or
                          private-key-attributes-v4minimal-key-length-integer
                          common-lisp:null)
                         :accessor
                         struct-shape-private-key-attributes-v4-minimal-key-length
                         :shape "PrivateKeyAttributesV4MinimalKeyLengthInteger"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-private-key-attributes-v4
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'private-key-attributes-v4
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'private-key-attributes-v4
                    'make-private-key-attributes-v4))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          private-key-attributes-v4))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          private-key-attributes-v4))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'algorithm))
      (common-lisp:list
       (common-lisp:cons "Algorithm"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'crypto-providers))
      (common-lisp:list
       (common-lisp:cons "CryptoProviders"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-spec))
      (common-lisp:list
       (common-lisp:cons "KeySpec"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-usage-property))
      (common-lisp:list
       (common-lisp:cons "KeyUsageProperty"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'minimal-key-length))
      (common-lisp:list
       (common-lisp:cons "MinimalKeyLength"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          private-key-attributes-v4))
   common-lisp:nil))
(common-lisp:deftype private-key-attributes-v4minimal-key-length-integer ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass private-key-flags-v2 common-lisp:nil
                       ((client-version :initarg :client-version :initform
                         (common-lisp:error ":client-version is required")
                         :type
                         (common-lisp:or client-compatibility-v2
                                         common-lisp:null)
                         :accessor
                         struct-shape-private-key-flags-v2-client-version
                         :shape "ClientCompatibilityV2" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (exportable-key :initarg :exportable-key :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-private-key-flags-v2-exportable-key
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (strong-key-protection-required :initarg
                         :strong-key-protection-required :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-private-key-flags-v2-strong-key-protection-required
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-private-key-flags-v2
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'private-key-flags-v2
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'private-key-flags-v2 'make-private-key-flags-v2))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input private-key-flags-v2))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input private-key-flags-v2))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-version))
      (common-lisp:list
       (common-lisp:cons "ClientVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'exportable-key))
      (common-lisp:list
       (common-lisp:cons "ExportableKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'strong-key-protection-required))
      (common-lisp:list
       (common-lisp:cons "StrongKeyProtectionRequired"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input private-key-flags-v2))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass private-key-flags-v3 common-lisp:nil
                       ((client-version :initarg :client-version :initform
                         (common-lisp:error ":client-version is required")
                         :type
                         (common-lisp:or client-compatibility-v3
                                         common-lisp:null)
                         :accessor
                         struct-shape-private-key-flags-v3-client-version
                         :shape "ClientCompatibilityV3" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (exportable-key :initarg :exportable-key :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-private-key-flags-v3-exportable-key
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (require-alternate-signature-algorithm :initarg
                         :require-alternate-signature-algorithm :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-private-key-flags-v3-require-alternate-signature-algorithm
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (strong-key-protection-required :initarg
                         :strong-key-protection-required :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-private-key-flags-v3-strong-key-protection-required
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-private-key-flags-v3
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'private-key-flags-v3
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'private-key-flags-v3 'make-private-key-flags-v3))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input private-key-flags-v3))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input private-key-flags-v3))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-version))
      (common-lisp:list
       (common-lisp:cons "ClientVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'exportable-key))
      (common-lisp:list
       (common-lisp:cons "ExportableKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'require-alternate-signature-algorithm))
      (common-lisp:list
       (common-lisp:cons "RequireAlternateSignatureAlgorithm"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'strong-key-protection-required))
      (common-lisp:list
       (common-lisp:cons "StrongKeyProtectionRequired"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input private-key-flags-v3))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass private-key-flags-v4 common-lisp:nil
                       ((client-version :initarg :client-version :initform
                         (common-lisp:error ":client-version is required")
                         :type
                         (common-lisp:or client-compatibility-v4
                                         common-lisp:null)
                         :accessor
                         struct-shape-private-key-flags-v4-client-version
                         :shape "ClientCompatibilityV4" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (exportable-key :initarg :exportable-key :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-private-key-flags-v4-exportable-key
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (require-alternate-signature-algorithm :initarg
                         :require-alternate-signature-algorithm :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-private-key-flags-v4-require-alternate-signature-algorithm
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (require-same-key-renewal :initarg
                         :require-same-key-renewal :initform common-lisp:nil
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         struct-shape-private-key-flags-v4-require-same-key-renewal
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (strong-key-protection-required :initarg
                         :strong-key-protection-required :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-private-key-flags-v4-strong-key-protection-required
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (use-legacy-provider :initarg :use-legacy-provider
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-private-key-flags-v4-use-legacy-provider
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-private-key-flags-v4
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'private-key-flags-v4
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'private-key-flags-v4 'make-private-key-flags-v4))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input private-key-flags-v4))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input private-key-flags-v4))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-version))
      (common-lisp:list
       (common-lisp:cons "ClientVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'exportable-key))
      (common-lisp:list
       (common-lisp:cons "ExportableKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'require-alternate-signature-algorithm))
      (common-lisp:list
       (common-lisp:cons "RequireAlternateSignatureAlgorithm"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'require-same-key-renewal))
      (common-lisp:list
       (common-lisp:cons "RequireSameKeyRenewal"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'strong-key-protection-required))
      (common-lisp:list
       (common-lisp:cons "StrongKeyProtectionRequired"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'use-legacy-provider))
      (common-lisp:list
       (common-lisp:cons "UseLegacyProvider"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input private-key-flags-v4))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-exception
     (pca-connector-ad-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-not-found-exception-message)
      (resource-id :initarg :resource-id :initform common-lisp:nil :reader
       resource-not-found-exception-resource-id)
      (resource-type :initarg :resource-type :initform common-lisp:nil :reader
       resource-not-found-exception-resource-type)))
 (common-lisp:export
  (common-lisp:list 'resource-not-found-exception
                    'resource-not-found-exception-message
                    'resource-not-found-exception-resource-id
                    'resource-not-found-exception-resource-type)))
(common-lisp:deftype security-group-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype security-group-id-list ()
   '(trivial-types:proper-list security-group-id))
 (common-lisp:defun make-security-group-id-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list security-group-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass service-principal-name common-lisp:nil
                       ((connector-arn :initarg :connector-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or connector-arn common-lisp:null)
                         :accessor
                         struct-shape-service-principal-name-connector-arn
                         :shape "ConnectorArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (created-at :initarg :created-at :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-service-principal-name-created-at :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (directory-registration-arn :initarg
                         :directory-registration-arn :initform common-lisp:nil
                         :type
                         (common-lisp:or directory-registration-arn
                                         common-lisp:null)
                         :accessor
                         struct-shape-service-principal-name-directory-registration-arn
                         :shape "DirectoryRegistrationArn" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or service-principal-name-status
                                         common-lisp:null)
                         :accessor struct-shape-service-principal-name-status
                         :shape "ServicePrincipalNameStatus" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (status-reason :initarg :status-reason :initform
                         common-lisp:nil :type
                         (common-lisp:or service-principal-name-status-reason
                                         common-lisp:null)
                         :accessor
                         struct-shape-service-principal-name-status-reason
                         :shape "ServicePrincipalNameStatusReason" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (updated-at :initarg :updated-at :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-service-principal-name-updated-at :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-service-principal-name
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'service-principal-name
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'service-principal-name 'make-service-principal-name))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          service-principal-name))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          service-principal-name))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connector-arn))
      (common-lisp:list
       (common-lisp:cons "ConnectorArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "CreatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'directory-registration-arn))
      (common-lisp:list
       (common-lisp:cons "DirectoryRegistrationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-reason))
      (common-lisp:list
       (common-lisp:cons "StatusReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "UpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          service-principal-name))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype service-principal-name-list ()
   '(trivial-types:proper-list service-principal-name-summary))
 (common-lisp:defun make-service-principal-name-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            service-principal-name-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype service-principal-name-status () 'common-lisp:string)
(common-lisp:deftype service-principal-name-status-reason ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass service-principal-name-summary common-lisp:nil
                       ((connector-arn :initarg :connector-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or connector-arn common-lisp:null)
                         :accessor
                         struct-shape-service-principal-name-summary-connector-arn
                         :shape "ConnectorArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (created-at :initarg :created-at :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-service-principal-name-summary-created-at
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (directory-registration-arn :initarg
                         :directory-registration-arn :initform common-lisp:nil
                         :type
                         (common-lisp:or directory-registration-arn
                                         common-lisp:null)
                         :accessor
                         struct-shape-service-principal-name-summary-directory-registration-arn
                         :shape "DirectoryRegistrationArn" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or service-principal-name-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-service-principal-name-summary-status
                         :shape "ServicePrincipalNameStatus" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (status-reason :initarg :status-reason :initform
                         common-lisp:nil :type
                         (common-lisp:or service-principal-name-status-reason
                                         common-lisp:null)
                         :accessor
                         struct-shape-service-principal-name-summary-status-reason
                         :shape "ServicePrincipalNameStatusReason" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (updated-at :initarg :updated-at :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-service-principal-name-summary-updated-at
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-service-principal-name-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'service-principal-name-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'service-principal-name-summary
                    'make-service-principal-name-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          service-principal-name-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          service-principal-name-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connector-arn))
      (common-lisp:list
       (common-lisp:cons "ConnectorArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "CreatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'directory-registration-arn))
      (common-lisp:list
       (common-lisp:cons "DirectoryRegistrationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-reason))
      (common-lisp:list
       (common-lisp:cons "StatusReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "UpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          service-principal-name-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition service-quota-exceeded-exception
     (pca-connector-ad-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       service-quota-exceeded-exception-message)
      (quota-code :initarg :quota-code :initform common-lisp:nil :reader
       service-quota-exceeded-exception-quota-code)
      (resource-id :initarg :resource-id :initform common-lisp:nil :reader
       service-quota-exceeded-exception-resource-id)
      (resource-type :initarg :resource-type :initform common-lisp:nil :reader
       service-quota-exceeded-exception-resource-type)
      (service-code :initarg :service-code :initform common-lisp:nil :reader
       service-quota-exceeded-exception-service-code)))
 (common-lisp:export
  (common-lisp:list 'service-quota-exceeded-exception
                    'service-quota-exceeded-exception-message
                    'service-quota-exceeded-exception-quota-code
                    'service-quota-exceeded-exception-resource-id
                    'service-quota-exceeded-exception-resource-type
                    'service-quota-exceeded-exception-service-code)))
(common-lisp:deftype string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass subject-name-flags-v2 common-lisp:nil
                       ((require-common-name :initarg :require-common-name
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-subject-name-flags-v2-require-common-name
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (require-directory-path :initarg
                         :require-directory-path :initform common-lisp:nil
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         struct-shape-subject-name-flags-v2-require-directory-path
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (require-dns-as-cn :initarg :require-dns-as-cn
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-subject-name-flags-v2-require-dns-as-cn
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (require-email :initarg :require-email :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-subject-name-flags-v2-require-email
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (san-require-directory-guid :initarg
                         :san-require-directory-guid :initform common-lisp:nil
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         struct-shape-subject-name-flags-v2-san-require-directory-guid
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (san-require-dns :initarg :san-require-dns :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-subject-name-flags-v2-san-require-dns
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (san-require-domain-dns :initarg
                         :san-require-domain-dns :initform common-lisp:nil
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         struct-shape-subject-name-flags-v2-san-require-domain-dns
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (san-require-email :initarg :san-require-email
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-subject-name-flags-v2-san-require-email
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (san-require-spn :initarg :san-require-spn :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-subject-name-flags-v2-san-require-spn
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (san-require-upn :initarg :san-require-upn :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-subject-name-flags-v2-san-require-upn
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-subject-name-flags-v2
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'subject-name-flags-v2
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'subject-name-flags-v2 'make-subject-name-flags-v2))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          subject-name-flags-v2))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          subject-name-flags-v2))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'require-common-name))
      (common-lisp:list
       (common-lisp:cons "RequireCommonName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'require-directory-path))
      (common-lisp:list
       (common-lisp:cons "RequireDirectoryPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'require-dns-as-cn))
      (common-lisp:list
       (common-lisp:cons "RequireDnsAsCn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'require-email))
      (common-lisp:list
       (common-lisp:cons "RequireEmail"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'san-require-directory-guid))
      (common-lisp:list
       (common-lisp:cons "SanRequireDirectoryGuid"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'san-require-dns))
      (common-lisp:list
       (common-lisp:cons "SanRequireDns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'san-require-domain-dns))
      (common-lisp:list
       (common-lisp:cons "SanRequireDomainDns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'san-require-email))
      (common-lisp:list
       (common-lisp:cons "SanRequireEmail"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'san-require-spn))
      (common-lisp:list
       (common-lisp:cons "SanRequireSpn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'san-require-upn))
      (common-lisp:list
       (common-lisp:cons "SanRequireUpn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          subject-name-flags-v2))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass subject-name-flags-v3 common-lisp:nil
                       ((require-common-name :initarg :require-common-name
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-subject-name-flags-v3-require-common-name
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (require-directory-path :initarg
                         :require-directory-path :initform common-lisp:nil
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         struct-shape-subject-name-flags-v3-require-directory-path
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (require-dns-as-cn :initarg :require-dns-as-cn
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-subject-name-flags-v3-require-dns-as-cn
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (require-email :initarg :require-email :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-subject-name-flags-v3-require-email
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (san-require-directory-guid :initarg
                         :san-require-directory-guid :initform common-lisp:nil
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         struct-shape-subject-name-flags-v3-san-require-directory-guid
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (san-require-dns :initarg :san-require-dns :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-subject-name-flags-v3-san-require-dns
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (san-require-domain-dns :initarg
                         :san-require-domain-dns :initform common-lisp:nil
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         struct-shape-subject-name-flags-v3-san-require-domain-dns
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (san-require-email :initarg :san-require-email
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-subject-name-flags-v3-san-require-email
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (san-require-spn :initarg :san-require-spn :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-subject-name-flags-v3-san-require-spn
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (san-require-upn :initarg :san-require-upn :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-subject-name-flags-v3-san-require-upn
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-subject-name-flags-v3
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'subject-name-flags-v3
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'subject-name-flags-v3 'make-subject-name-flags-v3))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          subject-name-flags-v3))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          subject-name-flags-v3))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'require-common-name))
      (common-lisp:list
       (common-lisp:cons "RequireCommonName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'require-directory-path))
      (common-lisp:list
       (common-lisp:cons "RequireDirectoryPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'require-dns-as-cn))
      (common-lisp:list
       (common-lisp:cons "RequireDnsAsCn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'require-email))
      (common-lisp:list
       (common-lisp:cons "RequireEmail"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'san-require-directory-guid))
      (common-lisp:list
       (common-lisp:cons "SanRequireDirectoryGuid"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'san-require-dns))
      (common-lisp:list
       (common-lisp:cons "SanRequireDns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'san-require-domain-dns))
      (common-lisp:list
       (common-lisp:cons "SanRequireDomainDns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'san-require-email))
      (common-lisp:list
       (common-lisp:cons "SanRequireEmail"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'san-require-spn))
      (common-lisp:list
       (common-lisp:cons "SanRequireSpn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'san-require-upn))
      (common-lisp:list
       (common-lisp:cons "SanRequireUpn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          subject-name-flags-v3))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass subject-name-flags-v4 common-lisp:nil
                       ((require-common-name :initarg :require-common-name
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-subject-name-flags-v4-require-common-name
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (require-directory-path :initarg
                         :require-directory-path :initform common-lisp:nil
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         struct-shape-subject-name-flags-v4-require-directory-path
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (require-dns-as-cn :initarg :require-dns-as-cn
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-subject-name-flags-v4-require-dns-as-cn
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (require-email :initarg :require-email :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-subject-name-flags-v4-require-email
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (san-require-directory-guid :initarg
                         :san-require-directory-guid :initform common-lisp:nil
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         struct-shape-subject-name-flags-v4-san-require-directory-guid
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (san-require-dns :initarg :san-require-dns :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-subject-name-flags-v4-san-require-dns
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (san-require-domain-dns :initarg
                         :san-require-domain-dns :initform common-lisp:nil
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         struct-shape-subject-name-flags-v4-san-require-domain-dns
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (san-require-email :initarg :san-require-email
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-subject-name-flags-v4-san-require-email
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (san-require-spn :initarg :san-require-spn :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-subject-name-flags-v4-san-require-spn
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (san-require-upn :initarg :san-require-upn :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-subject-name-flags-v4-san-require-upn
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-subject-name-flags-v4
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'subject-name-flags-v4
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'subject-name-flags-v4 'make-subject-name-flags-v4))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          subject-name-flags-v4))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          subject-name-flags-v4))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'require-common-name))
      (common-lisp:list
       (common-lisp:cons "RequireCommonName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'require-directory-path))
      (common-lisp:list
       (common-lisp:cons "RequireDirectoryPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'require-dns-as-cn))
      (common-lisp:list
       (common-lisp:cons "RequireDnsAsCn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'require-email))
      (common-lisp:list
       (common-lisp:cons "RequireEmail"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'san-require-directory-guid))
      (common-lisp:list
       (common-lisp:cons "SanRequireDirectoryGuid"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'san-require-dns))
      (common-lisp:list
       (common-lisp:cons "SanRequireDns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'san-require-domain-dns))
      (common-lisp:list
       (common-lisp:cons "SanRequireDomainDns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'san-require-email))
      (common-lisp:list
       (common-lisp:cons "SanRequireEmail"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'san-require-spn))
      (common-lisp:list
       (common-lisp:cons "SanRequireSpn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'san-require-upn))
      (common-lisp:list
       (common-lisp:cons "SanRequireUpn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          subject-name-flags-v4))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype tag-key-list () '(trivial-types:proper-list string))
 (common-lisp:defun make-tag-key-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass tag-resource-request common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resource-arn is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-tag-resource-request-resource-arn :shape
                         "String" :location "uri" :location-name "ResourceArn")
                        (tags :initarg :tags :initform
                         (common-lisp:error ":tags is required") :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         struct-shape-tag-resource-request-tags :shape "Tags"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tag-resource-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'tag-resource-request 'make-tag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype tags () 'common-lisp:hash-table)
 (common-lisp:defun make-tags (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defclass template common-lisp:nil
                       ((arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or template-arn common-lisp:null)
                         :accessor struct-shape-template-arn :shape
                         "TemplateArn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (connector-arn :initarg :connector-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or connector-arn common-lisp:null)
                         :accessor struct-shape-template-connector-arn :shape
                         "ConnectorArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (created-at :initarg :created-at :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-template-created-at :shape "Timestamp"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (definition :initarg :definition :initform
                         common-lisp:nil :type
                         (common-lisp:or template-definition common-lisp:null)
                         :accessor struct-shape-template-definition :shape
                         "TemplateDefinition" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or template-name common-lisp:null)
                         :accessor struct-shape-template-name :shape
                         "TemplateName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (object-identifier :initarg :object-identifier
                         :initform common-lisp:nil :type
                         (common-lisp:or custom-object-identifier
                                         common-lisp:null)
                         :accessor struct-shape-template-object-identifier
                         :shape "CustomObjectIdentifier" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (policy-schema :initarg :policy-schema :initform
                         common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-template-policy-schema :shape "Integer"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (revision :initarg :revision :initform common-lisp:nil
                         :type
                         (common-lisp:or template-revision common-lisp:null)
                         :accessor struct-shape-template-revision :shape
                         "TemplateRevision" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or template-status common-lisp:null)
                         :accessor struct-shape-template-status :shape
                         "TemplateStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (updated-at :initarg :updated-at :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-template-updated-at :shape "Timestamp"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-template
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'template
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'template 'make-template))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input template))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input template))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connector-arn))
      (common-lisp:list
       (common-lisp:cons "ConnectorArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "CreatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'definition))
      (common-lisp:list
       (common-lisp:cons "Definition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'object-identifier))
      (common-lisp:list
       (common-lisp:cons "ObjectIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-schema))
      (common-lisp:list
       (common-lisp:cons "PolicySchema"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'revision))
      (common-lisp:list
       (common-lisp:cons "Revision"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "UpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input template))
   common-lisp:nil))
(common-lisp:deftype template-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass template-definition common-lisp:nil
                       ((template-v2 :initarg :template-v2 :initform
                         common-lisp:nil :type
                         (common-lisp:or template-v2 common-lisp:null)
                         :accessor struct-shape-template-definition-template-v2
                         :shape "TemplateV2" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (template-v3 :initarg :template-v3 :initform
                         common-lisp:nil :type
                         (common-lisp:or template-v3 common-lisp:null)
                         :accessor struct-shape-template-definition-template-v3
                         :shape "TemplateV3" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (template-v4 :initarg :template-v4 :initform
                         common-lisp:nil :type
                         (common-lisp:or template-v4 common-lisp:null)
                         :accessor struct-shape-template-definition-template-v4
                         :shape "TemplateV4" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-template-definition
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'template-definition
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'template-definition 'make-template-definition))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input template-definition))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input template-definition))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-v2))
      (common-lisp:list
       (common-lisp:cons "TemplateV2"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-v3))
      (common-lisp:list
       (common-lisp:cons "TemplateV3"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-v4))
      (common-lisp:list
       (common-lisp:cons "TemplateV4"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input template-definition))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype template-list ()
   '(trivial-types:proper-list template-summary))
 (common-lisp:defun make-template-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list template-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype template-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype template-name-list ()
   '(trivial-types:proper-list template-name))
 (common-lisp:defun make-template-name-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list template-name))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass template-revision common-lisp:nil
                       ((major-revision :initarg :major-revision :initform
                         (common-lisp:error ":major-revision is required")
                         :type (common-lisp:or integer common-lisp:null)
                         :accessor
                         struct-shape-template-revision-major-revision :shape
                         "Integer" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (minor-revision :initarg :minor-revision :initform
                         (common-lisp:error ":minor-revision is required")
                         :type (common-lisp:or integer common-lisp:null)
                         :accessor
                         struct-shape-template-revision-minor-revision :shape
                         "Integer" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-template-revision
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'template-revision
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'template-revision 'make-template-revision))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input template-revision))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input template-revision))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'major-revision))
      (common-lisp:list
       (common-lisp:cons "MajorRevision"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'minor-revision))
      (common-lisp:list
       (common-lisp:cons "MinorRevision"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input template-revision))
   common-lisp:nil))
(common-lisp:deftype template-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass template-summary common-lisp:nil
                       ((arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or template-arn common-lisp:null)
                         :accessor struct-shape-template-summary-arn :shape
                         "TemplateArn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (connector-arn :initarg :connector-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or connector-arn common-lisp:null)
                         :accessor struct-shape-template-summary-connector-arn
                         :shape "ConnectorArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (created-at :initarg :created-at :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-template-summary-created-at :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (definition :initarg :definition :initform
                         common-lisp:nil :type
                         (common-lisp:or template-definition common-lisp:null)
                         :accessor struct-shape-template-summary-definition
                         :shape "TemplateDefinition" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or template-name common-lisp:null)
                         :accessor struct-shape-template-summary-name :shape
                         "TemplateName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (object-identifier :initarg :object-identifier
                         :initform common-lisp:nil :type
                         (common-lisp:or custom-object-identifier
                                         common-lisp:null)
                         :accessor
                         struct-shape-template-summary-object-identifier :shape
                         "CustomObjectIdentifier" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (policy-schema :initarg :policy-schema :initform
                         common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-template-summary-policy-schema :shape
                         "Integer" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (revision :initarg :revision :initform common-lisp:nil
                         :type
                         (common-lisp:or template-revision common-lisp:null)
                         :accessor struct-shape-template-summary-revision
                         :shape "TemplateRevision" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or template-status common-lisp:null)
                         :accessor struct-shape-template-summary-status :shape
                         "TemplateStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (updated-at :initarg :updated-at :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-template-summary-updated-at :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-template-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'template-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'template-summary 'make-template-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input template-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input template-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connector-arn))
      (common-lisp:list
       (common-lisp:cons "ConnectorArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "CreatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'definition))
      (common-lisp:list
       (common-lisp:cons "Definition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'object-identifier))
      (common-lisp:list
       (common-lisp:cons "ObjectIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-schema))
      (common-lisp:list
       (common-lisp:cons "PolicySchema"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'revision))
      (common-lisp:list
       (common-lisp:cons "Revision"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "UpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input template-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass template-v2 common-lisp:nil
                       ((certificate-validity :initarg :certificate-validity
                         :initform
                         (common-lisp:error
                          ":certificate-validity is required")
                         :type
                         (common-lisp:or certificate-validity common-lisp:null)
                         :accessor
                         struct-shape-template-v2-certificate-validity :shape
                         "CertificateValidity" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (enrollment-flags :initarg :enrollment-flags :initform
                         (common-lisp:error ":enrollment-flags is required")
                         :type
                         (common-lisp:or enrollment-flags-v2 common-lisp:null)
                         :accessor struct-shape-template-v2-enrollment-flags
                         :shape "EnrollmentFlagsV2" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (extensions :initarg :extensions :initform
                         (common-lisp:error ":extensions is required") :type
                         (common-lisp:or extensions-v2 common-lisp:null)
                         :accessor struct-shape-template-v2-extensions :shape
                         "ExtensionsV2" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (general-flags :initarg :general-flags :initform
                         (common-lisp:error ":general-flags is required") :type
                         (common-lisp:or general-flags-v2 common-lisp:null)
                         :accessor struct-shape-template-v2-general-flags
                         :shape "GeneralFlagsV2" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (private-key-attributes :initarg
                         :private-key-attributes :initform
                         (common-lisp:error
                          ":private-key-attributes is required")
                         :type
                         (common-lisp:or private-key-attributes-v2
                                         common-lisp:null)
                         :accessor
                         struct-shape-template-v2-private-key-attributes :shape
                         "PrivateKeyAttributesV2" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (private-key-flags :initarg :private-key-flags
                         :initform
                         (common-lisp:error ":private-key-flags is required")
                         :type
                         (common-lisp:or private-key-flags-v2 common-lisp:null)
                         :accessor struct-shape-template-v2-private-key-flags
                         :shape "PrivateKeyFlagsV2" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (subject-name-flags :initarg :subject-name-flags
                         :initform
                         (common-lisp:error ":subject-name-flags is required")
                         :type
                         (common-lisp:or subject-name-flags-v2
                                         common-lisp:null)
                         :accessor struct-shape-template-v2-subject-name-flags
                         :shape "SubjectNameFlagsV2" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (superseded-templates :initarg :superseded-templates
                         :initform common-lisp:nil :type
                         (common-lisp:or template-name-list common-lisp:null)
                         :accessor
                         struct-shape-template-v2-superseded-templates :shape
                         "TemplateNameList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-template-v2
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'template-v2
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'template-v2 'make-template-v2))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input template-v2))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input template-v2))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'certificate-validity))
      (common-lisp:list
       (common-lisp:cons "CertificateValidity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enrollment-flags))
      (common-lisp:list
       (common-lisp:cons "EnrollmentFlags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'extensions))
      (common-lisp:list
       (common-lisp:cons "Extensions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'general-flags))
      (common-lisp:list
       (common-lisp:cons "GeneralFlags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'private-key-attributes))
      (common-lisp:list
       (common-lisp:cons "PrivateKeyAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'private-key-flags))
      (common-lisp:list
       (common-lisp:cons "PrivateKeyFlags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subject-name-flags))
      (common-lisp:list
       (common-lisp:cons "SubjectNameFlags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'superseded-templates))
      (common-lisp:list
       (common-lisp:cons "SupersededTemplates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input template-v2))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass template-v3 common-lisp:nil
                       ((certificate-validity :initarg :certificate-validity
                         :initform
                         (common-lisp:error
                          ":certificate-validity is required")
                         :type
                         (common-lisp:or certificate-validity common-lisp:null)
                         :accessor
                         struct-shape-template-v3-certificate-validity :shape
                         "CertificateValidity" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (enrollment-flags :initarg :enrollment-flags :initform
                         (common-lisp:error ":enrollment-flags is required")
                         :type
                         (common-lisp:or enrollment-flags-v3 common-lisp:null)
                         :accessor struct-shape-template-v3-enrollment-flags
                         :shape "EnrollmentFlagsV3" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (extensions :initarg :extensions :initform
                         (common-lisp:error ":extensions is required") :type
                         (common-lisp:or extensions-v3 common-lisp:null)
                         :accessor struct-shape-template-v3-extensions :shape
                         "ExtensionsV3" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (general-flags :initarg :general-flags :initform
                         (common-lisp:error ":general-flags is required") :type
                         (common-lisp:or general-flags-v3 common-lisp:null)
                         :accessor struct-shape-template-v3-general-flags
                         :shape "GeneralFlagsV3" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (hash-algorithm :initarg :hash-algorithm :initform
                         (common-lisp:error ":hash-algorithm is required")
                         :type (common-lisp:or hash-algorithm common-lisp:null)
                         :accessor struct-shape-template-v3-hash-algorithm
                         :shape "HashAlgorithm" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (private-key-attributes :initarg
                         :private-key-attributes :initform
                         (common-lisp:error
                          ":private-key-attributes is required")
                         :type
                         (common-lisp:or private-key-attributes-v3
                                         common-lisp:null)
                         :accessor
                         struct-shape-template-v3-private-key-attributes :shape
                         "PrivateKeyAttributesV3" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (private-key-flags :initarg :private-key-flags
                         :initform
                         (common-lisp:error ":private-key-flags is required")
                         :type
                         (common-lisp:or private-key-flags-v3 common-lisp:null)
                         :accessor struct-shape-template-v3-private-key-flags
                         :shape "PrivateKeyFlagsV3" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (subject-name-flags :initarg :subject-name-flags
                         :initform
                         (common-lisp:error ":subject-name-flags is required")
                         :type
                         (common-lisp:or subject-name-flags-v3
                                         common-lisp:null)
                         :accessor struct-shape-template-v3-subject-name-flags
                         :shape "SubjectNameFlagsV3" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (superseded-templates :initarg :superseded-templates
                         :initform common-lisp:nil :type
                         (common-lisp:or template-name-list common-lisp:null)
                         :accessor
                         struct-shape-template-v3-superseded-templates :shape
                         "TemplateNameList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-template-v3
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'template-v3
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'template-v3 'make-template-v3))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input template-v3))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input template-v3))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'certificate-validity))
      (common-lisp:list
       (common-lisp:cons "CertificateValidity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enrollment-flags))
      (common-lisp:list
       (common-lisp:cons "EnrollmentFlags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'extensions))
      (common-lisp:list
       (common-lisp:cons "Extensions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'general-flags))
      (common-lisp:list
       (common-lisp:cons "GeneralFlags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hash-algorithm))
      (common-lisp:list
       (common-lisp:cons "HashAlgorithm"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'private-key-attributes))
      (common-lisp:list
       (common-lisp:cons "PrivateKeyAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'private-key-flags))
      (common-lisp:list
       (common-lisp:cons "PrivateKeyFlags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subject-name-flags))
      (common-lisp:list
       (common-lisp:cons "SubjectNameFlags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'superseded-templates))
      (common-lisp:list
       (common-lisp:cons "SupersededTemplates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input template-v3))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass template-v4 common-lisp:nil
                       ((certificate-validity :initarg :certificate-validity
                         :initform
                         (common-lisp:error
                          ":certificate-validity is required")
                         :type
                         (common-lisp:or certificate-validity common-lisp:null)
                         :accessor
                         struct-shape-template-v4-certificate-validity :shape
                         "CertificateValidity" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (enrollment-flags :initarg :enrollment-flags :initform
                         (common-lisp:error ":enrollment-flags is required")
                         :type
                         (common-lisp:or enrollment-flags-v4 common-lisp:null)
                         :accessor struct-shape-template-v4-enrollment-flags
                         :shape "EnrollmentFlagsV4" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (extensions :initarg :extensions :initform
                         (common-lisp:error ":extensions is required") :type
                         (common-lisp:or extensions-v4 common-lisp:null)
                         :accessor struct-shape-template-v4-extensions :shape
                         "ExtensionsV4" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (general-flags :initarg :general-flags :initform
                         (common-lisp:error ":general-flags is required") :type
                         (common-lisp:or general-flags-v4 common-lisp:null)
                         :accessor struct-shape-template-v4-general-flags
                         :shape "GeneralFlagsV4" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (hash-algorithm :initarg :hash-algorithm :initform
                         common-lisp:nil :type
                         (common-lisp:or hash-algorithm common-lisp:null)
                         :accessor struct-shape-template-v4-hash-algorithm
                         :shape "HashAlgorithm" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (private-key-attributes :initarg
                         :private-key-attributes :initform
                         (common-lisp:error
                          ":private-key-attributes is required")
                         :type
                         (common-lisp:or private-key-attributes-v4
                                         common-lisp:null)
                         :accessor
                         struct-shape-template-v4-private-key-attributes :shape
                         "PrivateKeyAttributesV4" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (private-key-flags :initarg :private-key-flags
                         :initform
                         (common-lisp:error ":private-key-flags is required")
                         :type
                         (common-lisp:or private-key-flags-v4 common-lisp:null)
                         :accessor struct-shape-template-v4-private-key-flags
                         :shape "PrivateKeyFlagsV4" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (subject-name-flags :initarg :subject-name-flags
                         :initform
                         (common-lisp:error ":subject-name-flags is required")
                         :type
                         (common-lisp:or subject-name-flags-v4
                                         common-lisp:null)
                         :accessor struct-shape-template-v4-subject-name-flags
                         :shape "SubjectNameFlagsV4" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (superseded-templates :initarg :superseded-templates
                         :initform common-lisp:nil :type
                         (common-lisp:or template-name-list common-lisp:null)
                         :accessor
                         struct-shape-template-v4-superseded-templates :shape
                         "TemplateNameList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-template-v4
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'template-v4
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'template-v4 'make-template-v4))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input template-v4))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input template-v4))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'certificate-validity))
      (common-lisp:list
       (common-lisp:cons "CertificateValidity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enrollment-flags))
      (common-lisp:list
       (common-lisp:cons "EnrollmentFlags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'extensions))
      (common-lisp:list
       (common-lisp:cons "Extensions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'general-flags))
      (common-lisp:list
       (common-lisp:cons "GeneralFlags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hash-algorithm))
      (common-lisp:list
       (common-lisp:cons "HashAlgorithm"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'private-key-attributes))
      (common-lisp:list
       (common-lisp:cons "PrivateKeyAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'private-key-flags))
      (common-lisp:list
       (common-lisp:cons "PrivateKeyFlags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subject-name-flags))
      (common-lisp:list
       (common-lisp:cons "SubjectNameFlags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'superseded-templates))
      (common-lisp:list
       (common-lisp:cons "SupersededTemplates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input template-v4))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition throttling-exception
     (pca-connector-ad-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       throttling-exception-message)
      (quota-code :initarg :quota-code :initform common-lisp:nil :reader
       throttling-exception-quota-code)
      (service-code :initarg :service-code :initform common-lisp:nil :reader
       throttling-exception-service-code)))
 (common-lisp:export
  (common-lisp:list 'throttling-exception 'throttling-exception-message
                    'throttling-exception-quota-code
                    'throttling-exception-service-code)))
(common-lisp:deftype timestamp () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass untag-resource-request common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resource-arn is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-untag-resource-request-resource-arn
                         :shape "String" :location "uri" :location-name
                         "ResourceArn")
                        (tag-keys :initarg :tag-keys :initform
                         (common-lisp:error ":tag-keys is required") :type
                         (common-lisp:or tag-key-list common-lisp:null)
                         :accessor struct-shape-untag-resource-request-tag-keys
                         :shape "TagKeyList" :location "querystring"
                         :location-name "tagKeys"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-untag-resource-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'untag-resource-request 'make-untag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-template-group-access-control-entry-request
                       common-lisp:nil
                       ((access-rights :initarg :access-rights :initform
                         common-lisp:nil :type
                         (common-lisp:or access-rights common-lisp:null)
                         :accessor
                         struct-shape-update-template-group-access-control-entry-request-access-rights
                         :shape "AccessRights" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (group-display-name :initarg :group-display-name
                         :initform common-lisp:nil :type
                         (common-lisp:or display-name common-lisp:null)
                         :accessor
                         struct-shape-update-template-group-access-control-entry-request-group-display-name
                         :shape "DisplayName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (group-security-identifier :initarg
                         :group-security-identifier :initform
                         (common-lisp:error
                          ":group-security-identifier is required")
                         :type
                         (common-lisp:or group-security-identifier
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-template-group-access-control-entry-request-group-security-identifier
                         :shape "GroupSecurityIdentifier" :location "uri"
                         :location-name "GroupSecurityIdentifier")
                        (template-arn :initarg :template-arn :initform
                         (common-lisp:error ":template-arn is required") :type
                         (common-lisp:or template-arn common-lisp:null)
                         :accessor
                         struct-shape-update-template-group-access-control-entry-request-template-arn
                         :shape "TemplateArn" :location "uri" :location-name
                         "TemplateArn"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-template-group-access-control-entry-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-template-group-access-control-entry-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-template-group-access-control-entry-request
                    'make-update-template-group-access-control-entry-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-template-group-access-control-entry-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-template-group-access-control-entry-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-rights))
      (common-lisp:list
       (common-lisp:cons "AccessRights"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-display-name))
      (common-lisp:list
       (common-lisp:cons "GroupDisplayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-template-group-access-control-entry-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-template-request common-lisp:nil
                       ((definition :initarg :definition :initform
                         common-lisp:nil :type
                         (common-lisp:or template-definition common-lisp:null)
                         :accessor
                         struct-shape-update-template-request-definition :shape
                         "TemplateDefinition" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (reenroll-all-certificate-holders :initarg
                         :reenroll-all-certificate-holders :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-update-template-request-reenroll-all-certificate-holders
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (template-arn :initarg :template-arn :initform
                         (common-lisp:error ":template-arn is required") :type
                         (common-lisp:or template-arn common-lisp:null)
                         :accessor
                         struct-shape-update-template-request-template-arn
                         :shape "TemplateArn" :location "uri" :location-name
                         "TemplateArn"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-template-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-template-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-template-request 'make-update-template-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-template-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-template-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'definition))
      (common-lisp:list
       (common-lisp:cons "Definition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'reenroll-all-certificate-holders))
      (common-lisp:list
       (common-lisp:cons "ReenrollAllCertificateHolders"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-template-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition validation-exception
     (pca-connector-ad-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       validation-exception-message)
      (reason :initarg :reason :initform common-lisp:nil :reader
       validation-exception-reason)))
 (common-lisp:export
  (common-lisp:list 'validation-exception 'validation-exception-message
                    'validation-exception-reason)))
(common-lisp:deftype validation-exception-reason () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass validity-period common-lisp:nil
                       ((period :initarg :period :initform
                         (common-lisp:error ":period is required") :type
                         (common-lisp:or validity-period-period-long
                                         common-lisp:null)
                         :accessor struct-shape-validity-period-period :shape
                         "ValidityPeriodPeriodLong" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (period-type :initarg :period-type :initform
                         (common-lisp:error ":period-type is required") :type
                         (common-lisp:or validity-period-type common-lisp:null)
                         :accessor struct-shape-validity-period-period-type
                         :shape "ValidityPeriodType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-validity-period
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'validity-period
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'validity-period 'make-validity-period))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input validity-period))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input validity-period))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'period))
      (common-lisp:list
       (common-lisp:cons "Period"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'period-type))
      (common-lisp:list
       (common-lisp:cons "PeriodType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input validity-period))
   common-lisp:nil))
(common-lisp:deftype validity-period-period-long () 'common-lisp:integer)
(common-lisp:deftype validity-period-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass vpc-information common-lisp:nil
                       ((security-group-ids :initarg :security-group-ids
                         :initform
                         (common-lisp:error ":security-group-ids is required")
                         :type
                         (common-lisp:or security-group-id-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-vpc-information-security-group-ids :shape
                         "SecurityGroupIdList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-vpc-information
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'vpc-information
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'vpc-information 'make-vpc-information))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input vpc-information))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input vpc-information))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-group-ids))
      (common-lisp:list
       (common-lisp:cons "SecurityGroupIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input vpc-information))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defun create-connector
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key certificate-authority-arn client-token
                     directory-id tags vpc-information)
   (common-lisp:declare
    (common-lisp:ignorable certificate-authority-arn client-token directory-id
     tags vpc-information))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-connector-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'pca-connector-ad-request aws-sdk/generator/operation::input "POST"
        "/connectors" "CreateConnector"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-connector))
(common-lisp:progn
 (common-lisp:defun create-directory-registration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token directory-id tags)
   (common-lisp:declare (common-lisp:ignorable client-token directory-id tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-directory-registration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'pca-connector-ad-request aws-sdk/generator/operation::input "POST"
        "/directoryRegistrations" "CreateDirectoryRegistration"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-directory-registration))
(common-lisp:progn
 (common-lisp:defun create-service-principal-name
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token connector-arn
                     directory-registration-arn)
   (common-lisp:declare
    (common-lisp:ignorable client-token connector-arn
     directory-registration-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-service-principal-name-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'pca-connector-ad-request aws-sdk/generator/operation::input "POST"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil
                              "/directoryRegistrations/~A/servicePrincipalNames/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'directory-registration-arn))
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'connector-arn))))
        "CreateServicePrincipalName"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-service-principal-name))
(common-lisp:progn
 (common-lisp:defun create-template
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token connector-arn definition
                     name tags)
   (common-lisp:declare
    (common-lisp:ignorable client-token connector-arn definition name tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-template-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'pca-connector-ad-request aws-sdk/generator/operation::input "POST"
        "/templates" "CreateTemplate"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-template))
(common-lisp:progn
 (common-lisp:defun create-template-group-access-control-entry
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key access-rights client-token
                     group-display-name group-security-identifier template-arn)
   (common-lisp:declare
    (common-lisp:ignorable access-rights client-token group-display-name
     group-security-identifier template-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-template-group-access-control-entry-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'pca-connector-ad-request aws-sdk/generator/operation::input "POST"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil
                              "/templates/~A/accessControlEntries"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'template-arn))))
        "CreateTemplateGroupAccessControlEntry"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-template-group-access-control-entry))
(common-lisp:progn
 (common-lisp:defun delete-connector
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key connector-arn)
   (common-lisp:declare (common-lisp:ignorable connector-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-connector-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'pca-connector-ad-request aws-sdk/generator/operation::input "DELETE"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/connectors/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'connector-arn))))
        "DeleteConnector"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-connector))
(common-lisp:progn
 (common-lisp:defun delete-directory-registration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key directory-registration-arn)
   (common-lisp:declare (common-lisp:ignorable directory-registration-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-directory-registration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'pca-connector-ad-request aws-sdk/generator/operation::input "DELETE"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/directoryRegistrations/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'directory-registration-arn))))
        "DeleteDirectoryRegistration"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-directory-registration))
(common-lisp:progn
 (common-lisp:defun delete-service-principal-name
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key connector-arn directory-registration-arn)
   (common-lisp:declare
    (common-lisp:ignorable connector-arn directory-registration-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-service-principal-name-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'pca-connector-ad-request aws-sdk/generator/operation::input "DELETE"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil
                              "/directoryRegistrations/~A/servicePrincipalNames/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'directory-registration-arn))
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'connector-arn))))
        "DeleteServicePrincipalName"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-service-principal-name))
(common-lisp:progn
 (common-lisp:defun delete-template
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key template-arn)
   (common-lisp:declare (common-lisp:ignorable template-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-template-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'pca-connector-ad-request aws-sdk/generator/operation::input "DELETE"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/templates/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'template-arn))))
        "DeleteTemplate"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-template))
(common-lisp:progn
 (common-lisp:defun delete-template-group-access-control-entry
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key group-security-identifier template-arn)
   (common-lisp:declare
    (common-lisp:ignorable group-security-identifier template-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-template-group-access-control-entry-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'pca-connector-ad-request aws-sdk/generator/operation::input "DELETE"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil
                              "/templates/~A/accessControlEntries/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'template-arn))
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'group-security-identifier))))
        "DeleteTemplateGroupAccessControlEntry"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-template-group-access-control-entry))
(common-lisp:progn
 (common-lisp:defun get-connector
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key connector-arn)
   (common-lisp:declare (common-lisp:ignorable connector-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-connector-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'pca-connector-ad-request aws-sdk/generator/operation::input "GET"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/connectors/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'connector-arn))))
        "GetConnector"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-connector))
(common-lisp:progn
 (common-lisp:defun get-directory-registration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key directory-registration-arn)
   (common-lisp:declare (common-lisp:ignorable directory-registration-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-directory-registration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'pca-connector-ad-request aws-sdk/generator/operation::input "GET"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/directoryRegistrations/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'directory-registration-arn))))
        "GetDirectoryRegistration"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-directory-registration))
(common-lisp:progn
 (common-lisp:defun get-service-principal-name
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key connector-arn directory-registration-arn)
   (common-lisp:declare
    (common-lisp:ignorable connector-arn directory-registration-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-service-principal-name-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'pca-connector-ad-request aws-sdk/generator/operation::input "GET"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil
                              "/directoryRegistrations/~A/servicePrincipalNames/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'directory-registration-arn))
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'connector-arn))))
        "GetServicePrincipalName"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-service-principal-name))
(common-lisp:progn
 (common-lisp:defun get-template
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key template-arn)
   (common-lisp:declare (common-lisp:ignorable template-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-template-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'pca-connector-ad-request aws-sdk/generator/operation::input "GET"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/templates/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'template-arn))))
        "GetTemplate"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-template))
(common-lisp:progn
 (common-lisp:defun get-template-group-access-control-entry
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key group-security-identifier template-arn)
   (common-lisp:declare
    (common-lisp:ignorable group-security-identifier template-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-template-group-access-control-entry-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'pca-connector-ad-request aws-sdk/generator/operation::input "GET"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil
                              "/templates/~A/accessControlEntries/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'template-arn))
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'group-security-identifier))))
        "GetTemplateGroupAccessControlEntry"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-template-group-access-control-entry))
(common-lisp:progn
 (common-lisp:defun list-connectors
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-connectors-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'pca-connector-ad-request aws-sdk/generator/operation::input "GET"
        "/connectors" "ListConnectors"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-connectors))
(common-lisp:progn
 (common-lisp:defun list-directory-registrations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-directory-registrations-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'pca-connector-ad-request aws-sdk/generator/operation::input "GET"
        "/directoryRegistrations" "ListDirectoryRegistrations"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-directory-registrations))
(common-lisp:progn
 (common-lisp:defun list-service-principal-names
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key directory-registration-arn max-results
                     next-token)
   (common-lisp:declare
    (common-lisp:ignorable directory-registration-arn max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-service-principal-names-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'pca-connector-ad-request aws-sdk/generator/operation::input "GET"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil
                              "/directoryRegistrations/~A/servicePrincipalNames"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'directory-registration-arn))))
        "ListServicePrincipalNames"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-service-principal-names))
(common-lisp:progn
 (common-lisp:defun list-tags-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn)
   (common-lisp:declare (common-lisp:ignorable resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-for-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'pca-connector-ad-request aws-sdk/generator/operation::input "GET"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/tags/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'resource-arn))))
        "ListTagsForResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-tags-for-resource))
(common-lisp:progn
 (common-lisp:defun list-template-group-access-control-entries
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token template-arn)
   (common-lisp:declare
    (common-lisp:ignorable max-results next-token template-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-template-group-access-control-entries-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'pca-connector-ad-request aws-sdk/generator/operation::input "GET"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil
                              "/templates/~A/accessControlEntries"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'template-arn))))
        "ListTemplateGroupAccessControlEntries"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-template-group-access-control-entries))
(common-lisp:progn
 (common-lisp:defun list-templates
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key connector-arn max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable connector-arn max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-templates-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'pca-connector-ad-request aws-sdk/generator/operation::input "GET"
        "/templates" "ListTemplates"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-templates))
(common-lisp:progn
 (common-lisp:defun tag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tags)
   (common-lisp:declare (common-lisp:ignorable resource-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'pca-connector-ad-request aws-sdk/generator/operation::input "POST"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/tags/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'resource-arn))))
        "TagResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'tag-resource))
(common-lisp:progn
 (common-lisp:defun untag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tag-keys)
   (common-lisp:declare (common-lisp:ignorable resource-arn tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'pca-connector-ad-request aws-sdk/generator/operation::input "DELETE"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/tags/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'resource-arn))))
        "UntagResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'untag-resource))
(common-lisp:progn
 (common-lisp:defun update-template
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key definition
                     reenroll-all-certificate-holders template-arn)
   (common-lisp:declare
    (common-lisp:ignorable definition reenroll-all-certificate-holders
     template-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-template-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'pca-connector-ad-request aws-sdk/generator/operation::input "PATCH"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/templates/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'template-arn))))
        "UpdateTemplate"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-template))
(common-lisp:progn
 (common-lisp:defun update-template-group-access-control-entry
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key access-rights group-display-name
                     group-security-identifier template-arn)
   (common-lisp:declare
    (common-lisp:ignorable access-rights group-display-name
     group-security-identifier template-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-template-group-access-control-entry-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'pca-connector-ad-request aws-sdk/generator/operation::input "PATCH"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil
                              "/templates/~A/accessControlEntries/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'template-arn))
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'group-security-identifier))))
        "UpdateTemplateGroupAccessControlEntry"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-template-group-access-control-entry))
